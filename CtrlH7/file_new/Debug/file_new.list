
file_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d748  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800d9e8  0800d9e8  0001d9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dad8  0800dad8  0001dad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dae0  0800dae0  0001dae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dae4  0800dae4  0001dae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  0800dae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004994  20000014  0800dafc  00020014  2**2
                  ALLOC
  8 .RAM_D1       00000118  24000000  0800dafc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 ._user_heap_stack 00000600  200049a8  200049a8  000349a8  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002c6d9  00000000  00000000  00030146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004a7e  00000000  00000000  0005c81f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000017a8  00000000  00000000  000612a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001630  00000000  00000000  00062a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000395ee  00000000  00000000  00064078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001dca7  00000000  00000000  0009d666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016c1ef  00000000  00000000  000bb30d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  002274fc  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006294  00000000  00000000  00227550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000014 	.word	0x20000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d9d0 	.word	0x0800d9d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000018 	.word	0x20000018
 80002dc:	0800d9d0 	.word	0x0800d9d0

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <OpenWrt_Delay>:

/**
 * @brief  跳过OpenWrt开机启动信息(dmesg)
 */
void OpenWrt_Delay(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
//	while ((DownDataReceive[0] != 0x25)
//			| (DownDataReceive[Up_UART_RXLen - 1] != 0x21))
//	{
//		HAL_Delay(1);
//	}
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <CaptureDownData>:
/**
 * @brief 捕获上位机向下位机发送的指令
 * @return DownDataDef 上位机向下位机发送的指令
 */
DownDataDef CaptureDownData(void)
{
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b090      	sub	sp, #64	; 0x40
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	DownDataDef CaptureData;

	CaptureData.StraightNum = ((DownDataReceive[1] << 8) | DownDataReceive[2]);
 80005f0:	4b4a      	ldr	r3, [pc, #296]	; (800071c <CaptureDownData+0x134>)
 80005f2:	785b      	ldrb	r3, [r3, #1]
 80005f4:	021b      	lsls	r3, r3, #8
 80005f6:	b21a      	sxth	r2, r3
 80005f8:	4b48      	ldr	r3, [pc, #288]	; (800071c <CaptureDownData+0x134>)
 80005fa:	789b      	ldrb	r3, [r3, #2]
 80005fc:	b21b      	sxth	r3, r3
 80005fe:	4313      	orrs	r3, r2
 8000600:	b21b      	sxth	r3, r3
 8000602:	b29b      	uxth	r3, r3
 8000604:	81bb      	strh	r3, [r7, #12]
	CaptureData.RotateNum = ((DownDataReceive[3] << 8) | DownDataReceive[4]);
 8000606:	4b45      	ldr	r3, [pc, #276]	; (800071c <CaptureDownData+0x134>)
 8000608:	78db      	ldrb	r3, [r3, #3]
 800060a:	021b      	lsls	r3, r3, #8
 800060c:	b21a      	sxth	r2, r3
 800060e:	4b43      	ldr	r3, [pc, #268]	; (800071c <CaptureDownData+0x134>)
 8000610:	791b      	ldrb	r3, [r3, #4]
 8000612:	b21b      	sxth	r3, r3
 8000614:	4313      	orrs	r3, r2
 8000616:	b21b      	sxth	r3, r3
 8000618:	b29b      	uxth	r3, r3
 800061a:	81fb      	strh	r3, [r7, #14]
	CaptureData.VerticalNum = ((DownDataReceive[5] << 8) | DownDataReceive[6]);
 800061c:	4b3f      	ldr	r3, [pc, #252]	; (800071c <CaptureDownData+0x134>)
 800061e:	795b      	ldrb	r3, [r3, #5]
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	b21a      	sxth	r2, r3
 8000624:	4b3d      	ldr	r3, [pc, #244]	; (800071c <CaptureDownData+0x134>)
 8000626:	799b      	ldrb	r3, [r3, #6]
 8000628:	b21b      	sxth	r3, r3
 800062a:	4313      	orrs	r3, r2
 800062c:	b21b      	sxth	r3, r3
 800062e:	b29b      	uxth	r3, r3
 8000630:	823b      	strh	r3, [r7, #16]
	CaptureData.LightPWM = ((DownDataReceive[7] << 8) | DownDataReceive[8]);
 8000632:	4b3a      	ldr	r3, [pc, #232]	; (800071c <CaptureDownData+0x134>)
 8000634:	79db      	ldrb	r3, [r3, #7]
 8000636:	021b      	lsls	r3, r3, #8
 8000638:	4a38      	ldr	r2, [pc, #224]	; (800071c <CaptureDownData+0x134>)
 800063a:	7a12      	ldrb	r2, [r2, #8]
 800063c:	4313      	orrs	r3, r2
 800063e:	617b      	str	r3, [r7, #20]
	CaptureData.THPWM = ((DownDataReceive[9] << 8) | DownDataReceive[10]);
 8000640:	4b36      	ldr	r3, [pc, #216]	; (800071c <CaptureDownData+0x134>)
 8000642:	7a5b      	ldrb	r3, [r3, #9]
 8000644:	021b      	lsls	r3, r3, #8
 8000646:	4a35      	ldr	r2, [pc, #212]	; (800071c <CaptureDownData+0x134>)
 8000648:	7a92      	ldrb	r2, [r2, #10]
 800064a:	4313      	orrs	r3, r2
 800064c:	61bb      	str	r3, [r7, #24]
	CaptureData.TranspPWM = ((DownDataReceive[11] << 8) | DownDataReceive[12]);
 800064e:	4b33      	ldr	r3, [pc, #204]	; (800071c <CaptureDownData+0x134>)
 8000650:	7adb      	ldrb	r3, [r3, #11]
 8000652:	021b      	lsls	r3, r3, #8
 8000654:	4a31      	ldr	r2, [pc, #196]	; (800071c <CaptureDownData+0x134>)
 8000656:	7b12      	ldrb	r2, [r2, #12]
 8000658:	4313      	orrs	r3, r2
 800065a:	61fb      	str	r3, [r7, #28]
	CaptureData.ArmPWM[0] = ((DownDataReceive[13] << 8) | DownDataReceive[14]);
 800065c:	4b2f      	ldr	r3, [pc, #188]	; (800071c <CaptureDownData+0x134>)
 800065e:	7b5b      	ldrb	r3, [r3, #13]
 8000660:	021b      	lsls	r3, r3, #8
 8000662:	4a2e      	ldr	r2, [pc, #184]	; (800071c <CaptureDownData+0x134>)
 8000664:	7b92      	ldrb	r2, [r2, #14]
 8000666:	4313      	orrs	r3, r2
 8000668:	623b      	str	r3, [r7, #32]
	CaptureData.ArmPWM[1] = ((DownDataReceive[15] << 8) | DownDataReceive[16]);
 800066a:	4b2c      	ldr	r3, [pc, #176]	; (800071c <CaptureDownData+0x134>)
 800066c:	7bdb      	ldrb	r3, [r3, #15]
 800066e:	021b      	lsls	r3, r3, #8
 8000670:	4a2a      	ldr	r2, [pc, #168]	; (800071c <CaptureDownData+0x134>)
 8000672:	7c12      	ldrb	r2, [r2, #16]
 8000674:	4313      	orrs	r3, r2
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
	CaptureData.ArmPWM[2] = ((DownDataReceive[17] << 8) | DownDataReceive[18]);
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <CaptureDownData+0x134>)
 800067a:	7c5b      	ldrb	r3, [r3, #17]
 800067c:	021b      	lsls	r3, r3, #8
 800067e:	4a27      	ldr	r2, [pc, #156]	; (800071c <CaptureDownData+0x134>)
 8000680:	7c92      	ldrb	r2, [r2, #18]
 8000682:	4313      	orrs	r3, r2
 8000684:	62bb      	str	r3, [r7, #40]	; 0x28
	CaptureData.ArmPWM[3] = ((DownDataReceive[19] << 8) | DownDataReceive[20]);
 8000686:	4b25      	ldr	r3, [pc, #148]	; (800071c <CaptureDownData+0x134>)
 8000688:	7cdb      	ldrb	r3, [r3, #19]
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	4a23      	ldr	r2, [pc, #140]	; (800071c <CaptureDownData+0x134>)
 800068e:	7d12      	ldrb	r2, [r2, #20]
 8000690:	4313      	orrs	r3, r2
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
	CaptureData.ArmPWM[4] = ((DownDataReceive[21] << 8) | DownDataReceive[22]);
 8000694:	4b21      	ldr	r3, [pc, #132]	; (800071c <CaptureDownData+0x134>)
 8000696:	7d5b      	ldrb	r3, [r3, #21]
 8000698:	021b      	lsls	r3, r3, #8
 800069a:	4a20      	ldr	r2, [pc, #128]	; (800071c <CaptureDownData+0x134>)
 800069c:	7d92      	ldrb	r2, [r2, #22]
 800069e:	4313      	orrs	r3, r2
 80006a0:	633b      	str	r3, [r7, #48]	; 0x30
	CaptureData.ArmPWM[5] = ((DownDataReceive[23] << 8) | DownDataReceive[24]);
 80006a2:	4b1e      	ldr	r3, [pc, #120]	; (800071c <CaptureDownData+0x134>)
 80006a4:	7ddb      	ldrb	r3, [r3, #23]
 80006a6:	021b      	lsls	r3, r3, #8
 80006a8:	4a1c      	ldr	r2, [pc, #112]	; (800071c <CaptureDownData+0x134>)
 80006aa:	7e12      	ldrb	r2, [r2, #24]
 80006ac:	4313      	orrs	r3, r2
 80006ae:	637b      	str	r3, [r7, #52]	; 0x34
	CaptureData.ResPWM = ((DownDataReceive[25] << 8) | DownDataReceive[26]);
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <CaptureDownData+0x134>)
 80006b2:	7e5b      	ldrb	r3, [r3, #25]
 80006b4:	021b      	lsls	r3, r3, #8
 80006b6:	4a19      	ldr	r2, [pc, #100]	; (800071c <CaptureDownData+0x134>)
 80006b8:	7e92      	ldrb	r2, [r2, #26]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	63bb      	str	r3, [r7, #56]	; 0x38
#ifdef CtrlSide
	CaptureData.Mode = (DownDataReceive[27]); //方便数据下传与中途获取
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <CaptureDownData+0x134>)
 80006c0:	7edb      	ldrb	r3, [r3, #27]
 80006c2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	CaptureData.Relay = (DownDataReceive[27]);
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <CaptureDownData+0x134>)
 80006c8:	7edb      	ldrb	r3, [r3, #27]
 80006ca:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
#else
	CaptureData.Mode = (DownDataReceive[27] & 0b0001);
	CaptureData.Relay = (DownDataReceive[27] & 0b1000);
#endif
#endif
	CaptureData.IdTest = IdTest(DownDataReceive, 0, 44, 28);
 80006ce:	231c      	movs	r3, #28
 80006d0:	222c      	movs	r2, #44	; 0x2c
 80006d2:	2100      	movs	r1, #0
 80006d4:	4811      	ldr	r0, [pc, #68]	; (800071c <CaptureDownData+0x134>)
 80006d6:	f000 fbcd 	bl	8000e74 <IdTest>
 80006da:	4603      	mov	r3, r0
 80006dc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	__HAL_UART_ENABLE_IT(&Up_UART, UART_IT_IDLE);
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <CaptureDownData+0x138>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <CaptureDownData+0x138>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f042 0210 	orr.w	r2, r2, #16
 80006ee:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Up_UART, DownDataReceive, Up_UART_RXLen);
 80006f0:	221e      	movs	r2, #30
 80006f2:	490a      	ldr	r1, [pc, #40]	; (800071c <CaptureDownData+0x134>)
 80006f4:	480a      	ldr	r0, [pc, #40]	; (8000720 <CaptureDownData+0x138>)
 80006f6:	f009 f909 	bl	800990c <HAL_UART_Receive_DMA>

	return CaptureData;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	461d      	mov	r5, r3
 80006fe:	f107 040c 	add.w	r4, r7, #12
 8000702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000704:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000706:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000708:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800070a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800070c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800070e:	6823      	ldr	r3, [r4, #0]
 8000710:	602b      	str	r3, [r5, #0]
}
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	3740      	adds	r7, #64	; 0x40
 8000716:	46bd      	mov	sp, r7
 8000718:	bdb0      	pop	{r4, r5, r7, pc}
 800071a:	bf00      	nop
 800071c:	24000000 	.word	0x24000000
 8000720:	200044d0 	.word	0x200044d0

08000724 <SendDownData>:
 * @brief 向下位机发送数据
 * @param  SendData         待发送的数据结构体
 * @note 已完成Debug
 */
void SendDownData(DownDataDef SendData)
{
 8000724:	b084      	sub	sp, #16
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0
 800072a:	f107 0c08 	add.w	ip, r7, #8
 800072e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	DownDataSend[0] = 0x25;
 8000732:	4b4a      	ldr	r3, [pc, #296]	; (800085c <SendDownData+0x138>)
 8000734:	2225      	movs	r2, #37	; 0x25
 8000736:	701a      	strb	r2, [r3, #0]
	DownDataSend[1] = SendData.StraightNum >> 8;
 8000738:	893b      	ldrh	r3, [r7, #8]
 800073a:	0a1b      	lsrs	r3, r3, #8
 800073c:	b29b      	uxth	r3, r3
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b46      	ldr	r3, [pc, #280]	; (800085c <SendDownData+0x138>)
 8000742:	705a      	strb	r2, [r3, #1]
	DownDataSend[2] = SendData.StraightNum;
 8000744:	893b      	ldrh	r3, [r7, #8]
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4b44      	ldr	r3, [pc, #272]	; (800085c <SendDownData+0x138>)
 800074a:	709a      	strb	r2, [r3, #2]
	DownDataSend[3] = SendData.RotateNum >> 8;
 800074c:	897b      	ldrh	r3, [r7, #10]
 800074e:	0a1b      	lsrs	r3, r3, #8
 8000750:	b29b      	uxth	r3, r3
 8000752:	b2da      	uxtb	r2, r3
 8000754:	4b41      	ldr	r3, [pc, #260]	; (800085c <SendDownData+0x138>)
 8000756:	70da      	strb	r2, [r3, #3]
	DownDataSend[4] = SendData.RotateNum;
 8000758:	897b      	ldrh	r3, [r7, #10]
 800075a:	b2da      	uxtb	r2, r3
 800075c:	4b3f      	ldr	r3, [pc, #252]	; (800085c <SendDownData+0x138>)
 800075e:	711a      	strb	r2, [r3, #4]
	DownDataSend[5] = SendData.VerticalNum >> 8;
 8000760:	89bb      	ldrh	r3, [r7, #12]
 8000762:	0a1b      	lsrs	r3, r3, #8
 8000764:	b29b      	uxth	r3, r3
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b3c      	ldr	r3, [pc, #240]	; (800085c <SendDownData+0x138>)
 800076a:	715a      	strb	r2, [r3, #5]
	DownDataSend[6] = SendData.VerticalNum;
 800076c:	89bb      	ldrh	r3, [r7, #12]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b3a      	ldr	r3, [pc, #232]	; (800085c <SendDownData+0x138>)
 8000772:	719a      	strb	r2, [r3, #6]
	DownDataSend[7] = SendData.LightPWM >> 8;
 8000774:	693b      	ldr	r3, [r7, #16]
 8000776:	0a1b      	lsrs	r3, r3, #8
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b38      	ldr	r3, [pc, #224]	; (800085c <SendDownData+0x138>)
 800077c:	71da      	strb	r2, [r3, #7]
	DownDataSend[8] = SendData.LightPWM;
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b36      	ldr	r3, [pc, #216]	; (800085c <SendDownData+0x138>)
 8000784:	721a      	strb	r2, [r3, #8]
	DownDataSend[9] = SendData.THPWM >> 8;
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	0a1b      	lsrs	r3, r3, #8
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b33      	ldr	r3, [pc, #204]	; (800085c <SendDownData+0x138>)
 800078e:	725a      	strb	r2, [r3, #9]
	DownDataSend[10] = SendData.THPWM;
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b31      	ldr	r3, [pc, #196]	; (800085c <SendDownData+0x138>)
 8000796:	729a      	strb	r2, [r3, #10]
	DownDataSend[11] = SendData.TranspPWM >> 8;
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	0a1b      	lsrs	r3, r3, #8
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b2f      	ldr	r3, [pc, #188]	; (800085c <SendDownData+0x138>)
 80007a0:	72da      	strb	r2, [r3, #11]
	DownDataSend[12] = SendData.TranspPWM;
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b2d      	ldr	r3, [pc, #180]	; (800085c <SendDownData+0x138>)
 80007a8:	731a      	strb	r2, [r3, #12]
	DownDataSend[13] = SendData.ArmPWM[0] >> 8;
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	0a1b      	lsrs	r3, r3, #8
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b2a      	ldr	r3, [pc, #168]	; (800085c <SendDownData+0x138>)
 80007b2:	735a      	strb	r2, [r3, #13]
	DownDataSend[14] = SendData.ArmPWM[0];
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	4b28      	ldr	r3, [pc, #160]	; (800085c <SendDownData+0x138>)
 80007ba:	739a      	strb	r2, [r3, #14]
	DownDataSend[15] = SendData.ArmPWM[1] >> 8;
 80007bc:	6a3b      	ldr	r3, [r7, #32]
 80007be:	0a1b      	lsrs	r3, r3, #8
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b26      	ldr	r3, [pc, #152]	; (800085c <SendDownData+0x138>)
 80007c4:	73da      	strb	r2, [r3, #15]
	DownDataSend[16] = SendData.ArmPWM[1];
 80007c6:	6a3b      	ldr	r3, [r7, #32]
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4b24      	ldr	r3, [pc, #144]	; (800085c <SendDownData+0x138>)
 80007cc:	741a      	strb	r2, [r3, #16]
	DownDataSend[17] = SendData.ArmPWM[2] >> 8;
 80007ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d0:	0a1b      	lsrs	r3, r3, #8
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b21      	ldr	r3, [pc, #132]	; (800085c <SendDownData+0x138>)
 80007d6:	745a      	strb	r2, [r3, #17]
	DownDataSend[18] = SendData.ArmPWM[2];
 80007d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <SendDownData+0x138>)
 80007de:	749a      	strb	r2, [r3, #18]
	DownDataSend[19] = SendData.ArmPWM[3] >> 8;
 80007e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e2:	0a1b      	lsrs	r3, r3, #8
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4b1d      	ldr	r3, [pc, #116]	; (800085c <SendDownData+0x138>)
 80007e8:	74da      	strb	r2, [r3, #19]
	DownDataSend[20] = SendData.ArmPWM[3];
 80007ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4b1b      	ldr	r3, [pc, #108]	; (800085c <SendDownData+0x138>)
 80007f0:	751a      	strb	r2, [r3, #20]
	DownDataSend[21] = SendData.ArmPWM[4] >> 8;
 80007f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <SendDownData+0x138>)
 80007fa:	755a      	strb	r2, [r3, #21]
	DownDataSend[22] = SendData.ArmPWM[4];
 80007fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4b16      	ldr	r3, [pc, #88]	; (800085c <SendDownData+0x138>)
 8000802:	759a      	strb	r2, [r3, #22]
	DownDataSend[23] = SendData.ArmPWM[5] >> 8;
 8000804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000806:	0a1b      	lsrs	r3, r3, #8
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <SendDownData+0x138>)
 800080c:	75da      	strb	r2, [r3, #23]
	DownDataSend[24] = SendData.ArmPWM[5];
 800080e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <SendDownData+0x138>)
 8000814:	761a      	strb	r2, [r3, #24]
	DownDataSend[25] = SendData.ResPWM >> 8;
 8000816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000818:	0a1b      	lsrs	r3, r3, #8
 800081a:	b2da      	uxtb	r2, r3
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <SendDownData+0x138>)
 800081e:	765a      	strb	r2, [r3, #25]
	DownDataSend[26] = SendData.ResPWM;
 8000820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000822:	b2da      	uxtb	r2, r3
 8000824:	4b0d      	ldr	r3, [pc, #52]	; (800085c <SendDownData+0x138>)
 8000826:	769a      	strb	r2, [r3, #26]
	DownDataSend[27] = SendData.Relay; //直接下传数据
 8000828:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800082c:	4b0b      	ldr	r3, [pc, #44]	; (800085c <SendDownData+0x138>)
 800082e:	76da      	strb	r2, [r3, #27]
	DownDataSend[28] = XorCaculate(DownDataSend, 28);
 8000830:	211c      	movs	r1, #28
 8000832:	480a      	ldr	r0, [pc, #40]	; (800085c <SendDownData+0x138>)
 8000834:	f000 fb32 	bl	8000e9c <XorCaculate>
 8000838:	4603      	mov	r3, r0
 800083a:	461a      	mov	r2, r3
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <SendDownData+0x138>)
 800083e:	771a      	strb	r2, [r3, #28]
	DownDataSend[29] = 0x21;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <SendDownData+0x138>)
 8000842:	2221      	movs	r2, #33	; 0x21
 8000844:	775a      	strb	r2, [r3, #29]

	HAL_UART_Transmit_DMA(&Down_UART, DownDataSend, Down_UART_TXLEN);
 8000846:	221e      	movs	r2, #30
 8000848:	4904      	ldr	r1, [pc, #16]	; (800085c <SendDownData+0x138>)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <SendDownData+0x13c>)
 800084c:	f008 ffde 	bl	800980c <HAL_UART_Transmit_DMA>
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000858:	b004      	add	sp, #16
 800085a:	4770      	bx	lr
 800085c:	24000020 	.word	0x24000020
 8000860:	200045ec 	.word	0x200045ec

08000864 <CaptureUpData>:
/**
 * @brief 捕获下位向上位发送的数据
 * @return UpDataDef 下位机上传的数据结构体
 */
UpDataDef CaptureUpData(void)
{
 8000864:	b5b0      	push	{r4, r5, r7, lr}
 8000866:	b08e      	sub	sp, #56	; 0x38
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	UpDataDef CaptureData;

	CaptureData.CabinNum = (UpDataReceive[1] & 0b0001); //0b0000控制仓，0b0001==1电源仓
 800086c:	4b8b      	ldr	r3, [pc, #556]	; (8000a9c <CaptureUpData+0x238>)
 800086e:	785b      	ldrb	r3, [r3, #1]
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	b2db      	uxtb	r3, r3
 8000876:	723b      	strb	r3, [r7, #8]
	CaptureData.WaterDetect = (UpDataReceive[1] & 0b0010); //0b0000正常，0b0010==2漏水
 8000878:	4b88      	ldr	r3, [pc, #544]	; (8000a9c <CaptureUpData+0x238>)
 800087a:	785b      	ldrb	r3, [r3, #1]
 800087c:	f003 0302 	and.w	r3, r3, #2
 8000880:	b2db      	uxtb	r3, r3
 8000882:	727b      	strb	r3, [r7, #9]
	CaptureData.CabinTemperature = ((UpDataReceive[3] << 8) | UpDataReceive[2]);
 8000884:	4b85      	ldr	r3, [pc, #532]	; (8000a9c <CaptureUpData+0x238>)
 8000886:	78db      	ldrb	r3, [r3, #3]
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	b21a      	sxth	r2, r3
 800088c:	4b83      	ldr	r3, [pc, #524]	; (8000a9c <CaptureUpData+0x238>)
 800088e:	789b      	ldrb	r3, [r3, #2]
 8000890:	b21b      	sxth	r3, r3
 8000892:	4313      	orrs	r3, r2
 8000894:	b21b      	sxth	r3, r3
 8000896:	b29b      	uxth	r3, r3
 8000898:	817b      	strh	r3, [r7, #10]
	CaptureData.CabinBaro = ((UpDataReceive[7] << 24) | (UpDataReceive[6] << 16)
 800089a:	4b80      	ldr	r3, [pc, #512]	; (8000a9c <CaptureUpData+0x238>)
 800089c:	79db      	ldrb	r3, [r3, #7]
 800089e:	061a      	lsls	r2, r3, #24
 80008a0:	4b7e      	ldr	r3, [pc, #504]	; (8000a9c <CaptureUpData+0x238>)
 80008a2:	799b      	ldrb	r3, [r3, #6]
 80008a4:	041b      	lsls	r3, r3, #16
 80008a6:	431a      	orrs	r2, r3
			| (UpDataReceive[5] << 8) | UpDataReceive[4]);
 80008a8:	4b7c      	ldr	r3, [pc, #496]	; (8000a9c <CaptureUpData+0x238>)
 80008aa:	795b      	ldrb	r3, [r3, #5]
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	4313      	orrs	r3, r2
 80008b0:	4a7a      	ldr	r2, [pc, #488]	; (8000a9c <CaptureUpData+0x238>)
 80008b2:	7912      	ldrb	r2, [r2, #4]
 80008b4:	4313      	orrs	r3, r2
	CaptureData.CabinBaro = ((UpDataReceive[7] << 24) | (UpDataReceive[6] << 16)
 80008b6:	60fb      	str	r3, [r7, #12]
	CaptureData.CabinHum = ((UpDataReceive[9] << 8) | UpDataReceive[8]);
 80008b8:	4b78      	ldr	r3, [pc, #480]	; (8000a9c <CaptureUpData+0x238>)
 80008ba:	7a5b      	ldrb	r3, [r3, #9]
 80008bc:	021b      	lsls	r3, r3, #8
 80008be:	b21a      	sxth	r2, r3
 80008c0:	4b76      	ldr	r3, [pc, #472]	; (8000a9c <CaptureUpData+0x238>)
 80008c2:	7a1b      	ldrb	r3, [r3, #8]
 80008c4:	b21b      	sxth	r3, r3
 80008c6:	4313      	orrs	r3, r2
 80008c8:	b21b      	sxth	r3, r3
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	823b      	strh	r3, [r7, #16]
	CaptureData.AccNum[0] = ((UpDataReceive[11] << 8) | UpDataReceive[10]);
 80008ce:	4b73      	ldr	r3, [pc, #460]	; (8000a9c <CaptureUpData+0x238>)
 80008d0:	7adb      	ldrb	r3, [r3, #11]
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	b21a      	sxth	r2, r3
 80008d6:	4b71      	ldr	r3, [pc, #452]	; (8000a9c <CaptureUpData+0x238>)
 80008d8:	7a9b      	ldrb	r3, [r3, #10]
 80008da:	b21b      	sxth	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b21b      	sxth	r3, r3
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	827b      	strh	r3, [r7, #18]
	CaptureData.AccNum[1] = ((UpDataReceive[13] << 8) | UpDataReceive[12]);
 80008e4:	4b6d      	ldr	r3, [pc, #436]	; (8000a9c <CaptureUpData+0x238>)
 80008e6:	7b5b      	ldrb	r3, [r3, #13]
 80008e8:	021b      	lsls	r3, r3, #8
 80008ea:	b21a      	sxth	r2, r3
 80008ec:	4b6b      	ldr	r3, [pc, #428]	; (8000a9c <CaptureUpData+0x238>)
 80008ee:	7b1b      	ldrb	r3, [r3, #12]
 80008f0:	b21b      	sxth	r3, r3
 80008f2:	4313      	orrs	r3, r2
 80008f4:	b21b      	sxth	r3, r3
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	82bb      	strh	r3, [r7, #20]
	CaptureData.AccNum[2] = ((UpDataReceive[15] << 8) | UpDataReceive[14]);
 80008fa:	4b68      	ldr	r3, [pc, #416]	; (8000a9c <CaptureUpData+0x238>)
 80008fc:	7bdb      	ldrb	r3, [r3, #15]
 80008fe:	021b      	lsls	r3, r3, #8
 8000900:	b21a      	sxth	r2, r3
 8000902:	4b66      	ldr	r3, [pc, #408]	; (8000a9c <CaptureUpData+0x238>)
 8000904:	7b9b      	ldrb	r3, [r3, #14]
 8000906:	b21b      	sxth	r3, r3
 8000908:	4313      	orrs	r3, r2
 800090a:	b21b      	sxth	r3, r3
 800090c:	b29b      	uxth	r3, r3
 800090e:	82fb      	strh	r3, [r7, #22]
	CaptureData.RotNum[0] = ((UpDataReceive[17] << 8) | UpDataReceive[16]);
 8000910:	4b62      	ldr	r3, [pc, #392]	; (8000a9c <CaptureUpData+0x238>)
 8000912:	7c5b      	ldrb	r3, [r3, #17]
 8000914:	021b      	lsls	r3, r3, #8
 8000916:	b21a      	sxth	r2, r3
 8000918:	4b60      	ldr	r3, [pc, #384]	; (8000a9c <CaptureUpData+0x238>)
 800091a:	7c1b      	ldrb	r3, [r3, #16]
 800091c:	b21b      	sxth	r3, r3
 800091e:	4313      	orrs	r3, r2
 8000920:	b21b      	sxth	r3, r3
 8000922:	b29b      	uxth	r3, r3
 8000924:	833b      	strh	r3, [r7, #24]
	CaptureData.RotNum[1] = ((UpDataReceive[19] << 8) | UpDataReceive[18]);
 8000926:	4b5d      	ldr	r3, [pc, #372]	; (8000a9c <CaptureUpData+0x238>)
 8000928:	7cdb      	ldrb	r3, [r3, #19]
 800092a:	021b      	lsls	r3, r3, #8
 800092c:	b21a      	sxth	r2, r3
 800092e:	4b5b      	ldr	r3, [pc, #364]	; (8000a9c <CaptureUpData+0x238>)
 8000930:	7c9b      	ldrb	r3, [r3, #18]
 8000932:	b21b      	sxth	r3, r3
 8000934:	4313      	orrs	r3, r2
 8000936:	b21b      	sxth	r3, r3
 8000938:	b29b      	uxth	r3, r3
 800093a:	837b      	strh	r3, [r7, #26]
	CaptureData.RotNum[2] = ((UpDataReceive[21] << 8) | UpDataReceive[20]);
 800093c:	4b57      	ldr	r3, [pc, #348]	; (8000a9c <CaptureUpData+0x238>)
 800093e:	7d5b      	ldrb	r3, [r3, #21]
 8000940:	021b      	lsls	r3, r3, #8
 8000942:	b21a      	sxth	r2, r3
 8000944:	4b55      	ldr	r3, [pc, #340]	; (8000a9c <CaptureUpData+0x238>)
 8000946:	7d1b      	ldrb	r3, [r3, #20]
 8000948:	b21b      	sxth	r3, r3
 800094a:	4313      	orrs	r3, r2
 800094c:	b21b      	sxth	r3, r3
 800094e:	b29b      	uxth	r3, r3
 8000950:	83bb      	strh	r3, [r7, #28]
	CaptureData.EulNum[0] = ((UpDataReceive[23] << 8) | UpDataReceive[22]);
 8000952:	4b52      	ldr	r3, [pc, #328]	; (8000a9c <CaptureUpData+0x238>)
 8000954:	7ddb      	ldrb	r3, [r3, #23]
 8000956:	021b      	lsls	r3, r3, #8
 8000958:	b21a      	sxth	r2, r3
 800095a:	4b50      	ldr	r3, [pc, #320]	; (8000a9c <CaptureUpData+0x238>)
 800095c:	7d9b      	ldrb	r3, [r3, #22]
 800095e:	b21b      	sxth	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b21b      	sxth	r3, r3
 8000964:	b29b      	uxth	r3, r3
 8000966:	83fb      	strh	r3, [r7, #30]
	CaptureData.EulNum[1] = ((UpDataReceive[25] << 8) | UpDataReceive[24]);
 8000968:	4b4c      	ldr	r3, [pc, #304]	; (8000a9c <CaptureUpData+0x238>)
 800096a:	7e5b      	ldrb	r3, [r3, #25]
 800096c:	021b      	lsls	r3, r3, #8
 800096e:	b21a      	sxth	r2, r3
 8000970:	4b4a      	ldr	r3, [pc, #296]	; (8000a9c <CaptureUpData+0x238>)
 8000972:	7e1b      	ldrb	r3, [r3, #24]
 8000974:	b21b      	sxth	r3, r3
 8000976:	4313      	orrs	r3, r2
 8000978:	b21b      	sxth	r3, r3
 800097a:	b29b      	uxth	r3, r3
 800097c:	843b      	strh	r3, [r7, #32]
	CaptureData.EulNum[2] = ((UpDataReceive[27] << 8) | UpDataReceive[26]);
 800097e:	4b47      	ldr	r3, [pc, #284]	; (8000a9c <CaptureUpData+0x238>)
 8000980:	7edb      	ldrb	r3, [r3, #27]
 8000982:	021b      	lsls	r3, r3, #8
 8000984:	b21a      	sxth	r2, r3
 8000986:	4b45      	ldr	r3, [pc, #276]	; (8000a9c <CaptureUpData+0x238>)
 8000988:	7e9b      	ldrb	r3, [r3, #26]
 800098a:	b21b      	sxth	r3, r3
 800098c:	4313      	orrs	r3, r2
 800098e:	b21b      	sxth	r3, r3
 8000990:	b29b      	uxth	r3, r3
 8000992:	847b      	strh	r3, [r7, #34]	; 0x22
	CaptureData.MagNum[0] = ((UpDataReceive[29] << 8) | UpDataReceive[28]);
 8000994:	4b41      	ldr	r3, [pc, #260]	; (8000a9c <CaptureUpData+0x238>)
 8000996:	7f5b      	ldrb	r3, [r3, #29]
 8000998:	021b      	lsls	r3, r3, #8
 800099a:	b21a      	sxth	r2, r3
 800099c:	4b3f      	ldr	r3, [pc, #252]	; (8000a9c <CaptureUpData+0x238>)
 800099e:	7f1b      	ldrb	r3, [r3, #28]
 80009a0:	b21b      	sxth	r3, r3
 80009a2:	4313      	orrs	r3, r2
 80009a4:	b21b      	sxth	r3, r3
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	84bb      	strh	r3, [r7, #36]	; 0x24
	CaptureData.MagNum[1] = ((UpDataReceive[31] << 8) | UpDataReceive[30]);
 80009aa:	4b3c      	ldr	r3, [pc, #240]	; (8000a9c <CaptureUpData+0x238>)
 80009ac:	7fdb      	ldrb	r3, [r3, #31]
 80009ae:	021b      	lsls	r3, r3, #8
 80009b0:	b21a      	sxth	r2, r3
 80009b2:	4b3a      	ldr	r3, [pc, #232]	; (8000a9c <CaptureUpData+0x238>)
 80009b4:	7f9b      	ldrb	r3, [r3, #30]
 80009b6:	b21b      	sxth	r3, r3
 80009b8:	4313      	orrs	r3, r2
 80009ba:	b21b      	sxth	r3, r3
 80009bc:	b29b      	uxth	r3, r3
 80009be:	84fb      	strh	r3, [r7, #38]	; 0x26
	CaptureData.MagNum[2] = ((UpDataReceive[33] << 8) | UpDataReceive[32]);
 80009c0:	4b36      	ldr	r3, [pc, #216]	; (8000a9c <CaptureUpData+0x238>)
 80009c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009c6:	021b      	lsls	r3, r3, #8
 80009c8:	b21a      	sxth	r2, r3
 80009ca:	4b34      	ldr	r3, [pc, #208]	; (8000a9c <CaptureUpData+0x238>)
 80009cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009d0:	b21b      	sxth	r3, r3
 80009d2:	4313      	orrs	r3, r2
 80009d4:	b21b      	sxth	r3, r3
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	853b      	strh	r3, [r7, #40]	; 0x28
	CaptureData.DepthToBottom = ((UpDataReceive[37] << 24)
 80009da:	4b30      	ldr	r3, [pc, #192]	; (8000a9c <CaptureUpData+0x238>)
 80009dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80009e0:	061a      	lsls	r2, r3, #24
			| (UpDataReceive[36] << 16) | (UpDataReceive[35] << 8)
 80009e2:	4b2e      	ldr	r3, [pc, #184]	; (8000a9c <CaptureUpData+0x238>)
 80009e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80009e8:	041b      	lsls	r3, r3, #16
 80009ea:	431a      	orrs	r2, r3
 80009ec:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <CaptureUpData+0x238>)
 80009ee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80009f2:	021b      	lsls	r3, r3, #8
 80009f4:	4313      	orrs	r3, r2
			| UpDataReceive[34]);
 80009f6:	4a29      	ldr	r2, [pc, #164]	; (8000a9c <CaptureUpData+0x238>)
 80009f8:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 80009fc:	4313      	orrs	r3, r2
	CaptureData.DepthToBottom = ((UpDataReceive[37] << 24)
 80009fe:	633b      	str	r3, [r7, #48]	; 0x30
	CaptureData.Confidence = ((UpDataReceive[39] << 8) | UpDataReceive[38]);
 8000a00:	4b26      	ldr	r3, [pc, #152]	; (8000a9c <CaptureUpData+0x238>)
 8000a02:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000a06:	021b      	lsls	r3, r3, #8
 8000a08:	b21a      	sxth	r2, r3
 8000a0a:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <CaptureUpData+0x238>)
 8000a0c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	4313      	orrs	r3, r2
 8000a14:	b21b      	sxth	r3, r3
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	85fb      	strh	r3, [r7, #46]	; 0x2e
	CaptureData.WaterTemperature =
			((UpDataReceive[40] << 8) | UpDataReceive[41]);
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <CaptureUpData+0x238>)
 8000a1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000a20:	021b      	lsls	r3, r3, #8
 8000a22:	b21a      	sxth	r2, r3
 8000a24:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <CaptureUpData+0x238>)
 8000a26:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000a2a:	b21b      	sxth	r3, r3
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	b21b      	sxth	r3, r3
 8000a30:	b29b      	uxth	r3, r3
	CaptureData.WaterTemperature =
 8000a32:	857b      	strh	r3, [r7, #42]	; 0x2a
	CaptureData.WaterDepth = ((UpDataReceive[42] << 8) | UpDataReceive[43]);
 8000a34:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <CaptureUpData+0x238>)
 8000a36:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000a3a:	021b      	lsls	r3, r3, #8
 8000a3c:	b21a      	sxth	r2, r3
 8000a3e:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <CaptureUpData+0x238>)
 8000a40:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000a44:	b21b      	sxth	r3, r3
 8000a46:	4313      	orrs	r3, r2
 8000a48:	b21b      	sxth	r3, r3
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	CaptureData.IdTest = IdTest(UpDataReceive, 1, 44, 28);
 8000a4e:	231c      	movs	r3, #28
 8000a50:	222c      	movs	r2, #44	; 0x2c
 8000a52:	2101      	movs	r1, #1
 8000a54:	4811      	ldr	r0, [pc, #68]	; (8000a9c <CaptureUpData+0x238>)
 8000a56:	f000 fa0d 	bl	8000e74 <IdTest>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	__HAL_UART_ENABLE_IT(&Down_UART, UART_IT_IDLE);
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <CaptureUpData+0x23c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <CaptureUpData+0x23c>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f042 0210 	orr.w	r2, r2, #16
 8000a6e:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Down_UART, DownDataReceive, Down_UART_RXLen);
 8000a70:	222f      	movs	r2, #47	; 0x2f
 8000a72:	490c      	ldr	r1, [pc, #48]	; (8000aa4 <CaptureUpData+0x240>)
 8000a74:	480a      	ldr	r0, [pc, #40]	; (8000aa0 <CaptureUpData+0x23c>)
 8000a76:	f008 ff49 	bl	800990c <HAL_UART_Receive_DMA>

	return CaptureData;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	461d      	mov	r5, r3
 8000a7e:	f107 0408 	add.w	r4, r7, #8
 8000a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a8a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a8e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	3738      	adds	r7, #56	; 0x38
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bdb0      	pop	{r4, r5, r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	24000040 	.word	0x24000040
 8000aa0:	200045ec 	.word	0x200045ec
 8000aa4:	24000000 	.word	0x24000000

08000aa8 <SendUpData>:
/**
 * @brief 向上位机发送数据
 * @param  SendData         待发送的数据结构体
 */
void SendUpData(UpDataDef SendData)
{
 8000aa8:	b084      	sub	sp, #16
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	f107 0c08 	add.w	ip, r7, #8
 8000ab2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	UpDataSend[0] = 0x25;
 8000ab6:	4b80      	ldr	r3, [pc, #512]	; (8000cb8 <SendUpData+0x210>)
 8000ab8:	2225      	movs	r2, #37	; 0x25
 8000aba:	701a      	strb	r2, [r3, #0]
	UpDataSend[1] = ((SendData.WaterDetect) | (SendData.CabinNum));
 8000abc:	7a7a      	ldrb	r2, [r7, #9]
 8000abe:	7a3b      	ldrb	r3, [r7, #8]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	4b7c      	ldr	r3, [pc, #496]	; (8000cb8 <SendUpData+0x210>)
 8000ac6:	705a      	strb	r2, [r3, #1]
	UpDataSend[2] = SendData.CabinTemperature >> 8;
 8000ac8:	897b      	ldrh	r3, [r7, #10]
 8000aca:	0a1b      	lsrs	r3, r3, #8
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b79      	ldr	r3, [pc, #484]	; (8000cb8 <SendUpData+0x210>)
 8000ad2:	709a      	strb	r2, [r3, #2]
	UpDataSend[3] = SendData.CabinTemperature;
 8000ad4:	897b      	ldrh	r3, [r7, #10]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	4b77      	ldr	r3, [pc, #476]	; (8000cb8 <SendUpData+0x210>)
 8000ada:	70da      	strb	r2, [r3, #3]
	UpDataSend[4] = SendData.CabinBaro >> 16;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	0c1b      	lsrs	r3, r3, #16
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4b75      	ldr	r3, [pc, #468]	; (8000cb8 <SendUpData+0x210>)
 8000ae4:	711a      	strb	r2, [r3, #4]
	UpDataSend[5] = SendData.CabinBaro >> 24;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	0e1b      	lsrs	r3, r3, #24
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	4b72      	ldr	r3, [pc, #456]	; (8000cb8 <SendUpData+0x210>)
 8000aee:	715a      	strb	r2, [r3, #5]
	UpDataSend[6] = SendData.CabinBaro;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	4b70      	ldr	r3, [pc, #448]	; (8000cb8 <SendUpData+0x210>)
 8000af6:	719a      	strb	r2, [r3, #6]
	UpDataSend[7] = SendData.CabinBaro >> 8;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	0a1b      	lsrs	r3, r3, #8
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4b6e      	ldr	r3, [pc, #440]	; (8000cb8 <SendUpData+0x210>)
 8000b00:	71da      	strb	r2, [r3, #7]
	UpDataSend[8] = SendData.CabinHum;
 8000b02:	8a3b      	ldrh	r3, [r7, #16]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4b6c      	ldr	r3, [pc, #432]	; (8000cb8 <SendUpData+0x210>)
 8000b08:	721a      	strb	r2, [r3, #8]
	UpDataSend[9] = SendData.CabinHum >> 8;
 8000b0a:	8a3b      	ldrh	r3, [r7, #16]
 8000b0c:	0a1b      	lsrs	r3, r3, #8
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4b69      	ldr	r3, [pc, #420]	; (8000cb8 <SendUpData+0x210>)
 8000b14:	725a      	strb	r2, [r3, #9]
	UpDataSend[10] = SendData.AccNum[0]; //DEBUG:数据位反转
 8000b16:	8a7b      	ldrh	r3, [r7, #18]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4b67      	ldr	r3, [pc, #412]	; (8000cb8 <SendUpData+0x210>)
 8000b1c:	729a      	strb	r2, [r3, #10]
	UpDataSend[11] = SendData.AccNum[0] >> 8;
 8000b1e:	8a7b      	ldrh	r3, [r7, #18]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4b64      	ldr	r3, [pc, #400]	; (8000cb8 <SendUpData+0x210>)
 8000b28:	72da      	strb	r2, [r3, #11]
	UpDataSend[12] = SendData.AccNum[1];
 8000b2a:	8abb      	ldrh	r3, [r7, #20]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4b62      	ldr	r3, [pc, #392]	; (8000cb8 <SendUpData+0x210>)
 8000b30:	731a      	strb	r2, [r3, #12]
	UpDataSend[13] = SendData.AccNum[1] >> 8;
 8000b32:	8abb      	ldrh	r3, [r7, #20]
 8000b34:	0a1b      	lsrs	r3, r3, #8
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4b5f      	ldr	r3, [pc, #380]	; (8000cb8 <SendUpData+0x210>)
 8000b3c:	735a      	strb	r2, [r3, #13]
	UpDataSend[14] = SendData.AccNum[2];
 8000b3e:	8afb      	ldrh	r3, [r7, #22]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4b5d      	ldr	r3, [pc, #372]	; (8000cb8 <SendUpData+0x210>)
 8000b44:	739a      	strb	r2, [r3, #14]
	UpDataSend[15] = SendData.AccNum[2] >> 8;
 8000b46:	8afb      	ldrh	r3, [r7, #22]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4b5a      	ldr	r3, [pc, #360]	; (8000cb8 <SendUpData+0x210>)
 8000b50:	73da      	strb	r2, [r3, #15]
	UpDataSend[16] = SendData.RotNum[0];
 8000b52:	8b3b      	ldrh	r3, [r7, #24]
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4b58      	ldr	r3, [pc, #352]	; (8000cb8 <SendUpData+0x210>)
 8000b58:	741a      	strb	r2, [r3, #16]
	UpDataSend[17] = SendData.RotNum[0] >> 8;
 8000b5a:	8b3b      	ldrh	r3, [r7, #24]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4b55      	ldr	r3, [pc, #340]	; (8000cb8 <SendUpData+0x210>)
 8000b64:	745a      	strb	r2, [r3, #17]
	UpDataSend[18] = SendData.RotNum[1];
 8000b66:	8b7b      	ldrh	r3, [r7, #26]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4b53      	ldr	r3, [pc, #332]	; (8000cb8 <SendUpData+0x210>)
 8000b6c:	749a      	strb	r2, [r3, #18]
	UpDataSend[19] = SendData.RotNum[1] >> 8;
 8000b6e:	8b7b      	ldrh	r3, [r7, #26]
 8000b70:	0a1b      	lsrs	r3, r3, #8
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4b50      	ldr	r3, [pc, #320]	; (8000cb8 <SendUpData+0x210>)
 8000b78:	74da      	strb	r2, [r3, #19]
	UpDataSend[20] = SendData.RotNum[2];
 8000b7a:	8bbb      	ldrh	r3, [r7, #28]
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4b4e      	ldr	r3, [pc, #312]	; (8000cb8 <SendUpData+0x210>)
 8000b80:	751a      	strb	r2, [r3, #20]
	UpDataSend[21] = SendData.RotNum[2] >> 8;
 8000b82:	8bbb      	ldrh	r3, [r7, #28]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4b4b      	ldr	r3, [pc, #300]	; (8000cb8 <SendUpData+0x210>)
 8000b8c:	755a      	strb	r2, [r3, #21]
	UpDataSend[22] = SendData.EulNum[0];
 8000b8e:	8bfb      	ldrh	r3, [r7, #30]
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4b49      	ldr	r3, [pc, #292]	; (8000cb8 <SendUpData+0x210>)
 8000b94:	759a      	strb	r2, [r3, #22]
	UpDataSend[23] = SendData.EulNum[0] >> 8;
 8000b96:	8bfb      	ldrh	r3, [r7, #30]
 8000b98:	0a1b      	lsrs	r3, r3, #8
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b46      	ldr	r3, [pc, #280]	; (8000cb8 <SendUpData+0x210>)
 8000ba0:	75da      	strb	r2, [r3, #23]
	UpDataSend[24] = SendData.EulNum[1];
 8000ba2:	8c3b      	ldrh	r3, [r7, #32]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4b44      	ldr	r3, [pc, #272]	; (8000cb8 <SendUpData+0x210>)
 8000ba8:	761a      	strb	r2, [r3, #24]
	UpDataSend[25] = SendData.EulNum[1] >> 8;
 8000baa:	8c3b      	ldrh	r3, [r7, #32]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4b41      	ldr	r3, [pc, #260]	; (8000cb8 <SendUpData+0x210>)
 8000bb4:	765a      	strb	r2, [r3, #25]
	UpDataSend[26] = SendData.EulNum[2];
 8000bb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b3f      	ldr	r3, [pc, #252]	; (8000cb8 <SendUpData+0x210>)
 8000bbc:	769a      	strb	r2, [r3, #26]
	UpDataSend[27] = SendData.EulNum[2] >> 8;
 8000bbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4b3c      	ldr	r3, [pc, #240]	; (8000cb8 <SendUpData+0x210>)
 8000bc8:	76da      	strb	r2, [r3, #27]
	UpDataSend[28] = SendData.MagNum[0];
 8000bca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4b3a      	ldr	r3, [pc, #232]	; (8000cb8 <SendUpData+0x210>)
 8000bd0:	771a      	strb	r2, [r3, #28]
	UpDataSend[29] = SendData.MagNum[0] >> 8;
 8000bd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4b37      	ldr	r3, [pc, #220]	; (8000cb8 <SendUpData+0x210>)
 8000bdc:	775a      	strb	r2, [r3, #29]
	UpDataSend[30] = SendData.MagNum[1];
 8000bde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4b35      	ldr	r3, [pc, #212]	; (8000cb8 <SendUpData+0x210>)
 8000be4:	779a      	strb	r2, [r3, #30]
	UpDataSend[31] = SendData.MagNum[1] >> 8;
 8000be6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000be8:	0a1b      	lsrs	r3, r3, #8
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4b32      	ldr	r3, [pc, #200]	; (8000cb8 <SendUpData+0x210>)
 8000bf0:	77da      	strb	r2, [r3, #31]
	UpDataSend[32] = SendData.MagNum[2];
 8000bf2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4b30      	ldr	r3, [pc, #192]	; (8000cb8 <SendUpData+0x210>)
 8000bf8:	f883 2020 	strb.w	r2, [r3, #32]
	UpDataSend[33] = SendData.MagNum[2] >> 8;
 8000bfc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bfe:	0a1b      	lsrs	r3, r3, #8
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	4b2c      	ldr	r3, [pc, #176]	; (8000cb8 <SendUpData+0x210>)
 8000c06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	UpDataSend[34] = SendData.DepthToBottom >> 24;
 8000c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c0c:	0e1b      	lsrs	r3, r3, #24
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	4b29      	ldr	r3, [pc, #164]	; (8000cb8 <SendUpData+0x210>)
 8000c12:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	UpDataSend[35] = SendData.DepthToBottom >> 16;
 8000c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c18:	0c1b      	lsrs	r3, r3, #16
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <SendUpData+0x210>)
 8000c1e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	UpDataSend[36] = SendData.DepthToBottom >> 8;
 8000c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <SendUpData+0x210>)
 8000c2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	UpDataSend[37] = SendData.DepthToBottom;
 8000c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <SendUpData+0x210>)
 8000c34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UpDataSend[38] = SendData.Confidence >> 8;
 8000c38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c3a:	0a1b      	lsrs	r3, r3, #8
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <SendUpData+0x210>)
 8000c42:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	UpDataSend[39] = SendData.Confidence;
 8000c46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <SendUpData+0x210>)
 8000c4c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	UpDataSend[40] = SendData.WaterTemperature;
 8000c50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <SendUpData+0x210>)
 8000c56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	UpDataSend[41] = SendData.WaterTemperature >> 8;
 8000c5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <SendUpData+0x210>)
 8000c64:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	UpDataSend[42] = SendData.WaterDepth; //BUG:E2 40
 8000c68:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <SendUpData+0x210>)
 8000c6e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	UpDataSend[43] = SendData.WaterDepth >> 8;
 8000c72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <SendUpData+0x210>)
 8000c7c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	UpDataSend[44] = XorCaculate(UpDataSend, 38);
 8000c80:	2126      	movs	r1, #38	; 0x26
 8000c82:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <SendUpData+0x210>)
 8000c84:	f000 f90a 	bl	8000e9c <XorCaculate>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <SendUpData+0x210>)
 8000c8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	UpDataSend[45] = 0xff;
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <SendUpData+0x210>)
 8000c94:	22ff      	movs	r2, #255	; 0xff
 8000c96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	UpDataSend[46] = 0xff;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <SendUpData+0x210>)
 8000c9c:	22ff      	movs	r2, #255	; 0xff
 8000c9e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	HAL_UART_Transmit_DMA(&Up_UART, UpDataSend, Up_UART_TXLen);
 8000ca2:	222f      	movs	r2, #47	; 0x2f
 8000ca4:	4904      	ldr	r1, [pc, #16]	; (8000cb8 <SendUpData+0x210>)
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <SendUpData+0x214>)
 8000ca8:	f008 fdb0 	bl	800980c <HAL_UART_Transmit_DMA>
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr
 8000cb8:	24000070 	.word	0x24000070
 8000cbc:	200044d0 	.word	0x200044d0

08000cc0 <SpecialMovePID>:
 * @param  SetValue         目标值
 * @param  ActualValue      当前值
 * @return u16 位置PID数据
 */
u16 SpecialMovePID(u8 ModeType, u16 SetValue, u16 ActualValue)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b08d      	sub	sp, #52	; 0x34
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	80bb      	strh	r3, [r7, #4]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	807b      	strh	r3, [r7, #2]
//累计积分位置
	static float LocSum;
//数据清空标志位
	static u8 PIDData = 0;

	if (ModeType == 4) //定深模式
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b04      	cmp	r3, #4
 8000cd6:	d151      	bne.n	8000d7c <SpecialMovePID+0xbc>
	{
		PIDData = 0;
 8000cd8:	4b5d      	ldr	r3, [pc, #372]	; (8000e50 <SpecialMovePID+0x190>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
		u16 PIDLoc;
		Ek = (float) (SetValue - ActualValue);
 8000cde:	88ba      	ldrh	r2, [r7, #4]
 8000ce0:	887b      	ldrh	r3, [r7, #2]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	ee07 3a90 	vmov	s15, r3
 8000ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cec:	4b59      	ldr	r3, [pc, #356]	; (8000e54 <SpecialMovePID+0x194>)
 8000cee:	edc3 7a00 	vstr	s15, [r3]
		LocSum += Ek;
 8000cf2:	4b59      	ldr	r3, [pc, #356]	; (8000e58 <SpecialMovePID+0x198>)
 8000cf4:	ed93 7a00 	vldr	s14, [r3]
 8000cf8:	4b56      	ldr	r3, [pc, #344]	; (8000e54 <SpecialMovePID+0x194>)
 8000cfa:	edd3 7a00 	vldr	s15, [r3]
 8000cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d02:	4b55      	ldr	r3, [pc, #340]	; (8000e58 <SpecialMovePID+0x198>)
 8000d04:	edc3 7a00 	vstr	s15, [r3]
		PIDLoc =
				(u16) (1500
						+ BASICCTRL_RANGE(
 8000d08:	4b52      	ldr	r3, [pc, #328]	; (8000e54 <SpecialMovePID+0x194>)
 8000d0a:	edd3 7a00 	vldr	s15, [r3]
 8000d0e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8000e5c <SpecialMovePID+0x19c>
 8000d12:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d16:	4b50      	ldr	r3, [pc, #320]	; (8000e58 <SpecialMovePID+0x198>)
 8000d18:	edd3 7a00 	vldr	s15, [r3]
 8000d1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d24:	4b4e      	ldr	r3, [pc, #312]	; (8000e60 <SpecialMovePID+0x1a0>)
 8000d26:	edd3 6a00 	vldr	s13, [r3]
 8000d2a:	4b4a      	ldr	r3, [pc, #296]	; (8000e54 <SpecialMovePID+0x194>)
 8000d2c:	edd3 7a00 	vldr	s15, [r3]
 8000d30:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000d34:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8000e64 <SpecialMovePID+0x1a4>
 8000d38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d44:	ee17 3a90 	vmov	r3, s15
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	847b      	strh	r3, [r7, #34]	; 0x22
 8000d4c:	4b46      	ldr	r3, [pc, #280]	; (8000e68 <SpecialMovePID+0x1a8>)
 8000d4e:	61fb      	str	r3, [r7, #28]
 8000d50:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000d54:	461a      	mov	r2, r3
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	bfb8      	it	lt
 8000d5c:	4613      	movlt	r3, r2
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
 8000d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	bfa8      	it	ge
 8000d6e:	4613      	movge	r3, r2
				(u16) (1500
 8000d70:	b29b      	uxth	r3, r3
		PIDLoc =
 8000d72:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000d76:	85bb      	strh	r3, [r7, #44]	; 0x2c
								(int16_t)(PID_D_Kp * Ek + (PID_D_Ki * LocSum) + PID_D_Kd * (Ek1 - Ek)),
								-1000, 1000));
		return PIDLoc;
 8000d78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000d7a:	e062      	b.n	8000e42 <SpecialMovePID+0x182>
	}
	else if (ModeType == 2) //定向模式
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d14f      	bne.n	8000e22 <SpecialMovePID+0x162>
	{
		PIDData = 0;
 8000d82:	4b33      	ldr	r3, [pc, #204]	; (8000e50 <SpecialMovePID+0x190>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
		u16 PIDLoc;
		Ek = (float) (SetValue - ActualValue);
 8000d88:	88ba      	ldrh	r2, [r7, #4]
 8000d8a:	887b      	ldrh	r3, [r7, #2]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	ee07 3a90 	vmov	s15, r3
 8000d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d96:	4b2f      	ldr	r3, [pc, #188]	; (8000e54 <SpecialMovePID+0x194>)
 8000d98:	edc3 7a00 	vstr	s15, [r3]
		LocSum += Ek;
 8000d9c:	4b2e      	ldr	r3, [pc, #184]	; (8000e58 <SpecialMovePID+0x198>)
 8000d9e:	ed93 7a00 	vldr	s14, [r3]
 8000da2:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <SpecialMovePID+0x194>)
 8000da4:	edd3 7a00 	vldr	s15, [r3]
 8000da8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dac:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <SpecialMovePID+0x198>)
 8000dae:	edc3 7a00 	vstr	s15, [r3]
		PIDLoc =
				(u16) (1500
						+ BASICCTRL_RANGE(
 8000db2:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <SpecialMovePID+0x194>)
 8000db4:	edd3 7a00 	vldr	s15, [r3]
 8000db8:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000e6c <SpecialMovePID+0x1ac>
 8000dbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000dc0:	4b25      	ldr	r3, [pc, #148]	; (8000e58 <SpecialMovePID+0x198>)
 8000dc2:	edd3 7a00 	vldr	s15, [r3]
 8000dc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dca:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <SpecialMovePID+0x1a0>)
 8000dcc:	edd3 6a00 	vldr	s13, [r3]
 8000dd0:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <SpecialMovePID+0x194>)
 8000dd2:	edd3 7a00 	vldr	s15, [r3]
 8000dd6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000dda:	eddf 6a25 	vldr	s13, [pc, #148]	; 8000e70 <SpecialMovePID+0x1b0>
 8000dde:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dea:	ee17 3a90 	vmov	r3, s15
 8000dee:	b21b      	sxth	r3, r3
 8000df0:	827b      	strh	r3, [r7, #18]
 8000df2:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <SpecialMovePID+0x1a8>)
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	bfb8      	it	lt
 8000e02:	4613      	movlt	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
 8000e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	697a      	ldr	r2, [r7, #20]
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	4293      	cmp	r3, r2
 8000e12:	bfa8      	it	ge
 8000e14:	4613      	movge	r3, r2
				(u16) (1500
 8000e16:	b29b      	uxth	r3, r3
		PIDLoc =
 8000e18:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000e1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
								(int16_t)(PID_O_Kp * Ek + (PID_O_Ki * LocSum) + PID_O_Kd * (Ek1 - Ek)),
								-1000, 1000));
		return PIDLoc;
 8000e1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e20:	e00f      	b.n	8000e42 <SpecialMovePID+0x182>
	}
	else
	{
		if (!PIDData)
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <SpecialMovePID+0x190>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10a      	bne.n	8000e40 <SpecialMovePID+0x180>
		{
			PIDData = 1;
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <SpecialMovePID+0x190>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
			Ek = 0;
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <SpecialMovePID+0x194>)
 8000e32:	f04f 0200 	mov.w	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
			LocSum = 0;
 8000e38:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <SpecialMovePID+0x198>)
 8000e3a:	f04f 0200 	mov.w	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
		}
		return 0;
 8000e40:	2300      	movs	r3, #0
	}
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3734      	adds	r7, #52	; 0x34
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000030 	.word	0x20000030
 8000e54:	20000034 	.word	0x20000034
 8000e58:	20000038 	.word	0x20000038
 8000e5c:	43480000 	.word	0x43480000
 8000e60:	2000003c 	.word	0x2000003c
 8000e64:	43960000 	.word	0x43960000
 8000e68:	fffffc18 	.word	0xfffffc18
 8000e6c:	42c80000 	.word	0x42c80000
 8000e70:	43160000 	.word	0x43160000

08000e74 <IdTest>:
 * @param  SendUpLength     上传数据长度
 * @param  SendDownLength   下传指令长度
 * @return u8 正确为1；错误为0，如果不开启奇偶校验默认为1
 */
static u8 IdTest(u8 *String, u8 Format, u8 SendUpLength, u8 SendDownLength)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	4611      	mov	r1, r2
 8000e80:	461a      	mov	r2, r3
 8000e82:	4603      	mov	r3, r0
 8000e84:	70fb      	strb	r3, [r7, #3]
 8000e86:	460b      	mov	r3, r1
 8000e88:	70bb      	strb	r3, [r7, #2]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	707b      	strb	r3, [r7, #1]
			return 0;
		}
	}
	return 1;
#else
	return 1; //不开启奇偶校验时默认成功
 8000e8e:	2301      	movs	r3, #1
#endif
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <XorCaculate>:
 * @param  CacString        待校验数据
 * @param  CacStringSize    待校验数据长度
 * @return u8 异或运算结果，如果不开启数据校验则默认返回0
 */
static u8 XorCaculate(u8 *CacString, u8 CacStringSize)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]
	{
		CacResult ^= CacString[i];
	}
	return CacResult;
#else
	return 0;
 8000ea8:	2300      	movs	r3, #0
#endif
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <InitGY39>:

/**
 * @brief GY39温湿度大气压传感器初始化
 */
void InitGY39(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	GY39Send[0] = 0xa5;
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <InitGY39+0x24>)
 8000ebe:	22a5      	movs	r2, #165	; 0xa5
 8000ec0:	701a      	strb	r2, [r3, #0]
	GY39Send[1] = 0x82;
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <InitGY39+0x24>)
 8000ec4:	2282      	movs	r2, #130	; 0x82
 8000ec6:	705a      	strb	r2, [r3, #1]
	GY39Send[2] = 0x27;
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <InitGY39+0x24>)
 8000eca:	2227      	movs	r2, #39	; 0x27
 8000ecc:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_DMA(&GY39_UART, GY39Send, GY39_UART_TXLen);
 8000ece:	2203      	movs	r2, #3
 8000ed0:	4902      	ldr	r1, [pc, #8]	; (8000edc <InitGY39+0x24>)
 8000ed2:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <InitGY39+0x28>)
 8000ed4:	f008 fc9a 	bl	800980c <HAL_UART_Transmit_DMA>
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	240000cc 	.word	0x240000cc
 8000ee0:	20004718 	.word	0x20004718

08000ee4 <ReceiveGY39>:
/**
 * @brief 接收GY39温湿度大气压传感器数据
 * @return GY39Data GY39传感器数据接收结构体
 */
GY39Data ReceiveGY39(void)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	GY39Data RevGY39;

	RevGY39.Temperature = ((GY39Receive[3] << 8) | GY39Receive[2]);
 8000eec:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <ReceiveGY39+0x84>)
 8000eee:	78db      	ldrb	r3, [r3, #3]
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	b21a      	sxth	r2, r3
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <ReceiveGY39+0x84>)
 8000ef6:	789b      	ldrb	r3, [r3, #2]
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b21b      	sxth	r3, r3
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	81bb      	strh	r3, [r7, #12]
	RevGY39.Baro = ((GY39Receive[7] << 24) | (GY39Receive[6] << 16)
 8000f02:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <ReceiveGY39+0x84>)
 8000f04:	79db      	ldrb	r3, [r3, #7]
 8000f06:	061a      	lsls	r2, r3, #24
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <ReceiveGY39+0x84>)
 8000f0a:	799b      	ldrb	r3, [r3, #6]
 8000f0c:	041b      	lsls	r3, r3, #16
 8000f0e:	431a      	orrs	r2, r3
			| (GY39Receive[5] << 8) | GY39Receive[4]);
 8000f10:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <ReceiveGY39+0x84>)
 8000f12:	795b      	ldrb	r3, [r3, #5]
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	4313      	orrs	r3, r2
 8000f18:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <ReceiveGY39+0x84>)
 8000f1a:	7912      	ldrb	r2, [r2, #4]
 8000f1c:	4313      	orrs	r3, r2
	RevGY39.Baro = ((GY39Receive[7] << 24) | (GY39Receive[6] << 16)
 8000f1e:	613b      	str	r3, [r7, #16]
	RevGY39.Hum = ((GY39Receive[9] << 8) | GY39Receive[8]);
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <ReceiveGY39+0x84>)
 8000f22:	7a5b      	ldrb	r3, [r3, #9]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b21a      	sxth	r2, r3
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <ReceiveGY39+0x84>)
 8000f2a:	7a1b      	ldrb	r3, [r3, #8]
 8000f2c:	b21b      	sxth	r3, r3
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	b21b      	sxth	r3, r3
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	82bb      	strh	r3, [r7, #20]

	__HAL_UART_ENABLE_IT(&GY39_UART, UART_IT_IDLE);
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <ReceiveGY39+0x88>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <ReceiveGY39+0x88>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f042 0210 	orr.w	r2, r2, #16
 8000f44:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&GY39_UART, GY39Receive, GY39_UART_RXLen);
 8000f46:	2212      	movs	r2, #18
 8000f48:	4907      	ldr	r1, [pc, #28]	; (8000f68 <ReceiveGY39+0x84>)
 8000f4a:	4808      	ldr	r0, [pc, #32]	; (8000f6c <ReceiveGY39+0x88>)
 8000f4c:	f008 fcde 	bl	800990c <HAL_UART_Receive_DMA>

	return RevGY39;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	461c      	mov	r4, r3
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	371c      	adds	r7, #28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd90      	pop	{r4, r7, pc}
 8000f68:	240000d0 	.word	0x240000d0
 8000f6c:	20004718 	.word	0x20004718

08000f70 <ReceiveWT931>:
/**
 * @brief 接收WT931九轴传感器数据
 * @return WT931Data WT931九轴传感器数据结构体
 */
WT931Data ReceiveWT931(void)
{
 8000f70:	b5b0      	push	{r4, r5, r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	WT931Data RevWT931;

	if ((WT931Receive[0] == 0x55) && (WT931Receive[1] == 0x51))
 8000f78:	4b64      	ldr	r3, [pc, #400]	; (800110c <ReceiveWT931+0x19c>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b55      	cmp	r3, #85	; 0x55
 8000f7e:	d124      	bne.n	8000fca <ReceiveWT931+0x5a>
 8000f80:	4b62      	ldr	r3, [pc, #392]	; (800110c <ReceiveWT931+0x19c>)
 8000f82:	785b      	ldrb	r3, [r3, #1]
 8000f84:	2b51      	cmp	r3, #81	; 0x51
 8000f86:	d120      	bne.n	8000fca <ReceiveWT931+0x5a>
	{
		RevWT931.AccNum[0] = ((WT931Receive[3] << 8) | WT931Receive[2]);
 8000f88:	4b60      	ldr	r3, [pc, #384]	; (800110c <ReceiveWT931+0x19c>)
 8000f8a:	78db      	ldrb	r3, [r3, #3]
 8000f8c:	021b      	lsls	r3, r3, #8
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	4b5e      	ldr	r3, [pc, #376]	; (800110c <ReceiveWT931+0x19c>)
 8000f92:	789b      	ldrb	r3, [r3, #2]
 8000f94:	b21b      	sxth	r3, r3
 8000f96:	4313      	orrs	r3, r2
 8000f98:	b21b      	sxth	r3, r3
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	813b      	strh	r3, [r7, #8]
		RevWT931.AccNum[1] = ((WT931Receive[5] << 8) | WT931Receive[4]);
 8000f9e:	4b5b      	ldr	r3, [pc, #364]	; (800110c <ReceiveWT931+0x19c>)
 8000fa0:	795b      	ldrb	r3, [r3, #5]
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	4b59      	ldr	r3, [pc, #356]	; (800110c <ReceiveWT931+0x19c>)
 8000fa8:	791b      	ldrb	r3, [r3, #4]
 8000faa:	b21b      	sxth	r3, r3
 8000fac:	4313      	orrs	r3, r2
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	817b      	strh	r3, [r7, #10]
		RevWT931.AccNum[2] = ((WT931Receive[7] << 8) | WT931Receive[6]);
 8000fb4:	4b55      	ldr	r3, [pc, #340]	; (800110c <ReceiveWT931+0x19c>)
 8000fb6:	79db      	ldrb	r3, [r3, #7]
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	b21a      	sxth	r2, r3
 8000fbc:	4b53      	ldr	r3, [pc, #332]	; (800110c <ReceiveWT931+0x19c>)
 8000fbe:	799b      	ldrb	r3, [r3, #6]
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	81bb      	strh	r3, [r7, #12]
	}

	if ((WT931Receive[11] == 0x55) && (WT931Receive[12] == 0x52))
 8000fca:	4b50      	ldr	r3, [pc, #320]	; (800110c <ReceiveWT931+0x19c>)
 8000fcc:	7adb      	ldrb	r3, [r3, #11]
 8000fce:	2b55      	cmp	r3, #85	; 0x55
 8000fd0:	d124      	bne.n	800101c <ReceiveWT931+0xac>
 8000fd2:	4b4e      	ldr	r3, [pc, #312]	; (800110c <ReceiveWT931+0x19c>)
 8000fd4:	7b1b      	ldrb	r3, [r3, #12]
 8000fd6:	2b52      	cmp	r3, #82	; 0x52
 8000fd8:	d120      	bne.n	800101c <ReceiveWT931+0xac>
	{
		RevWT931.RotNum[0] = ((WT931Receive[14] << 8) | WT931Receive[13]);
 8000fda:	4b4c      	ldr	r3, [pc, #304]	; (800110c <ReceiveWT931+0x19c>)
 8000fdc:	7b9b      	ldrb	r3, [r3, #14]
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	4b4a      	ldr	r3, [pc, #296]	; (800110c <ReceiveWT931+0x19c>)
 8000fe4:	7b5b      	ldrb	r3, [r3, #13]
 8000fe6:	b21b      	sxth	r3, r3
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	81fb      	strh	r3, [r7, #14]
		RevWT931.RotNum[1] = ((WT931Receive[16] << 8) | WT931Receive[15]);
 8000ff0:	4b46      	ldr	r3, [pc, #280]	; (800110c <ReceiveWT931+0x19c>)
 8000ff2:	7c1b      	ldrb	r3, [r3, #16]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	4b44      	ldr	r3, [pc, #272]	; (800110c <ReceiveWT931+0x19c>)
 8000ffa:	7bdb      	ldrb	r3, [r3, #15]
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b21b      	sxth	r3, r3
 8001002:	b29b      	uxth	r3, r3
 8001004:	823b      	strh	r3, [r7, #16]
		RevWT931.RotNum[2] = ((WT931Receive[18] << 8) | WT931Receive[17]);
 8001006:	4b41      	ldr	r3, [pc, #260]	; (800110c <ReceiveWT931+0x19c>)
 8001008:	7c9b      	ldrb	r3, [r3, #18]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	4b3f      	ldr	r3, [pc, #252]	; (800110c <ReceiveWT931+0x19c>)
 8001010:	7c5b      	ldrb	r3, [r3, #17]
 8001012:	b21b      	sxth	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b21b      	sxth	r3, r3
 8001018:	b29b      	uxth	r3, r3
 800101a:	827b      	strh	r3, [r7, #18]
	}

	if ((WT931Receive[22] == 0x55) && (WT931Receive[23] == 0x53))
 800101c:	4b3b      	ldr	r3, [pc, #236]	; (800110c <ReceiveWT931+0x19c>)
 800101e:	7d9b      	ldrb	r3, [r3, #22]
 8001020:	2b55      	cmp	r3, #85	; 0x55
 8001022:	d124      	bne.n	800106e <ReceiveWT931+0xfe>
 8001024:	4b39      	ldr	r3, [pc, #228]	; (800110c <ReceiveWT931+0x19c>)
 8001026:	7ddb      	ldrb	r3, [r3, #23]
 8001028:	2b53      	cmp	r3, #83	; 0x53
 800102a:	d120      	bne.n	800106e <ReceiveWT931+0xfe>
	{
		RevWT931.EulNum[0] = ((WT931Receive[25] << 8) | WT931Receive[24]);
 800102c:	4b37      	ldr	r3, [pc, #220]	; (800110c <ReceiveWT931+0x19c>)
 800102e:	7e5b      	ldrb	r3, [r3, #25]
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	b21a      	sxth	r2, r3
 8001034:	4b35      	ldr	r3, [pc, #212]	; (800110c <ReceiveWT931+0x19c>)
 8001036:	7e1b      	ldrb	r3, [r3, #24]
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b21b      	sxth	r3, r3
 800103e:	b29b      	uxth	r3, r3
 8001040:	82bb      	strh	r3, [r7, #20]
		RevWT931.EulNum[1] = ((WT931Receive[27] << 8) | WT931Receive[26]);
 8001042:	4b32      	ldr	r3, [pc, #200]	; (800110c <ReceiveWT931+0x19c>)
 8001044:	7edb      	ldrb	r3, [r3, #27]
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	b21a      	sxth	r2, r3
 800104a:	4b30      	ldr	r3, [pc, #192]	; (800110c <ReceiveWT931+0x19c>)
 800104c:	7e9b      	ldrb	r3, [r3, #26]
 800104e:	b21b      	sxth	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b21b      	sxth	r3, r3
 8001054:	b29b      	uxth	r3, r3
 8001056:	82fb      	strh	r3, [r7, #22]
		RevWT931.EulNum[2] = ((WT931Receive[29] << 8) | WT931Receive[28]);
 8001058:	4b2c      	ldr	r3, [pc, #176]	; (800110c <ReceiveWT931+0x19c>)
 800105a:	7f5b      	ldrb	r3, [r3, #29]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
 8001060:	4b2a      	ldr	r3, [pc, #168]	; (800110c <ReceiveWT931+0x19c>)
 8001062:	7f1b      	ldrb	r3, [r3, #28]
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21b      	sxth	r3, r3
 800106a:	b29b      	uxth	r3, r3
 800106c:	833b      	strh	r3, [r7, #24]
	}

	if ((WT931Receive[33] == 0x55) && (WT931Receive[34] == 0x54))
 800106e:	4b27      	ldr	r3, [pc, #156]	; (800110c <ReceiveWT931+0x19c>)
 8001070:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001074:	2b55      	cmp	r3, #85	; 0x55
 8001076:	d12b      	bne.n	80010d0 <ReceiveWT931+0x160>
 8001078:	4b24      	ldr	r3, [pc, #144]	; (800110c <ReceiveWT931+0x19c>)
 800107a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800107e:	2b54      	cmp	r3, #84	; 0x54
 8001080:	d126      	bne.n	80010d0 <ReceiveWT931+0x160>
	{
		RevWT931.MagNum[0] = ((WT931Receive[36] << 8) | WT931Receive[35]);
 8001082:	4b22      	ldr	r3, [pc, #136]	; (800110c <ReceiveWT931+0x19c>)
 8001084:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	b21a      	sxth	r2, r3
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <ReceiveWT931+0x19c>)
 800108e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001092:	b21b      	sxth	r3, r3
 8001094:	4313      	orrs	r3, r2
 8001096:	b21b      	sxth	r3, r3
 8001098:	b29b      	uxth	r3, r3
 800109a:	837b      	strh	r3, [r7, #26]
		RevWT931.MagNum[1] = ((WT931Receive[38] << 8) | WT931Receive[37]);
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <ReceiveWT931+0x19c>)
 800109e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	b21a      	sxth	r2, r3
 80010a6:	4b19      	ldr	r3, [pc, #100]	; (800110c <ReceiveWT931+0x19c>)
 80010a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	4313      	orrs	r3, r2
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	83bb      	strh	r3, [r7, #28]
		RevWT931.MagNum[2] = ((WT931Receive[40] << 8) | WT931Receive[39]);
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <ReceiveWT931+0x19c>)
 80010b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b21a      	sxth	r2, r3
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <ReceiveWT931+0x19c>)
 80010c2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	83fb      	strh	r3, [r7, #30]
	}

	__HAL_UART_ENABLE_IT(&WT931_UART, UART_IT_IDLE);
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <ReceiveWT931+0x1a0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <ReceiveWT931+0x1a0>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f042 0210 	orr.w	r2, r2, #16
 80010de:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&WT931_UART, WT931Receive, WT931_UART_RXLen);
 80010e0:	222c      	movs	r2, #44	; 0x2c
 80010e2:	490a      	ldr	r1, [pc, #40]	; (800110c <ReceiveWT931+0x19c>)
 80010e4:	480a      	ldr	r0, [pc, #40]	; (8001110 <ReceiveWT931+0x1a0>)
 80010e6:	f008 fc11 	bl	800990c <HAL_UART_Receive_DMA>

	return RevWT931;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	461d      	mov	r5, r3
 80010ee:	f107 0408 	add.w	r4, r7, #8
 80010f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010f4:	6028      	str	r0, [r5, #0]
 80010f6:	6069      	str	r1, [r5, #4]
 80010f8:	60aa      	str	r2, [r5, #8]
 80010fa:	60eb      	str	r3, [r5, #12]
 80010fc:	cc03      	ldmia	r4!, {r0, r1}
 80010fe:	6128      	str	r0, [r5, #16]
 8001100:	6169      	str	r1, [r5, #20]
}
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	3720      	adds	r7, #32
 8001106:	46bd      	mov	sp, r7
 8001108:	bdb0      	pop	{r4, r5, r7, pc}
 800110a:	bf00      	nop
 800110c:	240000a0 	.word	0x240000a0
 8001110:	2000416c 	.word	0x2000416c

08001114 <ReceiveDeep>:
/**
 * @brief 接收水深水温传感器数据
 * @return DeepData 水深水温传感器数据结构体
 */
DeepData ReceiveDeep(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
	DeepData RevDeep;

	RevDeep.WaterDepth = ((DeepReceive[1] << 8) | DeepReceive[0]);
 800111a:	4b18      	ldr	r3, [pc, #96]	; (800117c <ReceiveDeep+0x68>)
 800111c:	785b      	ldrb	r3, [r3, #1]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <ReceiveDeep+0x68>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b21b      	sxth	r3, r3
 8001128:	4313      	orrs	r3, r2
 800112a:	b21b      	sxth	r3, r3
 800112c:	b29b      	uxth	r3, r3
 800112e:	807b      	strh	r3, [r7, #2]
	RevDeep.WaterTemperature = ((DeepReceive[3] << 8) | DeepReceive[2]);
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <ReceiveDeep+0x68>)
 8001132:	78db      	ldrb	r3, [r3, #3]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b21a      	sxth	r2, r3
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <ReceiveDeep+0x68>)
 800113a:	789b      	ldrb	r3, [r3, #2]
 800113c:	b21b      	sxth	r3, r3
 800113e:	4313      	orrs	r3, r2
 8001140:	b21b      	sxth	r3, r3
 8001142:	b29b      	uxth	r3, r3
 8001144:	803b      	strh	r3, [r7, #0]

	__HAL_UART_ENABLE_IT(&Deep_UART, UART_IT_IDLE);
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <ReceiveDeep+0x6c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <ReceiveDeep+0x6c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f042 0210 	orr.w	r2, r2, #16
 8001154:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Deep_UART, DeepReceive, Deep_UART_RXLen);
 8001156:	2204      	movs	r2, #4
 8001158:	4908      	ldr	r1, [pc, #32]	; (800117c <ReceiveDeep+0x68>)
 800115a:	4809      	ldr	r0, [pc, #36]	; (8001180 <ReceiveDeep+0x6c>)
 800115c:	f008 fbd6 	bl	800990c <HAL_UART_Receive_DMA>
	return RevDeep;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	2300      	movs	r3, #0
 8001166:	88ba      	ldrh	r2, [r7, #4]
 8001168:	f362 030f 	bfi	r3, r2, #0, #16
 800116c:	88fa      	ldrh	r2, [r7, #6]
 800116e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	240000e4 	.word	0x240000e4
 8001180:	20004680 	.word	0x20004680

08001184 <InitP30>:

/**
 * @brief 声呐传感器初始化
 */
void InitP30(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	//42 52 02 00 78 05 00 00 BB 04 D2 01
	P30Send[0] = 0x42;
 8001188:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <InitP30+0x5c>)
 800118a:	2242      	movs	r2, #66	; 0x42
 800118c:	701a      	strb	r2, [r3, #0]
	P30Send[1] = 0x52;
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <InitP30+0x5c>)
 8001190:	2252      	movs	r2, #82	; 0x52
 8001192:	705a      	strb	r2, [r3, #1]
	P30Send[2] = 0x02;
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <InitP30+0x5c>)
 8001196:	2202      	movs	r2, #2
 8001198:	709a      	strb	r2, [r3, #2]
	P30Send[3] = 0x00;
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <InitP30+0x5c>)
 800119c:	2200      	movs	r2, #0
 800119e:	70da      	strb	r2, [r3, #3]
	P30Send[4] = 0x05;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <InitP30+0x5c>)
 80011a2:	2205      	movs	r2, #5
 80011a4:	711a      	strb	r2, [r3, #4]
	P30Send[5] = 0x00;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <InitP30+0x5c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	715a      	strb	r2, [r3, #5]
	P30Send[6] = 0x00;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <InitP30+0x5c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	719a      	strb	r2, [r3, #6]
	P30Send[7] = 0x00;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <InitP30+0x5c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	71da      	strb	r2, [r3, #7]
	P30Send[8] = 0xBB;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <InitP30+0x5c>)
 80011ba:	22bb      	movs	r2, #187	; 0xbb
 80011bc:	721a      	strb	r2, [r3, #8]
	P30Send[9] = 0x04;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <InitP30+0x5c>)
 80011c0:	2204      	movs	r2, #4
 80011c2:	725a      	strb	r2, [r3, #9]
	P30Send[10] = 0xD2;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <InitP30+0x5c>)
 80011c6:	22d2      	movs	r2, #210	; 0xd2
 80011c8:	729a      	strb	r2, [r3, #10]
	P30Send[11] = 0x01;
 80011ca:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <InitP30+0x5c>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	72da      	strb	r2, [r3, #11]

	HAL_UART_Transmit_DMA(&GP30_UART, P30Send, P30_UART_TXLen);
 80011d0:	220c      	movs	r2, #12
 80011d2:	4903      	ldr	r1, [pc, #12]	; (80011e0 <InitP30+0x5c>)
 80011d4:	4803      	ldr	r0, [pc, #12]	; (80011e4 <InitP30+0x60>)
 80011d6:	f008 fb19 	bl	800980c <HAL_UART_Transmit_DMA>
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	240000e8 	.word	0x240000e8
 80011e4:	200042d4 	.word	0x200042d4

080011e8 <ReceiveP30>:
/**
 * @brief 接收声呐传感器数据
 * @return P30Data 声呐传感器数据结构体
 */
P30Data ReceiveP30(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	P30Data RevP30;

	uint8_t FrameState = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	77fb      	strb	r3, [r7, #31]
	uint8_t Bytenum = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	77bb      	strb	r3, [r7, #30]
	uint8_t CheckSum = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	777b      	strb	r3, [r7, #29]
	uint8_t datahex[11];

	for (uint8_t i = 0; i < 33; i++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	773b      	strb	r3, [r7, #28]
 8001200:	e069      	b.n	80012d6 <ReceiveP30+0xee>
	{
		if (FrameState == 0)
 8001202:	7ffb      	ldrb	r3, [r7, #31]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d121      	bne.n	800124c <ReceiveP30+0x64>
		{
			if ((P30Receive[i] == 0x42) && (Bytenum == 0))
 8001208:	7f3b      	ldrb	r3, [r7, #28]
 800120a:	4a41      	ldr	r2, [pc, #260]	; (8001310 <ReceiveP30+0x128>)
 800120c:	5cd3      	ldrb	r3, [r2, r3]
 800120e:	2b42      	cmp	r3, #66	; 0x42
 8001210:	d109      	bne.n	8001226 <ReceiveP30+0x3e>
 8001212:	7fbb      	ldrb	r3, [r7, #30]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d106      	bne.n	8001226 <ReceiveP30+0x3e>
			{
				CheckSum = P30Receive[i];
 8001218:	7f3b      	ldrb	r3, [r7, #28]
 800121a:	4a3d      	ldr	r2, [pc, #244]	; (8001310 <ReceiveP30+0x128>)
 800121c:	5cd3      	ldrb	r3, [r2, r3]
 800121e:	777b      	strb	r3, [r7, #29]
				Bytenum = 1;
 8001220:	2301      	movs	r3, #1
 8001222:	77bb      	strb	r3, [r7, #30]
				continue;
 8001224:	e054      	b.n	80012d0 <ReceiveP30+0xe8>
			}
			else if ((P30Receive[i] == 0x52) && (Bytenum == 1))
 8001226:	7f3b      	ldrb	r3, [r7, #28]
 8001228:	4a39      	ldr	r2, [pc, #228]	; (8001310 <ReceiveP30+0x128>)
 800122a:	5cd3      	ldrb	r3, [r2, r3]
 800122c:	2b52      	cmp	r3, #82	; 0x52
 800122e:	d14f      	bne.n	80012d0 <ReceiveP30+0xe8>
 8001230:	7fbb      	ldrb	r3, [r7, #30]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d14c      	bne.n	80012d0 <ReceiveP30+0xe8>
			{
				CheckSum += P30Receive[i];
 8001236:	7f3b      	ldrb	r3, [r7, #28]
 8001238:	4a35      	ldr	r2, [pc, #212]	; (8001310 <ReceiveP30+0x128>)
 800123a:	5cd2      	ldrb	r2, [r2, r3]
 800123c:	7f7b      	ldrb	r3, [r7, #29]
 800123e:	4413      	add	r3, r2
 8001240:	777b      	strb	r3, [r7, #29]
				Bytenum = 2;
 8001242:	2302      	movs	r3, #2
 8001244:	77bb      	strb	r3, [r7, #30]
				FrameState = 1;
 8001246:	2301      	movs	r3, #1
 8001248:	77fb      	strb	r3, [r7, #31]
				continue;
 800124a:	e041      	b.n	80012d0 <ReceiveP30+0xe8>
			}
		}
		else if (FrameState == 1)
 800124c:	7ffb      	ldrb	r3, [r7, #31]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d13e      	bne.n	80012d0 <ReceiveP30+0xe8>
		{
			if (Bytenum < 13)
 8001252:	7fbb      	ldrb	r3, [r7, #30]
 8001254:	2b0c      	cmp	r3, #12
 8001256:	d813      	bhi.n	8001280 <ReceiveP30+0x98>
			{
				datahex[Bytenum - 2] = P30Receive[i];
 8001258:	7f3a      	ldrb	r2, [r7, #28]
 800125a:	7fbb      	ldrb	r3, [r7, #30]
 800125c:	3b02      	subs	r3, #2
 800125e:	492c      	ldr	r1, [pc, #176]	; (8001310 <ReceiveP30+0x128>)
 8001260:	5c8a      	ldrb	r2, [r1, r2]
 8001262:	f107 0120 	add.w	r1, r7, #32
 8001266:	440b      	add	r3, r1
 8001268:	f803 2c18 	strb.w	r2, [r3, #-24]
				CheckSum += P30Receive[i];
 800126c:	7f3b      	ldrb	r3, [r7, #28]
 800126e:	4a28      	ldr	r2, [pc, #160]	; (8001310 <ReceiveP30+0x128>)
 8001270:	5cd2      	ldrb	r2, [r2, r3]
 8001272:	7f7b      	ldrb	r3, [r7, #29]
 8001274:	4413      	add	r3, r2
 8001276:	777b      	strb	r3, [r7, #29]
				Bytenum++;
 8001278:	7fbb      	ldrb	r3, [r7, #30]
 800127a:	3301      	adds	r3, #1
 800127c:	77bb      	strb	r3, [r7, #30]
 800127e:	e027      	b.n	80012d0 <ReceiveP30+0xe8>
			}
			else
			{
				if (P30Receive[i] == (CheckSum & 0xFF))
 8001280:	7f3b      	ldrb	r3, [r7, #28]
 8001282:	4a23      	ldr	r2, [pc, #140]	; (8001310 <ReceiveP30+0x128>)
 8001284:	5cd3      	ldrb	r3, [r2, r3]
 8001286:	7f7a      	ldrb	r2, [r7, #29]
 8001288:	429a      	cmp	r2, r3
 800128a:	d11b      	bne.n	80012c4 <ReceiveP30+0xdc>
				{
					RevP30.Confidence = datahex[10];
 800128c:	7cbb      	ldrb	r3, [r7, #18]
 800128e:	b29b      	uxth	r3, r3
 8001290:	833b      	strh	r3, [r7, #24]
					RevP30.DepthToBottom = (float) ((datahex[6] | datahex[7]
 8001292:	7bba      	ldrb	r2, [r7, #14]
 8001294:	7bfb      	ldrb	r3, [r7, #15]
							| datahex[8] | datahex[9]) / 1000);
 8001296:	4313      	orrs	r3, r2
 8001298:	b2da      	uxtb	r2, r3
 800129a:	7c3b      	ldrb	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	7c7b      	ldrb	r3, [r7, #17]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	4a1b      	ldr	r2, [pc, #108]	; (8001314 <ReceiveP30+0x12c>)
 80012a8:	fb82 1203 	smull	r1, r2, r2, r3
 80012ac:	1192      	asrs	r2, r2, #6
 80012ae:	17db      	asrs	r3, r3, #31
 80012b0:	1ad3      	subs	r3, r2, r3
					RevP30.DepthToBottom = (float) ((datahex[6] | datahex[7]
 80012b2:	ee07 3a90 	vmov	s15, r3
 80012b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012be:	ee17 3a90 	vmov	r3, s15
 80012c2:	617b      	str	r3, [r7, #20]
				}
				CheckSum = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	777b      	strb	r3, [r7, #29]
				Bytenum = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	77bb      	strb	r3, [r7, #30]
				FrameState = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	77fb      	strb	r3, [r7, #31]
	for (uint8_t i = 0; i < 33; i++)
 80012d0:	7f3b      	ldrb	r3, [r7, #28]
 80012d2:	3301      	adds	r3, #1
 80012d4:	773b      	strb	r3, [r7, #28]
 80012d6:	7f3b      	ldrb	r3, [r7, #28]
 80012d8:	2b20      	cmp	r3, #32
 80012da:	d992      	bls.n	8001202 <ReceiveP30+0x1a>
			}
		}
	}

	__HAL_UART_ENABLE_IT(&GP30_UART, UART_IT_IDLE);
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <ReceiveP30+0x130>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <ReceiveP30+0x130>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f042 0210 	orr.w	r2, r2, #16
 80012ea:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&GP30_UART, P30Receive, P30_UART_RXLen);
 80012ec:	2221      	movs	r2, #33	; 0x21
 80012ee:	4908      	ldr	r1, [pc, #32]	; (8001310 <ReceiveP30+0x128>)
 80012f0:	4809      	ldr	r0, [pc, #36]	; (8001318 <ReceiveP30+0x130>)
 80012f2:	f008 fb0b 	bl	800990c <HAL_UART_Receive_DMA>

	return RevP30;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	461a      	mov	r2, r3
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001302:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	3720      	adds	r7, #32
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	240000f4 	.word	0x240000f4
 8001314:	10624dd3 	.word	0x10624dd3
 8001318:	200042d4 	.word	0x200042d4

0800131c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4a07      	ldr	r2, [pc, #28]	; (8001348 <vApplicationGetIdleTaskMemory+0x2c>)
 800132c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	4a06      	ldr	r2, [pc, #24]	; (800134c <vApplicationGetIdleTaskMemory+0x30>)
 8001332:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2280      	movs	r2, #128	; 0x80
 8001338:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000040 	.word	0x20000040
 800134c:	20000094 	.word	0x20000094

08001350 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001350:	b5b0      	push	{r4, r5, r7, lr}
 8001352:	b0b6      	sub	sp, #216	; 0xd8
 8001354:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001356:	f002 f9ef 	bl	8003738 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800135a:	f000 f965 	bl	8001628 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 800135e:	f000 f9e9 	bl	8001734 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001362:	f000 fc79 	bl	8001c58 <MX_GPIO_Init>
	MX_DMA_Init();
 8001366:	f000 fbf7 	bl	8001b58 <MX_DMA_Init>
	MX_IWDG1_Init();
 800136a:	f000 fa0f 	bl	800178c <MX_IWDG1_Init>
	MX_USART1_UART_Init();
 800136e:	f000 fb0f 	bl	8001990 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001372:	f000 fb59 	bl	8001a28 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001376:	f000 fba3 	bl	8001ac0 <MX_USART3_UART_Init>
	MX_UART4_Init();
 800137a:	f000 fa25 	bl	80017c8 <MX_UART4_Init>
	MX_UART8_Init();
 800137e:	f000 fabb 	bl	80018f8 <MX_UART8_Init>
	MX_UART5_Init();
 8001382:	f000 fa6d 	bl	8001860 <MX_UART5_Init>
	/* USER CODE BEGIN 2 */
	HAL_IWDG_Refresh(&hiwdg1);
 8001386:	4891      	ldr	r0, [pc, #580]	; (80015cc <main+0x27c>)
 8001388:	f005 fb94 	bl	8006ab4 <HAL_IWDG_Refresh>
	//初始化下位机

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2110      	movs	r1, #16
 8001390:	488f      	ldr	r0, [pc, #572]	; (80015d0 <main+0x280>)
 8001392:	f005 fb27 	bl	80069e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8001396:	2201      	movs	r2, #1
 8001398:	2110      	movs	r1, #16
 800139a:	488d      	ldr	r0, [pc, #564]	; (80015d0 <main+0x280>)
 800139c:	f005 fb22 	bl	80069e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2110      	movs	r1, #16
 80013a4:	488a      	ldr	r0, [pc, #552]	; (80015d0 <main+0x280>)
 80013a6:	f005 fb1d 	bl	80069e4 <HAL_GPIO_WritePin>
//	for (int i = 0; i < 60; i++) //跳过openwrt开机时间
//	{
//		HAL_Delay(1000);
//	}

	OpenWrt_Delay();
 80013aa:	f7ff f915 	bl	80005d8 <OpenWrt_Delay>
	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of UptoBaseDataRWFlag */
	osMutexDef(UptoBaseDataRWFlag);
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	UptoBaseDataRWFlagHandle = osMutexCreate(osMutex(UptoBaseDataRWFlag));
 80013ba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80013be:	4618      	mov	r0, r3
 80013c0:	f00a f88b 	bl	800b4da <osMutexCreate>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4a83      	ldr	r2, [pc, #524]	; (80015d4 <main+0x284>)
 80013c8:	6013      	str	r3, [r2, #0]

	/* definition and creation of BasetoUpDataRWFlag */
	osMutexDef(BasetoUpDataRWFlag);
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	BasetoUpDataRWFlagHandle = osMutexCreate(osMutex(BasetoUpDataRWFlag));
 80013d6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013da:	4618      	mov	r0, r3
 80013dc:	f00a f87d 	bl	800b4da <osMutexCreate>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4a7d      	ldr	r2, [pc, #500]	; (80015d8 <main+0x288>)
 80013e4:	6013      	str	r3, [r2, #0]

	/* definition and creation of WT931SensorDataRWFlag */
	osMutexDef(WT931SensorDataRWFlag);
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	WT931SensorDataRWFlagHandle = osMutexCreate(osMutex(WT931SensorDataRWFlag));
 80013f2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f00a f86f 	bl	800b4da <osMutexCreate>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4a77      	ldr	r2, [pc, #476]	; (80015dc <main+0x28c>)
 8001400:	6013      	str	r3, [r2, #0]

	/* definition and creation of GY39SensorDataRWFlag */
	osMutexDef(GY39SensorDataRWFlag);
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	GY39SensorDataRWFlagHandle = osMutexCreate(osMutex(GY39SensorDataRWFlag));
 800140e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001412:	4618      	mov	r0, r3
 8001414:	f00a f861 	bl	800b4da <osMutexCreate>
 8001418:	4603      	mov	r3, r0
 800141a:	4a71      	ldr	r2, [pc, #452]	; (80015e0 <main+0x290>)
 800141c:	6013      	str	r3, [r2, #0]

	/* definition and creation of DeepSensorDataRWFlag */
	osMutexDef(DeepSensorDataRWFlag);
 800141e:	2300      	movs	r3, #0
 8001420:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	DeepSensorDataRWFlagHandle = osMutexCreate(osMutex(DeepSensorDataRWFlag));
 800142a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800142e:	4618      	mov	r0, r3
 8001430:	f00a f853 	bl	800b4da <osMutexCreate>
 8001434:	4603      	mov	r3, r0
 8001436:	4a6b      	ldr	r2, [pc, #428]	; (80015e4 <main+0x294>)
 8001438:	6013      	str	r3, [r2, #0]

	/* definition and creation of BaseControlEnableFlag */
	osMutexDef(BaseControlEnableFlag);
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	BaseControlEnableFlagHandle = osMutexCreate(osMutex(BaseControlEnableFlag));
 8001446:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800144a:	4618      	mov	r0, r3
 800144c:	f00a f845 	bl	800b4da <osMutexCreate>
 8001450:	4603      	mov	r3, r0
 8001452:	4a65      	ldr	r2, [pc, #404]	; (80015e8 <main+0x298>)
 8001454:	6013      	str	r3, [r2, #0]

	/* definition and creation of P30SensorDataRWFlag */
	osMutexDef(P30SensorDataRWFlag);
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	P30SensorDataRWFlagHandle = osMutexCreate(osMutex(P30SensorDataRWFlag));
 8001462:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001466:	4618      	mov	r0, r3
 8001468:	f00a f837 	bl	800b4da <osMutexCreate>
 800146c:	4603      	mov	r3, r0
 800146e:	4a5f      	ldr	r2, [pc, #380]	; (80015ec <main+0x29c>)
 8001470:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_MUTEX */
	HAL_IWDG_Refresh(&hiwdg1);
 8001472:	4856      	ldr	r0, [pc, #344]	; (80015cc <main+0x27c>)
 8001474:	f005 fb1e 	bl	8006ab4 <HAL_IWDG_Refresh>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of UptoBaseTransFinish */
	osSemaphoreDef(UptoBaseTransFinish);
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800147e:	2300      	movs	r3, #0
 8001480:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	UptoBaseTransFinishHandle = osSemaphoreCreate(
 8001484:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001488:	2101      	movs	r1, #1
 800148a:	4618      	mov	r0, r3
 800148c:	f00a f83d 	bl	800b50a <osSemaphoreCreate>
 8001490:	4603      	mov	r3, r0
 8001492:	4a57      	ldr	r2, [pc, #348]	; (80015f0 <main+0x2a0>)
 8001494:	6013      	str	r3, [r2, #0]
			osSemaphore(UptoBaseTransFinish), 1);

	/* definition and creation of WT931TransFinish */
	osSemaphoreDef(WT931TransFinish);
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800149c:	2300      	movs	r3, #0
 800149e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	WT931TransFinishHandle = osSemaphoreCreate(osSemaphore(WT931TransFinish),
 80014a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80014a6:	2101      	movs	r1, #1
 80014a8:	4618      	mov	r0, r3
 80014aa:	f00a f82e 	bl	800b50a <osSemaphoreCreate>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4a50      	ldr	r2, [pc, #320]	; (80015f4 <main+0x2a4>)
 80014b2:	6013      	str	r3, [r2, #0]
			1);

	/* definition and creation of GY39TransFinish */
	osSemaphoreDef(GY39TransFinish);
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80014ba:	2300      	movs	r3, #0
 80014bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	GY39TransFinishHandle = osSemaphoreCreate(osSemaphore(GY39TransFinish), 1);
 80014c0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80014c4:	2101      	movs	r1, #1
 80014c6:	4618      	mov	r0, r3
 80014c8:	f00a f81f 	bl	800b50a <osSemaphoreCreate>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4a4a      	ldr	r2, [pc, #296]	; (80015f8 <main+0x2a8>)
 80014d0:	6013      	str	r3, [r2, #0]

	/* definition and creation of BasetoUpTransFinishHandle */
	osSemaphoreDef(BasetoUpTransFinishHandle);
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80014d8:	2300      	movs	r3, #0
 80014da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	BasetoUpTransFinishHandleHandle = osSemaphoreCreate(
 80014de:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80014e2:	2101      	movs	r1, #1
 80014e4:	4618      	mov	r0, r3
 80014e6:	f00a f810 	bl	800b50a <osSemaphoreCreate>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4a43      	ldr	r2, [pc, #268]	; (80015fc <main+0x2ac>)
 80014ee:	6013      	str	r3, [r2, #0]
			osSemaphore(BasetoUpTransFinishHandle), 1);

	/* definition and creation of DeepTransFinishHandle */
	osSemaphoreDef(DeepTransFinishHandle);
 80014f0:	2300      	movs	r3, #0
 80014f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80014f4:	2300      	movs	r3, #0
 80014f6:	67fb      	str	r3, [r7, #124]	; 0x7c
	DeepTransFinishHandleHandle = osSemaphoreCreate(
 80014f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80014fc:	2101      	movs	r1, #1
 80014fe:	4618      	mov	r0, r3
 8001500:	f00a f803 	bl	800b50a <osSemaphoreCreate>
 8001504:	4603      	mov	r3, r0
 8001506:	4a3e      	ldr	r2, [pc, #248]	; (8001600 <main+0x2b0>)
 8001508:	6013      	str	r3, [r2, #0]
			osSemaphore(DeepTransFinishHandle), 1);

	/* definition and creation of P30TransFinish */
	osSemaphoreDef(P30TransFinish);
 800150a:	2300      	movs	r3, #0
 800150c:	673b      	str	r3, [r7, #112]	; 0x70
 800150e:	2300      	movs	r3, #0
 8001510:	677b      	str	r3, [r7, #116]	; 0x74
	P30TransFinishHandle = osSemaphoreCreate(osSemaphore(P30TransFinish), 1);
 8001512:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001516:	2101      	movs	r1, #1
 8001518:	4618      	mov	r0, r3
 800151a:	f009 fff6 	bl	800b50a <osSemaphoreCreate>
 800151e:	4603      	mov	r3, r0
 8001520:	4a38      	ldr	r2, [pc, #224]	; (8001604 <main+0x2b4>)
 8001522:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_SEMAPHORES */
	HAL_IWDG_Refresh(&hiwdg1);
 8001524:	4829      	ldr	r0, [pc, #164]	; (80015cc <main+0x27c>)
 8001526:	f005 fac5 	bl	8006ab4 <HAL_IWDG_Refresh>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of CtrlTask */
	osThreadDef(CtrlTask, CtrlTaskF, osPriorityNormal, 0, 128);
 800152a:	4b37      	ldr	r3, [pc, #220]	; (8001608 <main+0x2b8>)
 800152c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001530:	461d      	mov	r5, r3
 8001532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001536:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800153a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CtrlTaskHandle = osThreadCreate(osThread(CtrlTask), NULL);
 800153e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001542:	2100      	movs	r1, #0
 8001544:	4618      	mov	r0, r3
 8001546:	f009 ff68 	bl	800b41a <osThreadCreate>
 800154a:	4603      	mov	r3, r0
 800154c:	4a2f      	ldr	r2, [pc, #188]	; (800160c <main+0x2bc>)
 800154e:	6013      	str	r3, [r2, #0]

	/* definition and creation of SensorTask */
	osThreadDef(SensorTask, SensorTaskF, osPriorityNormal, 0, 128);
 8001550:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <main+0x2c0>)
 8001552:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001556:	461d      	mov	r5, r3
 8001558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800155a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800155c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001560:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	SensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 8001564:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f009 ff55 	bl	800b41a <osThreadCreate>
 8001570:	4603      	mov	r3, r0
 8001572:	4a28      	ldr	r2, [pc, #160]	; (8001614 <main+0x2c4>)
 8001574:	6013      	str	r3, [r2, #0]

	/* definition and creation of UptoBaseTask */
	osThreadDef(UptoBaseTask, UtBF, osPriorityNormal, 0, 128);
 8001576:	4b28      	ldr	r3, [pc, #160]	; (8001618 <main+0x2c8>)
 8001578:	f107 041c 	add.w	r4, r7, #28
 800157c:	461d      	mov	r5, r3
 800157e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001582:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	UptoBaseTaskHandle = osThreadCreate(osThread(UptoBaseTask), NULL);
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f009 ff42 	bl	800b41a <osThreadCreate>
 8001596:	4603      	mov	r3, r0
 8001598:	4a20      	ldr	r2, [pc, #128]	; (800161c <main+0x2cc>)
 800159a:	6013      	str	r3, [r2, #0]

	/* definition and creation of BasetoUpTask */
	osThreadDef(BasetoUpTask, BtUF, osPriorityNormal, 0, 128);
 800159c:	4b20      	ldr	r3, [pc, #128]	; (8001620 <main+0x2d0>)
 800159e:	463c      	mov	r4, r7
 80015a0:	461d      	mov	r5, r3
 80015a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	BasetoUpTaskHandle = osThreadCreate(osThread(BasetoUpTask), NULL);
 80015ae:	463b      	mov	r3, r7
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f009 ff31 	bl	800b41a <osThreadCreate>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4a1a      	ldr	r2, [pc, #104]	; (8001624 <main+0x2d4>)
 80015bc:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	HAL_IWDG_Refresh(&hiwdg1);
 80015be:	4803      	ldr	r0, [pc, #12]	; (80015cc <main+0x27c>)
 80015c0:	f005 fa78 	bl	8006ab4 <HAL_IWDG_Refresh>
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80015c4:	f009 ff22 	bl	800b40c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80015c8:	e7fe      	b.n	80015c8 <main+0x278>
 80015ca:	bf00      	nop
 80015cc:	200040e4 	.word	0x200040e4
 80015d0:	58021000 	.word	0x58021000
 80015d4:	20004560 	.word	0x20004560
 80015d8:	20004828 	.word	0x20004828
 80015dc:	20004364 	.word	0x20004364
 80015e0:	2000423c 	.word	0x2000423c
 80015e4:	20004200 	.word	0x20004200
 80015e8:	20004258 	.word	0x20004258
 80015ec:	200041fc 	.word	0x200041fc
 80015f0:	20003fec 	.word	0x20003fec
 80015f4:	20004920 	.word	0x20004920
 80015f8:	20004204 	.word	0x20004204
 80015fc:	200045e8 	.word	0x200045e8
 8001600:	2000482c 	.word	0x2000482c
 8001604:	20003fe8 	.word	0x20003fe8
 8001608:	0800da20 	.word	0x0800da20
 800160c:	20004208 	.word	0x20004208
 8001610:	0800da3c 	.word	0x0800da3c
 8001614:	20003ff0 	.word	0x20003ff0
 8001618:	0800da58 	.word	0x0800da58
 800161c:	20004710 	.word	0x20004710
 8001620:	0800da74 	.word	0x0800da74
 8001624:	20004714 	.word	0x20004714

08001628 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b09c      	sub	sp, #112	; 0x70
 800162c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800162e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001632:	224c      	movs	r2, #76	; 0x4c
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f00c f9c2 	bl	800d9c0 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	2220      	movs	r2, #32
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f00c f9bc 	bl	800d9c0 <memset>
	{ 0 };

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001648:	2002      	movs	r0, #2
 800164a:	f005 fa43 	bl	8006ad4 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800164e:	2300      	movs	r3, #0
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	4b35      	ldr	r3, [pc, #212]	; (8001728 <SystemClock_Config+0x100>)
 8001654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001656:	4a34      	ldr	r2, [pc, #208]	; (8001728 <SystemClock_Config+0x100>)
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800165e:	4b32      	ldr	r3, [pc, #200]	; (8001728 <SystemClock_Config+0x100>)
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	4b30      	ldr	r3, [pc, #192]	; (800172c <SystemClock_Config+0x104>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a2f      	ldr	r2, [pc, #188]	; (800172c <SystemClock_Config+0x104>)
 800166e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b2d      	ldr	r3, [pc, #180]	; (800172c <SystemClock_Config+0x104>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800167c:	603b      	str	r3, [r7, #0]
 800167e:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8001680:	bf00      	nop
 8001682:	4b2a      	ldr	r3, [pc, #168]	; (800172c <SystemClock_Config+0x104>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800168a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800168e:	d1f8      	bne.n	8001682 <SystemClock_Config+0x5a>
	{
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001690:	4b27      	ldr	r3, [pc, #156]	; (8001730 <SystemClock_Config+0x108>)
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	f023 0303 	bic.w	r3, r3, #3
 8001698:	4a25      	ldr	r2, [pc, #148]	; (8001730 <SystemClock_Config+0x108>)
 800169a:	f043 0302 	orr.w	r3, r3, #2
 800169e:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 80016a0:	2309      	movs	r3, #9
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016aa:	2301      	movs	r3, #1
 80016ac:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ae:	2302      	movs	r3, #2
 80016b0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016b2:	2302      	movs	r3, #2
 80016b4:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 80016b6:	2305      	movs	r3, #5
 80016b8:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 160;
 80016ba:	23a0      	movs	r3, #160	; 0xa0
 80016bc:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80016be:	2302      	movs	r3, #2
 80016c0:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80016c2:	2302      	movs	r3, #2
 80016c4:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80016c6:	2302      	movs	r3, #2
 80016c8:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80016ca:	2308      	movs	r3, #8
 80016cc:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016da:	4618      	mov	r0, r3
 80016dc:	f005 fa34 	bl	8006b48 <HAL_RCC_OscConfig>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80016e6:	f000 fe91 	bl	800240c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80016ea:	233f      	movs	r3, #63	; 0x3f
 80016ec:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ee:	2303      	movs	r3, #3
 80016f0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80016f6:	2308      	movs	r3, #8
 80016f8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016fa:	2340      	movs	r3, #64	; 0x40
 80016fc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016fe:	2340      	movs	r3, #64	; 0x40
 8001700:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001706:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001708:	2340      	movs	r3, #64	; 0x40
 800170a:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2102      	movs	r1, #2
 8001710:	4618      	mov	r0, r3
 8001712:	f005 fe29 	bl	8007368 <HAL_RCC_ClockConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <SystemClock_Config+0xf8>
	{
		Error_Handler();
 800171c:	f000 fe76 	bl	800240c <Error_Handler>
	}
}
 8001720:	bf00      	nop
 8001722:	3770      	adds	r7, #112	; 0x70
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	58000400 	.word	0x58000400
 800172c:	58024800 	.word	0x58024800
 8001730:	58024400 	.word	0x58024400

08001734 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b0b0      	sub	sp, #192	; 0xc0
 8001738:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	22bc      	movs	r2, #188	; 0xbc
 800173e:	2100      	movs	r1, #0
 8001740:	4618      	mov	r0, r3
 8001742:	f00c f93d 	bl	800d9c0 <memset>
	{ 0 };

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5
 8001746:	2303      	movs	r3, #3
 8001748:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_UART8 | RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_UART4
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3;
	PeriphClkInitStruct.PLL3.PLL3M = 25;
 800174a:	2319      	movs	r3, #25
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLL3.PLL3N = 192;
 800174e:	23c0      	movs	r3, #192	; 0xc0
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001752:	2302      	movs	r3, #2
 8001754:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001756:	2302      	movs	r3, #2
 8001758:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.PLL3.PLL3R = 2;
 800175a:	2302      	movs	r3, #2
 800175c:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800175e:	2300      	movs	r3, #0
 8001760:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001762:	2300      	movs	r3, #0
 8001764:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInitStruct.Usart234578ClockSelection =
 800176a:	2302      	movs	r3, #2
 800176c:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_USART234578CLKSOURCE_PLL3;
	PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 800176e:	2310      	movs	r3, #16
 8001770:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	4618      	mov	r0, r3
 8001776:	f006 f9c5 	bl	8007b04 <HAL_RCCEx_PeriphCLKConfig>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <PeriphCommonClock_Config+0x50>
	{
		Error_Handler();
 8001780:	f000 fe44 	bl	800240c <Error_Handler>
	}
}
 8001784:	bf00      	nop
 8001786:	37c0      	adds	r7, #192	; 0xc0
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <MX_IWDG1_Init>:
 * @brief IWDG1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG1_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	/* USER CODE END IWDG1_Init 0 */

	/* USER CODE BEGIN IWDG1_Init 1 */

	/* USER CODE END IWDG1_Init 1 */
	hiwdg1.Instance = IWDG1;
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <MX_IWDG1_Init+0x34>)
 8001792:	4a0c      	ldr	r2, [pc, #48]	; (80017c4 <MX_IWDG1_Init+0x38>)
 8001794:	601a      	str	r2, [r3, #0]
	hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <MX_IWDG1_Init+0x34>)
 8001798:	2200      	movs	r2, #0
 800179a:	605a      	str	r2, [r3, #4]
	hiwdg1.Init.Window = 4095;
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <MX_IWDG1_Init+0x34>)
 800179e:	f640 72ff 	movw	r2, #4095	; 0xfff
 80017a2:	60da      	str	r2, [r3, #12]
	hiwdg1.Init.Reload = 4095;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <MX_IWDG1_Init+0x34>)
 80017a6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80017aa:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 80017ac:	4804      	ldr	r0, [pc, #16]	; (80017c0 <MX_IWDG1_Init+0x34>)
 80017ae:	f005 f932 	bl	8006a16 <HAL_IWDG_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_IWDG1_Init+0x30>
	{
		Error_Handler();
 80017b8:	f000 fe28 	bl	800240c <Error_Handler>
	}
	/* USER CODE BEGIN IWDG1_Init 2 */

	/* USER CODE END IWDG1_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	200040e4 	.word	0x200040e4
 80017c4:	58004800 	.word	0x58004800

080017c8 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80017cc:	4b22      	ldr	r3, [pc, #136]	; (8001858 <MX_UART4_Init+0x90>)
 80017ce:	4a23      	ldr	r2, [pc, #140]	; (800185c <MX_UART4_Init+0x94>)
 80017d0:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 921600;
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <MX_UART4_Init+0x90>)
 80017d4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80017d8:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <MX_UART4_Init+0x90>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <MX_UART4_Init+0x90>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <MX_UART4_Init+0x90>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <MX_UART4_Init+0x90>)
 80017ee:	220c      	movs	r2, #12
 80017f0:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <MX_UART4_Init+0x90>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f8:	4b17      	ldr	r3, [pc, #92]	; (8001858 <MX_UART4_Init+0x90>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017fe:	4b16      	ldr	r3, [pc, #88]	; (8001858 <MX_UART4_Init+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001804:	4b14      	ldr	r3, [pc, #80]	; (8001858 <MX_UART4_Init+0x90>)
 8001806:	2200      	movs	r2, #0
 8001808:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800180a:	4b13      	ldr	r3, [pc, #76]	; (8001858 <MX_UART4_Init+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8001810:	4811      	ldr	r0, [pc, #68]	; (8001858 <MX_UART4_Init+0x90>)
 8001812:	f007 ffab 	bl	800976c <HAL_UART_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_UART4_Init+0x58>
	{
		Error_Handler();
 800181c:	f000 fdf6 	bl	800240c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 8001820:	2100      	movs	r1, #0
 8001822:	480d      	ldr	r0, [pc, #52]	; (8001858 <MX_UART4_Init+0x90>)
 8001824:	f009 fd10 	bl	800b248 <HAL_UARTEx_SetTxFifoThreshold>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_UART4_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 800182e:	f000 fded 	bl	800240c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 8001832:	2100      	movs	r1, #0
 8001834:	4808      	ldr	r0, [pc, #32]	; (8001858 <MX_UART4_Init+0x90>)
 8001836:	f009 fd45 	bl	800b2c4 <HAL_UARTEx_SetRxFifoThreshold>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_UART4_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001840:	f000 fde4 	bl	800240c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001844:	4804      	ldr	r0, [pc, #16]	; (8001858 <MX_UART4_Init+0x90>)
 8001846:	f009 fcc6 	bl	800b1d6 <HAL_UARTEx_DisableFifoMode>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_UART4_Init+0x8c>
	{
		Error_Handler();
 8001850:	f000 fddc 	bl	800240c <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20004680 	.word	0x20004680
 800185c:	40004c00 	.word	0x40004c00

08001860 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8001864:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <MX_UART5_Init+0x90>)
 8001866:	4a23      	ldr	r2, [pc, #140]	; (80018f4 <MX_UART5_Init+0x94>)
 8001868:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 800186a:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <MX_UART5_Init+0x90>)
 800186c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001870:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001872:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <MX_UART5_Init+0x90>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <MX_UART5_Init+0x90>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 800187e:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <MX_UART5_Init+0x90>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001884:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <MX_UART5_Init+0x90>)
 8001886:	220c      	movs	r2, #12
 8001888:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800188a:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <MX_UART5_Init+0x90>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001890:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <MX_UART5_Init+0x90>)
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <MX_UART5_Init+0x90>)
 8001898:	2200      	movs	r2, #0
 800189a:	621a      	str	r2, [r3, #32]
	huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <MX_UART5_Init+0x90>)
 800189e:	2200      	movs	r2, #0
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <MX_UART5_Init+0x90>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart5) != HAL_OK)
 80018a8:	4811      	ldr	r0, [pc, #68]	; (80018f0 <MX_UART5_Init+0x90>)
 80018aa:	f007 ff5f 	bl	800976c <HAL_UART_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_UART5_Init+0x58>
	{
		Error_Handler();
 80018b4:	f000 fdaa 	bl	800240c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8)
 80018b8:	2100      	movs	r1, #0
 80018ba:	480d      	ldr	r0, [pc, #52]	; (80018f0 <MX_UART5_Init+0x90>)
 80018bc:	f009 fcc4 	bl	800b248 <HAL_UARTEx_SetTxFifoThreshold>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_UART5_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 80018c6:	f000 fda1 	bl	800240c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8)
 80018ca:	2100      	movs	r1, #0
 80018cc:	4808      	ldr	r0, [pc, #32]	; (80018f0 <MX_UART5_Init+0x90>)
 80018ce:	f009 fcf9 	bl	800b2c4 <HAL_UARTEx_SetRxFifoThreshold>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_UART5_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 80018d8:	f000 fd98 	bl	800240c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80018dc:	4804      	ldr	r0, [pc, #16]	; (80018f0 <MX_UART5_Init+0x90>)
 80018de:	f009 fc7a 	bl	800b1d6 <HAL_UARTEx_DisableFifoMode>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_UART5_Init+0x8c>
	{
		Error_Handler();
 80018e8:	f000 fd90 	bl	800240c <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	200042d4 	.word	0x200042d4
 80018f4:	40005000 	.word	0x40005000

080018f8 <MX_UART8_Init>:
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 80018fc:	4b22      	ldr	r3, [pc, #136]	; (8001988 <MX_UART8_Init+0x90>)
 80018fe:	4a23      	ldr	r2, [pc, #140]	; (800198c <MX_UART8_Init+0x94>)
 8001900:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 8001902:	4b21      	ldr	r3, [pc, #132]	; (8001988 <MX_UART8_Init+0x90>)
 8001904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001908:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800190a:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <MX_UART8_Init+0x90>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 8001910:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <MX_UART8_Init+0x90>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 8001916:	4b1c      	ldr	r3, [pc, #112]	; (8001988 <MX_UART8_Init+0x90>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <MX_UART8_Init+0x90>)
 800191e:	220c      	movs	r2, #12
 8001920:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001922:	4b19      	ldr	r3, [pc, #100]	; (8001988 <MX_UART8_Init+0x90>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001928:	4b17      	ldr	r3, [pc, #92]	; (8001988 <MX_UART8_Init+0x90>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800192e:	4b16      	ldr	r3, [pc, #88]	; (8001988 <MX_UART8_Init+0x90>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001934:	4b14      	ldr	r3, [pc, #80]	; (8001988 <MX_UART8_Init+0x90>)
 8001936:	2200      	movs	r2, #0
 8001938:	625a      	str	r2, [r3, #36]	; 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800193a:	4b13      	ldr	r3, [pc, #76]	; (8001988 <MX_UART8_Init+0x90>)
 800193c:	2200      	movs	r2, #0
 800193e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart8) != HAL_OK)
 8001940:	4811      	ldr	r0, [pc, #68]	; (8001988 <MX_UART8_Init+0x90>)
 8001942:	f007 ff13 	bl	800976c <HAL_UART_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_UART8_Init+0x58>
	{
		Error_Handler();
 800194c:	f000 fd5e 	bl	800240c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8)
 8001950:	2100      	movs	r1, #0
 8001952:	480d      	ldr	r0, [pc, #52]	; (8001988 <MX_UART8_Init+0x90>)
 8001954:	f009 fc78 	bl	800b248 <HAL_UARTEx_SetTxFifoThreshold>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_UART8_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 800195e:	f000 fd55 	bl	800240c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8)
 8001962:	2100      	movs	r1, #0
 8001964:	4808      	ldr	r0, [pc, #32]	; (8001988 <MX_UART8_Init+0x90>)
 8001966:	f009 fcad 	bl	800b2c4 <HAL_UARTEx_SetRxFifoThreshold>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_UART8_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001970:	f000 fd4c 	bl	800240c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001974:	4804      	ldr	r0, [pc, #16]	; (8001988 <MX_UART8_Init+0x90>)
 8001976:	f009 fc2e 	bl	800b1d6 <HAL_UARTEx_DisableFifoMode>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_UART8_Init+0x8c>
	{
		Error_Handler();
 8001980:	f000 fd44 	bl	800240c <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200045ec 	.word	0x200045ec
 800198c:	40007c00 	.word	0x40007c00

08001990 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001994:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <MX_USART1_UART_Init+0x90>)
 8001996:	4a23      	ldr	r2, [pc, #140]	; (8001a24 <MX_USART1_UART_Init+0x94>)
 8001998:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800199a:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <MX_USART1_UART_Init+0x90>)
 800199c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019a2:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <MX_USART1_UART_Init+0x90>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80019a8:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <MX_USART1_UART_Init+0x90>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80019ae:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <MX_USART1_UART_Init+0x90>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <MX_USART1_UART_Init+0x90>)
 80019b6:	220c      	movs	r2, #12
 80019b8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ba:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <MX_USART1_UART_Init+0x90>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c0:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <MX_USART1_UART_Init+0x90>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <MX_USART1_UART_Init+0x90>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MX_USART1_UART_Init+0x90>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <MX_USART1_UART_Init+0x90>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80019d8:	4811      	ldr	r0, [pc, #68]	; (8001a20 <MX_USART1_UART_Init+0x90>)
 80019da:	f007 fec7 	bl	800976c <HAL_UART_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 80019e4:	f000 fd12 	bl	800240c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 80019e8:	2100      	movs	r1, #0
 80019ea:	480d      	ldr	r0, [pc, #52]	; (8001a20 <MX_USART1_UART_Init+0x90>)
 80019ec:	f009 fc2c 	bl	800b248 <HAL_UARTEx_SetTxFifoThreshold>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_USART1_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 80019f6:	f000 fd09 	bl	800240c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 80019fa:	2100      	movs	r1, #0
 80019fc:	4808      	ldr	r0, [pc, #32]	; (8001a20 <MX_USART1_UART_Init+0x90>)
 80019fe:	f009 fc61 	bl	800b2c4 <HAL_UARTEx_SetRxFifoThreshold>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_USART1_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001a08:	f000 fd00 	bl	800240c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a0c:	4804      	ldr	r0, [pc, #16]	; (8001a20 <MX_USART1_UART_Init+0x90>)
 8001a0e:	f009 fbe2 	bl	800b1d6 <HAL_UARTEx_DisableFifoMode>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 8001a18:	f000 fcf8 	bl	800240c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	200044d0 	.word	0x200044d0
 8001a24:	40011000 	.word	0x40011000

08001a28 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001a2c:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a2e:	4a23      	ldr	r2, [pc, #140]	; (8001abc <MX_USART2_UART_Init+0x94>)
 8001a30:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8001a32:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a38:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001a40:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001a46:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a4e:	220c      	movs	r2, #12
 8001a50:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a6a:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a70:	4811      	ldr	r0, [pc, #68]	; (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a72:	f007 fe7b 	bl	800976c <HAL_UART_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8001a7c:	f000 fcc6 	bl	800240c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8001a80:	2100      	movs	r1, #0
 8001a82:	480d      	ldr	r0, [pc, #52]	; (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a84:	f009 fbe0 	bl	800b248 <HAL_UARTEx_SetTxFifoThreshold>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 8001a8e:	f000 fcbd 	bl	800240c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8001a92:	2100      	movs	r1, #0
 8001a94:	4808      	ldr	r0, [pc, #32]	; (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a96:	f009 fc15 	bl	800b2c4 <HAL_UARTEx_SetRxFifoThreshold>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001aa0:	f000 fcb4 	bl	800240c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001aa4:	4804      	ldr	r0, [pc, #16]	; (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001aa6:	f009 fb96 	bl	800b1d6 <HAL_UARTEx_DisableFifoMode>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 8001ab0:	f000 fcac 	bl	800240c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20004718 	.word	0x20004718
 8001abc:	40004400 	.word	0x40004400

08001ac0 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001ac4:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <MX_USART3_UART_Init+0x90>)
 8001ac6:	4a23      	ldr	r2, [pc, #140]	; (8001b54 <MX_USART3_UART_Init+0x94>)
 8001ac8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 921600;
 8001aca:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <MX_USART3_UART_Init+0x90>)
 8001acc:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001ad0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <MX_USART3_UART_Init+0x90>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <MX_USART3_UART_Init+0x90>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001ade:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <MX_USART3_UART_Init+0x90>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <MX_USART3_UART_Init+0x90>)
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aea:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <MX_USART3_UART_Init+0x90>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af0:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <MX_USART3_UART_Init+0x90>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001af6:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <MX_USART3_UART_Init+0x90>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001afc:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <MX_USART3_UART_Init+0x90>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b02:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <MX_USART3_UART_Init+0x90>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b08:	4811      	ldr	r0, [pc, #68]	; (8001b50 <MX_USART3_UART_Init+0x90>)
 8001b0a:	f007 fe2f 	bl	800976c <HAL_UART_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 8001b14:	f000 fc7a 	bl	800240c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8001b18:	2100      	movs	r1, #0
 8001b1a:	480d      	ldr	r0, [pc, #52]	; (8001b50 <MX_USART3_UART_Init+0x90>)
 8001b1c:	f009 fb94 	bl	800b248 <HAL_UARTEx_SetTxFifoThreshold>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_USART3_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 8001b26:	f000 fc71 	bl	800240c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4808      	ldr	r0, [pc, #32]	; (8001b50 <MX_USART3_UART_Init+0x90>)
 8001b2e:	f009 fbc9 	bl	800b2c4 <HAL_UARTEx_SetRxFifoThreshold>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_USART3_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001b38:	f000 fc68 	bl	800240c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001b3c:	4804      	ldr	r0, [pc, #16]	; (8001b50 <MX_USART3_UART_Init+0x90>)
 8001b3e:	f009 fb4a 	bl	800b1d6 <HAL_UARTEx_DisableFifoMode>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 8001b48:	f000 fc60 	bl	800240c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	2000416c 	.word	0x2000416c
 8001b54:	40004800 	.word	0x40004800

08001b58 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001b5e:	4b3d      	ldr	r3, [pc, #244]	; (8001c54 <MX_DMA_Init+0xfc>)
 8001b60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b64:	4a3b      	ldr	r2, [pc, #236]	; (8001c54 <MX_DMA_Init+0xfc>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b6e:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <MX_DMA_Init+0xfc>)
 8001b70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001b7c:	4b35      	ldr	r3, [pc, #212]	; (8001c54 <MX_DMA_Init+0xfc>)
 8001b7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b82:	4a34      	ldr	r2, [pc, #208]	; (8001c54 <MX_DMA_Init+0xfc>)
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b8c:	4b31      	ldr	r3, [pc, #196]	; (8001c54 <MX_DMA_Init+0xfc>)
 8001b8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2105      	movs	r1, #5
 8001b9e:	200b      	movs	r0, #11
 8001ba0:	f001 feea 	bl	8003978 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001ba4:	200b      	movs	r0, #11
 8001ba6:	f001 ff01 	bl	80039ac <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2105      	movs	r1, #5
 8001bae:	200c      	movs	r0, #12
 8001bb0:	f001 fee2 	bl	8003978 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001bb4:	200c      	movs	r0, #12
 8001bb6:	f001 fef9 	bl	80039ac <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2105      	movs	r1, #5
 8001bbe:	200d      	movs	r0, #13
 8001bc0:	f001 feda 	bl	8003978 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001bc4:	200d      	movs	r0, #13
 8001bc6:	f001 fef1 	bl	80039ac <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2105      	movs	r1, #5
 8001bce:	200e      	movs	r0, #14
 8001bd0:	f001 fed2 	bl	8003978 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001bd4:	200e      	movs	r0, #14
 8001bd6:	f001 fee9 	bl	80039ac <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2105      	movs	r1, #5
 8001bde:	200f      	movs	r0, #15
 8001be0:	f001 feca 	bl	8003978 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001be4:	200f      	movs	r0, #15
 8001be6:	f001 fee1 	bl	80039ac <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2105      	movs	r1, #5
 8001bee:	2010      	movs	r0, #16
 8001bf0:	f001 fec2 	bl	8003978 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001bf4:	2010      	movs	r0, #16
 8001bf6:	f001 fed9 	bl	80039ac <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2105      	movs	r1, #5
 8001bfe:	2011      	movs	r0, #17
 8001c00:	f001 feba 	bl	8003978 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001c04:	2011      	movs	r0, #17
 8001c06:	f001 fed1 	bl	80039ac <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2105      	movs	r1, #5
 8001c0e:	202f      	movs	r0, #47	; 0x2f
 8001c10:	f001 feb2 	bl	8003978 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001c14:	202f      	movs	r0, #47	; 0x2f
 8001c16:	f001 fec9 	bl	80039ac <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2105      	movs	r1, #5
 8001c1e:	2038      	movs	r0, #56	; 0x38
 8001c20:	f001 feaa 	bl	8003978 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c24:	2038      	movs	r0, #56	; 0x38
 8001c26:	f001 fec1 	bl	80039ac <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2105      	movs	r1, #5
 8001c2e:	2039      	movs	r0, #57	; 0x39
 8001c30:	f001 fea2 	bl	8003978 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001c34:	2039      	movs	r0, #57	; 0x39
 8001c36:	f001 feb9 	bl	80039ac <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2105      	movs	r1, #5
 8001c3e:	203a      	movs	r0, #58	; 0x3a
 8001c40:	f001 fe9a 	bl	8003978 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001c44:	203a      	movs	r0, #58	; 0x3a
 8001c46:	f001 feb1 	bl	80039ac <HAL_NVIC_EnableIRQ>

}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	58024400 	.word	0x58024400

08001c58 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08a      	sub	sp, #40	; 0x28
 8001c5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
 8001c6c:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001c6e:	4b3f      	ldr	r3, [pc, #252]	; (8001d6c <MX_GPIO_Init+0x114>)
 8001c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c74:	4a3d      	ldr	r2, [pc, #244]	; (8001d6c <MX_GPIO_Init+0x114>)
 8001c76:	f043 0310 	orr.w	r3, r3, #16
 8001c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c7e:	4b3b      	ldr	r3, [pc, #236]	; (8001d6c <MX_GPIO_Init+0x114>)
 8001c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8c:	4b37      	ldr	r3, [pc, #220]	; (8001d6c <MX_GPIO_Init+0x114>)
 8001c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c92:	4a36      	ldr	r2, [pc, #216]	; (8001d6c <MX_GPIO_Init+0x114>)
 8001c94:	f043 0304 	orr.w	r3, r3, #4
 8001c98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c9c:	4b33      	ldr	r3, [pc, #204]	; (8001d6c <MX_GPIO_Init+0x114>)
 8001c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001caa:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <MX_GPIO_Init+0x114>)
 8001cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb0:	4a2e      	ldr	r2, [pc, #184]	; (8001d6c <MX_GPIO_Init+0x114>)
 8001cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cba:	4b2c      	ldr	r3, [pc, #176]	; (8001d6c <MX_GPIO_Init+0x114>)
 8001cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc8:	4b28      	ldr	r3, [pc, #160]	; (8001d6c <MX_GPIO_Init+0x114>)
 8001cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cce:	4a27      	ldr	r2, [pc, #156]	; (8001d6c <MX_GPIO_Init+0x114>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd8:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <MX_GPIO_Init+0x114>)
 8001cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce6:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <MX_GPIO_Init+0x114>)
 8001ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cec:	4a1f      	ldr	r2, [pc, #124]	; (8001d6c <MX_GPIO_Init+0x114>)
 8001cee:	f043 0302 	orr.w	r3, r3, #2
 8001cf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <MX_GPIO_Init+0x114>)
 8001cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2110      	movs	r1, #16
 8001d08:	4819      	ldr	r0, [pc, #100]	; (8001d70 <MX_GPIO_Init+0x118>)
 8001d0a:	f004 fe6b 	bl	80069e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d0e:	2310      	movs	r3, #16
 8001d10:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d12:	2301      	movs	r3, #1
 8001d14:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4619      	mov	r1, r3
 8001d24:	4812      	ldr	r0, [pc, #72]	; (8001d70 <MX_GPIO_Init+0x118>)
 8001d26:	f004 fc95 	bl	8006654 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d2a:	2340      	movs	r3, #64	; 0x40
 8001d2c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	480c      	ldr	r0, [pc, #48]	; (8001d70 <MX_GPIO_Init+0x118>)
 8001d3e:	f004 fc89 	bl	8006654 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d46:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d50:	2302      	movs	r3, #2
 8001d52:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d54:	2301      	movs	r3, #1
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4805      	ldr	r0, [pc, #20]	; (8001d74 <MX_GPIO_Init+0x11c>)
 8001d60:	f004 fc78 	bl	8006654 <HAL_GPIO_Init>

}
 8001d64:	bf00      	nop
 8001d66:	3728      	adds	r7, #40	; 0x28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	58024400 	.word	0x58024400
 8001d70:	58021000 	.word	0x58021000
 8001d74:	58020000 	.word	0x58020000

08001d78 <CtrlTaskF>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_CtrlTaskF */
void CtrlTaskF(void const *argument)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for (;;)
	{
		/* 该任务作为空任务 */
		HAL_IWDG_Refresh(&hiwdg1);
 8001d80:	4801      	ldr	r0, [pc, #4]	; (8001d88 <CtrlTaskF+0x10>)
 8001d82:	f004 fe97 	bl	8006ab4 <HAL_IWDG_Refresh>
 8001d86:	e7fb      	b.n	8001d80 <CtrlTaskF+0x8>
 8001d88:	200040e4 	.word	0x200040e4

08001d8c <SensorTaskF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SensorTaskF */
void SensorTaskF(void const *argument)
{
 8001d8c:	b5b0      	push	{r4, r5, r7, lr}
 8001d8e:	b08c      	sub	sp, #48	; 0x30
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	62f8      	str	r0, [r7, #44]	; 0x2c
	/* USER CODE BEGIN SensorTaskF */
	InitGY39();
 8001d94:	f7ff f890 	bl	8000eb8 <InitGY39>
	InitP30();
 8001d98:	f7ff f9f4 	bl	8001184 <InitP30>
	ReceiveDeep();
 8001d9c:	f7ff f9ba 	bl	8001114 <ReceiveDeep>
	ReceiveGY39();
 8001da0:	f107 0318 	add.w	r3, r7, #24
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff f89d 	bl	8000ee4 <ReceiveGY39>
	ReceiveWT931();
 8001daa:	463b      	mov	r3, r7
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff f8df 	bl	8000f70 <ReceiveWT931>
	ReceiveP30();
 8001db2:	463b      	mov	r3, r7
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fa17 	bl	80011e8 <ReceiveP30>
	osDelay(200);
 8001dba:	20c8      	movs	r0, #200	; 0xc8
 8001dbc:	f009 fb79 	bl	800b4b2 <osDelay>
	DeepSensorData = ReceiveDeep();
 8001dc0:	f7ff f9a8 	bl	8001114 <ReceiveDeep>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	4b71      	ldr	r3, [pc, #452]	; (8001f8c <SensorTaskF+0x200>)
 8001dc8:	4611      	mov	r1, r2
 8001dca:	8019      	strh	r1, [r3, #0]
 8001dcc:	f3c2 420f 	ubfx	r2, r2, #16, #16
 8001dd0:	805a      	strh	r2, [r3, #2]
	GY39SensorData = ReceiveGY39();
 8001dd2:	4c6f      	ldr	r4, [pc, #444]	; (8001f90 <SensorTaskF+0x204>)
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff f884 	bl	8000ee4 <ReceiveGY39>
 8001ddc:	463b      	mov	r3, r7
 8001dde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001de2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	WT931SensorData = ReceiveWT931();
 8001de6:	4c6b      	ldr	r4, [pc, #428]	; (8001f94 <SensorTaskF+0x208>)
 8001de8:	463b      	mov	r3, r7
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff f8c0 	bl	8000f70 <ReceiveWT931>
 8001df0:	4622      	mov	r2, r4
 8001df2:	463b      	mov	r3, r7
 8001df4:	6818      	ldr	r0, [r3, #0]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	689d      	ldr	r5, [r3, #8]
 8001dfa:	68dc      	ldr	r4, [r3, #12]
 8001dfc:	6010      	str	r0, [r2, #0]
 8001dfe:	6051      	str	r1, [r2, #4]
 8001e00:	6095      	str	r5, [r2, #8]
 8001e02:	60d4      	str	r4, [r2, #12]
 8001e04:	6918      	ldr	r0, [r3, #16]
 8001e06:	6959      	ldr	r1, [r3, #20]
 8001e08:	6110      	str	r0, [r2, #16]
 8001e0a:	6151      	str	r1, [r2, #20]
	P30SensorData = ReceiveP30();
 8001e0c:	4c62      	ldr	r4, [pc, #392]	; (8001f98 <SensorTaskF+0x20c>)
 8001e0e:	463b      	mov	r3, r7
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff f9e9 	bl	80011e8 <ReceiveP30>
 8001e16:	4622      	mov	r2, r4
 8001e18:	463b      	mov	r3, r7
 8001e1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e1e:	e882 0003 	stmia.w	r2, {r0, r1}
	xSemaphoreGive(DeepSensorDataRWFlagHandle);
 8001e22:	4b5e      	ldr	r3, [pc, #376]	; (8001f9c <SensorTaskF+0x210>)
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	2300      	movs	r3, #0
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	f009 fdda 	bl	800b9e4 <xQueueGenericSend>
	xSemaphoreGive(GY39SensorDataRWFlagHandle);
 8001e30:	4b5b      	ldr	r3, [pc, #364]	; (8001fa0 <SensorTaskF+0x214>)
 8001e32:	6818      	ldr	r0, [r3, #0]
 8001e34:	2300      	movs	r3, #0
 8001e36:	2200      	movs	r2, #0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	f009 fdd3 	bl	800b9e4 <xQueueGenericSend>
	xSemaphoreGive(WT931SensorDataRWFlagHandle);
 8001e3e:	4b59      	ldr	r3, [pc, #356]	; (8001fa4 <SensorTaskF+0x218>)
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	2300      	movs	r3, #0
 8001e44:	2200      	movs	r2, #0
 8001e46:	2100      	movs	r1, #0
 8001e48:	f009 fdcc 	bl	800b9e4 <xQueueGenericSend>
	xSemaphoreGive(P30SensorDataRWFlagHandle);
 8001e4c:	4b56      	ldr	r3, [pc, #344]	; (8001fa8 <SensorTaskF+0x21c>)
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	2300      	movs	r3, #0
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	f009 fdc5 	bl	800b9e4 <xQueueGenericSend>
	/* Infinite loop */
	for (;;)
	{
		//收取深度数据
		if (xSemaphoreTake(DeepTransFinishHandleHandle,
 8001e5a:	4b54      	ldr	r3, [pc, #336]	; (8001fac <SensorTaskF+0x220>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2101      	movs	r1, #1
 8001e60:	4618      	mov	r0, r3
 8001e62:	f009 ff4b 	bl	800bcfc <xQueueSemaphoreTake>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d118      	bne.n	8001e9e <SensorTaskF+0x112>
				portTICK_PERIOD_MS) == pdTRUE)
		{
			if (xSemaphoreTake(DeepSensorDataRWFlagHandle,
 8001e6c:	4b4b      	ldr	r3, [pc, #300]	; (8001f9c <SensorTaskF+0x210>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2101      	movs	r1, #1
 8001e72:	4618      	mov	r0, r3
 8001e74:	f009 ff42 	bl	800bcfc <xQueueSemaphoreTake>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d10f      	bne.n	8001e9e <SensorTaskF+0x112>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				DeepSensorData = ReceiveDeep();
 8001e7e:	f7ff f949 	bl	8001114 <ReceiveDeep>
 8001e82:	4602      	mov	r2, r0
 8001e84:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <SensorTaskF+0x200>)
 8001e86:	4611      	mov	r1, r2
 8001e88:	8019      	strh	r1, [r3, #0]
 8001e8a:	f3c2 420f 	ubfx	r2, r2, #16, #16
 8001e8e:	805a      	strh	r2, [r3, #2]
				xSemaphoreGive(DeepSensorDataRWFlagHandle);
 8001e90:	4b42      	ldr	r3, [pc, #264]	; (8001f9c <SensorTaskF+0x210>)
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	2300      	movs	r3, #0
 8001e96:	2200      	movs	r2, #0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	f009 fda3 	bl	800b9e4 <xQueueGenericSend>
			}
		}
		//收取九轴数据
		if (xSemaphoreTake(WT931TransFinishHandle,portTICK_PERIOD_MS) == pdTRUE)
 8001e9e:	4b44      	ldr	r3, [pc, #272]	; (8001fb0 <SensorTaskF+0x224>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f009 ff29 	bl	800bcfc <xQueueSemaphoreTake>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d122      	bne.n	8001ef6 <SensorTaskF+0x16a>
		{
			if (xSemaphoreTake(WT931SensorDataRWFlagHandle,
 8001eb0:	4b3c      	ldr	r3, [pc, #240]	; (8001fa4 <SensorTaskF+0x218>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f009 ff20 	bl	800bcfc <xQueueSemaphoreTake>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d119      	bne.n	8001ef6 <SensorTaskF+0x16a>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				WT931SensorData = ReceiveWT931();
 8001ec2:	4c34      	ldr	r4, [pc, #208]	; (8001f94 <SensorTaskF+0x208>)
 8001ec4:	463b      	mov	r3, r7
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff f852 	bl	8000f70 <ReceiveWT931>
 8001ecc:	4622      	mov	r2, r4
 8001ece:	463b      	mov	r3, r7
 8001ed0:	6818      	ldr	r0, [r3, #0]
 8001ed2:	6859      	ldr	r1, [r3, #4]
 8001ed4:	689d      	ldr	r5, [r3, #8]
 8001ed6:	68dc      	ldr	r4, [r3, #12]
 8001ed8:	6010      	str	r0, [r2, #0]
 8001eda:	6051      	str	r1, [r2, #4]
 8001edc:	6095      	str	r5, [r2, #8]
 8001ede:	60d4      	str	r4, [r2, #12]
 8001ee0:	6918      	ldr	r0, [r3, #16]
 8001ee2:	6959      	ldr	r1, [r3, #20]
 8001ee4:	6110      	str	r0, [r2, #16]
 8001ee6:	6151      	str	r1, [r2, #20]
				xSemaphoreGive(WT931SensorDataRWFlagHandle);
 8001ee8:	4b2e      	ldr	r3, [pc, #184]	; (8001fa4 <SensorTaskF+0x218>)
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	2300      	movs	r3, #0
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	f009 fd77 	bl	800b9e4 <xQueueGenericSend>
			}
		}
		//收取温湿度数�?????
		if (xSemaphoreTake(GY39TransFinishHandle,portTICK_PERIOD_MS) == pdTRUE)
 8001ef6:	4b2f      	ldr	r3, [pc, #188]	; (8001fb4 <SensorTaskF+0x228>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2101      	movs	r1, #1
 8001efc:	4618      	mov	r0, r3
 8001efe:	f009 fefd 	bl	800bcfc <xQueueSemaphoreTake>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d119      	bne.n	8001f3c <SensorTaskF+0x1b0>
		{
			if (xSemaphoreTake(GY39SensorDataRWFlagHandle,
 8001f08:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <SensorTaskF+0x214>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f009 fef4 	bl	800bcfc <xQueueSemaphoreTake>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d110      	bne.n	8001f3c <SensorTaskF+0x1b0>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				GY39SensorData = ReceiveGY39();
 8001f1a:	4c1d      	ldr	r4, [pc, #116]	; (8001f90 <SensorTaskF+0x204>)
 8001f1c:	463b      	mov	r3, r7
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe ffe0 	bl	8000ee4 <ReceiveGY39>
 8001f24:	463b      	mov	r3, r7
 8001f26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				xSemaphoreGive(GY39SensorDataRWFlagHandle);
 8001f2e:	4b1c      	ldr	r3, [pc, #112]	; (8001fa0 <SensorTaskF+0x214>)
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	2300      	movs	r3, #0
 8001f34:	2200      	movs	r2, #0
 8001f36:	2100      	movs	r1, #0
 8001f38:	f009 fd54 	bl	800b9e4 <xQueueGenericSend>
			}
		}
		//收取声呐数据
		if (xSemaphoreTake(P30TransFinishHandle,portTICK_PERIOD_MS) == pdTRUE)
 8001f3c:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <SensorTaskF+0x22c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2101      	movs	r1, #1
 8001f42:	4618      	mov	r0, r3
 8001f44:	f009 feda 	bl	800bcfc <xQueueSemaphoreTake>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d11a      	bne.n	8001f84 <SensorTaskF+0x1f8>
		{
			if (xSemaphoreTake(P30SensorDataRWFlagHandle,
 8001f4e:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <SensorTaskF+0x21c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2101      	movs	r1, #1
 8001f54:	4618      	mov	r0, r3
 8001f56:	f009 fed1 	bl	800bcfc <xQueueSemaphoreTake>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d111      	bne.n	8001f84 <SensorTaskF+0x1f8>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				P30SensorData = ReceiveP30();
 8001f60:	4c0d      	ldr	r4, [pc, #52]	; (8001f98 <SensorTaskF+0x20c>)
 8001f62:	463b      	mov	r3, r7
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff f93f 	bl	80011e8 <ReceiveP30>
 8001f6a:	4622      	mov	r2, r4
 8001f6c:	463b      	mov	r3, r7
 8001f6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f72:	e882 0003 	stmia.w	r2, {r0, r1}
				xSemaphoreGive(P30SensorDataRWFlagHandle);
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <SensorTaskF+0x21c>)
 8001f78:	6818      	ldr	r0, [r3, #0]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2100      	movs	r1, #0
 8001f80:	f009 fd30 	bl	800b9e4 <xQueueGenericSend>
			}
		}
		HAL_IWDG_Refresh(&hiwdg1);
 8001f84:	480d      	ldr	r0, [pc, #52]	; (8001fbc <SensorTaskF+0x230>)
 8001f86:	f004 fd95 	bl	8006ab4 <HAL_IWDG_Refresh>
		if (xSemaphoreTake(DeepTransFinishHandleHandle,
 8001f8a:	e766      	b.n	8001e5a <SensorTaskF+0xce>
 8001f8c:	2000467c 	.word	0x2000467c
 8001f90:	20004564 	.word	0x20004564
 8001f94:	20004240 	.word	0x20004240
 8001f98:	20004820 	.word	0x20004820
 8001f9c:	20004200 	.word	0x20004200
 8001fa0:	2000423c 	.word	0x2000423c
 8001fa4:	20004364 	.word	0x20004364
 8001fa8:	200041fc 	.word	0x200041fc
 8001fac:	2000482c 	.word	0x2000482c
 8001fb0:	20004920 	.word	0x20004920
 8001fb4:	20004204 	.word	0x20004204
 8001fb8:	20003fe8 	.word	0x20003fe8
 8001fbc:	200040e4 	.word	0x200040e4

08001fc0 <UtBF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UtBF */
void UtBF(void const *argument)
{
 8001fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fc2:	b09b      	sub	sp, #108	; 0x6c
 8001fc4:	af0a      	add	r7, sp, #40	; 0x28
 8001fc6:	6378      	str	r0, [r7, #52]	; 0x34
	/* USER CODE BEGIN UtBF */
	u8 DIPFlag = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	u16 DIPStartNum = 0; //PID定向定深预期�??????????
 8001fce:	2300      	movs	r3, #0
 8001fd0:	87bb      	strh	r3, [r7, #60]	; 0x3c

	CaptureUpData();
 8001fd2:	463b      	mov	r3, r7
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fc45 	bl	8000864 <CaptureUpData>
	CaptureDownData();
 8001fda:	463b      	mov	r3, r7
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fb03 	bl	80005e8 <CaptureDownData>
	osDelay(200);
 8001fe2:	20c8      	movs	r0, #200	; 0xc8
 8001fe4:	f009 fa65 	bl	800b4b2 <osDelay>
	//打开串口接收
	BasetoUpData = CaptureUpData();
 8001fe8:	4c55      	ldr	r4, [pc, #340]	; (8002140 <UtBF+0x180>)
 8001fea:	463b      	mov	r3, r7
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fc39 	bl	8000864 <CaptureUpData>
 8001ff2:	4625      	mov	r5, r4
 8001ff4:	463c      	mov	r4, r7
 8001ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ffe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002002:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	UptoBaseData = CaptureDownData();
 8002006:	4c4f      	ldr	r4, [pc, #316]	; (8002144 <UtBF+0x184>)
 8002008:	463b      	mov	r3, r7
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe faec 	bl	80005e8 <CaptureDownData>
 8002010:	4625      	mov	r5, r4
 8002012:	463c      	mov	r4, r7
 8002014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002016:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002018:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800201a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800201c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800201e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002020:	6823      	ldr	r3, [r4, #0]
 8002022:	602b      	str	r3, [r5, #0]
	xSemaphoreGive(BasetoUpDataRWFlagHandle);
 8002024:	4b48      	ldr	r3, [pc, #288]	; (8002148 <UtBF+0x188>)
 8002026:	6818      	ldr	r0, [r3, #0]
 8002028:	2300      	movs	r3, #0
 800202a:	2200      	movs	r2, #0
 800202c:	2100      	movs	r1, #0
 800202e:	f009 fcd9 	bl	800b9e4 <xQueueGenericSend>
	xSemaphoreGive(UptoBaseDataRWFlagHandle);
 8002032:	4b46      	ldr	r3, [pc, #280]	; (800214c <UtBF+0x18c>)
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	2300      	movs	r3, #0
 8002038:	2200      	movs	r2, #0
 800203a:	2100      	movs	r1, #0
 800203c:	f009 fcd2 	bl	800b9e4 <xQueueGenericSend>

	/* Infinite loop */
	for (;;)
	{
		//根据控制位判断是否执行自主定向定�?????
		if (UptoBaseData.Mode & 0x02 == 0x02) //0b0010,使用定向模式
 8002040:	4b40      	ldr	r3, [pc, #256]	; (8002144 <UtBF+0x184>)
 8002042:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d011      	beq.n	8002072 <UtBF+0xb2>
		{
			if (DIPFlag == 0)
 800204e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002052:	2b00      	cmp	r3, #0
 8002054:	d105      	bne.n	8002062 <UtBF+0xa2>
			{
				DIPFlag = 1;
 8002056:	2301      	movs	r3, #1
 8002058:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				DIPStartNum = WT931SensorData.EulNum[2];
 800205c:	4b3c      	ldr	r3, [pc, #240]	; (8002150 <UtBF+0x190>)
 800205e:	8a1b      	ldrh	r3, [r3, #16]
 8002060:	87bb      	strh	r3, [r7, #60]	; 0x3c
			}
			SpecialMovePID(2, DIPStartNum, WT931SensorData.EulNum[2]); //PID定向
 8002062:	4b3b      	ldr	r3, [pc, #236]	; (8002150 <UtBF+0x190>)
 8002064:	8a1a      	ldrh	r2, [r3, #16]
 8002066:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002068:	4619      	mov	r1, r3
 800206a:	2002      	movs	r0, #2
 800206c:	f7fe fe28 	bl	8000cc0 <SpecialMovePID>
 8002070:	e01b      	b.n	80020aa <UtBF+0xea>
		}
		else if (UptoBaseData.Mode & 0x04 == 0x04) //0b0100,使用定深模式
 8002072:	4b34      	ldr	r3, [pc, #208]	; (8002144 <UtBF+0x184>)
 8002074:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d011      	beq.n	80020a4 <UtBF+0xe4>
		{
			if (DIPFlag == 0)
 8002080:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002084:	2b00      	cmp	r3, #0
 8002086:	d105      	bne.n	8002094 <UtBF+0xd4>
			{
				DIPFlag = 1;
 8002088:	2301      	movs	r3, #1
 800208a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				DIPStartNum = DeepSensorData.WaterDepth;
 800208e:	4b31      	ldr	r3, [pc, #196]	; (8002154 <UtBF+0x194>)
 8002090:	885b      	ldrh	r3, [r3, #2]
 8002092:	87bb      	strh	r3, [r7, #60]	; 0x3c
			}
			SpecialMovePID(4, DIPStartNum, DeepSensorData.WaterDepth); //PID定深
 8002094:	4b2f      	ldr	r3, [pc, #188]	; (8002154 <UtBF+0x194>)
 8002096:	885a      	ldrh	r2, [r3, #2]
 8002098:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800209a:	4619      	mov	r1, r3
 800209c:	2004      	movs	r0, #4
 800209e:	f7fe fe0f 	bl	8000cc0 <SpecialMovePID>
 80020a2:	e002      	b.n	80020aa <UtBF+0xea>
		}
		else
		{
			DIPFlag = 0; //不开启定向定�?
 80020a4:	2300      	movs	r3, #0
 80020a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}

		//收取上位机指�????
		if (xSemaphoreTake(UptoBaseTransFinishHandle,
 80020aa:	4b2b      	ldr	r3, [pc, #172]	; (8002158 <UtBF+0x198>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	210a      	movs	r1, #10
 80020b0:	4618      	mov	r0, r3
 80020b2:	f009 fe23 	bl	800bcfc <xQueueSemaphoreTake>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d11e      	bne.n	80020fa <UtBF+0x13a>
				10*portTICK_PERIOD_MS) == pdTRUE)
		{
			if (xSemaphoreTake(UptoBaseDataRWFlagHandle,
 80020bc:	4b23      	ldr	r3, [pc, #140]	; (800214c <UtBF+0x18c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	210a      	movs	r1, #10
 80020c2:	4618      	mov	r0, r3
 80020c4:	f009 fe1a 	bl	800bcfc <xQueueSemaphoreTake>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d115      	bne.n	80020fa <UtBF+0x13a>
					10*portTICK_PERIOD_MS) == pdTRUE)
			{
				UptoBaseData = CaptureDownData();
 80020ce:	4c1d      	ldr	r4, [pc, #116]	; (8002144 <UtBF+0x184>)
 80020d0:	463b      	mov	r3, r7
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fa88 	bl	80005e8 <CaptureDownData>
 80020d8:	4625      	mov	r5, r4
 80020da:	463c      	mov	r4, r7
 80020dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	602b      	str	r3, [r5, #0]
				xSemaphoreGive(UptoBaseDataRWFlagHandle);
 80020ec:	4b17      	ldr	r3, [pc, #92]	; (800214c <UtBF+0x18c>)
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	2300      	movs	r3, #0
 80020f2:	2200      	movs	r2, #0
 80020f4:	2100      	movs	r1, #0
 80020f6:	f009 fc75 	bl	800b9e4 <xQueueGenericSend>
			}
		}

		//下传指令
		if (xSemaphoreTake(BasetoUpDataRWFlagHandle,
 80020fa:	4b13      	ldr	r3, [pc, #76]	; (8002148 <UtBF+0x188>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	210a      	movs	r1, #10
 8002100:	4618      	mov	r0, r3
 8002102:	f009 fdfb 	bl	800bcfc <xQueueSemaphoreTake>
 8002106:	4603      	mov	r3, r0
 8002108:	2b01      	cmp	r3, #1
 800210a:	d114      	bne.n	8002136 <UtBF+0x176>
				10*portTICK_PERIOD_MS) == pdTRUE)
		{
			SendDownData(UptoBaseData);
 800210c:	4e0d      	ldr	r6, [pc, #52]	; (8002144 <UtBF+0x184>)
 800210e:	466d      	mov	r5, sp
 8002110:	f106 0410 	add.w	r4, r6, #16
 8002114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800211a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	602b      	str	r3, [r5, #0]
 8002120:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002124:	f7fe fafe 	bl	8000724 <SendDownData>
			xSemaphoreGive(BasetoUpDataRWFlagHandle);
 8002128:	4b07      	ldr	r3, [pc, #28]	; (8002148 <UtBF+0x188>)
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	2300      	movs	r3, #0
 800212e:	2200      	movs	r2, #0
 8002130:	2100      	movs	r1, #0
 8002132:	f009 fc57 	bl	800b9e4 <xQueueGenericSend>
		}

		HAL_IWDG_Refresh(&hiwdg1);
 8002136:	4809      	ldr	r0, [pc, #36]	; (800215c <UtBF+0x19c>)
 8002138:	f004 fcbc 	bl	8006ab4 <HAL_IWDG_Refresh>
		if (UptoBaseData.Mode & 0x02 == 0x02) //0b0010,使用定向模式
 800213c:	e780      	b.n	8002040 <UtBF+0x80>
 800213e:	bf00      	nop
 8002140:	2000420c 	.word	0x2000420c
 8002144:	20004924 	.word	0x20004924
 8002148:	20004828 	.word	0x20004828
 800214c:	20004560 	.word	0x20004560
 8002150:	20004240 	.word	0x20004240
 8002154:	2000467c 	.word	0x2000467c
 8002158:	20003fec 	.word	0x20003fec
 800215c:	200040e4 	.word	0x200040e4

08002160 <BtUF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_BtUF */
void BtUF(void const *argument)
{
 8002160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002162:	b099      	sub	sp, #100	; 0x64
 8002164:	af08      	add	r7, sp, #32
 8002166:	6378      	str	r0, [r7, #52]	; 0x34
	/* USER CODE BEGIN BtUF */
//	xSemaphoreGive(BaseControlEnableFlagHandle);
	//用于指示当前传输数据是哪个仓位的标志
	//置为1的时候表示推进器控制�??????????
	//置为0的时候表示主控仓
	u8 SensorCarbin = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	/* Infinite loop */
	for (;;)
	{
		if (SensorCarbin % 2 == 1) //发�?�推进器控制仓数�?????
 800216e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d04d      	beq.n	8002218 <BtUF+0xb8>
		{
			//接收下位仓回传的数据
			if (xSemaphoreTake(BasetoUpTransFinishHandleHandle,
 800217c:	4b8c      	ldr	r3, [pc, #560]	; (80023b0 <BtUF+0x250>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2101      	movs	r1, #1
 8002182:	4618      	mov	r0, r3
 8002184:	f009 fdba 	bl	800bcfc <xQueueSemaphoreTake>
 8002188:	4603      	mov	r3, r0
 800218a:	2b01      	cmp	r3, #1
 800218c:	f040 8106 	bne.w	800239c <BtUF+0x23c>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				if (xSemaphoreTake(BasetoUpDataRWFlagHandle,
 8002190:	4b88      	ldr	r3, [pc, #544]	; (80023b4 <BtUF+0x254>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2101      	movs	r1, #1
 8002196:	4618      	mov	r0, r3
 8002198:	f009 fdb0 	bl	800bcfc <xQueueSemaphoreTake>
 800219c:	4603      	mov	r3, r0
 800219e:	2b01      	cmp	r3, #1
 80021a0:	f040 80fc 	bne.w	800239c <BtUF+0x23c>
						portTICK_PERIOD_MS) == pdTRUE)
				{
					BasetoUpData = CaptureUpData();
 80021a4:	4c84      	ldr	r4, [pc, #528]	; (80023b8 <BtUF+0x258>)
 80021a6:	463b      	mov	r3, r7
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe fb5b 	bl	8000864 <CaptureUpData>
 80021ae:	4625      	mov	r5, r4
 80021b0:	463c      	mov	r4, r7
 80021b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021be:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
					if (BasetoUpData.CabinNum == 1)
 80021c2:	4b7d      	ldr	r3, [pc, #500]	; (80023b8 <BtUF+0x258>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	f000 80e5 	beq.w	8002396 <BtUF+0x236>
					{
						goto BAD_CABIN_NUM;
					}
					//上传数据
					if (xSemaphoreTake(UptoBaseDataRWFlagHandle,
 80021cc:	4b7b      	ldr	r3, [pc, #492]	; (80023bc <BtUF+0x25c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	210a      	movs	r1, #10
 80021d2:	4618      	mov	r0, r3
 80021d4:	f009 fd92 	bl	800bcfc <xQueueSemaphoreTake>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d114      	bne.n	8002208 <BtUF+0xa8>
							10*portTICK_PERIOD_MS) == pdTRUE)
					{
						SendUpData(BasetoUpData);
 80021de:	4e76      	ldr	r6, [pc, #472]	; (80023b8 <BtUF+0x258>)
 80021e0:	466d      	mov	r5, sp
 80021e2:	f106 0410 	add.w	r4, r6, #16
 80021e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021ee:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80021f2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80021f6:	f7fe fc57 	bl	8000aa8 <SendUpData>
						xSemaphoreGive(UptoBaseDataRWFlagHandle);
 80021fa:	4b70      	ldr	r3, [pc, #448]	; (80023bc <BtUF+0x25c>)
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	2300      	movs	r3, #0
 8002200:	2200      	movs	r2, #0
 8002202:	2100      	movs	r1, #0
 8002204:	f009 fbee 	bl	800b9e4 <xQueueGenericSend>
					}
					xSemaphoreGive(BasetoUpDataRWFlagHandle);
 8002208:	4b6a      	ldr	r3, [pc, #424]	; (80023b4 <BtUF+0x254>)
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	2300      	movs	r3, #0
 800220e:	2200      	movs	r2, #0
 8002210:	2100      	movs	r1, #0
 8002212:	f009 fbe7 	bl	800b9e4 <xQueueGenericSend>
 8002216:	e0c1      	b.n	800239c <BtUF+0x23c>
				}
			}
		}
		else if (SensorCarbin % 2 == 0)	//发�?�主控仓数据
 8002218:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	f040 80b9 	bne.w	800239a <BtUF+0x23a>
		{
			//汇�?�本仓传感器数据
			//仓位数据
			BasetoUpData.CabinNum = 0;
 8002228:	4b63      	ldr	r3, [pc, #396]	; (80023b8 <BtUF+0x258>)
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
			//漏水�?????�?????
			BasetoUpData.WaterDetect = HAL_GPIO_ReadPin(GPIOE,
 800222e:	2140      	movs	r1, #64	; 0x40
 8002230:	4863      	ldr	r0, [pc, #396]	; (80023c0 <BtUF+0x260>)
 8002232:	f004 fbbf 	bl	80069b4 <HAL_GPIO_ReadPin>
 8002236:	4603      	mov	r3, r0
			GPIO_PIN_6) << 1;
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	b2da      	uxtb	r2, r3
			BasetoUpData.WaterDetect = HAL_GPIO_ReadPin(GPIOE,
 800223c:	4b5e      	ldr	r3, [pc, #376]	; (80023b8 <BtUF+0x258>)
 800223e:	705a      	strb	r2, [r3, #1]
			//九轴数据
			if (xSemaphoreTake(WT931SensorDataRWFlagHandle,
 8002240:	4b60      	ldr	r3, [pc, #384]	; (80023c4 <BtUF+0x264>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2101      	movs	r1, #1
 8002246:	4618      	mov	r0, r3
 8002248:	f009 fd58 	bl	800bcfc <xQueueSemaphoreTake>
 800224c:	4603      	mov	r3, r0
 800224e:	2b01      	cmp	r3, #1
 8002250:	d136      	bne.n	80022c0 <BtUF+0x160>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				BasetoUpData.AccNum[0] = WT931SensorData.AccNum[0];
 8002252:	4b5d      	ldr	r3, [pc, #372]	; (80023c8 <BtUF+0x268>)
 8002254:	881a      	ldrh	r2, [r3, #0]
 8002256:	4b58      	ldr	r3, [pc, #352]	; (80023b8 <BtUF+0x258>)
 8002258:	815a      	strh	r2, [r3, #10]
				BasetoUpData.AccNum[1] = WT931SensorData.AccNum[1];
 800225a:	4b5b      	ldr	r3, [pc, #364]	; (80023c8 <BtUF+0x268>)
 800225c:	885a      	ldrh	r2, [r3, #2]
 800225e:	4b56      	ldr	r3, [pc, #344]	; (80023b8 <BtUF+0x258>)
 8002260:	819a      	strh	r2, [r3, #12]
				BasetoUpData.AccNum[2] = WT931SensorData.AccNum[2];
 8002262:	4b59      	ldr	r3, [pc, #356]	; (80023c8 <BtUF+0x268>)
 8002264:	889a      	ldrh	r2, [r3, #4]
 8002266:	4b54      	ldr	r3, [pc, #336]	; (80023b8 <BtUF+0x258>)
 8002268:	81da      	strh	r2, [r3, #14]
				BasetoUpData.RotNum[0] = WT931SensorData.RotNum[0];
 800226a:	4b57      	ldr	r3, [pc, #348]	; (80023c8 <BtUF+0x268>)
 800226c:	88da      	ldrh	r2, [r3, #6]
 800226e:	4b52      	ldr	r3, [pc, #328]	; (80023b8 <BtUF+0x258>)
 8002270:	821a      	strh	r2, [r3, #16]
				BasetoUpData.RotNum[1] = WT931SensorData.RotNum[1];
 8002272:	4b55      	ldr	r3, [pc, #340]	; (80023c8 <BtUF+0x268>)
 8002274:	891a      	ldrh	r2, [r3, #8]
 8002276:	4b50      	ldr	r3, [pc, #320]	; (80023b8 <BtUF+0x258>)
 8002278:	825a      	strh	r2, [r3, #18]
				BasetoUpData.RotNum[2] = WT931SensorData.RotNum[2];
 800227a:	4b53      	ldr	r3, [pc, #332]	; (80023c8 <BtUF+0x268>)
 800227c:	895a      	ldrh	r2, [r3, #10]
 800227e:	4b4e      	ldr	r3, [pc, #312]	; (80023b8 <BtUF+0x258>)
 8002280:	829a      	strh	r2, [r3, #20]
				BasetoUpData.EulNum[0] = WT931SensorData.EulNum[0];
 8002282:	4b51      	ldr	r3, [pc, #324]	; (80023c8 <BtUF+0x268>)
 8002284:	899a      	ldrh	r2, [r3, #12]
 8002286:	4b4c      	ldr	r3, [pc, #304]	; (80023b8 <BtUF+0x258>)
 8002288:	82da      	strh	r2, [r3, #22]
				BasetoUpData.EulNum[1] = WT931SensorData.EulNum[1];
 800228a:	4b4f      	ldr	r3, [pc, #316]	; (80023c8 <BtUF+0x268>)
 800228c:	89da      	ldrh	r2, [r3, #14]
 800228e:	4b4a      	ldr	r3, [pc, #296]	; (80023b8 <BtUF+0x258>)
 8002290:	831a      	strh	r2, [r3, #24]
				BasetoUpData.EulNum[2] = WT931SensorData.EulNum[2];
 8002292:	4b4d      	ldr	r3, [pc, #308]	; (80023c8 <BtUF+0x268>)
 8002294:	8a1a      	ldrh	r2, [r3, #16]
 8002296:	4b48      	ldr	r3, [pc, #288]	; (80023b8 <BtUF+0x258>)
 8002298:	835a      	strh	r2, [r3, #26]
				BasetoUpData.MagNum[0] = WT931SensorData.MagNum[0];
 800229a:	4b4b      	ldr	r3, [pc, #300]	; (80023c8 <BtUF+0x268>)
 800229c:	8a5a      	ldrh	r2, [r3, #18]
 800229e:	4b46      	ldr	r3, [pc, #280]	; (80023b8 <BtUF+0x258>)
 80022a0:	839a      	strh	r2, [r3, #28]
				BasetoUpData.MagNum[1] = WT931SensorData.MagNum[1];
 80022a2:	4b49      	ldr	r3, [pc, #292]	; (80023c8 <BtUF+0x268>)
 80022a4:	8a9a      	ldrh	r2, [r3, #20]
 80022a6:	4b44      	ldr	r3, [pc, #272]	; (80023b8 <BtUF+0x258>)
 80022a8:	83da      	strh	r2, [r3, #30]
				BasetoUpData.MagNum[2] = WT931SensorData.MagNum[2];
 80022aa:	4b47      	ldr	r3, [pc, #284]	; (80023c8 <BtUF+0x268>)
 80022ac:	8ada      	ldrh	r2, [r3, #22]
 80022ae:	4b42      	ldr	r3, [pc, #264]	; (80023b8 <BtUF+0x258>)
 80022b0:	841a      	strh	r2, [r3, #32]
				xSemaphoreGive(WT931SensorDataRWFlagHandle);
 80022b2:	4b44      	ldr	r3, [pc, #272]	; (80023c4 <BtUF+0x264>)
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	2300      	movs	r3, #0
 80022b8:	2200      	movs	r2, #0
 80022ba:	2100      	movs	r1, #0
 80022bc:	f009 fb92 	bl	800b9e4 <xQueueGenericSend>
			}
			//温湿度大气压数据
			if (xSemaphoreTake(GY39SensorDataRWFlagHandle,
 80022c0:	4b42      	ldr	r3, [pc, #264]	; (80023cc <BtUF+0x26c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2101      	movs	r1, #1
 80022c6:	4618      	mov	r0, r3
 80022c8:	f009 fd18 	bl	800bcfc <xQueueSemaphoreTake>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d112      	bne.n	80022f8 <BtUF+0x198>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				BasetoUpData.CabinBaro = GY39SensorData.Baro;
 80022d2:	4b3f      	ldr	r3, [pc, #252]	; (80023d0 <BtUF+0x270>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	4a38      	ldr	r2, [pc, #224]	; (80023b8 <BtUF+0x258>)
 80022d8:	6053      	str	r3, [r2, #4]
				BasetoUpData.CabinHum = GY39SensorData.Hum;
 80022da:	4b3d      	ldr	r3, [pc, #244]	; (80023d0 <BtUF+0x270>)
 80022dc:	891a      	ldrh	r2, [r3, #8]
 80022de:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <BtUF+0x258>)
 80022e0:	811a      	strh	r2, [r3, #8]
				BasetoUpData.CabinTemperature = GY39SensorData.Temperature;
 80022e2:	4b3b      	ldr	r3, [pc, #236]	; (80023d0 <BtUF+0x270>)
 80022e4:	881a      	ldrh	r2, [r3, #0]
 80022e6:	4b34      	ldr	r3, [pc, #208]	; (80023b8 <BtUF+0x258>)
 80022e8:	805a      	strh	r2, [r3, #2]
				xSemaphoreGive(GY39SensorDataRWFlagHandle);
 80022ea:	4b38      	ldr	r3, [pc, #224]	; (80023cc <BtUF+0x26c>)
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	2300      	movs	r3, #0
 80022f0:	2200      	movs	r2, #0
 80022f2:	2100      	movs	r1, #0
 80022f4:	f009 fb76 	bl	800b9e4 <xQueueGenericSend>
			}
			//水深水温数据
			if (xSemaphoreTake(DeepSensorDataRWFlagHandle,
 80022f8:	4b36      	ldr	r3, [pc, #216]	; (80023d4 <BtUF+0x274>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2101      	movs	r1, #1
 80022fe:	4618      	mov	r0, r3
 8002300:	f009 fcfc 	bl	800bcfc <xQueueSemaphoreTake>
 8002304:	4603      	mov	r3, r0
 8002306:	2b01      	cmp	r3, #1
 8002308:	d10e      	bne.n	8002328 <BtUF+0x1c8>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				BasetoUpData.WaterDepth = DeepSensorData.WaterDepth;
 800230a:	4b33      	ldr	r3, [pc, #204]	; (80023d8 <BtUF+0x278>)
 800230c:	885a      	ldrh	r2, [r3, #2]
 800230e:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <BtUF+0x258>)
 8002310:	849a      	strh	r2, [r3, #36]	; 0x24
				BasetoUpData.WaterTemperature = DeepSensorData.WaterTemperature;
 8002312:	4b31      	ldr	r3, [pc, #196]	; (80023d8 <BtUF+0x278>)
 8002314:	881a      	ldrh	r2, [r3, #0]
 8002316:	4b28      	ldr	r3, [pc, #160]	; (80023b8 <BtUF+0x258>)
 8002318:	845a      	strh	r2, [r3, #34]	; 0x22
				xSemaphoreGive(DeepSensorDataRWFlagHandle);
 800231a:	4b2e      	ldr	r3, [pc, #184]	; (80023d4 <BtUF+0x274>)
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	2300      	movs	r3, #0
 8002320:	2200      	movs	r2, #0
 8002322:	2100      	movs	r1, #0
 8002324:	f009 fb5e 	bl	800b9e4 <xQueueGenericSend>
			}
			//声呐数据
			if (xSemaphoreTake(P30SensorDataRWFlagHandle,
 8002328:	4b2c      	ldr	r3, [pc, #176]	; (80023dc <BtUF+0x27c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2101      	movs	r1, #1
 800232e:	4618      	mov	r0, r3
 8002330:	f009 fce4 	bl	800bcfc <xQueueSemaphoreTake>
 8002334:	4603      	mov	r3, r0
 8002336:	2b01      	cmp	r3, #1
 8002338:	d10e      	bne.n	8002358 <BtUF+0x1f8>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				BasetoUpData.DepthToBottom = P30SensorData.DepthToBottom;
 800233a:	4b29      	ldr	r3, [pc, #164]	; (80023e0 <BtUF+0x280>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a1e      	ldr	r2, [pc, #120]	; (80023b8 <BtUF+0x258>)
 8002340:	6293      	str	r3, [r2, #40]	; 0x28
				BasetoUpData.Confidence = P30SensorData.Confidence;
 8002342:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <BtUF+0x280>)
 8002344:	889a      	ldrh	r2, [r3, #4]
 8002346:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <BtUF+0x258>)
 8002348:	84da      	strh	r2, [r3, #38]	; 0x26
				xSemaphoreGive(P30SensorDataRWFlagHandle);
 800234a:	4b24      	ldr	r3, [pc, #144]	; (80023dc <BtUF+0x27c>)
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	2300      	movs	r3, #0
 8002350:	2200      	movs	r2, #0
 8002352:	2100      	movs	r1, #0
 8002354:	f009 fb46 	bl	800b9e4 <xQueueGenericSend>
			}
			//上传数据
			if (xSemaphoreTake(UptoBaseDataRWFlagHandle,
 8002358:	4b18      	ldr	r3, [pc, #96]	; (80023bc <BtUF+0x25c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	210a      	movs	r1, #10
 800235e:	4618      	mov	r0, r3
 8002360:	f009 fccc 	bl	800bcfc <xQueueSemaphoreTake>
 8002364:	4603      	mov	r3, r0
 8002366:	2b01      	cmp	r3, #1
 8002368:	d117      	bne.n	800239a <BtUF+0x23a>
					10*portTICK_PERIOD_MS) == pdTRUE)
			{
				SendUpData(BasetoUpData);
 800236a:	4e13      	ldr	r6, [pc, #76]	; (80023b8 <BtUF+0x258>)
 800236c:	466d      	mov	r5, sp
 800236e:	f106 0410 	add.w	r4, r6, #16
 8002372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002376:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800237a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800237e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002382:	f7fe fb91 	bl	8000aa8 <SendUpData>
				xSemaphoreGive(UptoBaseDataRWFlagHandle);
 8002386:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <BtUF+0x25c>)
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	2300      	movs	r3, #0
 800238c:	2200      	movs	r2, #0
 800238e:	2100      	movs	r1, #0
 8002390:	f009 fb28 	bl	800b9e4 <xQueueGenericSend>
 8002394:	e002      	b.n	800239c <BtUF+0x23c>
						goto BAD_CABIN_NUM;
 8002396:	bf00      	nop
 8002398:	e000      	b.n	800239c <BtUF+0x23c>
			}
		}
		BAD_CABIN_NUM: SensorCarbin++;
 800239a:	bf00      	nop
 800239c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023a0:	3301      	adds	r3, #1
 80023a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		HAL_IWDG_Refresh(&hiwdg1);
 80023a6:	480f      	ldr	r0, [pc, #60]	; (80023e4 <BtUF+0x284>)
 80023a8:	f004 fb84 	bl	8006ab4 <HAL_IWDG_Refresh>
		if (SensorCarbin % 2 == 1) //发�?�推进器控制仓数�?????
 80023ac:	e6df      	b.n	800216e <BtUF+0xe>
 80023ae:	bf00      	nop
 80023b0:	200045e8 	.word	0x200045e8
 80023b4:	20004828 	.word	0x20004828
 80023b8:	2000420c 	.word	0x2000420c
 80023bc:	20004560 	.word	0x20004560
 80023c0:	58021000 	.word	0x58021000
 80023c4:	20004364 	.word	0x20004364
 80023c8:	20004240 	.word	0x20004240
 80023cc:	2000423c 	.word	0x2000423c
 80023d0:	20004564 	.word	0x20004564
 80023d4:	20004200 	.word	0x20004200
 80023d8:	2000467c 	.word	0x2000467c
 80023dc:	200041fc 	.word	0x200041fc
 80023e0:	20004820 	.word	0x20004820
 80023e4:	200040e4 	.word	0x200040e4

080023e8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a04      	ldr	r2, [pc, #16]	; (8002408 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d101      	bne.n	80023fe <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 80023fa:	f001 f9d9 	bl	80037b0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40001000 	.word	0x40001000

0800240c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002410:	b672      	cpsid	i
}
 8002412:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002414:	e7fe      	b.n	8002414 <Error_Handler+0x8>
	...

08002418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241e:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <HAL_MspInit+0x38>)
 8002420:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002424:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <HAL_MspInit+0x38>)
 8002426:	f043 0302 	orr.w	r3, r3, #2
 800242a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <HAL_MspInit+0x38>)
 8002430:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800243c:	2200      	movs	r2, #0
 800243e:	210f      	movs	r1, #15
 8002440:	f06f 0001 	mvn.w	r0, #1
 8002444:	f001 fa98 	bl	8003978 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	58024400 	.word	0x58024400

08002454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b094      	sub	sp, #80	; 0x50
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a96      	ldr	r2, [pc, #600]	; (80026cc <HAL_UART_MspInit+0x278>)
 8002472:	4293      	cmp	r3, r2
 8002474:	f040 8091 	bne.w	800259a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002478:	4b95      	ldr	r3, [pc, #596]	; (80026d0 <HAL_UART_MspInit+0x27c>)
 800247a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800247e:	4a94      	ldr	r2, [pc, #592]	; (80026d0 <HAL_UART_MspInit+0x27c>)
 8002480:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002484:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002488:	4b91      	ldr	r3, [pc, #580]	; (80026d0 <HAL_UART_MspInit+0x27c>)
 800248a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800248e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002492:	63bb      	str	r3, [r7, #56]	; 0x38
 8002494:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002496:	4b8e      	ldr	r3, [pc, #568]	; (80026d0 <HAL_UART_MspInit+0x27c>)
 8002498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800249c:	4a8c      	ldr	r2, [pc, #560]	; (80026d0 <HAL_UART_MspInit+0x27c>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024a6:	4b8a      	ldr	r3, [pc, #552]	; (80026d0 <HAL_UART_MspInit+0x27c>)
 80024a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	637b      	str	r3, [r7, #52]	; 0x34
 80024b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024b4:	2303      	movs	r3, #3
 80024b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b8:	2302      	movs	r3, #2
 80024ba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c0:	2300      	movs	r3, #0
 80024c2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80024c4:	2308      	movs	r3, #8
 80024c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024cc:	4619      	mov	r1, r3
 80024ce:	4881      	ldr	r0, [pc, #516]	; (80026d4 <HAL_UART_MspInit+0x280>)
 80024d0:	f004 f8c0 	bl	8006654 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream5;
 80024d4:	4b80      	ldr	r3, [pc, #512]	; (80026d8 <HAL_UART_MspInit+0x284>)
 80024d6:	4a81      	ldr	r2, [pc, #516]	; (80026dc <HAL_UART_MspInit+0x288>)
 80024d8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80024da:	4b7f      	ldr	r3, [pc, #508]	; (80026d8 <HAL_UART_MspInit+0x284>)
 80024dc:	223f      	movs	r2, #63	; 0x3f
 80024de:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024e0:	4b7d      	ldr	r3, [pc, #500]	; (80026d8 <HAL_UART_MspInit+0x284>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e6:	4b7c      	ldr	r3, [pc, #496]	; (80026d8 <HAL_UART_MspInit+0x284>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024ec:	4b7a      	ldr	r3, [pc, #488]	; (80026d8 <HAL_UART_MspInit+0x284>)
 80024ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024f2:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024f4:	4b78      	ldr	r3, [pc, #480]	; (80026d8 <HAL_UART_MspInit+0x284>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024fa:	4b77      	ldr	r3, [pc, #476]	; (80026d8 <HAL_UART_MspInit+0x284>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002500:	4b75      	ldr	r3, [pc, #468]	; (80026d8 <HAL_UART_MspInit+0x284>)
 8002502:	2200      	movs	r2, #0
 8002504:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002506:	4b74      	ldr	r3, [pc, #464]	; (80026d8 <HAL_UART_MspInit+0x284>)
 8002508:	2200      	movs	r2, #0
 800250a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800250c:	4b72      	ldr	r3, [pc, #456]	; (80026d8 <HAL_UART_MspInit+0x284>)
 800250e:	2200      	movs	r2, #0
 8002510:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002512:	4871      	ldr	r0, [pc, #452]	; (80026d8 <HAL_UART_MspInit+0x284>)
 8002514:	f001 fa58 	bl	80039c8 <HAL_DMA_Init>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800251e:	f7ff ff75 	bl	800240c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a6c      	ldr	r2, [pc, #432]	; (80026d8 <HAL_UART_MspInit+0x284>)
 8002526:	67da      	str	r2, [r3, #124]	; 0x7c
 8002528:	4a6b      	ldr	r2, [pc, #428]	; (80026d8 <HAL_UART_MspInit+0x284>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream6;
 800252e:	4b6c      	ldr	r3, [pc, #432]	; (80026e0 <HAL_UART_MspInit+0x28c>)
 8002530:	4a6c      	ldr	r2, [pc, #432]	; (80026e4 <HAL_UART_MspInit+0x290>)
 8002532:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8002534:	4b6a      	ldr	r3, [pc, #424]	; (80026e0 <HAL_UART_MspInit+0x28c>)
 8002536:	2240      	movs	r2, #64	; 0x40
 8002538:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800253a:	4b69      	ldr	r3, [pc, #420]	; (80026e0 <HAL_UART_MspInit+0x28c>)
 800253c:	2240      	movs	r2, #64	; 0x40
 800253e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002540:	4b67      	ldr	r3, [pc, #412]	; (80026e0 <HAL_UART_MspInit+0x28c>)
 8002542:	2200      	movs	r2, #0
 8002544:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002546:	4b66      	ldr	r3, [pc, #408]	; (80026e0 <HAL_UART_MspInit+0x28c>)
 8002548:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800254c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800254e:	4b64      	ldr	r3, [pc, #400]	; (80026e0 <HAL_UART_MspInit+0x28c>)
 8002550:	2200      	movs	r2, #0
 8002552:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002554:	4b62      	ldr	r3, [pc, #392]	; (80026e0 <HAL_UART_MspInit+0x28c>)
 8002556:	2200      	movs	r2, #0
 8002558:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800255a:	4b61      	ldr	r3, [pc, #388]	; (80026e0 <HAL_UART_MspInit+0x28c>)
 800255c:	2200      	movs	r2, #0
 800255e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002560:	4b5f      	ldr	r3, [pc, #380]	; (80026e0 <HAL_UART_MspInit+0x28c>)
 8002562:	2200      	movs	r2, #0
 8002564:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002566:	4b5e      	ldr	r3, [pc, #376]	; (80026e0 <HAL_UART_MspInit+0x28c>)
 8002568:	2200      	movs	r2, #0
 800256a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800256c:	485c      	ldr	r0, [pc, #368]	; (80026e0 <HAL_UART_MspInit+0x28c>)
 800256e:	f001 fa2b 	bl	80039c8 <HAL_DMA_Init>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002578:	f7ff ff48 	bl	800240c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a58      	ldr	r2, [pc, #352]	; (80026e0 <HAL_UART_MspInit+0x28c>)
 8002580:	679a      	str	r2, [r3, #120]	; 0x78
 8002582:	4a57      	ldr	r2, [pc, #348]	; (80026e0 <HAL_UART_MspInit+0x28c>)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002588:	2200      	movs	r2, #0
 800258a:	2105      	movs	r1, #5
 800258c:	2034      	movs	r0, #52	; 0x34
 800258e:	f001 f9f3 	bl	8003978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002592:	2034      	movs	r0, #52	; 0x34
 8002594:	f001 fa0a 	bl	80039ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002598:	e2fc      	b.n	8002b94 <HAL_UART_MspInit+0x740>
  else if(huart->Instance==UART5)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a52      	ldr	r2, [pc, #328]	; (80026e8 <HAL_UART_MspInit+0x294>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	f040 80ad 	bne.w	8002700 <HAL_UART_MspInit+0x2ac>
    __HAL_RCC_UART5_CLK_ENABLE();
 80025a6:	4b4a      	ldr	r3, [pc, #296]	; (80026d0 <HAL_UART_MspInit+0x27c>)
 80025a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025ac:	4a48      	ldr	r2, [pc, #288]	; (80026d0 <HAL_UART_MspInit+0x27c>)
 80025ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025b6:	4b46      	ldr	r3, [pc, #280]	; (80026d0 <HAL_UART_MspInit+0x27c>)
 80025b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c0:	633b      	str	r3, [r7, #48]	; 0x30
 80025c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c4:	4b42      	ldr	r3, [pc, #264]	; (80026d0 <HAL_UART_MspInit+0x27c>)
 80025c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ca:	4a41      	ldr	r2, [pc, #260]	; (80026d0 <HAL_UART_MspInit+0x27c>)
 80025cc:	f043 0302 	orr.w	r3, r3, #2
 80025d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025d4:	4b3e      	ldr	r3, [pc, #248]	; (80026d0 <HAL_UART_MspInit+0x27c>)
 80025d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80025e2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80025e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e8:	2302      	movs	r3, #2
 80025ea:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f0:	2300      	movs	r3, #0
 80025f2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80025f4:	230e      	movs	r3, #14
 80025f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025fc:	4619      	mov	r1, r3
 80025fe:	483b      	ldr	r0, [pc, #236]	; (80026ec <HAL_UART_MspInit+0x298>)
 8002600:	f004 f828 	bl	8006654 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream4;
 8002604:	4b3a      	ldr	r3, [pc, #232]	; (80026f0 <HAL_UART_MspInit+0x29c>)
 8002606:	4a3b      	ldr	r2, [pc, #236]	; (80026f4 <HAL_UART_MspInit+0x2a0>)
 8002608:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 800260a:	4b39      	ldr	r3, [pc, #228]	; (80026f0 <HAL_UART_MspInit+0x29c>)
 800260c:	2241      	movs	r2, #65	; 0x41
 800260e:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002610:	4b37      	ldr	r3, [pc, #220]	; (80026f0 <HAL_UART_MspInit+0x29c>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002616:	4b36      	ldr	r3, [pc, #216]	; (80026f0 <HAL_UART_MspInit+0x29c>)
 8002618:	2200      	movs	r2, #0
 800261a:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800261c:	4b34      	ldr	r3, [pc, #208]	; (80026f0 <HAL_UART_MspInit+0x29c>)
 800261e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002622:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002624:	4b32      	ldr	r3, [pc, #200]	; (80026f0 <HAL_UART_MspInit+0x29c>)
 8002626:	2200      	movs	r2, #0
 8002628:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800262a:	4b31      	ldr	r3, [pc, #196]	; (80026f0 <HAL_UART_MspInit+0x29c>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002630:	4b2f      	ldr	r3, [pc, #188]	; (80026f0 <HAL_UART_MspInit+0x29c>)
 8002632:	2200      	movs	r2, #0
 8002634:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002636:	4b2e      	ldr	r3, [pc, #184]	; (80026f0 <HAL_UART_MspInit+0x29c>)
 8002638:	2200      	movs	r2, #0
 800263a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800263c:	4b2c      	ldr	r3, [pc, #176]	; (80026f0 <HAL_UART_MspInit+0x29c>)
 800263e:	2200      	movs	r2, #0
 8002640:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002642:	482b      	ldr	r0, [pc, #172]	; (80026f0 <HAL_UART_MspInit+0x29c>)
 8002644:	f001 f9c0 	bl	80039c8 <HAL_DMA_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 800264e:	f7ff fedd 	bl	800240c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a26      	ldr	r2, [pc, #152]	; (80026f0 <HAL_UART_MspInit+0x29c>)
 8002656:	67da      	str	r2, [r3, #124]	; 0x7c
 8002658:	4a25      	ldr	r2, [pc, #148]	; (80026f0 <HAL_UART_MspInit+0x29c>)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA2_Stream2;
 800265e:	4b26      	ldr	r3, [pc, #152]	; (80026f8 <HAL_UART_MspInit+0x2a4>)
 8002660:	4a26      	ldr	r2, [pc, #152]	; (80026fc <HAL_UART_MspInit+0x2a8>)
 8002662:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8002664:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <HAL_UART_MspInit+0x2a4>)
 8002666:	2242      	movs	r2, #66	; 0x42
 8002668:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800266a:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <HAL_UART_MspInit+0x2a4>)
 800266c:	2240      	movs	r2, #64	; 0x40
 800266e:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002670:	4b21      	ldr	r3, [pc, #132]	; (80026f8 <HAL_UART_MspInit+0x2a4>)
 8002672:	2200      	movs	r2, #0
 8002674:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002676:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <HAL_UART_MspInit+0x2a4>)
 8002678:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800267c:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800267e:	4b1e      	ldr	r3, [pc, #120]	; (80026f8 <HAL_UART_MspInit+0x2a4>)
 8002680:	2200      	movs	r2, #0
 8002682:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002684:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <HAL_UART_MspInit+0x2a4>)
 8002686:	2200      	movs	r2, #0
 8002688:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800268a:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <HAL_UART_MspInit+0x2a4>)
 800268c:	2200      	movs	r2, #0
 800268e:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002690:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <HAL_UART_MspInit+0x2a4>)
 8002692:	2200      	movs	r2, #0
 8002694:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002696:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <HAL_UART_MspInit+0x2a4>)
 8002698:	2200      	movs	r2, #0
 800269a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800269c:	4816      	ldr	r0, [pc, #88]	; (80026f8 <HAL_UART_MspInit+0x2a4>)
 800269e:	f001 f993 	bl	80039c8 <HAL_DMA_Init>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_UART_MspInit+0x258>
      Error_Handler();
 80026a8:	f7ff feb0 	bl	800240c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a12      	ldr	r2, [pc, #72]	; (80026f8 <HAL_UART_MspInit+0x2a4>)
 80026b0:	679a      	str	r2, [r3, #120]	; 0x78
 80026b2:	4a11      	ldr	r2, [pc, #68]	; (80026f8 <HAL_UART_MspInit+0x2a4>)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80026b8:	2200      	movs	r2, #0
 80026ba:	2105      	movs	r1, #5
 80026bc:	2035      	movs	r0, #53	; 0x35
 80026be:	f001 f95b 	bl	8003978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80026c2:	2035      	movs	r0, #53	; 0x35
 80026c4:	f001 f972 	bl	80039ac <HAL_NVIC_EnableIRQ>
}
 80026c8:	e264      	b.n	8002b94 <HAL_UART_MspInit+0x740>
 80026ca:	bf00      	nop
 80026cc:	40004c00 	.word	0x40004c00
 80026d0:	58024400 	.word	0x58024400
 80026d4:	58020000 	.word	0x58020000
 80026d8:	20003ff4 	.word	0x20003ff4
 80026dc:	40020088 	.word	0x40020088
 80026e0:	20004830 	.word	0x20004830
 80026e4:	400200a0 	.word	0x400200a0
 80026e8:	40005000 	.word	0x40005000
 80026ec:	58020400 	.word	0x58020400
 80026f0:	200047a8 	.word	0x200047a8
 80026f4:	40020070 	.word	0x40020070
 80026f8:	200048a8 	.word	0x200048a8
 80026fc:	40020440 	.word	0x40020440
  else if(huart->Instance==UART8)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a96      	ldr	r2, [pc, #600]	; (8002960 <HAL_UART_MspInit+0x50c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	f040 8091 	bne.w	800282e <HAL_UART_MspInit+0x3da>
    __HAL_RCC_UART8_CLK_ENABLE();
 800270c:	4b95      	ldr	r3, [pc, #596]	; (8002964 <HAL_UART_MspInit+0x510>)
 800270e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002712:	4a94      	ldr	r2, [pc, #592]	; (8002964 <HAL_UART_MspInit+0x510>)
 8002714:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002718:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800271c:	4b91      	ldr	r3, [pc, #580]	; (8002964 <HAL_UART_MspInit+0x510>)
 800271e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002722:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002726:	62bb      	str	r3, [r7, #40]	; 0x28
 8002728:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800272a:	4b8e      	ldr	r3, [pc, #568]	; (8002964 <HAL_UART_MspInit+0x510>)
 800272c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002730:	4a8c      	ldr	r2, [pc, #560]	; (8002964 <HAL_UART_MspInit+0x510>)
 8002732:	f043 0310 	orr.w	r3, r3, #16
 8002736:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800273a:	4b8a      	ldr	r3, [pc, #552]	; (8002964 <HAL_UART_MspInit+0x510>)
 800273c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002748:	2303      	movs	r3, #3
 800274a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274c:	2302      	movs	r3, #2
 800274e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002754:	2300      	movs	r3, #0
 8002756:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002758:	2308      	movs	r3, #8
 800275a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800275c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002760:	4619      	mov	r1, r3
 8002762:	4881      	ldr	r0, [pc, #516]	; (8002968 <HAL_UART_MspInit+0x514>)
 8002764:	f003 ff76 	bl	8006654 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream7;
 8002768:	4b80      	ldr	r3, [pc, #512]	; (800296c <HAL_UART_MspInit+0x518>)
 800276a:	4a81      	ldr	r2, [pc, #516]	; (8002970 <HAL_UART_MspInit+0x51c>)
 800276c:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 800276e:	4b7f      	ldr	r3, [pc, #508]	; (800296c <HAL_UART_MspInit+0x518>)
 8002770:	2251      	movs	r2, #81	; 0x51
 8002772:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002774:	4b7d      	ldr	r3, [pc, #500]	; (800296c <HAL_UART_MspInit+0x518>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800277a:	4b7c      	ldr	r3, [pc, #496]	; (800296c <HAL_UART_MspInit+0x518>)
 800277c:	2200      	movs	r2, #0
 800277e:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002780:	4b7a      	ldr	r3, [pc, #488]	; (800296c <HAL_UART_MspInit+0x518>)
 8002782:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002786:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002788:	4b78      	ldr	r3, [pc, #480]	; (800296c <HAL_UART_MspInit+0x518>)
 800278a:	2200      	movs	r2, #0
 800278c:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800278e:	4b77      	ldr	r3, [pc, #476]	; (800296c <HAL_UART_MspInit+0x518>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8002794:	4b75      	ldr	r3, [pc, #468]	; (800296c <HAL_UART_MspInit+0x518>)
 8002796:	2200      	movs	r2, #0
 8002798:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 800279a:	4b74      	ldr	r3, [pc, #464]	; (800296c <HAL_UART_MspInit+0x518>)
 800279c:	2200      	movs	r2, #0
 800279e:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027a0:	4b72      	ldr	r3, [pc, #456]	; (800296c <HAL_UART_MspInit+0x518>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80027a6:	4871      	ldr	r0, [pc, #452]	; (800296c <HAL_UART_MspInit+0x518>)
 80027a8:	f001 f90e 	bl	80039c8 <HAL_DMA_Init>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_UART_MspInit+0x362>
      Error_Handler();
 80027b2:	f7ff fe2b 	bl	800240c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a6c      	ldr	r2, [pc, #432]	; (800296c <HAL_UART_MspInit+0x518>)
 80027ba:	67da      	str	r2, [r3, #124]	; 0x7c
 80027bc:	4a6b      	ldr	r2, [pc, #428]	; (800296c <HAL_UART_MspInit+0x518>)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart8_tx.Instance = DMA2_Stream0;
 80027c2:	4b6c      	ldr	r3, [pc, #432]	; (8002974 <HAL_UART_MspInit+0x520>)
 80027c4:	4a6c      	ldr	r2, [pc, #432]	; (8002978 <HAL_UART_MspInit+0x524>)
 80027c6:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 80027c8:	4b6a      	ldr	r3, [pc, #424]	; (8002974 <HAL_UART_MspInit+0x520>)
 80027ca:	2252      	movs	r2, #82	; 0x52
 80027cc:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027ce:	4b69      	ldr	r3, [pc, #420]	; (8002974 <HAL_UART_MspInit+0x520>)
 80027d0:	2240      	movs	r2, #64	; 0x40
 80027d2:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027d4:	4b67      	ldr	r3, [pc, #412]	; (8002974 <HAL_UART_MspInit+0x520>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027da:	4b66      	ldr	r3, [pc, #408]	; (8002974 <HAL_UART_MspInit+0x520>)
 80027dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027e0:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027e2:	4b64      	ldr	r3, [pc, #400]	; (8002974 <HAL_UART_MspInit+0x520>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027e8:	4b62      	ldr	r3, [pc, #392]	; (8002974 <HAL_UART_MspInit+0x520>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 80027ee:	4b61      	ldr	r3, [pc, #388]	; (8002974 <HAL_UART_MspInit+0x520>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027f4:	4b5f      	ldr	r3, [pc, #380]	; (8002974 <HAL_UART_MspInit+0x520>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027fa:	4b5e      	ldr	r3, [pc, #376]	; (8002974 <HAL_UART_MspInit+0x520>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8002800:	485c      	ldr	r0, [pc, #368]	; (8002974 <HAL_UART_MspInit+0x520>)
 8002802:	f001 f8e1 	bl	80039c8 <HAL_DMA_Init>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_UART_MspInit+0x3bc>
      Error_Handler();
 800280c:	f7ff fdfe 	bl	800240c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a58      	ldr	r2, [pc, #352]	; (8002974 <HAL_UART_MspInit+0x520>)
 8002814:	679a      	str	r2, [r3, #120]	; 0x78
 8002816:	4a57      	ldr	r2, [pc, #348]	; (8002974 <HAL_UART_MspInit+0x520>)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 800281c:	2200      	movs	r2, #0
 800281e:	2105      	movs	r1, #5
 8002820:	2053      	movs	r0, #83	; 0x53
 8002822:	f001 f8a9 	bl	8003978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002826:	2053      	movs	r0, #83	; 0x53
 8002828:	f001 f8c0 	bl	80039ac <HAL_NVIC_EnableIRQ>
}
 800282c:	e1b2      	b.n	8002b94 <HAL_UART_MspInit+0x740>
  else if(huart->Instance==USART1)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a52      	ldr	r2, [pc, #328]	; (800297c <HAL_UART_MspInit+0x528>)
 8002834:	4293      	cmp	r3, r2
 8002836:	f040 80ad 	bne.w	8002994 <HAL_UART_MspInit+0x540>
    __HAL_RCC_USART1_CLK_ENABLE();
 800283a:	4b4a      	ldr	r3, [pc, #296]	; (8002964 <HAL_UART_MspInit+0x510>)
 800283c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002840:	4a48      	ldr	r2, [pc, #288]	; (8002964 <HAL_UART_MspInit+0x510>)
 8002842:	f043 0310 	orr.w	r3, r3, #16
 8002846:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800284a:	4b46      	ldr	r3, [pc, #280]	; (8002964 <HAL_UART_MspInit+0x510>)
 800284c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	623b      	str	r3, [r7, #32]
 8002856:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002858:	4b42      	ldr	r3, [pc, #264]	; (8002964 <HAL_UART_MspInit+0x510>)
 800285a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800285e:	4a41      	ldr	r2, [pc, #260]	; (8002964 <HAL_UART_MspInit+0x510>)
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002868:	4b3e      	ldr	r3, [pc, #248]	; (8002964 <HAL_UART_MspInit+0x510>)
 800286a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	61fb      	str	r3, [r7, #28]
 8002874:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002876:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800287a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002884:	2300      	movs	r3, #0
 8002886:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002888:	2304      	movs	r3, #4
 800288a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002890:	4619      	mov	r1, r3
 8002892:	483b      	ldr	r0, [pc, #236]	; (8002980 <HAL_UART_MspInit+0x52c>)
 8002894:	f003 fede 	bl	8006654 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8002898:	4b3a      	ldr	r3, [pc, #232]	; (8002984 <HAL_UART_MspInit+0x530>)
 800289a:	4a3b      	ldr	r2, [pc, #236]	; (8002988 <HAL_UART_MspInit+0x534>)
 800289c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800289e:	4b39      	ldr	r3, [pc, #228]	; (8002984 <HAL_UART_MspInit+0x530>)
 80028a0:	2229      	movs	r2, #41	; 0x29
 80028a2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028a4:	4b37      	ldr	r3, [pc, #220]	; (8002984 <HAL_UART_MspInit+0x530>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028aa:	4b36      	ldr	r3, [pc, #216]	; (8002984 <HAL_UART_MspInit+0x530>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028b0:	4b34      	ldr	r3, [pc, #208]	; (8002984 <HAL_UART_MspInit+0x530>)
 80028b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028b6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028b8:	4b32      	ldr	r3, [pc, #200]	; (8002984 <HAL_UART_MspInit+0x530>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028be:	4b31      	ldr	r3, [pc, #196]	; (8002984 <HAL_UART_MspInit+0x530>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80028c4:	4b2f      	ldr	r3, [pc, #188]	; (8002984 <HAL_UART_MspInit+0x530>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028ca:	4b2e      	ldr	r3, [pc, #184]	; (8002984 <HAL_UART_MspInit+0x530>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028d0:	4b2c      	ldr	r3, [pc, #176]	; (8002984 <HAL_UART_MspInit+0x530>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80028d6:	482b      	ldr	r0, [pc, #172]	; (8002984 <HAL_UART_MspInit+0x530>)
 80028d8:	f001 f876 	bl	80039c8 <HAL_DMA_Init>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_UART_MspInit+0x492>
      Error_Handler();
 80028e2:	f7ff fd93 	bl	800240c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a26      	ldr	r2, [pc, #152]	; (8002984 <HAL_UART_MspInit+0x530>)
 80028ea:	67da      	str	r2, [r3, #124]	; 0x7c
 80028ec:	4a25      	ldr	r2, [pc, #148]	; (8002984 <HAL_UART_MspInit+0x530>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80028f2:	4b26      	ldr	r3, [pc, #152]	; (800298c <HAL_UART_MspInit+0x538>)
 80028f4:	4a26      	ldr	r2, [pc, #152]	; (8002990 <HAL_UART_MspInit+0x53c>)
 80028f6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80028f8:	4b24      	ldr	r3, [pc, #144]	; (800298c <HAL_UART_MspInit+0x538>)
 80028fa:	222a      	movs	r2, #42	; 0x2a
 80028fc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028fe:	4b23      	ldr	r3, [pc, #140]	; (800298c <HAL_UART_MspInit+0x538>)
 8002900:	2240      	movs	r2, #64	; 0x40
 8002902:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002904:	4b21      	ldr	r3, [pc, #132]	; (800298c <HAL_UART_MspInit+0x538>)
 8002906:	2200      	movs	r2, #0
 8002908:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800290a:	4b20      	ldr	r3, [pc, #128]	; (800298c <HAL_UART_MspInit+0x538>)
 800290c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002910:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002912:	4b1e      	ldr	r3, [pc, #120]	; (800298c <HAL_UART_MspInit+0x538>)
 8002914:	2200      	movs	r2, #0
 8002916:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002918:	4b1c      	ldr	r3, [pc, #112]	; (800298c <HAL_UART_MspInit+0x538>)
 800291a:	2200      	movs	r2, #0
 800291c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800291e:	4b1b      	ldr	r3, [pc, #108]	; (800298c <HAL_UART_MspInit+0x538>)
 8002920:	2200      	movs	r2, #0
 8002922:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002924:	4b19      	ldr	r3, [pc, #100]	; (800298c <HAL_UART_MspInit+0x538>)
 8002926:	2200      	movs	r2, #0
 8002928:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800292a:	4b18      	ldr	r3, [pc, #96]	; (800298c <HAL_UART_MspInit+0x538>)
 800292c:	2200      	movs	r2, #0
 800292e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002930:	4816      	ldr	r0, [pc, #88]	; (800298c <HAL_UART_MspInit+0x538>)
 8002932:	f001 f849 	bl	80039c8 <HAL_DMA_Init>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <HAL_UART_MspInit+0x4ec>
      Error_Handler();
 800293c:	f7ff fd66 	bl	800240c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a12      	ldr	r2, [pc, #72]	; (800298c <HAL_UART_MspInit+0x538>)
 8002944:	679a      	str	r2, [r3, #120]	; 0x78
 8002946:	4a11      	ldr	r2, [pc, #68]	; (800298c <HAL_UART_MspInit+0x538>)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800294c:	2200      	movs	r2, #0
 800294e:	2105      	movs	r1, #5
 8002950:	2025      	movs	r0, #37	; 0x25
 8002952:	f001 f811 	bl	8003978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002956:	2025      	movs	r0, #37	; 0x25
 8002958:	f001 f828 	bl	80039ac <HAL_NVIC_EnableIRQ>
}
 800295c:	e11a      	b.n	8002b94 <HAL_UART_MspInit+0x740>
 800295e:	bf00      	nop
 8002960:	40007c00 	.word	0x40007c00
 8002964:	58024400 	.word	0x58024400
 8002968:	58021000 	.word	0x58021000
 800296c:	20004458 	.word	0x20004458
 8002970:	400200b8 	.word	0x400200b8
 8002974:	20004570 	.word	0x20004570
 8002978:	40020410 	.word	0x40020410
 800297c:	40011000 	.word	0x40011000
 8002980:	58020400 	.word	0x58020400
 8002984:	20004368 	.word	0x20004368
 8002988:	40020010 	.word	0x40020010
 800298c:	2000425c 	.word	0x2000425c
 8002990:	40020028 	.word	0x40020028
  else if(huart->Instance==USART2)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a80      	ldr	r2, [pc, #512]	; (8002b9c <HAL_UART_MspInit+0x748>)
 800299a:	4293      	cmp	r3, r2
 800299c:	f040 8091 	bne.w	8002ac2 <HAL_UART_MspInit+0x66e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80029a0:	4b7f      	ldr	r3, [pc, #508]	; (8002ba0 <HAL_UART_MspInit+0x74c>)
 80029a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029a6:	4a7e      	ldr	r2, [pc, #504]	; (8002ba0 <HAL_UART_MspInit+0x74c>)
 80029a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029b0:	4b7b      	ldr	r3, [pc, #492]	; (8002ba0 <HAL_UART_MspInit+0x74c>)
 80029b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	61bb      	str	r3, [r7, #24]
 80029bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029be:	4b78      	ldr	r3, [pc, #480]	; (8002ba0 <HAL_UART_MspInit+0x74c>)
 80029c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c4:	4a76      	ldr	r2, [pc, #472]	; (8002ba0 <HAL_UART_MspInit+0x74c>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029ce:	4b74      	ldr	r3, [pc, #464]	; (8002ba0 <HAL_UART_MspInit+0x74c>)
 80029d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029dc:	230c      	movs	r3, #12
 80029de:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e0:	2302      	movs	r3, #2
 80029e2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e8:	2300      	movs	r3, #0
 80029ea:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029ec:	2307      	movs	r3, #7
 80029ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029f4:	4619      	mov	r1, r3
 80029f6:	486b      	ldr	r0, [pc, #428]	; (8002ba4 <HAL_UART_MspInit+0x750>)
 80029f8:	f003 fe2c 	bl	8006654 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream2;
 80029fc:	4b6a      	ldr	r3, [pc, #424]	; (8002ba8 <HAL_UART_MspInit+0x754>)
 80029fe:	4a6b      	ldr	r2, [pc, #428]	; (8002bac <HAL_UART_MspInit+0x758>)
 8002a00:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002a02:	4b69      	ldr	r3, [pc, #420]	; (8002ba8 <HAL_UART_MspInit+0x754>)
 8002a04:	222b      	movs	r2, #43	; 0x2b
 8002a06:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a08:	4b67      	ldr	r3, [pc, #412]	; (8002ba8 <HAL_UART_MspInit+0x754>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a0e:	4b66      	ldr	r3, [pc, #408]	; (8002ba8 <HAL_UART_MspInit+0x754>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a14:	4b64      	ldr	r3, [pc, #400]	; (8002ba8 <HAL_UART_MspInit+0x754>)
 8002a16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a1a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a1c:	4b62      	ldr	r3, [pc, #392]	; (8002ba8 <HAL_UART_MspInit+0x754>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a22:	4b61      	ldr	r3, [pc, #388]	; (8002ba8 <HAL_UART_MspInit+0x754>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002a28:	4b5f      	ldr	r3, [pc, #380]	; (8002ba8 <HAL_UART_MspInit+0x754>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a2e:	4b5e      	ldr	r3, [pc, #376]	; (8002ba8 <HAL_UART_MspInit+0x754>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a34:	4b5c      	ldr	r3, [pc, #368]	; (8002ba8 <HAL_UART_MspInit+0x754>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a3a:	485b      	ldr	r0, [pc, #364]	; (8002ba8 <HAL_UART_MspInit+0x754>)
 8002a3c:	f000 ffc4 	bl	80039c8 <HAL_DMA_Init>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_UART_MspInit+0x5f6>
      Error_Handler();
 8002a46:	f7ff fce1 	bl	800240c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a56      	ldr	r2, [pc, #344]	; (8002ba8 <HAL_UART_MspInit+0x754>)
 8002a4e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002a50:	4a55      	ldr	r2, [pc, #340]	; (8002ba8 <HAL_UART_MspInit+0x754>)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA2_Stream1;
 8002a56:	4b56      	ldr	r3, [pc, #344]	; (8002bb0 <HAL_UART_MspInit+0x75c>)
 8002a58:	4a56      	ldr	r2, [pc, #344]	; (8002bb4 <HAL_UART_MspInit+0x760>)
 8002a5a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002a5c:	4b54      	ldr	r3, [pc, #336]	; (8002bb0 <HAL_UART_MspInit+0x75c>)
 8002a5e:	222c      	movs	r2, #44	; 0x2c
 8002a60:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a62:	4b53      	ldr	r3, [pc, #332]	; (8002bb0 <HAL_UART_MspInit+0x75c>)
 8002a64:	2240      	movs	r2, #64	; 0x40
 8002a66:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a68:	4b51      	ldr	r3, [pc, #324]	; (8002bb0 <HAL_UART_MspInit+0x75c>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a6e:	4b50      	ldr	r3, [pc, #320]	; (8002bb0 <HAL_UART_MspInit+0x75c>)
 8002a70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a74:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a76:	4b4e      	ldr	r3, [pc, #312]	; (8002bb0 <HAL_UART_MspInit+0x75c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a7c:	4b4c      	ldr	r3, [pc, #304]	; (8002bb0 <HAL_UART_MspInit+0x75c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002a82:	4b4b      	ldr	r3, [pc, #300]	; (8002bb0 <HAL_UART_MspInit+0x75c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a88:	4b49      	ldr	r3, [pc, #292]	; (8002bb0 <HAL_UART_MspInit+0x75c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a8e:	4b48      	ldr	r3, [pc, #288]	; (8002bb0 <HAL_UART_MspInit+0x75c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002a94:	4846      	ldr	r0, [pc, #280]	; (8002bb0 <HAL_UART_MspInit+0x75c>)
 8002a96:	f000 ff97 	bl	80039c8 <HAL_DMA_Init>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_UART_MspInit+0x650>
      Error_Handler();
 8002aa0:	f7ff fcb4 	bl	800240c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a42      	ldr	r2, [pc, #264]	; (8002bb0 <HAL_UART_MspInit+0x75c>)
 8002aa8:	679a      	str	r2, [r3, #120]	; 0x78
 8002aaa:	4a41      	ldr	r2, [pc, #260]	; (8002bb0 <HAL_UART_MspInit+0x75c>)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2105      	movs	r1, #5
 8002ab4:	2026      	movs	r0, #38	; 0x26
 8002ab6:	f000 ff5f 	bl	8003978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002aba:	2026      	movs	r0, #38	; 0x26
 8002abc:	f000 ff76 	bl	80039ac <HAL_NVIC_EnableIRQ>
}
 8002ac0:	e068      	b.n	8002b94 <HAL_UART_MspInit+0x740>
  else if(huart->Instance==USART3)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a3c      	ldr	r2, [pc, #240]	; (8002bb8 <HAL_UART_MspInit+0x764>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d163      	bne.n	8002b94 <HAL_UART_MspInit+0x740>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002acc:	4b34      	ldr	r3, [pc, #208]	; (8002ba0 <HAL_UART_MspInit+0x74c>)
 8002ace:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ad2:	4a33      	ldr	r2, [pc, #204]	; (8002ba0 <HAL_UART_MspInit+0x74c>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002adc:	4b30      	ldr	r3, [pc, #192]	; (8002ba0 <HAL_UART_MspInit+0x74c>)
 8002ade:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aea:	4b2d      	ldr	r3, [pc, #180]	; (8002ba0 <HAL_UART_MspInit+0x74c>)
 8002aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af0:	4a2b      	ldr	r2, [pc, #172]	; (8002ba0 <HAL_UART_MspInit+0x74c>)
 8002af2:	f043 0302 	orr.w	r3, r3, #2
 8002af6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002afa:	4b29      	ldr	r3, [pc, #164]	; (8002ba0 <HAL_UART_MspInit+0x74c>)
 8002afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b08:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b16:	2300      	movs	r3, #0
 8002b18:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b1a:	2307      	movs	r3, #7
 8002b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b22:	4619      	mov	r1, r3
 8002b24:	4825      	ldr	r0, [pc, #148]	; (8002bbc <HAL_UART_MspInit+0x768>)
 8002b26:	f003 fd95 	bl	8006654 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream3;
 8002b2a:	4b25      	ldr	r3, [pc, #148]	; (8002bc0 <HAL_UART_MspInit+0x76c>)
 8002b2c:	4a25      	ldr	r2, [pc, #148]	; (8002bc4 <HAL_UART_MspInit+0x770>)
 8002b2e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002b30:	4b23      	ldr	r3, [pc, #140]	; (8002bc0 <HAL_UART_MspInit+0x76c>)
 8002b32:	222d      	movs	r2, #45	; 0x2d
 8002b34:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b36:	4b22      	ldr	r3, [pc, #136]	; (8002bc0 <HAL_UART_MspInit+0x76c>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b3c:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <HAL_UART_MspInit+0x76c>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b42:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <HAL_UART_MspInit+0x76c>)
 8002b44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b48:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <HAL_UART_MspInit+0x76c>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b50:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <HAL_UART_MspInit+0x76c>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002b56:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <HAL_UART_MspInit+0x76c>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b5c:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <HAL_UART_MspInit+0x76c>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b62:	4b17      	ldr	r3, [pc, #92]	; (8002bc0 <HAL_UART_MspInit+0x76c>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002b68:	4815      	ldr	r0, [pc, #84]	; (8002bc0 <HAL_UART_MspInit+0x76c>)
 8002b6a:	f000 ff2d 	bl	80039c8 <HAL_DMA_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_UART_MspInit+0x724>
      Error_Handler();
 8002b74:	f7ff fc4a 	bl	800240c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a11      	ldr	r2, [pc, #68]	; (8002bc0 <HAL_UART_MspInit+0x76c>)
 8002b7c:	67da      	str	r2, [r3, #124]	; 0x7c
 8002b7e:	4a10      	ldr	r2, [pc, #64]	; (8002bc0 <HAL_UART_MspInit+0x76c>)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002b84:	2200      	movs	r2, #0
 8002b86:	2105      	movs	r1, #5
 8002b88:	2027      	movs	r0, #39	; 0x27
 8002b8a:	f000 fef5 	bl	8003978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b8e:	2027      	movs	r0, #39	; 0x27
 8002b90:	f000 ff0c 	bl	80039ac <HAL_NVIC_EnableIRQ>
}
 8002b94:	bf00      	nop
 8002b96:	3750      	adds	r7, #80	; 0x50
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40004400 	.word	0x40004400
 8002ba0:	58024400 	.word	0x58024400
 8002ba4:	58020000 	.word	0x58020000
 8002ba8:	2000406c 	.word	0x2000406c
 8002bac:	40020040 	.word	0x40020040
 8002bb0:	200043e0 	.word	0x200043e0
 8002bb4:	40020428 	.word	0x40020428
 8002bb8:	40004800 	.word	0x40004800
 8002bbc:	58020400 	.word	0x58020400
 8002bc0:	200040f4 	.word	0x200040f4
 8002bc4:	40020058 	.word	0x40020058

08002bc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b090      	sub	sp, #64	; 0x40
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b0f      	cmp	r3, #15
 8002bd4:	d827      	bhi.n	8002c26 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	2036      	movs	r0, #54	; 0x36
 8002bdc:	f000 fecc 	bl	8003978 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002be0:	2036      	movs	r0, #54	; 0x36
 8002be2:	f000 fee3 	bl	80039ac <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002be6:	4a29      	ldr	r2, [pc, #164]	; (8002c8c <HAL_InitTick+0xc4>)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002bec:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <HAL_InitTick+0xc8>)
 8002bee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bf2:	4a27      	ldr	r2, [pc, #156]	; (8002c90 <HAL_InitTick+0xc8>)
 8002bf4:	f043 0310 	orr.w	r3, r3, #16
 8002bf8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bfc:	4b24      	ldr	r3, [pc, #144]	; (8002c90 <HAL_InitTick+0xc8>)
 8002bfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c0a:	f107 0210 	add.w	r2, r7, #16
 8002c0e:	f107 0314 	add.w	r3, r7, #20
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f004 ff33 	bl	8007a80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d106      	bne.n	8002c32 <HAL_InitTick+0x6a>
 8002c24:	e001      	b.n	8002c2a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e02b      	b.n	8002c82 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c2a:	f004 fefd 	bl	8007a28 <HAL_RCC_GetPCLK1Freq>
 8002c2e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002c30:	e004      	b.n	8002c3c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002c32:	f004 fef9 	bl	8007a28 <HAL_RCC_GetPCLK1Freq>
 8002c36:	4603      	mov	r3, r0
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c3e:	4a15      	ldr	r2, [pc, #84]	; (8002c94 <HAL_InitTick+0xcc>)
 8002c40:	fba2 2303 	umull	r2, r3, r2, r3
 8002c44:	0c9b      	lsrs	r3, r3, #18
 8002c46:	3b01      	subs	r3, #1
 8002c48:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c4a:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <HAL_InitTick+0xd0>)
 8002c4c:	4a13      	ldr	r2, [pc, #76]	; (8002c9c <HAL_InitTick+0xd4>)
 8002c4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002c50:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <HAL_InitTick+0xd0>)
 8002c52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c56:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c58:	4a0f      	ldr	r2, [pc, #60]	; (8002c98 <HAL_InitTick+0xd0>)
 8002c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c5e:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <HAL_InitTick+0xd0>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c64:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <HAL_InitTick+0xd0>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002c6a:	480b      	ldr	r0, [pc, #44]	; (8002c98 <HAL_InitTick+0xd0>)
 8002c6c:	f006 faac 	bl	80091c8 <HAL_TIM_Base_Init>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d104      	bne.n	8002c80 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002c76:	4808      	ldr	r0, [pc, #32]	; (8002c98 <HAL_InitTick+0xd0>)
 8002c78:	f006 fb08 	bl	800928c <HAL_TIM_Base_Start_IT>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	e000      	b.n	8002c82 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3740      	adds	r7, #64	; 0x40
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000008 	.word	0x20000008
 8002c90:	58024400 	.word	0x58024400
 8002c94:	431bde83 	.word	0x431bde83
 8002c98:	20004958 	.word	0x20004958
 8002c9c:	40001000 	.word	0x40001000

08002ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8002ca4:	e7fe      	b.n	8002ca4 <NMI_Handler+0x4>

08002ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002caa:	e7fe      	b.n	8002caa <HardFault_Handler+0x4>

08002cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cb0:	e7fe      	b.n	8002cb0 <MemManage_Handler+0x4>

08002cb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cb6:	e7fe      	b.n	8002cb6 <BusFault_Handler+0x4>

08002cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cbc:	e7fe      	b.n	8002cbc <UsageFault_Handler+0x4>

08002cbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002cd0:	4802      	ldr	r0, [pc, #8]	; (8002cdc <DMA1_Stream0_IRQHandler+0x10>)
 8002cd2:	f002 f9a1 	bl	8005018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20004368 	.word	0x20004368

08002ce0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002ce4:	4802      	ldr	r0, [pc, #8]	; (8002cf0 <DMA1_Stream1_IRQHandler+0x10>)
 8002ce6:	f002 f997 	bl	8005018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	2000425c 	.word	0x2000425c

08002cf4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002cf8:	4802      	ldr	r0, [pc, #8]	; (8002d04 <DMA1_Stream2_IRQHandler+0x10>)
 8002cfa:	f002 f98d 	bl	8005018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	2000406c 	.word	0x2000406c

08002d08 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002d0c:	4802      	ldr	r0, [pc, #8]	; (8002d18 <DMA1_Stream3_IRQHandler+0x10>)
 8002d0e:	f002 f983 	bl	8005018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	200040f4 	.word	0x200040f4

08002d1c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002d20:	4802      	ldr	r0, [pc, #8]	; (8002d2c <DMA1_Stream4_IRQHandler+0x10>)
 8002d22:	f002 f979 	bl	8005018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	200047a8 	.word	0x200047a8

08002d30 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002d34:	4802      	ldr	r0, [pc, #8]	; (8002d40 <DMA1_Stream5_IRQHandler+0x10>)
 8002d36:	f002 f96f 	bl	8005018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20003ff4 	.word	0x20003ff4

08002d44 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002d48:	4802      	ldr	r0, [pc, #8]	; (8002d54 <DMA1_Stream6_IRQHandler+0x10>)
 8002d4a:	f002 f965 	bl	8005018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20004830 	.word	0x20004830

08002d58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE);
 8002d62:	4b40      	ldr	r3, [pc, #256]	; (8002e64 <USART1_IRQHandler+0x10c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	2b10      	cmp	r3, #16
 8002d6e:	bf0c      	ite	eq
 8002d70:	2301      	moveq	r3, #1
 8002d72:	2300      	movne	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d06b      	beq.n	8002e56 <USART1_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8002d7e:	4b39      	ldr	r3, [pc, #228]	; (8002e64 <USART1_IRQHandler+0x10c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2210      	movs	r2, #16
 8002d84:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart1);
 8002d86:	4837      	ldr	r0, [pc, #220]	; (8002e64 <USART1_IRQHandler+0x10c>)
 8002d88:	f006 fe06 	bl	8009998 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8002d8c:	4b36      	ldr	r3, [pc, #216]	; (8002e68 <USART1_IRQHandler+0x110>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a36      	ldr	r2, [pc, #216]	; (8002e6c <USART1_IRQHandler+0x114>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d04a      	beq.n	8002e2c <USART1_IRQHandler+0xd4>
 8002d96:	4b34      	ldr	r3, [pc, #208]	; (8002e68 <USART1_IRQHandler+0x110>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a35      	ldr	r2, [pc, #212]	; (8002e70 <USART1_IRQHandler+0x118>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d045      	beq.n	8002e2c <USART1_IRQHandler+0xd4>
 8002da0:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <USART1_IRQHandler+0x110>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a33      	ldr	r2, [pc, #204]	; (8002e74 <USART1_IRQHandler+0x11c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d040      	beq.n	8002e2c <USART1_IRQHandler+0xd4>
 8002daa:	4b2f      	ldr	r3, [pc, #188]	; (8002e68 <USART1_IRQHandler+0x110>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a32      	ldr	r2, [pc, #200]	; (8002e78 <USART1_IRQHandler+0x120>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d03b      	beq.n	8002e2c <USART1_IRQHandler+0xd4>
 8002db4:	4b2c      	ldr	r3, [pc, #176]	; (8002e68 <USART1_IRQHandler+0x110>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a30      	ldr	r2, [pc, #192]	; (8002e7c <USART1_IRQHandler+0x124>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d036      	beq.n	8002e2c <USART1_IRQHandler+0xd4>
 8002dbe:	4b2a      	ldr	r3, [pc, #168]	; (8002e68 <USART1_IRQHandler+0x110>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a2f      	ldr	r2, [pc, #188]	; (8002e80 <USART1_IRQHandler+0x128>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d031      	beq.n	8002e2c <USART1_IRQHandler+0xd4>
 8002dc8:	4b27      	ldr	r3, [pc, #156]	; (8002e68 <USART1_IRQHandler+0x110>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a2d      	ldr	r2, [pc, #180]	; (8002e84 <USART1_IRQHandler+0x12c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d02c      	beq.n	8002e2c <USART1_IRQHandler+0xd4>
 8002dd2:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <USART1_IRQHandler+0x110>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a2c      	ldr	r2, [pc, #176]	; (8002e88 <USART1_IRQHandler+0x130>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d027      	beq.n	8002e2c <USART1_IRQHandler+0xd4>
 8002ddc:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <USART1_IRQHandler+0x110>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a2a      	ldr	r2, [pc, #168]	; (8002e8c <USART1_IRQHandler+0x134>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d022      	beq.n	8002e2c <USART1_IRQHandler+0xd4>
 8002de6:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <USART1_IRQHandler+0x110>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a29      	ldr	r2, [pc, #164]	; (8002e90 <USART1_IRQHandler+0x138>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d01d      	beq.n	8002e2c <USART1_IRQHandler+0xd4>
 8002df0:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <USART1_IRQHandler+0x110>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a27      	ldr	r2, [pc, #156]	; (8002e94 <USART1_IRQHandler+0x13c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d018      	beq.n	8002e2c <USART1_IRQHandler+0xd4>
 8002dfa:	4b1b      	ldr	r3, [pc, #108]	; (8002e68 <USART1_IRQHandler+0x110>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a26      	ldr	r2, [pc, #152]	; (8002e98 <USART1_IRQHandler+0x140>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d013      	beq.n	8002e2c <USART1_IRQHandler+0xd4>
 8002e04:	4b18      	ldr	r3, [pc, #96]	; (8002e68 <USART1_IRQHandler+0x110>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a24      	ldr	r2, [pc, #144]	; (8002e9c <USART1_IRQHandler+0x144>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00e      	beq.n	8002e2c <USART1_IRQHandler+0xd4>
 8002e0e:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <USART1_IRQHandler+0x110>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a23      	ldr	r2, [pc, #140]	; (8002ea0 <USART1_IRQHandler+0x148>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d009      	beq.n	8002e2c <USART1_IRQHandler+0xd4>
 8002e18:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <USART1_IRQHandler+0x110>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a21      	ldr	r2, [pc, #132]	; (8002ea4 <USART1_IRQHandler+0x14c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d004      	beq.n	8002e2c <USART1_IRQHandler+0xd4>
 8002e22:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <USART1_IRQHandler+0x110>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a20      	ldr	r2, [pc, #128]	; (8002ea8 <USART1_IRQHandler+0x150>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d103      	bne.n	8002e34 <USART1_IRQHandler+0xdc>
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <USART1_IRQHandler+0x110>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	e002      	b.n	8002e3a <USART1_IRQHandler+0xe2>
 8002e34:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <USART1_IRQHandler+0x110>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <USART1_IRQHandler+0x10c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <USART1_IRQHandler+0x10c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0210 	bic.w	r2, r2, #16
 8002e48:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(UptoBaseTransFinishHandle, pdFALSE);
 8002e4a:	4b18      	ldr	r3, [pc, #96]	; (8002eac <USART1_IRQHandler+0x154>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f008 fec5 	bl	800bbe0 <xQueueGiveFromISR>
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e56:	4803      	ldr	r0, [pc, #12]	; (8002e64 <USART1_IRQHandler+0x10c>)
 8002e58:	f006 fe0e 	bl	8009a78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	200044d0 	.word	0x200044d0
 8002e68:	20004368 	.word	0x20004368
 8002e6c:	40020010 	.word	0x40020010
 8002e70:	40020028 	.word	0x40020028
 8002e74:	40020040 	.word	0x40020040
 8002e78:	40020058 	.word	0x40020058
 8002e7c:	40020070 	.word	0x40020070
 8002e80:	40020088 	.word	0x40020088
 8002e84:	400200a0 	.word	0x400200a0
 8002e88:	400200b8 	.word	0x400200b8
 8002e8c:	40020410 	.word	0x40020410
 8002e90:	40020428 	.word	0x40020428
 8002e94:	40020440 	.word	0x40020440
 8002e98:	40020458 	.word	0x40020458
 8002e9c:	40020470 	.word	0x40020470
 8002ea0:	40020488 	.word	0x40020488
 8002ea4:	400204a0 	.word	0x400204a0
 8002ea8:	400204b8 	.word	0x400204b8
 8002eac:	20003fec 	.word	0x20003fec

08002eb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE);
 8002eba:	4b40      	ldr	r3, [pc, #256]	; (8002fbc <USART2_IRQHandler+0x10c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	f003 0310 	and.w	r3, r3, #16
 8002ec4:	2b10      	cmp	r3, #16
 8002ec6:	bf0c      	ite	eq
 8002ec8:	2301      	moveq	r3, #1
 8002eca:	2300      	movne	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d06b      	beq.n	8002fae <USART2_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8002ed6:	4b39      	ldr	r3, [pc, #228]	; (8002fbc <USART2_IRQHandler+0x10c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2210      	movs	r2, #16
 8002edc:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart2);
 8002ede:	4837      	ldr	r0, [pc, #220]	; (8002fbc <USART2_IRQHandler+0x10c>)
 8002ee0:	f006 fd5a 	bl	8009998 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8002ee4:	4b36      	ldr	r3, [pc, #216]	; (8002fc0 <USART2_IRQHandler+0x110>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a36      	ldr	r2, [pc, #216]	; (8002fc4 <USART2_IRQHandler+0x114>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d04a      	beq.n	8002f84 <USART2_IRQHandler+0xd4>
 8002eee:	4b34      	ldr	r3, [pc, #208]	; (8002fc0 <USART2_IRQHandler+0x110>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a35      	ldr	r2, [pc, #212]	; (8002fc8 <USART2_IRQHandler+0x118>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d045      	beq.n	8002f84 <USART2_IRQHandler+0xd4>
 8002ef8:	4b31      	ldr	r3, [pc, #196]	; (8002fc0 <USART2_IRQHandler+0x110>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a33      	ldr	r2, [pc, #204]	; (8002fcc <USART2_IRQHandler+0x11c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d040      	beq.n	8002f84 <USART2_IRQHandler+0xd4>
 8002f02:	4b2f      	ldr	r3, [pc, #188]	; (8002fc0 <USART2_IRQHandler+0x110>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a32      	ldr	r2, [pc, #200]	; (8002fd0 <USART2_IRQHandler+0x120>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d03b      	beq.n	8002f84 <USART2_IRQHandler+0xd4>
 8002f0c:	4b2c      	ldr	r3, [pc, #176]	; (8002fc0 <USART2_IRQHandler+0x110>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a30      	ldr	r2, [pc, #192]	; (8002fd4 <USART2_IRQHandler+0x124>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d036      	beq.n	8002f84 <USART2_IRQHandler+0xd4>
 8002f16:	4b2a      	ldr	r3, [pc, #168]	; (8002fc0 <USART2_IRQHandler+0x110>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a2f      	ldr	r2, [pc, #188]	; (8002fd8 <USART2_IRQHandler+0x128>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d031      	beq.n	8002f84 <USART2_IRQHandler+0xd4>
 8002f20:	4b27      	ldr	r3, [pc, #156]	; (8002fc0 <USART2_IRQHandler+0x110>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a2d      	ldr	r2, [pc, #180]	; (8002fdc <USART2_IRQHandler+0x12c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d02c      	beq.n	8002f84 <USART2_IRQHandler+0xd4>
 8002f2a:	4b25      	ldr	r3, [pc, #148]	; (8002fc0 <USART2_IRQHandler+0x110>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a2c      	ldr	r2, [pc, #176]	; (8002fe0 <USART2_IRQHandler+0x130>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d027      	beq.n	8002f84 <USART2_IRQHandler+0xd4>
 8002f34:	4b22      	ldr	r3, [pc, #136]	; (8002fc0 <USART2_IRQHandler+0x110>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a2a      	ldr	r2, [pc, #168]	; (8002fe4 <USART2_IRQHandler+0x134>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d022      	beq.n	8002f84 <USART2_IRQHandler+0xd4>
 8002f3e:	4b20      	ldr	r3, [pc, #128]	; (8002fc0 <USART2_IRQHandler+0x110>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a29      	ldr	r2, [pc, #164]	; (8002fe8 <USART2_IRQHandler+0x138>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d01d      	beq.n	8002f84 <USART2_IRQHandler+0xd4>
 8002f48:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <USART2_IRQHandler+0x110>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a27      	ldr	r2, [pc, #156]	; (8002fec <USART2_IRQHandler+0x13c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d018      	beq.n	8002f84 <USART2_IRQHandler+0xd4>
 8002f52:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <USART2_IRQHandler+0x110>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a26      	ldr	r2, [pc, #152]	; (8002ff0 <USART2_IRQHandler+0x140>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d013      	beq.n	8002f84 <USART2_IRQHandler+0xd4>
 8002f5c:	4b18      	ldr	r3, [pc, #96]	; (8002fc0 <USART2_IRQHandler+0x110>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a24      	ldr	r2, [pc, #144]	; (8002ff4 <USART2_IRQHandler+0x144>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00e      	beq.n	8002f84 <USART2_IRQHandler+0xd4>
 8002f66:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <USART2_IRQHandler+0x110>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a23      	ldr	r2, [pc, #140]	; (8002ff8 <USART2_IRQHandler+0x148>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d009      	beq.n	8002f84 <USART2_IRQHandler+0xd4>
 8002f70:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <USART2_IRQHandler+0x110>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a21      	ldr	r2, [pc, #132]	; (8002ffc <USART2_IRQHandler+0x14c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d004      	beq.n	8002f84 <USART2_IRQHandler+0xd4>
 8002f7a:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <USART2_IRQHandler+0x110>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a20      	ldr	r2, [pc, #128]	; (8003000 <USART2_IRQHandler+0x150>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d103      	bne.n	8002f8c <USART2_IRQHandler+0xdc>
 8002f84:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <USART2_IRQHandler+0x110>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	e002      	b.n	8002f92 <USART2_IRQHandler+0xe2>
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <USART2_IRQHandler+0x110>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_IDLE);
 8002f92:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <USART2_IRQHandler+0x10c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <USART2_IRQHandler+0x10c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0210 	bic.w	r2, r2, #16
 8002fa0:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(GY39TransFinishHandle, pdFALSE);
 8002fa2:	4b18      	ldr	r3, [pc, #96]	; (8003004 <USART2_IRQHandler+0x154>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f008 fe19 	bl	800bbe0 <xQueueGiveFromISR>
	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002fae:	4803      	ldr	r0, [pc, #12]	; (8002fbc <USART2_IRQHandler+0x10c>)
 8002fb0:	f006 fd62 	bl	8009a78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002fb4:	bf00      	nop
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20004718 	.word	0x20004718
 8002fc0:	2000406c 	.word	0x2000406c
 8002fc4:	40020010 	.word	0x40020010
 8002fc8:	40020028 	.word	0x40020028
 8002fcc:	40020040 	.word	0x40020040
 8002fd0:	40020058 	.word	0x40020058
 8002fd4:	40020070 	.word	0x40020070
 8002fd8:	40020088 	.word	0x40020088
 8002fdc:	400200a0 	.word	0x400200a0
 8002fe0:	400200b8 	.word	0x400200b8
 8002fe4:	40020410 	.word	0x40020410
 8002fe8:	40020428 	.word	0x40020428
 8002fec:	40020440 	.word	0x40020440
 8002ff0:	40020458 	.word	0x40020458
 8002ff4:	40020470 	.word	0x40020470
 8002ff8:	40020488 	.word	0x40020488
 8002ffc:	400204a0 	.word	0x400204a0
 8003000:	400204b8 	.word	0x400204b8
 8003004:	20004204 	.word	0x20004204

08003008 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	uint32_t tmp_flag = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE);
 8003012:	4b40      	ldr	r3, [pc, #256]	; (8003114 <USART3_IRQHandler+0x10c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b10      	cmp	r3, #16
 800301e:	bf0c      	ite	eq
 8003020:	2301      	moveq	r3, #1
 8003022:	2300      	movne	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d06b      	beq.n	8003106 <USART3_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 800302e:	4b39      	ldr	r3, [pc, #228]	; (8003114 <USART3_IRQHandler+0x10c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2210      	movs	r2, #16
 8003034:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart3);
 8003036:	4837      	ldr	r0, [pc, #220]	; (8003114 <USART3_IRQHandler+0x10c>)
 8003038:	f006 fcae 	bl	8009998 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 800303c:	4b36      	ldr	r3, [pc, #216]	; (8003118 <USART3_IRQHandler+0x110>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a36      	ldr	r2, [pc, #216]	; (800311c <USART3_IRQHandler+0x114>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d04a      	beq.n	80030dc <USART3_IRQHandler+0xd4>
 8003046:	4b34      	ldr	r3, [pc, #208]	; (8003118 <USART3_IRQHandler+0x110>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a35      	ldr	r2, [pc, #212]	; (8003120 <USART3_IRQHandler+0x118>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d045      	beq.n	80030dc <USART3_IRQHandler+0xd4>
 8003050:	4b31      	ldr	r3, [pc, #196]	; (8003118 <USART3_IRQHandler+0x110>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a33      	ldr	r2, [pc, #204]	; (8003124 <USART3_IRQHandler+0x11c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d040      	beq.n	80030dc <USART3_IRQHandler+0xd4>
 800305a:	4b2f      	ldr	r3, [pc, #188]	; (8003118 <USART3_IRQHandler+0x110>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a32      	ldr	r2, [pc, #200]	; (8003128 <USART3_IRQHandler+0x120>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d03b      	beq.n	80030dc <USART3_IRQHandler+0xd4>
 8003064:	4b2c      	ldr	r3, [pc, #176]	; (8003118 <USART3_IRQHandler+0x110>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a30      	ldr	r2, [pc, #192]	; (800312c <USART3_IRQHandler+0x124>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d036      	beq.n	80030dc <USART3_IRQHandler+0xd4>
 800306e:	4b2a      	ldr	r3, [pc, #168]	; (8003118 <USART3_IRQHandler+0x110>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a2f      	ldr	r2, [pc, #188]	; (8003130 <USART3_IRQHandler+0x128>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d031      	beq.n	80030dc <USART3_IRQHandler+0xd4>
 8003078:	4b27      	ldr	r3, [pc, #156]	; (8003118 <USART3_IRQHandler+0x110>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a2d      	ldr	r2, [pc, #180]	; (8003134 <USART3_IRQHandler+0x12c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d02c      	beq.n	80030dc <USART3_IRQHandler+0xd4>
 8003082:	4b25      	ldr	r3, [pc, #148]	; (8003118 <USART3_IRQHandler+0x110>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a2c      	ldr	r2, [pc, #176]	; (8003138 <USART3_IRQHandler+0x130>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d027      	beq.n	80030dc <USART3_IRQHandler+0xd4>
 800308c:	4b22      	ldr	r3, [pc, #136]	; (8003118 <USART3_IRQHandler+0x110>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a2a      	ldr	r2, [pc, #168]	; (800313c <USART3_IRQHandler+0x134>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d022      	beq.n	80030dc <USART3_IRQHandler+0xd4>
 8003096:	4b20      	ldr	r3, [pc, #128]	; (8003118 <USART3_IRQHandler+0x110>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a29      	ldr	r2, [pc, #164]	; (8003140 <USART3_IRQHandler+0x138>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d01d      	beq.n	80030dc <USART3_IRQHandler+0xd4>
 80030a0:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <USART3_IRQHandler+0x110>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a27      	ldr	r2, [pc, #156]	; (8003144 <USART3_IRQHandler+0x13c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d018      	beq.n	80030dc <USART3_IRQHandler+0xd4>
 80030aa:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <USART3_IRQHandler+0x110>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a26      	ldr	r2, [pc, #152]	; (8003148 <USART3_IRQHandler+0x140>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d013      	beq.n	80030dc <USART3_IRQHandler+0xd4>
 80030b4:	4b18      	ldr	r3, [pc, #96]	; (8003118 <USART3_IRQHandler+0x110>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a24      	ldr	r2, [pc, #144]	; (800314c <USART3_IRQHandler+0x144>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00e      	beq.n	80030dc <USART3_IRQHandler+0xd4>
 80030be:	4b16      	ldr	r3, [pc, #88]	; (8003118 <USART3_IRQHandler+0x110>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a23      	ldr	r2, [pc, #140]	; (8003150 <USART3_IRQHandler+0x148>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d009      	beq.n	80030dc <USART3_IRQHandler+0xd4>
 80030c8:	4b13      	ldr	r3, [pc, #76]	; (8003118 <USART3_IRQHandler+0x110>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a21      	ldr	r2, [pc, #132]	; (8003154 <USART3_IRQHandler+0x14c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d004      	beq.n	80030dc <USART3_IRQHandler+0xd4>
 80030d2:	4b11      	ldr	r3, [pc, #68]	; (8003118 <USART3_IRQHandler+0x110>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a20      	ldr	r2, [pc, #128]	; (8003158 <USART3_IRQHandler+0x150>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d103      	bne.n	80030e4 <USART3_IRQHandler+0xdc>
 80030dc:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <USART3_IRQHandler+0x110>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	e002      	b.n	80030ea <USART3_IRQHandler+0xe2>
 80030e4:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <USART3_IRQHandler+0x110>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart3, UART_IT_IDLE);
 80030ea:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <USART3_IRQHandler+0x10c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4b08      	ldr	r3, [pc, #32]	; (8003114 <USART3_IRQHandler+0x10c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0210 	bic.w	r2, r2, #16
 80030f8:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(WT931TransFinishHandle, pdFALSE);
 80030fa:	4b18      	ldr	r3, [pc, #96]	; (800315c <USART3_IRQHandler+0x154>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2100      	movs	r1, #0
 8003100:	4618      	mov	r0, r3
 8003102:	f008 fd6d 	bl	800bbe0 <xQueueGiveFromISR>
	}
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003106:	4803      	ldr	r0, [pc, #12]	; (8003114 <USART3_IRQHandler+0x10c>)
 8003108:	f006 fcb6 	bl	8009a78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800310c:	bf00      	nop
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	2000416c 	.word	0x2000416c
 8003118:	200040f4 	.word	0x200040f4
 800311c:	40020010 	.word	0x40020010
 8003120:	40020028 	.word	0x40020028
 8003124:	40020040 	.word	0x40020040
 8003128:	40020058 	.word	0x40020058
 800312c:	40020070 	.word	0x40020070
 8003130:	40020088 	.word	0x40020088
 8003134:	400200a0 	.word	0x400200a0
 8003138:	400200b8 	.word	0x400200b8
 800313c:	40020410 	.word	0x40020410
 8003140:	40020428 	.word	0x40020428
 8003144:	40020440 	.word	0x40020440
 8003148:	40020458 	.word	0x40020458
 800314c:	40020470 	.word	0x40020470
 8003150:	40020488 	.word	0x40020488
 8003154:	400204a0 	.word	0x400204a0
 8003158:	400204b8 	.word	0x400204b8
 800315c:	20004920 	.word	0x20004920

08003160 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8003164:	4802      	ldr	r0, [pc, #8]	; (8003170 <DMA1_Stream7_IRQHandler+0x10>)
 8003166:	f001 ff57 	bl	8005018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20004458 	.word	0x20004458

08003174 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	uint32_t tmp_flag = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE);
 800317e:	4b40      	ldr	r3, [pc, #256]	; (8003280 <UART4_IRQHandler+0x10c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	f003 0310 	and.w	r3, r3, #16
 8003188:	2b10      	cmp	r3, #16
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d06b      	beq.n	8003272 <UART4_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 800319a:	4b39      	ldr	r3, [pc, #228]	; (8003280 <UART4_IRQHandler+0x10c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2210      	movs	r2, #16
 80031a0:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart4);
 80031a2:	4837      	ldr	r0, [pc, #220]	; (8003280 <UART4_IRQHandler+0x10c>)
 80031a4:	f006 fbf8 	bl	8009998 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart4_rx);
 80031a8:	4b36      	ldr	r3, [pc, #216]	; (8003284 <UART4_IRQHandler+0x110>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a36      	ldr	r2, [pc, #216]	; (8003288 <UART4_IRQHandler+0x114>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d04a      	beq.n	8003248 <UART4_IRQHandler+0xd4>
 80031b2:	4b34      	ldr	r3, [pc, #208]	; (8003284 <UART4_IRQHandler+0x110>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a35      	ldr	r2, [pc, #212]	; (800328c <UART4_IRQHandler+0x118>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d045      	beq.n	8003248 <UART4_IRQHandler+0xd4>
 80031bc:	4b31      	ldr	r3, [pc, #196]	; (8003284 <UART4_IRQHandler+0x110>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a33      	ldr	r2, [pc, #204]	; (8003290 <UART4_IRQHandler+0x11c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d040      	beq.n	8003248 <UART4_IRQHandler+0xd4>
 80031c6:	4b2f      	ldr	r3, [pc, #188]	; (8003284 <UART4_IRQHandler+0x110>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a32      	ldr	r2, [pc, #200]	; (8003294 <UART4_IRQHandler+0x120>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d03b      	beq.n	8003248 <UART4_IRQHandler+0xd4>
 80031d0:	4b2c      	ldr	r3, [pc, #176]	; (8003284 <UART4_IRQHandler+0x110>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a30      	ldr	r2, [pc, #192]	; (8003298 <UART4_IRQHandler+0x124>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d036      	beq.n	8003248 <UART4_IRQHandler+0xd4>
 80031da:	4b2a      	ldr	r3, [pc, #168]	; (8003284 <UART4_IRQHandler+0x110>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a2f      	ldr	r2, [pc, #188]	; (800329c <UART4_IRQHandler+0x128>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d031      	beq.n	8003248 <UART4_IRQHandler+0xd4>
 80031e4:	4b27      	ldr	r3, [pc, #156]	; (8003284 <UART4_IRQHandler+0x110>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a2d      	ldr	r2, [pc, #180]	; (80032a0 <UART4_IRQHandler+0x12c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d02c      	beq.n	8003248 <UART4_IRQHandler+0xd4>
 80031ee:	4b25      	ldr	r3, [pc, #148]	; (8003284 <UART4_IRQHandler+0x110>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a2c      	ldr	r2, [pc, #176]	; (80032a4 <UART4_IRQHandler+0x130>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d027      	beq.n	8003248 <UART4_IRQHandler+0xd4>
 80031f8:	4b22      	ldr	r3, [pc, #136]	; (8003284 <UART4_IRQHandler+0x110>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a2a      	ldr	r2, [pc, #168]	; (80032a8 <UART4_IRQHandler+0x134>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d022      	beq.n	8003248 <UART4_IRQHandler+0xd4>
 8003202:	4b20      	ldr	r3, [pc, #128]	; (8003284 <UART4_IRQHandler+0x110>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a29      	ldr	r2, [pc, #164]	; (80032ac <UART4_IRQHandler+0x138>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d01d      	beq.n	8003248 <UART4_IRQHandler+0xd4>
 800320c:	4b1d      	ldr	r3, [pc, #116]	; (8003284 <UART4_IRQHandler+0x110>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a27      	ldr	r2, [pc, #156]	; (80032b0 <UART4_IRQHandler+0x13c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d018      	beq.n	8003248 <UART4_IRQHandler+0xd4>
 8003216:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <UART4_IRQHandler+0x110>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a26      	ldr	r2, [pc, #152]	; (80032b4 <UART4_IRQHandler+0x140>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d013      	beq.n	8003248 <UART4_IRQHandler+0xd4>
 8003220:	4b18      	ldr	r3, [pc, #96]	; (8003284 <UART4_IRQHandler+0x110>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a24      	ldr	r2, [pc, #144]	; (80032b8 <UART4_IRQHandler+0x144>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00e      	beq.n	8003248 <UART4_IRQHandler+0xd4>
 800322a:	4b16      	ldr	r3, [pc, #88]	; (8003284 <UART4_IRQHandler+0x110>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a23      	ldr	r2, [pc, #140]	; (80032bc <UART4_IRQHandler+0x148>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d009      	beq.n	8003248 <UART4_IRQHandler+0xd4>
 8003234:	4b13      	ldr	r3, [pc, #76]	; (8003284 <UART4_IRQHandler+0x110>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a21      	ldr	r2, [pc, #132]	; (80032c0 <UART4_IRQHandler+0x14c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d004      	beq.n	8003248 <UART4_IRQHandler+0xd4>
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <UART4_IRQHandler+0x110>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a20      	ldr	r2, [pc, #128]	; (80032c4 <UART4_IRQHandler+0x150>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d103      	bne.n	8003250 <UART4_IRQHandler+0xdc>
 8003248:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <UART4_IRQHandler+0x110>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	e002      	b.n	8003256 <UART4_IRQHandler+0xe2>
 8003250:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <UART4_IRQHandler+0x110>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart4, UART_IT_IDLE);
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <UART4_IRQHandler+0x10c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4b08      	ldr	r3, [pc, #32]	; (8003280 <UART4_IRQHandler+0x10c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0210 	bic.w	r2, r2, #16
 8003264:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(DeepTransFinishHandleHandle, pdFALSE);
 8003266:	4b18      	ldr	r3, [pc, #96]	; (80032c8 <UART4_IRQHandler+0x154>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2100      	movs	r1, #0
 800326c:	4618      	mov	r0, r3
 800326e:	f008 fcb7 	bl	800bbe0 <xQueueGiveFromISR>
	}
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003272:	4803      	ldr	r0, [pc, #12]	; (8003280 <UART4_IRQHandler+0x10c>)
 8003274:	f006 fc00 	bl	8009a78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003278:	bf00      	nop
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20004680 	.word	0x20004680
 8003284:	20003ff4 	.word	0x20003ff4
 8003288:	40020010 	.word	0x40020010
 800328c:	40020028 	.word	0x40020028
 8003290:	40020040 	.word	0x40020040
 8003294:	40020058 	.word	0x40020058
 8003298:	40020070 	.word	0x40020070
 800329c:	40020088 	.word	0x40020088
 80032a0:	400200a0 	.word	0x400200a0
 80032a4:	400200b8 	.word	0x400200b8
 80032a8:	40020410 	.word	0x40020410
 80032ac:	40020428 	.word	0x40020428
 80032b0:	40020440 	.word	0x40020440
 80032b4:	40020458 	.word	0x40020458
 80032b8:	40020470 	.word	0x40020470
 80032bc:	40020488 	.word	0x40020488
 80032c0:	400204a0 	.word	0x400204a0
 80032c4:	400204b8 	.word	0x400204b8
 80032c8:	2000482c 	.word	0x2000482c

080032cc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	uint32_t tmp_flag = 0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart5, UART_FLAG_IDLE);
 80032d6:	4b40      	ldr	r3, [pc, #256]	; (80033d8 <UART5_IRQHandler+0x10c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b10      	cmp	r3, #16
 80032e2:	bf0c      	ite	eq
 80032e4:	2301      	moveq	r3, #1
 80032e6:	2300      	movne	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d06b      	beq.n	80033ca <UART5_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart5);
 80032f2:	4b39      	ldr	r3, [pc, #228]	; (80033d8 <UART5_IRQHandler+0x10c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2210      	movs	r2, #16
 80032f8:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart5);
 80032fa:	4837      	ldr	r0, [pc, #220]	; (80033d8 <UART5_IRQHandler+0x10c>)
 80032fc:	f006 fb4c 	bl	8009998 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart5_rx);
 8003300:	4b36      	ldr	r3, [pc, #216]	; (80033dc <UART5_IRQHandler+0x110>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a36      	ldr	r2, [pc, #216]	; (80033e0 <UART5_IRQHandler+0x114>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d04a      	beq.n	80033a0 <UART5_IRQHandler+0xd4>
 800330a:	4b34      	ldr	r3, [pc, #208]	; (80033dc <UART5_IRQHandler+0x110>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a35      	ldr	r2, [pc, #212]	; (80033e4 <UART5_IRQHandler+0x118>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d045      	beq.n	80033a0 <UART5_IRQHandler+0xd4>
 8003314:	4b31      	ldr	r3, [pc, #196]	; (80033dc <UART5_IRQHandler+0x110>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a33      	ldr	r2, [pc, #204]	; (80033e8 <UART5_IRQHandler+0x11c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d040      	beq.n	80033a0 <UART5_IRQHandler+0xd4>
 800331e:	4b2f      	ldr	r3, [pc, #188]	; (80033dc <UART5_IRQHandler+0x110>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a32      	ldr	r2, [pc, #200]	; (80033ec <UART5_IRQHandler+0x120>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d03b      	beq.n	80033a0 <UART5_IRQHandler+0xd4>
 8003328:	4b2c      	ldr	r3, [pc, #176]	; (80033dc <UART5_IRQHandler+0x110>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a30      	ldr	r2, [pc, #192]	; (80033f0 <UART5_IRQHandler+0x124>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d036      	beq.n	80033a0 <UART5_IRQHandler+0xd4>
 8003332:	4b2a      	ldr	r3, [pc, #168]	; (80033dc <UART5_IRQHandler+0x110>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a2f      	ldr	r2, [pc, #188]	; (80033f4 <UART5_IRQHandler+0x128>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d031      	beq.n	80033a0 <UART5_IRQHandler+0xd4>
 800333c:	4b27      	ldr	r3, [pc, #156]	; (80033dc <UART5_IRQHandler+0x110>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a2d      	ldr	r2, [pc, #180]	; (80033f8 <UART5_IRQHandler+0x12c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d02c      	beq.n	80033a0 <UART5_IRQHandler+0xd4>
 8003346:	4b25      	ldr	r3, [pc, #148]	; (80033dc <UART5_IRQHandler+0x110>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a2c      	ldr	r2, [pc, #176]	; (80033fc <UART5_IRQHandler+0x130>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d027      	beq.n	80033a0 <UART5_IRQHandler+0xd4>
 8003350:	4b22      	ldr	r3, [pc, #136]	; (80033dc <UART5_IRQHandler+0x110>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a2a      	ldr	r2, [pc, #168]	; (8003400 <UART5_IRQHandler+0x134>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d022      	beq.n	80033a0 <UART5_IRQHandler+0xd4>
 800335a:	4b20      	ldr	r3, [pc, #128]	; (80033dc <UART5_IRQHandler+0x110>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a29      	ldr	r2, [pc, #164]	; (8003404 <UART5_IRQHandler+0x138>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d01d      	beq.n	80033a0 <UART5_IRQHandler+0xd4>
 8003364:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <UART5_IRQHandler+0x110>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a27      	ldr	r2, [pc, #156]	; (8003408 <UART5_IRQHandler+0x13c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d018      	beq.n	80033a0 <UART5_IRQHandler+0xd4>
 800336e:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <UART5_IRQHandler+0x110>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a26      	ldr	r2, [pc, #152]	; (800340c <UART5_IRQHandler+0x140>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d013      	beq.n	80033a0 <UART5_IRQHandler+0xd4>
 8003378:	4b18      	ldr	r3, [pc, #96]	; (80033dc <UART5_IRQHandler+0x110>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a24      	ldr	r2, [pc, #144]	; (8003410 <UART5_IRQHandler+0x144>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00e      	beq.n	80033a0 <UART5_IRQHandler+0xd4>
 8003382:	4b16      	ldr	r3, [pc, #88]	; (80033dc <UART5_IRQHandler+0x110>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a23      	ldr	r2, [pc, #140]	; (8003414 <UART5_IRQHandler+0x148>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d009      	beq.n	80033a0 <UART5_IRQHandler+0xd4>
 800338c:	4b13      	ldr	r3, [pc, #76]	; (80033dc <UART5_IRQHandler+0x110>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a21      	ldr	r2, [pc, #132]	; (8003418 <UART5_IRQHandler+0x14c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d004      	beq.n	80033a0 <UART5_IRQHandler+0xd4>
 8003396:	4b11      	ldr	r3, [pc, #68]	; (80033dc <UART5_IRQHandler+0x110>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a20      	ldr	r2, [pc, #128]	; (800341c <UART5_IRQHandler+0x150>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d103      	bne.n	80033a8 <UART5_IRQHandler+0xdc>
 80033a0:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <UART5_IRQHandler+0x110>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	e002      	b.n	80033ae <UART5_IRQHandler+0xe2>
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <UART5_IRQHandler+0x110>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart5, UART_IT_IDLE);
 80033ae:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <UART5_IRQHandler+0x10c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <UART5_IRQHandler+0x10c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0210 	bic.w	r2, r2, #16
 80033bc:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(P30TransFinishHandle, pdFALSE);
 80033be:	4b18      	ldr	r3, [pc, #96]	; (8003420 <UART5_IRQHandler+0x154>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2100      	movs	r1, #0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f008 fc0b 	bl	800bbe0 <xQueueGiveFromISR>
	}
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80033ca:	4803      	ldr	r0, [pc, #12]	; (80033d8 <UART5_IRQHandler+0x10c>)
 80033cc:	f006 fb54 	bl	8009a78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80033d0:	bf00      	nop
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	200042d4 	.word	0x200042d4
 80033dc:	200047a8 	.word	0x200047a8
 80033e0:	40020010 	.word	0x40020010
 80033e4:	40020028 	.word	0x40020028
 80033e8:	40020040 	.word	0x40020040
 80033ec:	40020058 	.word	0x40020058
 80033f0:	40020070 	.word	0x40020070
 80033f4:	40020088 	.word	0x40020088
 80033f8:	400200a0 	.word	0x400200a0
 80033fc:	400200b8 	.word	0x400200b8
 8003400:	40020410 	.word	0x40020410
 8003404:	40020428 	.word	0x40020428
 8003408:	40020440 	.word	0x40020440
 800340c:	40020458 	.word	0x40020458
 8003410:	40020470 	.word	0x40020470
 8003414:	40020488 	.word	0x40020488
 8003418:	400204a0 	.word	0x400204a0
 800341c:	400204b8 	.word	0x400204b8
 8003420:	20003fe8 	.word	0x20003fe8

08003424 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003428:	4802      	ldr	r0, [pc, #8]	; (8003434 <TIM6_DAC_IRQHandler+0x10>)
 800342a:	f005 ff9f 	bl	800936c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20004958 	.word	0x20004958

08003438 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 800343c:	4802      	ldr	r0, [pc, #8]	; (8003448 <DMA2_Stream0_IRQHandler+0x10>)
 800343e:	f001 fdeb 	bl	8005018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20004570 	.word	0x20004570

0800344c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003450:	4802      	ldr	r0, [pc, #8]	; (800345c <DMA2_Stream1_IRQHandler+0x10>)
 8003452:	f001 fde1 	bl	8005018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	200043e0 	.word	0x200043e0

08003460 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8003464:	4802      	ldr	r0, [pc, #8]	; (8003470 <DMA2_Stream2_IRQHandler+0x10>)
 8003466:	f001 fdd7 	bl	8005018 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	200048a8 	.word	0x200048a8

08003474 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */
	uint32_t tmp_flag = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart8, UART_FLAG_IDLE);
 800347e:	4b40      	ldr	r3, [pc, #256]	; (8003580 <UART8_IRQHandler+0x10c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b10      	cmp	r3, #16
 800348a:	bf0c      	ite	eq
 800348c:	2301      	moveq	r3, #1
 800348e:	2300      	movne	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d06b      	beq.n	8003572 <UART8_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart8);
 800349a:	4b39      	ldr	r3, [pc, #228]	; (8003580 <UART8_IRQHandler+0x10c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2210      	movs	r2, #16
 80034a0:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart8);
 80034a2:	4837      	ldr	r0, [pc, #220]	; (8003580 <UART8_IRQHandler+0x10c>)
 80034a4:	f006 fa78 	bl	8009998 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart8_rx);
 80034a8:	4b36      	ldr	r3, [pc, #216]	; (8003584 <UART8_IRQHandler+0x110>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a36      	ldr	r2, [pc, #216]	; (8003588 <UART8_IRQHandler+0x114>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d04a      	beq.n	8003548 <UART8_IRQHandler+0xd4>
 80034b2:	4b34      	ldr	r3, [pc, #208]	; (8003584 <UART8_IRQHandler+0x110>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a35      	ldr	r2, [pc, #212]	; (800358c <UART8_IRQHandler+0x118>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d045      	beq.n	8003548 <UART8_IRQHandler+0xd4>
 80034bc:	4b31      	ldr	r3, [pc, #196]	; (8003584 <UART8_IRQHandler+0x110>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a33      	ldr	r2, [pc, #204]	; (8003590 <UART8_IRQHandler+0x11c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d040      	beq.n	8003548 <UART8_IRQHandler+0xd4>
 80034c6:	4b2f      	ldr	r3, [pc, #188]	; (8003584 <UART8_IRQHandler+0x110>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a32      	ldr	r2, [pc, #200]	; (8003594 <UART8_IRQHandler+0x120>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d03b      	beq.n	8003548 <UART8_IRQHandler+0xd4>
 80034d0:	4b2c      	ldr	r3, [pc, #176]	; (8003584 <UART8_IRQHandler+0x110>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a30      	ldr	r2, [pc, #192]	; (8003598 <UART8_IRQHandler+0x124>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d036      	beq.n	8003548 <UART8_IRQHandler+0xd4>
 80034da:	4b2a      	ldr	r3, [pc, #168]	; (8003584 <UART8_IRQHandler+0x110>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a2f      	ldr	r2, [pc, #188]	; (800359c <UART8_IRQHandler+0x128>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d031      	beq.n	8003548 <UART8_IRQHandler+0xd4>
 80034e4:	4b27      	ldr	r3, [pc, #156]	; (8003584 <UART8_IRQHandler+0x110>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a2d      	ldr	r2, [pc, #180]	; (80035a0 <UART8_IRQHandler+0x12c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d02c      	beq.n	8003548 <UART8_IRQHandler+0xd4>
 80034ee:	4b25      	ldr	r3, [pc, #148]	; (8003584 <UART8_IRQHandler+0x110>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a2c      	ldr	r2, [pc, #176]	; (80035a4 <UART8_IRQHandler+0x130>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d027      	beq.n	8003548 <UART8_IRQHandler+0xd4>
 80034f8:	4b22      	ldr	r3, [pc, #136]	; (8003584 <UART8_IRQHandler+0x110>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a2a      	ldr	r2, [pc, #168]	; (80035a8 <UART8_IRQHandler+0x134>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d022      	beq.n	8003548 <UART8_IRQHandler+0xd4>
 8003502:	4b20      	ldr	r3, [pc, #128]	; (8003584 <UART8_IRQHandler+0x110>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a29      	ldr	r2, [pc, #164]	; (80035ac <UART8_IRQHandler+0x138>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d01d      	beq.n	8003548 <UART8_IRQHandler+0xd4>
 800350c:	4b1d      	ldr	r3, [pc, #116]	; (8003584 <UART8_IRQHandler+0x110>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a27      	ldr	r2, [pc, #156]	; (80035b0 <UART8_IRQHandler+0x13c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d018      	beq.n	8003548 <UART8_IRQHandler+0xd4>
 8003516:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <UART8_IRQHandler+0x110>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a26      	ldr	r2, [pc, #152]	; (80035b4 <UART8_IRQHandler+0x140>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d013      	beq.n	8003548 <UART8_IRQHandler+0xd4>
 8003520:	4b18      	ldr	r3, [pc, #96]	; (8003584 <UART8_IRQHandler+0x110>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a24      	ldr	r2, [pc, #144]	; (80035b8 <UART8_IRQHandler+0x144>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00e      	beq.n	8003548 <UART8_IRQHandler+0xd4>
 800352a:	4b16      	ldr	r3, [pc, #88]	; (8003584 <UART8_IRQHandler+0x110>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a23      	ldr	r2, [pc, #140]	; (80035bc <UART8_IRQHandler+0x148>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d009      	beq.n	8003548 <UART8_IRQHandler+0xd4>
 8003534:	4b13      	ldr	r3, [pc, #76]	; (8003584 <UART8_IRQHandler+0x110>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a21      	ldr	r2, [pc, #132]	; (80035c0 <UART8_IRQHandler+0x14c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d004      	beq.n	8003548 <UART8_IRQHandler+0xd4>
 800353e:	4b11      	ldr	r3, [pc, #68]	; (8003584 <UART8_IRQHandler+0x110>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a20      	ldr	r2, [pc, #128]	; (80035c4 <UART8_IRQHandler+0x150>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d103      	bne.n	8003550 <UART8_IRQHandler+0xdc>
 8003548:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <UART8_IRQHandler+0x110>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	e002      	b.n	8003556 <UART8_IRQHandler+0xe2>
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <UART8_IRQHandler+0x110>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart8, UART_IT_IDLE);
 8003556:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <UART8_IRQHandler+0x10c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4b08      	ldr	r3, [pc, #32]	; (8003580 <UART8_IRQHandler+0x10c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0210 	bic.w	r2, r2, #16
 8003564:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(BasetoUpTransFinishHandleHandle, pdFALSE);
 8003566:	4b18      	ldr	r3, [pc, #96]	; (80035c8 <UART8_IRQHandler+0x154>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2100      	movs	r1, #0
 800356c:	4618      	mov	r0, r3
 800356e:	f008 fb37 	bl	800bbe0 <xQueueGiveFromISR>
	}
  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8003572:	4803      	ldr	r0, [pc, #12]	; (8003580 <UART8_IRQHandler+0x10c>)
 8003574:	f006 fa80 	bl	8009a78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8003578:	bf00      	nop
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	200045ec 	.word	0x200045ec
 8003584:	20004458 	.word	0x20004458
 8003588:	40020010 	.word	0x40020010
 800358c:	40020028 	.word	0x40020028
 8003590:	40020040 	.word	0x40020040
 8003594:	40020058 	.word	0x40020058
 8003598:	40020070 	.word	0x40020070
 800359c:	40020088 	.word	0x40020088
 80035a0:	400200a0 	.word	0x400200a0
 80035a4:	400200b8 	.word	0x400200b8
 80035a8:	40020410 	.word	0x40020410
 80035ac:	40020428 	.word	0x40020428
 80035b0:	40020440 	.word	0x40020440
 80035b4:	40020458 	.word	0x40020458
 80035b8:	40020470 	.word	0x40020470
 80035bc:	40020488 	.word	0x40020488
 80035c0:	400204a0 	.word	0x400204a0
 80035c4:	400204b8 	.word	0x400204b8
 80035c8:	200045e8 	.word	0x200045e8

080035cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80035d0:	4b39      	ldr	r3, [pc, #228]	; (80036b8 <SystemInit+0xec>)
 80035d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d6:	4a38      	ldr	r2, [pc, #224]	; (80036b8 <SystemInit+0xec>)
 80035d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80035e0:	4b36      	ldr	r3, [pc, #216]	; (80036bc <SystemInit+0xf0>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	2b06      	cmp	r3, #6
 80035ea:	d807      	bhi.n	80035fc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80035ec:	4b33      	ldr	r3, [pc, #204]	; (80036bc <SystemInit+0xf0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f023 030f 	bic.w	r3, r3, #15
 80035f4:	4a31      	ldr	r2, [pc, #196]	; (80036bc <SystemInit+0xf0>)
 80035f6:	f043 0307 	orr.w	r3, r3, #7
 80035fa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80035fc:	4b30      	ldr	r3, [pc, #192]	; (80036c0 <SystemInit+0xf4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a2f      	ldr	r2, [pc, #188]	; (80036c0 <SystemInit+0xf4>)
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003608:	4b2d      	ldr	r3, [pc, #180]	; (80036c0 <SystemInit+0xf4>)
 800360a:	2200      	movs	r2, #0
 800360c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800360e:	4b2c      	ldr	r3, [pc, #176]	; (80036c0 <SystemInit+0xf4>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	492b      	ldr	r1, [pc, #172]	; (80036c0 <SystemInit+0xf4>)
 8003614:	4b2b      	ldr	r3, [pc, #172]	; (80036c4 <SystemInit+0xf8>)
 8003616:	4013      	ands	r3, r2
 8003618:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800361a:	4b28      	ldr	r3, [pc, #160]	; (80036bc <SystemInit+0xf0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d007      	beq.n	8003636 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003626:	4b25      	ldr	r3, [pc, #148]	; (80036bc <SystemInit+0xf0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 030f 	bic.w	r3, r3, #15
 800362e:	4a23      	ldr	r2, [pc, #140]	; (80036bc <SystemInit+0xf0>)
 8003630:	f043 0307 	orr.w	r3, r3, #7
 8003634:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003636:	4b22      	ldr	r3, [pc, #136]	; (80036c0 <SystemInit+0xf4>)
 8003638:	2200      	movs	r2, #0
 800363a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800363c:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <SystemInit+0xf4>)
 800363e:	2200      	movs	r2, #0
 8003640:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003642:	4b1f      	ldr	r3, [pc, #124]	; (80036c0 <SystemInit+0xf4>)
 8003644:	2200      	movs	r2, #0
 8003646:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003648:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <SystemInit+0xf4>)
 800364a:	4a1f      	ldr	r2, [pc, #124]	; (80036c8 <SystemInit+0xfc>)
 800364c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800364e:	4b1c      	ldr	r3, [pc, #112]	; (80036c0 <SystemInit+0xf4>)
 8003650:	4a1e      	ldr	r2, [pc, #120]	; (80036cc <SystemInit+0x100>)
 8003652:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003654:	4b1a      	ldr	r3, [pc, #104]	; (80036c0 <SystemInit+0xf4>)
 8003656:	4a1e      	ldr	r2, [pc, #120]	; (80036d0 <SystemInit+0x104>)
 8003658:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800365a:	4b19      	ldr	r3, [pc, #100]	; (80036c0 <SystemInit+0xf4>)
 800365c:	2200      	movs	r2, #0
 800365e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003660:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <SystemInit+0xf4>)
 8003662:	4a1b      	ldr	r2, [pc, #108]	; (80036d0 <SystemInit+0x104>)
 8003664:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003666:	4b16      	ldr	r3, [pc, #88]	; (80036c0 <SystemInit+0xf4>)
 8003668:	2200      	movs	r2, #0
 800366a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800366c:	4b14      	ldr	r3, [pc, #80]	; (80036c0 <SystemInit+0xf4>)
 800366e:	4a18      	ldr	r2, [pc, #96]	; (80036d0 <SystemInit+0x104>)
 8003670:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003672:	4b13      	ldr	r3, [pc, #76]	; (80036c0 <SystemInit+0xf4>)
 8003674:	2200      	movs	r2, #0
 8003676:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <SystemInit+0xf4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a10      	ldr	r2, [pc, #64]	; (80036c0 <SystemInit+0xf4>)
 800367e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003682:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003684:	4b0e      	ldr	r3, [pc, #56]	; (80036c0 <SystemInit+0xf4>)
 8003686:	2200      	movs	r2, #0
 8003688:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800368a:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <SystemInit+0x108>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <SystemInit+0x10c>)
 8003690:	4013      	ands	r3, r2
 8003692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003696:	d202      	bcs.n	800369e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003698:	4b10      	ldr	r3, [pc, #64]	; (80036dc <SystemInit+0x110>)
 800369a:	2201      	movs	r2, #1
 800369c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800369e:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <SystemInit+0x114>)
 80036a0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80036a4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036a6:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <SystemInit+0xec>)
 80036a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036ac:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80036ae:	bf00      	nop
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	e000ed00 	.word	0xe000ed00
 80036bc:	52002000 	.word	0x52002000
 80036c0:	58024400 	.word	0x58024400
 80036c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80036c8:	02020200 	.word	0x02020200
 80036cc:	01ff0000 	.word	0x01ff0000
 80036d0:	01010280 	.word	0x01010280
 80036d4:	5c001000 	.word	0x5c001000
 80036d8:	ffff0000 	.word	0xffff0000
 80036dc:	51008108 	.word	0x51008108
 80036e0:	52004000 	.word	0x52004000

080036e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80036e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800371c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80036e8:	f7ff ff70 	bl	80035cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036ec:	480c      	ldr	r0, [pc, #48]	; (8003720 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036ee:	490d      	ldr	r1, [pc, #52]	; (8003724 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036f0:	4a0d      	ldr	r2, [pc, #52]	; (8003728 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036f4:	e002      	b.n	80036fc <LoopCopyDataInit>

080036f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036fa:	3304      	adds	r3, #4

080036fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003700:	d3f9      	bcc.n	80036f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003702:	4a0a      	ldr	r2, [pc, #40]	; (800372c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003704:	4c0a      	ldr	r4, [pc, #40]	; (8003730 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003708:	e001      	b.n	800370e <LoopFillZerobss>

0800370a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800370a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800370c:	3204      	adds	r2, #4

0800370e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800370e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003710:	d3fb      	bcc.n	800370a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003712:	f00a f923 	bl	800d95c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003716:	f7fd fe1b 	bl	8001350 <main>
  bx  lr
 800371a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800371c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003724:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8003728:	0800dae8 	.word	0x0800dae8
  ldr r2, =_sbss
 800372c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8003730:	200049a8 	.word	0x200049a8

08003734 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003734:	e7fe      	b.n	8003734 <ADC3_IRQHandler>
	...

08003738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800373e:	2003      	movs	r0, #3
 8003740:	f000 f90f 	bl	8003962 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003744:	f003 ffc6 	bl	80076d4 <HAL_RCC_GetSysClockFreq>
 8003748:	4602      	mov	r2, r0
 800374a:	4b15      	ldr	r3, [pc, #84]	; (80037a0 <HAL_Init+0x68>)
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	0a1b      	lsrs	r3, r3, #8
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	4913      	ldr	r1, [pc, #76]	; (80037a4 <HAL_Init+0x6c>)
 8003756:	5ccb      	ldrb	r3, [r1, r3]
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
 8003760:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003762:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <HAL_Init+0x68>)
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	4a0e      	ldr	r2, [pc, #56]	; (80037a4 <HAL_Init+0x6c>)
 800376c:	5cd3      	ldrb	r3, [r2, r3]
 800376e:	f003 031f 	and.w	r3, r3, #31
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	fa22 f303 	lsr.w	r3, r2, r3
 8003778:	4a0b      	ldr	r2, [pc, #44]	; (80037a8 <HAL_Init+0x70>)
 800377a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800377c:	4a0b      	ldr	r2, [pc, #44]	; (80037ac <HAL_Init+0x74>)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003782:	2000      	movs	r0, #0
 8003784:	f7ff fa20 	bl	8002bc8 <HAL_InitTick>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e002      	b.n	8003798 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003792:	f7fe fe41 	bl	8002418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	58024400 	.word	0x58024400
 80037a4:	0800da98 	.word	0x0800da98
 80037a8:	20000004 	.word	0x20000004
 80037ac:	20000000 	.word	0x20000000

080037b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80037b4:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <HAL_IncTick+0x20>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <HAL_IncTick+0x24>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4413      	add	r3, r2
 80037c0:	4a04      	ldr	r2, [pc, #16]	; (80037d4 <HAL_IncTick+0x24>)
 80037c2:	6013      	str	r3, [r2, #0]
}
 80037c4:	bf00      	nop
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	2000000c 	.word	0x2000000c
 80037d4:	200049a4 	.word	0x200049a4

080037d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  return uwTick;
 80037dc:	4b03      	ldr	r3, [pc, #12]	; (80037ec <HAL_GetTick+0x14>)
 80037de:	681b      	ldr	r3, [r3, #0]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	200049a4 	.word	0x200049a4

080037f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80037f4:	4b03      	ldr	r3, [pc, #12]	; (8003804 <HAL_GetREVID+0x14>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	0c1b      	lsrs	r3, r3, #16
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	5c001000 	.word	0x5c001000

08003808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <__NVIC_SetPriorityGrouping+0x40>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003824:	4013      	ands	r3, r2
 8003826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <__NVIC_SetPriorityGrouping+0x44>)
 8003832:	4313      	orrs	r3, r2
 8003834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003836:	4a04      	ldr	r2, [pc, #16]	; (8003848 <__NVIC_SetPriorityGrouping+0x40>)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	60d3      	str	r3, [r2, #12]
}
 800383c:	bf00      	nop
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	e000ed00 	.word	0xe000ed00
 800384c:	05fa0000 	.word	0x05fa0000

08003850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003854:	4b04      	ldr	r3, [pc, #16]	; (8003868 <__NVIC_GetPriorityGrouping+0x18>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	0a1b      	lsrs	r3, r3, #8
 800385a:	f003 0307 	and.w	r3, r3, #7
}
 800385e:	4618      	mov	r0, r3
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	e000ed00 	.word	0xe000ed00

0800386c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800387a:	2b00      	cmp	r3, #0
 800387c:	db0b      	blt.n	8003896 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800387e:	88fb      	ldrh	r3, [r7, #6]
 8003880:	f003 021f 	and.w	r2, r3, #31
 8003884:	4907      	ldr	r1, [pc, #28]	; (80038a4 <__NVIC_EnableIRQ+0x38>)
 8003886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800388a:	095b      	lsrs	r3, r3, #5
 800388c:	2001      	movs	r0, #1
 800388e:	fa00 f202 	lsl.w	r2, r0, r2
 8003892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	e000e100 	.word	0xe000e100

080038a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	6039      	str	r1, [r7, #0]
 80038b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80038b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	db0a      	blt.n	80038d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	490c      	ldr	r1, [pc, #48]	; (80038f4 <__NVIC_SetPriority+0x4c>)
 80038c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038c6:	0112      	lsls	r2, r2, #4
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	440b      	add	r3, r1
 80038cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038d0:	e00a      	b.n	80038e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	4908      	ldr	r1, [pc, #32]	; (80038f8 <__NVIC_SetPriority+0x50>)
 80038d8:	88fb      	ldrh	r3, [r7, #6]
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	3b04      	subs	r3, #4
 80038e0:	0112      	lsls	r2, r2, #4
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	440b      	add	r3, r1
 80038e6:	761a      	strb	r2, [r3, #24]
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	e000e100 	.word	0xe000e100
 80038f8:	e000ed00 	.word	0xe000ed00

080038fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b089      	sub	sp, #36	; 0x24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f1c3 0307 	rsb	r3, r3, #7
 8003916:	2b04      	cmp	r3, #4
 8003918:	bf28      	it	cs
 800391a:	2304      	movcs	r3, #4
 800391c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	3304      	adds	r3, #4
 8003922:	2b06      	cmp	r3, #6
 8003924:	d902      	bls.n	800392c <NVIC_EncodePriority+0x30>
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	3b03      	subs	r3, #3
 800392a:	e000      	b.n	800392e <NVIC_EncodePriority+0x32>
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003930:	f04f 32ff 	mov.w	r2, #4294967295
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43da      	mvns	r2, r3
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	401a      	ands	r2, r3
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003944:	f04f 31ff 	mov.w	r1, #4294967295
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	fa01 f303 	lsl.w	r3, r1, r3
 800394e:	43d9      	mvns	r1, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003954:	4313      	orrs	r3, r2
         );
}
 8003956:	4618      	mov	r0, r3
 8003958:	3724      	adds	r7, #36	; 0x24
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff ff4c 	bl	8003808 <__NVIC_SetPriorityGrouping>
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003986:	f7ff ff63 	bl	8003850 <__NVIC_GetPriorityGrouping>
 800398a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	68b9      	ldr	r1, [r7, #8]
 8003990:	6978      	ldr	r0, [r7, #20]
 8003992:	f7ff ffb3 	bl	80038fc <NVIC_EncodePriority>
 8003996:	4602      	mov	r2, r0
 8003998:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff ff82 	bl	80038a8 <__NVIC_SetPriority>
}
 80039a4:	bf00      	nop
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff ff56 	bl	800386c <__NVIC_EnableIRQ>
}
 80039c0:	bf00      	nop
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80039d0:	f7ff ff02 	bl	80037d8 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e316      	b.n	800400e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a66      	ldr	r2, [pc, #408]	; (8003b80 <HAL_DMA_Init+0x1b8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d04a      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a65      	ldr	r2, [pc, #404]	; (8003b84 <HAL_DMA_Init+0x1bc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d045      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a63      	ldr	r2, [pc, #396]	; (8003b88 <HAL_DMA_Init+0x1c0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d040      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a62      	ldr	r2, [pc, #392]	; (8003b8c <HAL_DMA_Init+0x1c4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d03b      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a60      	ldr	r2, [pc, #384]	; (8003b90 <HAL_DMA_Init+0x1c8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d036      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a5f      	ldr	r2, [pc, #380]	; (8003b94 <HAL_DMA_Init+0x1cc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d031      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a5d      	ldr	r2, [pc, #372]	; (8003b98 <HAL_DMA_Init+0x1d0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d02c      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a5c      	ldr	r2, [pc, #368]	; (8003b9c <HAL_DMA_Init+0x1d4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d027      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a5a      	ldr	r2, [pc, #360]	; (8003ba0 <HAL_DMA_Init+0x1d8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d022      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a59      	ldr	r2, [pc, #356]	; (8003ba4 <HAL_DMA_Init+0x1dc>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d01d      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a57      	ldr	r2, [pc, #348]	; (8003ba8 <HAL_DMA_Init+0x1e0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d018      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a56      	ldr	r2, [pc, #344]	; (8003bac <HAL_DMA_Init+0x1e4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d013      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a54      	ldr	r2, [pc, #336]	; (8003bb0 <HAL_DMA_Init+0x1e8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00e      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a53      	ldr	r2, [pc, #332]	; (8003bb4 <HAL_DMA_Init+0x1ec>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d009      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a51      	ldr	r2, [pc, #324]	; (8003bb8 <HAL_DMA_Init+0x1f0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d004      	beq.n	8003a80 <HAL_DMA_Init+0xb8>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a50      	ldr	r2, [pc, #320]	; (8003bbc <HAL_DMA_Init+0x1f4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d101      	bne.n	8003a84 <HAL_DMA_Init+0xbc>
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <HAL_DMA_Init+0xbe>
 8003a84:	2300      	movs	r3, #0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 813b 	beq.w	8003d02 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a37      	ldr	r2, [pc, #220]	; (8003b80 <HAL_DMA_Init+0x1b8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d04a      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a36      	ldr	r2, [pc, #216]	; (8003b84 <HAL_DMA_Init+0x1bc>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d045      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a34      	ldr	r2, [pc, #208]	; (8003b88 <HAL_DMA_Init+0x1c0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d040      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a33      	ldr	r2, [pc, #204]	; (8003b8c <HAL_DMA_Init+0x1c4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d03b      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a31      	ldr	r2, [pc, #196]	; (8003b90 <HAL_DMA_Init+0x1c8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d036      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a30      	ldr	r2, [pc, #192]	; (8003b94 <HAL_DMA_Init+0x1cc>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d031      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a2e      	ldr	r2, [pc, #184]	; (8003b98 <HAL_DMA_Init+0x1d0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d02c      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a2d      	ldr	r2, [pc, #180]	; (8003b9c <HAL_DMA_Init+0x1d4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d027      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a2b      	ldr	r2, [pc, #172]	; (8003ba0 <HAL_DMA_Init+0x1d8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d022      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a2a      	ldr	r2, [pc, #168]	; (8003ba4 <HAL_DMA_Init+0x1dc>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d01d      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a28      	ldr	r2, [pc, #160]	; (8003ba8 <HAL_DMA_Init+0x1e0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d018      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a27      	ldr	r2, [pc, #156]	; (8003bac <HAL_DMA_Init+0x1e4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d013      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a25      	ldr	r2, [pc, #148]	; (8003bb0 <HAL_DMA_Init+0x1e8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00e      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a24      	ldr	r2, [pc, #144]	; (8003bb4 <HAL_DMA_Init+0x1ec>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d009      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a22      	ldr	r2, [pc, #136]	; (8003bb8 <HAL_DMA_Init+0x1f0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d004      	beq.n	8003b3c <HAL_DMA_Init+0x174>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a21      	ldr	r2, [pc, #132]	; (8003bbc <HAL_DMA_Init+0x1f4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d108      	bne.n	8003b4e <HAL_DMA_Init+0x186>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	e007      	b.n	8003b5e <HAL_DMA_Init+0x196>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0201 	bic.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b5e:	e02f      	b.n	8003bc0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b60:	f7ff fe3a 	bl	80037d8 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b05      	cmp	r3, #5
 8003b6c:	d928      	bls.n	8003bc0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2220      	movs	r2, #32
 8003b72:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2203      	movs	r2, #3
 8003b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e246      	b.n	800400e <HAL_DMA_Init+0x646>
 8003b80:	40020010 	.word	0x40020010
 8003b84:	40020028 	.word	0x40020028
 8003b88:	40020040 	.word	0x40020040
 8003b8c:	40020058 	.word	0x40020058
 8003b90:	40020070 	.word	0x40020070
 8003b94:	40020088 	.word	0x40020088
 8003b98:	400200a0 	.word	0x400200a0
 8003b9c:	400200b8 	.word	0x400200b8
 8003ba0:	40020410 	.word	0x40020410
 8003ba4:	40020428 	.word	0x40020428
 8003ba8:	40020440 	.word	0x40020440
 8003bac:	40020458 	.word	0x40020458
 8003bb0:	40020470 	.word	0x40020470
 8003bb4:	40020488 	.word	0x40020488
 8003bb8:	400204a0 	.word	0x400204a0
 8003bbc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1c8      	bne.n	8003b60 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4b83      	ldr	r3, [pc, #524]	; (8003de8 <HAL_DMA_Init+0x420>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003be6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bf2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bfe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d107      	bne.n	8003c24 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003c24:	4b71      	ldr	r3, [pc, #452]	; (8003dec <HAL_DMA_Init+0x424>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4b71      	ldr	r3, [pc, #452]	; (8003df0 <HAL_DMA_Init+0x428>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c30:	d328      	bcc.n	8003c84 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b28      	cmp	r3, #40	; 0x28
 8003c38:	d903      	bls.n	8003c42 <HAL_DMA_Init+0x27a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b2e      	cmp	r3, #46	; 0x2e
 8003c40:	d917      	bls.n	8003c72 <HAL_DMA_Init+0x2aa>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b3e      	cmp	r3, #62	; 0x3e
 8003c48:	d903      	bls.n	8003c52 <HAL_DMA_Init+0x28a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b42      	cmp	r3, #66	; 0x42
 8003c50:	d90f      	bls.n	8003c72 <HAL_DMA_Init+0x2aa>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b46      	cmp	r3, #70	; 0x46
 8003c58:	d903      	bls.n	8003c62 <HAL_DMA_Init+0x29a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b48      	cmp	r3, #72	; 0x48
 8003c60:	d907      	bls.n	8003c72 <HAL_DMA_Init+0x2aa>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b4e      	cmp	r3, #78	; 0x4e
 8003c68:	d905      	bls.n	8003c76 <HAL_DMA_Init+0x2ae>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b52      	cmp	r3, #82	; 0x52
 8003c70:	d801      	bhi.n	8003c76 <HAL_DMA_Init+0x2ae>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <HAL_DMA_Init+0x2b0>
 8003c76:	2300      	movs	r3, #0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c82:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f023 0307 	bic.w	r3, r3, #7
 8003c9a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d117      	bne.n	8003cde <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00e      	beq.n	8003cde <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f002 fb3d 	bl	8006340 <DMA_CheckFifoParam>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d008      	beq.n	8003cde <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2240      	movs	r2, #64	; 0x40
 8003cd0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e197      	b.n	800400e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f002 fa78 	bl	80061dc <DMA_CalcBaseAndBitshift>
 8003cec:	4603      	mov	r3, r0
 8003cee:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf4:	f003 031f 	and.w	r3, r3, #31
 8003cf8:	223f      	movs	r2, #63	; 0x3f
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	609a      	str	r2, [r3, #8]
 8003d00:	e0cd      	b.n	8003e9e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a3b      	ldr	r2, [pc, #236]	; (8003df4 <HAL_DMA_Init+0x42c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d022      	beq.n	8003d52 <HAL_DMA_Init+0x38a>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a39      	ldr	r2, [pc, #228]	; (8003df8 <HAL_DMA_Init+0x430>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d01d      	beq.n	8003d52 <HAL_DMA_Init+0x38a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a38      	ldr	r2, [pc, #224]	; (8003dfc <HAL_DMA_Init+0x434>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d018      	beq.n	8003d52 <HAL_DMA_Init+0x38a>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a36      	ldr	r2, [pc, #216]	; (8003e00 <HAL_DMA_Init+0x438>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d013      	beq.n	8003d52 <HAL_DMA_Init+0x38a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a35      	ldr	r2, [pc, #212]	; (8003e04 <HAL_DMA_Init+0x43c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d00e      	beq.n	8003d52 <HAL_DMA_Init+0x38a>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a33      	ldr	r2, [pc, #204]	; (8003e08 <HAL_DMA_Init+0x440>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d009      	beq.n	8003d52 <HAL_DMA_Init+0x38a>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a32      	ldr	r2, [pc, #200]	; (8003e0c <HAL_DMA_Init+0x444>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d004      	beq.n	8003d52 <HAL_DMA_Init+0x38a>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a30      	ldr	r2, [pc, #192]	; (8003e10 <HAL_DMA_Init+0x448>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d101      	bne.n	8003d56 <HAL_DMA_Init+0x38e>
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <HAL_DMA_Init+0x390>
 8003d56:	2300      	movs	r3, #0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 8097 	beq.w	8003e8c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a24      	ldr	r2, [pc, #144]	; (8003df4 <HAL_DMA_Init+0x42c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d021      	beq.n	8003dac <HAL_DMA_Init+0x3e4>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a22      	ldr	r2, [pc, #136]	; (8003df8 <HAL_DMA_Init+0x430>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01c      	beq.n	8003dac <HAL_DMA_Init+0x3e4>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a21      	ldr	r2, [pc, #132]	; (8003dfc <HAL_DMA_Init+0x434>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d017      	beq.n	8003dac <HAL_DMA_Init+0x3e4>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a1f      	ldr	r2, [pc, #124]	; (8003e00 <HAL_DMA_Init+0x438>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d012      	beq.n	8003dac <HAL_DMA_Init+0x3e4>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a1e      	ldr	r2, [pc, #120]	; (8003e04 <HAL_DMA_Init+0x43c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00d      	beq.n	8003dac <HAL_DMA_Init+0x3e4>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a1c      	ldr	r2, [pc, #112]	; (8003e08 <HAL_DMA_Init+0x440>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d008      	beq.n	8003dac <HAL_DMA_Init+0x3e4>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a1b      	ldr	r2, [pc, #108]	; (8003e0c <HAL_DMA_Init+0x444>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d003      	beq.n	8003dac <HAL_DMA_Init+0x3e4>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a19      	ldr	r2, [pc, #100]	; (8003e10 <HAL_DMA_Init+0x448>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2202      	movs	r2, #2
 8003dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <HAL_DMA_Init+0x44c>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b40      	cmp	r3, #64	; 0x40
 8003dd4:	d020      	beq.n	8003e18 <HAL_DMA_Init+0x450>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b80      	cmp	r3, #128	; 0x80
 8003ddc:	d102      	bne.n	8003de4 <HAL_DMA_Init+0x41c>
 8003dde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003de2:	e01a      	b.n	8003e1a <HAL_DMA_Init+0x452>
 8003de4:	2300      	movs	r3, #0
 8003de6:	e018      	b.n	8003e1a <HAL_DMA_Init+0x452>
 8003de8:	fe10803f 	.word	0xfe10803f
 8003dec:	5c001000 	.word	0x5c001000
 8003df0:	ffff0000 	.word	0xffff0000
 8003df4:	58025408 	.word	0x58025408
 8003df8:	5802541c 	.word	0x5802541c
 8003dfc:	58025430 	.word	0x58025430
 8003e00:	58025444 	.word	0x58025444
 8003e04:	58025458 	.word	0x58025458
 8003e08:	5802546c 	.word	0x5802546c
 8003e0c:	58025480 	.word	0x58025480
 8003e10:	58025494 	.word	0x58025494
 8003e14:	fffe000f 	.word	0xfffe000f
 8003e18:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	68d2      	ldr	r2, [r2, #12]
 8003e1e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e48:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4b6e      	ldr	r3, [pc, #440]	; (8004018 <HAL_DMA_Init+0x650>)
 8003e60:	4413      	add	r3, r2
 8003e62:	4a6e      	ldr	r2, [pc, #440]	; (800401c <HAL_DMA_Init+0x654>)
 8003e64:	fba2 2303 	umull	r2, r3, r2, r3
 8003e68:	091b      	lsrs	r3, r3, #4
 8003e6a:	009a      	lsls	r2, r3, #2
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f002 f9b3 	bl	80061dc <DMA_CalcBaseAndBitshift>
 8003e76:	4603      	mov	r3, r0
 8003e78:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7e:	f003 031f 	and.w	r3, r3, #31
 8003e82:	2201      	movs	r2, #1
 8003e84:	409a      	lsls	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	605a      	str	r2, [r3, #4]
 8003e8a:	e008      	b.n	8003e9e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2240      	movs	r2, #64	; 0x40
 8003e90:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2203      	movs	r2, #3
 8003e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e0b7      	b.n	800400e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a5f      	ldr	r2, [pc, #380]	; (8004020 <HAL_DMA_Init+0x658>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d072      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a5d      	ldr	r2, [pc, #372]	; (8004024 <HAL_DMA_Init+0x65c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d06d      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a5c      	ldr	r2, [pc, #368]	; (8004028 <HAL_DMA_Init+0x660>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d068      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a5a      	ldr	r2, [pc, #360]	; (800402c <HAL_DMA_Init+0x664>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d063      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a59      	ldr	r2, [pc, #356]	; (8004030 <HAL_DMA_Init+0x668>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d05e      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a57      	ldr	r2, [pc, #348]	; (8004034 <HAL_DMA_Init+0x66c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d059      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a56      	ldr	r2, [pc, #344]	; (8004038 <HAL_DMA_Init+0x670>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d054      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a54      	ldr	r2, [pc, #336]	; (800403c <HAL_DMA_Init+0x674>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d04f      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a53      	ldr	r2, [pc, #332]	; (8004040 <HAL_DMA_Init+0x678>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d04a      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a51      	ldr	r2, [pc, #324]	; (8004044 <HAL_DMA_Init+0x67c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d045      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a50      	ldr	r2, [pc, #320]	; (8004048 <HAL_DMA_Init+0x680>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d040      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a4e      	ldr	r2, [pc, #312]	; (800404c <HAL_DMA_Init+0x684>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d03b      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a4d      	ldr	r2, [pc, #308]	; (8004050 <HAL_DMA_Init+0x688>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d036      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a4b      	ldr	r2, [pc, #300]	; (8004054 <HAL_DMA_Init+0x68c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d031      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a4a      	ldr	r2, [pc, #296]	; (8004058 <HAL_DMA_Init+0x690>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d02c      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a48      	ldr	r2, [pc, #288]	; (800405c <HAL_DMA_Init+0x694>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d027      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a47      	ldr	r2, [pc, #284]	; (8004060 <HAL_DMA_Init+0x698>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d022      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a45      	ldr	r2, [pc, #276]	; (8004064 <HAL_DMA_Init+0x69c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d01d      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a44      	ldr	r2, [pc, #272]	; (8004068 <HAL_DMA_Init+0x6a0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d018      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a42      	ldr	r2, [pc, #264]	; (800406c <HAL_DMA_Init+0x6a4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d013      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a41      	ldr	r2, [pc, #260]	; (8004070 <HAL_DMA_Init+0x6a8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00e      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a3f      	ldr	r2, [pc, #252]	; (8004074 <HAL_DMA_Init+0x6ac>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d009      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a3e      	ldr	r2, [pc, #248]	; (8004078 <HAL_DMA_Init+0x6b0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d004      	beq.n	8003f8e <HAL_DMA_Init+0x5c6>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a3c      	ldr	r2, [pc, #240]	; (800407c <HAL_DMA_Init+0x6b4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d101      	bne.n	8003f92 <HAL_DMA_Init+0x5ca>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <HAL_DMA_Init+0x5cc>
 8003f92:	2300      	movs	r3, #0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d032      	beq.n	8003ffe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f002 fa4d 	bl	8006438 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2b80      	cmp	r3, #128	; 0x80
 8003fa4:	d102      	bne.n	8003fac <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003fc0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d010      	beq.n	8003fec <HAL_DMA_Init+0x624>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d80c      	bhi.n	8003fec <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f002 faca 	bl	800656c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003fe8:	605a      	str	r2, [r3, #4]
 8003fea:	e008      	b.n	8003ffe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	a7fdabf8 	.word	0xa7fdabf8
 800401c:	cccccccd 	.word	0xcccccccd
 8004020:	40020010 	.word	0x40020010
 8004024:	40020028 	.word	0x40020028
 8004028:	40020040 	.word	0x40020040
 800402c:	40020058 	.word	0x40020058
 8004030:	40020070 	.word	0x40020070
 8004034:	40020088 	.word	0x40020088
 8004038:	400200a0 	.word	0x400200a0
 800403c:	400200b8 	.word	0x400200b8
 8004040:	40020410 	.word	0x40020410
 8004044:	40020428 	.word	0x40020428
 8004048:	40020440 	.word	0x40020440
 800404c:	40020458 	.word	0x40020458
 8004050:	40020470 	.word	0x40020470
 8004054:	40020488 	.word	0x40020488
 8004058:	400204a0 	.word	0x400204a0
 800405c:	400204b8 	.word	0x400204b8
 8004060:	58025408 	.word	0x58025408
 8004064:	5802541c 	.word	0x5802541c
 8004068:	58025430 	.word	0x58025430
 800406c:	58025444 	.word	0x58025444
 8004070:	58025458 	.word	0x58025458
 8004074:	5802546c 	.word	0x5802546c
 8004078:	58025480 	.word	0x58025480
 800407c:	58025494 	.word	0x58025494

08004080 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e226      	b.n	80044ea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_DMA_Start_IT+0x2a>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e21f      	b.n	80044ea <HAL_DMA_Start_IT+0x46a>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	f040 820a 	bne.w	80044d4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a68      	ldr	r2, [pc, #416]	; (8004274 <HAL_DMA_Start_IT+0x1f4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d04a      	beq.n	800416e <HAL_DMA_Start_IT+0xee>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a66      	ldr	r2, [pc, #408]	; (8004278 <HAL_DMA_Start_IT+0x1f8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d045      	beq.n	800416e <HAL_DMA_Start_IT+0xee>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a65      	ldr	r2, [pc, #404]	; (800427c <HAL_DMA_Start_IT+0x1fc>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d040      	beq.n	800416e <HAL_DMA_Start_IT+0xee>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a63      	ldr	r2, [pc, #396]	; (8004280 <HAL_DMA_Start_IT+0x200>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d03b      	beq.n	800416e <HAL_DMA_Start_IT+0xee>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a62      	ldr	r2, [pc, #392]	; (8004284 <HAL_DMA_Start_IT+0x204>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d036      	beq.n	800416e <HAL_DMA_Start_IT+0xee>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a60      	ldr	r2, [pc, #384]	; (8004288 <HAL_DMA_Start_IT+0x208>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d031      	beq.n	800416e <HAL_DMA_Start_IT+0xee>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a5f      	ldr	r2, [pc, #380]	; (800428c <HAL_DMA_Start_IT+0x20c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d02c      	beq.n	800416e <HAL_DMA_Start_IT+0xee>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a5d      	ldr	r2, [pc, #372]	; (8004290 <HAL_DMA_Start_IT+0x210>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d027      	beq.n	800416e <HAL_DMA_Start_IT+0xee>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a5c      	ldr	r2, [pc, #368]	; (8004294 <HAL_DMA_Start_IT+0x214>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d022      	beq.n	800416e <HAL_DMA_Start_IT+0xee>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a5a      	ldr	r2, [pc, #360]	; (8004298 <HAL_DMA_Start_IT+0x218>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d01d      	beq.n	800416e <HAL_DMA_Start_IT+0xee>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a59      	ldr	r2, [pc, #356]	; (800429c <HAL_DMA_Start_IT+0x21c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d018      	beq.n	800416e <HAL_DMA_Start_IT+0xee>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a57      	ldr	r2, [pc, #348]	; (80042a0 <HAL_DMA_Start_IT+0x220>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d013      	beq.n	800416e <HAL_DMA_Start_IT+0xee>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a56      	ldr	r2, [pc, #344]	; (80042a4 <HAL_DMA_Start_IT+0x224>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00e      	beq.n	800416e <HAL_DMA_Start_IT+0xee>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a54      	ldr	r2, [pc, #336]	; (80042a8 <HAL_DMA_Start_IT+0x228>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d009      	beq.n	800416e <HAL_DMA_Start_IT+0xee>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a53      	ldr	r2, [pc, #332]	; (80042ac <HAL_DMA_Start_IT+0x22c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d004      	beq.n	800416e <HAL_DMA_Start_IT+0xee>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a51      	ldr	r2, [pc, #324]	; (80042b0 <HAL_DMA_Start_IT+0x230>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d108      	bne.n	8004180 <HAL_DMA_Start_IT+0x100>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0201 	bic.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	e007      	b.n	8004190 <HAL_DMA_Start_IT+0x110>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0201 	bic.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	68b9      	ldr	r1, [r7, #8]
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f001 fe74 	bl	8005e84 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a34      	ldr	r2, [pc, #208]	; (8004274 <HAL_DMA_Start_IT+0x1f4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d04a      	beq.n	800423c <HAL_DMA_Start_IT+0x1bc>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a33      	ldr	r2, [pc, #204]	; (8004278 <HAL_DMA_Start_IT+0x1f8>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d045      	beq.n	800423c <HAL_DMA_Start_IT+0x1bc>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a31      	ldr	r2, [pc, #196]	; (800427c <HAL_DMA_Start_IT+0x1fc>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d040      	beq.n	800423c <HAL_DMA_Start_IT+0x1bc>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a30      	ldr	r2, [pc, #192]	; (8004280 <HAL_DMA_Start_IT+0x200>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d03b      	beq.n	800423c <HAL_DMA_Start_IT+0x1bc>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a2e      	ldr	r2, [pc, #184]	; (8004284 <HAL_DMA_Start_IT+0x204>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d036      	beq.n	800423c <HAL_DMA_Start_IT+0x1bc>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a2d      	ldr	r2, [pc, #180]	; (8004288 <HAL_DMA_Start_IT+0x208>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d031      	beq.n	800423c <HAL_DMA_Start_IT+0x1bc>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a2b      	ldr	r2, [pc, #172]	; (800428c <HAL_DMA_Start_IT+0x20c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d02c      	beq.n	800423c <HAL_DMA_Start_IT+0x1bc>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a2a      	ldr	r2, [pc, #168]	; (8004290 <HAL_DMA_Start_IT+0x210>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d027      	beq.n	800423c <HAL_DMA_Start_IT+0x1bc>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a28      	ldr	r2, [pc, #160]	; (8004294 <HAL_DMA_Start_IT+0x214>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d022      	beq.n	800423c <HAL_DMA_Start_IT+0x1bc>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a27      	ldr	r2, [pc, #156]	; (8004298 <HAL_DMA_Start_IT+0x218>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d01d      	beq.n	800423c <HAL_DMA_Start_IT+0x1bc>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a25      	ldr	r2, [pc, #148]	; (800429c <HAL_DMA_Start_IT+0x21c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d018      	beq.n	800423c <HAL_DMA_Start_IT+0x1bc>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a24      	ldr	r2, [pc, #144]	; (80042a0 <HAL_DMA_Start_IT+0x220>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d013      	beq.n	800423c <HAL_DMA_Start_IT+0x1bc>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a22      	ldr	r2, [pc, #136]	; (80042a4 <HAL_DMA_Start_IT+0x224>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00e      	beq.n	800423c <HAL_DMA_Start_IT+0x1bc>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a21      	ldr	r2, [pc, #132]	; (80042a8 <HAL_DMA_Start_IT+0x228>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d009      	beq.n	800423c <HAL_DMA_Start_IT+0x1bc>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a1f      	ldr	r2, [pc, #124]	; (80042ac <HAL_DMA_Start_IT+0x22c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d004      	beq.n	800423c <HAL_DMA_Start_IT+0x1bc>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a1e      	ldr	r2, [pc, #120]	; (80042b0 <HAL_DMA_Start_IT+0x230>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d101      	bne.n	8004240 <HAL_DMA_Start_IT+0x1c0>
 800423c:	2301      	movs	r3, #1
 800423e:	e000      	b.n	8004242 <HAL_DMA_Start_IT+0x1c2>
 8004240:	2300      	movs	r3, #0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d036      	beq.n	80042b4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f023 021e 	bic.w	r2, r3, #30
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0216 	orr.w	r2, r2, #22
 8004258:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	2b00      	cmp	r3, #0
 8004260:	d03e      	beq.n	80042e0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0208 	orr.w	r2, r2, #8
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	e035      	b.n	80042e0 <HAL_DMA_Start_IT+0x260>
 8004274:	40020010 	.word	0x40020010
 8004278:	40020028 	.word	0x40020028
 800427c:	40020040 	.word	0x40020040
 8004280:	40020058 	.word	0x40020058
 8004284:	40020070 	.word	0x40020070
 8004288:	40020088 	.word	0x40020088
 800428c:	400200a0 	.word	0x400200a0
 8004290:	400200b8 	.word	0x400200b8
 8004294:	40020410 	.word	0x40020410
 8004298:	40020428 	.word	0x40020428
 800429c:	40020440 	.word	0x40020440
 80042a0:	40020458 	.word	0x40020458
 80042a4:	40020470 	.word	0x40020470
 80042a8:	40020488 	.word	0x40020488
 80042ac:	400204a0 	.word	0x400204a0
 80042b0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 020e 	bic.w	r2, r3, #14
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 020a 	orr.w	r2, r2, #10
 80042c6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d007      	beq.n	80042e0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0204 	orr.w	r2, r2, #4
 80042de:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a83      	ldr	r2, [pc, #524]	; (80044f4 <HAL_DMA_Start_IT+0x474>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d072      	beq.n	80043d0 <HAL_DMA_Start_IT+0x350>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a82      	ldr	r2, [pc, #520]	; (80044f8 <HAL_DMA_Start_IT+0x478>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d06d      	beq.n	80043d0 <HAL_DMA_Start_IT+0x350>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a80      	ldr	r2, [pc, #512]	; (80044fc <HAL_DMA_Start_IT+0x47c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d068      	beq.n	80043d0 <HAL_DMA_Start_IT+0x350>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a7f      	ldr	r2, [pc, #508]	; (8004500 <HAL_DMA_Start_IT+0x480>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d063      	beq.n	80043d0 <HAL_DMA_Start_IT+0x350>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a7d      	ldr	r2, [pc, #500]	; (8004504 <HAL_DMA_Start_IT+0x484>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d05e      	beq.n	80043d0 <HAL_DMA_Start_IT+0x350>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a7c      	ldr	r2, [pc, #496]	; (8004508 <HAL_DMA_Start_IT+0x488>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d059      	beq.n	80043d0 <HAL_DMA_Start_IT+0x350>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a7a      	ldr	r2, [pc, #488]	; (800450c <HAL_DMA_Start_IT+0x48c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d054      	beq.n	80043d0 <HAL_DMA_Start_IT+0x350>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a79      	ldr	r2, [pc, #484]	; (8004510 <HAL_DMA_Start_IT+0x490>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d04f      	beq.n	80043d0 <HAL_DMA_Start_IT+0x350>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a77      	ldr	r2, [pc, #476]	; (8004514 <HAL_DMA_Start_IT+0x494>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d04a      	beq.n	80043d0 <HAL_DMA_Start_IT+0x350>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a76      	ldr	r2, [pc, #472]	; (8004518 <HAL_DMA_Start_IT+0x498>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d045      	beq.n	80043d0 <HAL_DMA_Start_IT+0x350>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a74      	ldr	r2, [pc, #464]	; (800451c <HAL_DMA_Start_IT+0x49c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d040      	beq.n	80043d0 <HAL_DMA_Start_IT+0x350>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a73      	ldr	r2, [pc, #460]	; (8004520 <HAL_DMA_Start_IT+0x4a0>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d03b      	beq.n	80043d0 <HAL_DMA_Start_IT+0x350>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a71      	ldr	r2, [pc, #452]	; (8004524 <HAL_DMA_Start_IT+0x4a4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d036      	beq.n	80043d0 <HAL_DMA_Start_IT+0x350>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a70      	ldr	r2, [pc, #448]	; (8004528 <HAL_DMA_Start_IT+0x4a8>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d031      	beq.n	80043d0 <HAL_DMA_Start_IT+0x350>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a6e      	ldr	r2, [pc, #440]	; (800452c <HAL_DMA_Start_IT+0x4ac>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d02c      	beq.n	80043d0 <HAL_DMA_Start_IT+0x350>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a6d      	ldr	r2, [pc, #436]	; (8004530 <HAL_DMA_Start_IT+0x4b0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d027      	beq.n	80043d0 <HAL_DMA_Start_IT+0x350>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a6b      	ldr	r2, [pc, #428]	; (8004534 <HAL_DMA_Start_IT+0x4b4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d022      	beq.n	80043d0 <HAL_DMA_Start_IT+0x350>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a6a      	ldr	r2, [pc, #424]	; (8004538 <HAL_DMA_Start_IT+0x4b8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d01d      	beq.n	80043d0 <HAL_DMA_Start_IT+0x350>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a68      	ldr	r2, [pc, #416]	; (800453c <HAL_DMA_Start_IT+0x4bc>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d018      	beq.n	80043d0 <HAL_DMA_Start_IT+0x350>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a67      	ldr	r2, [pc, #412]	; (8004540 <HAL_DMA_Start_IT+0x4c0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d013      	beq.n	80043d0 <HAL_DMA_Start_IT+0x350>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a65      	ldr	r2, [pc, #404]	; (8004544 <HAL_DMA_Start_IT+0x4c4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00e      	beq.n	80043d0 <HAL_DMA_Start_IT+0x350>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a64      	ldr	r2, [pc, #400]	; (8004548 <HAL_DMA_Start_IT+0x4c8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d009      	beq.n	80043d0 <HAL_DMA_Start_IT+0x350>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a62      	ldr	r2, [pc, #392]	; (800454c <HAL_DMA_Start_IT+0x4cc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d004      	beq.n	80043d0 <HAL_DMA_Start_IT+0x350>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a61      	ldr	r2, [pc, #388]	; (8004550 <HAL_DMA_Start_IT+0x4d0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d101      	bne.n	80043d4 <HAL_DMA_Start_IT+0x354>
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <HAL_DMA_Start_IT+0x356>
 80043d4:	2300      	movs	r3, #0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d01a      	beq.n	8004410 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d007      	beq.n	80043f8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043f6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800440a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800440e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a37      	ldr	r2, [pc, #220]	; (80044f4 <HAL_DMA_Start_IT+0x474>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d04a      	beq.n	80044b0 <HAL_DMA_Start_IT+0x430>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a36      	ldr	r2, [pc, #216]	; (80044f8 <HAL_DMA_Start_IT+0x478>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d045      	beq.n	80044b0 <HAL_DMA_Start_IT+0x430>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a34      	ldr	r2, [pc, #208]	; (80044fc <HAL_DMA_Start_IT+0x47c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d040      	beq.n	80044b0 <HAL_DMA_Start_IT+0x430>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a33      	ldr	r2, [pc, #204]	; (8004500 <HAL_DMA_Start_IT+0x480>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d03b      	beq.n	80044b0 <HAL_DMA_Start_IT+0x430>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a31      	ldr	r2, [pc, #196]	; (8004504 <HAL_DMA_Start_IT+0x484>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d036      	beq.n	80044b0 <HAL_DMA_Start_IT+0x430>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a30      	ldr	r2, [pc, #192]	; (8004508 <HAL_DMA_Start_IT+0x488>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d031      	beq.n	80044b0 <HAL_DMA_Start_IT+0x430>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a2e      	ldr	r2, [pc, #184]	; (800450c <HAL_DMA_Start_IT+0x48c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d02c      	beq.n	80044b0 <HAL_DMA_Start_IT+0x430>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a2d      	ldr	r2, [pc, #180]	; (8004510 <HAL_DMA_Start_IT+0x490>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d027      	beq.n	80044b0 <HAL_DMA_Start_IT+0x430>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a2b      	ldr	r2, [pc, #172]	; (8004514 <HAL_DMA_Start_IT+0x494>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d022      	beq.n	80044b0 <HAL_DMA_Start_IT+0x430>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a2a      	ldr	r2, [pc, #168]	; (8004518 <HAL_DMA_Start_IT+0x498>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d01d      	beq.n	80044b0 <HAL_DMA_Start_IT+0x430>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a28      	ldr	r2, [pc, #160]	; (800451c <HAL_DMA_Start_IT+0x49c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d018      	beq.n	80044b0 <HAL_DMA_Start_IT+0x430>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a27      	ldr	r2, [pc, #156]	; (8004520 <HAL_DMA_Start_IT+0x4a0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d013      	beq.n	80044b0 <HAL_DMA_Start_IT+0x430>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a25      	ldr	r2, [pc, #148]	; (8004524 <HAL_DMA_Start_IT+0x4a4>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00e      	beq.n	80044b0 <HAL_DMA_Start_IT+0x430>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a24      	ldr	r2, [pc, #144]	; (8004528 <HAL_DMA_Start_IT+0x4a8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d009      	beq.n	80044b0 <HAL_DMA_Start_IT+0x430>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a22      	ldr	r2, [pc, #136]	; (800452c <HAL_DMA_Start_IT+0x4ac>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d004      	beq.n	80044b0 <HAL_DMA_Start_IT+0x430>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a21      	ldr	r2, [pc, #132]	; (8004530 <HAL_DMA_Start_IT+0x4b0>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d108      	bne.n	80044c2 <HAL_DMA_Start_IT+0x442>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	e012      	b.n	80044e8 <HAL_DMA_Start_IT+0x468>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0201 	orr.w	r2, r2, #1
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	e009      	b.n	80044e8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80044e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40020010 	.word	0x40020010
 80044f8:	40020028 	.word	0x40020028
 80044fc:	40020040 	.word	0x40020040
 8004500:	40020058 	.word	0x40020058
 8004504:	40020070 	.word	0x40020070
 8004508:	40020088 	.word	0x40020088
 800450c:	400200a0 	.word	0x400200a0
 8004510:	400200b8 	.word	0x400200b8
 8004514:	40020410 	.word	0x40020410
 8004518:	40020428 	.word	0x40020428
 800451c:	40020440 	.word	0x40020440
 8004520:	40020458 	.word	0x40020458
 8004524:	40020470 	.word	0x40020470
 8004528:	40020488 	.word	0x40020488
 800452c:	400204a0 	.word	0x400204a0
 8004530:	400204b8 	.word	0x400204b8
 8004534:	58025408 	.word	0x58025408
 8004538:	5802541c 	.word	0x5802541c
 800453c:	58025430 	.word	0x58025430
 8004540:	58025444 	.word	0x58025444
 8004544:	58025458 	.word	0x58025458
 8004548:	5802546c 	.word	0x5802546c
 800454c:	58025480 	.word	0x58025480
 8004550:	58025494 	.word	0x58025494

08004554 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800455c:	f7ff f93c 	bl	80037d8 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e2dc      	b.n	8004b26 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d008      	beq.n	800458a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2280      	movs	r2, #128	; 0x80
 800457c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e2cd      	b.n	8004b26 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a76      	ldr	r2, [pc, #472]	; (8004768 <HAL_DMA_Abort+0x214>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d04a      	beq.n	800462a <HAL_DMA_Abort+0xd6>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a74      	ldr	r2, [pc, #464]	; (800476c <HAL_DMA_Abort+0x218>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d045      	beq.n	800462a <HAL_DMA_Abort+0xd6>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a73      	ldr	r2, [pc, #460]	; (8004770 <HAL_DMA_Abort+0x21c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d040      	beq.n	800462a <HAL_DMA_Abort+0xd6>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a71      	ldr	r2, [pc, #452]	; (8004774 <HAL_DMA_Abort+0x220>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d03b      	beq.n	800462a <HAL_DMA_Abort+0xd6>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a70      	ldr	r2, [pc, #448]	; (8004778 <HAL_DMA_Abort+0x224>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d036      	beq.n	800462a <HAL_DMA_Abort+0xd6>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a6e      	ldr	r2, [pc, #440]	; (800477c <HAL_DMA_Abort+0x228>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d031      	beq.n	800462a <HAL_DMA_Abort+0xd6>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a6d      	ldr	r2, [pc, #436]	; (8004780 <HAL_DMA_Abort+0x22c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d02c      	beq.n	800462a <HAL_DMA_Abort+0xd6>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a6b      	ldr	r2, [pc, #428]	; (8004784 <HAL_DMA_Abort+0x230>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d027      	beq.n	800462a <HAL_DMA_Abort+0xd6>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a6a      	ldr	r2, [pc, #424]	; (8004788 <HAL_DMA_Abort+0x234>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d022      	beq.n	800462a <HAL_DMA_Abort+0xd6>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a68      	ldr	r2, [pc, #416]	; (800478c <HAL_DMA_Abort+0x238>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d01d      	beq.n	800462a <HAL_DMA_Abort+0xd6>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a67      	ldr	r2, [pc, #412]	; (8004790 <HAL_DMA_Abort+0x23c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d018      	beq.n	800462a <HAL_DMA_Abort+0xd6>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a65      	ldr	r2, [pc, #404]	; (8004794 <HAL_DMA_Abort+0x240>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d013      	beq.n	800462a <HAL_DMA_Abort+0xd6>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a64      	ldr	r2, [pc, #400]	; (8004798 <HAL_DMA_Abort+0x244>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00e      	beq.n	800462a <HAL_DMA_Abort+0xd6>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a62      	ldr	r2, [pc, #392]	; (800479c <HAL_DMA_Abort+0x248>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d009      	beq.n	800462a <HAL_DMA_Abort+0xd6>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a61      	ldr	r2, [pc, #388]	; (80047a0 <HAL_DMA_Abort+0x24c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d004      	beq.n	800462a <HAL_DMA_Abort+0xd6>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a5f      	ldr	r2, [pc, #380]	; (80047a4 <HAL_DMA_Abort+0x250>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d101      	bne.n	800462e <HAL_DMA_Abort+0xda>
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <HAL_DMA_Abort+0xdc>
 800462e:	2300      	movs	r3, #0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d013      	beq.n	800465c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 021e 	bic.w	r2, r2, #30
 8004642:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695a      	ldr	r2, [r3, #20]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004652:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	617b      	str	r3, [r7, #20]
 800465a:	e00a      	b.n	8004672 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 020e 	bic.w	r2, r2, #14
 800466a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a3c      	ldr	r2, [pc, #240]	; (8004768 <HAL_DMA_Abort+0x214>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d072      	beq.n	8004762 <HAL_DMA_Abort+0x20e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a3a      	ldr	r2, [pc, #232]	; (800476c <HAL_DMA_Abort+0x218>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d06d      	beq.n	8004762 <HAL_DMA_Abort+0x20e>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a39      	ldr	r2, [pc, #228]	; (8004770 <HAL_DMA_Abort+0x21c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d068      	beq.n	8004762 <HAL_DMA_Abort+0x20e>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a37      	ldr	r2, [pc, #220]	; (8004774 <HAL_DMA_Abort+0x220>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d063      	beq.n	8004762 <HAL_DMA_Abort+0x20e>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a36      	ldr	r2, [pc, #216]	; (8004778 <HAL_DMA_Abort+0x224>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d05e      	beq.n	8004762 <HAL_DMA_Abort+0x20e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a34      	ldr	r2, [pc, #208]	; (800477c <HAL_DMA_Abort+0x228>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d059      	beq.n	8004762 <HAL_DMA_Abort+0x20e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a33      	ldr	r2, [pc, #204]	; (8004780 <HAL_DMA_Abort+0x22c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d054      	beq.n	8004762 <HAL_DMA_Abort+0x20e>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a31      	ldr	r2, [pc, #196]	; (8004784 <HAL_DMA_Abort+0x230>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d04f      	beq.n	8004762 <HAL_DMA_Abort+0x20e>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a30      	ldr	r2, [pc, #192]	; (8004788 <HAL_DMA_Abort+0x234>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d04a      	beq.n	8004762 <HAL_DMA_Abort+0x20e>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a2e      	ldr	r2, [pc, #184]	; (800478c <HAL_DMA_Abort+0x238>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d045      	beq.n	8004762 <HAL_DMA_Abort+0x20e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a2d      	ldr	r2, [pc, #180]	; (8004790 <HAL_DMA_Abort+0x23c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d040      	beq.n	8004762 <HAL_DMA_Abort+0x20e>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a2b      	ldr	r2, [pc, #172]	; (8004794 <HAL_DMA_Abort+0x240>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d03b      	beq.n	8004762 <HAL_DMA_Abort+0x20e>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a2a      	ldr	r2, [pc, #168]	; (8004798 <HAL_DMA_Abort+0x244>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d036      	beq.n	8004762 <HAL_DMA_Abort+0x20e>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a28      	ldr	r2, [pc, #160]	; (800479c <HAL_DMA_Abort+0x248>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d031      	beq.n	8004762 <HAL_DMA_Abort+0x20e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a27      	ldr	r2, [pc, #156]	; (80047a0 <HAL_DMA_Abort+0x24c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d02c      	beq.n	8004762 <HAL_DMA_Abort+0x20e>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a25      	ldr	r2, [pc, #148]	; (80047a4 <HAL_DMA_Abort+0x250>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d027      	beq.n	8004762 <HAL_DMA_Abort+0x20e>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a24      	ldr	r2, [pc, #144]	; (80047a8 <HAL_DMA_Abort+0x254>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d022      	beq.n	8004762 <HAL_DMA_Abort+0x20e>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a22      	ldr	r2, [pc, #136]	; (80047ac <HAL_DMA_Abort+0x258>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d01d      	beq.n	8004762 <HAL_DMA_Abort+0x20e>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a21      	ldr	r2, [pc, #132]	; (80047b0 <HAL_DMA_Abort+0x25c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d018      	beq.n	8004762 <HAL_DMA_Abort+0x20e>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a1f      	ldr	r2, [pc, #124]	; (80047b4 <HAL_DMA_Abort+0x260>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d013      	beq.n	8004762 <HAL_DMA_Abort+0x20e>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a1e      	ldr	r2, [pc, #120]	; (80047b8 <HAL_DMA_Abort+0x264>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00e      	beq.n	8004762 <HAL_DMA_Abort+0x20e>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a1c      	ldr	r2, [pc, #112]	; (80047bc <HAL_DMA_Abort+0x268>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d009      	beq.n	8004762 <HAL_DMA_Abort+0x20e>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a1b      	ldr	r2, [pc, #108]	; (80047c0 <HAL_DMA_Abort+0x26c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d004      	beq.n	8004762 <HAL_DMA_Abort+0x20e>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a19      	ldr	r2, [pc, #100]	; (80047c4 <HAL_DMA_Abort+0x270>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d132      	bne.n	80047c8 <HAL_DMA_Abort+0x274>
 8004762:	2301      	movs	r3, #1
 8004764:	e031      	b.n	80047ca <HAL_DMA_Abort+0x276>
 8004766:	bf00      	nop
 8004768:	40020010 	.word	0x40020010
 800476c:	40020028 	.word	0x40020028
 8004770:	40020040 	.word	0x40020040
 8004774:	40020058 	.word	0x40020058
 8004778:	40020070 	.word	0x40020070
 800477c:	40020088 	.word	0x40020088
 8004780:	400200a0 	.word	0x400200a0
 8004784:	400200b8 	.word	0x400200b8
 8004788:	40020410 	.word	0x40020410
 800478c:	40020428 	.word	0x40020428
 8004790:	40020440 	.word	0x40020440
 8004794:	40020458 	.word	0x40020458
 8004798:	40020470 	.word	0x40020470
 800479c:	40020488 	.word	0x40020488
 80047a0:	400204a0 	.word	0x400204a0
 80047a4:	400204b8 	.word	0x400204b8
 80047a8:	58025408 	.word	0x58025408
 80047ac:	5802541c 	.word	0x5802541c
 80047b0:	58025430 	.word	0x58025430
 80047b4:	58025444 	.word	0x58025444
 80047b8:	58025458 	.word	0x58025458
 80047bc:	5802546c 	.word	0x5802546c
 80047c0:	58025480 	.word	0x58025480
 80047c4:	58025494 	.word	0x58025494
 80047c8:	2300      	movs	r3, #0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d007      	beq.n	80047de <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a6d      	ldr	r2, [pc, #436]	; (8004998 <HAL_DMA_Abort+0x444>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d04a      	beq.n	800487e <HAL_DMA_Abort+0x32a>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a6b      	ldr	r2, [pc, #428]	; (800499c <HAL_DMA_Abort+0x448>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d045      	beq.n	800487e <HAL_DMA_Abort+0x32a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a6a      	ldr	r2, [pc, #424]	; (80049a0 <HAL_DMA_Abort+0x44c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d040      	beq.n	800487e <HAL_DMA_Abort+0x32a>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a68      	ldr	r2, [pc, #416]	; (80049a4 <HAL_DMA_Abort+0x450>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d03b      	beq.n	800487e <HAL_DMA_Abort+0x32a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a67      	ldr	r2, [pc, #412]	; (80049a8 <HAL_DMA_Abort+0x454>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d036      	beq.n	800487e <HAL_DMA_Abort+0x32a>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a65      	ldr	r2, [pc, #404]	; (80049ac <HAL_DMA_Abort+0x458>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d031      	beq.n	800487e <HAL_DMA_Abort+0x32a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a64      	ldr	r2, [pc, #400]	; (80049b0 <HAL_DMA_Abort+0x45c>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d02c      	beq.n	800487e <HAL_DMA_Abort+0x32a>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a62      	ldr	r2, [pc, #392]	; (80049b4 <HAL_DMA_Abort+0x460>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d027      	beq.n	800487e <HAL_DMA_Abort+0x32a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a61      	ldr	r2, [pc, #388]	; (80049b8 <HAL_DMA_Abort+0x464>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d022      	beq.n	800487e <HAL_DMA_Abort+0x32a>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a5f      	ldr	r2, [pc, #380]	; (80049bc <HAL_DMA_Abort+0x468>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d01d      	beq.n	800487e <HAL_DMA_Abort+0x32a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a5e      	ldr	r2, [pc, #376]	; (80049c0 <HAL_DMA_Abort+0x46c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d018      	beq.n	800487e <HAL_DMA_Abort+0x32a>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a5c      	ldr	r2, [pc, #368]	; (80049c4 <HAL_DMA_Abort+0x470>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d013      	beq.n	800487e <HAL_DMA_Abort+0x32a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a5b      	ldr	r2, [pc, #364]	; (80049c8 <HAL_DMA_Abort+0x474>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00e      	beq.n	800487e <HAL_DMA_Abort+0x32a>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a59      	ldr	r2, [pc, #356]	; (80049cc <HAL_DMA_Abort+0x478>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d009      	beq.n	800487e <HAL_DMA_Abort+0x32a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a58      	ldr	r2, [pc, #352]	; (80049d0 <HAL_DMA_Abort+0x47c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d004      	beq.n	800487e <HAL_DMA_Abort+0x32a>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a56      	ldr	r2, [pc, #344]	; (80049d4 <HAL_DMA_Abort+0x480>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d108      	bne.n	8004890 <HAL_DMA_Abort+0x33c>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0201 	bic.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	e007      	b.n	80048a0 <HAL_DMA_Abort+0x34c>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0201 	bic.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80048a0:	e013      	b.n	80048ca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048a2:	f7fe ff99 	bl	80037d8 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b05      	cmp	r3, #5
 80048ae:	d90c      	bls.n	80048ca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2203      	movs	r2, #3
 80048c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e12d      	b.n	8004b26 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e5      	bne.n	80048a2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a2f      	ldr	r2, [pc, #188]	; (8004998 <HAL_DMA_Abort+0x444>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d04a      	beq.n	8004976 <HAL_DMA_Abort+0x422>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a2d      	ldr	r2, [pc, #180]	; (800499c <HAL_DMA_Abort+0x448>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d045      	beq.n	8004976 <HAL_DMA_Abort+0x422>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a2c      	ldr	r2, [pc, #176]	; (80049a0 <HAL_DMA_Abort+0x44c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d040      	beq.n	8004976 <HAL_DMA_Abort+0x422>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a2a      	ldr	r2, [pc, #168]	; (80049a4 <HAL_DMA_Abort+0x450>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d03b      	beq.n	8004976 <HAL_DMA_Abort+0x422>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a29      	ldr	r2, [pc, #164]	; (80049a8 <HAL_DMA_Abort+0x454>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d036      	beq.n	8004976 <HAL_DMA_Abort+0x422>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a27      	ldr	r2, [pc, #156]	; (80049ac <HAL_DMA_Abort+0x458>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d031      	beq.n	8004976 <HAL_DMA_Abort+0x422>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a26      	ldr	r2, [pc, #152]	; (80049b0 <HAL_DMA_Abort+0x45c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d02c      	beq.n	8004976 <HAL_DMA_Abort+0x422>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a24      	ldr	r2, [pc, #144]	; (80049b4 <HAL_DMA_Abort+0x460>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d027      	beq.n	8004976 <HAL_DMA_Abort+0x422>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a23      	ldr	r2, [pc, #140]	; (80049b8 <HAL_DMA_Abort+0x464>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d022      	beq.n	8004976 <HAL_DMA_Abort+0x422>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a21      	ldr	r2, [pc, #132]	; (80049bc <HAL_DMA_Abort+0x468>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d01d      	beq.n	8004976 <HAL_DMA_Abort+0x422>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a20      	ldr	r2, [pc, #128]	; (80049c0 <HAL_DMA_Abort+0x46c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d018      	beq.n	8004976 <HAL_DMA_Abort+0x422>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a1e      	ldr	r2, [pc, #120]	; (80049c4 <HAL_DMA_Abort+0x470>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d013      	beq.n	8004976 <HAL_DMA_Abort+0x422>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1d      	ldr	r2, [pc, #116]	; (80049c8 <HAL_DMA_Abort+0x474>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d00e      	beq.n	8004976 <HAL_DMA_Abort+0x422>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1b      	ldr	r2, [pc, #108]	; (80049cc <HAL_DMA_Abort+0x478>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d009      	beq.n	8004976 <HAL_DMA_Abort+0x422>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1a      	ldr	r2, [pc, #104]	; (80049d0 <HAL_DMA_Abort+0x47c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d004      	beq.n	8004976 <HAL_DMA_Abort+0x422>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a18      	ldr	r2, [pc, #96]	; (80049d4 <HAL_DMA_Abort+0x480>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d101      	bne.n	800497a <HAL_DMA_Abort+0x426>
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <HAL_DMA_Abort+0x428>
 800497a:	2300      	movs	r3, #0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d02b      	beq.n	80049d8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004984:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498a:	f003 031f 	and.w	r3, r3, #31
 800498e:	223f      	movs	r2, #63	; 0x3f
 8004990:	409a      	lsls	r2, r3
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	609a      	str	r2, [r3, #8]
 8004996:	e02a      	b.n	80049ee <HAL_DMA_Abort+0x49a>
 8004998:	40020010 	.word	0x40020010
 800499c:	40020028 	.word	0x40020028
 80049a0:	40020040 	.word	0x40020040
 80049a4:	40020058 	.word	0x40020058
 80049a8:	40020070 	.word	0x40020070
 80049ac:	40020088 	.word	0x40020088
 80049b0:	400200a0 	.word	0x400200a0
 80049b4:	400200b8 	.word	0x400200b8
 80049b8:	40020410 	.word	0x40020410
 80049bc:	40020428 	.word	0x40020428
 80049c0:	40020440 	.word	0x40020440
 80049c4:	40020458 	.word	0x40020458
 80049c8:	40020470 	.word	0x40020470
 80049cc:	40020488 	.word	0x40020488
 80049d0:	400204a0 	.word	0x400204a0
 80049d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049dc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e2:	f003 031f 	and.w	r3, r3, #31
 80049e6:	2201      	movs	r2, #1
 80049e8:	409a      	lsls	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a4f      	ldr	r2, [pc, #316]	; (8004b30 <HAL_DMA_Abort+0x5dc>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d072      	beq.n	8004ade <HAL_DMA_Abort+0x58a>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a4d      	ldr	r2, [pc, #308]	; (8004b34 <HAL_DMA_Abort+0x5e0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d06d      	beq.n	8004ade <HAL_DMA_Abort+0x58a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a4c      	ldr	r2, [pc, #304]	; (8004b38 <HAL_DMA_Abort+0x5e4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d068      	beq.n	8004ade <HAL_DMA_Abort+0x58a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a4a      	ldr	r2, [pc, #296]	; (8004b3c <HAL_DMA_Abort+0x5e8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d063      	beq.n	8004ade <HAL_DMA_Abort+0x58a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a49      	ldr	r2, [pc, #292]	; (8004b40 <HAL_DMA_Abort+0x5ec>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d05e      	beq.n	8004ade <HAL_DMA_Abort+0x58a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a47      	ldr	r2, [pc, #284]	; (8004b44 <HAL_DMA_Abort+0x5f0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d059      	beq.n	8004ade <HAL_DMA_Abort+0x58a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a46      	ldr	r2, [pc, #280]	; (8004b48 <HAL_DMA_Abort+0x5f4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d054      	beq.n	8004ade <HAL_DMA_Abort+0x58a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a44      	ldr	r2, [pc, #272]	; (8004b4c <HAL_DMA_Abort+0x5f8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d04f      	beq.n	8004ade <HAL_DMA_Abort+0x58a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a43      	ldr	r2, [pc, #268]	; (8004b50 <HAL_DMA_Abort+0x5fc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d04a      	beq.n	8004ade <HAL_DMA_Abort+0x58a>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a41      	ldr	r2, [pc, #260]	; (8004b54 <HAL_DMA_Abort+0x600>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d045      	beq.n	8004ade <HAL_DMA_Abort+0x58a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a40      	ldr	r2, [pc, #256]	; (8004b58 <HAL_DMA_Abort+0x604>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d040      	beq.n	8004ade <HAL_DMA_Abort+0x58a>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a3e      	ldr	r2, [pc, #248]	; (8004b5c <HAL_DMA_Abort+0x608>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d03b      	beq.n	8004ade <HAL_DMA_Abort+0x58a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a3d      	ldr	r2, [pc, #244]	; (8004b60 <HAL_DMA_Abort+0x60c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d036      	beq.n	8004ade <HAL_DMA_Abort+0x58a>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a3b      	ldr	r2, [pc, #236]	; (8004b64 <HAL_DMA_Abort+0x610>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d031      	beq.n	8004ade <HAL_DMA_Abort+0x58a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a3a      	ldr	r2, [pc, #232]	; (8004b68 <HAL_DMA_Abort+0x614>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d02c      	beq.n	8004ade <HAL_DMA_Abort+0x58a>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a38      	ldr	r2, [pc, #224]	; (8004b6c <HAL_DMA_Abort+0x618>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d027      	beq.n	8004ade <HAL_DMA_Abort+0x58a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a37      	ldr	r2, [pc, #220]	; (8004b70 <HAL_DMA_Abort+0x61c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d022      	beq.n	8004ade <HAL_DMA_Abort+0x58a>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a35      	ldr	r2, [pc, #212]	; (8004b74 <HAL_DMA_Abort+0x620>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d01d      	beq.n	8004ade <HAL_DMA_Abort+0x58a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a34      	ldr	r2, [pc, #208]	; (8004b78 <HAL_DMA_Abort+0x624>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d018      	beq.n	8004ade <HAL_DMA_Abort+0x58a>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a32      	ldr	r2, [pc, #200]	; (8004b7c <HAL_DMA_Abort+0x628>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d013      	beq.n	8004ade <HAL_DMA_Abort+0x58a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a31      	ldr	r2, [pc, #196]	; (8004b80 <HAL_DMA_Abort+0x62c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d00e      	beq.n	8004ade <HAL_DMA_Abort+0x58a>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a2f      	ldr	r2, [pc, #188]	; (8004b84 <HAL_DMA_Abort+0x630>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d009      	beq.n	8004ade <HAL_DMA_Abort+0x58a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a2e      	ldr	r2, [pc, #184]	; (8004b88 <HAL_DMA_Abort+0x634>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d004      	beq.n	8004ade <HAL_DMA_Abort+0x58a>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a2c      	ldr	r2, [pc, #176]	; (8004b8c <HAL_DMA_Abort+0x638>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d101      	bne.n	8004ae2 <HAL_DMA_Abort+0x58e>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <HAL_DMA_Abort+0x590>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d015      	beq.n	8004b14 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004af0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00c      	beq.n	8004b14 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b08:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004b12:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	40020010 	.word	0x40020010
 8004b34:	40020028 	.word	0x40020028
 8004b38:	40020040 	.word	0x40020040
 8004b3c:	40020058 	.word	0x40020058
 8004b40:	40020070 	.word	0x40020070
 8004b44:	40020088 	.word	0x40020088
 8004b48:	400200a0 	.word	0x400200a0
 8004b4c:	400200b8 	.word	0x400200b8
 8004b50:	40020410 	.word	0x40020410
 8004b54:	40020428 	.word	0x40020428
 8004b58:	40020440 	.word	0x40020440
 8004b5c:	40020458 	.word	0x40020458
 8004b60:	40020470 	.word	0x40020470
 8004b64:	40020488 	.word	0x40020488
 8004b68:	400204a0 	.word	0x400204a0
 8004b6c:	400204b8 	.word	0x400204b8
 8004b70:	58025408 	.word	0x58025408
 8004b74:	5802541c 	.word	0x5802541c
 8004b78:	58025430 	.word	0x58025430
 8004b7c:	58025444 	.word	0x58025444
 8004b80:	58025458 	.word	0x58025458
 8004b84:	5802546c 	.word	0x5802546c
 8004b88:	58025480 	.word	0x58025480
 8004b8c:	58025494 	.word	0x58025494

08004b90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e205      	b.n	8004fae <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d004      	beq.n	8004bb8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2280      	movs	r2, #128	; 0x80
 8004bb2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e1fa      	b.n	8004fae <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a8c      	ldr	r2, [pc, #560]	; (8004df0 <HAL_DMA_Abort_IT+0x260>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d04a      	beq.n	8004c58 <HAL_DMA_Abort_IT+0xc8>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a8b      	ldr	r2, [pc, #556]	; (8004df4 <HAL_DMA_Abort_IT+0x264>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d045      	beq.n	8004c58 <HAL_DMA_Abort_IT+0xc8>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a89      	ldr	r2, [pc, #548]	; (8004df8 <HAL_DMA_Abort_IT+0x268>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d040      	beq.n	8004c58 <HAL_DMA_Abort_IT+0xc8>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a88      	ldr	r2, [pc, #544]	; (8004dfc <HAL_DMA_Abort_IT+0x26c>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d03b      	beq.n	8004c58 <HAL_DMA_Abort_IT+0xc8>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a86      	ldr	r2, [pc, #536]	; (8004e00 <HAL_DMA_Abort_IT+0x270>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d036      	beq.n	8004c58 <HAL_DMA_Abort_IT+0xc8>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a85      	ldr	r2, [pc, #532]	; (8004e04 <HAL_DMA_Abort_IT+0x274>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d031      	beq.n	8004c58 <HAL_DMA_Abort_IT+0xc8>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a83      	ldr	r2, [pc, #524]	; (8004e08 <HAL_DMA_Abort_IT+0x278>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d02c      	beq.n	8004c58 <HAL_DMA_Abort_IT+0xc8>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a82      	ldr	r2, [pc, #520]	; (8004e0c <HAL_DMA_Abort_IT+0x27c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d027      	beq.n	8004c58 <HAL_DMA_Abort_IT+0xc8>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a80      	ldr	r2, [pc, #512]	; (8004e10 <HAL_DMA_Abort_IT+0x280>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d022      	beq.n	8004c58 <HAL_DMA_Abort_IT+0xc8>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a7f      	ldr	r2, [pc, #508]	; (8004e14 <HAL_DMA_Abort_IT+0x284>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d01d      	beq.n	8004c58 <HAL_DMA_Abort_IT+0xc8>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a7d      	ldr	r2, [pc, #500]	; (8004e18 <HAL_DMA_Abort_IT+0x288>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d018      	beq.n	8004c58 <HAL_DMA_Abort_IT+0xc8>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a7c      	ldr	r2, [pc, #496]	; (8004e1c <HAL_DMA_Abort_IT+0x28c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d013      	beq.n	8004c58 <HAL_DMA_Abort_IT+0xc8>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a7a      	ldr	r2, [pc, #488]	; (8004e20 <HAL_DMA_Abort_IT+0x290>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d00e      	beq.n	8004c58 <HAL_DMA_Abort_IT+0xc8>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a79      	ldr	r2, [pc, #484]	; (8004e24 <HAL_DMA_Abort_IT+0x294>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d009      	beq.n	8004c58 <HAL_DMA_Abort_IT+0xc8>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a77      	ldr	r2, [pc, #476]	; (8004e28 <HAL_DMA_Abort_IT+0x298>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d004      	beq.n	8004c58 <HAL_DMA_Abort_IT+0xc8>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a76      	ldr	r2, [pc, #472]	; (8004e2c <HAL_DMA_Abort_IT+0x29c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d101      	bne.n	8004c5c <HAL_DMA_Abort_IT+0xcc>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e000      	b.n	8004c5e <HAL_DMA_Abort_IT+0xce>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d065      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2204      	movs	r2, #4
 8004c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a60      	ldr	r2, [pc, #384]	; (8004df0 <HAL_DMA_Abort_IT+0x260>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d04a      	beq.n	8004d0a <HAL_DMA_Abort_IT+0x17a>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a5e      	ldr	r2, [pc, #376]	; (8004df4 <HAL_DMA_Abort_IT+0x264>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d045      	beq.n	8004d0a <HAL_DMA_Abort_IT+0x17a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a5d      	ldr	r2, [pc, #372]	; (8004df8 <HAL_DMA_Abort_IT+0x268>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d040      	beq.n	8004d0a <HAL_DMA_Abort_IT+0x17a>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a5b      	ldr	r2, [pc, #364]	; (8004dfc <HAL_DMA_Abort_IT+0x26c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d03b      	beq.n	8004d0a <HAL_DMA_Abort_IT+0x17a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a5a      	ldr	r2, [pc, #360]	; (8004e00 <HAL_DMA_Abort_IT+0x270>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d036      	beq.n	8004d0a <HAL_DMA_Abort_IT+0x17a>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a58      	ldr	r2, [pc, #352]	; (8004e04 <HAL_DMA_Abort_IT+0x274>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d031      	beq.n	8004d0a <HAL_DMA_Abort_IT+0x17a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a57      	ldr	r2, [pc, #348]	; (8004e08 <HAL_DMA_Abort_IT+0x278>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d02c      	beq.n	8004d0a <HAL_DMA_Abort_IT+0x17a>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a55      	ldr	r2, [pc, #340]	; (8004e0c <HAL_DMA_Abort_IT+0x27c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d027      	beq.n	8004d0a <HAL_DMA_Abort_IT+0x17a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a54      	ldr	r2, [pc, #336]	; (8004e10 <HAL_DMA_Abort_IT+0x280>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d022      	beq.n	8004d0a <HAL_DMA_Abort_IT+0x17a>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a52      	ldr	r2, [pc, #328]	; (8004e14 <HAL_DMA_Abort_IT+0x284>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d01d      	beq.n	8004d0a <HAL_DMA_Abort_IT+0x17a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a51      	ldr	r2, [pc, #324]	; (8004e18 <HAL_DMA_Abort_IT+0x288>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d018      	beq.n	8004d0a <HAL_DMA_Abort_IT+0x17a>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a4f      	ldr	r2, [pc, #316]	; (8004e1c <HAL_DMA_Abort_IT+0x28c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d013      	beq.n	8004d0a <HAL_DMA_Abort_IT+0x17a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a4e      	ldr	r2, [pc, #312]	; (8004e20 <HAL_DMA_Abort_IT+0x290>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d00e      	beq.n	8004d0a <HAL_DMA_Abort_IT+0x17a>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a4c      	ldr	r2, [pc, #304]	; (8004e24 <HAL_DMA_Abort_IT+0x294>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d009      	beq.n	8004d0a <HAL_DMA_Abort_IT+0x17a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a4b      	ldr	r2, [pc, #300]	; (8004e28 <HAL_DMA_Abort_IT+0x298>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d004      	beq.n	8004d0a <HAL_DMA_Abort_IT+0x17a>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a49      	ldr	r2, [pc, #292]	; (8004e2c <HAL_DMA_Abort_IT+0x29c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d108      	bne.n	8004d1c <HAL_DMA_Abort_IT+0x18c>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0201 	bic.w	r2, r2, #1
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	e147      	b.n	8004fac <HAL_DMA_Abort_IT+0x41c>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0201 	bic.w	r2, r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	e13e      	b.n	8004fac <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 020e 	bic.w	r2, r2, #14
 8004d3c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a2b      	ldr	r2, [pc, #172]	; (8004df0 <HAL_DMA_Abort_IT+0x260>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d04a      	beq.n	8004dde <HAL_DMA_Abort_IT+0x24e>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a29      	ldr	r2, [pc, #164]	; (8004df4 <HAL_DMA_Abort_IT+0x264>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d045      	beq.n	8004dde <HAL_DMA_Abort_IT+0x24e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a28      	ldr	r2, [pc, #160]	; (8004df8 <HAL_DMA_Abort_IT+0x268>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d040      	beq.n	8004dde <HAL_DMA_Abort_IT+0x24e>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a26      	ldr	r2, [pc, #152]	; (8004dfc <HAL_DMA_Abort_IT+0x26c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d03b      	beq.n	8004dde <HAL_DMA_Abort_IT+0x24e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a25      	ldr	r2, [pc, #148]	; (8004e00 <HAL_DMA_Abort_IT+0x270>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d036      	beq.n	8004dde <HAL_DMA_Abort_IT+0x24e>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a23      	ldr	r2, [pc, #140]	; (8004e04 <HAL_DMA_Abort_IT+0x274>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d031      	beq.n	8004dde <HAL_DMA_Abort_IT+0x24e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a22      	ldr	r2, [pc, #136]	; (8004e08 <HAL_DMA_Abort_IT+0x278>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d02c      	beq.n	8004dde <HAL_DMA_Abort_IT+0x24e>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a20      	ldr	r2, [pc, #128]	; (8004e0c <HAL_DMA_Abort_IT+0x27c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d027      	beq.n	8004dde <HAL_DMA_Abort_IT+0x24e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a1f      	ldr	r2, [pc, #124]	; (8004e10 <HAL_DMA_Abort_IT+0x280>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d022      	beq.n	8004dde <HAL_DMA_Abort_IT+0x24e>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a1d      	ldr	r2, [pc, #116]	; (8004e14 <HAL_DMA_Abort_IT+0x284>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d01d      	beq.n	8004dde <HAL_DMA_Abort_IT+0x24e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a1c      	ldr	r2, [pc, #112]	; (8004e18 <HAL_DMA_Abort_IT+0x288>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d018      	beq.n	8004dde <HAL_DMA_Abort_IT+0x24e>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a1a      	ldr	r2, [pc, #104]	; (8004e1c <HAL_DMA_Abort_IT+0x28c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d013      	beq.n	8004dde <HAL_DMA_Abort_IT+0x24e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a19      	ldr	r2, [pc, #100]	; (8004e20 <HAL_DMA_Abort_IT+0x290>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00e      	beq.n	8004dde <HAL_DMA_Abort_IT+0x24e>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a17      	ldr	r2, [pc, #92]	; (8004e24 <HAL_DMA_Abort_IT+0x294>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d009      	beq.n	8004dde <HAL_DMA_Abort_IT+0x24e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a16      	ldr	r2, [pc, #88]	; (8004e28 <HAL_DMA_Abort_IT+0x298>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d004      	beq.n	8004dde <HAL_DMA_Abort_IT+0x24e>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a14      	ldr	r2, [pc, #80]	; (8004e2c <HAL_DMA_Abort_IT+0x29c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d128      	bne.n	8004e30 <HAL_DMA_Abort_IT+0x2a0>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0201 	bic.w	r2, r2, #1
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	e027      	b.n	8004e40 <HAL_DMA_Abort_IT+0x2b0>
 8004df0:	40020010 	.word	0x40020010
 8004df4:	40020028 	.word	0x40020028
 8004df8:	40020040 	.word	0x40020040
 8004dfc:	40020058 	.word	0x40020058
 8004e00:	40020070 	.word	0x40020070
 8004e04:	40020088 	.word	0x40020088
 8004e08:	400200a0 	.word	0x400200a0
 8004e0c:	400200b8 	.word	0x400200b8
 8004e10:	40020410 	.word	0x40020410
 8004e14:	40020428 	.word	0x40020428
 8004e18:	40020440 	.word	0x40020440
 8004e1c:	40020458 	.word	0x40020458
 8004e20:	40020470 	.word	0x40020470
 8004e24:	40020488 	.word	0x40020488
 8004e28:	400204a0 	.word	0x400204a0
 8004e2c:	400204b8 	.word	0x400204b8
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0201 	bic.w	r2, r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a5c      	ldr	r2, [pc, #368]	; (8004fb8 <HAL_DMA_Abort_IT+0x428>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d072      	beq.n	8004f30 <HAL_DMA_Abort_IT+0x3a0>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a5b      	ldr	r2, [pc, #364]	; (8004fbc <HAL_DMA_Abort_IT+0x42c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d06d      	beq.n	8004f30 <HAL_DMA_Abort_IT+0x3a0>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a59      	ldr	r2, [pc, #356]	; (8004fc0 <HAL_DMA_Abort_IT+0x430>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d068      	beq.n	8004f30 <HAL_DMA_Abort_IT+0x3a0>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a58      	ldr	r2, [pc, #352]	; (8004fc4 <HAL_DMA_Abort_IT+0x434>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d063      	beq.n	8004f30 <HAL_DMA_Abort_IT+0x3a0>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a56      	ldr	r2, [pc, #344]	; (8004fc8 <HAL_DMA_Abort_IT+0x438>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d05e      	beq.n	8004f30 <HAL_DMA_Abort_IT+0x3a0>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a55      	ldr	r2, [pc, #340]	; (8004fcc <HAL_DMA_Abort_IT+0x43c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d059      	beq.n	8004f30 <HAL_DMA_Abort_IT+0x3a0>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a53      	ldr	r2, [pc, #332]	; (8004fd0 <HAL_DMA_Abort_IT+0x440>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d054      	beq.n	8004f30 <HAL_DMA_Abort_IT+0x3a0>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a52      	ldr	r2, [pc, #328]	; (8004fd4 <HAL_DMA_Abort_IT+0x444>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d04f      	beq.n	8004f30 <HAL_DMA_Abort_IT+0x3a0>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a50      	ldr	r2, [pc, #320]	; (8004fd8 <HAL_DMA_Abort_IT+0x448>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d04a      	beq.n	8004f30 <HAL_DMA_Abort_IT+0x3a0>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a4f      	ldr	r2, [pc, #316]	; (8004fdc <HAL_DMA_Abort_IT+0x44c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d045      	beq.n	8004f30 <HAL_DMA_Abort_IT+0x3a0>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a4d      	ldr	r2, [pc, #308]	; (8004fe0 <HAL_DMA_Abort_IT+0x450>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d040      	beq.n	8004f30 <HAL_DMA_Abort_IT+0x3a0>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a4c      	ldr	r2, [pc, #304]	; (8004fe4 <HAL_DMA_Abort_IT+0x454>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d03b      	beq.n	8004f30 <HAL_DMA_Abort_IT+0x3a0>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a4a      	ldr	r2, [pc, #296]	; (8004fe8 <HAL_DMA_Abort_IT+0x458>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d036      	beq.n	8004f30 <HAL_DMA_Abort_IT+0x3a0>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a49      	ldr	r2, [pc, #292]	; (8004fec <HAL_DMA_Abort_IT+0x45c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d031      	beq.n	8004f30 <HAL_DMA_Abort_IT+0x3a0>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a47      	ldr	r2, [pc, #284]	; (8004ff0 <HAL_DMA_Abort_IT+0x460>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d02c      	beq.n	8004f30 <HAL_DMA_Abort_IT+0x3a0>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a46      	ldr	r2, [pc, #280]	; (8004ff4 <HAL_DMA_Abort_IT+0x464>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d027      	beq.n	8004f30 <HAL_DMA_Abort_IT+0x3a0>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a44      	ldr	r2, [pc, #272]	; (8004ff8 <HAL_DMA_Abort_IT+0x468>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d022      	beq.n	8004f30 <HAL_DMA_Abort_IT+0x3a0>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a43      	ldr	r2, [pc, #268]	; (8004ffc <HAL_DMA_Abort_IT+0x46c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d01d      	beq.n	8004f30 <HAL_DMA_Abort_IT+0x3a0>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a41      	ldr	r2, [pc, #260]	; (8005000 <HAL_DMA_Abort_IT+0x470>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d018      	beq.n	8004f30 <HAL_DMA_Abort_IT+0x3a0>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a40      	ldr	r2, [pc, #256]	; (8005004 <HAL_DMA_Abort_IT+0x474>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d013      	beq.n	8004f30 <HAL_DMA_Abort_IT+0x3a0>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a3e      	ldr	r2, [pc, #248]	; (8005008 <HAL_DMA_Abort_IT+0x478>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00e      	beq.n	8004f30 <HAL_DMA_Abort_IT+0x3a0>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a3d      	ldr	r2, [pc, #244]	; (800500c <HAL_DMA_Abort_IT+0x47c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d009      	beq.n	8004f30 <HAL_DMA_Abort_IT+0x3a0>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a3b      	ldr	r2, [pc, #236]	; (8005010 <HAL_DMA_Abort_IT+0x480>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d004      	beq.n	8004f30 <HAL_DMA_Abort_IT+0x3a0>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a3a      	ldr	r2, [pc, #232]	; (8005014 <HAL_DMA_Abort_IT+0x484>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d101      	bne.n	8004f34 <HAL_DMA_Abort_IT+0x3a4>
 8004f30:	2301      	movs	r3, #1
 8004f32:	e000      	b.n	8004f36 <HAL_DMA_Abort_IT+0x3a6>
 8004f34:	2300      	movs	r3, #0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d028      	beq.n	8004f8c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f48:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f54:	f003 031f 	and.w	r3, r3, #31
 8004f58:	2201      	movs	r2, #1
 8004f5a:	409a      	lsls	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f68:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00c      	beq.n	8004f8c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f80:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f8a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d003      	beq.n	8004fac <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40020010 	.word	0x40020010
 8004fbc:	40020028 	.word	0x40020028
 8004fc0:	40020040 	.word	0x40020040
 8004fc4:	40020058 	.word	0x40020058
 8004fc8:	40020070 	.word	0x40020070
 8004fcc:	40020088 	.word	0x40020088
 8004fd0:	400200a0 	.word	0x400200a0
 8004fd4:	400200b8 	.word	0x400200b8
 8004fd8:	40020410 	.word	0x40020410
 8004fdc:	40020428 	.word	0x40020428
 8004fe0:	40020440 	.word	0x40020440
 8004fe4:	40020458 	.word	0x40020458
 8004fe8:	40020470 	.word	0x40020470
 8004fec:	40020488 	.word	0x40020488
 8004ff0:	400204a0 	.word	0x400204a0
 8004ff4:	400204b8 	.word	0x400204b8
 8004ff8:	58025408 	.word	0x58025408
 8004ffc:	5802541c 	.word	0x5802541c
 8005000:	58025430 	.word	0x58025430
 8005004:	58025444 	.word	0x58025444
 8005008:	58025458 	.word	0x58025458
 800500c:	5802546c 	.word	0x5802546c
 8005010:	58025480 	.word	0x58025480
 8005014:	58025494 	.word	0x58025494

08005018 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b08a      	sub	sp, #40	; 0x28
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005024:	4b67      	ldr	r3, [pc, #412]	; (80051c4 <HAL_DMA_IRQHandler+0x1ac>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a67      	ldr	r2, [pc, #412]	; (80051c8 <HAL_DMA_IRQHandler+0x1b0>)
 800502a:	fba2 2303 	umull	r2, r3, r2, r3
 800502e:	0a9b      	lsrs	r3, r3, #10
 8005030:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005036:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a5f      	ldr	r2, [pc, #380]	; (80051cc <HAL_DMA_IRQHandler+0x1b4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d04a      	beq.n	80050ea <HAL_DMA_IRQHandler+0xd2>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a5d      	ldr	r2, [pc, #372]	; (80051d0 <HAL_DMA_IRQHandler+0x1b8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d045      	beq.n	80050ea <HAL_DMA_IRQHandler+0xd2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a5c      	ldr	r2, [pc, #368]	; (80051d4 <HAL_DMA_IRQHandler+0x1bc>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d040      	beq.n	80050ea <HAL_DMA_IRQHandler+0xd2>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a5a      	ldr	r2, [pc, #360]	; (80051d8 <HAL_DMA_IRQHandler+0x1c0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d03b      	beq.n	80050ea <HAL_DMA_IRQHandler+0xd2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a59      	ldr	r2, [pc, #356]	; (80051dc <HAL_DMA_IRQHandler+0x1c4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d036      	beq.n	80050ea <HAL_DMA_IRQHandler+0xd2>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a57      	ldr	r2, [pc, #348]	; (80051e0 <HAL_DMA_IRQHandler+0x1c8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d031      	beq.n	80050ea <HAL_DMA_IRQHandler+0xd2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a56      	ldr	r2, [pc, #344]	; (80051e4 <HAL_DMA_IRQHandler+0x1cc>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d02c      	beq.n	80050ea <HAL_DMA_IRQHandler+0xd2>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a54      	ldr	r2, [pc, #336]	; (80051e8 <HAL_DMA_IRQHandler+0x1d0>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d027      	beq.n	80050ea <HAL_DMA_IRQHandler+0xd2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a53      	ldr	r2, [pc, #332]	; (80051ec <HAL_DMA_IRQHandler+0x1d4>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d022      	beq.n	80050ea <HAL_DMA_IRQHandler+0xd2>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a51      	ldr	r2, [pc, #324]	; (80051f0 <HAL_DMA_IRQHandler+0x1d8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d01d      	beq.n	80050ea <HAL_DMA_IRQHandler+0xd2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a50      	ldr	r2, [pc, #320]	; (80051f4 <HAL_DMA_IRQHandler+0x1dc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d018      	beq.n	80050ea <HAL_DMA_IRQHandler+0xd2>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a4e      	ldr	r2, [pc, #312]	; (80051f8 <HAL_DMA_IRQHandler+0x1e0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d013      	beq.n	80050ea <HAL_DMA_IRQHandler+0xd2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a4d      	ldr	r2, [pc, #308]	; (80051fc <HAL_DMA_IRQHandler+0x1e4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00e      	beq.n	80050ea <HAL_DMA_IRQHandler+0xd2>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a4b      	ldr	r2, [pc, #300]	; (8005200 <HAL_DMA_IRQHandler+0x1e8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d009      	beq.n	80050ea <HAL_DMA_IRQHandler+0xd2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a4a      	ldr	r2, [pc, #296]	; (8005204 <HAL_DMA_IRQHandler+0x1ec>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d004      	beq.n	80050ea <HAL_DMA_IRQHandler+0xd2>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a48      	ldr	r2, [pc, #288]	; (8005208 <HAL_DMA_IRQHandler+0x1f0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d101      	bne.n	80050ee <HAL_DMA_IRQHandler+0xd6>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e000      	b.n	80050f0 <HAL_DMA_IRQHandler+0xd8>
 80050ee:	2300      	movs	r3, #0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 842b 	beq.w	800594c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fa:	f003 031f 	and.w	r3, r3, #31
 80050fe:	2208      	movs	r2, #8
 8005100:	409a      	lsls	r2, r3
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	4013      	ands	r3, r2
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 80a2 	beq.w	8005250 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a2e      	ldr	r2, [pc, #184]	; (80051cc <HAL_DMA_IRQHandler+0x1b4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d04a      	beq.n	80051ac <HAL_DMA_IRQHandler+0x194>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a2d      	ldr	r2, [pc, #180]	; (80051d0 <HAL_DMA_IRQHandler+0x1b8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d045      	beq.n	80051ac <HAL_DMA_IRQHandler+0x194>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a2b      	ldr	r2, [pc, #172]	; (80051d4 <HAL_DMA_IRQHandler+0x1bc>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d040      	beq.n	80051ac <HAL_DMA_IRQHandler+0x194>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a2a      	ldr	r2, [pc, #168]	; (80051d8 <HAL_DMA_IRQHandler+0x1c0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d03b      	beq.n	80051ac <HAL_DMA_IRQHandler+0x194>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a28      	ldr	r2, [pc, #160]	; (80051dc <HAL_DMA_IRQHandler+0x1c4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d036      	beq.n	80051ac <HAL_DMA_IRQHandler+0x194>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a27      	ldr	r2, [pc, #156]	; (80051e0 <HAL_DMA_IRQHandler+0x1c8>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d031      	beq.n	80051ac <HAL_DMA_IRQHandler+0x194>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a25      	ldr	r2, [pc, #148]	; (80051e4 <HAL_DMA_IRQHandler+0x1cc>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d02c      	beq.n	80051ac <HAL_DMA_IRQHandler+0x194>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a24      	ldr	r2, [pc, #144]	; (80051e8 <HAL_DMA_IRQHandler+0x1d0>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d027      	beq.n	80051ac <HAL_DMA_IRQHandler+0x194>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a22      	ldr	r2, [pc, #136]	; (80051ec <HAL_DMA_IRQHandler+0x1d4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d022      	beq.n	80051ac <HAL_DMA_IRQHandler+0x194>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a21      	ldr	r2, [pc, #132]	; (80051f0 <HAL_DMA_IRQHandler+0x1d8>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d01d      	beq.n	80051ac <HAL_DMA_IRQHandler+0x194>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a1f      	ldr	r2, [pc, #124]	; (80051f4 <HAL_DMA_IRQHandler+0x1dc>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d018      	beq.n	80051ac <HAL_DMA_IRQHandler+0x194>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a1e      	ldr	r2, [pc, #120]	; (80051f8 <HAL_DMA_IRQHandler+0x1e0>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d013      	beq.n	80051ac <HAL_DMA_IRQHandler+0x194>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a1c      	ldr	r2, [pc, #112]	; (80051fc <HAL_DMA_IRQHandler+0x1e4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00e      	beq.n	80051ac <HAL_DMA_IRQHandler+0x194>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a1b      	ldr	r2, [pc, #108]	; (8005200 <HAL_DMA_IRQHandler+0x1e8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d009      	beq.n	80051ac <HAL_DMA_IRQHandler+0x194>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a19      	ldr	r2, [pc, #100]	; (8005204 <HAL_DMA_IRQHandler+0x1ec>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d004      	beq.n	80051ac <HAL_DMA_IRQHandler+0x194>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a18      	ldr	r2, [pc, #96]	; (8005208 <HAL_DMA_IRQHandler+0x1f0>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d12f      	bne.n	800520c <HAL_DMA_IRQHandler+0x1f4>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	bf14      	ite	ne
 80051ba:	2301      	movne	r3, #1
 80051bc:	2300      	moveq	r3, #0
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	e02e      	b.n	8005220 <HAL_DMA_IRQHandler+0x208>
 80051c2:	bf00      	nop
 80051c4:	20000000 	.word	0x20000000
 80051c8:	1b4e81b5 	.word	0x1b4e81b5
 80051cc:	40020010 	.word	0x40020010
 80051d0:	40020028 	.word	0x40020028
 80051d4:	40020040 	.word	0x40020040
 80051d8:	40020058 	.word	0x40020058
 80051dc:	40020070 	.word	0x40020070
 80051e0:	40020088 	.word	0x40020088
 80051e4:	400200a0 	.word	0x400200a0
 80051e8:	400200b8 	.word	0x400200b8
 80051ec:	40020410 	.word	0x40020410
 80051f0:	40020428 	.word	0x40020428
 80051f4:	40020440 	.word	0x40020440
 80051f8:	40020458 	.word	0x40020458
 80051fc:	40020470 	.word	0x40020470
 8005200:	40020488 	.word	0x40020488
 8005204:	400204a0 	.word	0x400204a0
 8005208:	400204b8 	.word	0x400204b8
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b00      	cmp	r3, #0
 8005218:	bf14      	ite	ne
 800521a:	2301      	movne	r3, #1
 800521c:	2300      	moveq	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d015      	beq.n	8005250 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0204 	bic.w	r2, r2, #4
 8005232:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005238:	f003 031f 	and.w	r3, r3, #31
 800523c:	2208      	movs	r2, #8
 800523e:	409a      	lsls	r2, r3
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005248:	f043 0201 	orr.w	r2, r3, #1
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005254:	f003 031f 	and.w	r3, r3, #31
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	fa22 f303 	lsr.w	r3, r2, r3
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d06e      	beq.n	8005344 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a69      	ldr	r2, [pc, #420]	; (8005410 <HAL_DMA_IRQHandler+0x3f8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d04a      	beq.n	8005306 <HAL_DMA_IRQHandler+0x2ee>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a67      	ldr	r2, [pc, #412]	; (8005414 <HAL_DMA_IRQHandler+0x3fc>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d045      	beq.n	8005306 <HAL_DMA_IRQHandler+0x2ee>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a66      	ldr	r2, [pc, #408]	; (8005418 <HAL_DMA_IRQHandler+0x400>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d040      	beq.n	8005306 <HAL_DMA_IRQHandler+0x2ee>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a64      	ldr	r2, [pc, #400]	; (800541c <HAL_DMA_IRQHandler+0x404>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d03b      	beq.n	8005306 <HAL_DMA_IRQHandler+0x2ee>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a63      	ldr	r2, [pc, #396]	; (8005420 <HAL_DMA_IRQHandler+0x408>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d036      	beq.n	8005306 <HAL_DMA_IRQHandler+0x2ee>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a61      	ldr	r2, [pc, #388]	; (8005424 <HAL_DMA_IRQHandler+0x40c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d031      	beq.n	8005306 <HAL_DMA_IRQHandler+0x2ee>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a60      	ldr	r2, [pc, #384]	; (8005428 <HAL_DMA_IRQHandler+0x410>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d02c      	beq.n	8005306 <HAL_DMA_IRQHandler+0x2ee>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a5e      	ldr	r2, [pc, #376]	; (800542c <HAL_DMA_IRQHandler+0x414>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d027      	beq.n	8005306 <HAL_DMA_IRQHandler+0x2ee>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a5d      	ldr	r2, [pc, #372]	; (8005430 <HAL_DMA_IRQHandler+0x418>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d022      	beq.n	8005306 <HAL_DMA_IRQHandler+0x2ee>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a5b      	ldr	r2, [pc, #364]	; (8005434 <HAL_DMA_IRQHandler+0x41c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d01d      	beq.n	8005306 <HAL_DMA_IRQHandler+0x2ee>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a5a      	ldr	r2, [pc, #360]	; (8005438 <HAL_DMA_IRQHandler+0x420>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d018      	beq.n	8005306 <HAL_DMA_IRQHandler+0x2ee>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a58      	ldr	r2, [pc, #352]	; (800543c <HAL_DMA_IRQHandler+0x424>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d013      	beq.n	8005306 <HAL_DMA_IRQHandler+0x2ee>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a57      	ldr	r2, [pc, #348]	; (8005440 <HAL_DMA_IRQHandler+0x428>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d00e      	beq.n	8005306 <HAL_DMA_IRQHandler+0x2ee>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a55      	ldr	r2, [pc, #340]	; (8005444 <HAL_DMA_IRQHandler+0x42c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d009      	beq.n	8005306 <HAL_DMA_IRQHandler+0x2ee>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a54      	ldr	r2, [pc, #336]	; (8005448 <HAL_DMA_IRQHandler+0x430>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d004      	beq.n	8005306 <HAL_DMA_IRQHandler+0x2ee>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a52      	ldr	r2, [pc, #328]	; (800544c <HAL_DMA_IRQHandler+0x434>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d10a      	bne.n	800531c <HAL_DMA_IRQHandler+0x304>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005310:	2b00      	cmp	r3, #0
 8005312:	bf14      	ite	ne
 8005314:	2301      	movne	r3, #1
 8005316:	2300      	moveq	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	e003      	b.n	8005324 <HAL_DMA_IRQHandler+0x30c>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2300      	movs	r3, #0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00d      	beq.n	8005344 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532c:	f003 031f 	and.w	r3, r3, #31
 8005330:	2201      	movs	r2, #1
 8005332:	409a      	lsls	r2, r3
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533c:	f043 0202 	orr.w	r2, r3, #2
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005348:	f003 031f 	and.w	r3, r3, #31
 800534c:	2204      	movs	r2, #4
 800534e:	409a      	lsls	r2, r3
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	4013      	ands	r3, r2
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 808f 	beq.w	8005478 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a2c      	ldr	r2, [pc, #176]	; (8005410 <HAL_DMA_IRQHandler+0x3f8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d04a      	beq.n	80053fa <HAL_DMA_IRQHandler+0x3e2>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a2a      	ldr	r2, [pc, #168]	; (8005414 <HAL_DMA_IRQHandler+0x3fc>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d045      	beq.n	80053fa <HAL_DMA_IRQHandler+0x3e2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a29      	ldr	r2, [pc, #164]	; (8005418 <HAL_DMA_IRQHandler+0x400>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d040      	beq.n	80053fa <HAL_DMA_IRQHandler+0x3e2>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a27      	ldr	r2, [pc, #156]	; (800541c <HAL_DMA_IRQHandler+0x404>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d03b      	beq.n	80053fa <HAL_DMA_IRQHandler+0x3e2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a26      	ldr	r2, [pc, #152]	; (8005420 <HAL_DMA_IRQHandler+0x408>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d036      	beq.n	80053fa <HAL_DMA_IRQHandler+0x3e2>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a24      	ldr	r2, [pc, #144]	; (8005424 <HAL_DMA_IRQHandler+0x40c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d031      	beq.n	80053fa <HAL_DMA_IRQHandler+0x3e2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a23      	ldr	r2, [pc, #140]	; (8005428 <HAL_DMA_IRQHandler+0x410>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d02c      	beq.n	80053fa <HAL_DMA_IRQHandler+0x3e2>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a21      	ldr	r2, [pc, #132]	; (800542c <HAL_DMA_IRQHandler+0x414>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d027      	beq.n	80053fa <HAL_DMA_IRQHandler+0x3e2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a20      	ldr	r2, [pc, #128]	; (8005430 <HAL_DMA_IRQHandler+0x418>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d022      	beq.n	80053fa <HAL_DMA_IRQHandler+0x3e2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a1e      	ldr	r2, [pc, #120]	; (8005434 <HAL_DMA_IRQHandler+0x41c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d01d      	beq.n	80053fa <HAL_DMA_IRQHandler+0x3e2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1d      	ldr	r2, [pc, #116]	; (8005438 <HAL_DMA_IRQHandler+0x420>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d018      	beq.n	80053fa <HAL_DMA_IRQHandler+0x3e2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1b      	ldr	r2, [pc, #108]	; (800543c <HAL_DMA_IRQHandler+0x424>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d013      	beq.n	80053fa <HAL_DMA_IRQHandler+0x3e2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a1a      	ldr	r2, [pc, #104]	; (8005440 <HAL_DMA_IRQHandler+0x428>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00e      	beq.n	80053fa <HAL_DMA_IRQHandler+0x3e2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a18      	ldr	r2, [pc, #96]	; (8005444 <HAL_DMA_IRQHandler+0x42c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d009      	beq.n	80053fa <HAL_DMA_IRQHandler+0x3e2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a17      	ldr	r2, [pc, #92]	; (8005448 <HAL_DMA_IRQHandler+0x430>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d004      	beq.n	80053fa <HAL_DMA_IRQHandler+0x3e2>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a15      	ldr	r2, [pc, #84]	; (800544c <HAL_DMA_IRQHandler+0x434>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d12a      	bne.n	8005450 <HAL_DMA_IRQHandler+0x438>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	bf14      	ite	ne
 8005408:	2301      	movne	r3, #1
 800540a:	2300      	moveq	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	e023      	b.n	8005458 <HAL_DMA_IRQHandler+0x440>
 8005410:	40020010 	.word	0x40020010
 8005414:	40020028 	.word	0x40020028
 8005418:	40020040 	.word	0x40020040
 800541c:	40020058 	.word	0x40020058
 8005420:	40020070 	.word	0x40020070
 8005424:	40020088 	.word	0x40020088
 8005428:	400200a0 	.word	0x400200a0
 800542c:	400200b8 	.word	0x400200b8
 8005430:	40020410 	.word	0x40020410
 8005434:	40020428 	.word	0x40020428
 8005438:	40020440 	.word	0x40020440
 800543c:	40020458 	.word	0x40020458
 8005440:	40020470 	.word	0x40020470
 8005444:	40020488 	.word	0x40020488
 8005448:	400204a0 	.word	0x400204a0
 800544c:	400204b8 	.word	0x400204b8
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2300      	movs	r3, #0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00d      	beq.n	8005478 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005460:	f003 031f 	and.w	r3, r3, #31
 8005464:	2204      	movs	r2, #4
 8005466:	409a      	lsls	r2, r3
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005470:	f043 0204 	orr.w	r2, r3, #4
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800547c:	f003 031f 	and.w	r3, r3, #31
 8005480:	2210      	movs	r2, #16
 8005482:	409a      	lsls	r2, r3
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	4013      	ands	r3, r2
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 80a6 	beq.w	80055da <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a85      	ldr	r2, [pc, #532]	; (80056a8 <HAL_DMA_IRQHandler+0x690>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d04a      	beq.n	800552e <HAL_DMA_IRQHandler+0x516>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a83      	ldr	r2, [pc, #524]	; (80056ac <HAL_DMA_IRQHandler+0x694>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d045      	beq.n	800552e <HAL_DMA_IRQHandler+0x516>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a82      	ldr	r2, [pc, #520]	; (80056b0 <HAL_DMA_IRQHandler+0x698>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d040      	beq.n	800552e <HAL_DMA_IRQHandler+0x516>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a80      	ldr	r2, [pc, #512]	; (80056b4 <HAL_DMA_IRQHandler+0x69c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d03b      	beq.n	800552e <HAL_DMA_IRQHandler+0x516>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a7f      	ldr	r2, [pc, #508]	; (80056b8 <HAL_DMA_IRQHandler+0x6a0>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d036      	beq.n	800552e <HAL_DMA_IRQHandler+0x516>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a7d      	ldr	r2, [pc, #500]	; (80056bc <HAL_DMA_IRQHandler+0x6a4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d031      	beq.n	800552e <HAL_DMA_IRQHandler+0x516>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a7c      	ldr	r2, [pc, #496]	; (80056c0 <HAL_DMA_IRQHandler+0x6a8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d02c      	beq.n	800552e <HAL_DMA_IRQHandler+0x516>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a7a      	ldr	r2, [pc, #488]	; (80056c4 <HAL_DMA_IRQHandler+0x6ac>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d027      	beq.n	800552e <HAL_DMA_IRQHandler+0x516>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a79      	ldr	r2, [pc, #484]	; (80056c8 <HAL_DMA_IRQHandler+0x6b0>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d022      	beq.n	800552e <HAL_DMA_IRQHandler+0x516>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a77      	ldr	r2, [pc, #476]	; (80056cc <HAL_DMA_IRQHandler+0x6b4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d01d      	beq.n	800552e <HAL_DMA_IRQHandler+0x516>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a76      	ldr	r2, [pc, #472]	; (80056d0 <HAL_DMA_IRQHandler+0x6b8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d018      	beq.n	800552e <HAL_DMA_IRQHandler+0x516>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a74      	ldr	r2, [pc, #464]	; (80056d4 <HAL_DMA_IRQHandler+0x6bc>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d013      	beq.n	800552e <HAL_DMA_IRQHandler+0x516>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a73      	ldr	r2, [pc, #460]	; (80056d8 <HAL_DMA_IRQHandler+0x6c0>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00e      	beq.n	800552e <HAL_DMA_IRQHandler+0x516>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a71      	ldr	r2, [pc, #452]	; (80056dc <HAL_DMA_IRQHandler+0x6c4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d009      	beq.n	800552e <HAL_DMA_IRQHandler+0x516>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a70      	ldr	r2, [pc, #448]	; (80056e0 <HAL_DMA_IRQHandler+0x6c8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d004      	beq.n	800552e <HAL_DMA_IRQHandler+0x516>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a6e      	ldr	r2, [pc, #440]	; (80056e4 <HAL_DMA_IRQHandler+0x6cc>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d10a      	bne.n	8005544 <HAL_DMA_IRQHandler+0x52c>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0308 	and.w	r3, r3, #8
 8005538:	2b00      	cmp	r3, #0
 800553a:	bf14      	ite	ne
 800553c:	2301      	movne	r3, #1
 800553e:	2300      	moveq	r3, #0
 8005540:	b2db      	uxtb	r3, r3
 8005542:	e009      	b.n	8005558 <HAL_DMA_IRQHandler+0x540>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0304 	and.w	r3, r3, #4
 800554e:	2b00      	cmp	r3, #0
 8005550:	bf14      	ite	ne
 8005552:	2301      	movne	r3, #1
 8005554:	2300      	moveq	r3, #0
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	d03e      	beq.n	80055da <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005560:	f003 031f 	and.w	r3, r3, #31
 8005564:	2210      	movs	r2, #16
 8005566:	409a      	lsls	r2, r3
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d018      	beq.n	80055ac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d108      	bne.n	800559a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	2b00      	cmp	r3, #0
 800558e:	d024      	beq.n	80055da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	4798      	blx	r3
 8005598:	e01f      	b.n	80055da <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d01b      	beq.n	80055da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	4798      	blx	r3
 80055aa:	e016      	b.n	80055da <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d107      	bne.n	80055ca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0208 	bic.w	r2, r2, #8
 80055c8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055de:	f003 031f 	and.w	r3, r3, #31
 80055e2:	2220      	movs	r2, #32
 80055e4:	409a      	lsls	r2, r3
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	4013      	ands	r3, r2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 8110 	beq.w	8005810 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a2c      	ldr	r2, [pc, #176]	; (80056a8 <HAL_DMA_IRQHandler+0x690>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d04a      	beq.n	8005690 <HAL_DMA_IRQHandler+0x678>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a2b      	ldr	r2, [pc, #172]	; (80056ac <HAL_DMA_IRQHandler+0x694>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d045      	beq.n	8005690 <HAL_DMA_IRQHandler+0x678>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a29      	ldr	r2, [pc, #164]	; (80056b0 <HAL_DMA_IRQHandler+0x698>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d040      	beq.n	8005690 <HAL_DMA_IRQHandler+0x678>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a28      	ldr	r2, [pc, #160]	; (80056b4 <HAL_DMA_IRQHandler+0x69c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d03b      	beq.n	8005690 <HAL_DMA_IRQHandler+0x678>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a26      	ldr	r2, [pc, #152]	; (80056b8 <HAL_DMA_IRQHandler+0x6a0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d036      	beq.n	8005690 <HAL_DMA_IRQHandler+0x678>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a25      	ldr	r2, [pc, #148]	; (80056bc <HAL_DMA_IRQHandler+0x6a4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d031      	beq.n	8005690 <HAL_DMA_IRQHandler+0x678>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a23      	ldr	r2, [pc, #140]	; (80056c0 <HAL_DMA_IRQHandler+0x6a8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d02c      	beq.n	8005690 <HAL_DMA_IRQHandler+0x678>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a22      	ldr	r2, [pc, #136]	; (80056c4 <HAL_DMA_IRQHandler+0x6ac>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d027      	beq.n	8005690 <HAL_DMA_IRQHandler+0x678>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a20      	ldr	r2, [pc, #128]	; (80056c8 <HAL_DMA_IRQHandler+0x6b0>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d022      	beq.n	8005690 <HAL_DMA_IRQHandler+0x678>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a1f      	ldr	r2, [pc, #124]	; (80056cc <HAL_DMA_IRQHandler+0x6b4>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d01d      	beq.n	8005690 <HAL_DMA_IRQHandler+0x678>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a1d      	ldr	r2, [pc, #116]	; (80056d0 <HAL_DMA_IRQHandler+0x6b8>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d018      	beq.n	8005690 <HAL_DMA_IRQHandler+0x678>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a1c      	ldr	r2, [pc, #112]	; (80056d4 <HAL_DMA_IRQHandler+0x6bc>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d013      	beq.n	8005690 <HAL_DMA_IRQHandler+0x678>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a1a      	ldr	r2, [pc, #104]	; (80056d8 <HAL_DMA_IRQHandler+0x6c0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d00e      	beq.n	8005690 <HAL_DMA_IRQHandler+0x678>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a19      	ldr	r2, [pc, #100]	; (80056dc <HAL_DMA_IRQHandler+0x6c4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d009      	beq.n	8005690 <HAL_DMA_IRQHandler+0x678>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a17      	ldr	r2, [pc, #92]	; (80056e0 <HAL_DMA_IRQHandler+0x6c8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d004      	beq.n	8005690 <HAL_DMA_IRQHandler+0x678>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a16      	ldr	r2, [pc, #88]	; (80056e4 <HAL_DMA_IRQHandler+0x6cc>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d12b      	bne.n	80056e8 <HAL_DMA_IRQHandler+0x6d0>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0310 	and.w	r3, r3, #16
 800569a:	2b00      	cmp	r3, #0
 800569c:	bf14      	ite	ne
 800569e:	2301      	movne	r3, #1
 80056a0:	2300      	moveq	r3, #0
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	e02a      	b.n	80056fc <HAL_DMA_IRQHandler+0x6e4>
 80056a6:	bf00      	nop
 80056a8:	40020010 	.word	0x40020010
 80056ac:	40020028 	.word	0x40020028
 80056b0:	40020040 	.word	0x40020040
 80056b4:	40020058 	.word	0x40020058
 80056b8:	40020070 	.word	0x40020070
 80056bc:	40020088 	.word	0x40020088
 80056c0:	400200a0 	.word	0x400200a0
 80056c4:	400200b8 	.word	0x400200b8
 80056c8:	40020410 	.word	0x40020410
 80056cc:	40020428 	.word	0x40020428
 80056d0:	40020440 	.word	0x40020440
 80056d4:	40020458 	.word	0x40020458
 80056d8:	40020470 	.word	0x40020470
 80056dc:	40020488 	.word	0x40020488
 80056e0:	400204a0 	.word	0x400204a0
 80056e4:	400204b8 	.word	0x400204b8
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	bf14      	ite	ne
 80056f6:	2301      	movne	r3, #1
 80056f8:	2300      	moveq	r3, #0
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 8087 	beq.w	8005810 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005706:	f003 031f 	and.w	r3, r3, #31
 800570a:	2220      	movs	r2, #32
 800570c:	409a      	lsls	r2, r3
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b04      	cmp	r3, #4
 800571c:	d139      	bne.n	8005792 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 0216 	bic.w	r2, r2, #22
 800572c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695a      	ldr	r2, [r3, #20]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800573c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	d103      	bne.n	800574e <HAL_DMA_IRQHandler+0x736>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800574a:	2b00      	cmp	r3, #0
 800574c:	d007      	beq.n	800575e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0208 	bic.w	r2, r2, #8
 800575c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005762:	f003 031f 	and.w	r3, r3, #31
 8005766:	223f      	movs	r2, #63	; 0x3f
 8005768:	409a      	lsls	r2, r3
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 834a 	beq.w	8005e1c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	4798      	blx	r3
          }
          return;
 8005790:	e344      	b.n	8005e1c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d018      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d108      	bne.n	80057c0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d02c      	beq.n	8005810 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	4798      	blx	r3
 80057be:	e027      	b.n	8005810 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d023      	beq.n	8005810 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	4798      	blx	r3
 80057d0:	e01e      	b.n	8005810 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10f      	bne.n	8005800 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0210 	bic.w	r2, r2, #16
 80057ee:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 8306 	beq.w	8005e26 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 8088 	beq.w	8005938 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2204      	movs	r2, #4
 800582c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a7a      	ldr	r2, [pc, #488]	; (8005a20 <HAL_DMA_IRQHandler+0xa08>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d04a      	beq.n	80058d0 <HAL_DMA_IRQHandler+0x8b8>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a79      	ldr	r2, [pc, #484]	; (8005a24 <HAL_DMA_IRQHandler+0xa0c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d045      	beq.n	80058d0 <HAL_DMA_IRQHandler+0x8b8>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a77      	ldr	r2, [pc, #476]	; (8005a28 <HAL_DMA_IRQHandler+0xa10>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d040      	beq.n	80058d0 <HAL_DMA_IRQHandler+0x8b8>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a76      	ldr	r2, [pc, #472]	; (8005a2c <HAL_DMA_IRQHandler+0xa14>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d03b      	beq.n	80058d0 <HAL_DMA_IRQHandler+0x8b8>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a74      	ldr	r2, [pc, #464]	; (8005a30 <HAL_DMA_IRQHandler+0xa18>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d036      	beq.n	80058d0 <HAL_DMA_IRQHandler+0x8b8>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a73      	ldr	r2, [pc, #460]	; (8005a34 <HAL_DMA_IRQHandler+0xa1c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d031      	beq.n	80058d0 <HAL_DMA_IRQHandler+0x8b8>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a71      	ldr	r2, [pc, #452]	; (8005a38 <HAL_DMA_IRQHandler+0xa20>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d02c      	beq.n	80058d0 <HAL_DMA_IRQHandler+0x8b8>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a70      	ldr	r2, [pc, #448]	; (8005a3c <HAL_DMA_IRQHandler+0xa24>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d027      	beq.n	80058d0 <HAL_DMA_IRQHandler+0x8b8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a6e      	ldr	r2, [pc, #440]	; (8005a40 <HAL_DMA_IRQHandler+0xa28>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d022      	beq.n	80058d0 <HAL_DMA_IRQHandler+0x8b8>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a6d      	ldr	r2, [pc, #436]	; (8005a44 <HAL_DMA_IRQHandler+0xa2c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d01d      	beq.n	80058d0 <HAL_DMA_IRQHandler+0x8b8>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a6b      	ldr	r2, [pc, #428]	; (8005a48 <HAL_DMA_IRQHandler+0xa30>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d018      	beq.n	80058d0 <HAL_DMA_IRQHandler+0x8b8>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a6a      	ldr	r2, [pc, #424]	; (8005a4c <HAL_DMA_IRQHandler+0xa34>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d013      	beq.n	80058d0 <HAL_DMA_IRQHandler+0x8b8>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a68      	ldr	r2, [pc, #416]	; (8005a50 <HAL_DMA_IRQHandler+0xa38>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00e      	beq.n	80058d0 <HAL_DMA_IRQHandler+0x8b8>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a67      	ldr	r2, [pc, #412]	; (8005a54 <HAL_DMA_IRQHandler+0xa3c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d009      	beq.n	80058d0 <HAL_DMA_IRQHandler+0x8b8>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a65      	ldr	r2, [pc, #404]	; (8005a58 <HAL_DMA_IRQHandler+0xa40>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d004      	beq.n	80058d0 <HAL_DMA_IRQHandler+0x8b8>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a64      	ldr	r2, [pc, #400]	; (8005a5c <HAL_DMA_IRQHandler+0xa44>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d108      	bne.n	80058e2 <HAL_DMA_IRQHandler+0x8ca>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0201 	bic.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	e007      	b.n	80058f2 <HAL_DMA_IRQHandler+0x8da>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 0201 	bic.w	r2, r2, #1
 80058f0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	3301      	adds	r3, #1
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d307      	bcc.n	800590e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1f2      	bne.n	80058f2 <HAL_DMA_IRQHandler+0x8da>
 800590c:	e000      	b.n	8005910 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800590e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d004      	beq.n	8005930 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2203      	movs	r2, #3
 800592a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800592e:	e003      	b.n	8005938 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 8272 	beq.w	8005e26 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	4798      	blx	r3
 800594a:	e26c      	b.n	8005e26 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a43      	ldr	r2, [pc, #268]	; (8005a60 <HAL_DMA_IRQHandler+0xa48>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d022      	beq.n	800599c <HAL_DMA_IRQHandler+0x984>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a42      	ldr	r2, [pc, #264]	; (8005a64 <HAL_DMA_IRQHandler+0xa4c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d01d      	beq.n	800599c <HAL_DMA_IRQHandler+0x984>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a40      	ldr	r2, [pc, #256]	; (8005a68 <HAL_DMA_IRQHandler+0xa50>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d018      	beq.n	800599c <HAL_DMA_IRQHandler+0x984>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a3f      	ldr	r2, [pc, #252]	; (8005a6c <HAL_DMA_IRQHandler+0xa54>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d013      	beq.n	800599c <HAL_DMA_IRQHandler+0x984>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a3d      	ldr	r2, [pc, #244]	; (8005a70 <HAL_DMA_IRQHandler+0xa58>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d00e      	beq.n	800599c <HAL_DMA_IRQHandler+0x984>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a3c      	ldr	r2, [pc, #240]	; (8005a74 <HAL_DMA_IRQHandler+0xa5c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d009      	beq.n	800599c <HAL_DMA_IRQHandler+0x984>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a3a      	ldr	r2, [pc, #232]	; (8005a78 <HAL_DMA_IRQHandler+0xa60>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d004      	beq.n	800599c <HAL_DMA_IRQHandler+0x984>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a39      	ldr	r2, [pc, #228]	; (8005a7c <HAL_DMA_IRQHandler+0xa64>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d101      	bne.n	80059a0 <HAL_DMA_IRQHandler+0x988>
 800599c:	2301      	movs	r3, #1
 800599e:	e000      	b.n	80059a2 <HAL_DMA_IRQHandler+0x98a>
 80059a0:	2300      	movs	r3, #0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 823f 	beq.w	8005e26 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b4:	f003 031f 	and.w	r3, r3, #31
 80059b8:	2204      	movs	r2, #4
 80059ba:	409a      	lsls	r2, r3
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	4013      	ands	r3, r2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 80cd 	beq.w	8005b60 <HAL_DMA_IRQHandler+0xb48>
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 80c7 	beq.w	8005b60 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d6:	f003 031f 	and.w	r3, r3, #31
 80059da:	2204      	movs	r2, #4
 80059dc:	409a      	lsls	r2, r3
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d049      	beq.n	8005a80 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d109      	bne.n	8005a0a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 8210 	beq.w	8005e20 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a08:	e20a      	b.n	8005e20 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 8206 	beq.w	8005e20 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a1c:	e200      	b.n	8005e20 <HAL_DMA_IRQHandler+0xe08>
 8005a1e:	bf00      	nop
 8005a20:	40020010 	.word	0x40020010
 8005a24:	40020028 	.word	0x40020028
 8005a28:	40020040 	.word	0x40020040
 8005a2c:	40020058 	.word	0x40020058
 8005a30:	40020070 	.word	0x40020070
 8005a34:	40020088 	.word	0x40020088
 8005a38:	400200a0 	.word	0x400200a0
 8005a3c:	400200b8 	.word	0x400200b8
 8005a40:	40020410 	.word	0x40020410
 8005a44:	40020428 	.word	0x40020428
 8005a48:	40020440 	.word	0x40020440
 8005a4c:	40020458 	.word	0x40020458
 8005a50:	40020470 	.word	0x40020470
 8005a54:	40020488 	.word	0x40020488
 8005a58:	400204a0 	.word	0x400204a0
 8005a5c:	400204b8 	.word	0x400204b8
 8005a60:	58025408 	.word	0x58025408
 8005a64:	5802541c 	.word	0x5802541c
 8005a68:	58025430 	.word	0x58025430
 8005a6c:	58025444 	.word	0x58025444
 8005a70:	58025458 	.word	0x58025458
 8005a74:	5802546c 	.word	0x5802546c
 8005a78:	58025480 	.word	0x58025480
 8005a7c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d160      	bne.n	8005b4c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a8c      	ldr	r2, [pc, #560]	; (8005cc0 <HAL_DMA_IRQHandler+0xca8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d04a      	beq.n	8005b2a <HAL_DMA_IRQHandler+0xb12>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a8a      	ldr	r2, [pc, #552]	; (8005cc4 <HAL_DMA_IRQHandler+0xcac>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d045      	beq.n	8005b2a <HAL_DMA_IRQHandler+0xb12>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a89      	ldr	r2, [pc, #548]	; (8005cc8 <HAL_DMA_IRQHandler+0xcb0>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d040      	beq.n	8005b2a <HAL_DMA_IRQHandler+0xb12>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a87      	ldr	r2, [pc, #540]	; (8005ccc <HAL_DMA_IRQHandler+0xcb4>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d03b      	beq.n	8005b2a <HAL_DMA_IRQHandler+0xb12>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a86      	ldr	r2, [pc, #536]	; (8005cd0 <HAL_DMA_IRQHandler+0xcb8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d036      	beq.n	8005b2a <HAL_DMA_IRQHandler+0xb12>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a84      	ldr	r2, [pc, #528]	; (8005cd4 <HAL_DMA_IRQHandler+0xcbc>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d031      	beq.n	8005b2a <HAL_DMA_IRQHandler+0xb12>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a83      	ldr	r2, [pc, #524]	; (8005cd8 <HAL_DMA_IRQHandler+0xcc0>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d02c      	beq.n	8005b2a <HAL_DMA_IRQHandler+0xb12>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a81      	ldr	r2, [pc, #516]	; (8005cdc <HAL_DMA_IRQHandler+0xcc4>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d027      	beq.n	8005b2a <HAL_DMA_IRQHandler+0xb12>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a80      	ldr	r2, [pc, #512]	; (8005ce0 <HAL_DMA_IRQHandler+0xcc8>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d022      	beq.n	8005b2a <HAL_DMA_IRQHandler+0xb12>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a7e      	ldr	r2, [pc, #504]	; (8005ce4 <HAL_DMA_IRQHandler+0xccc>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d01d      	beq.n	8005b2a <HAL_DMA_IRQHandler+0xb12>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a7d      	ldr	r2, [pc, #500]	; (8005ce8 <HAL_DMA_IRQHandler+0xcd0>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d018      	beq.n	8005b2a <HAL_DMA_IRQHandler+0xb12>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a7b      	ldr	r2, [pc, #492]	; (8005cec <HAL_DMA_IRQHandler+0xcd4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d013      	beq.n	8005b2a <HAL_DMA_IRQHandler+0xb12>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a7a      	ldr	r2, [pc, #488]	; (8005cf0 <HAL_DMA_IRQHandler+0xcd8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d00e      	beq.n	8005b2a <HAL_DMA_IRQHandler+0xb12>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a78      	ldr	r2, [pc, #480]	; (8005cf4 <HAL_DMA_IRQHandler+0xcdc>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d009      	beq.n	8005b2a <HAL_DMA_IRQHandler+0xb12>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a77      	ldr	r2, [pc, #476]	; (8005cf8 <HAL_DMA_IRQHandler+0xce0>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d004      	beq.n	8005b2a <HAL_DMA_IRQHandler+0xb12>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a75      	ldr	r2, [pc, #468]	; (8005cfc <HAL_DMA_IRQHandler+0xce4>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d108      	bne.n	8005b3c <HAL_DMA_IRQHandler+0xb24>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0208 	bic.w	r2, r2, #8
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	e007      	b.n	8005b4c <HAL_DMA_IRQHandler+0xb34>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0204 	bic.w	r2, r2, #4
 8005b4a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 8165 	beq.w	8005e20 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b5e:	e15f      	b.n	8005e20 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b64:	f003 031f 	and.w	r3, r3, #31
 8005b68:	2202      	movs	r2, #2
 8005b6a:	409a      	lsls	r2, r3
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 80c5 	beq.w	8005d00 <HAL_DMA_IRQHandler+0xce8>
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 80bf 	beq.w	8005d00 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b86:	f003 031f 	and.w	r3, r3, #31
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	409a      	lsls	r2, r3
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d018      	beq.n	8005bce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d109      	bne.n	8005bba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 813a 	beq.w	8005e24 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bb8:	e134      	b.n	8005e24 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 8130 	beq.w	8005e24 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bcc:	e12a      	b.n	8005e24 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f003 0320 	and.w	r3, r3, #32
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d168      	bne.n	8005caa <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a38      	ldr	r2, [pc, #224]	; (8005cc0 <HAL_DMA_IRQHandler+0xca8>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d04a      	beq.n	8005c78 <HAL_DMA_IRQHandler+0xc60>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a37      	ldr	r2, [pc, #220]	; (8005cc4 <HAL_DMA_IRQHandler+0xcac>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d045      	beq.n	8005c78 <HAL_DMA_IRQHandler+0xc60>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a35      	ldr	r2, [pc, #212]	; (8005cc8 <HAL_DMA_IRQHandler+0xcb0>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d040      	beq.n	8005c78 <HAL_DMA_IRQHandler+0xc60>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a34      	ldr	r2, [pc, #208]	; (8005ccc <HAL_DMA_IRQHandler+0xcb4>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d03b      	beq.n	8005c78 <HAL_DMA_IRQHandler+0xc60>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a32      	ldr	r2, [pc, #200]	; (8005cd0 <HAL_DMA_IRQHandler+0xcb8>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d036      	beq.n	8005c78 <HAL_DMA_IRQHandler+0xc60>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a31      	ldr	r2, [pc, #196]	; (8005cd4 <HAL_DMA_IRQHandler+0xcbc>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d031      	beq.n	8005c78 <HAL_DMA_IRQHandler+0xc60>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a2f      	ldr	r2, [pc, #188]	; (8005cd8 <HAL_DMA_IRQHandler+0xcc0>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d02c      	beq.n	8005c78 <HAL_DMA_IRQHandler+0xc60>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a2e      	ldr	r2, [pc, #184]	; (8005cdc <HAL_DMA_IRQHandler+0xcc4>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d027      	beq.n	8005c78 <HAL_DMA_IRQHandler+0xc60>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a2c      	ldr	r2, [pc, #176]	; (8005ce0 <HAL_DMA_IRQHandler+0xcc8>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d022      	beq.n	8005c78 <HAL_DMA_IRQHandler+0xc60>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a2b      	ldr	r2, [pc, #172]	; (8005ce4 <HAL_DMA_IRQHandler+0xccc>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d01d      	beq.n	8005c78 <HAL_DMA_IRQHandler+0xc60>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a29      	ldr	r2, [pc, #164]	; (8005ce8 <HAL_DMA_IRQHandler+0xcd0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d018      	beq.n	8005c78 <HAL_DMA_IRQHandler+0xc60>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a28      	ldr	r2, [pc, #160]	; (8005cec <HAL_DMA_IRQHandler+0xcd4>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d013      	beq.n	8005c78 <HAL_DMA_IRQHandler+0xc60>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a26      	ldr	r2, [pc, #152]	; (8005cf0 <HAL_DMA_IRQHandler+0xcd8>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00e      	beq.n	8005c78 <HAL_DMA_IRQHandler+0xc60>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a25      	ldr	r2, [pc, #148]	; (8005cf4 <HAL_DMA_IRQHandler+0xcdc>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d009      	beq.n	8005c78 <HAL_DMA_IRQHandler+0xc60>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a23      	ldr	r2, [pc, #140]	; (8005cf8 <HAL_DMA_IRQHandler+0xce0>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d004      	beq.n	8005c78 <HAL_DMA_IRQHandler+0xc60>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a22      	ldr	r2, [pc, #136]	; (8005cfc <HAL_DMA_IRQHandler+0xce4>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d108      	bne.n	8005c8a <HAL_DMA_IRQHandler+0xc72>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 0214 	bic.w	r2, r2, #20
 8005c86:	601a      	str	r2, [r3, #0]
 8005c88:	e007      	b.n	8005c9a <HAL_DMA_IRQHandler+0xc82>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 020a 	bic.w	r2, r2, #10
 8005c98:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 80b8 	beq.w	8005e24 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cbc:	e0b2      	b.n	8005e24 <HAL_DMA_IRQHandler+0xe0c>
 8005cbe:	bf00      	nop
 8005cc0:	40020010 	.word	0x40020010
 8005cc4:	40020028 	.word	0x40020028
 8005cc8:	40020040 	.word	0x40020040
 8005ccc:	40020058 	.word	0x40020058
 8005cd0:	40020070 	.word	0x40020070
 8005cd4:	40020088 	.word	0x40020088
 8005cd8:	400200a0 	.word	0x400200a0
 8005cdc:	400200b8 	.word	0x400200b8
 8005ce0:	40020410 	.word	0x40020410
 8005ce4:	40020428 	.word	0x40020428
 8005ce8:	40020440 	.word	0x40020440
 8005cec:	40020458 	.word	0x40020458
 8005cf0:	40020470 	.word	0x40020470
 8005cf4:	40020488 	.word	0x40020488
 8005cf8:	400204a0 	.word	0x400204a0
 8005cfc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d04:	f003 031f 	and.w	r3, r3, #31
 8005d08:	2208      	movs	r2, #8
 8005d0a:	409a      	lsls	r2, r3
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 8088 	beq.w	8005e26 <HAL_DMA_IRQHandler+0xe0e>
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f003 0308 	and.w	r3, r3, #8
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 8082 	beq.w	8005e26 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a41      	ldr	r2, [pc, #260]	; (8005e2c <HAL_DMA_IRQHandler+0xe14>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d04a      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xdaa>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a3f      	ldr	r2, [pc, #252]	; (8005e30 <HAL_DMA_IRQHandler+0xe18>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d045      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xdaa>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a3e      	ldr	r2, [pc, #248]	; (8005e34 <HAL_DMA_IRQHandler+0xe1c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d040      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xdaa>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a3c      	ldr	r2, [pc, #240]	; (8005e38 <HAL_DMA_IRQHandler+0xe20>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d03b      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xdaa>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a3b      	ldr	r2, [pc, #236]	; (8005e3c <HAL_DMA_IRQHandler+0xe24>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d036      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xdaa>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a39      	ldr	r2, [pc, #228]	; (8005e40 <HAL_DMA_IRQHandler+0xe28>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d031      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xdaa>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a38      	ldr	r2, [pc, #224]	; (8005e44 <HAL_DMA_IRQHandler+0xe2c>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d02c      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xdaa>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a36      	ldr	r2, [pc, #216]	; (8005e48 <HAL_DMA_IRQHandler+0xe30>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d027      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xdaa>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a35      	ldr	r2, [pc, #212]	; (8005e4c <HAL_DMA_IRQHandler+0xe34>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d022      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xdaa>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a33      	ldr	r2, [pc, #204]	; (8005e50 <HAL_DMA_IRQHandler+0xe38>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d01d      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xdaa>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a32      	ldr	r2, [pc, #200]	; (8005e54 <HAL_DMA_IRQHandler+0xe3c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d018      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xdaa>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a30      	ldr	r2, [pc, #192]	; (8005e58 <HAL_DMA_IRQHandler+0xe40>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d013      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xdaa>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a2f      	ldr	r2, [pc, #188]	; (8005e5c <HAL_DMA_IRQHandler+0xe44>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d00e      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xdaa>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a2d      	ldr	r2, [pc, #180]	; (8005e60 <HAL_DMA_IRQHandler+0xe48>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d009      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xdaa>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a2c      	ldr	r2, [pc, #176]	; (8005e64 <HAL_DMA_IRQHandler+0xe4c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d004      	beq.n	8005dc2 <HAL_DMA_IRQHandler+0xdaa>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a2a      	ldr	r2, [pc, #168]	; (8005e68 <HAL_DMA_IRQHandler+0xe50>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d108      	bne.n	8005dd4 <HAL_DMA_IRQHandler+0xdbc>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 021c 	bic.w	r2, r2, #28
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	e007      	b.n	8005de4 <HAL_DMA_IRQHandler+0xdcc>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 020e 	bic.w	r2, r2, #14
 8005de2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de8:	f003 031f 	and.w	r3, r3, #31
 8005dec:	2201      	movs	r2, #1
 8005dee:	409a      	lsls	r2, r3
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d009      	beq.n	8005e26 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	4798      	blx	r3
 8005e1a:	e004      	b.n	8005e26 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005e1c:	bf00      	nop
 8005e1e:	e002      	b.n	8005e26 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e20:	bf00      	nop
 8005e22:	e000      	b.n	8005e26 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e24:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005e26:	3728      	adds	r7, #40	; 0x28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	40020010 	.word	0x40020010
 8005e30:	40020028 	.word	0x40020028
 8005e34:	40020040 	.word	0x40020040
 8005e38:	40020058 	.word	0x40020058
 8005e3c:	40020070 	.word	0x40020070
 8005e40:	40020088 	.word	0x40020088
 8005e44:	400200a0 	.word	0x400200a0
 8005e48:	400200b8 	.word	0x400200b8
 8005e4c:	40020410 	.word	0x40020410
 8005e50:	40020428 	.word	0x40020428
 8005e54:	40020440 	.word	0x40020440
 8005e58:	40020458 	.word	0x40020458
 8005e5c:	40020470 	.word	0x40020470
 8005e60:	40020488 	.word	0x40020488
 8005e64:	400204a0 	.word	0x400204a0
 8005e68:	400204b8 	.word	0x400204b8

08005e6c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e96:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e9c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a84      	ldr	r2, [pc, #528]	; (80060b4 <DMA_SetConfig+0x230>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d072      	beq.n	8005f8e <DMA_SetConfig+0x10a>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a82      	ldr	r2, [pc, #520]	; (80060b8 <DMA_SetConfig+0x234>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d06d      	beq.n	8005f8e <DMA_SetConfig+0x10a>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a81      	ldr	r2, [pc, #516]	; (80060bc <DMA_SetConfig+0x238>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d068      	beq.n	8005f8e <DMA_SetConfig+0x10a>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a7f      	ldr	r2, [pc, #508]	; (80060c0 <DMA_SetConfig+0x23c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d063      	beq.n	8005f8e <DMA_SetConfig+0x10a>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a7e      	ldr	r2, [pc, #504]	; (80060c4 <DMA_SetConfig+0x240>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d05e      	beq.n	8005f8e <DMA_SetConfig+0x10a>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a7c      	ldr	r2, [pc, #496]	; (80060c8 <DMA_SetConfig+0x244>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d059      	beq.n	8005f8e <DMA_SetConfig+0x10a>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a7b      	ldr	r2, [pc, #492]	; (80060cc <DMA_SetConfig+0x248>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d054      	beq.n	8005f8e <DMA_SetConfig+0x10a>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a79      	ldr	r2, [pc, #484]	; (80060d0 <DMA_SetConfig+0x24c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d04f      	beq.n	8005f8e <DMA_SetConfig+0x10a>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a78      	ldr	r2, [pc, #480]	; (80060d4 <DMA_SetConfig+0x250>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d04a      	beq.n	8005f8e <DMA_SetConfig+0x10a>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a76      	ldr	r2, [pc, #472]	; (80060d8 <DMA_SetConfig+0x254>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d045      	beq.n	8005f8e <DMA_SetConfig+0x10a>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a75      	ldr	r2, [pc, #468]	; (80060dc <DMA_SetConfig+0x258>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d040      	beq.n	8005f8e <DMA_SetConfig+0x10a>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a73      	ldr	r2, [pc, #460]	; (80060e0 <DMA_SetConfig+0x25c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d03b      	beq.n	8005f8e <DMA_SetConfig+0x10a>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a72      	ldr	r2, [pc, #456]	; (80060e4 <DMA_SetConfig+0x260>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d036      	beq.n	8005f8e <DMA_SetConfig+0x10a>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a70      	ldr	r2, [pc, #448]	; (80060e8 <DMA_SetConfig+0x264>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d031      	beq.n	8005f8e <DMA_SetConfig+0x10a>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a6f      	ldr	r2, [pc, #444]	; (80060ec <DMA_SetConfig+0x268>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d02c      	beq.n	8005f8e <DMA_SetConfig+0x10a>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a6d      	ldr	r2, [pc, #436]	; (80060f0 <DMA_SetConfig+0x26c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d027      	beq.n	8005f8e <DMA_SetConfig+0x10a>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a6c      	ldr	r2, [pc, #432]	; (80060f4 <DMA_SetConfig+0x270>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d022      	beq.n	8005f8e <DMA_SetConfig+0x10a>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a6a      	ldr	r2, [pc, #424]	; (80060f8 <DMA_SetConfig+0x274>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d01d      	beq.n	8005f8e <DMA_SetConfig+0x10a>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a69      	ldr	r2, [pc, #420]	; (80060fc <DMA_SetConfig+0x278>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d018      	beq.n	8005f8e <DMA_SetConfig+0x10a>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a67      	ldr	r2, [pc, #412]	; (8006100 <DMA_SetConfig+0x27c>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d013      	beq.n	8005f8e <DMA_SetConfig+0x10a>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a66      	ldr	r2, [pc, #408]	; (8006104 <DMA_SetConfig+0x280>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d00e      	beq.n	8005f8e <DMA_SetConfig+0x10a>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a64      	ldr	r2, [pc, #400]	; (8006108 <DMA_SetConfig+0x284>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d009      	beq.n	8005f8e <DMA_SetConfig+0x10a>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a63      	ldr	r2, [pc, #396]	; (800610c <DMA_SetConfig+0x288>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d004      	beq.n	8005f8e <DMA_SetConfig+0x10a>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a61      	ldr	r2, [pc, #388]	; (8006110 <DMA_SetConfig+0x28c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d101      	bne.n	8005f92 <DMA_SetConfig+0x10e>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e000      	b.n	8005f94 <DMA_SetConfig+0x110>
 8005f92:	2300      	movs	r3, #0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00d      	beq.n	8005fb4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005fa0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d004      	beq.n	8005fb4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005fb2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a3e      	ldr	r2, [pc, #248]	; (80060b4 <DMA_SetConfig+0x230>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d04a      	beq.n	8006054 <DMA_SetConfig+0x1d0>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a3d      	ldr	r2, [pc, #244]	; (80060b8 <DMA_SetConfig+0x234>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d045      	beq.n	8006054 <DMA_SetConfig+0x1d0>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a3b      	ldr	r2, [pc, #236]	; (80060bc <DMA_SetConfig+0x238>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d040      	beq.n	8006054 <DMA_SetConfig+0x1d0>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a3a      	ldr	r2, [pc, #232]	; (80060c0 <DMA_SetConfig+0x23c>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d03b      	beq.n	8006054 <DMA_SetConfig+0x1d0>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a38      	ldr	r2, [pc, #224]	; (80060c4 <DMA_SetConfig+0x240>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d036      	beq.n	8006054 <DMA_SetConfig+0x1d0>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a37      	ldr	r2, [pc, #220]	; (80060c8 <DMA_SetConfig+0x244>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d031      	beq.n	8006054 <DMA_SetConfig+0x1d0>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a35      	ldr	r2, [pc, #212]	; (80060cc <DMA_SetConfig+0x248>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d02c      	beq.n	8006054 <DMA_SetConfig+0x1d0>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a34      	ldr	r2, [pc, #208]	; (80060d0 <DMA_SetConfig+0x24c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d027      	beq.n	8006054 <DMA_SetConfig+0x1d0>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a32      	ldr	r2, [pc, #200]	; (80060d4 <DMA_SetConfig+0x250>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d022      	beq.n	8006054 <DMA_SetConfig+0x1d0>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a31      	ldr	r2, [pc, #196]	; (80060d8 <DMA_SetConfig+0x254>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d01d      	beq.n	8006054 <DMA_SetConfig+0x1d0>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a2f      	ldr	r2, [pc, #188]	; (80060dc <DMA_SetConfig+0x258>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d018      	beq.n	8006054 <DMA_SetConfig+0x1d0>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a2e      	ldr	r2, [pc, #184]	; (80060e0 <DMA_SetConfig+0x25c>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d013      	beq.n	8006054 <DMA_SetConfig+0x1d0>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a2c      	ldr	r2, [pc, #176]	; (80060e4 <DMA_SetConfig+0x260>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00e      	beq.n	8006054 <DMA_SetConfig+0x1d0>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a2b      	ldr	r2, [pc, #172]	; (80060e8 <DMA_SetConfig+0x264>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d009      	beq.n	8006054 <DMA_SetConfig+0x1d0>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a29      	ldr	r2, [pc, #164]	; (80060ec <DMA_SetConfig+0x268>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d004      	beq.n	8006054 <DMA_SetConfig+0x1d0>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a28      	ldr	r2, [pc, #160]	; (80060f0 <DMA_SetConfig+0x26c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d101      	bne.n	8006058 <DMA_SetConfig+0x1d4>
 8006054:	2301      	movs	r3, #1
 8006056:	e000      	b.n	800605a <DMA_SetConfig+0x1d6>
 8006058:	2300      	movs	r3, #0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d05a      	beq.n	8006114 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006062:	f003 031f 	and.w	r3, r3, #31
 8006066:	223f      	movs	r2, #63	; 0x3f
 8006068:	409a      	lsls	r2, r3
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800607c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	2b40      	cmp	r3, #64	; 0x40
 800608c:	d108      	bne.n	80060a0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800609e:	e087      	b.n	80061b0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	60da      	str	r2, [r3, #12]
}
 80060b0:	e07e      	b.n	80061b0 <DMA_SetConfig+0x32c>
 80060b2:	bf00      	nop
 80060b4:	40020010 	.word	0x40020010
 80060b8:	40020028 	.word	0x40020028
 80060bc:	40020040 	.word	0x40020040
 80060c0:	40020058 	.word	0x40020058
 80060c4:	40020070 	.word	0x40020070
 80060c8:	40020088 	.word	0x40020088
 80060cc:	400200a0 	.word	0x400200a0
 80060d0:	400200b8 	.word	0x400200b8
 80060d4:	40020410 	.word	0x40020410
 80060d8:	40020428 	.word	0x40020428
 80060dc:	40020440 	.word	0x40020440
 80060e0:	40020458 	.word	0x40020458
 80060e4:	40020470 	.word	0x40020470
 80060e8:	40020488 	.word	0x40020488
 80060ec:	400204a0 	.word	0x400204a0
 80060f0:	400204b8 	.word	0x400204b8
 80060f4:	58025408 	.word	0x58025408
 80060f8:	5802541c 	.word	0x5802541c
 80060fc:	58025430 	.word	0x58025430
 8006100:	58025444 	.word	0x58025444
 8006104:	58025458 	.word	0x58025458
 8006108:	5802546c 	.word	0x5802546c
 800610c:	58025480 	.word	0x58025480
 8006110:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a28      	ldr	r2, [pc, #160]	; (80061bc <DMA_SetConfig+0x338>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d022      	beq.n	8006164 <DMA_SetConfig+0x2e0>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a27      	ldr	r2, [pc, #156]	; (80061c0 <DMA_SetConfig+0x33c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d01d      	beq.n	8006164 <DMA_SetConfig+0x2e0>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a25      	ldr	r2, [pc, #148]	; (80061c4 <DMA_SetConfig+0x340>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d018      	beq.n	8006164 <DMA_SetConfig+0x2e0>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a24      	ldr	r2, [pc, #144]	; (80061c8 <DMA_SetConfig+0x344>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d013      	beq.n	8006164 <DMA_SetConfig+0x2e0>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a22      	ldr	r2, [pc, #136]	; (80061cc <DMA_SetConfig+0x348>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d00e      	beq.n	8006164 <DMA_SetConfig+0x2e0>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a21      	ldr	r2, [pc, #132]	; (80061d0 <DMA_SetConfig+0x34c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d009      	beq.n	8006164 <DMA_SetConfig+0x2e0>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a1f      	ldr	r2, [pc, #124]	; (80061d4 <DMA_SetConfig+0x350>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d004      	beq.n	8006164 <DMA_SetConfig+0x2e0>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a1e      	ldr	r2, [pc, #120]	; (80061d8 <DMA_SetConfig+0x354>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d101      	bne.n	8006168 <DMA_SetConfig+0x2e4>
 8006164:	2301      	movs	r3, #1
 8006166:	e000      	b.n	800616a <DMA_SetConfig+0x2e6>
 8006168:	2300      	movs	r3, #0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d020      	beq.n	80061b0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006172:	f003 031f 	and.w	r3, r3, #31
 8006176:	2201      	movs	r2, #1
 8006178:	409a      	lsls	r2, r3
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	2b40      	cmp	r3, #64	; 0x40
 800618c:	d108      	bne.n	80061a0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	60da      	str	r2, [r3, #12]
}
 800619e:	e007      	b.n	80061b0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	60da      	str	r2, [r3, #12]
}
 80061b0:	bf00      	nop
 80061b2:	371c      	adds	r7, #28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	58025408 	.word	0x58025408
 80061c0:	5802541c 	.word	0x5802541c
 80061c4:	58025430 	.word	0x58025430
 80061c8:	58025444 	.word	0x58025444
 80061cc:	58025458 	.word	0x58025458
 80061d0:	5802546c 	.word	0x5802546c
 80061d4:	58025480 	.word	0x58025480
 80061d8:	58025494 	.word	0x58025494

080061dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a42      	ldr	r2, [pc, #264]	; (80062f4 <DMA_CalcBaseAndBitshift+0x118>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d04a      	beq.n	8006284 <DMA_CalcBaseAndBitshift+0xa8>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a41      	ldr	r2, [pc, #260]	; (80062f8 <DMA_CalcBaseAndBitshift+0x11c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d045      	beq.n	8006284 <DMA_CalcBaseAndBitshift+0xa8>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a3f      	ldr	r2, [pc, #252]	; (80062fc <DMA_CalcBaseAndBitshift+0x120>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d040      	beq.n	8006284 <DMA_CalcBaseAndBitshift+0xa8>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a3e      	ldr	r2, [pc, #248]	; (8006300 <DMA_CalcBaseAndBitshift+0x124>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d03b      	beq.n	8006284 <DMA_CalcBaseAndBitshift+0xa8>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a3c      	ldr	r2, [pc, #240]	; (8006304 <DMA_CalcBaseAndBitshift+0x128>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d036      	beq.n	8006284 <DMA_CalcBaseAndBitshift+0xa8>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a3b      	ldr	r2, [pc, #236]	; (8006308 <DMA_CalcBaseAndBitshift+0x12c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d031      	beq.n	8006284 <DMA_CalcBaseAndBitshift+0xa8>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a39      	ldr	r2, [pc, #228]	; (800630c <DMA_CalcBaseAndBitshift+0x130>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d02c      	beq.n	8006284 <DMA_CalcBaseAndBitshift+0xa8>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a38      	ldr	r2, [pc, #224]	; (8006310 <DMA_CalcBaseAndBitshift+0x134>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d027      	beq.n	8006284 <DMA_CalcBaseAndBitshift+0xa8>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a36      	ldr	r2, [pc, #216]	; (8006314 <DMA_CalcBaseAndBitshift+0x138>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d022      	beq.n	8006284 <DMA_CalcBaseAndBitshift+0xa8>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a35      	ldr	r2, [pc, #212]	; (8006318 <DMA_CalcBaseAndBitshift+0x13c>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d01d      	beq.n	8006284 <DMA_CalcBaseAndBitshift+0xa8>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a33      	ldr	r2, [pc, #204]	; (800631c <DMA_CalcBaseAndBitshift+0x140>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d018      	beq.n	8006284 <DMA_CalcBaseAndBitshift+0xa8>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a32      	ldr	r2, [pc, #200]	; (8006320 <DMA_CalcBaseAndBitshift+0x144>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d013      	beq.n	8006284 <DMA_CalcBaseAndBitshift+0xa8>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a30      	ldr	r2, [pc, #192]	; (8006324 <DMA_CalcBaseAndBitshift+0x148>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d00e      	beq.n	8006284 <DMA_CalcBaseAndBitshift+0xa8>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a2f      	ldr	r2, [pc, #188]	; (8006328 <DMA_CalcBaseAndBitshift+0x14c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d009      	beq.n	8006284 <DMA_CalcBaseAndBitshift+0xa8>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a2d      	ldr	r2, [pc, #180]	; (800632c <DMA_CalcBaseAndBitshift+0x150>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d004      	beq.n	8006284 <DMA_CalcBaseAndBitshift+0xa8>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a2c      	ldr	r2, [pc, #176]	; (8006330 <DMA_CalcBaseAndBitshift+0x154>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d101      	bne.n	8006288 <DMA_CalcBaseAndBitshift+0xac>
 8006284:	2301      	movs	r3, #1
 8006286:	e000      	b.n	800628a <DMA_CalcBaseAndBitshift+0xae>
 8006288:	2300      	movs	r3, #0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d024      	beq.n	80062d8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	b2db      	uxtb	r3, r3
 8006294:	3b10      	subs	r3, #16
 8006296:	4a27      	ldr	r2, [pc, #156]	; (8006334 <DMA_CalcBaseAndBitshift+0x158>)
 8006298:	fba2 2303 	umull	r2, r3, r2, r3
 800629c:	091b      	lsrs	r3, r3, #4
 800629e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	4a24      	ldr	r2, [pc, #144]	; (8006338 <DMA_CalcBaseAndBitshift+0x15c>)
 80062a8:	5cd3      	ldrb	r3, [r2, r3]
 80062aa:	461a      	mov	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d908      	bls.n	80062c8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	461a      	mov	r2, r3
 80062bc:	4b1f      	ldr	r3, [pc, #124]	; (800633c <DMA_CalcBaseAndBitshift+0x160>)
 80062be:	4013      	ands	r3, r2
 80062c0:	1d1a      	adds	r2, r3, #4
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	659a      	str	r2, [r3, #88]	; 0x58
 80062c6:	e00d      	b.n	80062e4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	461a      	mov	r2, r3
 80062ce:	4b1b      	ldr	r3, [pc, #108]	; (800633c <DMA_CalcBaseAndBitshift+0x160>)
 80062d0:	4013      	ands	r3, r2
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	6593      	str	r3, [r2, #88]	; 0x58
 80062d6:	e005      	b.n	80062e4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	40020010 	.word	0x40020010
 80062f8:	40020028 	.word	0x40020028
 80062fc:	40020040 	.word	0x40020040
 8006300:	40020058 	.word	0x40020058
 8006304:	40020070 	.word	0x40020070
 8006308:	40020088 	.word	0x40020088
 800630c:	400200a0 	.word	0x400200a0
 8006310:	400200b8 	.word	0x400200b8
 8006314:	40020410 	.word	0x40020410
 8006318:	40020428 	.word	0x40020428
 800631c:	40020440 	.word	0x40020440
 8006320:	40020458 	.word	0x40020458
 8006324:	40020470 	.word	0x40020470
 8006328:	40020488 	.word	0x40020488
 800632c:	400204a0 	.word	0x400204a0
 8006330:	400204b8 	.word	0x400204b8
 8006334:	aaaaaaab 	.word	0xaaaaaaab
 8006338:	0800daa8 	.word	0x0800daa8
 800633c:	fffffc00 	.word	0xfffffc00

08006340 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d120      	bne.n	8006396 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006358:	2b03      	cmp	r3, #3
 800635a:	d858      	bhi.n	800640e <DMA_CheckFifoParam+0xce>
 800635c:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <DMA_CheckFifoParam+0x24>)
 800635e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006362:	bf00      	nop
 8006364:	08006375 	.word	0x08006375
 8006368:	08006387 	.word	0x08006387
 800636c:	08006375 	.word	0x08006375
 8006370:	0800640f 	.word	0x0800640f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006378:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d048      	beq.n	8006412 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006384:	e045      	b.n	8006412 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800638e:	d142      	bne.n	8006416 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006394:	e03f      	b.n	8006416 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800639e:	d123      	bne.n	80063e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a4:	2b03      	cmp	r3, #3
 80063a6:	d838      	bhi.n	800641a <DMA_CheckFifoParam+0xda>
 80063a8:	a201      	add	r2, pc, #4	; (adr r2, 80063b0 <DMA_CheckFifoParam+0x70>)
 80063aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ae:	bf00      	nop
 80063b0:	080063c1 	.word	0x080063c1
 80063b4:	080063c7 	.word	0x080063c7
 80063b8:	080063c1 	.word	0x080063c1
 80063bc:	080063d9 	.word	0x080063d9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	73fb      	strb	r3, [r7, #15]
        break;
 80063c4:	e030      	b.n	8006428 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d025      	beq.n	800641e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063d6:	e022      	b.n	800641e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063e0:	d11f      	bne.n	8006422 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063e6:	e01c      	b.n	8006422 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d902      	bls.n	80063f6 <DMA_CheckFifoParam+0xb6>
 80063f0:	2b03      	cmp	r3, #3
 80063f2:	d003      	beq.n	80063fc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80063f4:	e018      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	73fb      	strb	r3, [r7, #15]
        break;
 80063fa:	e015      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00e      	beq.n	8006426 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	73fb      	strb	r3, [r7, #15]
    break;
 800640c:	e00b      	b.n	8006426 <DMA_CheckFifoParam+0xe6>
        break;
 800640e:	bf00      	nop
 8006410:	e00a      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
        break;
 8006412:	bf00      	nop
 8006414:	e008      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
        break;
 8006416:	bf00      	nop
 8006418:	e006      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
        break;
 800641a:	bf00      	nop
 800641c:	e004      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
        break;
 800641e:	bf00      	nop
 8006420:	e002      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
        break;
 8006422:	bf00      	nop
 8006424:	e000      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
    break;
 8006426:	bf00      	nop
    }
  }

  return status;
 8006428:	7bfb      	ldrb	r3, [r7, #15]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop

08006438 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a38      	ldr	r2, [pc, #224]	; (800652c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d022      	beq.n	8006496 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a36      	ldr	r2, [pc, #216]	; (8006530 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d01d      	beq.n	8006496 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a35      	ldr	r2, [pc, #212]	; (8006534 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d018      	beq.n	8006496 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a33      	ldr	r2, [pc, #204]	; (8006538 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d013      	beq.n	8006496 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a32      	ldr	r2, [pc, #200]	; (800653c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00e      	beq.n	8006496 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a30      	ldr	r2, [pc, #192]	; (8006540 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d009      	beq.n	8006496 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a2f      	ldr	r2, [pc, #188]	; (8006544 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d004      	beq.n	8006496 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a2d      	ldr	r2, [pc, #180]	; (8006548 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d101      	bne.n	800649a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006496:	2301      	movs	r3, #1
 8006498:	e000      	b.n	800649c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800649a:	2300      	movs	r3, #0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01a      	beq.n	80064d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	3b08      	subs	r3, #8
 80064a8:	4a28      	ldr	r2, [pc, #160]	; (800654c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80064aa:	fba2 2303 	umull	r2, r3, r2, r3
 80064ae:	091b      	lsrs	r3, r3, #4
 80064b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	4b26      	ldr	r3, [pc, #152]	; (8006550 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80064b6:	4413      	add	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	461a      	mov	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a24      	ldr	r2, [pc, #144]	; (8006554 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80064c4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f003 031f 	and.w	r3, r3, #31
 80064cc:	2201      	movs	r2, #1
 80064ce:	409a      	lsls	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80064d4:	e024      	b.n	8006520 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	3b10      	subs	r3, #16
 80064de:	4a1e      	ldr	r2, [pc, #120]	; (8006558 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80064e0:	fba2 2303 	umull	r2, r3, r2, r3
 80064e4:	091b      	lsrs	r3, r3, #4
 80064e6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4a1c      	ldr	r2, [pc, #112]	; (800655c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d806      	bhi.n	80064fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4a1b      	ldr	r2, [pc, #108]	; (8006560 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d902      	bls.n	80064fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	3308      	adds	r3, #8
 80064fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	4b18      	ldr	r3, [pc, #96]	; (8006564 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	461a      	mov	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a16      	ldr	r2, [pc, #88]	; (8006568 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006510:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f003 031f 	and.w	r3, r3, #31
 8006518:	2201      	movs	r2, #1
 800651a:	409a      	lsls	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006520:	bf00      	nop
 8006522:	3714      	adds	r7, #20
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	58025408 	.word	0x58025408
 8006530:	5802541c 	.word	0x5802541c
 8006534:	58025430 	.word	0x58025430
 8006538:	58025444 	.word	0x58025444
 800653c:	58025458 	.word	0x58025458
 8006540:	5802546c 	.word	0x5802546c
 8006544:	58025480 	.word	0x58025480
 8006548:	58025494 	.word	0x58025494
 800654c:	cccccccd 	.word	0xcccccccd
 8006550:	16009600 	.word	0x16009600
 8006554:	58025880 	.word	0x58025880
 8006558:	aaaaaaab 	.word	0xaaaaaaab
 800655c:	400204b8 	.word	0x400204b8
 8006560:	4002040f 	.word	0x4002040f
 8006564:	10008200 	.word	0x10008200
 8006568:	40020880 	.word	0x40020880

0800656c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	b2db      	uxtb	r3, r3
 800657a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d04a      	beq.n	8006618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2b08      	cmp	r3, #8
 8006586:	d847      	bhi.n	8006618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a25      	ldr	r2, [pc, #148]	; (8006624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d022      	beq.n	80065d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a24      	ldr	r2, [pc, #144]	; (8006628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d01d      	beq.n	80065d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a22      	ldr	r2, [pc, #136]	; (800662c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d018      	beq.n	80065d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a21      	ldr	r2, [pc, #132]	; (8006630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d013      	beq.n	80065d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a1f      	ldr	r2, [pc, #124]	; (8006634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00e      	beq.n	80065d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a1e      	ldr	r2, [pc, #120]	; (8006638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d009      	beq.n	80065d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a1c      	ldr	r2, [pc, #112]	; (800663c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d004      	beq.n	80065d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a1b      	ldr	r2, [pc, #108]	; (8006640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d101      	bne.n	80065dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80065d8:	2301      	movs	r3, #1
 80065da:	e000      	b.n	80065de <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80065dc:	2300      	movs	r3, #0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00a      	beq.n	80065f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	4b17      	ldr	r3, [pc, #92]	; (8006644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80065e6:	4413      	add	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	461a      	mov	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a15      	ldr	r2, [pc, #84]	; (8006648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80065f4:	671a      	str	r2, [r3, #112]	; 0x70
 80065f6:	e009      	b.n	800660c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4b14      	ldr	r3, [pc, #80]	; (800664c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80065fc:	4413      	add	r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	461a      	mov	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a11      	ldr	r2, [pc, #68]	; (8006650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800660a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3b01      	subs	r3, #1
 8006610:	2201      	movs	r2, #1
 8006612:	409a      	lsls	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006618:	bf00      	nop
 800661a:	3714      	adds	r7, #20
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	58025408 	.word	0x58025408
 8006628:	5802541c 	.word	0x5802541c
 800662c:	58025430 	.word	0x58025430
 8006630:	58025444 	.word	0x58025444
 8006634:	58025458 	.word	0x58025458
 8006638:	5802546c 	.word	0x5802546c
 800663c:	58025480 	.word	0x58025480
 8006640:	58025494 	.word	0x58025494
 8006644:	1600963f 	.word	0x1600963f
 8006648:	58025940 	.word	0x58025940
 800664c:	1000823f 	.word	0x1000823f
 8006650:	40020940 	.word	0x40020940

08006654 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006654:	b480      	push	{r7}
 8006656:	b089      	sub	sp, #36	; 0x24
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800665e:	2300      	movs	r3, #0
 8006660:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006662:	4b89      	ldr	r3, [pc, #548]	; (8006888 <HAL_GPIO_Init+0x234>)
 8006664:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006666:	e194      	b.n	8006992 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	2101      	movs	r1, #1
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	fa01 f303 	lsl.w	r3, r1, r3
 8006674:	4013      	ands	r3, r2
 8006676:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	2b00      	cmp	r3, #0
 800667c:	f000 8186 	beq.w	800698c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d00b      	beq.n	80066a0 <HAL_GPIO_Init+0x4c>
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2b02      	cmp	r3, #2
 800668e:	d007      	beq.n	80066a0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006694:	2b11      	cmp	r3, #17
 8006696:	d003      	beq.n	80066a0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	2b12      	cmp	r3, #18
 800669e:	d130      	bne.n	8006702 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	005b      	lsls	r3, r3, #1
 80066aa:	2203      	movs	r2, #3
 80066ac:	fa02 f303 	lsl.w	r3, r2, r3
 80066b0:	43db      	mvns	r3, r3
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	4013      	ands	r3, r2
 80066b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	68da      	ldr	r2, [r3, #12]
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	005b      	lsls	r3, r3, #1
 80066c0:	fa02 f303 	lsl.w	r3, r2, r3
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066d6:	2201      	movs	r2, #1
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	fa02 f303 	lsl.w	r3, r2, r3
 80066de:	43db      	mvns	r3, r3
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	4013      	ands	r3, r2
 80066e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	091b      	lsrs	r3, r3, #4
 80066ec:	f003 0201 	and.w	r2, r3, #1
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	fa02 f303 	lsl.w	r3, r2, r3
 80066f6:	69ba      	ldr	r2, [r7, #24]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	005b      	lsls	r3, r3, #1
 800670c:	2203      	movs	r2, #3
 800670e:	fa02 f303 	lsl.w	r3, r2, r3
 8006712:	43db      	mvns	r3, r3
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	4013      	ands	r3, r2
 8006718:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	689a      	ldr	r2, [r3, #8]
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	fa02 f303 	lsl.w	r3, r2, r3
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	4313      	orrs	r3, r2
 800672a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	69ba      	ldr	r2, [r7, #24]
 8006730:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	2b02      	cmp	r3, #2
 8006738:	d003      	beq.n	8006742 <HAL_GPIO_Init+0xee>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	2b12      	cmp	r3, #18
 8006740:	d123      	bne.n	800678a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	08da      	lsrs	r2, r3, #3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	3208      	adds	r2, #8
 800674a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800674e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	220f      	movs	r2, #15
 800675a:	fa02 f303 	lsl.w	r3, r2, r3
 800675e:	43db      	mvns	r3, r3
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	4013      	ands	r3, r2
 8006764:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	691a      	ldr	r2, [r3, #16]
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	f003 0307 	and.w	r3, r3, #7
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	fa02 f303 	lsl.w	r3, r2, r3
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	4313      	orrs	r3, r2
 800677a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	08da      	lsrs	r2, r3, #3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3208      	adds	r2, #8
 8006784:	69b9      	ldr	r1, [r7, #24]
 8006786:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	2203      	movs	r2, #3
 8006796:	fa02 f303 	lsl.w	r3, r2, r3
 800679a:	43db      	mvns	r3, r3
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	4013      	ands	r3, r2
 80067a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f003 0203 	and.w	r2, r3, #3
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	fa02 f303 	lsl.w	r3, r2, r3
 80067b2:	69ba      	ldr	r2, [r7, #24]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 80e0 	beq.w	800698c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067cc:	4b2f      	ldr	r3, [pc, #188]	; (800688c <HAL_GPIO_Init+0x238>)
 80067ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067d2:	4a2e      	ldr	r2, [pc, #184]	; (800688c <HAL_GPIO_Init+0x238>)
 80067d4:	f043 0302 	orr.w	r3, r3, #2
 80067d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80067dc:	4b2b      	ldr	r3, [pc, #172]	; (800688c <HAL_GPIO_Init+0x238>)
 80067de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067e2:	f003 0302 	and.w	r3, r3, #2
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80067ea:	4a29      	ldr	r2, [pc, #164]	; (8006890 <HAL_GPIO_Init+0x23c>)
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	089b      	lsrs	r3, r3, #2
 80067f0:	3302      	adds	r3, #2
 80067f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	f003 0303 	and.w	r3, r3, #3
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	220f      	movs	r2, #15
 8006802:	fa02 f303 	lsl.w	r3, r2, r3
 8006806:	43db      	mvns	r3, r3
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	4013      	ands	r3, r2
 800680c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a20      	ldr	r2, [pc, #128]	; (8006894 <HAL_GPIO_Init+0x240>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d052      	beq.n	80068bc <HAL_GPIO_Init+0x268>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a1f      	ldr	r2, [pc, #124]	; (8006898 <HAL_GPIO_Init+0x244>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d031      	beq.n	8006882 <HAL_GPIO_Init+0x22e>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a1e      	ldr	r2, [pc, #120]	; (800689c <HAL_GPIO_Init+0x248>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d02b      	beq.n	800687e <HAL_GPIO_Init+0x22a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a1d      	ldr	r2, [pc, #116]	; (80068a0 <HAL_GPIO_Init+0x24c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d025      	beq.n	800687a <HAL_GPIO_Init+0x226>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a1c      	ldr	r2, [pc, #112]	; (80068a4 <HAL_GPIO_Init+0x250>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d01f      	beq.n	8006876 <HAL_GPIO_Init+0x222>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a1b      	ldr	r2, [pc, #108]	; (80068a8 <HAL_GPIO_Init+0x254>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d019      	beq.n	8006872 <HAL_GPIO_Init+0x21e>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a1a      	ldr	r2, [pc, #104]	; (80068ac <HAL_GPIO_Init+0x258>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d013      	beq.n	800686e <HAL_GPIO_Init+0x21a>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a19      	ldr	r2, [pc, #100]	; (80068b0 <HAL_GPIO_Init+0x25c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d00d      	beq.n	800686a <HAL_GPIO_Init+0x216>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a18      	ldr	r2, [pc, #96]	; (80068b4 <HAL_GPIO_Init+0x260>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d007      	beq.n	8006866 <HAL_GPIO_Init+0x212>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a17      	ldr	r2, [pc, #92]	; (80068b8 <HAL_GPIO_Init+0x264>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d101      	bne.n	8006862 <HAL_GPIO_Init+0x20e>
 800685e:	2309      	movs	r3, #9
 8006860:	e02d      	b.n	80068be <HAL_GPIO_Init+0x26a>
 8006862:	230a      	movs	r3, #10
 8006864:	e02b      	b.n	80068be <HAL_GPIO_Init+0x26a>
 8006866:	2308      	movs	r3, #8
 8006868:	e029      	b.n	80068be <HAL_GPIO_Init+0x26a>
 800686a:	2307      	movs	r3, #7
 800686c:	e027      	b.n	80068be <HAL_GPIO_Init+0x26a>
 800686e:	2306      	movs	r3, #6
 8006870:	e025      	b.n	80068be <HAL_GPIO_Init+0x26a>
 8006872:	2305      	movs	r3, #5
 8006874:	e023      	b.n	80068be <HAL_GPIO_Init+0x26a>
 8006876:	2304      	movs	r3, #4
 8006878:	e021      	b.n	80068be <HAL_GPIO_Init+0x26a>
 800687a:	2303      	movs	r3, #3
 800687c:	e01f      	b.n	80068be <HAL_GPIO_Init+0x26a>
 800687e:	2302      	movs	r3, #2
 8006880:	e01d      	b.n	80068be <HAL_GPIO_Init+0x26a>
 8006882:	2301      	movs	r3, #1
 8006884:	e01b      	b.n	80068be <HAL_GPIO_Init+0x26a>
 8006886:	bf00      	nop
 8006888:	58000080 	.word	0x58000080
 800688c:	58024400 	.word	0x58024400
 8006890:	58000400 	.word	0x58000400
 8006894:	58020000 	.word	0x58020000
 8006898:	58020400 	.word	0x58020400
 800689c:	58020800 	.word	0x58020800
 80068a0:	58020c00 	.word	0x58020c00
 80068a4:	58021000 	.word	0x58021000
 80068a8:	58021400 	.word	0x58021400
 80068ac:	58021800 	.word	0x58021800
 80068b0:	58021c00 	.word	0x58021c00
 80068b4:	58022000 	.word	0x58022000
 80068b8:	58022400 	.word	0x58022400
 80068bc:	2300      	movs	r3, #0
 80068be:	69fa      	ldr	r2, [r7, #28]
 80068c0:	f002 0203 	and.w	r2, r2, #3
 80068c4:	0092      	lsls	r2, r2, #2
 80068c6:	4093      	lsls	r3, r2
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80068ce:	4938      	ldr	r1, [pc, #224]	; (80069b0 <HAL_GPIO_Init+0x35c>)
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	089b      	lsrs	r3, r3, #2
 80068d4:	3302      	adds	r3, #2
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	43db      	mvns	r3, r3
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	4013      	ands	r3, r2
 80068ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d003      	beq.n	8006900 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	69ba      	ldr	r2, [r7, #24]
 8006904:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	43db      	mvns	r3, r3
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	4013      	ands	r3, r2
 8006914:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	4313      	orrs	r3, r2
 8006928:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	43db      	mvns	r3, r3
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	4013      	ands	r3, r2
 8006940:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	4313      	orrs	r3, r2
 8006954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006956:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800695e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	43db      	mvns	r3, r3
 800696a:	69ba      	ldr	r2, [r7, #24]
 800696c:	4013      	ands	r3, r2
 800696e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d003      	beq.n	8006984 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	4313      	orrs	r3, r2
 8006982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006984:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	3301      	adds	r3, #1
 8006990:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	fa22 f303 	lsr.w	r3, r2, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	f47f ae63 	bne.w	8006668 <HAL_GPIO_Init+0x14>
  }
}
 80069a2:	bf00      	nop
 80069a4:	bf00      	nop
 80069a6:	3724      	adds	r7, #36	; 0x24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	58000400 	.word	0x58000400

080069b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	691a      	ldr	r2, [r3, #16]
 80069c4:	887b      	ldrh	r3, [r7, #2]
 80069c6:	4013      	ands	r3, r2
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80069cc:	2301      	movs	r3, #1
 80069ce:	73fb      	strb	r3, [r7, #15]
 80069d0:	e001      	b.n	80069d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80069d2:	2300      	movs	r3, #0
 80069d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	460b      	mov	r3, r1
 80069ee:	807b      	strh	r3, [r7, #2]
 80069f0:	4613      	mov	r3, r2
 80069f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80069f4:	787b      	ldrb	r3, [r7, #1]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069fa:	887a      	ldrh	r2, [r7, #2]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006a00:	e003      	b.n	8006a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006a02:	887b      	ldrh	r3, [r7, #2]
 8006a04:	041a      	lsls	r2, r3, #16
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	619a      	str	r2, [r3, #24]
}
 8006a0a:	bf00      	nop
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e041      	b.n	8006aac <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006a30:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f245 5255 	movw	r2, #21845	; 0x5555
 8006a3a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	6852      	ldr	r2, [r2, #4]
 8006a44:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	6892      	ldr	r2, [r2, #8]
 8006a4e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006a50:	f7fc fec2 	bl	80037d8 <HAL_GetTick>
 8006a54:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006a56:	e00f      	b.n	8006a78 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006a58:	f7fc febe 	bl	80037d8 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b30      	cmp	r3, #48	; 0x30
 8006a64:	d908      	bls.n	8006a78 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f003 0307 	and.w	r3, r3, #7
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e019      	b.n	8006aac <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	f003 0307 	and.w	r3, r3, #7
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e8      	bne.n	8006a58 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	691a      	ldr	r2, [r3, #16]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d005      	beq.n	8006aa0 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	68d2      	ldr	r2, [r2, #12]
 8006a9c:	611a      	str	r2, [r3, #16]
 8006a9e:	e004      	b.n	8006aaa <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006aa8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006ac4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006adc:	4b19      	ldr	r3, [pc, #100]	; (8006b44 <HAL_PWREx_ConfigSupply+0x70>)
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	2b04      	cmp	r3, #4
 8006ae6:	d00a      	beq.n	8006afe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006ae8:	4b16      	ldr	r3, [pc, #88]	; (8006b44 <HAL_PWREx_ConfigSupply+0x70>)
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f003 0307 	and.w	r3, r3, #7
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d001      	beq.n	8006afa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e01f      	b.n	8006b3a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	e01d      	b.n	8006b3a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006afe:	4b11      	ldr	r3, [pc, #68]	; (8006b44 <HAL_PWREx_ConfigSupply+0x70>)
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f023 0207 	bic.w	r2, r3, #7
 8006b06:	490f      	ldr	r1, [pc, #60]	; (8006b44 <HAL_PWREx_ConfigSupply+0x70>)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006b0e:	f7fc fe63 	bl	80037d8 <HAL_GetTick>
 8006b12:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b14:	e009      	b.n	8006b2a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006b16:	f7fc fe5f 	bl	80037d8 <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b24:	d901      	bls.n	8006b2a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e007      	b.n	8006b3a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b2a:	4b06      	ldr	r3, [pc, #24]	; (8006b44 <HAL_PWREx_ConfigSupply+0x70>)
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b36:	d1ee      	bne.n	8006b16 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	58024800 	.word	0x58024800

08006b48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b08c      	sub	sp, #48	; 0x30
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e3ff      	b.n	800735a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 8087 	beq.w	8006c76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b68:	4b99      	ldr	r3, [pc, #612]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b72:	4b97      	ldr	r3, [pc, #604]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b76:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7a:	2b10      	cmp	r3, #16
 8006b7c:	d007      	beq.n	8006b8e <HAL_RCC_OscConfig+0x46>
 8006b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b80:	2b18      	cmp	r3, #24
 8006b82:	d110      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x5e>
 8006b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b86:	f003 0303 	and.w	r3, r3, #3
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d10b      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b8e:	4b90      	ldr	r3, [pc, #576]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d06c      	beq.n	8006c74 <HAL_RCC_OscConfig+0x12c>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d168      	bne.n	8006c74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e3d9      	b.n	800735a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bae:	d106      	bne.n	8006bbe <HAL_RCC_OscConfig+0x76>
 8006bb0:	4b87      	ldr	r3, [pc, #540]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a86      	ldr	r2, [pc, #536]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bba:	6013      	str	r3, [r2, #0]
 8006bbc:	e02e      	b.n	8006c1c <HAL_RCC_OscConfig+0xd4>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10c      	bne.n	8006be0 <HAL_RCC_OscConfig+0x98>
 8006bc6:	4b82      	ldr	r3, [pc, #520]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a81      	ldr	r2, [pc, #516]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	4b7f      	ldr	r3, [pc, #508]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a7e      	ldr	r2, [pc, #504]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006bd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bdc:	6013      	str	r3, [r2, #0]
 8006bde:	e01d      	b.n	8006c1c <HAL_RCC_OscConfig+0xd4>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006be8:	d10c      	bne.n	8006c04 <HAL_RCC_OscConfig+0xbc>
 8006bea:	4b79      	ldr	r3, [pc, #484]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a78      	ldr	r2, [pc, #480]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bf4:	6013      	str	r3, [r2, #0]
 8006bf6:	4b76      	ldr	r3, [pc, #472]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a75      	ldr	r2, [pc, #468]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c00:	6013      	str	r3, [r2, #0]
 8006c02:	e00b      	b.n	8006c1c <HAL_RCC_OscConfig+0xd4>
 8006c04:	4b72      	ldr	r3, [pc, #456]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a71      	ldr	r2, [pc, #452]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	4b6f      	ldr	r3, [pc, #444]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a6e      	ldr	r2, [pc, #440]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d013      	beq.n	8006c4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c24:	f7fc fdd8 	bl	80037d8 <HAL_GetTick>
 8006c28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c2a:	e008      	b.n	8006c3e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c2c:	f7fc fdd4 	bl	80037d8 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b64      	cmp	r3, #100	; 0x64
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e38d      	b.n	800735a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c3e:	4b64      	ldr	r3, [pc, #400]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0f0      	beq.n	8006c2c <HAL_RCC_OscConfig+0xe4>
 8006c4a:	e014      	b.n	8006c76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c4c:	f7fc fdc4 	bl	80037d8 <HAL_GetTick>
 8006c50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c52:	e008      	b.n	8006c66 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c54:	f7fc fdc0 	bl	80037d8 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b64      	cmp	r3, #100	; 0x64
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e379      	b.n	800735a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c66:	4b5a      	ldr	r3, [pc, #360]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1f0      	bne.n	8006c54 <HAL_RCC_OscConfig+0x10c>
 8006c72:	e000      	b.n	8006c76 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 80ae 	beq.w	8006de0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c84:	4b52      	ldr	r3, [pc, #328]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c8c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c8e:	4b50      	ldr	r3, [pc, #320]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c92:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d007      	beq.n	8006caa <HAL_RCC_OscConfig+0x162>
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	2b18      	cmp	r3, #24
 8006c9e:	d13a      	bne.n	8006d16 <HAL_RCC_OscConfig+0x1ce>
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	f003 0303 	and.w	r3, r3, #3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d135      	bne.n	8006d16 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006caa:	4b49      	ldr	r3, [pc, #292]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0304 	and.w	r3, r3, #4
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d005      	beq.n	8006cc2 <HAL_RCC_OscConfig+0x17a>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e34b      	b.n	800735a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cc2:	f7fc fd95 	bl	80037f0 <HAL_GetREVID>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d817      	bhi.n	8006d00 <HAL_RCC_OscConfig+0x1b8>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	2b40      	cmp	r3, #64	; 0x40
 8006cd6:	d108      	bne.n	8006cea <HAL_RCC_OscConfig+0x1a2>
 8006cd8:	4b3d      	ldr	r3, [pc, #244]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006ce0:	4a3b      	ldr	r2, [pc, #236]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ce6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ce8:	e07a      	b.n	8006de0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cea:	4b39      	ldr	r3, [pc, #228]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	031b      	lsls	r3, r3, #12
 8006cf8:	4935      	ldr	r1, [pc, #212]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cfe:	e06f      	b.n	8006de0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d00:	4b33      	ldr	r3, [pc, #204]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	061b      	lsls	r3, r3, #24
 8006d0e:	4930      	ldr	r1, [pc, #192]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d14:	e064      	b.n	8006de0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d045      	beq.n	8006daa <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d1e:	4b2c      	ldr	r3, [pc, #176]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f023 0219 	bic.w	r2, r3, #25
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	4929      	ldr	r1, [pc, #164]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d30:	f7fc fd52 	bl	80037d8 <HAL_GetTick>
 8006d34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d36:	e008      	b.n	8006d4a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d38:	f7fc fd4e 	bl	80037d8 <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d901      	bls.n	8006d4a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e307      	b.n	800735a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d4a:	4b21      	ldr	r3, [pc, #132]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0304 	and.w	r3, r3, #4
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d0f0      	beq.n	8006d38 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d56:	f7fc fd4b 	bl	80037f0 <HAL_GetREVID>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d817      	bhi.n	8006d94 <HAL_RCC_OscConfig+0x24c>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	2b40      	cmp	r3, #64	; 0x40
 8006d6a:	d108      	bne.n	8006d7e <HAL_RCC_OscConfig+0x236>
 8006d6c:	4b18      	ldr	r3, [pc, #96]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006d74:	4a16      	ldr	r2, [pc, #88]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d7a:	6053      	str	r3, [r2, #4]
 8006d7c:	e030      	b.n	8006de0 <HAL_RCC_OscConfig+0x298>
 8006d7e:	4b14      	ldr	r3, [pc, #80]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	031b      	lsls	r3, r3, #12
 8006d8c:	4910      	ldr	r1, [pc, #64]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	604b      	str	r3, [r1, #4]
 8006d92:	e025      	b.n	8006de0 <HAL_RCC_OscConfig+0x298>
 8006d94:	4b0e      	ldr	r3, [pc, #56]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	061b      	lsls	r3, r3, #24
 8006da2:	490b      	ldr	r1, [pc, #44]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	604b      	str	r3, [r1, #4]
 8006da8:	e01a      	b.n	8006de0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006daa:	4b09      	ldr	r3, [pc, #36]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a08      	ldr	r2, [pc, #32]	; (8006dd0 <HAL_RCC_OscConfig+0x288>)
 8006db0:	f023 0301 	bic.w	r3, r3, #1
 8006db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db6:	f7fc fd0f 	bl	80037d8 <HAL_GetTick>
 8006dba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006dbc:	e00a      	b.n	8006dd4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006dbe:	f7fc fd0b 	bl	80037d8 <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d903      	bls.n	8006dd4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e2c4      	b.n	800735a <HAL_RCC_OscConfig+0x812>
 8006dd0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006dd4:	4ba4      	ldr	r3, [pc, #656]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0304 	and.w	r3, r3, #4
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1ee      	bne.n	8006dbe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0310 	and.w	r3, r3, #16
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 80a9 	beq.w	8006f40 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dee:	4b9e      	ldr	r3, [pc, #632]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006df6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006df8:	4b9b      	ldr	r3, [pc, #620]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	2b08      	cmp	r3, #8
 8006e02:	d007      	beq.n	8006e14 <HAL_RCC_OscConfig+0x2cc>
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	2b18      	cmp	r3, #24
 8006e08:	d13a      	bne.n	8006e80 <HAL_RCC_OscConfig+0x338>
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f003 0303 	and.w	r3, r3, #3
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d135      	bne.n	8006e80 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e14:	4b94      	ldr	r3, [pc, #592]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d005      	beq.n	8006e2c <HAL_RCC_OscConfig+0x2e4>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	69db      	ldr	r3, [r3, #28]
 8006e24:	2b80      	cmp	r3, #128	; 0x80
 8006e26:	d001      	beq.n	8006e2c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e296      	b.n	800735a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e2c:	f7fc fce0 	bl	80037f0 <HAL_GetREVID>
 8006e30:	4603      	mov	r3, r0
 8006e32:	f241 0203 	movw	r2, #4099	; 0x1003
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d817      	bhi.n	8006e6a <HAL_RCC_OscConfig+0x322>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	2b20      	cmp	r3, #32
 8006e40:	d108      	bne.n	8006e54 <HAL_RCC_OscConfig+0x30c>
 8006e42:	4b89      	ldr	r3, [pc, #548]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006e4a:	4a87      	ldr	r2, [pc, #540]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006e4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e50:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e52:	e075      	b.n	8006f40 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e54:	4b84      	ldr	r3, [pc, #528]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	069b      	lsls	r3, r3, #26
 8006e62:	4981      	ldr	r1, [pc, #516]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e68:	e06a      	b.n	8006f40 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e6a:	4b7f      	ldr	r3, [pc, #508]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	061b      	lsls	r3, r3, #24
 8006e78:	497b      	ldr	r1, [pc, #492]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e7e:	e05f      	b.n	8006f40 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d042      	beq.n	8006f0e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006e88:	4b77      	ldr	r3, [pc, #476]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a76      	ldr	r2, [pc, #472]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e94:	f7fc fca0 	bl	80037d8 <HAL_GetTick>
 8006e98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e9a:	e008      	b.n	8006eae <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006e9c:	f7fc fc9c 	bl	80037d8 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e255      	b.n	800735a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006eae:	4b6e      	ldr	r3, [pc, #440]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d0f0      	beq.n	8006e9c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006eba:	f7fc fc99 	bl	80037f0 <HAL_GetREVID>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d817      	bhi.n	8006ef8 <HAL_RCC_OscConfig+0x3b0>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	2b20      	cmp	r3, #32
 8006ece:	d108      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x39a>
 8006ed0:	4b65      	ldr	r3, [pc, #404]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006ed8:	4a63      	ldr	r2, [pc, #396]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006eda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ede:	6053      	str	r3, [r2, #4]
 8006ee0:	e02e      	b.n	8006f40 <HAL_RCC_OscConfig+0x3f8>
 8006ee2:	4b61      	ldr	r3, [pc, #388]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	069b      	lsls	r3, r3, #26
 8006ef0:	495d      	ldr	r1, [pc, #372]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	604b      	str	r3, [r1, #4]
 8006ef6:	e023      	b.n	8006f40 <HAL_RCC_OscConfig+0x3f8>
 8006ef8:	4b5b      	ldr	r3, [pc, #364]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	061b      	lsls	r3, r3, #24
 8006f06:	4958      	ldr	r1, [pc, #352]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	60cb      	str	r3, [r1, #12]
 8006f0c:	e018      	b.n	8006f40 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006f0e:	4b56      	ldr	r3, [pc, #344]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a55      	ldr	r2, [pc, #340]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f1a:	f7fc fc5d 	bl	80037d8 <HAL_GetTick>
 8006f1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f20:	e008      	b.n	8006f34 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006f22:	f7fc fc59 	bl	80037d8 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d901      	bls.n	8006f34 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e212      	b.n	800735a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f34:	4b4c      	ldr	r3, [pc, #304]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1f0      	bne.n	8006f22 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0308 	and.w	r3, r3, #8
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d036      	beq.n	8006fba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d019      	beq.n	8006f88 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f54:	4b44      	ldr	r3, [pc, #272]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f58:	4a43      	ldr	r2, [pc, #268]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006f5a:	f043 0301 	orr.w	r3, r3, #1
 8006f5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f60:	f7fc fc3a 	bl	80037d8 <HAL_GetTick>
 8006f64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f66:	e008      	b.n	8006f7a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f68:	f7fc fc36 	bl	80037d8 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d901      	bls.n	8006f7a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e1ef      	b.n	800735a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f7a:	4b3b      	ldr	r3, [pc, #236]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d0f0      	beq.n	8006f68 <HAL_RCC_OscConfig+0x420>
 8006f86:	e018      	b.n	8006fba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f88:	4b37      	ldr	r3, [pc, #220]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f8c:	4a36      	ldr	r2, [pc, #216]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006f8e:	f023 0301 	bic.w	r3, r3, #1
 8006f92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f94:	f7fc fc20 	bl	80037d8 <HAL_GetTick>
 8006f98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f9a:	e008      	b.n	8006fae <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f9c:	f7fc fc1c 	bl	80037d8 <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d901      	bls.n	8006fae <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e1d5      	b.n	800735a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006fae:	4b2e      	ldr	r3, [pc, #184]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1f0      	bne.n	8006f9c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0320 	and.w	r3, r3, #32
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d036      	beq.n	8007034 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d019      	beq.n	8007002 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006fce:	4b26      	ldr	r3, [pc, #152]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a25      	ldr	r2, [pc, #148]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006fd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006fd8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006fda:	f7fc fbfd 	bl	80037d8 <HAL_GetTick>
 8006fde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fe0:	e008      	b.n	8006ff4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006fe2:	f7fc fbf9 	bl	80037d8 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d901      	bls.n	8006ff4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e1b2      	b.n	800735a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006ff4:	4b1c      	ldr	r3, [pc, #112]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d0f0      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x49a>
 8007000:	e018      	b.n	8007034 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007002:	4b19      	ldr	r3, [pc, #100]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a18      	ldr	r2, [pc, #96]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 8007008:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800700c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800700e:	f7fc fbe3 	bl	80037d8 <HAL_GetTick>
 8007012:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007014:	e008      	b.n	8007028 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007016:	f7fc fbdf 	bl	80037d8 <HAL_GetTick>
 800701a:	4602      	mov	r2, r0
 800701c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	2b02      	cmp	r3, #2
 8007022:	d901      	bls.n	8007028 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e198      	b.n	800735a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007028:	4b0f      	ldr	r3, [pc, #60]	; (8007068 <HAL_RCC_OscConfig+0x520>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1f0      	bne.n	8007016 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0304 	and.w	r3, r3, #4
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 8085 	beq.w	800714c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007042:	4b0a      	ldr	r3, [pc, #40]	; (800706c <HAL_RCC_OscConfig+0x524>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a09      	ldr	r2, [pc, #36]	; (800706c <HAL_RCC_OscConfig+0x524>)
 8007048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800704c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800704e:	f7fc fbc3 	bl	80037d8 <HAL_GetTick>
 8007052:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007054:	e00c      	b.n	8007070 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007056:	f7fc fbbf 	bl	80037d8 <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	2b64      	cmp	r3, #100	; 0x64
 8007062:	d905      	bls.n	8007070 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e178      	b.n	800735a <HAL_RCC_OscConfig+0x812>
 8007068:	58024400 	.word	0x58024400
 800706c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007070:	4b96      	ldr	r3, [pc, #600]	; (80072cc <HAL_RCC_OscConfig+0x784>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007078:	2b00      	cmp	r3, #0
 800707a:	d0ec      	beq.n	8007056 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d106      	bne.n	8007092 <HAL_RCC_OscConfig+0x54a>
 8007084:	4b92      	ldr	r3, [pc, #584]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 8007086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007088:	4a91      	ldr	r2, [pc, #580]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 800708a:	f043 0301 	orr.w	r3, r3, #1
 800708e:	6713      	str	r3, [r2, #112]	; 0x70
 8007090:	e02d      	b.n	80070ee <HAL_RCC_OscConfig+0x5a6>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10c      	bne.n	80070b4 <HAL_RCC_OscConfig+0x56c>
 800709a:	4b8d      	ldr	r3, [pc, #564]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 800709c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709e:	4a8c      	ldr	r2, [pc, #560]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 80070a0:	f023 0301 	bic.w	r3, r3, #1
 80070a4:	6713      	str	r3, [r2, #112]	; 0x70
 80070a6:	4b8a      	ldr	r3, [pc, #552]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 80070a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070aa:	4a89      	ldr	r2, [pc, #548]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 80070ac:	f023 0304 	bic.w	r3, r3, #4
 80070b0:	6713      	str	r3, [r2, #112]	; 0x70
 80070b2:	e01c      	b.n	80070ee <HAL_RCC_OscConfig+0x5a6>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	2b05      	cmp	r3, #5
 80070ba:	d10c      	bne.n	80070d6 <HAL_RCC_OscConfig+0x58e>
 80070bc:	4b84      	ldr	r3, [pc, #528]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 80070be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c0:	4a83      	ldr	r2, [pc, #524]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 80070c2:	f043 0304 	orr.w	r3, r3, #4
 80070c6:	6713      	str	r3, [r2, #112]	; 0x70
 80070c8:	4b81      	ldr	r3, [pc, #516]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 80070ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070cc:	4a80      	ldr	r2, [pc, #512]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 80070ce:	f043 0301 	orr.w	r3, r3, #1
 80070d2:	6713      	str	r3, [r2, #112]	; 0x70
 80070d4:	e00b      	b.n	80070ee <HAL_RCC_OscConfig+0x5a6>
 80070d6:	4b7e      	ldr	r3, [pc, #504]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 80070d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070da:	4a7d      	ldr	r2, [pc, #500]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 80070dc:	f023 0301 	bic.w	r3, r3, #1
 80070e0:	6713      	str	r3, [r2, #112]	; 0x70
 80070e2:	4b7b      	ldr	r3, [pc, #492]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 80070e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e6:	4a7a      	ldr	r2, [pc, #488]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 80070e8:	f023 0304 	bic.w	r3, r3, #4
 80070ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d015      	beq.n	8007122 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070f6:	f7fc fb6f 	bl	80037d8 <HAL_GetTick>
 80070fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070fc:	e00a      	b.n	8007114 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070fe:	f7fc fb6b 	bl	80037d8 <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	f241 3288 	movw	r2, #5000	; 0x1388
 800710c:	4293      	cmp	r3, r2
 800710e:	d901      	bls.n	8007114 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e122      	b.n	800735a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007114:	4b6e      	ldr	r3, [pc, #440]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 8007116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b00      	cmp	r3, #0
 800711e:	d0ee      	beq.n	80070fe <HAL_RCC_OscConfig+0x5b6>
 8007120:	e014      	b.n	800714c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007122:	f7fc fb59 	bl	80037d8 <HAL_GetTick>
 8007126:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007128:	e00a      	b.n	8007140 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800712a:	f7fc fb55 	bl	80037d8 <HAL_GetTick>
 800712e:	4602      	mov	r2, r0
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	f241 3288 	movw	r2, #5000	; 0x1388
 8007138:	4293      	cmp	r3, r2
 800713a:	d901      	bls.n	8007140 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e10c      	b.n	800735a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007140:	4b63      	ldr	r3, [pc, #396]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 8007142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1ee      	bne.n	800712a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 8101 	beq.w	8007358 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007156:	4b5e      	ldr	r3, [pc, #376]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800715e:	2b18      	cmp	r3, #24
 8007160:	f000 80bc 	beq.w	80072dc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007168:	2b02      	cmp	r3, #2
 800716a:	f040 8095 	bne.w	8007298 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800716e:	4b58      	ldr	r3, [pc, #352]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a57      	ldr	r2, [pc, #348]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 8007174:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800717a:	f7fc fb2d 	bl	80037d8 <HAL_GetTick>
 800717e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007180:	e008      	b.n	8007194 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007182:	f7fc fb29 	bl	80037d8 <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	2b02      	cmp	r3, #2
 800718e:	d901      	bls.n	8007194 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	e0e2      	b.n	800735a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007194:	4b4e      	ldr	r3, [pc, #312]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1f0      	bne.n	8007182 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071a0:	4b4b      	ldr	r3, [pc, #300]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 80071a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071a4:	4b4b      	ldr	r3, [pc, #300]	; (80072d4 <HAL_RCC_OscConfig+0x78c>)
 80071a6:	4013      	ands	r3, r2
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80071b0:	0112      	lsls	r2, r2, #4
 80071b2:	430a      	orrs	r2, r1
 80071b4:	4946      	ldr	r1, [pc, #280]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	628b      	str	r3, [r1, #40]	; 0x28
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071be:	3b01      	subs	r3, #1
 80071c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c8:	3b01      	subs	r3, #1
 80071ca:	025b      	lsls	r3, r3, #9
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	431a      	orrs	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d4:	3b01      	subs	r3, #1
 80071d6:	041b      	lsls	r3, r3, #16
 80071d8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80071dc:	431a      	orrs	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e2:	3b01      	subs	r3, #1
 80071e4:	061b      	lsls	r3, r3, #24
 80071e6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80071ea:	4939      	ldr	r1, [pc, #228]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80071f0:	4b37      	ldr	r3, [pc, #220]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 80071f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f4:	4a36      	ldr	r2, [pc, #216]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 80071f6:	f023 0301 	bic.w	r3, r3, #1
 80071fa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80071fc:	4b34      	ldr	r3, [pc, #208]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 80071fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007200:	4b35      	ldr	r3, [pc, #212]	; (80072d8 <HAL_RCC_OscConfig+0x790>)
 8007202:	4013      	ands	r3, r2
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007208:	00d2      	lsls	r2, r2, #3
 800720a:	4931      	ldr	r1, [pc, #196]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 800720c:	4313      	orrs	r3, r2
 800720e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007210:	4b2f      	ldr	r3, [pc, #188]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 8007212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007214:	f023 020c 	bic.w	r2, r3, #12
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721c:	492c      	ldr	r1, [pc, #176]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 800721e:	4313      	orrs	r3, r2
 8007220:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007222:	4b2b      	ldr	r3, [pc, #172]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 8007224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007226:	f023 0202 	bic.w	r2, r3, #2
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722e:	4928      	ldr	r1, [pc, #160]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 8007230:	4313      	orrs	r3, r2
 8007232:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007234:	4b26      	ldr	r3, [pc, #152]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 8007236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007238:	4a25      	ldr	r2, [pc, #148]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 800723a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800723e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007240:	4b23      	ldr	r3, [pc, #140]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 8007242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007244:	4a22      	ldr	r2, [pc, #136]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 8007246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800724a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800724c:	4b20      	ldr	r3, [pc, #128]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 800724e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007250:	4a1f      	ldr	r2, [pc, #124]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 8007252:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007256:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007258:	4b1d      	ldr	r3, [pc, #116]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 800725a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725c:	4a1c      	ldr	r2, [pc, #112]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 800725e:	f043 0301 	orr.w	r3, r3, #1
 8007262:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007264:	4b1a      	ldr	r3, [pc, #104]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a19      	ldr	r2, [pc, #100]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 800726a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800726e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007270:	f7fc fab2 	bl	80037d8 <HAL_GetTick>
 8007274:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007276:	e008      	b.n	800728a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007278:	f7fc faae 	bl	80037d8 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	2b02      	cmp	r3, #2
 8007284:	d901      	bls.n	800728a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e067      	b.n	800735a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800728a:	4b11      	ldr	r3, [pc, #68]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0f0      	beq.n	8007278 <HAL_RCC_OscConfig+0x730>
 8007296:	e05f      	b.n	8007358 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007298:	4b0d      	ldr	r3, [pc, #52]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a0c      	ldr	r2, [pc, #48]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 800729e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a4:	f7fc fa98 	bl	80037d8 <HAL_GetTick>
 80072a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072aa:	e008      	b.n	80072be <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072ac:	f7fc fa94 	bl	80037d8 <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d901      	bls.n	80072be <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e04d      	b.n	800735a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072be:	4b04      	ldr	r3, [pc, #16]	; (80072d0 <HAL_RCC_OscConfig+0x788>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1f0      	bne.n	80072ac <HAL_RCC_OscConfig+0x764>
 80072ca:	e045      	b.n	8007358 <HAL_RCC_OscConfig+0x810>
 80072cc:	58024800 	.word	0x58024800
 80072d0:	58024400 	.word	0x58024400
 80072d4:	fffffc0c 	.word	0xfffffc0c
 80072d8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80072dc:	4b21      	ldr	r3, [pc, #132]	; (8007364 <HAL_RCC_OscConfig+0x81c>)
 80072de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80072e2:	4b20      	ldr	r3, [pc, #128]	; (8007364 <HAL_RCC_OscConfig+0x81c>)
 80072e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d031      	beq.n	8007354 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f003 0203 	and.w	r2, r3, #3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d12a      	bne.n	8007354 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	091b      	lsrs	r3, r3, #4
 8007302:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800730a:	429a      	cmp	r2, r3
 800730c:	d122      	bne.n	8007354 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007318:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800731a:	429a      	cmp	r2, r3
 800731c:	d11a      	bne.n	8007354 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	0a5b      	lsrs	r3, r3, #9
 8007322:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800732a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800732c:	429a      	cmp	r2, r3
 800732e:	d111      	bne.n	8007354 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	0c1b      	lsrs	r3, r3, #16
 8007334:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800733e:	429a      	cmp	r2, r3
 8007340:	d108      	bne.n	8007354 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	0e1b      	lsrs	r3, r3, #24
 8007346:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007350:	429a      	cmp	r2, r3
 8007352:	d001      	beq.n	8007358 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e000      	b.n	800735a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3730      	adds	r7, #48	; 0x30
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	58024400 	.word	0x58024400

08007368 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d101      	bne.n	800737c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e19c      	b.n	80076b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800737c:	4b8a      	ldr	r3, [pc, #552]	; (80075a8 <HAL_RCC_ClockConfig+0x240>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 030f 	and.w	r3, r3, #15
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	429a      	cmp	r2, r3
 8007388:	d910      	bls.n	80073ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800738a:	4b87      	ldr	r3, [pc, #540]	; (80075a8 <HAL_RCC_ClockConfig+0x240>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f023 020f 	bic.w	r2, r3, #15
 8007392:	4985      	ldr	r1, [pc, #532]	; (80075a8 <HAL_RCC_ClockConfig+0x240>)
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	4313      	orrs	r3, r2
 8007398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800739a:	4b83      	ldr	r3, [pc, #524]	; (80075a8 <HAL_RCC_ClockConfig+0x240>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 030f 	and.w	r3, r3, #15
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d001      	beq.n	80073ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e184      	b.n	80076b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0304 	and.w	r3, r3, #4
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d010      	beq.n	80073da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	691a      	ldr	r2, [r3, #16]
 80073bc:	4b7b      	ldr	r3, [pc, #492]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d908      	bls.n	80073da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073c8:	4b78      	ldr	r3, [pc, #480]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	4975      	ldr	r1, [pc, #468]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0308 	and.w	r3, r3, #8
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d010      	beq.n	8007408 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	695a      	ldr	r2, [r3, #20]
 80073ea:	4b70      	ldr	r3, [pc, #448]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d908      	bls.n	8007408 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80073f6:	4b6d      	ldr	r3, [pc, #436]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	496a      	ldr	r1, [pc, #424]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 8007404:	4313      	orrs	r3, r2
 8007406:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0310 	and.w	r3, r3, #16
 8007410:	2b00      	cmp	r3, #0
 8007412:	d010      	beq.n	8007436 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	699a      	ldr	r2, [r3, #24]
 8007418:	4b64      	ldr	r3, [pc, #400]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 800741a:	69db      	ldr	r3, [r3, #28]
 800741c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007420:	429a      	cmp	r2, r3
 8007422:	d908      	bls.n	8007436 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007424:	4b61      	ldr	r3, [pc, #388]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	495e      	ldr	r1, [pc, #376]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 8007432:	4313      	orrs	r3, r2
 8007434:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0320 	and.w	r3, r3, #32
 800743e:	2b00      	cmp	r3, #0
 8007440:	d010      	beq.n	8007464 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	69da      	ldr	r2, [r3, #28]
 8007446:	4b59      	ldr	r3, [pc, #356]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800744e:	429a      	cmp	r2, r3
 8007450:	d908      	bls.n	8007464 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007452:	4b56      	ldr	r3, [pc, #344]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 8007454:	6a1b      	ldr	r3, [r3, #32]
 8007456:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	4953      	ldr	r1, [pc, #332]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 8007460:	4313      	orrs	r3, r2
 8007462:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0302 	and.w	r3, r3, #2
 800746c:	2b00      	cmp	r3, #0
 800746e:	d010      	beq.n	8007492 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68da      	ldr	r2, [r3, #12]
 8007474:	4b4d      	ldr	r3, [pc, #308]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	f003 030f 	and.w	r3, r3, #15
 800747c:	429a      	cmp	r2, r3
 800747e:	d908      	bls.n	8007492 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007480:	4b4a      	ldr	r3, [pc, #296]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	f023 020f 	bic.w	r2, r3, #15
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	4947      	ldr	r1, [pc, #284]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 800748e:	4313      	orrs	r3, r2
 8007490:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	d055      	beq.n	800754a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800749e:	4b43      	ldr	r3, [pc, #268]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	4940      	ldr	r1, [pc, #256]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 80074ac:	4313      	orrs	r3, r2
 80074ae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d107      	bne.n	80074c8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074b8:	4b3c      	ldr	r3, [pc, #240]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d121      	bne.n	8007508 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e0f6      	b.n	80076b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	2b03      	cmp	r3, #3
 80074ce:	d107      	bne.n	80074e0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074d0:	4b36      	ldr	r3, [pc, #216]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d115      	bne.n	8007508 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e0ea      	b.n	80076b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d107      	bne.n	80074f8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80074e8:	4b30      	ldr	r3, [pc, #192]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d109      	bne.n	8007508 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e0de      	b.n	80076b6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074f8:	4b2c      	ldr	r3, [pc, #176]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0304 	and.w	r3, r3, #4
 8007500:	2b00      	cmp	r3, #0
 8007502:	d101      	bne.n	8007508 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e0d6      	b.n	80076b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007508:	4b28      	ldr	r3, [pc, #160]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	f023 0207 	bic.w	r2, r3, #7
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	4925      	ldr	r1, [pc, #148]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 8007516:	4313      	orrs	r3, r2
 8007518:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800751a:	f7fc f95d 	bl	80037d8 <HAL_GetTick>
 800751e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007520:	e00a      	b.n	8007538 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007522:	f7fc f959 	bl	80037d8 <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007530:	4293      	cmp	r3, r2
 8007532:	d901      	bls.n	8007538 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e0be      	b.n	80076b6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007538:	4b1c      	ldr	r3, [pc, #112]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	00db      	lsls	r3, r3, #3
 8007546:	429a      	cmp	r2, r3
 8007548:	d1eb      	bne.n	8007522 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0302 	and.w	r3, r3, #2
 8007552:	2b00      	cmp	r3, #0
 8007554:	d010      	beq.n	8007578 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68da      	ldr	r2, [r3, #12]
 800755a:	4b14      	ldr	r3, [pc, #80]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	f003 030f 	and.w	r3, r3, #15
 8007562:	429a      	cmp	r2, r3
 8007564:	d208      	bcs.n	8007578 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007566:	4b11      	ldr	r3, [pc, #68]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	f023 020f 	bic.w	r2, r3, #15
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	490e      	ldr	r1, [pc, #56]	; (80075ac <HAL_RCC_ClockConfig+0x244>)
 8007574:	4313      	orrs	r3, r2
 8007576:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007578:	4b0b      	ldr	r3, [pc, #44]	; (80075a8 <HAL_RCC_ClockConfig+0x240>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 030f 	and.w	r3, r3, #15
 8007580:	683a      	ldr	r2, [r7, #0]
 8007582:	429a      	cmp	r2, r3
 8007584:	d214      	bcs.n	80075b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007586:	4b08      	ldr	r3, [pc, #32]	; (80075a8 <HAL_RCC_ClockConfig+0x240>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f023 020f 	bic.w	r2, r3, #15
 800758e:	4906      	ldr	r1, [pc, #24]	; (80075a8 <HAL_RCC_ClockConfig+0x240>)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	4313      	orrs	r3, r2
 8007594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007596:	4b04      	ldr	r3, [pc, #16]	; (80075a8 <HAL_RCC_ClockConfig+0x240>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 030f 	and.w	r3, r3, #15
 800759e:	683a      	ldr	r2, [r7, #0]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d005      	beq.n	80075b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e086      	b.n	80076b6 <HAL_RCC_ClockConfig+0x34e>
 80075a8:	52002000 	.word	0x52002000
 80075ac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0304 	and.w	r3, r3, #4
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d010      	beq.n	80075de <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	691a      	ldr	r2, [r3, #16]
 80075c0:	4b3f      	ldr	r3, [pc, #252]	; (80076c0 <HAL_RCC_ClockConfig+0x358>)
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d208      	bcs.n	80075de <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80075cc:	4b3c      	ldr	r3, [pc, #240]	; (80076c0 <HAL_RCC_ClockConfig+0x358>)
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	4939      	ldr	r1, [pc, #228]	; (80076c0 <HAL_RCC_ClockConfig+0x358>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0308 	and.w	r3, r3, #8
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d010      	beq.n	800760c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	695a      	ldr	r2, [r3, #20]
 80075ee:	4b34      	ldr	r3, [pc, #208]	; (80076c0 <HAL_RCC_ClockConfig+0x358>)
 80075f0:	69db      	ldr	r3, [r3, #28]
 80075f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d208      	bcs.n	800760c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80075fa:	4b31      	ldr	r3, [pc, #196]	; (80076c0 <HAL_RCC_ClockConfig+0x358>)
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	492e      	ldr	r1, [pc, #184]	; (80076c0 <HAL_RCC_ClockConfig+0x358>)
 8007608:	4313      	orrs	r3, r2
 800760a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0310 	and.w	r3, r3, #16
 8007614:	2b00      	cmp	r3, #0
 8007616:	d010      	beq.n	800763a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	699a      	ldr	r2, [r3, #24]
 800761c:	4b28      	ldr	r3, [pc, #160]	; (80076c0 <HAL_RCC_ClockConfig+0x358>)
 800761e:	69db      	ldr	r3, [r3, #28]
 8007620:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007624:	429a      	cmp	r2, r3
 8007626:	d208      	bcs.n	800763a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007628:	4b25      	ldr	r3, [pc, #148]	; (80076c0 <HAL_RCC_ClockConfig+0x358>)
 800762a:	69db      	ldr	r3, [r3, #28]
 800762c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	4922      	ldr	r1, [pc, #136]	; (80076c0 <HAL_RCC_ClockConfig+0x358>)
 8007636:	4313      	orrs	r3, r2
 8007638:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0320 	and.w	r3, r3, #32
 8007642:	2b00      	cmp	r3, #0
 8007644:	d010      	beq.n	8007668 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	69da      	ldr	r2, [r3, #28]
 800764a:	4b1d      	ldr	r3, [pc, #116]	; (80076c0 <HAL_RCC_ClockConfig+0x358>)
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007652:	429a      	cmp	r2, r3
 8007654:	d208      	bcs.n	8007668 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007656:	4b1a      	ldr	r3, [pc, #104]	; (80076c0 <HAL_RCC_ClockConfig+0x358>)
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	4917      	ldr	r1, [pc, #92]	; (80076c0 <HAL_RCC_ClockConfig+0x358>)
 8007664:	4313      	orrs	r3, r2
 8007666:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007668:	f000 f834 	bl	80076d4 <HAL_RCC_GetSysClockFreq>
 800766c:	4602      	mov	r2, r0
 800766e:	4b14      	ldr	r3, [pc, #80]	; (80076c0 <HAL_RCC_ClockConfig+0x358>)
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	0a1b      	lsrs	r3, r3, #8
 8007674:	f003 030f 	and.w	r3, r3, #15
 8007678:	4912      	ldr	r1, [pc, #72]	; (80076c4 <HAL_RCC_ClockConfig+0x35c>)
 800767a:	5ccb      	ldrb	r3, [r1, r3]
 800767c:	f003 031f 	and.w	r3, r3, #31
 8007680:	fa22 f303 	lsr.w	r3, r2, r3
 8007684:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007686:	4b0e      	ldr	r3, [pc, #56]	; (80076c0 <HAL_RCC_ClockConfig+0x358>)
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	f003 030f 	and.w	r3, r3, #15
 800768e:	4a0d      	ldr	r2, [pc, #52]	; (80076c4 <HAL_RCC_ClockConfig+0x35c>)
 8007690:	5cd3      	ldrb	r3, [r2, r3]
 8007692:	f003 031f 	and.w	r3, r3, #31
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	fa22 f303 	lsr.w	r3, r2, r3
 800769c:	4a0a      	ldr	r2, [pc, #40]	; (80076c8 <HAL_RCC_ClockConfig+0x360>)
 800769e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80076a0:	4a0a      	ldr	r2, [pc, #40]	; (80076cc <HAL_RCC_ClockConfig+0x364>)
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80076a6:	4b0a      	ldr	r3, [pc, #40]	; (80076d0 <HAL_RCC_ClockConfig+0x368>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fb fa8c 	bl	8002bc8 <HAL_InitTick>
 80076b0:	4603      	mov	r3, r0
 80076b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3718      	adds	r7, #24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	58024400 	.word	0x58024400
 80076c4:	0800da98 	.word	0x0800da98
 80076c8:	20000004 	.word	0x20000004
 80076cc:	20000000 	.word	0x20000000
 80076d0:	20000008 	.word	0x20000008

080076d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b089      	sub	sp, #36	; 0x24
 80076d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076da:	4bb3      	ldr	r3, [pc, #716]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076e2:	2b18      	cmp	r3, #24
 80076e4:	f200 8155 	bhi.w	8007992 <HAL_RCC_GetSysClockFreq+0x2be>
 80076e8:	a201      	add	r2, pc, #4	; (adr r2, 80076f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80076ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ee:	bf00      	nop
 80076f0:	08007755 	.word	0x08007755
 80076f4:	08007993 	.word	0x08007993
 80076f8:	08007993 	.word	0x08007993
 80076fc:	08007993 	.word	0x08007993
 8007700:	08007993 	.word	0x08007993
 8007704:	08007993 	.word	0x08007993
 8007708:	08007993 	.word	0x08007993
 800770c:	08007993 	.word	0x08007993
 8007710:	0800777b 	.word	0x0800777b
 8007714:	08007993 	.word	0x08007993
 8007718:	08007993 	.word	0x08007993
 800771c:	08007993 	.word	0x08007993
 8007720:	08007993 	.word	0x08007993
 8007724:	08007993 	.word	0x08007993
 8007728:	08007993 	.word	0x08007993
 800772c:	08007993 	.word	0x08007993
 8007730:	08007781 	.word	0x08007781
 8007734:	08007993 	.word	0x08007993
 8007738:	08007993 	.word	0x08007993
 800773c:	08007993 	.word	0x08007993
 8007740:	08007993 	.word	0x08007993
 8007744:	08007993 	.word	0x08007993
 8007748:	08007993 	.word	0x08007993
 800774c:	08007993 	.word	0x08007993
 8007750:	08007787 	.word	0x08007787
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007754:	4b94      	ldr	r3, [pc, #592]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0320 	and.w	r3, r3, #32
 800775c:	2b00      	cmp	r3, #0
 800775e:	d009      	beq.n	8007774 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007760:	4b91      	ldr	r3, [pc, #580]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	08db      	lsrs	r3, r3, #3
 8007766:	f003 0303 	and.w	r3, r3, #3
 800776a:	4a90      	ldr	r2, [pc, #576]	; (80079ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800776c:	fa22 f303 	lsr.w	r3, r2, r3
 8007770:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007772:	e111      	b.n	8007998 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007774:	4b8d      	ldr	r3, [pc, #564]	; (80079ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007776:	61bb      	str	r3, [r7, #24]
    break;
 8007778:	e10e      	b.n	8007998 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800777a:	4b8d      	ldr	r3, [pc, #564]	; (80079b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800777c:	61bb      	str	r3, [r7, #24]
    break;
 800777e:	e10b      	b.n	8007998 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007780:	4b8c      	ldr	r3, [pc, #560]	; (80079b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007782:	61bb      	str	r3, [r7, #24]
    break;
 8007784:	e108      	b.n	8007998 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007786:	4b88      	ldr	r3, [pc, #544]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778a:	f003 0303 	and.w	r3, r3, #3
 800778e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007790:	4b85      	ldr	r3, [pc, #532]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007794:	091b      	lsrs	r3, r3, #4
 8007796:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800779a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800779c:	4b82      	ldr	r3, [pc, #520]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800779e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80077a6:	4b80      	ldr	r3, [pc, #512]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077aa:	08db      	lsrs	r3, r3, #3
 80077ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	fb02 f303 	mul.w	r3, r2, r3
 80077b6:	ee07 3a90 	vmov	s15, r3
 80077ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077be:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 80e1 	beq.w	800798c <HAL_RCC_GetSysClockFreq+0x2b8>
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	f000 8083 	beq.w	80078d8 <HAL_RCC_GetSysClockFreq+0x204>
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	f200 80a1 	bhi.w	800791c <HAL_RCC_GetSysClockFreq+0x248>
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d003      	beq.n	80077e8 <HAL_RCC_GetSysClockFreq+0x114>
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d056      	beq.n	8007894 <HAL_RCC_GetSysClockFreq+0x1c0>
 80077e6:	e099      	b.n	800791c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077e8:	4b6f      	ldr	r3, [pc, #444]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0320 	and.w	r3, r3, #32
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d02d      	beq.n	8007850 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077f4:	4b6c      	ldr	r3, [pc, #432]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	08db      	lsrs	r3, r3, #3
 80077fa:	f003 0303 	and.w	r3, r3, #3
 80077fe:	4a6b      	ldr	r2, [pc, #428]	; (80079ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007800:	fa22 f303 	lsr.w	r3, r2, r3
 8007804:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	ee07 3a90 	vmov	s15, r3
 800780c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800781e:	4b62      	ldr	r3, [pc, #392]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007826:	ee07 3a90 	vmov	s15, r3
 800782a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800782e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007832:	eddf 5a61 	vldr	s11, [pc, #388]	; 80079b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800783a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800783e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800784a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800784e:	e087      	b.n	8007960 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	ee07 3a90 	vmov	s15, r3
 8007856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800785a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80079bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800785e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007862:	4b51      	ldr	r3, [pc, #324]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800786a:	ee07 3a90 	vmov	s15, r3
 800786e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007872:	ed97 6a02 	vldr	s12, [r7, #8]
 8007876:	eddf 5a50 	vldr	s11, [pc, #320]	; 80079b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800787a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800787e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800788a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800788e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007892:	e065      	b.n	8007960 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	ee07 3a90 	vmov	s15, r3
 800789a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800789e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80079c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80078a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078a6:	4b40      	ldr	r3, [pc, #256]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ae:	ee07 3a90 	vmov	s15, r3
 80078b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80078ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80079b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078d6:	e043      	b.n	8007960 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	ee07 3a90 	vmov	s15, r3
 80078de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80079c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80078e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ea:	4b2f      	ldr	r3, [pc, #188]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f2:	ee07 3a90 	vmov	s15, r3
 80078f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80078fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80079b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800790a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800790e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800791a:	e021      	b.n	8007960 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	ee07 3a90 	vmov	s15, r3
 8007922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007926:	eddf 6a26 	vldr	s13, [pc, #152]	; 80079c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800792a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800792e:	4b1e      	ldr	r3, [pc, #120]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007936:	ee07 3a90 	vmov	s15, r3
 800793a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800793e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007942:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80079b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800794a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800794e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800795a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800795e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007960:	4b11      	ldr	r3, [pc, #68]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007964:	0a5b      	lsrs	r3, r3, #9
 8007966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800796a:	3301      	adds	r3, #1
 800796c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	ee07 3a90 	vmov	s15, r3
 8007974:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007978:	edd7 6a07 	vldr	s13, [r7, #28]
 800797c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007984:	ee17 3a90 	vmov	r3, s15
 8007988:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800798a:	e005      	b.n	8007998 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800798c:	2300      	movs	r3, #0
 800798e:	61bb      	str	r3, [r7, #24]
    break;
 8007990:	e002      	b.n	8007998 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007992:	4b07      	ldr	r3, [pc, #28]	; (80079b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007994:	61bb      	str	r3, [r7, #24]
    break;
 8007996:	bf00      	nop
  }

  return sysclockfreq;
 8007998:	69bb      	ldr	r3, [r7, #24]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3724      	adds	r7, #36	; 0x24
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	58024400 	.word	0x58024400
 80079ac:	03d09000 	.word	0x03d09000
 80079b0:	003d0900 	.word	0x003d0900
 80079b4:	017d7840 	.word	0x017d7840
 80079b8:	46000000 	.word	0x46000000
 80079bc:	4c742400 	.word	0x4c742400
 80079c0:	4a742400 	.word	0x4a742400
 80079c4:	4bbebc20 	.word	0x4bbebc20

080079c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80079ce:	f7ff fe81 	bl	80076d4 <HAL_RCC_GetSysClockFreq>
 80079d2:	4602      	mov	r2, r0
 80079d4:	4b10      	ldr	r3, [pc, #64]	; (8007a18 <HAL_RCC_GetHCLKFreq+0x50>)
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	0a1b      	lsrs	r3, r3, #8
 80079da:	f003 030f 	and.w	r3, r3, #15
 80079de:	490f      	ldr	r1, [pc, #60]	; (8007a1c <HAL_RCC_GetHCLKFreq+0x54>)
 80079e0:	5ccb      	ldrb	r3, [r1, r3]
 80079e2:	f003 031f 	and.w	r3, r3, #31
 80079e6:	fa22 f303 	lsr.w	r3, r2, r3
 80079ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80079ec:	4b0a      	ldr	r3, [pc, #40]	; (8007a18 <HAL_RCC_GetHCLKFreq+0x50>)
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	f003 030f 	and.w	r3, r3, #15
 80079f4:	4a09      	ldr	r2, [pc, #36]	; (8007a1c <HAL_RCC_GetHCLKFreq+0x54>)
 80079f6:	5cd3      	ldrb	r3, [r2, r3]
 80079f8:	f003 031f 	and.w	r3, r3, #31
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007a02:	4a07      	ldr	r2, [pc, #28]	; (8007a20 <HAL_RCC_GetHCLKFreq+0x58>)
 8007a04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a06:	4a07      	ldr	r2, [pc, #28]	; (8007a24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007a0c:	4b04      	ldr	r3, [pc, #16]	; (8007a20 <HAL_RCC_GetHCLKFreq+0x58>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	58024400 	.word	0x58024400
 8007a1c:	0800da98 	.word	0x0800da98
 8007a20:	20000004 	.word	0x20000004
 8007a24:	20000000 	.word	0x20000000

08007a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007a2c:	f7ff ffcc 	bl	80079c8 <HAL_RCC_GetHCLKFreq>
 8007a30:	4602      	mov	r2, r0
 8007a32:	4b06      	ldr	r3, [pc, #24]	; (8007a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a34:	69db      	ldr	r3, [r3, #28]
 8007a36:	091b      	lsrs	r3, r3, #4
 8007a38:	f003 0307 	and.w	r3, r3, #7
 8007a3c:	4904      	ldr	r1, [pc, #16]	; (8007a50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a3e:	5ccb      	ldrb	r3, [r1, r3]
 8007a40:	f003 031f 	and.w	r3, r3, #31
 8007a44:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	58024400 	.word	0x58024400
 8007a50:	0800da98 	.word	0x0800da98

08007a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007a58:	f7ff ffb6 	bl	80079c8 <HAL_RCC_GetHCLKFreq>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	4b06      	ldr	r3, [pc, #24]	; (8007a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	0a1b      	lsrs	r3, r3, #8
 8007a64:	f003 0307 	and.w	r3, r3, #7
 8007a68:	4904      	ldr	r1, [pc, #16]	; (8007a7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a6a:	5ccb      	ldrb	r3, [r1, r3]
 8007a6c:	f003 031f 	and.w	r3, r3, #31
 8007a70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	58024400 	.word	0x58024400
 8007a7c:	0800da98 	.word	0x0800da98

08007a80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	223f      	movs	r2, #63	; 0x3f
 8007a8e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007a90:	4b1a      	ldr	r3, [pc, #104]	; (8007afc <HAL_RCC_GetClockConfig+0x7c>)
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	f003 0207 	and.w	r2, r3, #7
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007a9c:	4b17      	ldr	r3, [pc, #92]	; (8007afc <HAL_RCC_GetClockConfig+0x7c>)
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007aa8:	4b14      	ldr	r3, [pc, #80]	; (8007afc <HAL_RCC_GetClockConfig+0x7c>)
 8007aaa:	699b      	ldr	r3, [r3, #24]
 8007aac:	f003 020f 	and.w	r2, r3, #15
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007ab4:	4b11      	ldr	r3, [pc, #68]	; (8007afc <HAL_RCC_GetClockConfig+0x7c>)
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007ac0:	4b0e      	ldr	r3, [pc, #56]	; (8007afc <HAL_RCC_GetClockConfig+0x7c>)
 8007ac2:	69db      	ldr	r3, [r3, #28]
 8007ac4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007acc:	4b0b      	ldr	r3, [pc, #44]	; (8007afc <HAL_RCC_GetClockConfig+0x7c>)
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007ad8:	4b08      	ldr	r3, [pc, #32]	; (8007afc <HAL_RCC_GetClockConfig+0x7c>)
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007ae4:	4b06      	ldr	r3, [pc, #24]	; (8007b00 <HAL_RCC_GetClockConfig+0x80>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 020f 	and.w	r2, r3, #15
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	601a      	str	r2, [r3, #0]
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	58024400 	.word	0x58024400
 8007b00:	52002000 	.word	0x52002000

08007b04 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b086      	sub	sp, #24
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b10:	2300      	movs	r3, #0
 8007b12:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d03f      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b28:	d02a      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007b2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b2e:	d824      	bhi.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007b30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b34:	d018      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007b36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b3a:	d81e      	bhi.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d003      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007b40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b44:	d007      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007b46:	e018      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b48:	4bab      	ldr	r3, [pc, #684]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4c:	4aaa      	ldr	r2, [pc, #680]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007b54:	e015      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	3304      	adds	r3, #4
 8007b5a:	2102      	movs	r1, #2
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f001 f9cf 	bl	8008f00 <RCCEx_PLL2_Config>
 8007b62:	4603      	mov	r3, r0
 8007b64:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007b66:	e00c      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	3324      	adds	r3, #36	; 0x24
 8007b6c:	2102      	movs	r1, #2
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f001 fa78 	bl	8009064 <RCCEx_PLL3_Config>
 8007b74:	4603      	mov	r3, r0
 8007b76:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007b78:	e003      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b7e:	e000      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007b80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b82:	7dfb      	ldrb	r3, [r7, #23]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d109      	bne.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007b88:	4b9b      	ldr	r3, [pc, #620]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b94:	4998      	ldr	r1, [pc, #608]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	650b      	str	r3, [r1, #80]	; 0x50
 8007b9a:	e001      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b9c:	7dfb      	ldrb	r3, [r7, #23]
 8007b9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d03d      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb0:	2b04      	cmp	r3, #4
 8007bb2:	d826      	bhi.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007bb4:	a201      	add	r2, pc, #4	; (adr r2, 8007bbc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bba:	bf00      	nop
 8007bbc:	08007bd1 	.word	0x08007bd1
 8007bc0:	08007bdf 	.word	0x08007bdf
 8007bc4:	08007bf1 	.word	0x08007bf1
 8007bc8:	08007c09 	.word	0x08007c09
 8007bcc:	08007c09 	.word	0x08007c09
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bd0:	4b89      	ldr	r3, [pc, #548]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd4:	4a88      	ldr	r2, [pc, #544]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bdc:	e015      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	3304      	adds	r3, #4
 8007be2:	2100      	movs	r1, #0
 8007be4:	4618      	mov	r0, r3
 8007be6:	f001 f98b 	bl	8008f00 <RCCEx_PLL2_Config>
 8007bea:	4603      	mov	r3, r0
 8007bec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bee:	e00c      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	3324      	adds	r3, #36	; 0x24
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f001 fa34 	bl	8009064 <RCCEx_PLL3_Config>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c00:	e003      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	75fb      	strb	r3, [r7, #23]
      break;
 8007c06:	e000      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007c08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c0a:	7dfb      	ldrb	r3, [r7, #23]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d109      	bne.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c10:	4b79      	ldr	r3, [pc, #484]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c14:	f023 0207 	bic.w	r2, r3, #7
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c1c:	4976      	ldr	r1, [pc, #472]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	650b      	str	r3, [r1, #80]	; 0x50
 8007c22:	e001      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c24:	7dfb      	ldrb	r3, [r7, #23]
 8007c26:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d042      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c3c:	d02b      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c42:	d825      	bhi.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007c44:	2bc0      	cmp	r3, #192	; 0xc0
 8007c46:	d028      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007c48:	2bc0      	cmp	r3, #192	; 0xc0
 8007c4a:	d821      	bhi.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007c4c:	2b80      	cmp	r3, #128	; 0x80
 8007c4e:	d016      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007c50:	2b80      	cmp	r3, #128	; 0x80
 8007c52:	d81d      	bhi.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d002      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007c58:	2b40      	cmp	r3, #64	; 0x40
 8007c5a:	d007      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007c5c:	e018      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c5e:	4b66      	ldr	r3, [pc, #408]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c62:	4a65      	ldr	r2, [pc, #404]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007c6a:	e017      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	3304      	adds	r3, #4
 8007c70:	2100      	movs	r1, #0
 8007c72:	4618      	mov	r0, r3
 8007c74:	f001 f944 	bl	8008f00 <RCCEx_PLL2_Config>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007c7c:	e00e      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	3324      	adds	r3, #36	; 0x24
 8007c82:	2100      	movs	r1, #0
 8007c84:	4618      	mov	r0, r3
 8007c86:	f001 f9ed 	bl	8009064 <RCCEx_PLL3_Config>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007c8e:	e005      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	75fb      	strb	r3, [r7, #23]
      break;
 8007c94:	e002      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007c96:	bf00      	nop
 8007c98:	e000      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007c9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c9c:	7dfb      	ldrb	r3, [r7, #23]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d109      	bne.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007ca2:	4b55      	ldr	r3, [pc, #340]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cae:	4952      	ldr	r1, [pc, #328]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	650b      	str	r3, [r1, #80]	; 0x50
 8007cb4:	e001      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cb6:	7dfb      	ldrb	r3, [r7, #23]
 8007cb8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d049      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ccc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007cd0:	d030      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007cd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007cd6:	d82a      	bhi.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007cd8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007cdc:	d02c      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007cde:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ce2:	d824      	bhi.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007ce4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ce8:	d018      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007cea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cee:	d81e      	bhi.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d003      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007cf4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cf8:	d007      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007cfa:	e018      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cfc:	4b3e      	ldr	r3, [pc, #248]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d00:	4a3d      	ldr	r2, [pc, #244]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d08:	e017      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	2100      	movs	r1, #0
 8007d10:	4618      	mov	r0, r3
 8007d12:	f001 f8f5 	bl	8008f00 <RCCEx_PLL2_Config>
 8007d16:	4603      	mov	r3, r0
 8007d18:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007d1a:	e00e      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	3324      	adds	r3, #36	; 0x24
 8007d20:	2100      	movs	r1, #0
 8007d22:	4618      	mov	r0, r3
 8007d24:	f001 f99e 	bl	8009064 <RCCEx_PLL3_Config>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d2c:	e005      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	75fb      	strb	r3, [r7, #23]
      break;
 8007d32:	e002      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007d34:	bf00      	nop
 8007d36:	e000      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d3a:	7dfb      	ldrb	r3, [r7, #23]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10a      	bne.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007d40:	4b2d      	ldr	r3, [pc, #180]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d44:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007d4e:	492a      	ldr	r1, [pc, #168]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d50:	4313      	orrs	r3, r2
 8007d52:	658b      	str	r3, [r1, #88]	; 0x58
 8007d54:	e001      	b.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d56:	7dfb      	ldrb	r3, [r7, #23]
 8007d58:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d04c      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007d6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d70:	d030      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007d72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d76:	d82a      	bhi.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007d78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d7c:	d02c      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007d7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d82:	d824      	bhi.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007d84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d88:	d018      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007d8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d8e:	d81e      	bhi.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d003      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d98:	d007      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007d9a:	e018      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d9c:	4b16      	ldr	r3, [pc, #88]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da0:	4a15      	ldr	r2, [pc, #84]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007da6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007da8:	e017      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	3304      	adds	r3, #4
 8007dae:	2100      	movs	r1, #0
 8007db0:	4618      	mov	r0, r3
 8007db2:	f001 f8a5 	bl	8008f00 <RCCEx_PLL2_Config>
 8007db6:	4603      	mov	r3, r0
 8007db8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007dba:	e00e      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	3324      	adds	r3, #36	; 0x24
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f001 f94e 	bl	8009064 <RCCEx_PLL3_Config>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007dcc:	e005      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd2:	e002      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007dd4:	bf00      	nop
 8007dd6:	e000      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dda:	7dfb      	ldrb	r3, [r7, #23]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10d      	bne.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007de0:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007de4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007dee:	4902      	ldr	r1, [pc, #8]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	658b      	str	r3, [r1, #88]	; 0x58
 8007df4:	e004      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007df6:	bf00      	nop
 8007df8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dfc:	7dfb      	ldrb	r3, [r7, #23]
 8007dfe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d032      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e10:	2b30      	cmp	r3, #48	; 0x30
 8007e12:	d01c      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007e14:	2b30      	cmp	r3, #48	; 0x30
 8007e16:	d817      	bhi.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007e18:	2b20      	cmp	r3, #32
 8007e1a:	d00c      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007e1c:	2b20      	cmp	r3, #32
 8007e1e:	d813      	bhi.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d016      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007e24:	2b10      	cmp	r3, #16
 8007e26:	d10f      	bne.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e28:	4baf      	ldr	r3, [pc, #700]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2c:	4aae      	ldr	r2, [pc, #696]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007e34:	e00e      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	3304      	adds	r3, #4
 8007e3a:	2102      	movs	r1, #2
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f001 f85f 	bl	8008f00 <RCCEx_PLL2_Config>
 8007e42:	4603      	mov	r3, r0
 8007e44:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007e46:	e005      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e4c:	e002      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007e4e:	bf00      	nop
 8007e50:	e000      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007e52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e54:	7dfb      	ldrb	r3, [r7, #23]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d109      	bne.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007e5a:	4ba3      	ldr	r3, [pc, #652]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e5e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e66:	49a0      	ldr	r1, [pc, #640]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007e6c:	e001      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e6e:	7dfb      	ldrb	r3, [r7, #23]
 8007e70:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d047      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e86:	d030      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007e88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e8c:	d82a      	bhi.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007e8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e92:	d02c      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007e94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e98:	d824      	bhi.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e9e:	d018      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ea4:	d81e      	bhi.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d003      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eae:	d007      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007eb0:	e018      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007eb2:	4b8d      	ldr	r3, [pc, #564]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb6:	4a8c      	ldr	r2, [pc, #560]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ebc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ebe:	e017      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	3304      	adds	r3, #4
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f001 f81a 	bl	8008f00 <RCCEx_PLL2_Config>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ed0:	e00e      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	3324      	adds	r3, #36	; 0x24
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f001 f8c3 	bl	8009064 <RCCEx_PLL3_Config>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ee2:	e005      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ee8:	e002      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007eea:	bf00      	nop
 8007eec:	e000      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d109      	bne.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007ef6:	4b7c      	ldr	r3, [pc, #496]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007efa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f02:	4979      	ldr	r1, [pc, #484]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f04:	4313      	orrs	r3, r2
 8007f06:	650b      	str	r3, [r1, #80]	; 0x50
 8007f08:	e001      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f0a:	7dfb      	ldrb	r3, [r7, #23]
 8007f0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d049      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f22:	d02e      	beq.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f28:	d828      	bhi.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007f2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f2e:	d02a      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007f30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f34:	d822      	bhi.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007f36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f3a:	d026      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007f3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f40:	d81c      	bhi.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007f42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f46:	d010      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007f48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f4c:	d816      	bhi.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d01d      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f56:	d111      	bne.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	3304      	adds	r3, #4
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 ffce 	bl	8008f00 <RCCEx_PLL2_Config>
 8007f64:	4603      	mov	r3, r0
 8007f66:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007f68:	e012      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	3324      	adds	r3, #36	; 0x24
 8007f6e:	2101      	movs	r1, #1
 8007f70:	4618      	mov	r0, r3
 8007f72:	f001 f877 	bl	8009064 <RCCEx_PLL3_Config>
 8007f76:	4603      	mov	r3, r0
 8007f78:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007f7a:	e009      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f80:	e006      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007f82:	bf00      	nop
 8007f84:	e004      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007f86:	bf00      	nop
 8007f88:	e002      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007f8a:	bf00      	nop
 8007f8c:	e000      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f90:	7dfb      	ldrb	r3, [r7, #23]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d109      	bne.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007f96:	4b54      	ldr	r3, [pc, #336]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f9a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fa2:	4951      	ldr	r1, [pc, #324]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	650b      	str	r3, [r1, #80]	; 0x50
 8007fa8:	e001      	b.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007faa:	7dfb      	ldrb	r3, [r7, #23]
 8007fac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d04b      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007fc4:	d02e      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007fc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007fca:	d828      	bhi.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fd0:	d02a      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fd6:	d822      	bhi.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007fd8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007fdc:	d026      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007fde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007fe2:	d81c      	bhi.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007fe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fe8:	d010      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007fea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fee:	d816      	bhi.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d01d      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007ff4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ff8:	d111      	bne.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	2101      	movs	r1, #1
 8008000:	4618      	mov	r0, r3
 8008002:	f000 ff7d 	bl	8008f00 <RCCEx_PLL2_Config>
 8008006:	4603      	mov	r3, r0
 8008008:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800800a:	e012      	b.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3324      	adds	r3, #36	; 0x24
 8008010:	2101      	movs	r1, #1
 8008012:	4618      	mov	r0, r3
 8008014:	f001 f826 	bl	8009064 <RCCEx_PLL3_Config>
 8008018:	4603      	mov	r3, r0
 800801a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800801c:	e009      	b.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	75fb      	strb	r3, [r7, #23]
      break;
 8008022:	e006      	b.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008024:	bf00      	nop
 8008026:	e004      	b.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008028:	bf00      	nop
 800802a:	e002      	b.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800802c:	bf00      	nop
 800802e:	e000      	b.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008030:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008032:	7dfb      	ldrb	r3, [r7, #23]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d10a      	bne.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008038:	4b2b      	ldr	r3, [pc, #172]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800803a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800803c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008046:	4928      	ldr	r1, [pc, #160]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008048:	4313      	orrs	r3, r2
 800804a:	658b      	str	r3, [r1, #88]	; 0x58
 800804c:	e001      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800804e:	7dfb      	ldrb	r3, [r7, #23]
 8008050:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d02f      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008062:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008066:	d00e      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800806c:	d814      	bhi.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800806e:	2b00      	cmp	r3, #0
 8008070:	d015      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008076:	d10f      	bne.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008078:	4b1b      	ldr	r3, [pc, #108]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800807a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807c:	4a1a      	ldr	r2, [pc, #104]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800807e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008082:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008084:	e00c      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	3304      	adds	r3, #4
 800808a:	2101      	movs	r1, #1
 800808c:	4618      	mov	r0, r3
 800808e:	f000 ff37 	bl	8008f00 <RCCEx_PLL2_Config>
 8008092:	4603      	mov	r3, r0
 8008094:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008096:	e003      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	75fb      	strb	r3, [r7, #23]
      break;
 800809c:	e000      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800809e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080a0:	7dfb      	ldrb	r3, [r7, #23]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d109      	bne.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80080a6:	4b10      	ldr	r3, [pc, #64]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80080a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080b2:	490d      	ldr	r1, [pc, #52]	; (80080e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80080b4:	4313      	orrs	r3, r2
 80080b6:	650b      	str	r3, [r1, #80]	; 0x50
 80080b8:	e001      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ba:	7dfb      	ldrb	r3, [r7, #23]
 80080bc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d033      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ce:	2b03      	cmp	r3, #3
 80080d0:	d81c      	bhi.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80080d2:	a201      	add	r2, pc, #4	; (adr r2, 80080d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80080d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d8:	08008113 	.word	0x08008113
 80080dc:	080080ed 	.word	0x080080ed
 80080e0:	080080fb 	.word	0x080080fb
 80080e4:	08008113 	.word	0x08008113
 80080e8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080ec:	4bb8      	ldr	r3, [pc, #736]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f0:	4ab7      	ldr	r2, [pc, #732]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80080f8:	e00c      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	3304      	adds	r3, #4
 80080fe:	2102      	movs	r1, #2
 8008100:	4618      	mov	r0, r3
 8008102:	f000 fefd 	bl	8008f00 <RCCEx_PLL2_Config>
 8008106:	4603      	mov	r3, r0
 8008108:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800810a:	e003      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	75fb      	strb	r3, [r7, #23]
      break;
 8008110:	e000      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008112:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008114:	7dfb      	ldrb	r3, [r7, #23]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d109      	bne.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800811a:	4bad      	ldr	r3, [pc, #692]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800811c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800811e:	f023 0203 	bic.w	r2, r3, #3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008126:	49aa      	ldr	r1, [pc, #680]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008128:	4313      	orrs	r3, r2
 800812a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800812c:	e001      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800812e:	7dfb      	ldrb	r3, [r7, #23]
 8008130:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800813a:	2b00      	cmp	r3, #0
 800813c:	f000 8086 	beq.w	800824c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008140:	4ba4      	ldr	r3, [pc, #656]	; (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4aa3      	ldr	r2, [pc, #652]	; (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800814a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800814c:	f7fb fb44 	bl	80037d8 <HAL_GetTick>
 8008150:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008152:	e009      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008154:	f7fb fb40 	bl	80037d8 <HAL_GetTick>
 8008158:	4602      	mov	r2, r0
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	2b64      	cmp	r3, #100	; 0x64
 8008160:	d902      	bls.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	75fb      	strb	r3, [r7, #23]
        break;
 8008166:	e005      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008168:	4b9a      	ldr	r3, [pc, #616]	; (80083d4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008170:	2b00      	cmp	r3, #0
 8008172:	d0ef      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008174:	7dfb      	ldrb	r3, [r7, #23]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d166      	bne.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800817a:	4b95      	ldr	r3, [pc, #596]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800817c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008184:	4053      	eors	r3, r2
 8008186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800818a:	2b00      	cmp	r3, #0
 800818c:	d013      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800818e:	4b90      	ldr	r3, [pc, #576]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008196:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008198:	4b8d      	ldr	r3, [pc, #564]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800819a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800819c:	4a8c      	ldr	r2, [pc, #560]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800819e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081a2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80081a4:	4b8a      	ldr	r3, [pc, #552]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a8:	4a89      	ldr	r2, [pc, #548]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081ae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80081b0:	4a87      	ldr	r2, [pc, #540]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80081bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081c0:	d115      	bne.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c2:	f7fb fb09 	bl	80037d8 <HAL_GetTick>
 80081c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081c8:	e00b      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081ca:	f7fb fb05 	bl	80037d8 <HAL_GetTick>
 80081ce:	4602      	mov	r2, r0
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80081d8:	4293      	cmp	r3, r2
 80081da:	d902      	bls.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	75fb      	strb	r3, [r7, #23]
            break;
 80081e0:	e005      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081e2:	4b7b      	ldr	r3, [pc, #492]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e6:	f003 0302 	and.w	r3, r3, #2
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d0ed      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80081ee:	7dfb      	ldrb	r3, [r7, #23]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d126      	bne.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80081fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008202:	d10d      	bne.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008204:	4b72      	ldr	r3, [pc, #456]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008212:	0919      	lsrs	r1, r3, #4
 8008214:	4b70      	ldr	r3, [pc, #448]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8008216:	400b      	ands	r3, r1
 8008218:	496d      	ldr	r1, [pc, #436]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800821a:	4313      	orrs	r3, r2
 800821c:	610b      	str	r3, [r1, #16]
 800821e:	e005      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008220:	4b6b      	ldr	r3, [pc, #428]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	4a6a      	ldr	r2, [pc, #424]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008226:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800822a:	6113      	str	r3, [r2, #16]
 800822c:	4b68      	ldr	r3, [pc, #416]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800822e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800823a:	4965      	ldr	r1, [pc, #404]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800823c:	4313      	orrs	r3, r2
 800823e:	670b      	str	r3, [r1, #112]	; 0x70
 8008240:	e004      	b.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008242:	7dfb      	ldrb	r3, [r7, #23]
 8008244:	75bb      	strb	r3, [r7, #22]
 8008246:	e001      	b.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008248:	7dfb      	ldrb	r3, [r7, #23]
 800824a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	2b00      	cmp	r3, #0
 8008256:	d07e      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800825c:	2b28      	cmp	r3, #40	; 0x28
 800825e:	d867      	bhi.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008260:	a201      	add	r2, pc, #4	; (adr r2, 8008268 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008266:	bf00      	nop
 8008268:	08008337 	.word	0x08008337
 800826c:	08008331 	.word	0x08008331
 8008270:	08008331 	.word	0x08008331
 8008274:	08008331 	.word	0x08008331
 8008278:	08008331 	.word	0x08008331
 800827c:	08008331 	.word	0x08008331
 8008280:	08008331 	.word	0x08008331
 8008284:	08008331 	.word	0x08008331
 8008288:	0800830d 	.word	0x0800830d
 800828c:	08008331 	.word	0x08008331
 8008290:	08008331 	.word	0x08008331
 8008294:	08008331 	.word	0x08008331
 8008298:	08008331 	.word	0x08008331
 800829c:	08008331 	.word	0x08008331
 80082a0:	08008331 	.word	0x08008331
 80082a4:	08008331 	.word	0x08008331
 80082a8:	0800831f 	.word	0x0800831f
 80082ac:	08008331 	.word	0x08008331
 80082b0:	08008331 	.word	0x08008331
 80082b4:	08008331 	.word	0x08008331
 80082b8:	08008331 	.word	0x08008331
 80082bc:	08008331 	.word	0x08008331
 80082c0:	08008331 	.word	0x08008331
 80082c4:	08008331 	.word	0x08008331
 80082c8:	08008337 	.word	0x08008337
 80082cc:	08008331 	.word	0x08008331
 80082d0:	08008331 	.word	0x08008331
 80082d4:	08008331 	.word	0x08008331
 80082d8:	08008331 	.word	0x08008331
 80082dc:	08008331 	.word	0x08008331
 80082e0:	08008331 	.word	0x08008331
 80082e4:	08008331 	.word	0x08008331
 80082e8:	08008337 	.word	0x08008337
 80082ec:	08008331 	.word	0x08008331
 80082f0:	08008331 	.word	0x08008331
 80082f4:	08008331 	.word	0x08008331
 80082f8:	08008331 	.word	0x08008331
 80082fc:	08008331 	.word	0x08008331
 8008300:	08008331 	.word	0x08008331
 8008304:	08008331 	.word	0x08008331
 8008308:	08008337 	.word	0x08008337
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	3304      	adds	r3, #4
 8008310:	2101      	movs	r1, #1
 8008312:	4618      	mov	r0, r3
 8008314:	f000 fdf4 	bl	8008f00 <RCCEx_PLL2_Config>
 8008318:	4603      	mov	r3, r0
 800831a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800831c:	e00c      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	3324      	adds	r3, #36	; 0x24
 8008322:	2101      	movs	r1, #1
 8008324:	4618      	mov	r0, r3
 8008326:	f000 fe9d 	bl	8009064 <RCCEx_PLL3_Config>
 800832a:	4603      	mov	r3, r0
 800832c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800832e:	e003      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	75fb      	strb	r3, [r7, #23]
      break;
 8008334:	e000      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8008336:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008338:	7dfb      	ldrb	r3, [r7, #23]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d109      	bne.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800833e:	4b24      	ldr	r3, [pc, #144]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008342:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800834a:	4921      	ldr	r1, [pc, #132]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800834c:	4313      	orrs	r3, r2
 800834e:	654b      	str	r3, [r1, #84]	; 0x54
 8008350:	e001      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008352:	7dfb      	ldrb	r3, [r7, #23]
 8008354:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0302 	and.w	r3, r3, #2
 800835e:	2b00      	cmp	r3, #0
 8008360:	d03e      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008366:	2b05      	cmp	r3, #5
 8008368:	d820      	bhi.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800836a:	a201      	add	r2, pc, #4	; (adr r2, 8008370 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800836c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008370:	080083b3 	.word	0x080083b3
 8008374:	08008389 	.word	0x08008389
 8008378:	0800839b 	.word	0x0800839b
 800837c:	080083b3 	.word	0x080083b3
 8008380:	080083b3 	.word	0x080083b3
 8008384:	080083b3 	.word	0x080083b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	3304      	adds	r3, #4
 800838c:	2101      	movs	r1, #1
 800838e:	4618      	mov	r0, r3
 8008390:	f000 fdb6 	bl	8008f00 <RCCEx_PLL2_Config>
 8008394:	4603      	mov	r3, r0
 8008396:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008398:	e00c      	b.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	3324      	adds	r3, #36	; 0x24
 800839e:	2101      	movs	r1, #1
 80083a0:	4618      	mov	r0, r3
 80083a2:	f000 fe5f 	bl	8009064 <RCCEx_PLL3_Config>
 80083a6:	4603      	mov	r3, r0
 80083a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80083aa:	e003      	b.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	75fb      	strb	r3, [r7, #23]
      break;
 80083b0:	e000      	b.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80083b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083b4:	7dfb      	ldrb	r3, [r7, #23]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d110      	bne.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80083ba:	4b05      	ldr	r3, [pc, #20]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083be:	f023 0207 	bic.w	r2, r3, #7
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083c6:	4902      	ldr	r1, [pc, #8]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083c8:	4313      	orrs	r3, r2
 80083ca:	654b      	str	r3, [r1, #84]	; 0x54
 80083cc:	e008      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80083ce:	bf00      	nop
 80083d0:	58024400 	.word	0x58024400
 80083d4:	58024800 	.word	0x58024800
 80083d8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
 80083de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0304 	and.w	r3, r3, #4
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d039      	beq.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083f2:	2b05      	cmp	r3, #5
 80083f4:	d820      	bhi.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80083f6:	a201      	add	r2, pc, #4	; (adr r2, 80083fc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80083f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fc:	0800843f 	.word	0x0800843f
 8008400:	08008415 	.word	0x08008415
 8008404:	08008427 	.word	0x08008427
 8008408:	0800843f 	.word	0x0800843f
 800840c:	0800843f 	.word	0x0800843f
 8008410:	0800843f 	.word	0x0800843f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	3304      	adds	r3, #4
 8008418:	2101      	movs	r1, #1
 800841a:	4618      	mov	r0, r3
 800841c:	f000 fd70 	bl	8008f00 <RCCEx_PLL2_Config>
 8008420:	4603      	mov	r3, r0
 8008422:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008424:	e00c      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	3324      	adds	r3, #36	; 0x24
 800842a:	2101      	movs	r1, #1
 800842c:	4618      	mov	r0, r3
 800842e:	f000 fe19 	bl	8009064 <RCCEx_PLL3_Config>
 8008432:	4603      	mov	r3, r0
 8008434:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008436:	e003      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	75fb      	strb	r3, [r7, #23]
      break;
 800843c:	e000      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800843e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008440:	7dfb      	ldrb	r3, [r7, #23]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10a      	bne.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008446:	4bb7      	ldr	r3, [pc, #732]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800844a:	f023 0207 	bic.w	r2, r3, #7
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008454:	49b3      	ldr	r1, [pc, #716]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008456:	4313      	orrs	r3, r2
 8008458:	658b      	str	r3, [r1, #88]	; 0x58
 800845a:	e001      	b.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800845c:	7dfb      	ldrb	r3, [r7, #23]
 800845e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0320 	and.w	r3, r3, #32
 8008468:	2b00      	cmp	r3, #0
 800846a:	d04b      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008472:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008476:	d02e      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008478:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800847c:	d828      	bhi.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800847e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008482:	d02a      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008488:	d822      	bhi.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800848a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800848e:	d026      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008490:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008494:	d81c      	bhi.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008496:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800849a:	d010      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800849c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084a0:	d816      	bhi.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d01d      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80084a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084aa:	d111      	bne.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	3304      	adds	r3, #4
 80084b0:	2100      	movs	r1, #0
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 fd24 	bl	8008f00 <RCCEx_PLL2_Config>
 80084b8:	4603      	mov	r3, r0
 80084ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80084bc:	e012      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	3324      	adds	r3, #36	; 0x24
 80084c2:	2102      	movs	r1, #2
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 fdcd 	bl	8009064 <RCCEx_PLL3_Config>
 80084ca:	4603      	mov	r3, r0
 80084cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80084ce:	e009      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	75fb      	strb	r3, [r7, #23]
      break;
 80084d4:	e006      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80084d6:	bf00      	nop
 80084d8:	e004      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80084da:	bf00      	nop
 80084dc:	e002      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80084de:	bf00      	nop
 80084e0:	e000      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80084e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084e4:	7dfb      	ldrb	r3, [r7, #23]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d10a      	bne.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084ea:	4b8e      	ldr	r3, [pc, #568]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80084ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084f8:	498a      	ldr	r1, [pc, #552]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	654b      	str	r3, [r1, #84]	; 0x54
 80084fe:	e001      	b.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008500:	7dfb      	ldrb	r3, [r7, #23]
 8008502:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800850c:	2b00      	cmp	r3, #0
 800850e:	d04b      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008516:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800851a:	d02e      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800851c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008520:	d828      	bhi.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008526:	d02a      	beq.n	800857e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800852c:	d822      	bhi.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800852e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008532:	d026      	beq.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008534:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008538:	d81c      	bhi.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800853a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800853e:	d010      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008544:	d816      	bhi.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008546:	2b00      	cmp	r3, #0
 8008548:	d01d      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800854a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800854e:	d111      	bne.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	3304      	adds	r3, #4
 8008554:	2100      	movs	r1, #0
 8008556:	4618      	mov	r0, r3
 8008558:	f000 fcd2 	bl	8008f00 <RCCEx_PLL2_Config>
 800855c:	4603      	mov	r3, r0
 800855e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008560:	e012      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	3324      	adds	r3, #36	; 0x24
 8008566:	2102      	movs	r1, #2
 8008568:	4618      	mov	r0, r3
 800856a:	f000 fd7b 	bl	8009064 <RCCEx_PLL3_Config>
 800856e:	4603      	mov	r3, r0
 8008570:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008572:	e009      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	75fb      	strb	r3, [r7, #23]
      break;
 8008578:	e006      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800857a:	bf00      	nop
 800857c:	e004      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800857e:	bf00      	nop
 8008580:	e002      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008582:	bf00      	nop
 8008584:	e000      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008586:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008588:	7dfb      	ldrb	r3, [r7, #23]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10a      	bne.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800858e:	4b65      	ldr	r3, [pc, #404]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008592:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800859c:	4961      	ldr	r1, [pc, #388]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	658b      	str	r3, [r1, #88]	; 0x58
 80085a2:	e001      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a4:	7dfb      	ldrb	r3, [r7, #23]
 80085a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d04b      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085ba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80085be:	d02e      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80085c0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80085c4:	d828      	bhi.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80085c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085ca:	d02a      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80085cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085d0:	d822      	bhi.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80085d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80085d6:	d026      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80085d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80085dc:	d81c      	bhi.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80085de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085e2:	d010      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80085e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085e8:	d816      	bhi.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d01d      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80085ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085f2:	d111      	bne.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	3304      	adds	r3, #4
 80085f8:	2100      	movs	r1, #0
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 fc80 	bl	8008f00 <RCCEx_PLL2_Config>
 8008600:	4603      	mov	r3, r0
 8008602:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008604:	e012      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	3324      	adds	r3, #36	; 0x24
 800860a:	2102      	movs	r1, #2
 800860c:	4618      	mov	r0, r3
 800860e:	f000 fd29 	bl	8009064 <RCCEx_PLL3_Config>
 8008612:	4603      	mov	r3, r0
 8008614:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008616:	e009      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	75fb      	strb	r3, [r7, #23]
      break;
 800861c:	e006      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800861e:	bf00      	nop
 8008620:	e004      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008622:	bf00      	nop
 8008624:	e002      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008626:	bf00      	nop
 8008628:	e000      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800862a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800862c:	7dfb      	ldrb	r3, [r7, #23]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d10a      	bne.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008632:	4b3c      	ldr	r3, [pc, #240]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008636:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008640:	4938      	ldr	r1, [pc, #224]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008642:	4313      	orrs	r3, r2
 8008644:	658b      	str	r3, [r1, #88]	; 0x58
 8008646:	e001      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008648:	7dfb      	ldrb	r3, [r7, #23]
 800864a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 0308 	and.w	r3, r3, #8
 8008654:	2b00      	cmp	r3, #0
 8008656:	d01a      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800865e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008662:	d10a      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	3324      	adds	r3, #36	; 0x24
 8008668:	2102      	movs	r1, #2
 800866a:	4618      	mov	r0, r3
 800866c:	f000 fcfa 	bl	8009064 <RCCEx_PLL3_Config>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d001      	beq.n	800867a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800867a:	4b2a      	ldr	r3, [pc, #168]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800867c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800867e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008688:	4926      	ldr	r1, [pc, #152]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800868a:	4313      	orrs	r3, r2
 800868c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0310 	and.w	r3, r3, #16
 8008696:	2b00      	cmp	r3, #0
 8008698:	d01a      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086a4:	d10a      	bne.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	3324      	adds	r3, #36	; 0x24
 80086aa:	2102      	movs	r1, #2
 80086ac:	4618      	mov	r0, r3
 80086ae:	f000 fcd9 	bl	8009064 <RCCEx_PLL3_Config>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d001      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80086bc:	4b19      	ldr	r3, [pc, #100]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80086be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086ca:	4916      	ldr	r1, [pc, #88]	; (8008724 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80086cc:	4313      	orrs	r3, r2
 80086ce:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d036      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80086e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086e6:	d01f      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80086e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086ec:	d817      	bhi.n	800871e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d003      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80086f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086f6:	d009      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80086f8:	e011      	b.n	800871e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	3304      	adds	r3, #4
 80086fe:	2100      	movs	r1, #0
 8008700:	4618      	mov	r0, r3
 8008702:	f000 fbfd 	bl	8008f00 <RCCEx_PLL2_Config>
 8008706:	4603      	mov	r3, r0
 8008708:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800870a:	e00e      	b.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	3324      	adds	r3, #36	; 0x24
 8008710:	2102      	movs	r1, #2
 8008712:	4618      	mov	r0, r3
 8008714:	f000 fca6 	bl	8009064 <RCCEx_PLL3_Config>
 8008718:	4603      	mov	r3, r0
 800871a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800871c:	e005      	b.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	75fb      	strb	r3, [r7, #23]
      break;
 8008722:	e002      	b.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008724:	58024400 	.word	0x58024400
      break;
 8008728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800872a:	7dfb      	ldrb	r3, [r7, #23]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10a      	bne.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008730:	4b93      	ldr	r3, [pc, #588]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008734:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800873e:	4990      	ldr	r1, [pc, #576]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008740:	4313      	orrs	r3, r2
 8008742:	658b      	str	r3, [r1, #88]	; 0x58
 8008744:	e001      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008746:	7dfb      	ldrb	r3, [r7, #23]
 8008748:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d033      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800875c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008760:	d01c      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008762:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008766:	d816      	bhi.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800876c:	d003      	beq.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800876e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008772:	d007      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008774:	e00f      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008776:	4b82      	ldr	r3, [pc, #520]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877a:	4a81      	ldr	r2, [pc, #516]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800877c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008780:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008782:	e00c      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	3324      	adds	r3, #36	; 0x24
 8008788:	2101      	movs	r1, #1
 800878a:	4618      	mov	r0, r3
 800878c:	f000 fc6a 	bl	8009064 <RCCEx_PLL3_Config>
 8008790:	4603      	mov	r3, r0
 8008792:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008794:	e003      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	75fb      	strb	r3, [r7, #23]
      break;
 800879a:	e000      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800879c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800879e:	7dfb      	ldrb	r3, [r7, #23]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10a      	bne.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087a4:	4b76      	ldr	r3, [pc, #472]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087b2:	4973      	ldr	r1, [pc, #460]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087b4:	4313      	orrs	r3, r2
 80087b6:	654b      	str	r3, [r1, #84]	; 0x54
 80087b8:	e001      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ba:	7dfb      	ldrb	r3, [r7, #23]
 80087bc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d029      	beq.n	800881e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d003      	beq.n	80087da <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80087d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087d6:	d007      	beq.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80087d8:	e00f      	b.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087da:	4b69      	ldr	r3, [pc, #420]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087de:	4a68      	ldr	r2, [pc, #416]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80087e6:	e00b      	b.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	3304      	adds	r3, #4
 80087ec:	2102      	movs	r1, #2
 80087ee:	4618      	mov	r0, r3
 80087f0:	f000 fb86 	bl	8008f00 <RCCEx_PLL2_Config>
 80087f4:	4603      	mov	r3, r0
 80087f6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80087f8:	e002      	b.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	75fb      	strb	r3, [r7, #23]
      break;
 80087fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008800:	7dfb      	ldrb	r3, [r7, #23]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d109      	bne.n	800881a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008806:	4b5e      	ldr	r3, [pc, #376]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800880a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008812:	495b      	ldr	r1, [pc, #364]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008814:	4313      	orrs	r3, r2
 8008816:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008818:	e001      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800881a:	7dfb      	ldrb	r3, [r7, #23]
 800881c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00a      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	3324      	adds	r3, #36	; 0x24
 800882e:	2102      	movs	r1, #2
 8008830:	4618      	mov	r0, r3
 8008832:	f000 fc17 	bl	8009064 <RCCEx_PLL3_Config>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d001      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d030      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008854:	d017      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800885a:	d811      	bhi.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800885c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008860:	d013      	beq.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008866:	d80b      	bhi.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008868:	2b00      	cmp	r3, #0
 800886a:	d010      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800886c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008870:	d106      	bne.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008872:	4b43      	ldr	r3, [pc, #268]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008876:	4a42      	ldr	r2, [pc, #264]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800887c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800887e:	e007      	b.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	75fb      	strb	r3, [r7, #23]
      break;
 8008884:	e004      	b.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008886:	bf00      	nop
 8008888:	e002      	b.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800888a:	bf00      	nop
 800888c:	e000      	b.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800888e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008890:	7dfb      	ldrb	r3, [r7, #23]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d109      	bne.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008896:	4b3a      	ldr	r3, [pc, #232]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088a2:	4937      	ldr	r1, [pc, #220]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088a4:	4313      	orrs	r3, r2
 80088a6:	654b      	str	r3, [r1, #84]	; 0x54
 80088a8:	e001      	b.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088aa:	7dfb      	ldrb	r3, [r7, #23]
 80088ac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d008      	beq.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80088ba:	4b31      	ldr	r3, [pc, #196]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c6:	492e      	ldr	r1, [pc, #184]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d009      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80088d8:	4b29      	ldr	r3, [pc, #164]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80088e6:	4926      	ldr	r1, [pc, #152]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088e8:	4313      	orrs	r3, r2
 80088ea:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d008      	beq.n	800890a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80088f8:	4b21      	ldr	r3, [pc, #132]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008904:	491e      	ldr	r1, [pc, #120]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008906:	4313      	orrs	r3, r2
 8008908:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00d      	beq.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008916:	4b1a      	ldr	r3, [pc, #104]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	4a19      	ldr	r2, [pc, #100]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800891c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008920:	6113      	str	r3, [r2, #16]
 8008922:	4b17      	ldr	r3, [pc, #92]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008924:	691a      	ldr	r2, [r3, #16]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800892c:	4914      	ldr	r1, [pc, #80]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800892e:	4313      	orrs	r3, r2
 8008930:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	da08      	bge.n	800894c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800893a:	4b11      	ldr	r3, [pc, #68]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800893c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800893e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008946:	490e      	ldr	r1, [pc, #56]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008948:	4313      	orrs	r3, r2
 800894a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008954:	2b00      	cmp	r3, #0
 8008956:	d009      	beq.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008958:	4b09      	ldr	r3, [pc, #36]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800895a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800895c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008966:	4906      	ldr	r1, [pc, #24]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008968:	4313      	orrs	r3, r2
 800896a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800896c:	7dbb      	ldrb	r3, [r7, #22]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d101      	bne.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008972:	2300      	movs	r3, #0
 8008974:	e000      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008976:	2301      	movs	r3, #1
}
 8008978:	4618      	mov	r0, r3
 800897a:	3718      	adds	r7, #24
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	58024400 	.word	0x58024400

08008984 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008988:	f7ff f81e 	bl	80079c8 <HAL_RCC_GetHCLKFreq>
 800898c:	4602      	mov	r2, r0
 800898e:	4b06      	ldr	r3, [pc, #24]	; (80089a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008990:	6a1b      	ldr	r3, [r3, #32]
 8008992:	091b      	lsrs	r3, r3, #4
 8008994:	f003 0307 	and.w	r3, r3, #7
 8008998:	4904      	ldr	r1, [pc, #16]	; (80089ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800899a:	5ccb      	ldrb	r3, [r1, r3]
 800899c:	f003 031f 	and.w	r3, r3, #31
 80089a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	58024400 	.word	0x58024400
 80089ac:	0800da98 	.word	0x0800da98

080089b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b089      	sub	sp, #36	; 0x24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089b8:	4ba1      	ldr	r3, [pc, #644]	; (8008c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089bc:	f003 0303 	and.w	r3, r3, #3
 80089c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80089c2:	4b9f      	ldr	r3, [pc, #636]	; (8008c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c6:	0b1b      	lsrs	r3, r3, #12
 80089c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80089ce:	4b9c      	ldr	r3, [pc, #624]	; (8008c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d2:	091b      	lsrs	r3, r3, #4
 80089d4:	f003 0301 	and.w	r3, r3, #1
 80089d8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80089da:	4b99      	ldr	r3, [pc, #612]	; (8008c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089de:	08db      	lsrs	r3, r3, #3
 80089e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	fb02 f303 	mul.w	r3, r2, r3
 80089ea:	ee07 3a90 	vmov	s15, r3
 80089ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f000 8111 	beq.w	8008c20 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	f000 8083 	beq.w	8008b0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	f200 80a1 	bhi.w	8008b50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d003      	beq.n	8008a1c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d056      	beq.n	8008ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008a1a:	e099      	b.n	8008b50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a1c:	4b88      	ldr	r3, [pc, #544]	; (8008c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0320 	and.w	r3, r3, #32
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d02d      	beq.n	8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a28:	4b85      	ldr	r3, [pc, #532]	; (8008c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	08db      	lsrs	r3, r3, #3
 8008a2e:	f003 0303 	and.w	r3, r3, #3
 8008a32:	4a84      	ldr	r2, [pc, #528]	; (8008c44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008a34:	fa22 f303 	lsr.w	r3, r2, r3
 8008a38:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	ee07 3a90 	vmov	s15, r3
 8008a40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	ee07 3a90 	vmov	s15, r3
 8008a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a52:	4b7b      	ldr	r3, [pc, #492]	; (8008c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a5a:	ee07 3a90 	vmov	s15, r3
 8008a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a66:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008c48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a7e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008a82:	e087      	b.n	8008b94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	ee07 3a90 	vmov	s15, r3
 8008a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008c4c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a96:	4b6a      	ldr	r3, [pc, #424]	; (8008c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a9e:	ee07 3a90 	vmov	s15, r3
 8008aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aaa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008c48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ac2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ac6:	e065      	b.n	8008b94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	ee07 3a90 	vmov	s15, r3
 8008ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008c50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ada:	4b59      	ldr	r3, [pc, #356]	; (8008c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ae2:	ee07 3a90 	vmov	s15, r3
 8008ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008c48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b0a:	e043      	b.n	8008b94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	ee07 3a90 	vmov	s15, r3
 8008b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b1e:	4b48      	ldr	r3, [pc, #288]	; (8008c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b26:	ee07 3a90 	vmov	s15, r3
 8008b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008c48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b4e:	e021      	b.n	8008b94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	ee07 3a90 	vmov	s15, r3
 8008b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008c50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b62:	4b37      	ldr	r3, [pc, #220]	; (8008c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b6a:	ee07 3a90 	vmov	s15, r3
 8008b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008c48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008b94:	4b2a      	ldr	r3, [pc, #168]	; (8008c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b98:	0a5b      	lsrs	r3, r3, #9
 8008b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b9e:	ee07 3a90 	vmov	s15, r3
 8008ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ba6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008baa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bae:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bba:	ee17 2a90 	vmov	r2, s15
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008bc2:	4b1f      	ldr	r3, [pc, #124]	; (8008c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc6:	0c1b      	lsrs	r3, r3, #16
 8008bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bcc:	ee07 3a90 	vmov	s15, r3
 8008bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008be8:	ee17 2a90 	vmov	r2, s15
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008bf0:	4b13      	ldr	r3, [pc, #76]	; (8008c40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf4:	0e1b      	lsrs	r3, r3, #24
 8008bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bfa:	ee07 3a90 	vmov	s15, r3
 8008bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c16:	ee17 2a90 	vmov	r2, s15
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008c1e:	e008      	b.n	8008c32 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	609a      	str	r2, [r3, #8]
}
 8008c32:	bf00      	nop
 8008c34:	3724      	adds	r7, #36	; 0x24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	58024400 	.word	0x58024400
 8008c44:	03d09000 	.word	0x03d09000
 8008c48:	46000000 	.word	0x46000000
 8008c4c:	4c742400 	.word	0x4c742400
 8008c50:	4a742400 	.word	0x4a742400
 8008c54:	4bbebc20 	.word	0x4bbebc20

08008c58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b089      	sub	sp, #36	; 0x24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c60:	4ba1      	ldr	r3, [pc, #644]	; (8008ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c64:	f003 0303 	and.w	r3, r3, #3
 8008c68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008c6a:	4b9f      	ldr	r3, [pc, #636]	; (8008ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c6e:	0d1b      	lsrs	r3, r3, #20
 8008c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008c76:	4b9c      	ldr	r3, [pc, #624]	; (8008ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7a:	0a1b      	lsrs	r3, r3, #8
 8008c7c:	f003 0301 	and.w	r3, r3, #1
 8008c80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008c82:	4b99      	ldr	r3, [pc, #612]	; (8008ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c86:	08db      	lsrs	r3, r3, #3
 8008c88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	fb02 f303 	mul.w	r3, r2, r3
 8008c92:	ee07 3a90 	vmov	s15, r3
 8008c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f000 8111 	beq.w	8008ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	f000 8083 	beq.w	8008db4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	f200 80a1 	bhi.w	8008df8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d003      	beq.n	8008cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d056      	beq.n	8008d70 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008cc2:	e099      	b.n	8008df8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cc4:	4b88      	ldr	r3, [pc, #544]	; (8008ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 0320 	and.w	r3, r3, #32
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d02d      	beq.n	8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008cd0:	4b85      	ldr	r3, [pc, #532]	; (8008ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	08db      	lsrs	r3, r3, #3
 8008cd6:	f003 0303 	and.w	r3, r3, #3
 8008cda:	4a84      	ldr	r2, [pc, #528]	; (8008eec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ce0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	ee07 3a90 	vmov	s15, r3
 8008ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	ee07 3a90 	vmov	s15, r3
 8008cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cfa:	4b7b      	ldr	r3, [pc, #492]	; (8008ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d02:	ee07 3a90 	vmov	s15, r3
 8008d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d26:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008d2a:	e087      	b.n	8008e3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	ee07 3a90 	vmov	s15, r3
 8008d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d3e:	4b6a      	ldr	r3, [pc, #424]	; (8008ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d46:	ee07 3a90 	vmov	s15, r3
 8008d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d52:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d6e:	e065      	b.n	8008e3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	ee07 3a90 	vmov	s15, r3
 8008d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d82:	4b59      	ldr	r3, [pc, #356]	; (8008ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d8a:	ee07 3a90 	vmov	s15, r3
 8008d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d96:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008db2:	e043      	b.n	8008e3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	ee07 3a90 	vmov	s15, r3
 8008dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dc6:	4b48      	ldr	r3, [pc, #288]	; (8008ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dce:	ee07 3a90 	vmov	s15, r3
 8008dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dda:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008df2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008df6:	e021      	b.n	8008e3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	ee07 3a90 	vmov	s15, r3
 8008dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e0a:	4b37      	ldr	r3, [pc, #220]	; (8008ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e12:	ee07 3a90 	vmov	s15, r3
 8008e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e3a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008e3c:	4b2a      	ldr	r3, [pc, #168]	; (8008ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e40:	0a5b      	lsrs	r3, r3, #9
 8008e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e46:	ee07 3a90 	vmov	s15, r3
 8008e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e56:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e62:	ee17 2a90 	vmov	r2, s15
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008e6a:	4b1f      	ldr	r3, [pc, #124]	; (8008ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6e:	0c1b      	lsrs	r3, r3, #16
 8008e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e74:	ee07 3a90 	vmov	s15, r3
 8008e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e84:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e90:	ee17 2a90 	vmov	r2, s15
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008e98:	4b13      	ldr	r3, [pc, #76]	; (8008ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9c:	0e1b      	lsrs	r3, r3, #24
 8008e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ea2:	ee07 3a90 	vmov	s15, r3
 8008ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008eae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008eb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ebe:	ee17 2a90 	vmov	r2, s15
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008ec6:	e008      	b.n	8008eda <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	609a      	str	r2, [r3, #8]
}
 8008eda:	bf00      	nop
 8008edc:	3724      	adds	r7, #36	; 0x24
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	58024400 	.word	0x58024400
 8008eec:	03d09000 	.word	0x03d09000
 8008ef0:	46000000 	.word	0x46000000
 8008ef4:	4c742400 	.word	0x4c742400
 8008ef8:	4a742400 	.word	0x4a742400
 8008efc:	4bbebc20 	.word	0x4bbebc20

08008f00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f0e:	4b53      	ldr	r3, [pc, #332]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8008f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f12:	f003 0303 	and.w	r3, r3, #3
 8008f16:	2b03      	cmp	r3, #3
 8008f18:	d101      	bne.n	8008f1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e099      	b.n	8009052 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008f1e:	4b4f      	ldr	r3, [pc, #316]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a4e      	ldr	r2, [pc, #312]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8008f24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008f28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f2a:	f7fa fc55 	bl	80037d8 <HAL_GetTick>
 8008f2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f30:	e008      	b.n	8008f44 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008f32:	f7fa fc51 	bl	80037d8 <HAL_GetTick>
 8008f36:	4602      	mov	r2, r0
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d901      	bls.n	8008f44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f40:	2303      	movs	r3, #3
 8008f42:	e086      	b.n	8009052 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f44:	4b45      	ldr	r3, [pc, #276]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1f0      	bne.n	8008f32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008f50:	4b42      	ldr	r3, [pc, #264]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8008f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	031b      	lsls	r3, r3, #12
 8008f5e:	493f      	ldr	r1, [pc, #252]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8008f60:	4313      	orrs	r3, r2
 8008f62:	628b      	str	r3, [r1, #40]	; 0x28
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	3b01      	subs	r3, #1
 8008f74:	025b      	lsls	r3, r3, #9
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	431a      	orrs	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	041b      	lsls	r3, r3, #16
 8008f82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f86:	431a      	orrs	r2, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	061b      	lsls	r3, r3, #24
 8008f90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f94:	4931      	ldr	r1, [pc, #196]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8008f96:	4313      	orrs	r3, r2
 8008f98:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008f9a:	4b30      	ldr	r3, [pc, #192]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8008f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	695b      	ldr	r3, [r3, #20]
 8008fa6:	492d      	ldr	r1, [pc, #180]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008fac:	4b2b      	ldr	r3, [pc, #172]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8008fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb0:	f023 0220 	bic.w	r2, r3, #32
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	4928      	ldr	r1, [pc, #160]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008fbe:	4b27      	ldr	r3, [pc, #156]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8008fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc2:	4a26      	ldr	r2, [pc, #152]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8008fc4:	f023 0310 	bic.w	r3, r3, #16
 8008fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008fca:	4b24      	ldr	r3, [pc, #144]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8008fcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fce:	4b24      	ldr	r3, [pc, #144]	; (8009060 <RCCEx_PLL2_Config+0x160>)
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	69d2      	ldr	r2, [r2, #28]
 8008fd6:	00d2      	lsls	r2, r2, #3
 8008fd8:	4920      	ldr	r1, [pc, #128]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008fde:	4b1f      	ldr	r3, [pc, #124]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8008fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe2:	4a1e      	ldr	r2, [pc, #120]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8008fe4:	f043 0310 	orr.w	r3, r3, #16
 8008fe8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d106      	bne.n	8008ffe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008ff0:	4b1a      	ldr	r3, [pc, #104]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8008ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff4:	4a19      	ldr	r2, [pc, #100]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8008ff6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ffa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ffc:	e00f      	b.n	800901e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d106      	bne.n	8009012 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009004:	4b15      	ldr	r3, [pc, #84]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8009006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009008:	4a14      	ldr	r2, [pc, #80]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 800900a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800900e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009010:	e005      	b.n	800901e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009012:	4b12      	ldr	r3, [pc, #72]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8009014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009016:	4a11      	ldr	r2, [pc, #68]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8009018:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800901c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800901e:	4b0f      	ldr	r3, [pc, #60]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a0e      	ldr	r2, [pc, #56]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8009024:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009028:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800902a:	f7fa fbd5 	bl	80037d8 <HAL_GetTick>
 800902e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009030:	e008      	b.n	8009044 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009032:	f7fa fbd1 	bl	80037d8 <HAL_GetTick>
 8009036:	4602      	mov	r2, r0
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	1ad3      	subs	r3, r2, r3
 800903c:	2b02      	cmp	r3, #2
 800903e:	d901      	bls.n	8009044 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009040:	2303      	movs	r3, #3
 8009042:	e006      	b.n	8009052 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009044:	4b05      	ldr	r3, [pc, #20]	; (800905c <RCCEx_PLL2_Config+0x15c>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800904c:	2b00      	cmp	r3, #0
 800904e:	d0f0      	beq.n	8009032 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009050:	7bfb      	ldrb	r3, [r7, #15]
}
 8009052:	4618      	mov	r0, r3
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	58024400 	.word	0x58024400
 8009060:	ffff0007 	.word	0xffff0007

08009064 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800906e:	2300      	movs	r3, #0
 8009070:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009072:	4b53      	ldr	r3, [pc, #332]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009076:	f003 0303 	and.w	r3, r3, #3
 800907a:	2b03      	cmp	r3, #3
 800907c:	d101      	bne.n	8009082 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	e099      	b.n	80091b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009082:	4b4f      	ldr	r3, [pc, #316]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a4e      	ldr	r2, [pc, #312]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800908c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800908e:	f7fa fba3 	bl	80037d8 <HAL_GetTick>
 8009092:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009094:	e008      	b.n	80090a8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009096:	f7fa fb9f 	bl	80037d8 <HAL_GetTick>
 800909a:	4602      	mov	r2, r0
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d901      	bls.n	80090a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e086      	b.n	80091b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80090a8:	4b45      	ldr	r3, [pc, #276]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1f0      	bne.n	8009096 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80090b4:	4b42      	ldr	r3, [pc, #264]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 80090b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	051b      	lsls	r3, r3, #20
 80090c2:	493f      	ldr	r1, [pc, #252]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 80090c4:	4313      	orrs	r3, r2
 80090c6:	628b      	str	r3, [r1, #40]	; 0x28
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	3b01      	subs	r3, #1
 80090ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	3b01      	subs	r3, #1
 80090d8:	025b      	lsls	r3, r3, #9
 80090da:	b29b      	uxth	r3, r3
 80090dc:	431a      	orrs	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	3b01      	subs	r3, #1
 80090e4:	041b      	lsls	r3, r3, #16
 80090e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80090ea:	431a      	orrs	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	3b01      	subs	r3, #1
 80090f2:	061b      	lsls	r3, r3, #24
 80090f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80090f8:	4931      	ldr	r1, [pc, #196]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 80090fa:	4313      	orrs	r3, r2
 80090fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80090fe:	4b30      	ldr	r3, [pc, #192]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009102:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	695b      	ldr	r3, [r3, #20]
 800910a:	492d      	ldr	r1, [pc, #180]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 800910c:	4313      	orrs	r3, r2
 800910e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009110:	4b2b      	ldr	r3, [pc, #172]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009114:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	699b      	ldr	r3, [r3, #24]
 800911c:	4928      	ldr	r1, [pc, #160]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 800911e:	4313      	orrs	r3, r2
 8009120:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009122:	4b27      	ldr	r3, [pc, #156]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009126:	4a26      	ldr	r2, [pc, #152]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800912c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800912e:	4b24      	ldr	r3, [pc, #144]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009132:	4b24      	ldr	r3, [pc, #144]	; (80091c4 <RCCEx_PLL3_Config+0x160>)
 8009134:	4013      	ands	r3, r2
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	69d2      	ldr	r2, [r2, #28]
 800913a:	00d2      	lsls	r2, r2, #3
 800913c:	4920      	ldr	r1, [pc, #128]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 800913e:	4313      	orrs	r3, r2
 8009140:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009142:	4b1f      	ldr	r3, [pc, #124]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009146:	4a1e      	ldr	r2, [pc, #120]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800914c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d106      	bne.n	8009162 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009154:	4b1a      	ldr	r3, [pc, #104]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009158:	4a19      	ldr	r2, [pc, #100]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 800915a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800915e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009160:	e00f      	b.n	8009182 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	2b01      	cmp	r3, #1
 8009166:	d106      	bne.n	8009176 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009168:	4b15      	ldr	r3, [pc, #84]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 800916a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916c:	4a14      	ldr	r2, [pc, #80]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 800916e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009172:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009174:	e005      	b.n	8009182 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009176:	4b12      	ldr	r3, [pc, #72]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917a:	4a11      	ldr	r2, [pc, #68]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 800917c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009180:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009182:	4b0f      	ldr	r3, [pc, #60]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a0e      	ldr	r2, [pc, #56]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 8009188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800918c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800918e:	f7fa fb23 	bl	80037d8 <HAL_GetTick>
 8009192:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009194:	e008      	b.n	80091a8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009196:	f7fa fb1f 	bl	80037d8 <HAL_GetTick>
 800919a:	4602      	mov	r2, r0
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	1ad3      	subs	r3, r2, r3
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d901      	bls.n	80091a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80091a4:	2303      	movs	r3, #3
 80091a6:	e006      	b.n	80091b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80091a8:	4b05      	ldr	r3, [pc, #20]	; (80091c0 <RCCEx_PLL3_Config+0x15c>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d0f0      	beq.n	8009196 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	58024400 	.word	0x58024400
 80091c4:	ffff0007 	.word	0xffff0007

080091c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d101      	bne.n	80091da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	e049      	b.n	800926e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d106      	bne.n	80091f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 f841 	bl	8009276 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2202      	movs	r2, #2
 80091f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	3304      	adds	r3, #4
 8009204:	4619      	mov	r1, r3
 8009206:	4610      	mov	r0, r2
 8009208:	f000 f9f8 	bl	80095fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009276:	b480      	push	{r7}
 8009278:	b083      	sub	sp, #12
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800927e:	bf00      	nop
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
	...

0800928c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b01      	cmp	r3, #1
 800929e:	d001      	beq.n	80092a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	e04f      	b.n	8009344 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2202      	movs	r2, #2
 80092a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68da      	ldr	r2, [r3, #12]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f042 0201 	orr.w	r2, r2, #1
 80092ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a23      	ldr	r2, [pc, #140]	; (8009350 <HAL_TIM_Base_Start_IT+0xc4>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d01d      	beq.n	8009302 <HAL_TIM_Base_Start_IT+0x76>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ce:	d018      	beq.n	8009302 <HAL_TIM_Base_Start_IT+0x76>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a1f      	ldr	r2, [pc, #124]	; (8009354 <HAL_TIM_Base_Start_IT+0xc8>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d013      	beq.n	8009302 <HAL_TIM_Base_Start_IT+0x76>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a1e      	ldr	r2, [pc, #120]	; (8009358 <HAL_TIM_Base_Start_IT+0xcc>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d00e      	beq.n	8009302 <HAL_TIM_Base_Start_IT+0x76>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a1c      	ldr	r2, [pc, #112]	; (800935c <HAL_TIM_Base_Start_IT+0xd0>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d009      	beq.n	8009302 <HAL_TIM_Base_Start_IT+0x76>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a1b      	ldr	r2, [pc, #108]	; (8009360 <HAL_TIM_Base_Start_IT+0xd4>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d004      	beq.n	8009302 <HAL_TIM_Base_Start_IT+0x76>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a19      	ldr	r2, [pc, #100]	; (8009364 <HAL_TIM_Base_Start_IT+0xd8>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d115      	bne.n	800932e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	689a      	ldr	r2, [r3, #8]
 8009308:	4b17      	ldr	r3, [pc, #92]	; (8009368 <HAL_TIM_Base_Start_IT+0xdc>)
 800930a:	4013      	ands	r3, r2
 800930c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2b06      	cmp	r3, #6
 8009312:	d015      	beq.n	8009340 <HAL_TIM_Base_Start_IT+0xb4>
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800931a:	d011      	beq.n	8009340 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f042 0201 	orr.w	r2, r2, #1
 800932a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800932c:	e008      	b.n	8009340 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f042 0201 	orr.w	r2, r2, #1
 800933c:	601a      	str	r2, [r3, #0]
 800933e:	e000      	b.n	8009342 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009340:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009342:	2300      	movs	r3, #0
}
 8009344:	4618      	mov	r0, r3
 8009346:	3714      	adds	r7, #20
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr
 8009350:	40010000 	.word	0x40010000
 8009354:	40000400 	.word	0x40000400
 8009358:	40000800 	.word	0x40000800
 800935c:	40000c00 	.word	0x40000c00
 8009360:	40010400 	.word	0x40010400
 8009364:	40001800 	.word	0x40001800
 8009368:	00010007 	.word	0x00010007

0800936c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	f003 0302 	and.w	r3, r3, #2
 800937e:	2b02      	cmp	r3, #2
 8009380:	d122      	bne.n	80093c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	f003 0302 	and.w	r3, r3, #2
 800938c:	2b02      	cmp	r3, #2
 800938e:	d11b      	bne.n	80093c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f06f 0202 	mvn.w	r2, #2
 8009398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2201      	movs	r2, #1
 800939e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	f003 0303 	and.w	r3, r3, #3
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d003      	beq.n	80093b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f905 	bl	80095be <HAL_TIM_IC_CaptureCallback>
 80093b4:	e005      	b.n	80093c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f8f7 	bl	80095aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 f908 	bl	80095d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	f003 0304 	and.w	r3, r3, #4
 80093d2:	2b04      	cmp	r3, #4
 80093d4:	d122      	bne.n	800941c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	f003 0304 	and.w	r3, r3, #4
 80093e0:	2b04      	cmp	r3, #4
 80093e2:	d11b      	bne.n	800941c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f06f 0204 	mvn.w	r2, #4
 80093ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2202      	movs	r2, #2
 80093f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	699b      	ldr	r3, [r3, #24]
 80093fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d003      	beq.n	800940a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f8db 	bl	80095be <HAL_TIM_IC_CaptureCallback>
 8009408:	e005      	b.n	8009416 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f8cd 	bl	80095aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 f8de 	bl	80095d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	f003 0308 	and.w	r3, r3, #8
 8009426:	2b08      	cmp	r3, #8
 8009428:	d122      	bne.n	8009470 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	f003 0308 	and.w	r3, r3, #8
 8009434:	2b08      	cmp	r3, #8
 8009436:	d11b      	bne.n	8009470 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f06f 0208 	mvn.w	r2, #8
 8009440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2204      	movs	r2, #4
 8009446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	69db      	ldr	r3, [r3, #28]
 800944e:	f003 0303 	and.w	r3, r3, #3
 8009452:	2b00      	cmp	r3, #0
 8009454:	d003      	beq.n	800945e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f8b1 	bl	80095be <HAL_TIM_IC_CaptureCallback>
 800945c:	e005      	b.n	800946a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f8a3 	bl	80095aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f8b4 	bl	80095d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	f003 0310 	and.w	r3, r3, #16
 800947a:	2b10      	cmp	r3, #16
 800947c:	d122      	bne.n	80094c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	f003 0310 	and.w	r3, r3, #16
 8009488:	2b10      	cmp	r3, #16
 800948a:	d11b      	bne.n	80094c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f06f 0210 	mvn.w	r2, #16
 8009494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2208      	movs	r2, #8
 800949a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	69db      	ldr	r3, [r3, #28]
 80094a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d003      	beq.n	80094b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 f887 	bl	80095be <HAL_TIM_IC_CaptureCallback>
 80094b0:	e005      	b.n	80094be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f879 	bl	80095aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f88a 	bl	80095d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	f003 0301 	and.w	r3, r3, #1
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d10e      	bne.n	80094f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	f003 0301 	and.w	r3, r3, #1
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d107      	bne.n	80094f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f06f 0201 	mvn.w	r2, #1
 80094e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7f8 ff7c 	bl	80023e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094fa:	2b80      	cmp	r3, #128	; 0x80
 80094fc:	d10e      	bne.n	800951c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009508:	2b80      	cmp	r3, #128	; 0x80
 800950a:	d107      	bne.n	800951c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f914 	bl	8009744 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800952a:	d10e      	bne.n	800954a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009536:	2b80      	cmp	r3, #128	; 0x80
 8009538:	d107      	bne.n	800954a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 f907 	bl	8009758 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	691b      	ldr	r3, [r3, #16]
 8009550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009554:	2b40      	cmp	r3, #64	; 0x40
 8009556:	d10e      	bne.n	8009576 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009562:	2b40      	cmp	r3, #64	; 0x40
 8009564:	d107      	bne.n	8009576 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800956e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 f838 	bl	80095e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	f003 0320 	and.w	r3, r3, #32
 8009580:	2b20      	cmp	r3, #32
 8009582:	d10e      	bne.n	80095a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	f003 0320 	and.w	r3, r3, #32
 800958e:	2b20      	cmp	r3, #32
 8009590:	d107      	bne.n	80095a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f06f 0220 	mvn.w	r2, #32
 800959a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 f8c7 	bl	8009730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095a2:	bf00      	nop
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095aa:	b480      	push	{r7}
 80095ac:	b083      	sub	sp, #12
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80095b2:	bf00      	nop
 80095b4:	370c      	adds	r7, #12
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr

080095be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80095be:	b480      	push	{r7}
 80095c0:	b083      	sub	sp, #12
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80095c6:	bf00      	nop
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095d2:	b480      	push	{r7}
 80095d4:	b083      	sub	sp, #12
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095da:	bf00      	nop
 80095dc:	370c      	adds	r7, #12
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr

080095e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095e6:	b480      	push	{r7}
 80095e8:	b083      	sub	sp, #12
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095ee:	bf00      	nop
 80095f0:	370c      	adds	r7, #12
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
	...

080095fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4a40      	ldr	r2, [pc, #256]	; (8009710 <TIM_Base_SetConfig+0x114>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d013      	beq.n	800963c <TIM_Base_SetConfig+0x40>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800961a:	d00f      	beq.n	800963c <TIM_Base_SetConfig+0x40>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4a3d      	ldr	r2, [pc, #244]	; (8009714 <TIM_Base_SetConfig+0x118>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d00b      	beq.n	800963c <TIM_Base_SetConfig+0x40>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a3c      	ldr	r2, [pc, #240]	; (8009718 <TIM_Base_SetConfig+0x11c>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d007      	beq.n	800963c <TIM_Base_SetConfig+0x40>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a3b      	ldr	r2, [pc, #236]	; (800971c <TIM_Base_SetConfig+0x120>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d003      	beq.n	800963c <TIM_Base_SetConfig+0x40>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a3a      	ldr	r2, [pc, #232]	; (8009720 <TIM_Base_SetConfig+0x124>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d108      	bne.n	800964e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	4313      	orrs	r3, r2
 800964c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a2f      	ldr	r2, [pc, #188]	; (8009710 <TIM_Base_SetConfig+0x114>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d01f      	beq.n	8009696 <TIM_Base_SetConfig+0x9a>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800965c:	d01b      	beq.n	8009696 <TIM_Base_SetConfig+0x9a>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a2c      	ldr	r2, [pc, #176]	; (8009714 <TIM_Base_SetConfig+0x118>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d017      	beq.n	8009696 <TIM_Base_SetConfig+0x9a>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a2b      	ldr	r2, [pc, #172]	; (8009718 <TIM_Base_SetConfig+0x11c>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d013      	beq.n	8009696 <TIM_Base_SetConfig+0x9a>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a2a      	ldr	r2, [pc, #168]	; (800971c <TIM_Base_SetConfig+0x120>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d00f      	beq.n	8009696 <TIM_Base_SetConfig+0x9a>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a29      	ldr	r2, [pc, #164]	; (8009720 <TIM_Base_SetConfig+0x124>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d00b      	beq.n	8009696 <TIM_Base_SetConfig+0x9a>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a28      	ldr	r2, [pc, #160]	; (8009724 <TIM_Base_SetConfig+0x128>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d007      	beq.n	8009696 <TIM_Base_SetConfig+0x9a>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a27      	ldr	r2, [pc, #156]	; (8009728 <TIM_Base_SetConfig+0x12c>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d003      	beq.n	8009696 <TIM_Base_SetConfig+0x9a>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a26      	ldr	r2, [pc, #152]	; (800972c <TIM_Base_SetConfig+0x130>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d108      	bne.n	80096a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800969c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	695b      	ldr	r3, [r3, #20]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	689a      	ldr	r2, [r3, #8]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a10      	ldr	r2, [pc, #64]	; (8009710 <TIM_Base_SetConfig+0x114>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d00f      	beq.n	80096f4 <TIM_Base_SetConfig+0xf8>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a12      	ldr	r2, [pc, #72]	; (8009720 <TIM_Base_SetConfig+0x124>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d00b      	beq.n	80096f4 <TIM_Base_SetConfig+0xf8>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a11      	ldr	r2, [pc, #68]	; (8009724 <TIM_Base_SetConfig+0x128>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d007      	beq.n	80096f4 <TIM_Base_SetConfig+0xf8>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4a10      	ldr	r2, [pc, #64]	; (8009728 <TIM_Base_SetConfig+0x12c>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d003      	beq.n	80096f4 <TIM_Base_SetConfig+0xf8>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a0f      	ldr	r2, [pc, #60]	; (800972c <TIM_Base_SetConfig+0x130>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d103      	bne.n	80096fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	691a      	ldr	r2, [r3, #16]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	615a      	str	r2, [r3, #20]
}
 8009702:	bf00      	nop
 8009704:	3714      	adds	r7, #20
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	40010000 	.word	0x40010000
 8009714:	40000400 	.word	0x40000400
 8009718:	40000800 	.word	0x40000800
 800971c:	40000c00 	.word	0x40000c00
 8009720:	40010400 	.word	0x40010400
 8009724:	40014000 	.word	0x40014000
 8009728:	40014400 	.word	0x40014400
 800972c:	40014800 	.word	0x40014800

08009730 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d101      	bne.n	800977e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	e042      	b.n	8009804 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009784:	2b00      	cmp	r3, #0
 8009786:	d106      	bne.n	8009796 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f7f8 fe5f 	bl	8002454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2224      	movs	r2, #36	; 0x24
 800979a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f022 0201 	bic.w	r2, r2, #1
 80097ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fc5a 	bl	800a068 <UART_SetConfig>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d101      	bne.n	80097be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e022      	b.n	8009804 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d002      	beq.n	80097cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f001 f9ae 	bl	800ab28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	685a      	ldr	r2, [r3, #4]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80097da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	689a      	ldr	r2, [r3, #8]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80097ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f042 0201 	orr.w	r2, r2, #1
 80097fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f001 fa35 	bl	800ac6c <UART_CheckIdleState>
 8009802:	4603      	mov	r3, r0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	4613      	mov	r3, r2
 8009818:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009820:	2b20      	cmp	r3, #32
 8009822:	d168      	bne.n	80098f6 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d002      	beq.n	8009830 <HAL_UART_Transmit_DMA+0x24>
 800982a:	88fb      	ldrh	r3, [r7, #6]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d101      	bne.n	8009834 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	e061      	b.n	80098f8 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800983a:	2b01      	cmp	r3, #1
 800983c:	d101      	bne.n	8009842 <HAL_UART_Transmit_DMA+0x36>
 800983e:	2302      	movs	r3, #2
 8009840:	e05a      	b.n	80098f8 <HAL_UART_Transmit_DMA+0xec>
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2201      	movs	r2, #1
 8009846:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	68ba      	ldr	r2, [r7, #8]
 800984e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	88fa      	ldrh	r2, [r7, #6]
 8009854:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	88fa      	ldrh	r2, [r7, #6]
 800985c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2200      	movs	r2, #0
 8009864:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2221      	movs	r2, #33	; 0x21
 800986c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009874:	2b00      	cmp	r3, #0
 8009876:	d02c      	beq.n	80098d2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800987c:	4a20      	ldr	r2, [pc, #128]	; (8009900 <HAL_UART_Transmit_DMA+0xf4>)
 800987e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009884:	4a1f      	ldr	r2, [pc, #124]	; (8009904 <HAL_UART_Transmit_DMA+0xf8>)
 8009886:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800988c:	4a1e      	ldr	r2, [pc, #120]	; (8009908 <HAL_UART_Transmit_DMA+0xfc>)
 800988e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009894:	2200      	movs	r2, #0
 8009896:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098a0:	4619      	mov	r1, r3
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	3328      	adds	r3, #40	; 0x28
 80098a8:	461a      	mov	r2, r3
 80098aa:	88fb      	ldrh	r3, [r7, #6]
 80098ac:	f7fa fbe8 	bl	8004080 <HAL_DMA_Start_IT>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00d      	beq.n	80098d2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2210      	movs	r2, #16
 80098ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2220      	movs	r2, #32
 80098ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	e012      	b.n	80098f8 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2240      	movs	r2, #64	; 0x40
 80098d8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2200      	movs	r2, #0
 80098de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	689a      	ldr	r2, [r3, #8]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80098f0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80098f2:	2300      	movs	r3, #0
 80098f4:	e000      	b.n	80098f8 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 80098f6:	2302      	movs	r3, #2
  }
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3710      	adds	r7, #16
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	0800af81 	.word	0x0800af81
 8009904:	0800afd1 	.word	0x0800afd1
 8009908:	0800b0bb 	.word	0x0800b0bb

0800990c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	4613      	mov	r3, r2
 8009918:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009920:	2b20      	cmp	r3, #32
 8009922:	d131      	bne.n	8009988 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d002      	beq.n	8009930 <HAL_UART_Receive_DMA+0x24>
 800992a:	88fb      	ldrh	r3, [r7, #6]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d101      	bne.n	8009934 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	e02a      	b.n	800998a <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800993a:	2b01      	cmp	r3, #1
 800993c:	d101      	bne.n	8009942 <HAL_UART_Receive_DMA+0x36>
 800993e:	2302      	movs	r3, #2
 8009940:	e023      	b.n	800998a <HAL_UART_Receive_DMA+0x7e>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2200      	movs	r2, #0
 800994e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a0f      	ldr	r2, [pc, #60]	; (8009994 <HAL_UART_Receive_DMA+0x88>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d00e      	beq.n	8009978 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009964:	2b00      	cmp	r3, #0
 8009966:	d007      	beq.n	8009978 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009976:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009978:	88fb      	ldrh	r3, [r7, #6]
 800997a:	461a      	mov	r2, r3
 800997c:	68b9      	ldr	r1, [r7, #8]
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f001 fa40 	bl	800ae04 <UART_Start_Receive_DMA>
 8009984:	4603      	mov	r3, r0
 8009986:	e000      	b.n	800998a <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009988:	2302      	movs	r3, #2
  }
}
 800998a:	4618      	mov	r0, r3
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	58000c00 	.word	0x58000c00

08009998 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099a6:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099ae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099ba:	2b80      	cmp	r3, #128	; 0x80
 80099bc:	d127      	bne.n	8009a0e <HAL_UART_DMAStop+0x76>
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2b21      	cmp	r3, #33	; 0x21
 80099c2:	d124      	bne.n	8009a0e <HAL_UART_DMAStop+0x76>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	689a      	ldr	r2, [r3, #8]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099d2:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d015      	beq.n	8009a08 <HAL_UART_DMAStop+0x70>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7fa fdb7 	bl	8004554 <HAL_DMA_Abort>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00d      	beq.n	8009a08 <HAL_UART_DMAStop+0x70>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7fc fa3b 	bl	8005e6c <HAL_DMA_GetError>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b20      	cmp	r3, #32
 80099fa:	d105      	bne.n	8009a08 <HAL_UART_DMAStop+0x70>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2210      	movs	r2, #16
 8009a00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8009a04:	2303      	movs	r3, #3
 8009a06:	e032      	b.n	8009a6e <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f001 fa69 	bl	800aee0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a18:	2b40      	cmp	r3, #64	; 0x40
 8009a1a:	d127      	bne.n	8009a6c <HAL_UART_DMAStop+0xd4>
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	2b22      	cmp	r3, #34	; 0x22
 8009a20:	d124      	bne.n	8009a6c <HAL_UART_DMAStop+0xd4>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	689a      	ldr	r2, [r3, #8]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a30:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d015      	beq.n	8009a66 <HAL_UART_DMAStop+0xce>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fa fd88 	bl	8004554 <HAL_DMA_Abort>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00d      	beq.n	8009a66 <HAL_UART_DMAStop+0xce>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7fc fa0c 	bl	8005e6c <HAL_DMA_GetError>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b20      	cmp	r3, #32
 8009a58:	d105      	bne.n	8009a66 <HAL_UART_DMAStop+0xce>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2210      	movs	r2, #16
 8009a5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8009a62:	2303      	movs	r3, #3
 8009a64:	e003      	b.n	8009a6e <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f001 fa58 	bl	800af1c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
	...

08009a78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b088      	sub	sp, #32
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	69db      	ldr	r3, [r3, #28]
 8009a86:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009a98:	69fa      	ldr	r2, [r7, #28]
 8009a9a:	f640 030f 	movw	r3, #2063	; 0x80f
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d118      	bne.n	8009ada <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	f003 0320 	and.w	r3, r3, #32
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d013      	beq.n	8009ada <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	f003 0320 	and.w	r3, r3, #32
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d104      	bne.n	8009ac6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d009      	beq.n	8009ada <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	f000 8282 	beq.w	8009fd4 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	4798      	blx	r3
      }
      return;
 8009ad8:	e27c      	b.n	8009fd4 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 80ef 	beq.w	8009cc0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009ae2:	697a      	ldr	r2, [r7, #20]
 8009ae4:	4b73      	ldr	r3, [pc, #460]	; (8009cb4 <HAL_UART_IRQHandler+0x23c>)
 8009ae6:	4013      	ands	r3, r2
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d105      	bne.n	8009af8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009aec:	69ba      	ldr	r2, [r7, #24]
 8009aee:	4b72      	ldr	r3, [pc, #456]	; (8009cb8 <HAL_UART_IRQHandler+0x240>)
 8009af0:	4013      	ands	r3, r2
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f000 80e4 	beq.w	8009cc0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	f003 0301 	and.w	r3, r3, #1
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d010      	beq.n	8009b24 <HAL_UART_IRQHandler+0xac>
 8009b02:	69bb      	ldr	r3, [r7, #24]
 8009b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00b      	beq.n	8009b24 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2201      	movs	r2, #1
 8009b12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b1a:	f043 0201 	orr.w	r2, r3, #1
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	f003 0302 	and.w	r3, r3, #2
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d010      	beq.n	8009b50 <HAL_UART_IRQHandler+0xd8>
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	f003 0301 	and.w	r3, r3, #1
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d00b      	beq.n	8009b50 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b46:	f043 0204 	orr.w	r2, r3, #4
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	f003 0304 	and.w	r3, r3, #4
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d010      	beq.n	8009b7c <HAL_UART_IRQHandler+0x104>
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	f003 0301 	and.w	r3, r3, #1
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d00b      	beq.n	8009b7c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2204      	movs	r2, #4
 8009b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b72:	f043 0202 	orr.w	r2, r3, #2
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	f003 0308 	and.w	r3, r3, #8
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d015      	beq.n	8009bb2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	f003 0320 	and.w	r3, r3, #32
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d104      	bne.n	8009b9a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009b90:	697a      	ldr	r2, [r7, #20]
 8009b92:	4b48      	ldr	r3, [pc, #288]	; (8009cb4 <HAL_UART_IRQHandler+0x23c>)
 8009b94:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00b      	beq.n	8009bb2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2208      	movs	r2, #8
 8009ba0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ba8:	f043 0208 	orr.w	r2, r3, #8
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d011      	beq.n	8009be0 <HAL_UART_IRQHandler+0x168>
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d00c      	beq.n	8009be0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009bce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bd6:	f043 0220 	orr.w	r2, r3, #32
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	f000 81f6 	beq.w	8009fd8 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	f003 0320 	and.w	r3, r3, #32
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d011      	beq.n	8009c1a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	f003 0320 	and.w	r3, r3, #32
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d104      	bne.n	8009c0a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d007      	beq.n	8009c1a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d003      	beq.n	8009c1a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c20:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c2c:	2b40      	cmp	r3, #64	; 0x40
 8009c2e:	d004      	beq.n	8009c3a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d031      	beq.n	8009c9e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f001 f96e 	bl	800af1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c4a:	2b40      	cmp	r3, #64	; 0x40
 8009c4c:	d123      	bne.n	8009c96 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	689a      	ldr	r2, [r3, #8]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c5c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d013      	beq.n	8009c8e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c6a:	4a14      	ldr	r2, [pc, #80]	; (8009cbc <HAL_UART_IRQHandler+0x244>)
 8009c6c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fa ff8c 	bl	8004b90 <HAL_DMA_Abort_IT>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d017      	beq.n	8009cae <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009c88:	4610      	mov	r0, r2
 8009c8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c8c:	e00f      	b.n	8009cae <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 f9d4 	bl	800a03c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c94:	e00b      	b.n	8009cae <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 f9d0 	bl	800a03c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c9c:	e007      	b.n	8009cae <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 f9cc 	bl	800a03c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009cac:	e194      	b.n	8009fd8 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cae:	bf00      	nop
    return;
 8009cb0:	e192      	b.n	8009fd8 <HAL_UART_IRQHandler+0x560>
 8009cb2:	bf00      	nop
 8009cb4:	10000001 	.word	0x10000001
 8009cb8:	04000120 	.word	0x04000120
 8009cbc:	0800b13b 	.word	0x0800b13b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	f040 810f 	bne.w	8009ee8 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	f003 0310 	and.w	r3, r3, #16
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f000 8109 	beq.w	8009ee8 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	f003 0310 	and.w	r3, r3, #16
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	f000 8103 	beq.w	8009ee8 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2210      	movs	r2, #16
 8009ce8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cf4:	2b40      	cmp	r3, #64	; 0x40
 8009cf6:	f040 80bb 	bne.w	8009e70 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a96      	ldr	r2, [pc, #600]	; (8009f5c <HAL_UART_IRQHandler+0x4e4>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d059      	beq.n	8009dba <HAL_UART_IRQHandler+0x342>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a94      	ldr	r2, [pc, #592]	; (8009f60 <HAL_UART_IRQHandler+0x4e8>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d053      	beq.n	8009dba <HAL_UART_IRQHandler+0x342>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a92      	ldr	r2, [pc, #584]	; (8009f64 <HAL_UART_IRQHandler+0x4ec>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d04d      	beq.n	8009dba <HAL_UART_IRQHandler+0x342>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a90      	ldr	r2, [pc, #576]	; (8009f68 <HAL_UART_IRQHandler+0x4f0>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d047      	beq.n	8009dba <HAL_UART_IRQHandler+0x342>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a8e      	ldr	r2, [pc, #568]	; (8009f6c <HAL_UART_IRQHandler+0x4f4>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d041      	beq.n	8009dba <HAL_UART_IRQHandler+0x342>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a8c      	ldr	r2, [pc, #560]	; (8009f70 <HAL_UART_IRQHandler+0x4f8>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d03b      	beq.n	8009dba <HAL_UART_IRQHandler+0x342>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a8a      	ldr	r2, [pc, #552]	; (8009f74 <HAL_UART_IRQHandler+0x4fc>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d035      	beq.n	8009dba <HAL_UART_IRQHandler+0x342>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a88      	ldr	r2, [pc, #544]	; (8009f78 <HAL_UART_IRQHandler+0x500>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d02f      	beq.n	8009dba <HAL_UART_IRQHandler+0x342>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a86      	ldr	r2, [pc, #536]	; (8009f7c <HAL_UART_IRQHandler+0x504>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d029      	beq.n	8009dba <HAL_UART_IRQHandler+0x342>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a84      	ldr	r2, [pc, #528]	; (8009f80 <HAL_UART_IRQHandler+0x508>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d023      	beq.n	8009dba <HAL_UART_IRQHandler+0x342>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a82      	ldr	r2, [pc, #520]	; (8009f84 <HAL_UART_IRQHandler+0x50c>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d01d      	beq.n	8009dba <HAL_UART_IRQHandler+0x342>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a80      	ldr	r2, [pc, #512]	; (8009f88 <HAL_UART_IRQHandler+0x510>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d017      	beq.n	8009dba <HAL_UART_IRQHandler+0x342>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a7e      	ldr	r2, [pc, #504]	; (8009f8c <HAL_UART_IRQHandler+0x514>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d011      	beq.n	8009dba <HAL_UART_IRQHandler+0x342>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a7c      	ldr	r2, [pc, #496]	; (8009f90 <HAL_UART_IRQHandler+0x518>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d00b      	beq.n	8009dba <HAL_UART_IRQHandler+0x342>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a7a      	ldr	r2, [pc, #488]	; (8009f94 <HAL_UART_IRQHandler+0x51c>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d005      	beq.n	8009dba <HAL_UART_IRQHandler+0x342>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a78      	ldr	r2, [pc, #480]	; (8009f98 <HAL_UART_IRQHandler+0x520>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d105      	bne.n	8009dc6 <HAL_UART_IRQHandler+0x34e>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	e004      	b.n	8009dd0 <HAL_UART_IRQHandler+0x358>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8009dd2:	893b      	ldrh	r3, [r7, #8]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f000 8101 	beq.w	8009fdc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009de0:	893a      	ldrh	r2, [r7, #8]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	f080 80fa 	bcs.w	8009fdc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	893a      	ldrh	r2, [r7, #8]
 8009dec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009df4:	69db      	ldr	r3, [r3, #28]
 8009df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dfa:	d02b      	beq.n	8009e54 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e0a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	689a      	ldr	r2, [r3, #8]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f022 0201 	bic.w	r2, r2, #1
 8009e1a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	689a      	ldr	r2, [r3, #8]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e2a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2220      	movs	r2, #32
 8009e30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f022 0210 	bic.w	r2, r2, #16
 8009e48:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fa fb80 	bl	8004554 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	1ad3      	subs	r3, r2, r3
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	4619      	mov	r1, r3
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 f8f1 	bl	800a050 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e6e:	e0b5      	b.n	8009fdc <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	1ad3      	subs	r3, r2, r3
 8009e80:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f000 80a8 	beq.w	8009fe0 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8009e90:	897b      	ldrh	r3, [r7, #10]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	f000 80a4 	beq.w	8009fe0 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009ea6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	6899      	ldr	r1, [r3, #8]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	4b3a      	ldr	r3, [pc, #232]	; (8009f9c <HAL_UART_IRQHandler+0x524>)
 8009eb4:	400b      	ands	r3, r1
 8009eb6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2220      	movs	r2, #32
 8009ebc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f022 0210 	bic.w	r2, r2, #16
 8009eda:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009edc:	897b      	ldrh	r3, [r7, #10]
 8009ede:	4619      	mov	r1, r3
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 f8b5 	bl	800a050 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009ee6:	e07b      	b.n	8009fe0 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00d      	beq.n	8009f0e <HAL_UART_IRQHandler+0x496>
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d008      	beq.n	8009f0e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009f04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f001 f947 	bl	800b19a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f0c:	e06b      	b.n	8009fe6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009f0e:	69fb      	ldr	r3, [r7, #28]
 8009f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d012      	beq.n	8009f3e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d104      	bne.n	8009f2c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d008      	beq.n	8009f3e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d057      	beq.n	8009fe4 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	4798      	blx	r3
    }
    return;
 8009f3c:	e052      	b.n	8009fe4 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d02b      	beq.n	8009fa0 <HAL_UART_IRQHandler+0x528>
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d026      	beq.n	8009fa0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f001 f907 	bl	800b166 <UART_EndTransmit_IT>
    return;
 8009f58:	e045      	b.n	8009fe6 <HAL_UART_IRQHandler+0x56e>
 8009f5a:	bf00      	nop
 8009f5c:	40020010 	.word	0x40020010
 8009f60:	40020028 	.word	0x40020028
 8009f64:	40020040 	.word	0x40020040
 8009f68:	40020058 	.word	0x40020058
 8009f6c:	40020070 	.word	0x40020070
 8009f70:	40020088 	.word	0x40020088
 8009f74:	400200a0 	.word	0x400200a0
 8009f78:	400200b8 	.word	0x400200b8
 8009f7c:	40020410 	.word	0x40020410
 8009f80:	40020428 	.word	0x40020428
 8009f84:	40020440 	.word	0x40020440
 8009f88:	40020458 	.word	0x40020458
 8009f8c:	40020470 	.word	0x40020470
 8009f90:	40020488 	.word	0x40020488
 8009f94:	400204a0 	.word	0x400204a0
 8009f98:	400204b8 	.word	0x400204b8
 8009f9c:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d008      	beq.n	8009fbc <HAL_UART_IRQHandler+0x544>
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d003      	beq.n	8009fbc <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f001 f904 	bl	800b1c2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fba:	e014      	b.n	8009fe6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d00f      	beq.n	8009fe6 <HAL_UART_IRQHandler+0x56e>
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	da0c      	bge.n	8009fe6 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f001 f8ee 	bl	800b1ae <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fd2:	e008      	b.n	8009fe6 <HAL_UART_IRQHandler+0x56e>
      return;
 8009fd4:	bf00      	nop
 8009fd6:	e006      	b.n	8009fe6 <HAL_UART_IRQHandler+0x56e>
    return;
 8009fd8:	bf00      	nop
 8009fda:	e004      	b.n	8009fe6 <HAL_UART_IRQHandler+0x56e>
      return;
 8009fdc:	bf00      	nop
 8009fde:	e002      	b.n	8009fe6 <HAL_UART_IRQHandler+0x56e>
      return;
 8009fe0:	bf00      	nop
 8009fe2:	e000      	b.n	8009fe6 <HAL_UART_IRQHandler+0x56e>
    return;
 8009fe4:	bf00      	nop
  }
}
 8009fe6:	3720      	adds	r7, #32
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009ff4:	bf00      	nop
 8009ff6:	370c      	adds	r7, #12
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a008:	bf00      	nop
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a01c:	bf00      	nop
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a044:	bf00      	nop
 800a046:	370c      	adds	r7, #12
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	460b      	mov	r3, r1
 800a05a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a05c:	bf00      	nop
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a068:	b5b0      	push	{r4, r5, r7, lr}
 800a06a:	b08e      	sub	sp, #56	; 0x38
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a070:	2300      	movs	r3, #0
 800a072:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	689a      	ldr	r2, [r3, #8]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	431a      	orrs	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	695b      	ldr	r3, [r3, #20]
 800a084:	431a      	orrs	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	4bbf      	ldr	r3, [pc, #764]	; (800a394 <UART_SetConfig+0x32c>)
 800a096:	4013      	ands	r3, r2
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	6812      	ldr	r2, [r2, #0]
 800a09c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a09e:	430b      	orrs	r3, r1
 800a0a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	68da      	ldr	r2, [r3, #12]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	430a      	orrs	r2, r1
 800a0b6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	699b      	ldr	r3, [r3, #24]
 800a0bc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4ab5      	ldr	r2, [pc, #724]	; (800a398 <UART_SetConfig+0x330>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d004      	beq.n	800a0d2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a1b      	ldr	r3, [r3, #32]
 800a0cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	689a      	ldr	r2, [r3, #8]
 800a0d8:	4bb0      	ldr	r3, [pc, #704]	; (800a39c <UART_SetConfig+0x334>)
 800a0da:	4013      	ands	r3, r2
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	6812      	ldr	r2, [r2, #0]
 800a0e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a0e2:	430b      	orrs	r3, r1
 800a0e4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ec:	f023 010f 	bic.w	r1, r3, #15
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	430a      	orrs	r2, r1
 800a0fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4aa7      	ldr	r2, [pc, #668]	; (800a3a0 <UART_SetConfig+0x338>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d176      	bne.n	800a1f4 <UART_SetConfig+0x18c>
 800a106:	4ba7      	ldr	r3, [pc, #668]	; (800a3a4 <UART_SetConfig+0x33c>)
 800a108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a10a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a10e:	2b28      	cmp	r3, #40	; 0x28
 800a110:	d86c      	bhi.n	800a1ec <UART_SetConfig+0x184>
 800a112:	a201      	add	r2, pc, #4	; (adr r2, 800a118 <UART_SetConfig+0xb0>)
 800a114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a118:	0800a1bd 	.word	0x0800a1bd
 800a11c:	0800a1ed 	.word	0x0800a1ed
 800a120:	0800a1ed 	.word	0x0800a1ed
 800a124:	0800a1ed 	.word	0x0800a1ed
 800a128:	0800a1ed 	.word	0x0800a1ed
 800a12c:	0800a1ed 	.word	0x0800a1ed
 800a130:	0800a1ed 	.word	0x0800a1ed
 800a134:	0800a1ed 	.word	0x0800a1ed
 800a138:	0800a1c5 	.word	0x0800a1c5
 800a13c:	0800a1ed 	.word	0x0800a1ed
 800a140:	0800a1ed 	.word	0x0800a1ed
 800a144:	0800a1ed 	.word	0x0800a1ed
 800a148:	0800a1ed 	.word	0x0800a1ed
 800a14c:	0800a1ed 	.word	0x0800a1ed
 800a150:	0800a1ed 	.word	0x0800a1ed
 800a154:	0800a1ed 	.word	0x0800a1ed
 800a158:	0800a1cd 	.word	0x0800a1cd
 800a15c:	0800a1ed 	.word	0x0800a1ed
 800a160:	0800a1ed 	.word	0x0800a1ed
 800a164:	0800a1ed 	.word	0x0800a1ed
 800a168:	0800a1ed 	.word	0x0800a1ed
 800a16c:	0800a1ed 	.word	0x0800a1ed
 800a170:	0800a1ed 	.word	0x0800a1ed
 800a174:	0800a1ed 	.word	0x0800a1ed
 800a178:	0800a1d5 	.word	0x0800a1d5
 800a17c:	0800a1ed 	.word	0x0800a1ed
 800a180:	0800a1ed 	.word	0x0800a1ed
 800a184:	0800a1ed 	.word	0x0800a1ed
 800a188:	0800a1ed 	.word	0x0800a1ed
 800a18c:	0800a1ed 	.word	0x0800a1ed
 800a190:	0800a1ed 	.word	0x0800a1ed
 800a194:	0800a1ed 	.word	0x0800a1ed
 800a198:	0800a1dd 	.word	0x0800a1dd
 800a19c:	0800a1ed 	.word	0x0800a1ed
 800a1a0:	0800a1ed 	.word	0x0800a1ed
 800a1a4:	0800a1ed 	.word	0x0800a1ed
 800a1a8:	0800a1ed 	.word	0x0800a1ed
 800a1ac:	0800a1ed 	.word	0x0800a1ed
 800a1b0:	0800a1ed 	.word	0x0800a1ed
 800a1b4:	0800a1ed 	.word	0x0800a1ed
 800a1b8:	0800a1e5 	.word	0x0800a1e5
 800a1bc:	2301      	movs	r3, #1
 800a1be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1c2:	e222      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a1c4:	2304      	movs	r3, #4
 800a1c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ca:	e21e      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a1cc:	2308      	movs	r3, #8
 800a1ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1d2:	e21a      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a1d4:	2310      	movs	r3, #16
 800a1d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1da:	e216      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a1dc:	2320      	movs	r3, #32
 800a1de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1e2:	e212      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a1e4:	2340      	movs	r3, #64	; 0x40
 800a1e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ea:	e20e      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a1ec:	2380      	movs	r3, #128	; 0x80
 800a1ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1f2:	e20a      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a6b      	ldr	r2, [pc, #428]	; (800a3a8 <UART_SetConfig+0x340>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d130      	bne.n	800a260 <UART_SetConfig+0x1f8>
 800a1fe:	4b69      	ldr	r3, [pc, #420]	; (800a3a4 <UART_SetConfig+0x33c>)
 800a200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a202:	f003 0307 	and.w	r3, r3, #7
 800a206:	2b05      	cmp	r3, #5
 800a208:	d826      	bhi.n	800a258 <UART_SetConfig+0x1f0>
 800a20a:	a201      	add	r2, pc, #4	; (adr r2, 800a210 <UART_SetConfig+0x1a8>)
 800a20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a210:	0800a229 	.word	0x0800a229
 800a214:	0800a231 	.word	0x0800a231
 800a218:	0800a239 	.word	0x0800a239
 800a21c:	0800a241 	.word	0x0800a241
 800a220:	0800a249 	.word	0x0800a249
 800a224:	0800a251 	.word	0x0800a251
 800a228:	2300      	movs	r3, #0
 800a22a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a22e:	e1ec      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a230:	2304      	movs	r3, #4
 800a232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a236:	e1e8      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a238:	2308      	movs	r3, #8
 800a23a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a23e:	e1e4      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a240:	2310      	movs	r3, #16
 800a242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a246:	e1e0      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a248:	2320      	movs	r3, #32
 800a24a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a24e:	e1dc      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a250:	2340      	movs	r3, #64	; 0x40
 800a252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a256:	e1d8      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a258:	2380      	movs	r3, #128	; 0x80
 800a25a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a25e:	e1d4      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a51      	ldr	r2, [pc, #324]	; (800a3ac <UART_SetConfig+0x344>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d130      	bne.n	800a2cc <UART_SetConfig+0x264>
 800a26a:	4b4e      	ldr	r3, [pc, #312]	; (800a3a4 <UART_SetConfig+0x33c>)
 800a26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a26e:	f003 0307 	and.w	r3, r3, #7
 800a272:	2b05      	cmp	r3, #5
 800a274:	d826      	bhi.n	800a2c4 <UART_SetConfig+0x25c>
 800a276:	a201      	add	r2, pc, #4	; (adr r2, 800a27c <UART_SetConfig+0x214>)
 800a278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a27c:	0800a295 	.word	0x0800a295
 800a280:	0800a29d 	.word	0x0800a29d
 800a284:	0800a2a5 	.word	0x0800a2a5
 800a288:	0800a2ad 	.word	0x0800a2ad
 800a28c:	0800a2b5 	.word	0x0800a2b5
 800a290:	0800a2bd 	.word	0x0800a2bd
 800a294:	2300      	movs	r3, #0
 800a296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a29a:	e1b6      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a29c:	2304      	movs	r3, #4
 800a29e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2a2:	e1b2      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a2a4:	2308      	movs	r3, #8
 800a2a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2aa:	e1ae      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a2ac:	2310      	movs	r3, #16
 800a2ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2b2:	e1aa      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a2b4:	2320      	movs	r3, #32
 800a2b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ba:	e1a6      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a2bc:	2340      	movs	r3, #64	; 0x40
 800a2be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2c2:	e1a2      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a2c4:	2380      	movs	r3, #128	; 0x80
 800a2c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ca:	e19e      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a37      	ldr	r2, [pc, #220]	; (800a3b0 <UART_SetConfig+0x348>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d130      	bne.n	800a338 <UART_SetConfig+0x2d0>
 800a2d6:	4b33      	ldr	r3, [pc, #204]	; (800a3a4 <UART_SetConfig+0x33c>)
 800a2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2da:	f003 0307 	and.w	r3, r3, #7
 800a2de:	2b05      	cmp	r3, #5
 800a2e0:	d826      	bhi.n	800a330 <UART_SetConfig+0x2c8>
 800a2e2:	a201      	add	r2, pc, #4	; (adr r2, 800a2e8 <UART_SetConfig+0x280>)
 800a2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e8:	0800a301 	.word	0x0800a301
 800a2ec:	0800a309 	.word	0x0800a309
 800a2f0:	0800a311 	.word	0x0800a311
 800a2f4:	0800a319 	.word	0x0800a319
 800a2f8:	0800a321 	.word	0x0800a321
 800a2fc:	0800a329 	.word	0x0800a329
 800a300:	2300      	movs	r3, #0
 800a302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a306:	e180      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a308:	2304      	movs	r3, #4
 800a30a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a30e:	e17c      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a310:	2308      	movs	r3, #8
 800a312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a316:	e178      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a318:	2310      	movs	r3, #16
 800a31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a31e:	e174      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a320:	2320      	movs	r3, #32
 800a322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a326:	e170      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a328:	2340      	movs	r3, #64	; 0x40
 800a32a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a32e:	e16c      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a330:	2380      	movs	r3, #128	; 0x80
 800a332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a336:	e168      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a1d      	ldr	r2, [pc, #116]	; (800a3b4 <UART_SetConfig+0x34c>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d142      	bne.n	800a3c8 <UART_SetConfig+0x360>
 800a342:	4b18      	ldr	r3, [pc, #96]	; (800a3a4 <UART_SetConfig+0x33c>)
 800a344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a346:	f003 0307 	and.w	r3, r3, #7
 800a34a:	2b05      	cmp	r3, #5
 800a34c:	d838      	bhi.n	800a3c0 <UART_SetConfig+0x358>
 800a34e:	a201      	add	r2, pc, #4	; (adr r2, 800a354 <UART_SetConfig+0x2ec>)
 800a350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a354:	0800a36d 	.word	0x0800a36d
 800a358:	0800a375 	.word	0x0800a375
 800a35c:	0800a37d 	.word	0x0800a37d
 800a360:	0800a385 	.word	0x0800a385
 800a364:	0800a38d 	.word	0x0800a38d
 800a368:	0800a3b9 	.word	0x0800a3b9
 800a36c:	2300      	movs	r3, #0
 800a36e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a372:	e14a      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a374:	2304      	movs	r3, #4
 800a376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a37a:	e146      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a37c:	2308      	movs	r3, #8
 800a37e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a382:	e142      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a384:	2310      	movs	r3, #16
 800a386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a38a:	e13e      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a38c:	2320      	movs	r3, #32
 800a38e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a392:	e13a      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a394:	cfff69f3 	.word	0xcfff69f3
 800a398:	58000c00 	.word	0x58000c00
 800a39c:	11fff4ff 	.word	0x11fff4ff
 800a3a0:	40011000 	.word	0x40011000
 800a3a4:	58024400 	.word	0x58024400
 800a3a8:	40004400 	.word	0x40004400
 800a3ac:	40004800 	.word	0x40004800
 800a3b0:	40004c00 	.word	0x40004c00
 800a3b4:	40005000 	.word	0x40005000
 800a3b8:	2340      	movs	r3, #64	; 0x40
 800a3ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3be:	e124      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a3c0:	2380      	movs	r3, #128	; 0x80
 800a3c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3c6:	e120      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4acc      	ldr	r2, [pc, #816]	; (800a700 <UART_SetConfig+0x698>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d176      	bne.n	800a4c0 <UART_SetConfig+0x458>
 800a3d2:	4bcc      	ldr	r3, [pc, #816]	; (800a704 <UART_SetConfig+0x69c>)
 800a3d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3da:	2b28      	cmp	r3, #40	; 0x28
 800a3dc:	d86c      	bhi.n	800a4b8 <UART_SetConfig+0x450>
 800a3de:	a201      	add	r2, pc, #4	; (adr r2, 800a3e4 <UART_SetConfig+0x37c>)
 800a3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e4:	0800a489 	.word	0x0800a489
 800a3e8:	0800a4b9 	.word	0x0800a4b9
 800a3ec:	0800a4b9 	.word	0x0800a4b9
 800a3f0:	0800a4b9 	.word	0x0800a4b9
 800a3f4:	0800a4b9 	.word	0x0800a4b9
 800a3f8:	0800a4b9 	.word	0x0800a4b9
 800a3fc:	0800a4b9 	.word	0x0800a4b9
 800a400:	0800a4b9 	.word	0x0800a4b9
 800a404:	0800a491 	.word	0x0800a491
 800a408:	0800a4b9 	.word	0x0800a4b9
 800a40c:	0800a4b9 	.word	0x0800a4b9
 800a410:	0800a4b9 	.word	0x0800a4b9
 800a414:	0800a4b9 	.word	0x0800a4b9
 800a418:	0800a4b9 	.word	0x0800a4b9
 800a41c:	0800a4b9 	.word	0x0800a4b9
 800a420:	0800a4b9 	.word	0x0800a4b9
 800a424:	0800a499 	.word	0x0800a499
 800a428:	0800a4b9 	.word	0x0800a4b9
 800a42c:	0800a4b9 	.word	0x0800a4b9
 800a430:	0800a4b9 	.word	0x0800a4b9
 800a434:	0800a4b9 	.word	0x0800a4b9
 800a438:	0800a4b9 	.word	0x0800a4b9
 800a43c:	0800a4b9 	.word	0x0800a4b9
 800a440:	0800a4b9 	.word	0x0800a4b9
 800a444:	0800a4a1 	.word	0x0800a4a1
 800a448:	0800a4b9 	.word	0x0800a4b9
 800a44c:	0800a4b9 	.word	0x0800a4b9
 800a450:	0800a4b9 	.word	0x0800a4b9
 800a454:	0800a4b9 	.word	0x0800a4b9
 800a458:	0800a4b9 	.word	0x0800a4b9
 800a45c:	0800a4b9 	.word	0x0800a4b9
 800a460:	0800a4b9 	.word	0x0800a4b9
 800a464:	0800a4a9 	.word	0x0800a4a9
 800a468:	0800a4b9 	.word	0x0800a4b9
 800a46c:	0800a4b9 	.word	0x0800a4b9
 800a470:	0800a4b9 	.word	0x0800a4b9
 800a474:	0800a4b9 	.word	0x0800a4b9
 800a478:	0800a4b9 	.word	0x0800a4b9
 800a47c:	0800a4b9 	.word	0x0800a4b9
 800a480:	0800a4b9 	.word	0x0800a4b9
 800a484:	0800a4b1 	.word	0x0800a4b1
 800a488:	2301      	movs	r3, #1
 800a48a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a48e:	e0bc      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a490:	2304      	movs	r3, #4
 800a492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a496:	e0b8      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a498:	2308      	movs	r3, #8
 800a49a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a49e:	e0b4      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a4a0:	2310      	movs	r3, #16
 800a4a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4a6:	e0b0      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a4a8:	2320      	movs	r3, #32
 800a4aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ae:	e0ac      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a4b0:	2340      	movs	r3, #64	; 0x40
 800a4b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4b6:	e0a8      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a4b8:	2380      	movs	r3, #128	; 0x80
 800a4ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4be:	e0a4      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a90      	ldr	r2, [pc, #576]	; (800a708 <UART_SetConfig+0x6a0>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d130      	bne.n	800a52c <UART_SetConfig+0x4c4>
 800a4ca:	4b8e      	ldr	r3, [pc, #568]	; (800a704 <UART_SetConfig+0x69c>)
 800a4cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ce:	f003 0307 	and.w	r3, r3, #7
 800a4d2:	2b05      	cmp	r3, #5
 800a4d4:	d826      	bhi.n	800a524 <UART_SetConfig+0x4bc>
 800a4d6:	a201      	add	r2, pc, #4	; (adr r2, 800a4dc <UART_SetConfig+0x474>)
 800a4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4dc:	0800a4f5 	.word	0x0800a4f5
 800a4e0:	0800a4fd 	.word	0x0800a4fd
 800a4e4:	0800a505 	.word	0x0800a505
 800a4e8:	0800a50d 	.word	0x0800a50d
 800a4ec:	0800a515 	.word	0x0800a515
 800a4f0:	0800a51d 	.word	0x0800a51d
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4fa:	e086      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a4fc:	2304      	movs	r3, #4
 800a4fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a502:	e082      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a504:	2308      	movs	r3, #8
 800a506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a50a:	e07e      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a50c:	2310      	movs	r3, #16
 800a50e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a512:	e07a      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a514:	2320      	movs	r3, #32
 800a516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a51a:	e076      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a51c:	2340      	movs	r3, #64	; 0x40
 800a51e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a522:	e072      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a524:	2380      	movs	r3, #128	; 0x80
 800a526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a52a:	e06e      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a76      	ldr	r2, [pc, #472]	; (800a70c <UART_SetConfig+0x6a4>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d130      	bne.n	800a598 <UART_SetConfig+0x530>
 800a536:	4b73      	ldr	r3, [pc, #460]	; (800a704 <UART_SetConfig+0x69c>)
 800a538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a53a:	f003 0307 	and.w	r3, r3, #7
 800a53e:	2b05      	cmp	r3, #5
 800a540:	d826      	bhi.n	800a590 <UART_SetConfig+0x528>
 800a542:	a201      	add	r2, pc, #4	; (adr r2, 800a548 <UART_SetConfig+0x4e0>)
 800a544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a548:	0800a561 	.word	0x0800a561
 800a54c:	0800a569 	.word	0x0800a569
 800a550:	0800a571 	.word	0x0800a571
 800a554:	0800a579 	.word	0x0800a579
 800a558:	0800a581 	.word	0x0800a581
 800a55c:	0800a589 	.word	0x0800a589
 800a560:	2300      	movs	r3, #0
 800a562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a566:	e050      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a568:	2304      	movs	r3, #4
 800a56a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a56e:	e04c      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a570:	2308      	movs	r3, #8
 800a572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a576:	e048      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a578:	2310      	movs	r3, #16
 800a57a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a57e:	e044      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a580:	2320      	movs	r3, #32
 800a582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a586:	e040      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a588:	2340      	movs	r3, #64	; 0x40
 800a58a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a58e:	e03c      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a590:	2380      	movs	r3, #128	; 0x80
 800a592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a596:	e038      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a5c      	ldr	r2, [pc, #368]	; (800a710 <UART_SetConfig+0x6a8>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d130      	bne.n	800a604 <UART_SetConfig+0x59c>
 800a5a2:	4b58      	ldr	r3, [pc, #352]	; (800a704 <UART_SetConfig+0x69c>)
 800a5a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5a6:	f003 0307 	and.w	r3, r3, #7
 800a5aa:	2b05      	cmp	r3, #5
 800a5ac:	d826      	bhi.n	800a5fc <UART_SetConfig+0x594>
 800a5ae:	a201      	add	r2, pc, #4	; (adr r2, 800a5b4 <UART_SetConfig+0x54c>)
 800a5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b4:	0800a5cd 	.word	0x0800a5cd
 800a5b8:	0800a5d5 	.word	0x0800a5d5
 800a5bc:	0800a5dd 	.word	0x0800a5dd
 800a5c0:	0800a5e5 	.word	0x0800a5e5
 800a5c4:	0800a5ed 	.word	0x0800a5ed
 800a5c8:	0800a5f5 	.word	0x0800a5f5
 800a5cc:	2302      	movs	r3, #2
 800a5ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5d2:	e01a      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a5d4:	2304      	movs	r3, #4
 800a5d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5da:	e016      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a5dc:	2308      	movs	r3, #8
 800a5de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5e2:	e012      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a5e4:	2310      	movs	r3, #16
 800a5e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ea:	e00e      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a5ec:	2320      	movs	r3, #32
 800a5ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5f2:	e00a      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a5f4:	2340      	movs	r3, #64	; 0x40
 800a5f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5fa:	e006      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a5fc:	2380      	movs	r3, #128	; 0x80
 800a5fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a602:	e002      	b.n	800a60a <UART_SetConfig+0x5a2>
 800a604:	2380      	movs	r3, #128	; 0x80
 800a606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a40      	ldr	r2, [pc, #256]	; (800a710 <UART_SetConfig+0x6a8>)
 800a610:	4293      	cmp	r3, r2
 800a612:	f040 80ef 	bne.w	800a7f4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a616:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a61a:	2b20      	cmp	r3, #32
 800a61c:	dc46      	bgt.n	800a6ac <UART_SetConfig+0x644>
 800a61e:	2b02      	cmp	r3, #2
 800a620:	f2c0 8081 	blt.w	800a726 <UART_SetConfig+0x6be>
 800a624:	3b02      	subs	r3, #2
 800a626:	2b1e      	cmp	r3, #30
 800a628:	d87d      	bhi.n	800a726 <UART_SetConfig+0x6be>
 800a62a:	a201      	add	r2, pc, #4	; (adr r2, 800a630 <UART_SetConfig+0x5c8>)
 800a62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a630:	0800a6b3 	.word	0x0800a6b3
 800a634:	0800a727 	.word	0x0800a727
 800a638:	0800a6bb 	.word	0x0800a6bb
 800a63c:	0800a727 	.word	0x0800a727
 800a640:	0800a727 	.word	0x0800a727
 800a644:	0800a727 	.word	0x0800a727
 800a648:	0800a6cb 	.word	0x0800a6cb
 800a64c:	0800a727 	.word	0x0800a727
 800a650:	0800a727 	.word	0x0800a727
 800a654:	0800a727 	.word	0x0800a727
 800a658:	0800a727 	.word	0x0800a727
 800a65c:	0800a727 	.word	0x0800a727
 800a660:	0800a727 	.word	0x0800a727
 800a664:	0800a727 	.word	0x0800a727
 800a668:	0800a6db 	.word	0x0800a6db
 800a66c:	0800a727 	.word	0x0800a727
 800a670:	0800a727 	.word	0x0800a727
 800a674:	0800a727 	.word	0x0800a727
 800a678:	0800a727 	.word	0x0800a727
 800a67c:	0800a727 	.word	0x0800a727
 800a680:	0800a727 	.word	0x0800a727
 800a684:	0800a727 	.word	0x0800a727
 800a688:	0800a727 	.word	0x0800a727
 800a68c:	0800a727 	.word	0x0800a727
 800a690:	0800a727 	.word	0x0800a727
 800a694:	0800a727 	.word	0x0800a727
 800a698:	0800a727 	.word	0x0800a727
 800a69c:	0800a727 	.word	0x0800a727
 800a6a0:	0800a727 	.word	0x0800a727
 800a6a4:	0800a727 	.word	0x0800a727
 800a6a8:	0800a719 	.word	0x0800a719
 800a6ac:	2b40      	cmp	r3, #64	; 0x40
 800a6ae:	d036      	beq.n	800a71e <UART_SetConfig+0x6b6>
 800a6b0:	e039      	b.n	800a726 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a6b2:	f7fe f967 	bl	8008984 <HAL_RCCEx_GetD3PCLK1Freq>
 800a6b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a6b8:	e03b      	b.n	800a732 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6ba:	f107 0314 	add.w	r3, r7, #20
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7fe f976 	bl	80089b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6c4:	69bb      	ldr	r3, [r7, #24]
 800a6c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6c8:	e033      	b.n	800a732 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6ca:	f107 0308 	add.w	r3, r7, #8
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fe fac2 	bl	8008c58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6d8:	e02b      	b.n	800a732 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6da:	4b0a      	ldr	r3, [pc, #40]	; (800a704 <UART_SetConfig+0x69c>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f003 0320 	and.w	r3, r3, #32
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d009      	beq.n	800a6fa <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a6e6:	4b07      	ldr	r3, [pc, #28]	; (800a704 <UART_SetConfig+0x69c>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	08db      	lsrs	r3, r3, #3
 800a6ec:	f003 0303 	and.w	r3, r3, #3
 800a6f0:	4a08      	ldr	r2, [pc, #32]	; (800a714 <UART_SetConfig+0x6ac>)
 800a6f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a6f8:	e01b      	b.n	800a732 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800a6fa:	4b06      	ldr	r3, [pc, #24]	; (800a714 <UART_SetConfig+0x6ac>)
 800a6fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6fe:	e018      	b.n	800a732 <UART_SetConfig+0x6ca>
 800a700:	40011400 	.word	0x40011400
 800a704:	58024400 	.word	0x58024400
 800a708:	40007800 	.word	0x40007800
 800a70c:	40007c00 	.word	0x40007c00
 800a710:	58000c00 	.word	0x58000c00
 800a714:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a718:	4bc4      	ldr	r3, [pc, #784]	; (800aa2c <UART_SetConfig+0x9c4>)
 800a71a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a71c:	e009      	b.n	800a732 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a71e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a722:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a724:	e005      	b.n	800a732 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800a726:	2300      	movs	r3, #0
 800a728:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a730:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a734:	2b00      	cmp	r3, #0
 800a736:	f000 81da 	beq.w	800aaee <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73e:	4abc      	ldr	r2, [pc, #752]	; (800aa30 <UART_SetConfig+0x9c8>)
 800a740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a744:	461a      	mov	r2, r3
 800a746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a748:	fbb3 f3f2 	udiv	r3, r3, r2
 800a74c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	685a      	ldr	r2, [r3, #4]
 800a752:	4613      	mov	r3, r2
 800a754:	005b      	lsls	r3, r3, #1
 800a756:	4413      	add	r3, r2
 800a758:	6a3a      	ldr	r2, [r7, #32]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d305      	bcc.n	800a76a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a764:	6a3a      	ldr	r2, [r7, #32]
 800a766:	429a      	cmp	r2, r3
 800a768:	d903      	bls.n	800a772 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800a76a:	2301      	movs	r3, #1
 800a76c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a770:	e1bd      	b.n	800aaee <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a774:	4618      	mov	r0, r3
 800a776:	f04f 0100 	mov.w	r1, #0
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77e:	4aac      	ldr	r2, [pc, #688]	; (800aa30 <UART_SetConfig+0x9c8>)
 800a780:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a784:	b29a      	uxth	r2, r3
 800a786:	f04f 0300 	mov.w	r3, #0
 800a78a:	f7f5 fda9 	bl	80002e0 <__aeabi_uldivmod>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	4610      	mov	r0, r2
 800a794:	4619      	mov	r1, r3
 800a796:	f04f 0200 	mov.w	r2, #0
 800a79a:	f04f 0300 	mov.w	r3, #0
 800a79e:	020b      	lsls	r3, r1, #8
 800a7a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a7a4:	0202      	lsls	r2, r0, #8
 800a7a6:	6879      	ldr	r1, [r7, #4]
 800a7a8:	6849      	ldr	r1, [r1, #4]
 800a7aa:	0849      	lsrs	r1, r1, #1
 800a7ac:	4608      	mov	r0, r1
 800a7ae:	f04f 0100 	mov.w	r1, #0
 800a7b2:	1814      	adds	r4, r2, r0
 800a7b4:	eb43 0501 	adc.w	r5, r3, r1
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	461a      	mov	r2, r3
 800a7be:	f04f 0300 	mov.w	r3, #0
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	4629      	mov	r1, r5
 800a7c6:	f7f5 fd8b 	bl	80002e0 <__aeabi_uldivmod>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7d8:	d308      	bcc.n	800a7ec <UART_SetConfig+0x784>
 800a7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7e0:	d204      	bcs.n	800a7ec <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7e8:	60da      	str	r2, [r3, #12]
 800a7ea:	e180      	b.n	800aaee <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a7f2:	e17c      	b.n	800aaee <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	69db      	ldr	r3, [r3, #28]
 800a7f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7fc:	f040 80bf 	bne.w	800a97e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800a800:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a804:	2b20      	cmp	r3, #32
 800a806:	dc49      	bgt.n	800a89c <UART_SetConfig+0x834>
 800a808:	2b00      	cmp	r3, #0
 800a80a:	db7c      	blt.n	800a906 <UART_SetConfig+0x89e>
 800a80c:	2b20      	cmp	r3, #32
 800a80e:	d87a      	bhi.n	800a906 <UART_SetConfig+0x89e>
 800a810:	a201      	add	r2, pc, #4	; (adr r2, 800a818 <UART_SetConfig+0x7b0>)
 800a812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a816:	bf00      	nop
 800a818:	0800a8a3 	.word	0x0800a8a3
 800a81c:	0800a8ab 	.word	0x0800a8ab
 800a820:	0800a907 	.word	0x0800a907
 800a824:	0800a907 	.word	0x0800a907
 800a828:	0800a8b3 	.word	0x0800a8b3
 800a82c:	0800a907 	.word	0x0800a907
 800a830:	0800a907 	.word	0x0800a907
 800a834:	0800a907 	.word	0x0800a907
 800a838:	0800a8c3 	.word	0x0800a8c3
 800a83c:	0800a907 	.word	0x0800a907
 800a840:	0800a907 	.word	0x0800a907
 800a844:	0800a907 	.word	0x0800a907
 800a848:	0800a907 	.word	0x0800a907
 800a84c:	0800a907 	.word	0x0800a907
 800a850:	0800a907 	.word	0x0800a907
 800a854:	0800a907 	.word	0x0800a907
 800a858:	0800a8d3 	.word	0x0800a8d3
 800a85c:	0800a907 	.word	0x0800a907
 800a860:	0800a907 	.word	0x0800a907
 800a864:	0800a907 	.word	0x0800a907
 800a868:	0800a907 	.word	0x0800a907
 800a86c:	0800a907 	.word	0x0800a907
 800a870:	0800a907 	.word	0x0800a907
 800a874:	0800a907 	.word	0x0800a907
 800a878:	0800a907 	.word	0x0800a907
 800a87c:	0800a907 	.word	0x0800a907
 800a880:	0800a907 	.word	0x0800a907
 800a884:	0800a907 	.word	0x0800a907
 800a888:	0800a907 	.word	0x0800a907
 800a88c:	0800a907 	.word	0x0800a907
 800a890:	0800a907 	.word	0x0800a907
 800a894:	0800a907 	.word	0x0800a907
 800a898:	0800a8f9 	.word	0x0800a8f9
 800a89c:	2b40      	cmp	r3, #64	; 0x40
 800a89e:	d02e      	beq.n	800a8fe <UART_SetConfig+0x896>
 800a8a0:	e031      	b.n	800a906 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8a2:	f7fd f8c1 	bl	8007a28 <HAL_RCC_GetPCLK1Freq>
 800a8a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a8a8:	e033      	b.n	800a912 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8aa:	f7fd f8d3 	bl	8007a54 <HAL_RCC_GetPCLK2Freq>
 800a8ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a8b0:	e02f      	b.n	800a912 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8b2:	f107 0314 	add.w	r3, r7, #20
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7fe f87a 	bl	80089b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8bc:	69bb      	ldr	r3, [r7, #24]
 800a8be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8c0:	e027      	b.n	800a912 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8c2:	f107 0308 	add.w	r3, r7, #8
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7fe f9c6 	bl	8008c58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8d0:	e01f      	b.n	800a912 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8d2:	4b58      	ldr	r3, [pc, #352]	; (800aa34 <UART_SetConfig+0x9cc>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f003 0320 	and.w	r3, r3, #32
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d009      	beq.n	800a8f2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8de:	4b55      	ldr	r3, [pc, #340]	; (800aa34 <UART_SetConfig+0x9cc>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	08db      	lsrs	r3, r3, #3
 800a8e4:	f003 0303 	and.w	r3, r3, #3
 800a8e8:	4a53      	ldr	r2, [pc, #332]	; (800aa38 <UART_SetConfig+0x9d0>)
 800a8ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8f0:	e00f      	b.n	800a912 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a8f2:	4b51      	ldr	r3, [pc, #324]	; (800aa38 <UART_SetConfig+0x9d0>)
 800a8f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8f6:	e00c      	b.n	800a912 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8f8:	4b4c      	ldr	r3, [pc, #304]	; (800aa2c <UART_SetConfig+0x9c4>)
 800a8fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8fc:	e009      	b.n	800a912 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a902:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a904:	e005      	b.n	800a912 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a906:	2300      	movs	r3, #0
 800a908:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a90a:	2301      	movs	r3, #1
 800a90c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a910:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a914:	2b00      	cmp	r3, #0
 800a916:	f000 80ea 	beq.w	800aaee <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91e:	4a44      	ldr	r2, [pc, #272]	; (800aa30 <UART_SetConfig+0x9c8>)
 800a920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a924:	461a      	mov	r2, r3
 800a926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a928:	fbb3 f3f2 	udiv	r3, r3, r2
 800a92c:	005a      	lsls	r2, r3, #1
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	085b      	lsrs	r3, r3, #1
 800a934:	441a      	add	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a93e:	b29b      	uxth	r3, r3
 800a940:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a944:	2b0f      	cmp	r3, #15
 800a946:	d916      	bls.n	800a976 <UART_SetConfig+0x90e>
 800a948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a94e:	d212      	bcs.n	800a976 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a952:	b29b      	uxth	r3, r3
 800a954:	f023 030f 	bic.w	r3, r3, #15
 800a958:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95c:	085b      	lsrs	r3, r3, #1
 800a95e:	b29b      	uxth	r3, r3
 800a960:	f003 0307 	and.w	r3, r3, #7
 800a964:	b29a      	uxth	r2, r3
 800a966:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a968:	4313      	orrs	r3, r2
 800a96a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a972:	60da      	str	r2, [r3, #12]
 800a974:	e0bb      	b.n	800aaee <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a97c:	e0b7      	b.n	800aaee <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a97e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a982:	2b20      	cmp	r3, #32
 800a984:	dc4a      	bgt.n	800aa1c <UART_SetConfig+0x9b4>
 800a986:	2b00      	cmp	r3, #0
 800a988:	f2c0 8086 	blt.w	800aa98 <UART_SetConfig+0xa30>
 800a98c:	2b20      	cmp	r3, #32
 800a98e:	f200 8083 	bhi.w	800aa98 <UART_SetConfig+0xa30>
 800a992:	a201      	add	r2, pc, #4	; (adr r2, 800a998 <UART_SetConfig+0x930>)
 800a994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a998:	0800aa23 	.word	0x0800aa23
 800a99c:	0800aa3d 	.word	0x0800aa3d
 800a9a0:	0800aa99 	.word	0x0800aa99
 800a9a4:	0800aa99 	.word	0x0800aa99
 800a9a8:	0800aa45 	.word	0x0800aa45
 800a9ac:	0800aa99 	.word	0x0800aa99
 800a9b0:	0800aa99 	.word	0x0800aa99
 800a9b4:	0800aa99 	.word	0x0800aa99
 800a9b8:	0800aa55 	.word	0x0800aa55
 800a9bc:	0800aa99 	.word	0x0800aa99
 800a9c0:	0800aa99 	.word	0x0800aa99
 800a9c4:	0800aa99 	.word	0x0800aa99
 800a9c8:	0800aa99 	.word	0x0800aa99
 800a9cc:	0800aa99 	.word	0x0800aa99
 800a9d0:	0800aa99 	.word	0x0800aa99
 800a9d4:	0800aa99 	.word	0x0800aa99
 800a9d8:	0800aa65 	.word	0x0800aa65
 800a9dc:	0800aa99 	.word	0x0800aa99
 800a9e0:	0800aa99 	.word	0x0800aa99
 800a9e4:	0800aa99 	.word	0x0800aa99
 800a9e8:	0800aa99 	.word	0x0800aa99
 800a9ec:	0800aa99 	.word	0x0800aa99
 800a9f0:	0800aa99 	.word	0x0800aa99
 800a9f4:	0800aa99 	.word	0x0800aa99
 800a9f8:	0800aa99 	.word	0x0800aa99
 800a9fc:	0800aa99 	.word	0x0800aa99
 800aa00:	0800aa99 	.word	0x0800aa99
 800aa04:	0800aa99 	.word	0x0800aa99
 800aa08:	0800aa99 	.word	0x0800aa99
 800aa0c:	0800aa99 	.word	0x0800aa99
 800aa10:	0800aa99 	.word	0x0800aa99
 800aa14:	0800aa99 	.word	0x0800aa99
 800aa18:	0800aa8b 	.word	0x0800aa8b
 800aa1c:	2b40      	cmp	r3, #64	; 0x40
 800aa1e:	d037      	beq.n	800aa90 <UART_SetConfig+0xa28>
 800aa20:	e03a      	b.n	800aa98 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa22:	f7fd f801 	bl	8007a28 <HAL_RCC_GetPCLK1Freq>
 800aa26:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aa28:	e03c      	b.n	800aaa4 <UART_SetConfig+0xa3c>
 800aa2a:	bf00      	nop
 800aa2c:	003d0900 	.word	0x003d0900
 800aa30:	0800dab0 	.word	0x0800dab0
 800aa34:	58024400 	.word	0x58024400
 800aa38:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa3c:	f7fd f80a 	bl	8007a54 <HAL_RCC_GetPCLK2Freq>
 800aa40:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aa42:	e02f      	b.n	800aaa4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa44:	f107 0314 	add.w	r3, r7, #20
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7fd ffb1 	bl	80089b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa52:	e027      	b.n	800aaa4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa54:	f107 0308 	add.w	r3, r7, #8
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7fe f8fd 	bl	8008c58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa62:	e01f      	b.n	800aaa4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa64:	4b2c      	ldr	r3, [pc, #176]	; (800ab18 <UART_SetConfig+0xab0>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f003 0320 	and.w	r3, r3, #32
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d009      	beq.n	800aa84 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa70:	4b29      	ldr	r3, [pc, #164]	; (800ab18 <UART_SetConfig+0xab0>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	08db      	lsrs	r3, r3, #3
 800aa76:	f003 0303 	and.w	r3, r3, #3
 800aa7a:	4a28      	ldr	r2, [pc, #160]	; (800ab1c <UART_SetConfig+0xab4>)
 800aa7c:	fa22 f303 	lsr.w	r3, r2, r3
 800aa80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa82:	e00f      	b.n	800aaa4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800aa84:	4b25      	ldr	r3, [pc, #148]	; (800ab1c <UART_SetConfig+0xab4>)
 800aa86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa88:	e00c      	b.n	800aaa4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa8a:	4b25      	ldr	r3, [pc, #148]	; (800ab20 <UART_SetConfig+0xab8>)
 800aa8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa8e:	e009      	b.n	800aaa4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa96:	e005      	b.n	800aaa4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800aaa2:	bf00      	nop
    }

    if (pclk != 0U)
 800aaa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d021      	beq.n	800aaee <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaae:	4a1d      	ldr	r2, [pc, #116]	; (800ab24 <UART_SetConfig+0xabc>)
 800aab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aab4:	461a      	mov	r2, r3
 800aab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab8:	fbb3 f2f2 	udiv	r2, r3, r2
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	085b      	lsrs	r3, r3, #1
 800aac2:	441a      	add	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aacc:	b29b      	uxth	r3, r3
 800aace:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad2:	2b0f      	cmp	r3, #15
 800aad4:	d908      	bls.n	800aae8 <UART_SetConfig+0xa80>
 800aad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aadc:	d204      	bcs.n	800aae8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aae4:	60da      	str	r2, [r3, #12]
 800aae6:	e002      	b.n	800aaee <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800aae8:	2301      	movs	r3, #1
 800aaea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ab0a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3738      	adds	r7, #56	; 0x38
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bdb0      	pop	{r4, r5, r7, pc}
 800ab16:	bf00      	nop
 800ab18:	58024400 	.word	0x58024400
 800ab1c:	03d09000 	.word	0x03d09000
 800ab20:	003d0900 	.word	0x003d0900
 800ab24:	0800dab0 	.word	0x0800dab0

0800ab28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab34:	f003 0301 	and.w	r3, r3, #1
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00a      	beq.n	800ab52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	430a      	orrs	r2, r1
 800ab50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab56:	f003 0302 	and.w	r3, r3, #2
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00a      	beq.n	800ab74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	430a      	orrs	r2, r1
 800ab72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab78:	f003 0304 	and.w	r3, r3, #4
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d00a      	beq.n	800ab96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	430a      	orrs	r2, r1
 800ab94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab9a:	f003 0308 	and.w	r3, r3, #8
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d00a      	beq.n	800abb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	430a      	orrs	r2, r1
 800abb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abbc:	f003 0310 	and.w	r3, r3, #16
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d00a      	beq.n	800abda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	430a      	orrs	r2, r1
 800abd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abde:	f003 0320 	and.w	r3, r3, #32
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d00a      	beq.n	800abfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	430a      	orrs	r2, r1
 800abfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d01a      	beq.n	800ac3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	430a      	orrs	r2, r1
 800ac1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac26:	d10a      	bne.n	800ac3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	430a      	orrs	r2, r1
 800ac3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00a      	beq.n	800ac60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	430a      	orrs	r2, r1
 800ac5e:	605a      	str	r2, [r3, #4]
  }
}
 800ac60:	bf00      	nop
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b086      	sub	sp, #24
 800ac70:	af02      	add	r7, sp, #8
 800ac72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac7c:	f7f8 fdac 	bl	80037d8 <HAL_GetTick>
 800ac80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f003 0308 	and.w	r3, r3, #8
 800ac8c:	2b08      	cmp	r3, #8
 800ac8e:	d10e      	bne.n	800acae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ac94:	9300      	str	r3, [sp, #0]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f82f 	bl	800ad02 <UART_WaitOnFlagUntilTimeout>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d001      	beq.n	800acae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acaa:	2303      	movs	r3, #3
 800acac:	e025      	b.n	800acfa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f003 0304 	and.w	r3, r3, #4
 800acb8:	2b04      	cmp	r3, #4
 800acba:	d10e      	bne.n	800acda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 f819 	bl	800ad02 <UART_WaitOnFlagUntilTimeout>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d001      	beq.n	800acda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acd6:	2303      	movs	r3, #3
 800acd8:	e00f      	b.n	800acfa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2220      	movs	r2, #32
 800acde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2220      	movs	r2, #32
 800ace6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3710      	adds	r7, #16
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b084      	sub	sp, #16
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	60f8      	str	r0, [r7, #12]
 800ad0a:	60b9      	str	r1, [r7, #8]
 800ad0c:	603b      	str	r3, [r7, #0]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad12:	e062      	b.n	800adda <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad1a:	d05e      	beq.n	800adda <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad1c:	f7f8 fd5c 	bl	80037d8 <HAL_GetTick>
 800ad20:	4602      	mov	r2, r0
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	1ad3      	subs	r3, r2, r3
 800ad26:	69ba      	ldr	r2, [r7, #24]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d302      	bcc.n	800ad32 <UART_WaitOnFlagUntilTimeout+0x30>
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d11d      	bne.n	800ad6e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ad40:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	689a      	ldr	r2, [r3, #8]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f022 0201 	bic.w	r2, r2, #1
 800ad50:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2220      	movs	r2, #32
 800ad56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2220      	movs	r2, #32
 800ad5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2200      	movs	r2, #0
 800ad66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ad6a:	2303      	movs	r3, #3
 800ad6c:	e045      	b.n	800adfa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f003 0304 	and.w	r3, r3, #4
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d02e      	beq.n	800adda <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	69db      	ldr	r3, [r3, #28]
 800ad82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad8a:	d126      	bne.n	800adda <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ada4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	689a      	ldr	r2, [r3, #8]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f022 0201 	bic.w	r2, r2, #1
 800adb4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2220      	movs	r2, #32
 800adba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2220      	movs	r2, #32
 800adc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2220      	movs	r2, #32
 800adca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800add6:	2303      	movs	r3, #3
 800add8:	e00f      	b.n	800adfa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	69da      	ldr	r2, [r3, #28]
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	4013      	ands	r3, r2
 800ade4:	68ba      	ldr	r2, [r7, #8]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	bf0c      	ite	eq
 800adea:	2301      	moveq	r3, #1
 800adec:	2300      	movne	r3, #0
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	461a      	mov	r2, r3
 800adf2:	79fb      	ldrb	r3, [r7, #7]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d08d      	beq.n	800ad14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
	...

0800ae04 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	4613      	mov	r3, r2
 800ae10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	68ba      	ldr	r2, [r7, #8]
 800ae16:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	88fa      	ldrh	r2, [r7, #6]
 800ae1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2200      	movs	r2, #0
 800ae24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2222      	movs	r2, #34	; 0x22
 800ae2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d02c      	beq.n	800ae92 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae3c:	4a25      	ldr	r2, [pc, #148]	; (800aed4 <UART_Start_Receive_DMA+0xd0>)
 800ae3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae44:	4a24      	ldr	r2, [pc, #144]	; (800aed8 <UART_Start_Receive_DMA+0xd4>)
 800ae46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae4c:	4a23      	ldr	r2, [pc, #140]	; (800aedc <UART_Start_Receive_DMA+0xd8>)
 800ae4e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae54:	2200      	movs	r2, #0
 800ae56:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	3324      	adds	r3, #36	; 0x24
 800ae62:	4619      	mov	r1, r3
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae68:	461a      	mov	r2, r3
 800ae6a:	88fb      	ldrh	r3, [r7, #6]
 800ae6c:	f7f9 f908 	bl	8004080 <HAL_DMA_Start_IT>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d00d      	beq.n	800ae92 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2210      	movs	r2, #16
 800ae7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2220      	movs	r2, #32
 800ae8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e01c      	b.n	800aecc <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aea8:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	689a      	ldr	r2, [r3, #8]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f042 0201 	orr.w	r2, r2, #1
 800aeb8:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	689a      	ldr	r2, [r3, #8]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aec8:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	0800afed 	.word	0x0800afed
 800aed8:	0800b083 	.word	0x0800b083
 800aedc:	0800b0bb 	.word	0x0800b0bb

0800aee0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800aef6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	689a      	ldr	r2, [r3, #8]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800af06:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2220      	movs	r2, #32
 800af0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800af10:	bf00      	nop
 800af12:	370c      	adds	r7, #12
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr

0800af1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800af32:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	6899      	ldr	r1, [r3, #8]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	4b0f      	ldr	r3, [pc, #60]	; (800af7c <UART_EndRxTransfer+0x60>)
 800af40:	400b      	ands	r3, r1
 800af42:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d107      	bne.n	800af5c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f022 0210 	bic.w	r2, r2, #16
 800af5a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2220      	movs	r2, #32
 800af60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800af70:	bf00      	nop
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr
 800af7c:	effffffe 	.word	0xeffffffe

0800af80 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af8c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	69db      	ldr	r3, [r3, #28]
 800af92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af96:	d014      	beq.n	800afc2 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	689a      	ldr	r2, [r3, #8]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800afae:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afbe:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800afc0:	e002      	b.n	800afc8 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f7ff f812 	bl	8009fec <HAL_UART_TxCpltCallback>
}
 800afc8:	bf00      	nop
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afdc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800afde:	68f8      	ldr	r0, [r7, #12]
 800afe0:	f7ff f80e 	bl	800a000 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afe4:	bf00      	nop
 800afe6:	3710      	adds	r7, #16
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	69db      	ldr	r3, [r3, #28]
 800affe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b002:	d02b      	beq.n	800b05c <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2200      	movs	r2, #0
 800b008:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b01a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	689a      	ldr	r2, [r3, #8]
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f022 0201 	bic.w	r2, r2, #1
 800b02a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	689a      	ldr	r2, [r3, #8]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b03a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2220      	movs	r2, #32
 800b040:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d107      	bne.n	800b05c <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f022 0210 	bic.w	r2, r2, #16
 800b05a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b060:	2b01      	cmp	r3, #1
 800b062:	d107      	bne.n	800b074 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b06a:	4619      	mov	r1, r3
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	f7fe ffef 	bl	800a050 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b072:	e002      	b.n	800b07a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800b074:	68f8      	ldr	r0, [r7, #12]
 800b076:	f7fe ffcd 	bl	800a014 <HAL_UART_RxCpltCallback>
}
 800b07a:	bf00      	nop
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b084      	sub	sp, #16
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b08e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b094:	2b01      	cmp	r3, #1
 800b096:	d109      	bne.n	800b0ac <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b09e:	085b      	lsrs	r3, r3, #1
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	68f8      	ldr	r0, [r7, #12]
 800b0a6:	f7fe ffd3 	bl	800a050 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0aa:	e002      	b.n	800b0b2 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	f7fe ffbb 	bl	800a028 <HAL_UART_RxHalfCpltCallback>
}
 800b0b2:	bf00      	nop
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b086      	sub	sp, #24
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0ce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0d6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0e2:	2b80      	cmp	r3, #128	; 0x80
 800b0e4:	d109      	bne.n	800b0fa <UART_DMAError+0x40>
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	2b21      	cmp	r3, #33	; 0x21
 800b0ea:	d106      	bne.n	800b0fa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b0f4:	6978      	ldr	r0, [r7, #20]
 800b0f6:	f7ff fef3 	bl	800aee0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b104:	2b40      	cmp	r3, #64	; 0x40
 800b106:	d109      	bne.n	800b11c <UART_DMAError+0x62>
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2b22      	cmp	r3, #34	; 0x22
 800b10c:	d106      	bne.n	800b11c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	2200      	movs	r2, #0
 800b112:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b116:	6978      	ldr	r0, [r7, #20]
 800b118:	f7ff ff00 	bl	800af1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b122:	f043 0210 	orr.w	r2, r3, #16
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b12c:	6978      	ldr	r0, [r7, #20]
 800b12e:	f7fe ff85 	bl	800a03c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b132:	bf00      	nop
 800b134:	3718      	adds	r7, #24
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b084      	sub	sp, #16
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b146:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2200      	movs	r2, #0
 800b14c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2200      	movs	r2, #0
 800b154:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b158:	68f8      	ldr	r0, [r7, #12]
 800b15a:	f7fe ff6f 	bl	800a03c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b15e:	bf00      	nop
 800b160:	3710      	adds	r7, #16
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b082      	sub	sp, #8
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b17c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2220      	movs	r2, #32
 800b182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f7fe ff2d 	bl	8009fec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b192:	bf00      	nop
 800b194:	3708      	adds	r7, #8
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b19a:	b480      	push	{r7}
 800b19c:	b083      	sub	sp, #12
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b1a2:	bf00      	nop
 800b1a4:	370c      	adds	r7, #12
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr

0800b1ae <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b1ae:	b480      	push	{r7}
 800b1b0:	b083      	sub	sp, #12
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b1b6:	bf00      	nop
 800b1b8:	370c      	adds	r7, #12
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr

0800b1c2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b1c2:	b480      	push	{r7}
 800b1c4:	b083      	sub	sp, #12
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b1ca:	bf00      	nop
 800b1cc:	370c      	adds	r7, #12
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr

0800b1d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b1d6:	b480      	push	{r7}
 800b1d8:	b085      	sub	sp, #20
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d101      	bne.n	800b1ec <HAL_UARTEx_DisableFifoMode+0x16>
 800b1e8:	2302      	movs	r3, #2
 800b1ea:	e027      	b.n	800b23c <HAL_UARTEx_DisableFifoMode+0x66>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2224      	movs	r2, #36	; 0x24
 800b1f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f022 0201 	bic.w	r2, r2, #1
 800b212:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b21a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2220      	movs	r2, #32
 800b22e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b23a:	2300      	movs	r3, #0
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3714      	adds	r7, #20
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr

0800b248 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d101      	bne.n	800b260 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b25c:	2302      	movs	r3, #2
 800b25e:	e02d      	b.n	800b2bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2201      	movs	r2, #1
 800b264:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2224      	movs	r2, #36	; 0x24
 800b26c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f022 0201 	bic.w	r2, r2, #1
 800b286:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	683a      	ldr	r2, [r7, #0]
 800b298:	430a      	orrs	r2, r1
 800b29a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 f84f 	bl	800b340 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2220      	movs	r2, #32
 800b2ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b2ba:	2300      	movs	r3, #0
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3710      	adds	r7, #16
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d101      	bne.n	800b2dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b2d8:	2302      	movs	r3, #2
 800b2da:	e02d      	b.n	800b338 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2224      	movs	r2, #36	; 0x24
 800b2e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	681a      	ldr	r2, [r3, #0]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f022 0201 	bic.w	r2, r2, #1
 800b302:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	689b      	ldr	r3, [r3, #8]
 800b30a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	683a      	ldr	r2, [r7, #0]
 800b314:	430a      	orrs	r2, r1
 800b316:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 f811 	bl	800b340 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	68fa      	ldr	r2, [r7, #12]
 800b324:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2220      	movs	r2, #32
 800b32a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2200      	movs	r2, #0
 800b332:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b340:	b480      	push	{r7}
 800b342:	b085      	sub	sp, #20
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d108      	bne.n	800b362 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2201      	movs	r2, #1
 800b354:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b360:	e031      	b.n	800b3c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b362:	2310      	movs	r3, #16
 800b364:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b366:	2310      	movs	r3, #16
 800b368:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	689b      	ldr	r3, [r3, #8]
 800b370:	0e5b      	lsrs	r3, r3, #25
 800b372:	b2db      	uxtb	r3, r3
 800b374:	f003 0307 	and.w	r3, r3, #7
 800b378:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	0f5b      	lsrs	r3, r3, #29
 800b382:	b2db      	uxtb	r3, r3
 800b384:	f003 0307 	and.w	r3, r3, #7
 800b388:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b38a:	7bbb      	ldrb	r3, [r7, #14]
 800b38c:	7b3a      	ldrb	r2, [r7, #12]
 800b38e:	4911      	ldr	r1, [pc, #68]	; (800b3d4 <UARTEx_SetNbDataToProcess+0x94>)
 800b390:	5c8a      	ldrb	r2, [r1, r2]
 800b392:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b396:	7b3a      	ldrb	r2, [r7, #12]
 800b398:	490f      	ldr	r1, [pc, #60]	; (800b3d8 <UARTEx_SetNbDataToProcess+0x98>)
 800b39a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b39c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3a0:	b29a      	uxth	r2, r3
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3a8:	7bfb      	ldrb	r3, [r7, #15]
 800b3aa:	7b7a      	ldrb	r2, [r7, #13]
 800b3ac:	4909      	ldr	r1, [pc, #36]	; (800b3d4 <UARTEx_SetNbDataToProcess+0x94>)
 800b3ae:	5c8a      	ldrb	r2, [r1, r2]
 800b3b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b3b4:	7b7a      	ldrb	r2, [r7, #13]
 800b3b6:	4908      	ldr	r1, [pc, #32]	; (800b3d8 <UARTEx_SetNbDataToProcess+0x98>)
 800b3b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3be:	b29a      	uxth	r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b3c6:	bf00      	nop
 800b3c8:	3714      	adds	r7, #20
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	0800dac8 	.word	0x0800dac8
 800b3d8:	0800dad0 	.word	0x0800dad0

0800b3dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b085      	sub	sp, #20
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b3ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b3ee:	2b84      	cmp	r3, #132	; 0x84
 800b3f0:	d005      	beq.n	800b3fe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b3f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	3303      	adds	r3, #3
 800b3fc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
}
 800b400:	4618      	mov	r0, r3
 800b402:	3714      	adds	r7, #20
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b410:	f001 f84a 	bl	800c4a8 <vTaskStartScheduler>
  
  return osOK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	bd80      	pop	{r7, pc}

0800b41a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b41a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b41c:	b089      	sub	sp, #36	; 0x24
 800b41e:	af04      	add	r7, sp, #16
 800b420:	6078      	str	r0, [r7, #4]
 800b422:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	695b      	ldr	r3, [r3, #20]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d020      	beq.n	800b46e <osThreadCreate+0x54>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	699b      	ldr	r3, [r3, #24]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d01c      	beq.n	800b46e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	685c      	ldr	r4, [r3, #4]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681d      	ldr	r5, [r3, #0]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	691e      	ldr	r6, [r3, #16]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b446:	4618      	mov	r0, r3
 800b448:	f7ff ffc8 	bl	800b3dc <makeFreeRtosPriority>
 800b44c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	695b      	ldr	r3, [r3, #20]
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b456:	9202      	str	r2, [sp, #8]
 800b458:	9301      	str	r3, [sp, #4]
 800b45a:	9100      	str	r1, [sp, #0]
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	4632      	mov	r2, r6
 800b460:	4629      	mov	r1, r5
 800b462:	4620      	mov	r0, r4
 800b464:	f000 fe58 	bl	800c118 <xTaskCreateStatic>
 800b468:	4603      	mov	r3, r0
 800b46a:	60fb      	str	r3, [r7, #12]
 800b46c:	e01c      	b.n	800b4a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	685c      	ldr	r4, [r3, #4]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b47a:	b29e      	uxth	r6, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b482:	4618      	mov	r0, r3
 800b484:	f7ff ffaa 	bl	800b3dc <makeFreeRtosPriority>
 800b488:	4602      	mov	r2, r0
 800b48a:	f107 030c 	add.w	r3, r7, #12
 800b48e:	9301      	str	r3, [sp, #4]
 800b490:	9200      	str	r2, [sp, #0]
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	4632      	mov	r2, r6
 800b496:	4629      	mov	r1, r5
 800b498:	4620      	mov	r0, r4
 800b49a:	f000 fe9a 	bl	800c1d2 <xTaskCreate>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d001      	beq.n	800b4a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	e000      	b.n	800b4aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b4b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b084      	sub	sp, #16
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d001      	beq.n	800b4c8 <osDelay+0x16>
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	e000      	b.n	800b4ca <osDelay+0x18>
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f000 ffb8 	bl	800c440 <vTaskDelay>
  
  return osOK;
 800b4d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3710      	adds	r7, #16
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}

0800b4da <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b4da:	b580      	push	{r7, lr}
 800b4dc:	b082      	sub	sp, #8
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d007      	beq.n	800b4fa <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	2001      	movs	r0, #1
 800b4f2:	f000 fa5c 	bl	800b9ae <xQueueCreateMutexStatic>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	e003      	b.n	800b502 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b4fa:	2001      	movs	r0, #1
 800b4fc:	f000 fa3f 	bl	800b97e <xQueueCreateMutex>
 800b500:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b502:	4618      	mov	r0, r3
 800b504:	3708      	adds	r7, #8
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b086      	sub	sp, #24
 800b50e:	af02      	add	r7, sp, #8
 800b510:	6078      	str	r0, [r7, #4]
 800b512:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00f      	beq.n	800b53c <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d10a      	bne.n	800b538 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	2203      	movs	r2, #3
 800b528:	9200      	str	r2, [sp, #0]
 800b52a:	2200      	movs	r2, #0
 800b52c:	2100      	movs	r1, #0
 800b52e:	2001      	movs	r0, #1
 800b530:	f000 f93a 	bl	800b7a8 <xQueueGenericCreateStatic>
 800b534:	4603      	mov	r3, r0
 800b536:	e016      	b.n	800b566 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b538:	2300      	movs	r3, #0
 800b53a:	e014      	b.n	800b566 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d110      	bne.n	800b564 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b542:	2203      	movs	r2, #3
 800b544:	2100      	movs	r1, #0
 800b546:	2001      	movs	r0, #1
 800b548:	f000 f9a6 	bl	800b898 <xQueueGenericCreate>
 800b54c:	60f8      	str	r0, [r7, #12]
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d005      	beq.n	800b560 <osSemaphoreCreate+0x56>
 800b554:	2300      	movs	r3, #0
 800b556:	2200      	movs	r2, #0
 800b558:	2100      	movs	r1, #0
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f000 fa42 	bl	800b9e4 <xQueueGenericSend>
      return sema;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	e000      	b.n	800b566 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b564:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b566:	4618      	mov	r0, r3
 800b568:	3710      	adds	r7, #16
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}

0800b56e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b56e:	b480      	push	{r7}
 800b570:	b083      	sub	sp, #12
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f103 0208 	add.w	r2, r3, #8
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f04f 32ff 	mov.w	r2, #4294967295
 800b586:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f103 0208 	add.w	r2, r3, #8
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f103 0208 	add.w	r2, r3, #8
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b5a2:	bf00      	nop
 800b5a4:	370c      	adds	r7, #12
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr

0800b5ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b5ae:	b480      	push	{r7}
 800b5b0:	b083      	sub	sp, #12
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b5bc:	bf00      	nop
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b085      	sub	sp, #20
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	68fa      	ldr	r2, [r7, #12]
 800b5dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	689a      	ldr	r2, [r3, #8]
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	683a      	ldr	r2, [r7, #0]
 800b5ec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	683a      	ldr	r2, [r7, #0]
 800b5f2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	1c5a      	adds	r2, r3, #1
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	601a      	str	r2, [r3, #0]
}
 800b604:	bf00      	nop
 800b606:	3714      	adds	r7, #20
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b610:	b480      	push	{r7}
 800b612:	b085      	sub	sp, #20
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b626:	d103      	bne.n	800b630 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	691b      	ldr	r3, [r3, #16]
 800b62c:	60fb      	str	r3, [r7, #12]
 800b62e:	e00c      	b.n	800b64a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	3308      	adds	r3, #8
 800b634:	60fb      	str	r3, [r7, #12]
 800b636:	e002      	b.n	800b63e <vListInsert+0x2e>
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	60fb      	str	r3, [r7, #12]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	68ba      	ldr	r2, [r7, #8]
 800b646:	429a      	cmp	r2, r3
 800b648:	d2f6      	bcs.n	800b638 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	685a      	ldr	r2, [r3, #4]
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	683a      	ldr	r2, [r7, #0]
 800b658:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	68fa      	ldr	r2, [r7, #12]
 800b65e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	683a      	ldr	r2, [r7, #0]
 800b664:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	1c5a      	adds	r2, r3, #1
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	601a      	str	r2, [r3, #0]
}
 800b676:	bf00      	nop
 800b678:	3714      	adds	r7, #20
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr

0800b682 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b682:	b480      	push	{r7}
 800b684:	b085      	sub	sp, #20
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	691b      	ldr	r3, [r3, #16]
 800b68e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	6892      	ldr	r2, [r2, #8]
 800b698:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	6852      	ldr	r2, [r2, #4]
 800b6a2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	687a      	ldr	r2, [r7, #4]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d103      	bne.n	800b6b6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	689a      	ldr	r2, [r3, #8]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	1e5a      	subs	r2, r3, #1
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3714      	adds	r7, #20
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d4:	4770      	bx	lr
	...

0800b6d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d10a      	bne.n	800b702 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f0:	f383 8811 	msr	BASEPRI, r3
 800b6f4:	f3bf 8f6f 	isb	sy
 800b6f8:	f3bf 8f4f 	dsb	sy
 800b6fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b6fe:	bf00      	nop
 800b700:	e7fe      	b.n	800b700 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b702:	f001 fe1f 	bl	800d344 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b70e:	68f9      	ldr	r1, [r7, #12]
 800b710:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b712:	fb01 f303 	mul.w	r3, r1, r3
 800b716:	441a      	add	r2, r3
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2200      	movs	r2, #0
 800b720:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b732:	3b01      	subs	r3, #1
 800b734:	68f9      	ldr	r1, [r7, #12]
 800b736:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b738:	fb01 f303 	mul.w	r3, r1, r3
 800b73c:	441a      	add	r2, r3
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	22ff      	movs	r2, #255	; 0xff
 800b746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	22ff      	movs	r2, #255	; 0xff
 800b74e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d114      	bne.n	800b782 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	691b      	ldr	r3, [r3, #16]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d01a      	beq.n	800b796 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	3310      	adds	r3, #16
 800b764:	4618      	mov	r0, r3
 800b766:	f001 f8e1 	bl	800c92c <xTaskRemoveFromEventList>
 800b76a:	4603      	mov	r3, r0
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d012      	beq.n	800b796 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b770:	4b0c      	ldr	r3, [pc, #48]	; (800b7a4 <xQueueGenericReset+0xcc>)
 800b772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b776:	601a      	str	r2, [r3, #0]
 800b778:	f3bf 8f4f 	dsb	sy
 800b77c:	f3bf 8f6f 	isb	sy
 800b780:	e009      	b.n	800b796 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	3310      	adds	r3, #16
 800b786:	4618      	mov	r0, r3
 800b788:	f7ff fef1 	bl	800b56e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	3324      	adds	r3, #36	; 0x24
 800b790:	4618      	mov	r0, r3
 800b792:	f7ff feec 	bl	800b56e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b796:	f001 fe05 	bl	800d3a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b79a:	2301      	movs	r3, #1
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3710      	adds	r7, #16
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	e000ed04 	.word	0xe000ed04

0800b7a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b08e      	sub	sp, #56	; 0x38
 800b7ac:	af02      	add	r7, sp, #8
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	607a      	str	r2, [r7, #4]
 800b7b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d10a      	bne.n	800b7d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c0:	f383 8811 	msr	BASEPRI, r3
 800b7c4:	f3bf 8f6f 	isb	sy
 800b7c8:	f3bf 8f4f 	dsb	sy
 800b7cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b7ce:	bf00      	nop
 800b7d0:	e7fe      	b.n	800b7d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d10a      	bne.n	800b7ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7dc:	f383 8811 	msr	BASEPRI, r3
 800b7e0:	f3bf 8f6f 	isb	sy
 800b7e4:	f3bf 8f4f 	dsb	sy
 800b7e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b7ea:	bf00      	nop
 800b7ec:	e7fe      	b.n	800b7ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d002      	beq.n	800b7fa <xQueueGenericCreateStatic+0x52>
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d001      	beq.n	800b7fe <xQueueGenericCreateStatic+0x56>
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	e000      	b.n	800b800 <xQueueGenericCreateStatic+0x58>
 800b7fe:	2300      	movs	r3, #0
 800b800:	2b00      	cmp	r3, #0
 800b802:	d10a      	bne.n	800b81a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b808:	f383 8811 	msr	BASEPRI, r3
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	f3bf 8f4f 	dsb	sy
 800b814:	623b      	str	r3, [r7, #32]
}
 800b816:	bf00      	nop
 800b818:	e7fe      	b.n	800b818 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d102      	bne.n	800b826 <xQueueGenericCreateStatic+0x7e>
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d101      	bne.n	800b82a <xQueueGenericCreateStatic+0x82>
 800b826:	2301      	movs	r3, #1
 800b828:	e000      	b.n	800b82c <xQueueGenericCreateStatic+0x84>
 800b82a:	2300      	movs	r3, #0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d10a      	bne.n	800b846 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b834:	f383 8811 	msr	BASEPRI, r3
 800b838:	f3bf 8f6f 	isb	sy
 800b83c:	f3bf 8f4f 	dsb	sy
 800b840:	61fb      	str	r3, [r7, #28]
}
 800b842:	bf00      	nop
 800b844:	e7fe      	b.n	800b844 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b846:	2348      	movs	r3, #72	; 0x48
 800b848:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	2b48      	cmp	r3, #72	; 0x48
 800b84e:	d00a      	beq.n	800b866 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b854:	f383 8811 	msr	BASEPRI, r3
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	61bb      	str	r3, [r7, #24]
}
 800b862:	bf00      	nop
 800b864:	e7fe      	b.n	800b864 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b866:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d00d      	beq.n	800b88e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b874:	2201      	movs	r2, #1
 800b876:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b87a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b880:	9300      	str	r3, [sp, #0]
 800b882:	4613      	mov	r3, r2
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	68b9      	ldr	r1, [r7, #8]
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f000 f83f 	bl	800b90c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b890:	4618      	mov	r0, r3
 800b892:	3730      	adds	r7, #48	; 0x30
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b08a      	sub	sp, #40	; 0x28
 800b89c:	af02      	add	r7, sp, #8
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10a      	bne.n	800b8c2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b0:	f383 8811 	msr	BASEPRI, r3
 800b8b4:	f3bf 8f6f 	isb	sy
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	613b      	str	r3, [r7, #16]
}
 800b8be:	bf00      	nop
 800b8c0:	e7fe      	b.n	800b8c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	68ba      	ldr	r2, [r7, #8]
 800b8c6:	fb02 f303 	mul.w	r3, r2, r3
 800b8ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	3348      	adds	r3, #72	; 0x48
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f001 fe59 	bl	800d588 <pvPortMalloc>
 800b8d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d011      	beq.n	800b902 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	3348      	adds	r3, #72	; 0x48
 800b8e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b8f0:	79fa      	ldrb	r2, [r7, #7]
 800b8f2:	69bb      	ldr	r3, [r7, #24]
 800b8f4:	9300      	str	r3, [sp, #0]
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	697a      	ldr	r2, [r7, #20]
 800b8fa:	68b9      	ldr	r1, [r7, #8]
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f000 f805 	bl	800b90c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b902:	69bb      	ldr	r3, [r7, #24]
	}
 800b904:	4618      	mov	r0, r3
 800b906:	3720      	adds	r7, #32
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	607a      	str	r2, [r7, #4]
 800b918:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d103      	bne.n	800b928 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	69ba      	ldr	r2, [r7, #24]
 800b924:	601a      	str	r2, [r3, #0]
 800b926:	e002      	b.n	800b92e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b92e:	69bb      	ldr	r3, [r7, #24]
 800b930:	68fa      	ldr	r2, [r7, #12]
 800b932:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b934:	69bb      	ldr	r3, [r7, #24]
 800b936:	68ba      	ldr	r2, [r7, #8]
 800b938:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b93a:	2101      	movs	r1, #1
 800b93c:	69b8      	ldr	r0, [r7, #24]
 800b93e:	f7ff fecb 	bl	800b6d8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b942:	bf00      	nop
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b082      	sub	sp, #8
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d00e      	beq.n	800b976 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b96a:	2300      	movs	r3, #0
 800b96c:	2200      	movs	r2, #0
 800b96e:	2100      	movs	r1, #0
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 f837 	bl	800b9e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b976:	bf00      	nop
 800b978:	3708      	adds	r7, #8
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b97e:	b580      	push	{r7, lr}
 800b980:	b086      	sub	sp, #24
 800b982:	af00      	add	r7, sp, #0
 800b984:	4603      	mov	r3, r0
 800b986:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b988:	2301      	movs	r3, #1
 800b98a:	617b      	str	r3, [r7, #20]
 800b98c:	2300      	movs	r3, #0
 800b98e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b990:	79fb      	ldrb	r3, [r7, #7]
 800b992:	461a      	mov	r2, r3
 800b994:	6939      	ldr	r1, [r7, #16]
 800b996:	6978      	ldr	r0, [r7, #20]
 800b998:	f7ff ff7e 	bl	800b898 <xQueueGenericCreate>
 800b99c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	f7ff ffd3 	bl	800b94a <prvInitialiseMutex>

		return xNewQueue;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
	}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3718      	adds	r7, #24
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b088      	sub	sp, #32
 800b9b2:	af02      	add	r7, sp, #8
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	6039      	str	r1, [r7, #0]
 800b9b8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	617b      	str	r3, [r7, #20]
 800b9be:	2300      	movs	r3, #0
 800b9c0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b9c2:	79fb      	ldrb	r3, [r7, #7]
 800b9c4:	9300      	str	r3, [sp, #0]
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	6939      	ldr	r1, [r7, #16]
 800b9cc:	6978      	ldr	r0, [r7, #20]
 800b9ce:	f7ff feeb 	bl	800b7a8 <xQueueGenericCreateStatic>
 800b9d2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f7ff ffb8 	bl	800b94a <prvInitialiseMutex>

		return xNewQueue;
 800b9da:	68fb      	ldr	r3, [r7, #12]
	}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3718      	adds	r7, #24
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b08e      	sub	sp, #56	; 0x38
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
 800b9f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d10a      	bne.n	800ba16 <xQueueGenericSend+0x32>
	__asm volatile
 800ba00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ba12:	bf00      	nop
 800ba14:	e7fe      	b.n	800ba14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d103      	bne.n	800ba24 <xQueueGenericSend+0x40>
 800ba1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d101      	bne.n	800ba28 <xQueueGenericSend+0x44>
 800ba24:	2301      	movs	r3, #1
 800ba26:	e000      	b.n	800ba2a <xQueueGenericSend+0x46>
 800ba28:	2300      	movs	r3, #0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10a      	bne.n	800ba44 <xQueueGenericSend+0x60>
	__asm volatile
 800ba2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba32:	f383 8811 	msr	BASEPRI, r3
 800ba36:	f3bf 8f6f 	isb	sy
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba40:	bf00      	nop
 800ba42:	e7fe      	b.n	800ba42 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	2b02      	cmp	r3, #2
 800ba48:	d103      	bne.n	800ba52 <xQueueGenericSend+0x6e>
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d101      	bne.n	800ba56 <xQueueGenericSend+0x72>
 800ba52:	2301      	movs	r3, #1
 800ba54:	e000      	b.n	800ba58 <xQueueGenericSend+0x74>
 800ba56:	2300      	movs	r3, #0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d10a      	bne.n	800ba72 <xQueueGenericSend+0x8e>
	__asm volatile
 800ba5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba60:	f383 8811 	msr	BASEPRI, r3
 800ba64:	f3bf 8f6f 	isb	sy
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	623b      	str	r3, [r7, #32]
}
 800ba6e:	bf00      	nop
 800ba70:	e7fe      	b.n	800ba70 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba72:	f001 f917 	bl	800cca4 <xTaskGetSchedulerState>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d102      	bne.n	800ba82 <xQueueGenericSend+0x9e>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d101      	bne.n	800ba86 <xQueueGenericSend+0xa2>
 800ba82:	2301      	movs	r3, #1
 800ba84:	e000      	b.n	800ba88 <xQueueGenericSend+0xa4>
 800ba86:	2300      	movs	r3, #0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d10a      	bne.n	800baa2 <xQueueGenericSend+0xbe>
	__asm volatile
 800ba8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba90:	f383 8811 	msr	BASEPRI, r3
 800ba94:	f3bf 8f6f 	isb	sy
 800ba98:	f3bf 8f4f 	dsb	sy
 800ba9c:	61fb      	str	r3, [r7, #28]
}
 800ba9e:	bf00      	nop
 800baa0:	e7fe      	b.n	800baa0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800baa2:	f001 fc4f 	bl	800d344 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800baa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baae:	429a      	cmp	r2, r3
 800bab0:	d302      	bcc.n	800bab8 <xQueueGenericSend+0xd4>
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	2b02      	cmp	r3, #2
 800bab6:	d129      	bne.n	800bb0c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bab8:	683a      	ldr	r2, [r7, #0]
 800baba:	68b9      	ldr	r1, [r7, #8]
 800babc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800babe:	f000 fa41 	bl	800bf44 <prvCopyDataToQueue>
 800bac2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d010      	beq.n	800baee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bace:	3324      	adds	r3, #36	; 0x24
 800bad0:	4618      	mov	r0, r3
 800bad2:	f000 ff2b 	bl	800c92c <xTaskRemoveFromEventList>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d013      	beq.n	800bb04 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800badc:	4b3f      	ldr	r3, [pc, #252]	; (800bbdc <xQueueGenericSend+0x1f8>)
 800bade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bae2:	601a      	str	r2, [r3, #0]
 800bae4:	f3bf 8f4f 	dsb	sy
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	e00a      	b.n	800bb04 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800baee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d007      	beq.n	800bb04 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800baf4:	4b39      	ldr	r3, [pc, #228]	; (800bbdc <xQueueGenericSend+0x1f8>)
 800baf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bafa:	601a      	str	r2, [r3, #0]
 800bafc:	f3bf 8f4f 	dsb	sy
 800bb00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bb04:	f001 fc4e 	bl	800d3a4 <vPortExitCritical>
				return pdPASS;
 800bb08:	2301      	movs	r3, #1
 800bb0a:	e063      	b.n	800bbd4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d103      	bne.n	800bb1a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb12:	f001 fc47 	bl	800d3a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bb16:	2300      	movs	r3, #0
 800bb18:	e05c      	b.n	800bbd4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d106      	bne.n	800bb2e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb20:	f107 0314 	add.w	r3, r7, #20
 800bb24:	4618      	mov	r0, r3
 800bb26:	f000 ff63 	bl	800c9f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb2e:	f001 fc39 	bl	800d3a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb32:	f000 fd19 	bl	800c568 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb36:	f001 fc05 	bl	800d344 <vPortEnterCritical>
 800bb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb40:	b25b      	sxtb	r3, r3
 800bb42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb46:	d103      	bne.n	800bb50 <xQueueGenericSend+0x16c>
 800bb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb56:	b25b      	sxtb	r3, r3
 800bb58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb5c:	d103      	bne.n	800bb66 <xQueueGenericSend+0x182>
 800bb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb60:	2200      	movs	r2, #0
 800bb62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb66:	f001 fc1d 	bl	800d3a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb6a:	1d3a      	adds	r2, r7, #4
 800bb6c:	f107 0314 	add.w	r3, r7, #20
 800bb70:	4611      	mov	r1, r2
 800bb72:	4618      	mov	r0, r3
 800bb74:	f000 ff52 	bl	800ca1c <xTaskCheckForTimeOut>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d124      	bne.n	800bbc8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bb7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb80:	f000 fab2 	bl	800c0e8 <prvIsQueueFull>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d018      	beq.n	800bbbc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8c:	3310      	adds	r3, #16
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	4611      	mov	r1, r2
 800bb92:	4618      	mov	r0, r3
 800bb94:	f000 fea6 	bl	800c8e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bb98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb9a:	f000 fa3d 	bl	800c018 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bb9e:	f000 fcf1 	bl	800c584 <xTaskResumeAll>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f47f af7c 	bne.w	800baa2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bbaa:	4b0c      	ldr	r3, [pc, #48]	; (800bbdc <xQueueGenericSend+0x1f8>)
 800bbac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbb0:	601a      	str	r2, [r3, #0]
 800bbb2:	f3bf 8f4f 	dsb	sy
 800bbb6:	f3bf 8f6f 	isb	sy
 800bbba:	e772      	b.n	800baa2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bbbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbbe:	f000 fa2b 	bl	800c018 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bbc2:	f000 fcdf 	bl	800c584 <xTaskResumeAll>
 800bbc6:	e76c      	b.n	800baa2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bbc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbca:	f000 fa25 	bl	800c018 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bbce:	f000 fcd9 	bl	800c584 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bbd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3738      	adds	r7, #56	; 0x38
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	e000ed04 	.word	0xe000ed04

0800bbe0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b08e      	sub	sp, #56	; 0x38
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d10a      	bne.n	800bc0a <xQueueGiveFromISR+0x2a>
	__asm volatile
 800bbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf8:	f383 8811 	msr	BASEPRI, r3
 800bbfc:	f3bf 8f6f 	isb	sy
 800bc00:	f3bf 8f4f 	dsb	sy
 800bc04:	623b      	str	r3, [r7, #32]
}
 800bc06:	bf00      	nop
 800bc08:	e7fe      	b.n	800bc08 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00a      	beq.n	800bc28 <xQueueGiveFromISR+0x48>
	__asm volatile
 800bc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc16:	f383 8811 	msr	BASEPRI, r3
 800bc1a:	f3bf 8f6f 	isb	sy
 800bc1e:	f3bf 8f4f 	dsb	sy
 800bc22:	61fb      	str	r3, [r7, #28]
}
 800bc24:	bf00      	nop
 800bc26:	e7fe      	b.n	800bc26 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d103      	bne.n	800bc38 <xQueueGiveFromISR+0x58>
 800bc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d101      	bne.n	800bc3c <xQueueGiveFromISR+0x5c>
 800bc38:	2301      	movs	r3, #1
 800bc3a:	e000      	b.n	800bc3e <xQueueGiveFromISR+0x5e>
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10a      	bne.n	800bc58 <xQueueGiveFromISR+0x78>
	__asm volatile
 800bc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc46:	f383 8811 	msr	BASEPRI, r3
 800bc4a:	f3bf 8f6f 	isb	sy
 800bc4e:	f3bf 8f4f 	dsb	sy
 800bc52:	61bb      	str	r3, [r7, #24]
}
 800bc54:	bf00      	nop
 800bc56:	e7fe      	b.n	800bc56 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc58:	f001 fc56 	bl	800d508 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bc5c:	f3ef 8211 	mrs	r2, BASEPRI
 800bc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc64:	f383 8811 	msr	BASEPRI, r3
 800bc68:	f3bf 8f6f 	isb	sy
 800bc6c:	f3bf 8f4f 	dsb	sy
 800bc70:	617a      	str	r2, [r7, #20]
 800bc72:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bc74:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc76:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc7c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d22b      	bcs.n	800bce0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc94:	1c5a      	adds	r2, r3, #1
 800bc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc98:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bc9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bc9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca2:	d112      	bne.n	800bcca <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d016      	beq.n	800bcda <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcae:	3324      	adds	r3, #36	; 0x24
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f000 fe3b 	bl	800c92c <xTaskRemoveFromEventList>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d00e      	beq.n	800bcda <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d00b      	beq.n	800bcda <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	601a      	str	r2, [r3, #0]
 800bcc8:	e007      	b.n	800bcda <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bcca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcce:	3301      	adds	r3, #1
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	b25a      	sxtb	r2, r3
 800bcd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	637b      	str	r3, [r7, #52]	; 0x34
 800bcde:	e001      	b.n	800bce4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bce0:	2300      	movs	r3, #0
 800bce2:	637b      	str	r3, [r7, #52]	; 0x34
 800bce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bcee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bcf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3738      	adds	r7, #56	; 0x38
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
	...

0800bcfc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b08e      	sub	sp, #56	; 0x38
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd06:	2300      	movs	r3, #0
 800bd08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d10a      	bne.n	800bd2e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd1c:	f383 8811 	msr	BASEPRI, r3
 800bd20:	f3bf 8f6f 	isb	sy
 800bd24:	f3bf 8f4f 	dsb	sy
 800bd28:	623b      	str	r3, [r7, #32]
}
 800bd2a:	bf00      	nop
 800bd2c:	e7fe      	b.n	800bd2c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d00a      	beq.n	800bd4c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bd36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3a:	f383 8811 	msr	BASEPRI, r3
 800bd3e:	f3bf 8f6f 	isb	sy
 800bd42:	f3bf 8f4f 	dsb	sy
 800bd46:	61fb      	str	r3, [r7, #28]
}
 800bd48:	bf00      	nop
 800bd4a:	e7fe      	b.n	800bd4a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd4c:	f000 ffaa 	bl	800cca4 <xTaskGetSchedulerState>
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d102      	bne.n	800bd5c <xQueueSemaphoreTake+0x60>
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d101      	bne.n	800bd60 <xQueueSemaphoreTake+0x64>
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	e000      	b.n	800bd62 <xQueueSemaphoreTake+0x66>
 800bd60:	2300      	movs	r3, #0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d10a      	bne.n	800bd7c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6a:	f383 8811 	msr	BASEPRI, r3
 800bd6e:	f3bf 8f6f 	isb	sy
 800bd72:	f3bf 8f4f 	dsb	sy
 800bd76:	61bb      	str	r3, [r7, #24]
}
 800bd78:	bf00      	nop
 800bd7a:	e7fe      	b.n	800bd7a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd7c:	f001 fae2 	bl	800d344 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd84:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d024      	beq.n	800bdd6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8e:	1e5a      	subs	r2, r3, #1
 800bd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd92:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d104      	bne.n	800bda6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bd9c:	f001 f92a 	bl	800cff4 <pvTaskIncrementMutexHeldCount>
 800bda0:	4602      	mov	r2, r0
 800bda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda8:	691b      	ldr	r3, [r3, #16]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00f      	beq.n	800bdce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb0:	3310      	adds	r3, #16
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f000 fdba 	bl	800c92c <xTaskRemoveFromEventList>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d007      	beq.n	800bdce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bdbe:	4b54      	ldr	r3, [pc, #336]	; (800bf10 <xQueueSemaphoreTake+0x214>)
 800bdc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdc4:	601a      	str	r2, [r3, #0]
 800bdc6:	f3bf 8f4f 	dsb	sy
 800bdca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bdce:	f001 fae9 	bl	800d3a4 <vPortExitCritical>
				return pdPASS;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e097      	b.n	800bf06 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d111      	bne.n	800be00 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d00a      	beq.n	800bdf8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde6:	f383 8811 	msr	BASEPRI, r3
 800bdea:	f3bf 8f6f 	isb	sy
 800bdee:	f3bf 8f4f 	dsb	sy
 800bdf2:	617b      	str	r3, [r7, #20]
}
 800bdf4:	bf00      	nop
 800bdf6:	e7fe      	b.n	800bdf6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bdf8:	f001 fad4 	bl	800d3a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	e082      	b.n	800bf06 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be02:	2b00      	cmp	r3, #0
 800be04:	d106      	bne.n	800be14 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be06:	f107 030c 	add.w	r3, r7, #12
 800be0a:	4618      	mov	r0, r3
 800be0c:	f000 fdf0 	bl	800c9f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be10:	2301      	movs	r3, #1
 800be12:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be14:	f001 fac6 	bl	800d3a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be18:	f000 fba6 	bl	800c568 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be1c:	f001 fa92 	bl	800d344 <vPortEnterCritical>
 800be20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be26:	b25b      	sxtb	r3, r3
 800be28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be2c:	d103      	bne.n	800be36 <xQueueSemaphoreTake+0x13a>
 800be2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be30:	2200      	movs	r2, #0
 800be32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be3c:	b25b      	sxtb	r3, r3
 800be3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be42:	d103      	bne.n	800be4c <xQueueSemaphoreTake+0x150>
 800be44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be46:	2200      	movs	r2, #0
 800be48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be4c:	f001 faaa 	bl	800d3a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be50:	463a      	mov	r2, r7
 800be52:	f107 030c 	add.w	r3, r7, #12
 800be56:	4611      	mov	r1, r2
 800be58:	4618      	mov	r0, r3
 800be5a:	f000 fddf 	bl	800ca1c <xTaskCheckForTimeOut>
 800be5e:	4603      	mov	r3, r0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d132      	bne.n	800beca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be66:	f000 f929 	bl	800c0bc <prvIsQueueEmpty>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d026      	beq.n	800bebe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d109      	bne.n	800be8c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800be78:	f001 fa64 	bl	800d344 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800be7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	4618      	mov	r0, r3
 800be82:	f000 ff2d 	bl	800cce0 <xTaskPriorityInherit>
 800be86:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800be88:	f001 fa8c 	bl	800d3a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8e:	3324      	adds	r3, #36	; 0x24
 800be90:	683a      	ldr	r2, [r7, #0]
 800be92:	4611      	mov	r1, r2
 800be94:	4618      	mov	r0, r3
 800be96:	f000 fd25 	bl	800c8e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be9c:	f000 f8bc 	bl	800c018 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bea0:	f000 fb70 	bl	800c584 <xTaskResumeAll>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	f47f af68 	bne.w	800bd7c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800beac:	4b18      	ldr	r3, [pc, #96]	; (800bf10 <xQueueSemaphoreTake+0x214>)
 800beae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beb2:	601a      	str	r2, [r3, #0]
 800beb4:	f3bf 8f4f 	dsb	sy
 800beb8:	f3bf 8f6f 	isb	sy
 800bebc:	e75e      	b.n	800bd7c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bebe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bec0:	f000 f8aa 	bl	800c018 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bec4:	f000 fb5e 	bl	800c584 <xTaskResumeAll>
 800bec8:	e758      	b.n	800bd7c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800beca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800becc:	f000 f8a4 	bl	800c018 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bed0:	f000 fb58 	bl	800c584 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bed4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bed6:	f000 f8f1 	bl	800c0bc <prvIsQueueEmpty>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f43f af4d 	beq.w	800bd7c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d00d      	beq.n	800bf04 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800bee8:	f001 fa2c 	bl	800d344 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800beec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800beee:	f000 f811 	bl	800bf14 <prvGetDisinheritPriorityAfterTimeout>
 800bef2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800befa:	4618      	mov	r0, r3
 800befc:	f000 ffec 	bl	800ced8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bf00:	f001 fa50 	bl	800d3a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bf04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3738      	adds	r7, #56	; 0x38
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	e000ed04 	.word	0xe000ed04

0800bf14 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bf14:	b480      	push	{r7}
 800bf16:	b085      	sub	sp, #20
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d006      	beq.n	800bf32 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f1c3 0307 	rsb	r3, r3, #7
 800bf2e:	60fb      	str	r3, [r7, #12]
 800bf30:	e001      	b.n	800bf36 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bf32:	2300      	movs	r3, #0
 800bf34:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bf36:	68fb      	ldr	r3, [r7, #12]
	}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3714      	adds	r7, #20
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr

0800bf44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b086      	sub	sp, #24
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bf50:	2300      	movs	r3, #0
 800bf52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d10d      	bne.n	800bf7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d14d      	bne.n	800c006 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f000 ff2c 	bl	800cdcc <xTaskPriorityDisinherit>
 800bf74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	609a      	str	r2, [r3, #8]
 800bf7c:	e043      	b.n	800c006 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d119      	bne.n	800bfb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6858      	ldr	r0, [r3, #4]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	68b9      	ldr	r1, [r7, #8]
 800bf90:	f001 fd08 	bl	800d9a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	685a      	ldr	r2, [r3, #4]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf9c:	441a      	add	r2, r3
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	685a      	ldr	r2, [r3, #4]
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d32b      	bcc.n	800c006 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	605a      	str	r2, [r3, #4]
 800bfb6:	e026      	b.n	800c006 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	68d8      	ldr	r0, [r3, #12]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	68b9      	ldr	r1, [r7, #8]
 800bfc4:	f001 fcee 	bl	800d9a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	68da      	ldr	r2, [r3, #12]
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd0:	425b      	negs	r3, r3
 800bfd2:	441a      	add	r2, r3
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	68da      	ldr	r2, [r3, #12]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d207      	bcs.n	800bff4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	689a      	ldr	r2, [r3, #8]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfec:	425b      	negs	r3, r3
 800bfee:	441a      	add	r2, r3
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2b02      	cmp	r3, #2
 800bff8:	d105      	bne.n	800c006 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d002      	beq.n	800c006 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	3b01      	subs	r3, #1
 800c004:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	1c5a      	adds	r2, r3, #1
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c00e:	697b      	ldr	r3, [r7, #20]
}
 800c010:	4618      	mov	r0, r3
 800c012:	3718      	adds	r7, #24
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b084      	sub	sp, #16
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c020:	f001 f990 	bl	800d344 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c02a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c02c:	e011      	b.n	800c052 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c032:	2b00      	cmp	r3, #0
 800c034:	d012      	beq.n	800c05c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	3324      	adds	r3, #36	; 0x24
 800c03a:	4618      	mov	r0, r3
 800c03c:	f000 fc76 	bl	800c92c <xTaskRemoveFromEventList>
 800c040:	4603      	mov	r3, r0
 800c042:	2b00      	cmp	r3, #0
 800c044:	d001      	beq.n	800c04a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c046:	f000 fd4b 	bl	800cae0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c04a:	7bfb      	ldrb	r3, [r7, #15]
 800c04c:	3b01      	subs	r3, #1
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c056:	2b00      	cmp	r3, #0
 800c058:	dce9      	bgt.n	800c02e <prvUnlockQueue+0x16>
 800c05a:	e000      	b.n	800c05e <prvUnlockQueue+0x46>
					break;
 800c05c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	22ff      	movs	r2, #255	; 0xff
 800c062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c066:	f001 f99d 	bl	800d3a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c06a:	f001 f96b 	bl	800d344 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c074:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c076:	e011      	b.n	800c09c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d012      	beq.n	800c0a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	3310      	adds	r3, #16
 800c084:	4618      	mov	r0, r3
 800c086:	f000 fc51 	bl	800c92c <xTaskRemoveFromEventList>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d001      	beq.n	800c094 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c090:	f000 fd26 	bl	800cae0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c094:	7bbb      	ldrb	r3, [r7, #14]
 800c096:	3b01      	subs	r3, #1
 800c098:	b2db      	uxtb	r3, r3
 800c09a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c09c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	dce9      	bgt.n	800c078 <prvUnlockQueue+0x60>
 800c0a4:	e000      	b.n	800c0a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c0a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	22ff      	movs	r2, #255	; 0xff
 800c0ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c0b0:	f001 f978 	bl	800d3a4 <vPortExitCritical>
}
 800c0b4:	bf00      	nop
 800c0b6:	3710      	adds	r7, #16
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b084      	sub	sp, #16
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0c4:	f001 f93e 	bl	800d344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d102      	bne.n	800c0d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	60fb      	str	r3, [r7, #12]
 800c0d4:	e001      	b.n	800c0da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0da:	f001 f963 	bl	800d3a4 <vPortExitCritical>

	return xReturn;
 800c0de:	68fb      	ldr	r3, [r7, #12]
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3710      	adds	r7, #16
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0f0:	f001 f928 	bl	800d344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d102      	bne.n	800c106 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c100:	2301      	movs	r3, #1
 800c102:	60fb      	str	r3, [r7, #12]
 800c104:	e001      	b.n	800c10a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c106:	2300      	movs	r3, #0
 800c108:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c10a:	f001 f94b 	bl	800d3a4 <vPortExitCritical>

	return xReturn;
 800c10e:	68fb      	ldr	r3, [r7, #12]
}
 800c110:	4618      	mov	r0, r3
 800c112:	3710      	adds	r7, #16
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b08e      	sub	sp, #56	; 0x38
 800c11c:	af04      	add	r7, sp, #16
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	607a      	str	r2, [r7, #4]
 800c124:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d10a      	bne.n	800c142 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c130:	f383 8811 	msr	BASEPRI, r3
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	f3bf 8f4f 	dsb	sy
 800c13c:	623b      	str	r3, [r7, #32]
}
 800c13e:	bf00      	nop
 800c140:	e7fe      	b.n	800c140 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c144:	2b00      	cmp	r3, #0
 800c146:	d10a      	bne.n	800c15e <xTaskCreateStatic+0x46>
	__asm volatile
 800c148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14c:	f383 8811 	msr	BASEPRI, r3
 800c150:	f3bf 8f6f 	isb	sy
 800c154:	f3bf 8f4f 	dsb	sy
 800c158:	61fb      	str	r3, [r7, #28]
}
 800c15a:	bf00      	nop
 800c15c:	e7fe      	b.n	800c15c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c15e:	2354      	movs	r3, #84	; 0x54
 800c160:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	2b54      	cmp	r3, #84	; 0x54
 800c166:	d00a      	beq.n	800c17e <xTaskCreateStatic+0x66>
	__asm volatile
 800c168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16c:	f383 8811 	msr	BASEPRI, r3
 800c170:	f3bf 8f6f 	isb	sy
 800c174:	f3bf 8f4f 	dsb	sy
 800c178:	61bb      	str	r3, [r7, #24]
}
 800c17a:	bf00      	nop
 800c17c:	e7fe      	b.n	800c17c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c17e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c182:	2b00      	cmp	r3, #0
 800c184:	d01e      	beq.n	800c1c4 <xTaskCreateStatic+0xac>
 800c186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d01b      	beq.n	800c1c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c18e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c194:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c198:	2202      	movs	r2, #2
 800c19a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c19e:	2300      	movs	r3, #0
 800c1a0:	9303      	str	r3, [sp, #12]
 800c1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a4:	9302      	str	r3, [sp, #8]
 800c1a6:	f107 0314 	add.w	r3, r7, #20
 800c1aa:	9301      	str	r3, [sp, #4]
 800c1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ae:	9300      	str	r3, [sp, #0]
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	687a      	ldr	r2, [r7, #4]
 800c1b4:	68b9      	ldr	r1, [r7, #8]
 800c1b6:	68f8      	ldr	r0, [r7, #12]
 800c1b8:	f000 f850 	bl	800c25c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c1bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1be:	f000 f8d5 	bl	800c36c <prvAddNewTaskToReadyList>
 800c1c2:	e001      	b.n	800c1c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c1c8:	697b      	ldr	r3, [r7, #20]
	}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3728      	adds	r7, #40	; 0x28
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b08c      	sub	sp, #48	; 0x30
 800c1d6:	af04      	add	r7, sp, #16
 800c1d8:	60f8      	str	r0, [r7, #12]
 800c1da:	60b9      	str	r1, [r7, #8]
 800c1dc:	603b      	str	r3, [r7, #0]
 800c1de:	4613      	mov	r3, r2
 800c1e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c1e2:	88fb      	ldrh	r3, [r7, #6]
 800c1e4:	009b      	lsls	r3, r3, #2
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f001 f9ce 	bl	800d588 <pvPortMalloc>
 800c1ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d00e      	beq.n	800c212 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c1f4:	2054      	movs	r0, #84	; 0x54
 800c1f6:	f001 f9c7 	bl	800d588 <pvPortMalloc>
 800c1fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c1fc:	69fb      	ldr	r3, [r7, #28]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d003      	beq.n	800c20a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c202:	69fb      	ldr	r3, [r7, #28]
 800c204:	697a      	ldr	r2, [r7, #20]
 800c206:	631a      	str	r2, [r3, #48]	; 0x30
 800c208:	e005      	b.n	800c216 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c20a:	6978      	ldr	r0, [r7, #20]
 800c20c:	f001 fa88 	bl	800d720 <vPortFree>
 800c210:	e001      	b.n	800c216 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c212:	2300      	movs	r3, #0
 800c214:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c216:	69fb      	ldr	r3, [r7, #28]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d017      	beq.n	800c24c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c21c:	69fb      	ldr	r3, [r7, #28]
 800c21e:	2200      	movs	r2, #0
 800c220:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c224:	88fa      	ldrh	r2, [r7, #6]
 800c226:	2300      	movs	r3, #0
 800c228:	9303      	str	r3, [sp, #12]
 800c22a:	69fb      	ldr	r3, [r7, #28]
 800c22c:	9302      	str	r3, [sp, #8]
 800c22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c230:	9301      	str	r3, [sp, #4]
 800c232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c234:	9300      	str	r3, [sp, #0]
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	68b9      	ldr	r1, [r7, #8]
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	f000 f80e 	bl	800c25c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c240:	69f8      	ldr	r0, [r7, #28]
 800c242:	f000 f893 	bl	800c36c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c246:	2301      	movs	r3, #1
 800c248:	61bb      	str	r3, [r7, #24]
 800c24a:	e002      	b.n	800c252 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c24c:	f04f 33ff 	mov.w	r3, #4294967295
 800c250:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c252:	69bb      	ldr	r3, [r7, #24]
	}
 800c254:	4618      	mov	r0, r3
 800c256:	3720      	adds	r7, #32
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b088      	sub	sp, #32
 800c260:	af00      	add	r7, sp, #0
 800c262:	60f8      	str	r0, [r7, #12]
 800c264:	60b9      	str	r1, [r7, #8]
 800c266:	607a      	str	r2, [r7, #4]
 800c268:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c26e:	6879      	ldr	r1, [r7, #4]
 800c270:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c274:	440b      	add	r3, r1
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	4413      	add	r3, r2
 800c27a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c27c:	69bb      	ldr	r3, [r7, #24]
 800c27e:	f023 0307 	bic.w	r3, r3, #7
 800c282:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	f003 0307 	and.w	r3, r3, #7
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d00a      	beq.n	800c2a4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800c28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c292:	f383 8811 	msr	BASEPRI, r3
 800c296:	f3bf 8f6f 	isb	sy
 800c29a:	f3bf 8f4f 	dsb	sy
 800c29e:	617b      	str	r3, [r7, #20]
}
 800c2a0:	bf00      	nop
 800c2a2:	e7fe      	b.n	800c2a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d01f      	beq.n	800c2ea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	61fb      	str	r3, [r7, #28]
 800c2ae:	e012      	b.n	800c2d6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c2b0:	68ba      	ldr	r2, [r7, #8]
 800c2b2:	69fb      	ldr	r3, [r7, #28]
 800c2b4:	4413      	add	r3, r2
 800c2b6:	7819      	ldrb	r1, [r3, #0]
 800c2b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	4413      	add	r3, r2
 800c2be:	3334      	adds	r3, #52	; 0x34
 800c2c0:	460a      	mov	r2, r1
 800c2c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c2c4:	68ba      	ldr	r2, [r7, #8]
 800c2c6:	69fb      	ldr	r3, [r7, #28]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d006      	beq.n	800c2de <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	61fb      	str	r3, [r7, #28]
 800c2d6:	69fb      	ldr	r3, [r7, #28]
 800c2d8:	2b0f      	cmp	r3, #15
 800c2da:	d9e9      	bls.n	800c2b0 <prvInitialiseNewTask+0x54>
 800c2dc:	e000      	b.n	800c2e0 <prvInitialiseNewTask+0x84>
			{
				break;
 800c2de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c2e8:	e003      	b.n	800c2f2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f4:	2b06      	cmp	r3, #6
 800c2f6:	d901      	bls.n	800c2fc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c2f8:	2306      	movs	r3, #6
 800c2fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c300:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c306:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30a:	2200      	movs	r2, #0
 800c30c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c310:	3304      	adds	r3, #4
 800c312:	4618      	mov	r0, r3
 800c314:	f7ff f94b 	bl	800b5ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31a:	3318      	adds	r3, #24
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7ff f946 	bl	800b5ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c326:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32a:	f1c3 0207 	rsb	r2, r3, #7
 800c32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c330:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c336:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33a:	2200      	movs	r2, #0
 800c33c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c340:	2200      	movs	r2, #0
 800c342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c346:	683a      	ldr	r2, [r7, #0]
 800c348:	68f9      	ldr	r1, [r7, #12]
 800c34a:	69b8      	ldr	r0, [r7, #24]
 800c34c:	f000 fecc 	bl	800d0e8 <pxPortInitialiseStack>
 800c350:	4602      	mov	r2, r0
 800c352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c354:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d002      	beq.n	800c362 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c35e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c360:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c362:	bf00      	nop
 800c364:	3720      	adds	r7, #32
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
	...

0800c36c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c374:	f000 ffe6 	bl	800d344 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c378:	4b2a      	ldr	r3, [pc, #168]	; (800c424 <prvAddNewTaskToReadyList+0xb8>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	3301      	adds	r3, #1
 800c37e:	4a29      	ldr	r2, [pc, #164]	; (800c424 <prvAddNewTaskToReadyList+0xb8>)
 800c380:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c382:	4b29      	ldr	r3, [pc, #164]	; (800c428 <prvAddNewTaskToReadyList+0xbc>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d109      	bne.n	800c39e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c38a:	4a27      	ldr	r2, [pc, #156]	; (800c428 <prvAddNewTaskToReadyList+0xbc>)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c390:	4b24      	ldr	r3, [pc, #144]	; (800c424 <prvAddNewTaskToReadyList+0xb8>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2b01      	cmp	r3, #1
 800c396:	d110      	bne.n	800c3ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c398:	f000 fbc6 	bl	800cb28 <prvInitialiseTaskLists>
 800c39c:	e00d      	b.n	800c3ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c39e:	4b23      	ldr	r3, [pc, #140]	; (800c42c <prvAddNewTaskToReadyList+0xc0>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d109      	bne.n	800c3ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c3a6:	4b20      	ldr	r3, [pc, #128]	; (800c428 <prvAddNewTaskToReadyList+0xbc>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d802      	bhi.n	800c3ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c3b4:	4a1c      	ldr	r2, [pc, #112]	; (800c428 <prvAddNewTaskToReadyList+0xbc>)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c3ba:	4b1d      	ldr	r3, [pc, #116]	; (800c430 <prvAddNewTaskToReadyList+0xc4>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	4a1b      	ldr	r2, [pc, #108]	; (800c430 <prvAddNewTaskToReadyList+0xc4>)
 800c3c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	409a      	lsls	r2, r3
 800c3cc:	4b19      	ldr	r3, [pc, #100]	; (800c434 <prvAddNewTaskToReadyList+0xc8>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	4a18      	ldr	r2, [pc, #96]	; (800c434 <prvAddNewTaskToReadyList+0xc8>)
 800c3d4:	6013      	str	r3, [r2, #0]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3da:	4613      	mov	r3, r2
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	4413      	add	r3, r2
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	4a15      	ldr	r2, [pc, #84]	; (800c438 <prvAddNewTaskToReadyList+0xcc>)
 800c3e4:	441a      	add	r2, r3
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	3304      	adds	r3, #4
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	4610      	mov	r0, r2
 800c3ee:	f7ff f8eb 	bl	800b5c8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c3f2:	f000 ffd7 	bl	800d3a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c3f6:	4b0d      	ldr	r3, [pc, #52]	; (800c42c <prvAddNewTaskToReadyList+0xc0>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00e      	beq.n	800c41c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c3fe:	4b0a      	ldr	r3, [pc, #40]	; (800c428 <prvAddNewTaskToReadyList+0xbc>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c408:	429a      	cmp	r2, r3
 800c40a:	d207      	bcs.n	800c41c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c40c:	4b0b      	ldr	r3, [pc, #44]	; (800c43c <prvAddNewTaskToReadyList+0xd0>)
 800c40e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c412:	601a      	str	r2, [r3, #0]
 800c414:	f3bf 8f4f 	dsb	sy
 800c418:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c41c:	bf00      	nop
 800c41e:	3708      	adds	r7, #8
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	20000394 	.word	0x20000394
 800c428:	20000294 	.word	0x20000294
 800c42c:	200003a0 	.word	0x200003a0
 800c430:	200003b0 	.word	0x200003b0
 800c434:	2000039c 	.word	0x2000039c
 800c438:	20000298 	.word	0x20000298
 800c43c:	e000ed04 	.word	0xe000ed04

0800c440 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c448:	2300      	movs	r3, #0
 800c44a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d017      	beq.n	800c482 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c452:	4b13      	ldr	r3, [pc, #76]	; (800c4a0 <vTaskDelay+0x60>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d00a      	beq.n	800c470 <vTaskDelay+0x30>
	__asm volatile
 800c45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45e:	f383 8811 	msr	BASEPRI, r3
 800c462:	f3bf 8f6f 	isb	sy
 800c466:	f3bf 8f4f 	dsb	sy
 800c46a:	60bb      	str	r3, [r7, #8]
}
 800c46c:	bf00      	nop
 800c46e:	e7fe      	b.n	800c46e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c470:	f000 f87a 	bl	800c568 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c474:	2100      	movs	r1, #0
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 fdd0 	bl	800d01c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c47c:	f000 f882 	bl	800c584 <xTaskResumeAll>
 800c480:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d107      	bne.n	800c498 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c488:	4b06      	ldr	r3, [pc, #24]	; (800c4a4 <vTaskDelay+0x64>)
 800c48a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c48e:	601a      	str	r2, [r3, #0]
 800c490:	f3bf 8f4f 	dsb	sy
 800c494:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c498:	bf00      	nop
 800c49a:	3710      	adds	r7, #16
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	200003bc 	.word	0x200003bc
 800c4a4:	e000ed04 	.word	0xe000ed04

0800c4a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b08a      	sub	sp, #40	; 0x28
 800c4ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c4b6:	463a      	mov	r2, r7
 800c4b8:	1d39      	adds	r1, r7, #4
 800c4ba:	f107 0308 	add.w	r3, r7, #8
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7f4 ff2c 	bl	800131c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c4c4:	6839      	ldr	r1, [r7, #0]
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	68ba      	ldr	r2, [r7, #8]
 800c4ca:	9202      	str	r2, [sp, #8]
 800c4cc:	9301      	str	r3, [sp, #4]
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	9300      	str	r3, [sp, #0]
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	460a      	mov	r2, r1
 800c4d6:	491e      	ldr	r1, [pc, #120]	; (800c550 <vTaskStartScheduler+0xa8>)
 800c4d8:	481e      	ldr	r0, [pc, #120]	; (800c554 <vTaskStartScheduler+0xac>)
 800c4da:	f7ff fe1d 	bl	800c118 <xTaskCreateStatic>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	4a1d      	ldr	r2, [pc, #116]	; (800c558 <vTaskStartScheduler+0xb0>)
 800c4e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c4e4:	4b1c      	ldr	r3, [pc, #112]	; (800c558 <vTaskStartScheduler+0xb0>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d002      	beq.n	800c4f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	617b      	str	r3, [r7, #20]
 800c4f0:	e001      	b.n	800c4f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d116      	bne.n	800c52a <vTaskStartScheduler+0x82>
	__asm volatile
 800c4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c500:	f383 8811 	msr	BASEPRI, r3
 800c504:	f3bf 8f6f 	isb	sy
 800c508:	f3bf 8f4f 	dsb	sy
 800c50c:	613b      	str	r3, [r7, #16]
}
 800c50e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c510:	4b12      	ldr	r3, [pc, #72]	; (800c55c <vTaskStartScheduler+0xb4>)
 800c512:	f04f 32ff 	mov.w	r2, #4294967295
 800c516:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c518:	4b11      	ldr	r3, [pc, #68]	; (800c560 <vTaskStartScheduler+0xb8>)
 800c51a:	2201      	movs	r2, #1
 800c51c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c51e:	4b11      	ldr	r3, [pc, #68]	; (800c564 <vTaskStartScheduler+0xbc>)
 800c520:	2200      	movs	r2, #0
 800c522:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c524:	f000 fe6c 	bl	800d200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c528:	e00e      	b.n	800c548 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c530:	d10a      	bne.n	800c548 <vTaskStartScheduler+0xa0>
	__asm volatile
 800c532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c536:	f383 8811 	msr	BASEPRI, r3
 800c53a:	f3bf 8f6f 	isb	sy
 800c53e:	f3bf 8f4f 	dsb	sy
 800c542:	60fb      	str	r3, [r7, #12]
}
 800c544:	bf00      	nop
 800c546:	e7fe      	b.n	800c546 <vTaskStartScheduler+0x9e>
}
 800c548:	bf00      	nop
 800c54a:	3718      	adds	r7, #24
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	0800da90 	.word	0x0800da90
 800c554:	0800caf9 	.word	0x0800caf9
 800c558:	200003b8 	.word	0x200003b8
 800c55c:	200003b4 	.word	0x200003b4
 800c560:	200003a0 	.word	0x200003a0
 800c564:	20000398 	.word	0x20000398

0800c568 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c568:	b480      	push	{r7}
 800c56a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c56c:	4b04      	ldr	r3, [pc, #16]	; (800c580 <vTaskSuspendAll+0x18>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	3301      	adds	r3, #1
 800c572:	4a03      	ldr	r2, [pc, #12]	; (800c580 <vTaskSuspendAll+0x18>)
 800c574:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c576:	bf00      	nop
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr
 800c580:	200003bc 	.word	0x200003bc

0800c584 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c58a:	2300      	movs	r3, #0
 800c58c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c58e:	2300      	movs	r3, #0
 800c590:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c592:	4b41      	ldr	r3, [pc, #260]	; (800c698 <xTaskResumeAll+0x114>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d10a      	bne.n	800c5b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800c59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c59e:	f383 8811 	msr	BASEPRI, r3
 800c5a2:	f3bf 8f6f 	isb	sy
 800c5a6:	f3bf 8f4f 	dsb	sy
 800c5aa:	603b      	str	r3, [r7, #0]
}
 800c5ac:	bf00      	nop
 800c5ae:	e7fe      	b.n	800c5ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c5b0:	f000 fec8 	bl	800d344 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c5b4:	4b38      	ldr	r3, [pc, #224]	; (800c698 <xTaskResumeAll+0x114>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	3b01      	subs	r3, #1
 800c5ba:	4a37      	ldr	r2, [pc, #220]	; (800c698 <xTaskResumeAll+0x114>)
 800c5bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5be:	4b36      	ldr	r3, [pc, #216]	; (800c698 <xTaskResumeAll+0x114>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d161      	bne.n	800c68a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c5c6:	4b35      	ldr	r3, [pc, #212]	; (800c69c <xTaskResumeAll+0x118>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d05d      	beq.n	800c68a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c5ce:	e02e      	b.n	800c62e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5d0:	4b33      	ldr	r3, [pc, #204]	; (800c6a0 <xTaskResumeAll+0x11c>)
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	68db      	ldr	r3, [r3, #12]
 800c5d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	3318      	adds	r3, #24
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7ff f850 	bl	800b682 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	3304      	adds	r3, #4
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7ff f84b 	bl	800b682 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	409a      	lsls	r2, r3
 800c5f4:	4b2b      	ldr	r3, [pc, #172]	; (800c6a4 <xTaskResumeAll+0x120>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	4a2a      	ldr	r2, [pc, #168]	; (800c6a4 <xTaskResumeAll+0x120>)
 800c5fc:	6013      	str	r3, [r2, #0]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c602:	4613      	mov	r3, r2
 800c604:	009b      	lsls	r3, r3, #2
 800c606:	4413      	add	r3, r2
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	4a27      	ldr	r2, [pc, #156]	; (800c6a8 <xTaskResumeAll+0x124>)
 800c60c:	441a      	add	r2, r3
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	3304      	adds	r3, #4
 800c612:	4619      	mov	r1, r3
 800c614:	4610      	mov	r0, r2
 800c616:	f7fe ffd7 	bl	800b5c8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c61e:	4b23      	ldr	r3, [pc, #140]	; (800c6ac <xTaskResumeAll+0x128>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c624:	429a      	cmp	r2, r3
 800c626:	d302      	bcc.n	800c62e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c628:	4b21      	ldr	r3, [pc, #132]	; (800c6b0 <xTaskResumeAll+0x12c>)
 800c62a:	2201      	movs	r2, #1
 800c62c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c62e:	4b1c      	ldr	r3, [pc, #112]	; (800c6a0 <xTaskResumeAll+0x11c>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d1cc      	bne.n	800c5d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d001      	beq.n	800c640 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c63c:	f000 fb12 	bl	800cc64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c640:	4b1c      	ldr	r3, [pc, #112]	; (800c6b4 <xTaskResumeAll+0x130>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d010      	beq.n	800c66e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c64c:	f000 f836 	bl	800c6bc <xTaskIncrementTick>
 800c650:	4603      	mov	r3, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	d002      	beq.n	800c65c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c656:	4b16      	ldr	r3, [pc, #88]	; (800c6b0 <xTaskResumeAll+0x12c>)
 800c658:	2201      	movs	r2, #1
 800c65a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	3b01      	subs	r3, #1
 800c660:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d1f1      	bne.n	800c64c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c668:	4b12      	ldr	r3, [pc, #72]	; (800c6b4 <xTaskResumeAll+0x130>)
 800c66a:	2200      	movs	r2, #0
 800c66c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c66e:	4b10      	ldr	r3, [pc, #64]	; (800c6b0 <xTaskResumeAll+0x12c>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d009      	beq.n	800c68a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c676:	2301      	movs	r3, #1
 800c678:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c67a:	4b0f      	ldr	r3, [pc, #60]	; (800c6b8 <xTaskResumeAll+0x134>)
 800c67c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c680:	601a      	str	r2, [r3, #0]
 800c682:	f3bf 8f4f 	dsb	sy
 800c686:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c68a:	f000 fe8b 	bl	800d3a4 <vPortExitCritical>

	return xAlreadyYielded;
 800c68e:	68bb      	ldr	r3, [r7, #8]
}
 800c690:	4618      	mov	r0, r3
 800c692:	3710      	adds	r7, #16
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	200003bc 	.word	0x200003bc
 800c69c:	20000394 	.word	0x20000394
 800c6a0:	20000354 	.word	0x20000354
 800c6a4:	2000039c 	.word	0x2000039c
 800c6a8:	20000298 	.word	0x20000298
 800c6ac:	20000294 	.word	0x20000294
 800c6b0:	200003a8 	.word	0x200003a8
 800c6b4:	200003a4 	.word	0x200003a4
 800c6b8:	e000ed04 	.word	0xe000ed04

0800c6bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b086      	sub	sp, #24
 800c6c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6c6:	4b4e      	ldr	r3, [pc, #312]	; (800c800 <xTaskIncrementTick+0x144>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	f040 808e 	bne.w	800c7ec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c6d0:	4b4c      	ldr	r3, [pc, #304]	; (800c804 <xTaskIncrementTick+0x148>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c6d8:	4a4a      	ldr	r2, [pc, #296]	; (800c804 <xTaskIncrementTick+0x148>)
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d120      	bne.n	800c726 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c6e4:	4b48      	ldr	r3, [pc, #288]	; (800c808 <xTaskIncrementTick+0x14c>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d00a      	beq.n	800c704 <xTaskIncrementTick+0x48>
	__asm volatile
 800c6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f2:	f383 8811 	msr	BASEPRI, r3
 800c6f6:	f3bf 8f6f 	isb	sy
 800c6fa:	f3bf 8f4f 	dsb	sy
 800c6fe:	603b      	str	r3, [r7, #0]
}
 800c700:	bf00      	nop
 800c702:	e7fe      	b.n	800c702 <xTaskIncrementTick+0x46>
 800c704:	4b40      	ldr	r3, [pc, #256]	; (800c808 <xTaskIncrementTick+0x14c>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	60fb      	str	r3, [r7, #12]
 800c70a:	4b40      	ldr	r3, [pc, #256]	; (800c80c <xTaskIncrementTick+0x150>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a3e      	ldr	r2, [pc, #248]	; (800c808 <xTaskIncrementTick+0x14c>)
 800c710:	6013      	str	r3, [r2, #0]
 800c712:	4a3e      	ldr	r2, [pc, #248]	; (800c80c <xTaskIncrementTick+0x150>)
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	6013      	str	r3, [r2, #0]
 800c718:	4b3d      	ldr	r3, [pc, #244]	; (800c810 <xTaskIncrementTick+0x154>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	3301      	adds	r3, #1
 800c71e:	4a3c      	ldr	r2, [pc, #240]	; (800c810 <xTaskIncrementTick+0x154>)
 800c720:	6013      	str	r3, [r2, #0]
 800c722:	f000 fa9f 	bl	800cc64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c726:	4b3b      	ldr	r3, [pc, #236]	; (800c814 <xTaskIncrementTick+0x158>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	693a      	ldr	r2, [r7, #16]
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d348      	bcc.n	800c7c2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c730:	4b35      	ldr	r3, [pc, #212]	; (800c808 <xTaskIncrementTick+0x14c>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d104      	bne.n	800c744 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c73a:	4b36      	ldr	r3, [pc, #216]	; (800c814 <xTaskIncrementTick+0x158>)
 800c73c:	f04f 32ff 	mov.w	r2, #4294967295
 800c740:	601a      	str	r2, [r3, #0]
					break;
 800c742:	e03e      	b.n	800c7c2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c744:	4b30      	ldr	r3, [pc, #192]	; (800c808 <xTaskIncrementTick+0x14c>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	68db      	ldr	r3, [r3, #12]
 800c74c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	685b      	ldr	r3, [r3, #4]
 800c752:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c754:	693a      	ldr	r2, [r7, #16]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d203      	bcs.n	800c764 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c75c:	4a2d      	ldr	r2, [pc, #180]	; (800c814 <xTaskIncrementTick+0x158>)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c762:	e02e      	b.n	800c7c2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	3304      	adds	r3, #4
 800c768:	4618      	mov	r0, r3
 800c76a:	f7fe ff8a 	bl	800b682 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c772:	2b00      	cmp	r3, #0
 800c774:	d004      	beq.n	800c780 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	3318      	adds	r3, #24
 800c77a:	4618      	mov	r0, r3
 800c77c:	f7fe ff81 	bl	800b682 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c784:	2201      	movs	r2, #1
 800c786:	409a      	lsls	r2, r3
 800c788:	4b23      	ldr	r3, [pc, #140]	; (800c818 <xTaskIncrementTick+0x15c>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4313      	orrs	r3, r2
 800c78e:	4a22      	ldr	r2, [pc, #136]	; (800c818 <xTaskIncrementTick+0x15c>)
 800c790:	6013      	str	r3, [r2, #0]
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c796:	4613      	mov	r3, r2
 800c798:	009b      	lsls	r3, r3, #2
 800c79a:	4413      	add	r3, r2
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	4a1f      	ldr	r2, [pc, #124]	; (800c81c <xTaskIncrementTick+0x160>)
 800c7a0:	441a      	add	r2, r3
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	3304      	adds	r3, #4
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	4610      	mov	r0, r2
 800c7aa:	f7fe ff0d 	bl	800b5c8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7b2:	4b1b      	ldr	r3, [pc, #108]	; (800c820 <xTaskIncrementTick+0x164>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d3b9      	bcc.n	800c730 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7c0:	e7b6      	b.n	800c730 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c7c2:	4b17      	ldr	r3, [pc, #92]	; (800c820 <xTaskIncrementTick+0x164>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7c8:	4914      	ldr	r1, [pc, #80]	; (800c81c <xTaskIncrementTick+0x160>)
 800c7ca:	4613      	mov	r3, r2
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	4413      	add	r3, r2
 800c7d0:	009b      	lsls	r3, r3, #2
 800c7d2:	440b      	add	r3, r1
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d901      	bls.n	800c7de <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c7de:	4b11      	ldr	r3, [pc, #68]	; (800c824 <xTaskIncrementTick+0x168>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d007      	beq.n	800c7f6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	617b      	str	r3, [r7, #20]
 800c7ea:	e004      	b.n	800c7f6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c7ec:	4b0e      	ldr	r3, [pc, #56]	; (800c828 <xTaskIncrementTick+0x16c>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	4a0d      	ldr	r2, [pc, #52]	; (800c828 <xTaskIncrementTick+0x16c>)
 800c7f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c7f6:	697b      	ldr	r3, [r7, #20]
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3718      	adds	r7, #24
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	200003bc 	.word	0x200003bc
 800c804:	20000398 	.word	0x20000398
 800c808:	2000034c 	.word	0x2000034c
 800c80c:	20000350 	.word	0x20000350
 800c810:	200003ac 	.word	0x200003ac
 800c814:	200003b4 	.word	0x200003b4
 800c818:	2000039c 	.word	0x2000039c
 800c81c:	20000298 	.word	0x20000298
 800c820:	20000294 	.word	0x20000294
 800c824:	200003a8 	.word	0x200003a8
 800c828:	200003a4 	.word	0x200003a4

0800c82c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c82c:	b480      	push	{r7}
 800c82e:	b087      	sub	sp, #28
 800c830:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c832:	4b27      	ldr	r3, [pc, #156]	; (800c8d0 <vTaskSwitchContext+0xa4>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d003      	beq.n	800c842 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c83a:	4b26      	ldr	r3, [pc, #152]	; (800c8d4 <vTaskSwitchContext+0xa8>)
 800c83c:	2201      	movs	r2, #1
 800c83e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c840:	e03f      	b.n	800c8c2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800c842:	4b24      	ldr	r3, [pc, #144]	; (800c8d4 <vTaskSwitchContext+0xa8>)
 800c844:	2200      	movs	r2, #0
 800c846:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c848:	4b23      	ldr	r3, [pc, #140]	; (800c8d8 <vTaskSwitchContext+0xac>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	fab3 f383 	clz	r3, r3
 800c854:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c856:	7afb      	ldrb	r3, [r7, #11]
 800c858:	f1c3 031f 	rsb	r3, r3, #31
 800c85c:	617b      	str	r3, [r7, #20]
 800c85e:	491f      	ldr	r1, [pc, #124]	; (800c8dc <vTaskSwitchContext+0xb0>)
 800c860:	697a      	ldr	r2, [r7, #20]
 800c862:	4613      	mov	r3, r2
 800c864:	009b      	lsls	r3, r3, #2
 800c866:	4413      	add	r3, r2
 800c868:	009b      	lsls	r3, r3, #2
 800c86a:	440b      	add	r3, r1
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d10a      	bne.n	800c888 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c876:	f383 8811 	msr	BASEPRI, r3
 800c87a:	f3bf 8f6f 	isb	sy
 800c87e:	f3bf 8f4f 	dsb	sy
 800c882:	607b      	str	r3, [r7, #4]
}
 800c884:	bf00      	nop
 800c886:	e7fe      	b.n	800c886 <vTaskSwitchContext+0x5a>
 800c888:	697a      	ldr	r2, [r7, #20]
 800c88a:	4613      	mov	r3, r2
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	4413      	add	r3, r2
 800c890:	009b      	lsls	r3, r3, #2
 800c892:	4a12      	ldr	r2, [pc, #72]	; (800c8dc <vTaskSwitchContext+0xb0>)
 800c894:	4413      	add	r3, r2
 800c896:	613b      	str	r3, [r7, #16]
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	685a      	ldr	r2, [r3, #4]
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	605a      	str	r2, [r3, #4]
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	685a      	ldr	r2, [r3, #4]
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	3308      	adds	r3, #8
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d104      	bne.n	800c8b8 <vTaskSwitchContext+0x8c>
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	685b      	ldr	r3, [r3, #4]
 800c8b2:	685a      	ldr	r2, [r3, #4]
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	605a      	str	r2, [r3, #4]
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	68db      	ldr	r3, [r3, #12]
 800c8be:	4a08      	ldr	r2, [pc, #32]	; (800c8e0 <vTaskSwitchContext+0xb4>)
 800c8c0:	6013      	str	r3, [r2, #0]
}
 800c8c2:	bf00      	nop
 800c8c4:	371c      	adds	r7, #28
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr
 800c8ce:	bf00      	nop
 800c8d0:	200003bc 	.word	0x200003bc
 800c8d4:	200003a8 	.word	0x200003a8
 800c8d8:	2000039c 	.word	0x2000039c
 800c8dc:	20000298 	.word	0x20000298
 800c8e0:	20000294 	.word	0x20000294

0800c8e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d10a      	bne.n	800c90a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f8:	f383 8811 	msr	BASEPRI, r3
 800c8fc:	f3bf 8f6f 	isb	sy
 800c900:	f3bf 8f4f 	dsb	sy
 800c904:	60fb      	str	r3, [r7, #12]
}
 800c906:	bf00      	nop
 800c908:	e7fe      	b.n	800c908 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c90a:	4b07      	ldr	r3, [pc, #28]	; (800c928 <vTaskPlaceOnEventList+0x44>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	3318      	adds	r3, #24
 800c910:	4619      	mov	r1, r3
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f7fe fe7c 	bl	800b610 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c918:	2101      	movs	r1, #1
 800c91a:	6838      	ldr	r0, [r7, #0]
 800c91c:	f000 fb7e 	bl	800d01c <prvAddCurrentTaskToDelayedList>
}
 800c920:	bf00      	nop
 800c922:	3710      	adds	r7, #16
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}
 800c928:	20000294 	.word	0x20000294

0800c92c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b086      	sub	sp, #24
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d10a      	bne.n	800c958 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c946:	f383 8811 	msr	BASEPRI, r3
 800c94a:	f3bf 8f6f 	isb	sy
 800c94e:	f3bf 8f4f 	dsb	sy
 800c952:	60fb      	str	r3, [r7, #12]
}
 800c954:	bf00      	nop
 800c956:	e7fe      	b.n	800c956 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	3318      	adds	r3, #24
 800c95c:	4618      	mov	r0, r3
 800c95e:	f7fe fe90 	bl	800b682 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c962:	4b1d      	ldr	r3, [pc, #116]	; (800c9d8 <xTaskRemoveFromEventList+0xac>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d11c      	bne.n	800c9a4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	3304      	adds	r3, #4
 800c96e:	4618      	mov	r0, r3
 800c970:	f7fe fe87 	bl	800b682 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c978:	2201      	movs	r2, #1
 800c97a:	409a      	lsls	r2, r3
 800c97c:	4b17      	ldr	r3, [pc, #92]	; (800c9dc <xTaskRemoveFromEventList+0xb0>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4313      	orrs	r3, r2
 800c982:	4a16      	ldr	r2, [pc, #88]	; (800c9dc <xTaskRemoveFromEventList+0xb0>)
 800c984:	6013      	str	r3, [r2, #0]
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c98a:	4613      	mov	r3, r2
 800c98c:	009b      	lsls	r3, r3, #2
 800c98e:	4413      	add	r3, r2
 800c990:	009b      	lsls	r3, r3, #2
 800c992:	4a13      	ldr	r2, [pc, #76]	; (800c9e0 <xTaskRemoveFromEventList+0xb4>)
 800c994:	441a      	add	r2, r3
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	3304      	adds	r3, #4
 800c99a:	4619      	mov	r1, r3
 800c99c:	4610      	mov	r0, r2
 800c99e:	f7fe fe13 	bl	800b5c8 <vListInsertEnd>
 800c9a2:	e005      	b.n	800c9b0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	3318      	adds	r3, #24
 800c9a8:	4619      	mov	r1, r3
 800c9aa:	480e      	ldr	r0, [pc, #56]	; (800c9e4 <xTaskRemoveFromEventList+0xb8>)
 800c9ac:	f7fe fe0c 	bl	800b5c8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9b4:	4b0c      	ldr	r3, [pc, #48]	; (800c9e8 <xTaskRemoveFromEventList+0xbc>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d905      	bls.n	800c9ca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c9c2:	4b0a      	ldr	r3, [pc, #40]	; (800c9ec <xTaskRemoveFromEventList+0xc0>)
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	601a      	str	r2, [r3, #0]
 800c9c8:	e001      	b.n	800c9ce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c9ce:	697b      	ldr	r3, [r7, #20]
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3718      	adds	r7, #24
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	200003bc 	.word	0x200003bc
 800c9dc:	2000039c 	.word	0x2000039c
 800c9e0:	20000298 	.word	0x20000298
 800c9e4:	20000354 	.word	0x20000354
 800c9e8:	20000294 	.word	0x20000294
 800c9ec:	200003a8 	.word	0x200003a8

0800c9f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b083      	sub	sp, #12
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c9f8:	4b06      	ldr	r3, [pc, #24]	; (800ca14 <vTaskInternalSetTimeOutState+0x24>)
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ca00:	4b05      	ldr	r3, [pc, #20]	; (800ca18 <vTaskInternalSetTimeOutState+0x28>)
 800ca02:	681a      	ldr	r2, [r3, #0]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	605a      	str	r2, [r3, #4]
}
 800ca08:	bf00      	nop
 800ca0a:	370c      	adds	r7, #12
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr
 800ca14:	200003ac 	.word	0x200003ac
 800ca18:	20000398 	.word	0x20000398

0800ca1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b088      	sub	sp, #32
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d10a      	bne.n	800ca42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ca2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca30:	f383 8811 	msr	BASEPRI, r3
 800ca34:	f3bf 8f6f 	isb	sy
 800ca38:	f3bf 8f4f 	dsb	sy
 800ca3c:	613b      	str	r3, [r7, #16]
}
 800ca3e:	bf00      	nop
 800ca40:	e7fe      	b.n	800ca40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d10a      	bne.n	800ca5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ca48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca4c:	f383 8811 	msr	BASEPRI, r3
 800ca50:	f3bf 8f6f 	isb	sy
 800ca54:	f3bf 8f4f 	dsb	sy
 800ca58:	60fb      	str	r3, [r7, #12]
}
 800ca5a:	bf00      	nop
 800ca5c:	e7fe      	b.n	800ca5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ca5e:	f000 fc71 	bl	800d344 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ca62:	4b1d      	ldr	r3, [pc, #116]	; (800cad8 <xTaskCheckForTimeOut+0xbc>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	69ba      	ldr	r2, [r7, #24]
 800ca6e:	1ad3      	subs	r3, r2, r3
 800ca70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca7a:	d102      	bne.n	800ca82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	61fb      	str	r3, [r7, #28]
 800ca80:	e023      	b.n	800caca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	4b15      	ldr	r3, [pc, #84]	; (800cadc <xTaskCheckForTimeOut+0xc0>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d007      	beq.n	800ca9e <xTaskCheckForTimeOut+0x82>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	69ba      	ldr	r2, [r7, #24]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d302      	bcc.n	800ca9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	61fb      	str	r3, [r7, #28]
 800ca9c:	e015      	b.n	800caca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	697a      	ldr	r2, [r7, #20]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d20b      	bcs.n	800cac0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	1ad2      	subs	r2, r2, r3
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f7ff ff9b 	bl	800c9f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800caba:	2300      	movs	r3, #0
 800cabc:	61fb      	str	r3, [r7, #28]
 800cabe:	e004      	b.n	800caca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	2200      	movs	r2, #0
 800cac4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cac6:	2301      	movs	r3, #1
 800cac8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800caca:	f000 fc6b 	bl	800d3a4 <vPortExitCritical>

	return xReturn;
 800cace:	69fb      	ldr	r3, [r7, #28]
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3720      	adds	r7, #32
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}
 800cad8:	20000398 	.word	0x20000398
 800cadc:	200003ac 	.word	0x200003ac

0800cae0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cae0:	b480      	push	{r7}
 800cae2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cae4:	4b03      	ldr	r3, [pc, #12]	; (800caf4 <vTaskMissedYield+0x14>)
 800cae6:	2201      	movs	r2, #1
 800cae8:	601a      	str	r2, [r3, #0]
}
 800caea:	bf00      	nop
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr
 800caf4:	200003a8 	.word	0x200003a8

0800caf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cb00:	f000 f852 	bl	800cba8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cb04:	4b06      	ldr	r3, [pc, #24]	; (800cb20 <prvIdleTask+0x28>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	d9f9      	bls.n	800cb00 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cb0c:	4b05      	ldr	r3, [pc, #20]	; (800cb24 <prvIdleTask+0x2c>)
 800cb0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb12:	601a      	str	r2, [r3, #0]
 800cb14:	f3bf 8f4f 	dsb	sy
 800cb18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cb1c:	e7f0      	b.n	800cb00 <prvIdleTask+0x8>
 800cb1e:	bf00      	nop
 800cb20:	20000298 	.word	0x20000298
 800cb24:	e000ed04 	.word	0xe000ed04

0800cb28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb2e:	2300      	movs	r3, #0
 800cb30:	607b      	str	r3, [r7, #4]
 800cb32:	e00c      	b.n	800cb4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	4613      	mov	r3, r2
 800cb38:	009b      	lsls	r3, r3, #2
 800cb3a:	4413      	add	r3, r2
 800cb3c:	009b      	lsls	r3, r3, #2
 800cb3e:	4a12      	ldr	r2, [pc, #72]	; (800cb88 <prvInitialiseTaskLists+0x60>)
 800cb40:	4413      	add	r3, r2
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7fe fd13 	bl	800b56e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	607b      	str	r3, [r7, #4]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2b06      	cmp	r3, #6
 800cb52:	d9ef      	bls.n	800cb34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cb54:	480d      	ldr	r0, [pc, #52]	; (800cb8c <prvInitialiseTaskLists+0x64>)
 800cb56:	f7fe fd0a 	bl	800b56e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cb5a:	480d      	ldr	r0, [pc, #52]	; (800cb90 <prvInitialiseTaskLists+0x68>)
 800cb5c:	f7fe fd07 	bl	800b56e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cb60:	480c      	ldr	r0, [pc, #48]	; (800cb94 <prvInitialiseTaskLists+0x6c>)
 800cb62:	f7fe fd04 	bl	800b56e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cb66:	480c      	ldr	r0, [pc, #48]	; (800cb98 <prvInitialiseTaskLists+0x70>)
 800cb68:	f7fe fd01 	bl	800b56e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cb6c:	480b      	ldr	r0, [pc, #44]	; (800cb9c <prvInitialiseTaskLists+0x74>)
 800cb6e:	f7fe fcfe 	bl	800b56e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cb72:	4b0b      	ldr	r3, [pc, #44]	; (800cba0 <prvInitialiseTaskLists+0x78>)
 800cb74:	4a05      	ldr	r2, [pc, #20]	; (800cb8c <prvInitialiseTaskLists+0x64>)
 800cb76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cb78:	4b0a      	ldr	r3, [pc, #40]	; (800cba4 <prvInitialiseTaskLists+0x7c>)
 800cb7a:	4a05      	ldr	r2, [pc, #20]	; (800cb90 <prvInitialiseTaskLists+0x68>)
 800cb7c:	601a      	str	r2, [r3, #0]
}
 800cb7e:	bf00      	nop
 800cb80:	3708      	adds	r7, #8
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	20000298 	.word	0x20000298
 800cb8c:	20000324 	.word	0x20000324
 800cb90:	20000338 	.word	0x20000338
 800cb94:	20000354 	.word	0x20000354
 800cb98:	20000368 	.word	0x20000368
 800cb9c:	20000380 	.word	0x20000380
 800cba0:	2000034c 	.word	0x2000034c
 800cba4:	20000350 	.word	0x20000350

0800cba8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cbae:	e019      	b.n	800cbe4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cbb0:	f000 fbc8 	bl	800d344 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbb4:	4b10      	ldr	r3, [pc, #64]	; (800cbf8 <prvCheckTasksWaitingTermination+0x50>)
 800cbb6:	68db      	ldr	r3, [r3, #12]
 800cbb8:	68db      	ldr	r3, [r3, #12]
 800cbba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	3304      	adds	r3, #4
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7fe fd5e 	bl	800b682 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cbc6:	4b0d      	ldr	r3, [pc, #52]	; (800cbfc <prvCheckTasksWaitingTermination+0x54>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	3b01      	subs	r3, #1
 800cbcc:	4a0b      	ldr	r2, [pc, #44]	; (800cbfc <prvCheckTasksWaitingTermination+0x54>)
 800cbce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cbd0:	4b0b      	ldr	r3, [pc, #44]	; (800cc00 <prvCheckTasksWaitingTermination+0x58>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	3b01      	subs	r3, #1
 800cbd6:	4a0a      	ldr	r2, [pc, #40]	; (800cc00 <prvCheckTasksWaitingTermination+0x58>)
 800cbd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cbda:	f000 fbe3 	bl	800d3a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f000 f810 	bl	800cc04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cbe4:	4b06      	ldr	r3, [pc, #24]	; (800cc00 <prvCheckTasksWaitingTermination+0x58>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d1e1      	bne.n	800cbb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cbec:	bf00      	nop
 800cbee:	bf00      	nop
 800cbf0:	3708      	adds	r7, #8
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	20000368 	.word	0x20000368
 800cbfc:	20000394 	.word	0x20000394
 800cc00:	2000037c 	.word	0x2000037c

0800cc04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b084      	sub	sp, #16
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d108      	bne.n	800cc28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f000 fd80 	bl	800d720 <vPortFree>
				vPortFree( pxTCB );
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f000 fd7d 	bl	800d720 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cc26:	e018      	b.n	800cc5a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cc2e:	2b01      	cmp	r3, #1
 800cc30:	d103      	bne.n	800cc3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f000 fd74 	bl	800d720 <vPortFree>
	}
 800cc38:	e00f      	b.n	800cc5a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cc40:	2b02      	cmp	r3, #2
 800cc42:	d00a      	beq.n	800cc5a <prvDeleteTCB+0x56>
	__asm volatile
 800cc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc48:	f383 8811 	msr	BASEPRI, r3
 800cc4c:	f3bf 8f6f 	isb	sy
 800cc50:	f3bf 8f4f 	dsb	sy
 800cc54:	60fb      	str	r3, [r7, #12]
}
 800cc56:	bf00      	nop
 800cc58:	e7fe      	b.n	800cc58 <prvDeleteTCB+0x54>
	}
 800cc5a:	bf00      	nop
 800cc5c:	3710      	adds	r7, #16
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
	...

0800cc64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc6a:	4b0c      	ldr	r3, [pc, #48]	; (800cc9c <prvResetNextTaskUnblockTime+0x38>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d104      	bne.n	800cc7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cc74:	4b0a      	ldr	r3, [pc, #40]	; (800cca0 <prvResetNextTaskUnblockTime+0x3c>)
 800cc76:	f04f 32ff 	mov.w	r2, #4294967295
 800cc7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cc7c:	e008      	b.n	800cc90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc7e:	4b07      	ldr	r3, [pc, #28]	; (800cc9c <prvResetNextTaskUnblockTime+0x38>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	68db      	ldr	r3, [r3, #12]
 800cc84:	68db      	ldr	r3, [r3, #12]
 800cc86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	4a04      	ldr	r2, [pc, #16]	; (800cca0 <prvResetNextTaskUnblockTime+0x3c>)
 800cc8e:	6013      	str	r3, [r2, #0]
}
 800cc90:	bf00      	nop
 800cc92:	370c      	adds	r7, #12
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr
 800cc9c:	2000034c 	.word	0x2000034c
 800cca0:	200003b4 	.word	0x200003b4

0800cca4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ccaa:	4b0b      	ldr	r3, [pc, #44]	; (800ccd8 <xTaskGetSchedulerState+0x34>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d102      	bne.n	800ccb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	607b      	str	r3, [r7, #4]
 800ccb6:	e008      	b.n	800ccca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccb8:	4b08      	ldr	r3, [pc, #32]	; (800ccdc <xTaskGetSchedulerState+0x38>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d102      	bne.n	800ccc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ccc0:	2302      	movs	r3, #2
 800ccc2:	607b      	str	r3, [r7, #4]
 800ccc4:	e001      	b.n	800ccca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ccca:	687b      	ldr	r3, [r7, #4]
	}
 800cccc:	4618      	mov	r0, r3
 800ccce:	370c      	adds	r7, #12
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr
 800ccd8:	200003a0 	.word	0x200003a0
 800ccdc:	200003bc 	.word	0x200003bc

0800cce0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ccec:	2300      	movs	r3, #0
 800ccee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d05e      	beq.n	800cdb4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccfa:	4b31      	ldr	r3, [pc, #196]	; (800cdc0 <xTaskPriorityInherit+0xe0>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d24e      	bcs.n	800cda2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	699b      	ldr	r3, [r3, #24]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	db06      	blt.n	800cd1a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd0c:	4b2c      	ldr	r3, [pc, #176]	; (800cdc0 <xTaskPriorityInherit+0xe0>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd12:	f1c3 0207 	rsb	r2, r3, #7
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	6959      	ldr	r1, [r3, #20]
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd22:	4613      	mov	r3, r2
 800cd24:	009b      	lsls	r3, r3, #2
 800cd26:	4413      	add	r3, r2
 800cd28:	009b      	lsls	r3, r3, #2
 800cd2a:	4a26      	ldr	r2, [pc, #152]	; (800cdc4 <xTaskPriorityInherit+0xe4>)
 800cd2c:	4413      	add	r3, r2
 800cd2e:	4299      	cmp	r1, r3
 800cd30:	d12f      	bne.n	800cd92 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	3304      	adds	r3, #4
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7fe fca3 	bl	800b682 <uxListRemove>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d10a      	bne.n	800cd58 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd46:	2201      	movs	r2, #1
 800cd48:	fa02 f303 	lsl.w	r3, r2, r3
 800cd4c:	43da      	mvns	r2, r3
 800cd4e:	4b1e      	ldr	r3, [pc, #120]	; (800cdc8 <xTaskPriorityInherit+0xe8>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	4013      	ands	r3, r2
 800cd54:	4a1c      	ldr	r2, [pc, #112]	; (800cdc8 <xTaskPriorityInherit+0xe8>)
 800cd56:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cd58:	4b19      	ldr	r3, [pc, #100]	; (800cdc0 <xTaskPriorityInherit+0xe0>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd66:	2201      	movs	r2, #1
 800cd68:	409a      	lsls	r2, r3
 800cd6a:	4b17      	ldr	r3, [pc, #92]	; (800cdc8 <xTaskPriorityInherit+0xe8>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	4a15      	ldr	r2, [pc, #84]	; (800cdc8 <xTaskPriorityInherit+0xe8>)
 800cd72:	6013      	str	r3, [r2, #0]
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd78:	4613      	mov	r3, r2
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	4413      	add	r3, r2
 800cd7e:	009b      	lsls	r3, r3, #2
 800cd80:	4a10      	ldr	r2, [pc, #64]	; (800cdc4 <xTaskPriorityInherit+0xe4>)
 800cd82:	441a      	add	r2, r3
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	3304      	adds	r3, #4
 800cd88:	4619      	mov	r1, r3
 800cd8a:	4610      	mov	r0, r2
 800cd8c:	f7fe fc1c 	bl	800b5c8 <vListInsertEnd>
 800cd90:	e004      	b.n	800cd9c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cd92:	4b0b      	ldr	r3, [pc, #44]	; (800cdc0 <xTaskPriorityInherit+0xe0>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	60fb      	str	r3, [r7, #12]
 800cda0:	e008      	b.n	800cdb4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cda6:	4b06      	ldr	r3, [pc, #24]	; (800cdc0 <xTaskPriorityInherit+0xe0>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d201      	bcs.n	800cdb4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
	}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3710      	adds	r7, #16
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
 800cdbe:	bf00      	nop
 800cdc0:	20000294 	.word	0x20000294
 800cdc4:	20000298 	.word	0x20000298
 800cdc8:	2000039c 	.word	0x2000039c

0800cdcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b086      	sub	sp, #24
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d06e      	beq.n	800cec0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cde2:	4b3a      	ldr	r3, [pc, #232]	; (800cecc <xTaskPriorityDisinherit+0x100>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	693a      	ldr	r2, [r7, #16]
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d00a      	beq.n	800ce02 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf0:	f383 8811 	msr	BASEPRI, r3
 800cdf4:	f3bf 8f6f 	isb	sy
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	60fb      	str	r3, [r7, #12]
}
 800cdfe:	bf00      	nop
 800ce00:	e7fe      	b.n	800ce00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d10a      	bne.n	800ce20 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ce0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce0e:	f383 8811 	msr	BASEPRI, r3
 800ce12:	f3bf 8f6f 	isb	sy
 800ce16:	f3bf 8f4f 	dsb	sy
 800ce1a:	60bb      	str	r3, [r7, #8]
}
 800ce1c:	bf00      	nop
 800ce1e:	e7fe      	b.n	800ce1e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce24:	1e5a      	subs	r2, r3, #1
 800ce26:	693b      	ldr	r3, [r7, #16]
 800ce28:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d044      	beq.n	800cec0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d140      	bne.n	800cec0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	3304      	adds	r3, #4
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7fe fc1d 	bl	800b682 <uxListRemove>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d115      	bne.n	800ce7a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce52:	491f      	ldr	r1, [pc, #124]	; (800ced0 <xTaskPriorityDisinherit+0x104>)
 800ce54:	4613      	mov	r3, r2
 800ce56:	009b      	lsls	r3, r3, #2
 800ce58:	4413      	add	r3, r2
 800ce5a:	009b      	lsls	r3, r3, #2
 800ce5c:	440b      	add	r3, r1
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d10a      	bne.n	800ce7a <xTaskPriorityDisinherit+0xae>
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce68:	2201      	movs	r2, #1
 800ce6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ce6e:	43da      	mvns	r2, r3
 800ce70:	4b18      	ldr	r3, [pc, #96]	; (800ced4 <xTaskPriorityDisinherit+0x108>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4013      	ands	r3, r2
 800ce76:	4a17      	ldr	r2, [pc, #92]	; (800ced4 <xTaskPriorityDisinherit+0x108>)
 800ce78:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce86:	f1c3 0207 	rsb	r2, r3, #7
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce92:	2201      	movs	r2, #1
 800ce94:	409a      	lsls	r2, r3
 800ce96:	4b0f      	ldr	r3, [pc, #60]	; (800ced4 <xTaskPriorityDisinherit+0x108>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	4313      	orrs	r3, r2
 800ce9c:	4a0d      	ldr	r2, [pc, #52]	; (800ced4 <xTaskPriorityDisinherit+0x108>)
 800ce9e:	6013      	str	r3, [r2, #0]
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cea4:	4613      	mov	r3, r2
 800cea6:	009b      	lsls	r3, r3, #2
 800cea8:	4413      	add	r3, r2
 800ceaa:	009b      	lsls	r3, r3, #2
 800ceac:	4a08      	ldr	r2, [pc, #32]	; (800ced0 <xTaskPriorityDisinherit+0x104>)
 800ceae:	441a      	add	r2, r3
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	3304      	adds	r3, #4
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	4610      	mov	r0, r2
 800ceb8:	f7fe fb86 	bl	800b5c8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cebc:	2301      	movs	r3, #1
 800cebe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cec0:	697b      	ldr	r3, [r7, #20]
	}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3718      	adds	r7, #24
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	bf00      	nop
 800cecc:	20000294 	.word	0x20000294
 800ced0:	20000298 	.word	0x20000298
 800ced4:	2000039c 	.word	0x2000039c

0800ced8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b088      	sub	sp, #32
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cee6:	2301      	movs	r3, #1
 800cee8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d077      	beq.n	800cfe0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d10a      	bne.n	800cf0e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800cef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefc:	f383 8811 	msr	BASEPRI, r3
 800cf00:	f3bf 8f6f 	isb	sy
 800cf04:	f3bf 8f4f 	dsb	sy
 800cf08:	60fb      	str	r3, [r7, #12]
}
 800cf0a:	bf00      	nop
 800cf0c:	e7fe      	b.n	800cf0c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cf0e:	69bb      	ldr	r3, [r7, #24]
 800cf10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf12:	683a      	ldr	r2, [r7, #0]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d902      	bls.n	800cf1e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	61fb      	str	r3, [r7, #28]
 800cf1c:	e002      	b.n	800cf24 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cf1e:	69bb      	ldr	r3, [r7, #24]
 800cf20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf22:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cf24:	69bb      	ldr	r3, [r7, #24]
 800cf26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf28:	69fa      	ldr	r2, [r7, #28]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d058      	beq.n	800cfe0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cf2e:	69bb      	ldr	r3, [r7, #24]
 800cf30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf32:	697a      	ldr	r2, [r7, #20]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d153      	bne.n	800cfe0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cf38:	4b2b      	ldr	r3, [pc, #172]	; (800cfe8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	69ba      	ldr	r2, [r7, #24]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d10a      	bne.n	800cf58 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800cf42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf46:	f383 8811 	msr	BASEPRI, r3
 800cf4a:	f3bf 8f6f 	isb	sy
 800cf4e:	f3bf 8f4f 	dsb	sy
 800cf52:	60bb      	str	r3, [r7, #8]
}
 800cf54:	bf00      	nop
 800cf56:	e7fe      	b.n	800cf56 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cf58:	69bb      	ldr	r3, [r7, #24]
 800cf5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf5c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cf5e:	69bb      	ldr	r3, [r7, #24]
 800cf60:	69fa      	ldr	r2, [r7, #28]
 800cf62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cf64:	69bb      	ldr	r3, [r7, #24]
 800cf66:	699b      	ldr	r3, [r3, #24]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	db04      	blt.n	800cf76 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf6c:	69fb      	ldr	r3, [r7, #28]
 800cf6e:	f1c3 0207 	rsb	r2, r3, #7
 800cf72:	69bb      	ldr	r3, [r7, #24]
 800cf74:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	6959      	ldr	r1, [r3, #20]
 800cf7a:	693a      	ldr	r2, [r7, #16]
 800cf7c:	4613      	mov	r3, r2
 800cf7e:	009b      	lsls	r3, r3, #2
 800cf80:	4413      	add	r3, r2
 800cf82:	009b      	lsls	r3, r3, #2
 800cf84:	4a19      	ldr	r2, [pc, #100]	; (800cfec <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800cf86:	4413      	add	r3, r2
 800cf88:	4299      	cmp	r1, r3
 800cf8a:	d129      	bne.n	800cfe0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf8c:	69bb      	ldr	r3, [r7, #24]
 800cf8e:	3304      	adds	r3, #4
 800cf90:	4618      	mov	r0, r3
 800cf92:	f7fe fb76 	bl	800b682 <uxListRemove>
 800cf96:	4603      	mov	r3, r0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d10a      	bne.n	800cfb2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800cf9c:	69bb      	ldr	r3, [r7, #24]
 800cf9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	fa02 f303 	lsl.w	r3, r2, r3
 800cfa6:	43da      	mvns	r2, r3
 800cfa8:	4b11      	ldr	r3, [pc, #68]	; (800cff0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4013      	ands	r3, r2
 800cfae:	4a10      	ldr	r2, [pc, #64]	; (800cff0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cfb0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cfb2:	69bb      	ldr	r3, [r7, #24]
 800cfb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	409a      	lsls	r2, r3
 800cfba:	4b0d      	ldr	r3, [pc, #52]	; (800cff0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	4313      	orrs	r3, r2
 800cfc0:	4a0b      	ldr	r2, [pc, #44]	; (800cff0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cfc2:	6013      	str	r3, [r2, #0]
 800cfc4:	69bb      	ldr	r3, [r7, #24]
 800cfc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfc8:	4613      	mov	r3, r2
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	4413      	add	r3, r2
 800cfce:	009b      	lsls	r3, r3, #2
 800cfd0:	4a06      	ldr	r2, [pc, #24]	; (800cfec <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800cfd2:	441a      	add	r2, r3
 800cfd4:	69bb      	ldr	r3, [r7, #24]
 800cfd6:	3304      	adds	r3, #4
 800cfd8:	4619      	mov	r1, r3
 800cfda:	4610      	mov	r0, r2
 800cfdc:	f7fe faf4 	bl	800b5c8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cfe0:	bf00      	nop
 800cfe2:	3720      	adds	r7, #32
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}
 800cfe8:	20000294 	.word	0x20000294
 800cfec:	20000298 	.word	0x20000298
 800cff0:	2000039c 	.word	0x2000039c

0800cff4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cff4:	b480      	push	{r7}
 800cff6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cff8:	4b07      	ldr	r3, [pc, #28]	; (800d018 <pvTaskIncrementMutexHeldCount+0x24>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d004      	beq.n	800d00a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d000:	4b05      	ldr	r3, [pc, #20]	; (800d018 <pvTaskIncrementMutexHeldCount+0x24>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d006:	3201      	adds	r2, #1
 800d008:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d00a:	4b03      	ldr	r3, [pc, #12]	; (800d018 <pvTaskIncrementMutexHeldCount+0x24>)
 800d00c:	681b      	ldr	r3, [r3, #0]
	}
 800d00e:	4618      	mov	r0, r3
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr
 800d018:	20000294 	.word	0x20000294

0800d01c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b084      	sub	sp, #16
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d026:	4b29      	ldr	r3, [pc, #164]	; (800d0cc <prvAddCurrentTaskToDelayedList+0xb0>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d02c:	4b28      	ldr	r3, [pc, #160]	; (800d0d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	3304      	adds	r3, #4
 800d032:	4618      	mov	r0, r3
 800d034:	f7fe fb25 	bl	800b682 <uxListRemove>
 800d038:	4603      	mov	r3, r0
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d10b      	bne.n	800d056 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d03e:	4b24      	ldr	r3, [pc, #144]	; (800d0d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d044:	2201      	movs	r2, #1
 800d046:	fa02 f303 	lsl.w	r3, r2, r3
 800d04a:	43da      	mvns	r2, r3
 800d04c:	4b21      	ldr	r3, [pc, #132]	; (800d0d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4013      	ands	r3, r2
 800d052:	4a20      	ldr	r2, [pc, #128]	; (800d0d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d054:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d05c:	d10a      	bne.n	800d074 <prvAddCurrentTaskToDelayedList+0x58>
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d007      	beq.n	800d074 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d064:	4b1a      	ldr	r3, [pc, #104]	; (800d0d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	3304      	adds	r3, #4
 800d06a:	4619      	mov	r1, r3
 800d06c:	481a      	ldr	r0, [pc, #104]	; (800d0d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d06e:	f7fe faab 	bl	800b5c8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d072:	e026      	b.n	800d0c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d074:	68fa      	ldr	r2, [r7, #12]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	4413      	add	r3, r2
 800d07a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d07c:	4b14      	ldr	r3, [pc, #80]	; (800d0d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	68ba      	ldr	r2, [r7, #8]
 800d082:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d084:	68ba      	ldr	r2, [r7, #8]
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	429a      	cmp	r2, r3
 800d08a:	d209      	bcs.n	800d0a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d08c:	4b13      	ldr	r3, [pc, #76]	; (800d0dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800d08e:	681a      	ldr	r2, [r3, #0]
 800d090:	4b0f      	ldr	r3, [pc, #60]	; (800d0d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	3304      	adds	r3, #4
 800d096:	4619      	mov	r1, r3
 800d098:	4610      	mov	r0, r2
 800d09a:	f7fe fab9 	bl	800b610 <vListInsert>
}
 800d09e:	e010      	b.n	800d0c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0a0:	4b0f      	ldr	r3, [pc, #60]	; (800d0e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	4b0a      	ldr	r3, [pc, #40]	; (800d0d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	3304      	adds	r3, #4
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	4610      	mov	r0, r2
 800d0ae:	f7fe faaf 	bl	800b610 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d0b2:	4b0c      	ldr	r3, [pc, #48]	; (800d0e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	68ba      	ldr	r2, [r7, #8]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d202      	bcs.n	800d0c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d0bc:	4a09      	ldr	r2, [pc, #36]	; (800d0e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	6013      	str	r3, [r2, #0]
}
 800d0c2:	bf00      	nop
 800d0c4:	3710      	adds	r7, #16
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	20000398 	.word	0x20000398
 800d0d0:	20000294 	.word	0x20000294
 800d0d4:	2000039c 	.word	0x2000039c
 800d0d8:	20000380 	.word	0x20000380
 800d0dc:	20000350 	.word	0x20000350
 800d0e0:	2000034c 	.word	0x2000034c
 800d0e4:	200003b4 	.word	0x200003b4

0800d0e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b085      	sub	sp, #20
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	3b04      	subs	r3, #4
 800d0f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d100:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	3b04      	subs	r3, #4
 800d106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	f023 0201 	bic.w	r2, r3, #1
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	3b04      	subs	r3, #4
 800d116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d118:	4a0c      	ldr	r2, [pc, #48]	; (800d14c <pxPortInitialiseStack+0x64>)
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	3b14      	subs	r3, #20
 800d122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	3b04      	subs	r3, #4
 800d12e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f06f 0202 	mvn.w	r2, #2
 800d136:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	3b20      	subs	r3, #32
 800d13c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d13e:	68fb      	ldr	r3, [r7, #12]
}
 800d140:	4618      	mov	r0, r3
 800d142:	3714      	adds	r7, #20
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr
 800d14c:	0800d151 	.word	0x0800d151

0800d150 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d150:	b480      	push	{r7}
 800d152:	b085      	sub	sp, #20
 800d154:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d156:	2300      	movs	r3, #0
 800d158:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d15a:	4b12      	ldr	r3, [pc, #72]	; (800d1a4 <prvTaskExitError+0x54>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d162:	d00a      	beq.n	800d17a <prvTaskExitError+0x2a>
	__asm volatile
 800d164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d168:	f383 8811 	msr	BASEPRI, r3
 800d16c:	f3bf 8f6f 	isb	sy
 800d170:	f3bf 8f4f 	dsb	sy
 800d174:	60fb      	str	r3, [r7, #12]
}
 800d176:	bf00      	nop
 800d178:	e7fe      	b.n	800d178 <prvTaskExitError+0x28>
	__asm volatile
 800d17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17e:	f383 8811 	msr	BASEPRI, r3
 800d182:	f3bf 8f6f 	isb	sy
 800d186:	f3bf 8f4f 	dsb	sy
 800d18a:	60bb      	str	r3, [r7, #8]
}
 800d18c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d18e:	bf00      	nop
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d0fc      	beq.n	800d190 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d196:	bf00      	nop
 800d198:	bf00      	nop
 800d19a:	3714      	adds	r7, #20
 800d19c:	46bd      	mov	sp, r7
 800d19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a2:	4770      	bx	lr
 800d1a4:	20000010 	.word	0x20000010
	...

0800d1b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d1b0:	4b07      	ldr	r3, [pc, #28]	; (800d1d0 <pxCurrentTCBConst2>)
 800d1b2:	6819      	ldr	r1, [r3, #0]
 800d1b4:	6808      	ldr	r0, [r1, #0]
 800d1b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ba:	f380 8809 	msr	PSP, r0
 800d1be:	f3bf 8f6f 	isb	sy
 800d1c2:	f04f 0000 	mov.w	r0, #0
 800d1c6:	f380 8811 	msr	BASEPRI, r0
 800d1ca:	4770      	bx	lr
 800d1cc:	f3af 8000 	nop.w

0800d1d0 <pxCurrentTCBConst2>:
 800d1d0:	20000294 	.word	0x20000294
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d1d4:	bf00      	nop
 800d1d6:	bf00      	nop

0800d1d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d1d8:	4808      	ldr	r0, [pc, #32]	; (800d1fc <prvPortStartFirstTask+0x24>)
 800d1da:	6800      	ldr	r0, [r0, #0]
 800d1dc:	6800      	ldr	r0, [r0, #0]
 800d1de:	f380 8808 	msr	MSP, r0
 800d1e2:	f04f 0000 	mov.w	r0, #0
 800d1e6:	f380 8814 	msr	CONTROL, r0
 800d1ea:	b662      	cpsie	i
 800d1ec:	b661      	cpsie	f
 800d1ee:	f3bf 8f4f 	dsb	sy
 800d1f2:	f3bf 8f6f 	isb	sy
 800d1f6:	df00      	svc	0
 800d1f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d1fa:	bf00      	nop
 800d1fc:	e000ed08 	.word	0xe000ed08

0800d200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b086      	sub	sp, #24
 800d204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d206:	4b46      	ldr	r3, [pc, #280]	; (800d320 <xPortStartScheduler+0x120>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	4a46      	ldr	r2, [pc, #280]	; (800d324 <xPortStartScheduler+0x124>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d10a      	bne.n	800d226 <xPortStartScheduler+0x26>
	__asm volatile
 800d210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d214:	f383 8811 	msr	BASEPRI, r3
 800d218:	f3bf 8f6f 	isb	sy
 800d21c:	f3bf 8f4f 	dsb	sy
 800d220:	613b      	str	r3, [r7, #16]
}
 800d222:	bf00      	nop
 800d224:	e7fe      	b.n	800d224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d226:	4b3e      	ldr	r3, [pc, #248]	; (800d320 <xPortStartScheduler+0x120>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	4a3f      	ldr	r2, [pc, #252]	; (800d328 <xPortStartScheduler+0x128>)
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d10a      	bne.n	800d246 <xPortStartScheduler+0x46>
	__asm volatile
 800d230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d234:	f383 8811 	msr	BASEPRI, r3
 800d238:	f3bf 8f6f 	isb	sy
 800d23c:	f3bf 8f4f 	dsb	sy
 800d240:	60fb      	str	r3, [r7, #12]
}
 800d242:	bf00      	nop
 800d244:	e7fe      	b.n	800d244 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d246:	4b39      	ldr	r3, [pc, #228]	; (800d32c <xPortStartScheduler+0x12c>)
 800d248:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	b2db      	uxtb	r3, r3
 800d250:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	22ff      	movs	r2, #255	; 0xff
 800d256:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	b2db      	uxtb	r3, r3
 800d25e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d260:	78fb      	ldrb	r3, [r7, #3]
 800d262:	b2db      	uxtb	r3, r3
 800d264:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d268:	b2da      	uxtb	r2, r3
 800d26a:	4b31      	ldr	r3, [pc, #196]	; (800d330 <xPortStartScheduler+0x130>)
 800d26c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d26e:	4b31      	ldr	r3, [pc, #196]	; (800d334 <xPortStartScheduler+0x134>)
 800d270:	2207      	movs	r2, #7
 800d272:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d274:	e009      	b.n	800d28a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d276:	4b2f      	ldr	r3, [pc, #188]	; (800d334 <xPortStartScheduler+0x134>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	3b01      	subs	r3, #1
 800d27c:	4a2d      	ldr	r2, [pc, #180]	; (800d334 <xPortStartScheduler+0x134>)
 800d27e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d280:	78fb      	ldrb	r3, [r7, #3]
 800d282:	b2db      	uxtb	r3, r3
 800d284:	005b      	lsls	r3, r3, #1
 800d286:	b2db      	uxtb	r3, r3
 800d288:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d28a:	78fb      	ldrb	r3, [r7, #3]
 800d28c:	b2db      	uxtb	r3, r3
 800d28e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d292:	2b80      	cmp	r3, #128	; 0x80
 800d294:	d0ef      	beq.n	800d276 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d296:	4b27      	ldr	r3, [pc, #156]	; (800d334 <xPortStartScheduler+0x134>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f1c3 0307 	rsb	r3, r3, #7
 800d29e:	2b04      	cmp	r3, #4
 800d2a0:	d00a      	beq.n	800d2b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a6:	f383 8811 	msr	BASEPRI, r3
 800d2aa:	f3bf 8f6f 	isb	sy
 800d2ae:	f3bf 8f4f 	dsb	sy
 800d2b2:	60bb      	str	r3, [r7, #8]
}
 800d2b4:	bf00      	nop
 800d2b6:	e7fe      	b.n	800d2b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d2b8:	4b1e      	ldr	r3, [pc, #120]	; (800d334 <xPortStartScheduler+0x134>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	021b      	lsls	r3, r3, #8
 800d2be:	4a1d      	ldr	r2, [pc, #116]	; (800d334 <xPortStartScheduler+0x134>)
 800d2c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d2c2:	4b1c      	ldr	r3, [pc, #112]	; (800d334 <xPortStartScheduler+0x134>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d2ca:	4a1a      	ldr	r2, [pc, #104]	; (800d334 <xPortStartScheduler+0x134>)
 800d2cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	b2da      	uxtb	r2, r3
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d2d6:	4b18      	ldr	r3, [pc, #96]	; (800d338 <xPortStartScheduler+0x138>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a17      	ldr	r2, [pc, #92]	; (800d338 <xPortStartScheduler+0x138>)
 800d2dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d2e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d2e2:	4b15      	ldr	r3, [pc, #84]	; (800d338 <xPortStartScheduler+0x138>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	4a14      	ldr	r2, [pc, #80]	; (800d338 <xPortStartScheduler+0x138>)
 800d2e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d2ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d2ee:	f000 f8dd 	bl	800d4ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d2f2:	4b12      	ldr	r3, [pc, #72]	; (800d33c <xPortStartScheduler+0x13c>)
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d2f8:	f000 f8fc 	bl	800d4f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d2fc:	4b10      	ldr	r3, [pc, #64]	; (800d340 <xPortStartScheduler+0x140>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4a0f      	ldr	r2, [pc, #60]	; (800d340 <xPortStartScheduler+0x140>)
 800d302:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d306:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d308:	f7ff ff66 	bl	800d1d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d30c:	f7ff fa8e 	bl	800c82c <vTaskSwitchContext>
	prvTaskExitError();
 800d310:	f7ff ff1e 	bl	800d150 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d314:	2300      	movs	r3, #0
}
 800d316:	4618      	mov	r0, r3
 800d318:	3718      	adds	r7, #24
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
 800d31e:	bf00      	nop
 800d320:	e000ed00 	.word	0xe000ed00
 800d324:	410fc271 	.word	0x410fc271
 800d328:	410fc270 	.word	0x410fc270
 800d32c:	e000e400 	.word	0xe000e400
 800d330:	200003c0 	.word	0x200003c0
 800d334:	200003c4 	.word	0x200003c4
 800d338:	e000ed20 	.word	0xe000ed20
 800d33c:	20000010 	.word	0x20000010
 800d340:	e000ef34 	.word	0xe000ef34

0800d344 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d344:	b480      	push	{r7}
 800d346:	b083      	sub	sp, #12
 800d348:	af00      	add	r7, sp, #0
	__asm volatile
 800d34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d34e:	f383 8811 	msr	BASEPRI, r3
 800d352:	f3bf 8f6f 	isb	sy
 800d356:	f3bf 8f4f 	dsb	sy
 800d35a:	607b      	str	r3, [r7, #4]
}
 800d35c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d35e:	4b0f      	ldr	r3, [pc, #60]	; (800d39c <vPortEnterCritical+0x58>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	3301      	adds	r3, #1
 800d364:	4a0d      	ldr	r2, [pc, #52]	; (800d39c <vPortEnterCritical+0x58>)
 800d366:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d368:	4b0c      	ldr	r3, [pc, #48]	; (800d39c <vPortEnterCritical+0x58>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2b01      	cmp	r3, #1
 800d36e:	d10f      	bne.n	800d390 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d370:	4b0b      	ldr	r3, [pc, #44]	; (800d3a0 <vPortEnterCritical+0x5c>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	b2db      	uxtb	r3, r3
 800d376:	2b00      	cmp	r3, #0
 800d378:	d00a      	beq.n	800d390 <vPortEnterCritical+0x4c>
	__asm volatile
 800d37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37e:	f383 8811 	msr	BASEPRI, r3
 800d382:	f3bf 8f6f 	isb	sy
 800d386:	f3bf 8f4f 	dsb	sy
 800d38a:	603b      	str	r3, [r7, #0]
}
 800d38c:	bf00      	nop
 800d38e:	e7fe      	b.n	800d38e <vPortEnterCritical+0x4a>
	}
}
 800d390:	bf00      	nop
 800d392:	370c      	adds	r7, #12
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr
 800d39c:	20000010 	.word	0x20000010
 800d3a0:	e000ed04 	.word	0xe000ed04

0800d3a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d3aa:	4b12      	ldr	r3, [pc, #72]	; (800d3f4 <vPortExitCritical+0x50>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d10a      	bne.n	800d3c8 <vPortExitCritical+0x24>
	__asm volatile
 800d3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b6:	f383 8811 	msr	BASEPRI, r3
 800d3ba:	f3bf 8f6f 	isb	sy
 800d3be:	f3bf 8f4f 	dsb	sy
 800d3c2:	607b      	str	r3, [r7, #4]
}
 800d3c4:	bf00      	nop
 800d3c6:	e7fe      	b.n	800d3c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d3c8:	4b0a      	ldr	r3, [pc, #40]	; (800d3f4 <vPortExitCritical+0x50>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	3b01      	subs	r3, #1
 800d3ce:	4a09      	ldr	r2, [pc, #36]	; (800d3f4 <vPortExitCritical+0x50>)
 800d3d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d3d2:	4b08      	ldr	r3, [pc, #32]	; (800d3f4 <vPortExitCritical+0x50>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d105      	bne.n	800d3e6 <vPortExitCritical+0x42>
 800d3da:	2300      	movs	r3, #0
 800d3dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	f383 8811 	msr	BASEPRI, r3
}
 800d3e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d3e6:	bf00      	nop
 800d3e8:	370c      	adds	r7, #12
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr
 800d3f2:	bf00      	nop
 800d3f4:	20000010 	.word	0x20000010
	...

0800d400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d400:	f3ef 8009 	mrs	r0, PSP
 800d404:	f3bf 8f6f 	isb	sy
 800d408:	4b15      	ldr	r3, [pc, #84]	; (800d460 <pxCurrentTCBConst>)
 800d40a:	681a      	ldr	r2, [r3, #0]
 800d40c:	f01e 0f10 	tst.w	lr, #16
 800d410:	bf08      	it	eq
 800d412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d41a:	6010      	str	r0, [r2, #0]
 800d41c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d420:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d424:	f380 8811 	msr	BASEPRI, r0
 800d428:	f3bf 8f4f 	dsb	sy
 800d42c:	f3bf 8f6f 	isb	sy
 800d430:	f7ff f9fc 	bl	800c82c <vTaskSwitchContext>
 800d434:	f04f 0000 	mov.w	r0, #0
 800d438:	f380 8811 	msr	BASEPRI, r0
 800d43c:	bc09      	pop	{r0, r3}
 800d43e:	6819      	ldr	r1, [r3, #0]
 800d440:	6808      	ldr	r0, [r1, #0]
 800d442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d446:	f01e 0f10 	tst.w	lr, #16
 800d44a:	bf08      	it	eq
 800d44c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d450:	f380 8809 	msr	PSP, r0
 800d454:	f3bf 8f6f 	isb	sy
 800d458:	4770      	bx	lr
 800d45a:	bf00      	nop
 800d45c:	f3af 8000 	nop.w

0800d460 <pxCurrentTCBConst>:
 800d460:	20000294 	.word	0x20000294
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d464:	bf00      	nop
 800d466:	bf00      	nop

0800d468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
	__asm volatile
 800d46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d472:	f383 8811 	msr	BASEPRI, r3
 800d476:	f3bf 8f6f 	isb	sy
 800d47a:	f3bf 8f4f 	dsb	sy
 800d47e:	607b      	str	r3, [r7, #4]
}
 800d480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d482:	f7ff f91b 	bl	800c6bc <xTaskIncrementTick>
 800d486:	4603      	mov	r3, r0
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d003      	beq.n	800d494 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d48c:	4b06      	ldr	r3, [pc, #24]	; (800d4a8 <SysTick_Handler+0x40>)
 800d48e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d492:	601a      	str	r2, [r3, #0]
 800d494:	2300      	movs	r3, #0
 800d496:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	f383 8811 	msr	BASEPRI, r3
}
 800d49e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d4a0:	bf00      	nop
 800d4a2:	3708      	adds	r7, #8
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}
 800d4a8:	e000ed04 	.word	0xe000ed04

0800d4ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d4b0:	4b0b      	ldr	r3, [pc, #44]	; (800d4e0 <vPortSetupTimerInterrupt+0x34>)
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d4b6:	4b0b      	ldr	r3, [pc, #44]	; (800d4e4 <vPortSetupTimerInterrupt+0x38>)
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d4bc:	4b0a      	ldr	r3, [pc, #40]	; (800d4e8 <vPortSetupTimerInterrupt+0x3c>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4a0a      	ldr	r2, [pc, #40]	; (800d4ec <vPortSetupTimerInterrupt+0x40>)
 800d4c2:	fba2 2303 	umull	r2, r3, r2, r3
 800d4c6:	099b      	lsrs	r3, r3, #6
 800d4c8:	4a09      	ldr	r2, [pc, #36]	; (800d4f0 <vPortSetupTimerInterrupt+0x44>)
 800d4ca:	3b01      	subs	r3, #1
 800d4cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d4ce:	4b04      	ldr	r3, [pc, #16]	; (800d4e0 <vPortSetupTimerInterrupt+0x34>)
 800d4d0:	2207      	movs	r2, #7
 800d4d2:	601a      	str	r2, [r3, #0]
}
 800d4d4:	bf00      	nop
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4dc:	4770      	bx	lr
 800d4de:	bf00      	nop
 800d4e0:	e000e010 	.word	0xe000e010
 800d4e4:	e000e018 	.word	0xe000e018
 800d4e8:	20000000 	.word	0x20000000
 800d4ec:	10624dd3 	.word	0x10624dd3
 800d4f0:	e000e014 	.word	0xe000e014

0800d4f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d4f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d504 <vPortEnableVFP+0x10>
 800d4f8:	6801      	ldr	r1, [r0, #0]
 800d4fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d4fe:	6001      	str	r1, [r0, #0]
 800d500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d502:	bf00      	nop
 800d504:	e000ed88 	.word	0xe000ed88

0800d508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d508:	b480      	push	{r7}
 800d50a:	b085      	sub	sp, #20
 800d50c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d50e:	f3ef 8305 	mrs	r3, IPSR
 800d512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	2b0f      	cmp	r3, #15
 800d518:	d914      	bls.n	800d544 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d51a:	4a17      	ldr	r2, [pc, #92]	; (800d578 <vPortValidateInterruptPriority+0x70>)
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	4413      	add	r3, r2
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d524:	4b15      	ldr	r3, [pc, #84]	; (800d57c <vPortValidateInterruptPriority+0x74>)
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	7afa      	ldrb	r2, [r7, #11]
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d20a      	bcs.n	800d544 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d532:	f383 8811 	msr	BASEPRI, r3
 800d536:	f3bf 8f6f 	isb	sy
 800d53a:	f3bf 8f4f 	dsb	sy
 800d53e:	607b      	str	r3, [r7, #4]
}
 800d540:	bf00      	nop
 800d542:	e7fe      	b.n	800d542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d544:	4b0e      	ldr	r3, [pc, #56]	; (800d580 <vPortValidateInterruptPriority+0x78>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d54c:	4b0d      	ldr	r3, [pc, #52]	; (800d584 <vPortValidateInterruptPriority+0x7c>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	429a      	cmp	r2, r3
 800d552:	d90a      	bls.n	800d56a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d558:	f383 8811 	msr	BASEPRI, r3
 800d55c:	f3bf 8f6f 	isb	sy
 800d560:	f3bf 8f4f 	dsb	sy
 800d564:	603b      	str	r3, [r7, #0]
}
 800d566:	bf00      	nop
 800d568:	e7fe      	b.n	800d568 <vPortValidateInterruptPriority+0x60>
	}
 800d56a:	bf00      	nop
 800d56c:	3714      	adds	r7, #20
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr
 800d576:	bf00      	nop
 800d578:	e000e3f0 	.word	0xe000e3f0
 800d57c:	200003c0 	.word	0x200003c0
 800d580:	e000ed0c 	.word	0xe000ed0c
 800d584:	200003c4 	.word	0x200003c4

0800d588 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b08a      	sub	sp, #40	; 0x28
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d590:	2300      	movs	r3, #0
 800d592:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d594:	f7fe ffe8 	bl	800c568 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d598:	4b5b      	ldr	r3, [pc, #364]	; (800d708 <pvPortMalloc+0x180>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d101      	bne.n	800d5a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d5a0:	f000 f920 	bl	800d7e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d5a4:	4b59      	ldr	r3, [pc, #356]	; (800d70c <pvPortMalloc+0x184>)
 800d5a6:	681a      	ldr	r2, [r3, #0]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	4013      	ands	r3, r2
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	f040 8093 	bne.w	800d6d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d01d      	beq.n	800d5f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d5b8:	2208      	movs	r2, #8
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	4413      	add	r3, r2
 800d5be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f003 0307 	and.w	r3, r3, #7
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d014      	beq.n	800d5f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f023 0307 	bic.w	r3, r3, #7
 800d5d0:	3308      	adds	r3, #8
 800d5d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f003 0307 	and.w	r3, r3, #7
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d00a      	beq.n	800d5f4 <pvPortMalloc+0x6c>
	__asm volatile
 800d5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e2:	f383 8811 	msr	BASEPRI, r3
 800d5e6:	f3bf 8f6f 	isb	sy
 800d5ea:	f3bf 8f4f 	dsb	sy
 800d5ee:	617b      	str	r3, [r7, #20]
}
 800d5f0:	bf00      	nop
 800d5f2:	e7fe      	b.n	800d5f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d06e      	beq.n	800d6d8 <pvPortMalloc+0x150>
 800d5fa:	4b45      	ldr	r3, [pc, #276]	; (800d710 <pvPortMalloc+0x188>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	687a      	ldr	r2, [r7, #4]
 800d600:	429a      	cmp	r2, r3
 800d602:	d869      	bhi.n	800d6d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d604:	4b43      	ldr	r3, [pc, #268]	; (800d714 <pvPortMalloc+0x18c>)
 800d606:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d608:	4b42      	ldr	r3, [pc, #264]	; (800d714 <pvPortMalloc+0x18c>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d60e:	e004      	b.n	800d61a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d612:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	429a      	cmp	r2, r3
 800d622:	d903      	bls.n	800d62c <pvPortMalloc+0xa4>
 800d624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d1f1      	bne.n	800d610 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d62c:	4b36      	ldr	r3, [pc, #216]	; (800d708 <pvPortMalloc+0x180>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d632:	429a      	cmp	r2, r3
 800d634:	d050      	beq.n	800d6d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d636:	6a3b      	ldr	r3, [r7, #32]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	2208      	movs	r2, #8
 800d63c:	4413      	add	r3, r2
 800d63e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d642:	681a      	ldr	r2, [r3, #0]
 800d644:	6a3b      	ldr	r3, [r7, #32]
 800d646:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d64a:	685a      	ldr	r2, [r3, #4]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	1ad2      	subs	r2, r2, r3
 800d650:	2308      	movs	r3, #8
 800d652:	005b      	lsls	r3, r3, #1
 800d654:	429a      	cmp	r2, r3
 800d656:	d91f      	bls.n	800d698 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	4413      	add	r3, r2
 800d65e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	f003 0307 	and.w	r3, r3, #7
 800d666:	2b00      	cmp	r3, #0
 800d668:	d00a      	beq.n	800d680 <pvPortMalloc+0xf8>
	__asm volatile
 800d66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66e:	f383 8811 	msr	BASEPRI, r3
 800d672:	f3bf 8f6f 	isb	sy
 800d676:	f3bf 8f4f 	dsb	sy
 800d67a:	613b      	str	r3, [r7, #16]
}
 800d67c:	bf00      	nop
 800d67e:	e7fe      	b.n	800d67e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d682:	685a      	ldr	r2, [r3, #4]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	1ad2      	subs	r2, r2, r3
 800d688:	69bb      	ldr	r3, [r7, #24]
 800d68a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d68e:	687a      	ldr	r2, [r7, #4]
 800d690:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d692:	69b8      	ldr	r0, [r7, #24]
 800d694:	f000 f908 	bl	800d8a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d698:	4b1d      	ldr	r3, [pc, #116]	; (800d710 <pvPortMalloc+0x188>)
 800d69a:	681a      	ldr	r2, [r3, #0]
 800d69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69e:	685b      	ldr	r3, [r3, #4]
 800d6a0:	1ad3      	subs	r3, r2, r3
 800d6a2:	4a1b      	ldr	r2, [pc, #108]	; (800d710 <pvPortMalloc+0x188>)
 800d6a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d6a6:	4b1a      	ldr	r3, [pc, #104]	; (800d710 <pvPortMalloc+0x188>)
 800d6a8:	681a      	ldr	r2, [r3, #0]
 800d6aa:	4b1b      	ldr	r3, [pc, #108]	; (800d718 <pvPortMalloc+0x190>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d203      	bcs.n	800d6ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d6b2:	4b17      	ldr	r3, [pc, #92]	; (800d710 <pvPortMalloc+0x188>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	4a18      	ldr	r2, [pc, #96]	; (800d718 <pvPortMalloc+0x190>)
 800d6b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6bc:	685a      	ldr	r2, [r3, #4]
 800d6be:	4b13      	ldr	r3, [pc, #76]	; (800d70c <pvPortMalloc+0x184>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	431a      	orrs	r2, r3
 800d6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d6ce:	4b13      	ldr	r3, [pc, #76]	; (800d71c <pvPortMalloc+0x194>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	4a11      	ldr	r2, [pc, #68]	; (800d71c <pvPortMalloc+0x194>)
 800d6d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d6d8:	f7fe ff54 	bl	800c584 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6dc:	69fb      	ldr	r3, [r7, #28]
 800d6de:	f003 0307 	and.w	r3, r3, #7
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d00a      	beq.n	800d6fc <pvPortMalloc+0x174>
	__asm volatile
 800d6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ea:	f383 8811 	msr	BASEPRI, r3
 800d6ee:	f3bf 8f6f 	isb	sy
 800d6f2:	f3bf 8f4f 	dsb	sy
 800d6f6:	60fb      	str	r3, [r7, #12]
}
 800d6f8:	bf00      	nop
 800d6fa:	e7fe      	b.n	800d6fa <pvPortMalloc+0x172>
	return pvReturn;
 800d6fc:	69fb      	ldr	r3, [r7, #28]
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3728      	adds	r7, #40	; 0x28
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	20003fd0 	.word	0x20003fd0
 800d70c:	20003fe4 	.word	0x20003fe4
 800d710:	20003fd4 	.word	0x20003fd4
 800d714:	20003fc8 	.word	0x20003fc8
 800d718:	20003fd8 	.word	0x20003fd8
 800d71c:	20003fdc 	.word	0x20003fdc

0800d720 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b086      	sub	sp, #24
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d04d      	beq.n	800d7ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d732:	2308      	movs	r3, #8
 800d734:	425b      	negs	r3, r3
 800d736:	697a      	ldr	r2, [r7, #20]
 800d738:	4413      	add	r3, r2
 800d73a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	685a      	ldr	r2, [r3, #4]
 800d744:	4b24      	ldr	r3, [pc, #144]	; (800d7d8 <vPortFree+0xb8>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4013      	ands	r3, r2
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d10a      	bne.n	800d764 <vPortFree+0x44>
	__asm volatile
 800d74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d752:	f383 8811 	msr	BASEPRI, r3
 800d756:	f3bf 8f6f 	isb	sy
 800d75a:	f3bf 8f4f 	dsb	sy
 800d75e:	60fb      	str	r3, [r7, #12]
}
 800d760:	bf00      	nop
 800d762:	e7fe      	b.n	800d762 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d00a      	beq.n	800d782 <vPortFree+0x62>
	__asm volatile
 800d76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d770:	f383 8811 	msr	BASEPRI, r3
 800d774:	f3bf 8f6f 	isb	sy
 800d778:	f3bf 8f4f 	dsb	sy
 800d77c:	60bb      	str	r3, [r7, #8]
}
 800d77e:	bf00      	nop
 800d780:	e7fe      	b.n	800d780 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	685a      	ldr	r2, [r3, #4]
 800d786:	4b14      	ldr	r3, [pc, #80]	; (800d7d8 <vPortFree+0xb8>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4013      	ands	r3, r2
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d01e      	beq.n	800d7ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d11a      	bne.n	800d7ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d798:	693b      	ldr	r3, [r7, #16]
 800d79a:	685a      	ldr	r2, [r3, #4]
 800d79c:	4b0e      	ldr	r3, [pc, #56]	; (800d7d8 <vPortFree+0xb8>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	43db      	mvns	r3, r3
 800d7a2:	401a      	ands	r2, r3
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d7a8:	f7fe fede 	bl	800c568 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	685a      	ldr	r2, [r3, #4]
 800d7b0:	4b0a      	ldr	r3, [pc, #40]	; (800d7dc <vPortFree+0xbc>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	4413      	add	r3, r2
 800d7b6:	4a09      	ldr	r2, [pc, #36]	; (800d7dc <vPortFree+0xbc>)
 800d7b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d7ba:	6938      	ldr	r0, [r7, #16]
 800d7bc:	f000 f874 	bl	800d8a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d7c0:	4b07      	ldr	r3, [pc, #28]	; (800d7e0 <vPortFree+0xc0>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	4a06      	ldr	r2, [pc, #24]	; (800d7e0 <vPortFree+0xc0>)
 800d7c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d7ca:	f7fe fedb 	bl	800c584 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d7ce:	bf00      	nop
 800d7d0:	3718      	adds	r7, #24
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	20003fe4 	.word	0x20003fe4
 800d7dc:	20003fd4 	.word	0x20003fd4
 800d7e0:	20003fe0 	.word	0x20003fe0

0800d7e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b085      	sub	sp, #20
 800d7e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d7ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d7ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d7f0:	4b27      	ldr	r3, [pc, #156]	; (800d890 <prvHeapInit+0xac>)
 800d7f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	f003 0307 	and.w	r3, r3, #7
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d00c      	beq.n	800d818 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	3307      	adds	r3, #7
 800d802:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f023 0307 	bic.w	r3, r3, #7
 800d80a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d80c:	68ba      	ldr	r2, [r7, #8]
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	1ad3      	subs	r3, r2, r3
 800d812:	4a1f      	ldr	r2, [pc, #124]	; (800d890 <prvHeapInit+0xac>)
 800d814:	4413      	add	r3, r2
 800d816:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d81c:	4a1d      	ldr	r2, [pc, #116]	; (800d894 <prvHeapInit+0xb0>)
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d822:	4b1c      	ldr	r3, [pc, #112]	; (800d894 <prvHeapInit+0xb0>)
 800d824:	2200      	movs	r2, #0
 800d826:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	68ba      	ldr	r2, [r7, #8]
 800d82c:	4413      	add	r3, r2
 800d82e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d830:	2208      	movs	r2, #8
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	1a9b      	subs	r3, r3, r2
 800d836:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f023 0307 	bic.w	r3, r3, #7
 800d83e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	4a15      	ldr	r2, [pc, #84]	; (800d898 <prvHeapInit+0xb4>)
 800d844:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d846:	4b14      	ldr	r3, [pc, #80]	; (800d898 <prvHeapInit+0xb4>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	2200      	movs	r2, #0
 800d84c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d84e:	4b12      	ldr	r3, [pc, #72]	; (800d898 <prvHeapInit+0xb4>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2200      	movs	r2, #0
 800d854:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	68fa      	ldr	r2, [r7, #12]
 800d85e:	1ad2      	subs	r2, r2, r3
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d864:	4b0c      	ldr	r3, [pc, #48]	; (800d898 <prvHeapInit+0xb4>)
 800d866:	681a      	ldr	r2, [r3, #0]
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	4a0a      	ldr	r2, [pc, #40]	; (800d89c <prvHeapInit+0xb8>)
 800d872:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	4a09      	ldr	r2, [pc, #36]	; (800d8a0 <prvHeapInit+0xbc>)
 800d87a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d87c:	4b09      	ldr	r3, [pc, #36]	; (800d8a4 <prvHeapInit+0xc0>)
 800d87e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d882:	601a      	str	r2, [r3, #0]
}
 800d884:	bf00      	nop
 800d886:	3714      	adds	r7, #20
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr
 800d890:	200003c8 	.word	0x200003c8
 800d894:	20003fc8 	.word	0x20003fc8
 800d898:	20003fd0 	.word	0x20003fd0
 800d89c:	20003fd8 	.word	0x20003fd8
 800d8a0:	20003fd4 	.word	0x20003fd4
 800d8a4:	20003fe4 	.word	0x20003fe4

0800d8a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b085      	sub	sp, #20
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d8b0:	4b28      	ldr	r3, [pc, #160]	; (800d954 <prvInsertBlockIntoFreeList+0xac>)
 800d8b2:	60fb      	str	r3, [r7, #12]
 800d8b4:	e002      	b.n	800d8bc <prvInsertBlockIntoFreeList+0x14>
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	60fb      	str	r3, [r7, #12]
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	687a      	ldr	r2, [r7, #4]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d8f7      	bhi.n	800d8b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	68ba      	ldr	r2, [r7, #8]
 800d8d0:	4413      	add	r3, r2
 800d8d2:	687a      	ldr	r2, [r7, #4]
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d108      	bne.n	800d8ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	685a      	ldr	r2, [r3, #4]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	441a      	add	r2, r3
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	68ba      	ldr	r2, [r7, #8]
 800d8f4:	441a      	add	r2, r3
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d118      	bne.n	800d930 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	681a      	ldr	r2, [r3, #0]
 800d902:	4b15      	ldr	r3, [pc, #84]	; (800d958 <prvInsertBlockIntoFreeList+0xb0>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	429a      	cmp	r2, r3
 800d908:	d00d      	beq.n	800d926 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	685a      	ldr	r2, [r3, #4]
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	441a      	add	r2, r3
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	681a      	ldr	r2, [r3, #0]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	601a      	str	r2, [r3, #0]
 800d924:	e008      	b.n	800d938 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d926:	4b0c      	ldr	r3, [pc, #48]	; (800d958 <prvInsertBlockIntoFreeList+0xb0>)
 800d928:	681a      	ldr	r2, [r3, #0]
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	601a      	str	r2, [r3, #0]
 800d92e:	e003      	b.n	800d938 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681a      	ldr	r2, [r3, #0]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d938:	68fa      	ldr	r2, [r7, #12]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d002      	beq.n	800d946 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	687a      	ldr	r2, [r7, #4]
 800d944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d946:	bf00      	nop
 800d948:	3714      	adds	r7, #20
 800d94a:	46bd      	mov	sp, r7
 800d94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop
 800d954:	20003fc8 	.word	0x20003fc8
 800d958:	20003fd0 	.word	0x20003fd0

0800d95c <__libc_init_array>:
 800d95c:	b570      	push	{r4, r5, r6, lr}
 800d95e:	4d0d      	ldr	r5, [pc, #52]	; (800d994 <__libc_init_array+0x38>)
 800d960:	4c0d      	ldr	r4, [pc, #52]	; (800d998 <__libc_init_array+0x3c>)
 800d962:	1b64      	subs	r4, r4, r5
 800d964:	10a4      	asrs	r4, r4, #2
 800d966:	2600      	movs	r6, #0
 800d968:	42a6      	cmp	r6, r4
 800d96a:	d109      	bne.n	800d980 <__libc_init_array+0x24>
 800d96c:	4d0b      	ldr	r5, [pc, #44]	; (800d99c <__libc_init_array+0x40>)
 800d96e:	4c0c      	ldr	r4, [pc, #48]	; (800d9a0 <__libc_init_array+0x44>)
 800d970:	f000 f82e 	bl	800d9d0 <_init>
 800d974:	1b64      	subs	r4, r4, r5
 800d976:	10a4      	asrs	r4, r4, #2
 800d978:	2600      	movs	r6, #0
 800d97a:	42a6      	cmp	r6, r4
 800d97c:	d105      	bne.n	800d98a <__libc_init_array+0x2e>
 800d97e:	bd70      	pop	{r4, r5, r6, pc}
 800d980:	f855 3b04 	ldr.w	r3, [r5], #4
 800d984:	4798      	blx	r3
 800d986:	3601      	adds	r6, #1
 800d988:	e7ee      	b.n	800d968 <__libc_init_array+0xc>
 800d98a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d98e:	4798      	blx	r3
 800d990:	3601      	adds	r6, #1
 800d992:	e7f2      	b.n	800d97a <__libc_init_array+0x1e>
 800d994:	0800dae0 	.word	0x0800dae0
 800d998:	0800dae0 	.word	0x0800dae0
 800d99c:	0800dae0 	.word	0x0800dae0
 800d9a0:	0800dae4 	.word	0x0800dae4

0800d9a4 <memcpy>:
 800d9a4:	440a      	add	r2, r1
 800d9a6:	4291      	cmp	r1, r2
 800d9a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d9ac:	d100      	bne.n	800d9b0 <memcpy+0xc>
 800d9ae:	4770      	bx	lr
 800d9b0:	b510      	push	{r4, lr}
 800d9b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9ba:	4291      	cmp	r1, r2
 800d9bc:	d1f9      	bne.n	800d9b2 <memcpy+0xe>
 800d9be:	bd10      	pop	{r4, pc}

0800d9c0 <memset>:
 800d9c0:	4402      	add	r2, r0
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d100      	bne.n	800d9ca <memset+0xa>
 800d9c8:	4770      	bx	lr
 800d9ca:	f803 1b01 	strb.w	r1, [r3], #1
 800d9ce:	e7f9      	b.n	800d9c4 <memset+0x4>

0800d9d0 <_init>:
 800d9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9d2:	bf00      	nop
 800d9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9d6:	bc08      	pop	{r3}
 800d9d8:	469e      	mov	lr, r3
 800d9da:	4770      	bx	lr

0800d9dc <_fini>:
 800d9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9de:	bf00      	nop
 800d9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9e2:	bc08      	pop	{r3}
 800d9e4:	469e      	mov	lr, r3
 800d9e6:	4770      	bx	lr
