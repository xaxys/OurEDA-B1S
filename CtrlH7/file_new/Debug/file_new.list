
file_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000daf8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800dd98  0800dd98  0001dd98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800de8c  0800de8c  0001de8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800de94  0800de94  0001de94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800de98  0800de98  0001de98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  0800de9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004920  20000014  0800deb0  00020014  2**2
                  ALLOC
  8 .RAM_D1       00000150  24000000  0800deb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 ._user_heap_stack 00000604  20004934  20004934  00034934  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002cb56  00000000  00000000  0003017e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004aa4  00000000  00000000  0005ccd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000017b0  00000000  00000000  00061778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001638  00000000  00000000  00062f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000396ac  00000000  00000000  00064560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001df75  00000000  00000000  0009dc0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016c1d5  00000000  00000000  000bbb81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00227d56  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000062c4  00000000  00000000  00227dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000014 	.word	0x20000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dd80 	.word	0x0800dd80

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000018 	.word	0x20000018
 80002dc:	0800dd80 	.word	0x0800dd80

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <CaptureDownData>:
/**
 * @brief 捕获上位机向下位机发送的指令
 * @return DownDataDef 上位机向下位机发送的指令
 */
DownDataDef CaptureDownData(void)
{
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b090      	sub	sp, #64	; 0x40
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	DownDataDef CaptureData;

	CaptureData.HeadOfData = (DownDataReceive[0]);
 80005e0:	4b4d      	ldr	r3, [pc, #308]	; (8000718 <CaptureDownData+0x140>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	733b      	strb	r3, [r7, #12]
	CaptureData.StraightNum = ((DownDataReceive[1] << 8) | DownDataReceive[2]);
 80005e6:	4b4c      	ldr	r3, [pc, #304]	; (8000718 <CaptureDownData+0x140>)
 80005e8:	785b      	ldrb	r3, [r3, #1]
 80005ea:	021b      	lsls	r3, r3, #8
 80005ec:	b21a      	sxth	r2, r3
 80005ee:	4b4a      	ldr	r3, [pc, #296]	; (8000718 <CaptureDownData+0x140>)
 80005f0:	789b      	ldrb	r3, [r3, #2]
 80005f2:	b21b      	sxth	r3, r3
 80005f4:	4313      	orrs	r3, r2
 80005f6:	b21b      	sxth	r3, r3
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	81fb      	strh	r3, [r7, #14]
	CaptureData.RotateNum = ((DownDataReceive[3] << 8) | DownDataReceive[4]);
 80005fc:	4b46      	ldr	r3, [pc, #280]	; (8000718 <CaptureDownData+0x140>)
 80005fe:	78db      	ldrb	r3, [r3, #3]
 8000600:	021b      	lsls	r3, r3, #8
 8000602:	b21a      	sxth	r2, r3
 8000604:	4b44      	ldr	r3, [pc, #272]	; (8000718 <CaptureDownData+0x140>)
 8000606:	791b      	ldrb	r3, [r3, #4]
 8000608:	b21b      	sxth	r3, r3
 800060a:	4313      	orrs	r3, r2
 800060c:	b21b      	sxth	r3, r3
 800060e:	b29b      	uxth	r3, r3
 8000610:	823b      	strh	r3, [r7, #16]
	CaptureData.VerticalNum = ((DownDataReceive[5] << 8) | DownDataReceive[6]);
 8000612:	4b41      	ldr	r3, [pc, #260]	; (8000718 <CaptureDownData+0x140>)
 8000614:	795b      	ldrb	r3, [r3, #5]
 8000616:	021b      	lsls	r3, r3, #8
 8000618:	b21a      	sxth	r2, r3
 800061a:	4b3f      	ldr	r3, [pc, #252]	; (8000718 <CaptureDownData+0x140>)
 800061c:	799b      	ldrb	r3, [r3, #6]
 800061e:	b21b      	sxth	r3, r3
 8000620:	4313      	orrs	r3, r2
 8000622:	b21b      	sxth	r3, r3
 8000624:	b29b      	uxth	r3, r3
 8000626:	827b      	strh	r3, [r7, #18]
	CaptureData.LightPWM = ((DownDataReceive[7] << 8) | DownDataReceive[8]);
 8000628:	4b3b      	ldr	r3, [pc, #236]	; (8000718 <CaptureDownData+0x140>)
 800062a:	79db      	ldrb	r3, [r3, #7]
 800062c:	021b      	lsls	r3, r3, #8
 800062e:	4a3a      	ldr	r2, [pc, #232]	; (8000718 <CaptureDownData+0x140>)
 8000630:	7a12      	ldrb	r2, [r2, #8]
 8000632:	4313      	orrs	r3, r2
 8000634:	617b      	str	r3, [r7, #20]
	CaptureData.THPWM = ((DownDataReceive[9] << 8) | DownDataReceive[10]);
 8000636:	4b38      	ldr	r3, [pc, #224]	; (8000718 <CaptureDownData+0x140>)
 8000638:	7a5b      	ldrb	r3, [r3, #9]
 800063a:	021b      	lsls	r3, r3, #8
 800063c:	4a36      	ldr	r2, [pc, #216]	; (8000718 <CaptureDownData+0x140>)
 800063e:	7a92      	ldrb	r2, [r2, #10]
 8000640:	4313      	orrs	r3, r2
 8000642:	61bb      	str	r3, [r7, #24]
	CaptureData.TranspPWM = ((DownDataReceive[11] << 8) | DownDataReceive[12]);
 8000644:	4b34      	ldr	r3, [pc, #208]	; (8000718 <CaptureDownData+0x140>)
 8000646:	7adb      	ldrb	r3, [r3, #11]
 8000648:	021b      	lsls	r3, r3, #8
 800064a:	4a33      	ldr	r2, [pc, #204]	; (8000718 <CaptureDownData+0x140>)
 800064c:	7b12      	ldrb	r2, [r2, #12]
 800064e:	4313      	orrs	r3, r2
 8000650:	61fb      	str	r3, [r7, #28]
	CaptureData.ArmPWM[0] = ((DownDataReceive[13] << 8) | DownDataReceive[14]);
 8000652:	4b31      	ldr	r3, [pc, #196]	; (8000718 <CaptureDownData+0x140>)
 8000654:	7b5b      	ldrb	r3, [r3, #13]
 8000656:	021b      	lsls	r3, r3, #8
 8000658:	4a2f      	ldr	r2, [pc, #188]	; (8000718 <CaptureDownData+0x140>)
 800065a:	7b92      	ldrb	r2, [r2, #14]
 800065c:	4313      	orrs	r3, r2
 800065e:	623b      	str	r3, [r7, #32]
	CaptureData.ArmPWM[1] = ((DownDataReceive[15] << 8) | DownDataReceive[16]);
 8000660:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <CaptureDownData+0x140>)
 8000662:	7bdb      	ldrb	r3, [r3, #15]
 8000664:	021b      	lsls	r3, r3, #8
 8000666:	4a2c      	ldr	r2, [pc, #176]	; (8000718 <CaptureDownData+0x140>)
 8000668:	7c12      	ldrb	r2, [r2, #16]
 800066a:	4313      	orrs	r3, r2
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
	CaptureData.ArmPWM[2] = ((DownDataReceive[17] << 8) | DownDataReceive[18]);
 800066e:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <CaptureDownData+0x140>)
 8000670:	7c5b      	ldrb	r3, [r3, #17]
 8000672:	021b      	lsls	r3, r3, #8
 8000674:	4a28      	ldr	r2, [pc, #160]	; (8000718 <CaptureDownData+0x140>)
 8000676:	7c92      	ldrb	r2, [r2, #18]
 8000678:	4313      	orrs	r3, r2
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28
	CaptureData.ArmPWM[3] = ((DownDataReceive[19] << 8) | DownDataReceive[20]);
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <CaptureDownData+0x140>)
 800067e:	7cdb      	ldrb	r3, [r3, #19]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	4a25      	ldr	r2, [pc, #148]	; (8000718 <CaptureDownData+0x140>)
 8000684:	7d12      	ldrb	r2, [r2, #20]
 8000686:	4313      	orrs	r3, r2
 8000688:	62fb      	str	r3, [r7, #44]	; 0x2c
	CaptureData.ArmPWM[4] = ((DownDataReceive[21] << 8) | DownDataReceive[22]);
 800068a:	4b23      	ldr	r3, [pc, #140]	; (8000718 <CaptureDownData+0x140>)
 800068c:	7d5b      	ldrb	r3, [r3, #21]
 800068e:	021b      	lsls	r3, r3, #8
 8000690:	4a21      	ldr	r2, [pc, #132]	; (8000718 <CaptureDownData+0x140>)
 8000692:	7d92      	ldrb	r2, [r2, #22]
 8000694:	4313      	orrs	r3, r2
 8000696:	633b      	str	r3, [r7, #48]	; 0x30
	CaptureData.ArmPWM[5] = ((DownDataReceive[23] << 8) | DownDataReceive[24]);
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <CaptureDownData+0x140>)
 800069a:	7ddb      	ldrb	r3, [r3, #23]
 800069c:	021b      	lsls	r3, r3, #8
 800069e:	4a1e      	ldr	r2, [pc, #120]	; (8000718 <CaptureDownData+0x140>)
 80006a0:	7e12      	ldrb	r2, [r2, #24]
 80006a2:	4313      	orrs	r3, r2
 80006a4:	637b      	str	r3, [r7, #52]	; 0x34
	CaptureData.ResPWM = ((DownDataReceive[25] << 8) | DownDataReceive[26]);
 80006a6:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <CaptureDownData+0x140>)
 80006a8:	7e5b      	ldrb	r3, [r3, #25]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	4a1a      	ldr	r2, [pc, #104]	; (8000718 <CaptureDownData+0x140>)
 80006ae:	7e92      	ldrb	r2, [r2, #26]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	63bb      	str	r3, [r7, #56]	; 0x38
#ifdef CtrlSide
	CaptureData.Mode = (DownDataReceive[27]); //方便数据下传与中途获取
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <CaptureDownData+0x140>)
 80006b6:	7edb      	ldrb	r3, [r3, #27]
 80006b8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	CaptureData.Relay = (DownDataReceive[27]);
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <CaptureDownData+0x140>)
 80006be:	7edb      	ldrb	r3, [r3, #27]
 80006c0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
#else
	CaptureData.Mode = (DownDataReceive[27] & 0b0001);
	CaptureData.Relay = (DownDataReceive[27] & 0b1000);
#endif
#endif
	CaptureData.IdTest = IdTest(DownDataReceive, 0, 44, 28);
 80006c4:	231c      	movs	r3, #28
 80006c6:	222c      	movs	r2, #44	; 0x2c
 80006c8:	2100      	movs	r1, #0
 80006ca:	4813      	ldr	r0, [pc, #76]	; (8000718 <CaptureDownData+0x140>)
 80006cc:	f000 fb06 	bl	8000cdc <IdTest>
 80006d0:	4603      	mov	r3, r0
 80006d2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	CaptureData.EndOfData = (DownDataReceive[29]);
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <CaptureDownData+0x140>)
 80006d8:	7f5b      	ldrb	r3, [r3, #29]
 80006da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	__HAL_UART_ENABLE_IT(&Up_UART, UART_IT_IDLE);
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <CaptureDownData+0x144>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <CaptureDownData+0x144>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f042 0210 	orr.w	r2, r2, #16
 80006ec:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Up_UART, DownDataReceive, Up_UART_RXLen);
 80006ee:	221f      	movs	r2, #31
 80006f0:	4909      	ldr	r1, [pc, #36]	; (8000718 <CaptureDownData+0x140>)
 80006f2:	480a      	ldr	r0, [pc, #40]	; (800071c <CaptureDownData+0x144>)
 80006f4:	f009 f9c0 	bl	8009a78 <HAL_UART_Receive_DMA>
	return CaptureData;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	461d      	mov	r5, r3
 80006fc:	f107 040c 	add.w	r4, r7, #12
 8000700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800070a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800070c:	6823      	ldr	r3, [r4, #0]
 800070e:	602b      	str	r3, [r5, #0]
}
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	3740      	adds	r7, #64	; 0x40
 8000714:	46bd      	mov	sp, r7
 8000716:	bdb0      	pop	{r4, r5, r7, pc}
 8000718:	24000000 	.word	0x24000000
 800071c:	20004490 	.word	0x20004490

08000720 <SendUpData>:
/**
 * @brief 向上位机发送数据
 * @param  SendData         待发送的数据结构体
 */
void SendUpData(UpDataDef SendData)
{
 8000720:	b084      	sub	sp, #16
 8000722:	b580      	push	{r7, lr}
 8000724:	af00      	add	r7, sp, #0
 8000726:	f107 0c08 	add.w	ip, r7, #8
 800072a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	UpDataSend[0] = 0x25;
 800072e:	4b80      	ldr	r3, [pc, #512]	; (8000930 <SendUpData+0x210>)
 8000730:	2225      	movs	r2, #37	; 0x25
 8000732:	701a      	strb	r2, [r3, #0]
	UpDataSend[1] = ((SendData.WaterDetect) | (SendData.CabinNum));
 8000734:	7a7a      	ldrb	r2, [r7, #9]
 8000736:	7a3b      	ldrb	r3, [r7, #8]
 8000738:	4313      	orrs	r3, r2
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b7c      	ldr	r3, [pc, #496]	; (8000930 <SendUpData+0x210>)
 800073e:	705a      	strb	r2, [r3, #1]
	UpDataSend[2] = SendData.CabinTemperature >> 8;
 8000740:	897b      	ldrh	r3, [r7, #10]
 8000742:	0a1b      	lsrs	r3, r3, #8
 8000744:	b29b      	uxth	r3, r3
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4b79      	ldr	r3, [pc, #484]	; (8000930 <SendUpData+0x210>)
 800074a:	709a      	strb	r2, [r3, #2]
	UpDataSend[3] = SendData.CabinTemperature;
 800074c:	897b      	ldrh	r3, [r7, #10]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	4b77      	ldr	r3, [pc, #476]	; (8000930 <SendUpData+0x210>)
 8000752:	70da      	strb	r2, [r3, #3]
	UpDataSend[4] = SendData.CabinBaro >> 16;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	0c1b      	lsrs	r3, r3, #16
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b75      	ldr	r3, [pc, #468]	; (8000930 <SendUpData+0x210>)
 800075c:	711a      	strb	r2, [r3, #4]
	UpDataSend[5] = SendData.CabinBaro >> 8;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	0a1b      	lsrs	r3, r3, #8
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b72      	ldr	r3, [pc, #456]	; (8000930 <SendUpData+0x210>)
 8000766:	715a      	strb	r2, [r3, #5]
	UpDataSend[6] = SendData.CabinBaro >> 24;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	0e1b      	lsrs	r3, r3, #24
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4b70      	ldr	r3, [pc, #448]	; (8000930 <SendUpData+0x210>)
 8000770:	719a      	strb	r2, [r3, #6]
	UpDataSend[7] = SendData.CabinBaro;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b6e      	ldr	r3, [pc, #440]	; (8000930 <SendUpData+0x210>)
 8000778:	71da      	strb	r2, [r3, #7]
	UpDataSend[8] = SendData.CabinHum;
 800077a:	8a3b      	ldrh	r3, [r7, #16]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b6c      	ldr	r3, [pc, #432]	; (8000930 <SendUpData+0x210>)
 8000780:	721a      	strb	r2, [r3, #8]
	UpDataSend[9] = SendData.CabinHum >> 8;
 8000782:	8a3b      	ldrh	r3, [r7, #16]
 8000784:	0a1b      	lsrs	r3, r3, #8
 8000786:	b29b      	uxth	r3, r3
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b69      	ldr	r3, [pc, #420]	; (8000930 <SendUpData+0x210>)
 800078c:	725a      	strb	r2, [r3, #9]
	UpDataSend[10] = SendData.AccNum[0] >> 8;
 800078e:	8a7b      	ldrh	r3, [r7, #18]
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	b29b      	uxth	r3, r3
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b66      	ldr	r3, [pc, #408]	; (8000930 <SendUpData+0x210>)
 8000798:	729a      	strb	r2, [r3, #10]
	UpDataSend[11] = SendData.AccNum[0];
 800079a:	8a7b      	ldrh	r3, [r7, #18]
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b64      	ldr	r3, [pc, #400]	; (8000930 <SendUpData+0x210>)
 80007a0:	72da      	strb	r2, [r3, #11]
	UpDataSend[12] = SendData.AccNum[1] >> 8;
 80007a2:	8abb      	ldrh	r3, [r7, #20]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4b61      	ldr	r3, [pc, #388]	; (8000930 <SendUpData+0x210>)
 80007ac:	731a      	strb	r2, [r3, #12]
	UpDataSend[13] = SendData.AccNum[1];
 80007ae:	8abb      	ldrh	r3, [r7, #20]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b5f      	ldr	r3, [pc, #380]	; (8000930 <SendUpData+0x210>)
 80007b4:	735a      	strb	r2, [r3, #13]
	UpDataSend[14] = SendData.AccNum[2] >> 8;
 80007b6:	8afb      	ldrh	r3, [r7, #22]
 80007b8:	0a1b      	lsrs	r3, r3, #8
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b5c      	ldr	r3, [pc, #368]	; (8000930 <SendUpData+0x210>)
 80007c0:	739a      	strb	r2, [r3, #14]
	UpDataSend[15] = SendData.AccNum[2];
 80007c2:	8afb      	ldrh	r3, [r7, #22]
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4b5a      	ldr	r3, [pc, #360]	; (8000930 <SendUpData+0x210>)
 80007c8:	73da      	strb	r2, [r3, #15]
	UpDataSend[16] = SendData.RotNum[0] >> 8;
 80007ca:	8b3b      	ldrh	r3, [r7, #24]
 80007cc:	0a1b      	lsrs	r3, r3, #8
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4b57      	ldr	r3, [pc, #348]	; (8000930 <SendUpData+0x210>)
 80007d4:	741a      	strb	r2, [r3, #16]
	UpDataSend[17] = SendData.RotNum[0];
 80007d6:	8b3b      	ldrh	r3, [r7, #24]
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b55      	ldr	r3, [pc, #340]	; (8000930 <SendUpData+0x210>)
 80007dc:	745a      	strb	r2, [r3, #17]
	UpDataSend[18] = SendData.RotNum[1] >> 8;
 80007de:	8b7b      	ldrh	r3, [r7, #26]
 80007e0:	0a1b      	lsrs	r3, r3, #8
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4b52      	ldr	r3, [pc, #328]	; (8000930 <SendUpData+0x210>)
 80007e8:	749a      	strb	r2, [r3, #18]
	UpDataSend[19] = SendData.RotNum[1];
 80007ea:	8b7b      	ldrh	r3, [r7, #26]
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4b50      	ldr	r3, [pc, #320]	; (8000930 <SendUpData+0x210>)
 80007f0:	74da      	strb	r2, [r3, #19]
	UpDataSend[20] = SendData.RotNum[2] >> 8;
 80007f2:	8bbb      	ldrh	r3, [r7, #28]
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b4d      	ldr	r3, [pc, #308]	; (8000930 <SendUpData+0x210>)
 80007fc:	751a      	strb	r2, [r3, #20]
	UpDataSend[21] = SendData.RotNum[2];
 80007fe:	8bbb      	ldrh	r3, [r7, #28]
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b4b      	ldr	r3, [pc, #300]	; (8000930 <SendUpData+0x210>)
 8000804:	755a      	strb	r2, [r3, #21]
	UpDataSend[22] = SendData.EulNum[0] >> 8;
 8000806:	8bfb      	ldrh	r3, [r7, #30]
 8000808:	0a1b      	lsrs	r3, r3, #8
 800080a:	b29b      	uxth	r3, r3
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b48      	ldr	r3, [pc, #288]	; (8000930 <SendUpData+0x210>)
 8000810:	759a      	strb	r2, [r3, #22]
	UpDataSend[23] = SendData.EulNum[0];
 8000812:	8bfb      	ldrh	r3, [r7, #30]
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b46      	ldr	r3, [pc, #280]	; (8000930 <SendUpData+0x210>)
 8000818:	75da      	strb	r2, [r3, #23]
	UpDataSend[24] = SendData.EulNum[1] >> 8;
 800081a:	8c3b      	ldrh	r3, [r7, #32]
 800081c:	0a1b      	lsrs	r3, r3, #8
 800081e:	b29b      	uxth	r3, r3
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4b43      	ldr	r3, [pc, #268]	; (8000930 <SendUpData+0x210>)
 8000824:	761a      	strb	r2, [r3, #24]
	UpDataSend[25] = SendData.EulNum[1];
 8000826:	8c3b      	ldrh	r3, [r7, #32]
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b41      	ldr	r3, [pc, #260]	; (8000930 <SendUpData+0x210>)
 800082c:	765a      	strb	r2, [r3, #25]
	UpDataSend[26] = SendData.EulNum[2] >> 8;
 800082e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000830:	0a1b      	lsrs	r3, r3, #8
 8000832:	b29b      	uxth	r3, r3
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b3e      	ldr	r3, [pc, #248]	; (8000930 <SendUpData+0x210>)
 8000838:	769a      	strb	r2, [r3, #26]
	UpDataSend[27] = SendData.EulNum[2];
 800083a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b3c      	ldr	r3, [pc, #240]	; (8000930 <SendUpData+0x210>)
 8000840:	76da      	strb	r2, [r3, #27]
	UpDataSend[28] = SendData.MagNum[0] >> 8;
 8000842:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000844:	0a1b      	lsrs	r3, r3, #8
 8000846:	b29b      	uxth	r3, r3
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4b39      	ldr	r3, [pc, #228]	; (8000930 <SendUpData+0x210>)
 800084c:	771a      	strb	r2, [r3, #28]
	UpDataSend[29] = SendData.MagNum[0];
 800084e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b37      	ldr	r3, [pc, #220]	; (8000930 <SendUpData+0x210>)
 8000854:	775a      	strb	r2, [r3, #29]
	UpDataSend[30] = SendData.MagNum[1] >> 8;
 8000856:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000858:	0a1b      	lsrs	r3, r3, #8
 800085a:	b29b      	uxth	r3, r3
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4b34      	ldr	r3, [pc, #208]	; (8000930 <SendUpData+0x210>)
 8000860:	779a      	strb	r2, [r3, #30]
	UpDataSend[31] = SendData.MagNum[1];
 8000862:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4b32      	ldr	r3, [pc, #200]	; (8000930 <SendUpData+0x210>)
 8000868:	77da      	strb	r2, [r3, #31]
	UpDataSend[32] = SendData.MagNum[2] >> 8;
 800086a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800086c:	0a1b      	lsrs	r3, r3, #8
 800086e:	b29b      	uxth	r3, r3
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b2f      	ldr	r3, [pc, #188]	; (8000930 <SendUpData+0x210>)
 8000874:	f883 2020 	strb.w	r2, [r3, #32]
	UpDataSend[33] = SendData.MagNum[2];
 8000878:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800087a:	b2da      	uxtb	r2, r3
 800087c:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <SendUpData+0x210>)
 800087e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	UpDataSend[34] = SendData.DepthToBottom >> 16;
 8000882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000884:	0c1b      	lsrs	r3, r3, #16
 8000886:	b2da      	uxtb	r2, r3
 8000888:	4b29      	ldr	r3, [pc, #164]	; (8000930 <SendUpData+0x210>)
 800088a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	UpDataSend[35] = SendData.DepthToBottom >> 8;
 800088e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000890:	0a1b      	lsrs	r3, r3, #8
 8000892:	b2da      	uxtb	r2, r3
 8000894:	4b26      	ldr	r3, [pc, #152]	; (8000930 <SendUpData+0x210>)
 8000896:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	UpDataSend[36] = SendData.DepthToBottom >> 24;
 800089a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800089c:	0e1b      	lsrs	r3, r3, #24
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b23      	ldr	r3, [pc, #140]	; (8000930 <SendUpData+0x210>)
 80008a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	UpDataSend[37] = SendData.DepthToBottom;
 80008a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b21      	ldr	r3, [pc, #132]	; (8000930 <SendUpData+0x210>)
 80008ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UpDataSend[38] = SendData.Confidence >> 8;
 80008b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80008b2:	0a1b      	lsrs	r3, r3, #8
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <SendUpData+0x210>)
 80008ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	UpDataSend[39] = SendData.Confidence;
 80008be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <SendUpData+0x210>)
 80008c4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	UpDataSend[40] = SendData.WaterTemperature >> 8;
 80008c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80008ca:	0a1b      	lsrs	r3, r3, #8
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <SendUpData+0x210>)
 80008d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	UpDataSend[41] = SendData.WaterTemperature;
 80008d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <SendUpData+0x210>)
 80008dc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	UpDataSend[42] = SendData.WaterDepth >> 8;
 80008e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80008e2:	0a1b      	lsrs	r3, r3, #8
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <SendUpData+0x210>)
 80008ea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	UpDataSend[43] = SendData.WaterDepth;
 80008ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <SendUpData+0x210>)
 80008f4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	UpDataSend[44] = XorCaculate(UpDataSend, 38);
 80008f8:	2126      	movs	r1, #38	; 0x26
 80008fa:	480d      	ldr	r0, [pc, #52]	; (8000930 <SendUpData+0x210>)
 80008fc:	f000 fa02 	bl	8000d04 <XorCaculate>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <SendUpData+0x210>)
 8000906:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	UpDataSend[45] = 0xff;
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <SendUpData+0x210>)
 800090c:	22ff      	movs	r2, #255	; 0xff
 800090e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	UpDataSend[46] = 0xff;
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <SendUpData+0x210>)
 8000914:	22ff      	movs	r2, #255	; 0xff
 8000916:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	HAL_UART_Transmit_DMA(&Up_UART, UpDataSend, Up_UART_TXLen);
 800091a:	222f      	movs	r2, #47	; 0x2f
 800091c:	4904      	ldr	r1, [pc, #16]	; (8000930 <SendUpData+0x210>)
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <SendUpData+0x214>)
 8000920:	f009 f82a 	bl	8009978 <HAL_UART_Transmit_DMA>
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800092c:	b004      	add	sp, #16
 800092e:	4770      	bx	lr
 8000930:	24000070 	.word	0x24000070
 8000934:	20004490 	.word	0x20004490

08000938 <SendDownData>:
 * @brief 向下位机发送指令
 * @param  SendData         待发送的指令结构体
 * @note 已完成Debug
 */
void SendDownData(DownDataDef SendData)
{
 8000938:	b084      	sub	sp, #16
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0
 800093e:	f107 0c08 	add.w	ip, r7, #8
 8000942:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	DownDataSend[0] = 0x25;
 8000946:	4b4a      	ldr	r3, [pc, #296]	; (8000a70 <SendDownData+0x138>)
 8000948:	2225      	movs	r2, #37	; 0x25
 800094a:	701a      	strb	r2, [r3, #0]
	DownDataSend[1] = SendData.StraightNum >> 8;
 800094c:	897b      	ldrh	r3, [r7, #10]
 800094e:	0a1b      	lsrs	r3, r3, #8
 8000950:	b29b      	uxth	r3, r3
 8000952:	b2da      	uxtb	r2, r3
 8000954:	4b46      	ldr	r3, [pc, #280]	; (8000a70 <SendDownData+0x138>)
 8000956:	705a      	strb	r2, [r3, #1]
	DownDataSend[2] = SendData.StraightNum;
 8000958:	897b      	ldrh	r3, [r7, #10]
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b44      	ldr	r3, [pc, #272]	; (8000a70 <SendDownData+0x138>)
 800095e:	709a      	strb	r2, [r3, #2]
	DownDataSend[3] = SendData.RotateNum >> 8;
 8000960:	89bb      	ldrh	r3, [r7, #12]
 8000962:	0a1b      	lsrs	r3, r3, #8
 8000964:	b29b      	uxth	r3, r3
 8000966:	b2da      	uxtb	r2, r3
 8000968:	4b41      	ldr	r3, [pc, #260]	; (8000a70 <SendDownData+0x138>)
 800096a:	70da      	strb	r2, [r3, #3]
	DownDataSend[4] = SendData.RotateNum;
 800096c:	89bb      	ldrh	r3, [r7, #12]
 800096e:	b2da      	uxtb	r2, r3
 8000970:	4b3f      	ldr	r3, [pc, #252]	; (8000a70 <SendDownData+0x138>)
 8000972:	711a      	strb	r2, [r3, #4]
	DownDataSend[5] = SendData.VerticalNum >> 8;
 8000974:	89fb      	ldrh	r3, [r7, #14]
 8000976:	0a1b      	lsrs	r3, r3, #8
 8000978:	b29b      	uxth	r3, r3
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b3c      	ldr	r3, [pc, #240]	; (8000a70 <SendDownData+0x138>)
 800097e:	715a      	strb	r2, [r3, #5]
	DownDataSend[6] = SendData.VerticalNum;
 8000980:	89fb      	ldrh	r3, [r7, #14]
 8000982:	b2da      	uxtb	r2, r3
 8000984:	4b3a      	ldr	r3, [pc, #232]	; (8000a70 <SendDownData+0x138>)
 8000986:	719a      	strb	r2, [r3, #6]
	DownDataSend[7] = SendData.LightPWM >> 8;
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	0a1b      	lsrs	r3, r3, #8
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4b38      	ldr	r3, [pc, #224]	; (8000a70 <SendDownData+0x138>)
 8000990:	71da      	strb	r2, [r3, #7]
	DownDataSend[8] = SendData.LightPWM;
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b36      	ldr	r3, [pc, #216]	; (8000a70 <SendDownData+0x138>)
 8000998:	721a      	strb	r2, [r3, #8]
	DownDataSend[9] = SendData.THPWM >> 8;
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	4b33      	ldr	r3, [pc, #204]	; (8000a70 <SendDownData+0x138>)
 80009a2:	725a      	strb	r2, [r3, #9]
	DownDataSend[10] = SendData.THPWM;
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	4b31      	ldr	r3, [pc, #196]	; (8000a70 <SendDownData+0x138>)
 80009aa:	729a      	strb	r2, [r3, #10]
	DownDataSend[11] = SendData.TranspPWM >> 8;
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	0a1b      	lsrs	r3, r3, #8
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b2f      	ldr	r3, [pc, #188]	; (8000a70 <SendDownData+0x138>)
 80009b4:	72da      	strb	r2, [r3, #11]
	DownDataSend[12] = SendData.TranspPWM;
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4b2d      	ldr	r3, [pc, #180]	; (8000a70 <SendDownData+0x138>)
 80009bc:	731a      	strb	r2, [r3, #12]
	DownDataSend[13] = SendData.ArmPWM[0] >> 8;
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	0a1b      	lsrs	r3, r3, #8
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <SendDownData+0x138>)
 80009c6:	735a      	strb	r2, [r3, #13]
	DownDataSend[14] = SendData.ArmPWM[0];
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <SendDownData+0x138>)
 80009ce:	739a      	strb	r2, [r3, #14]
	DownDataSend[15] = SendData.ArmPWM[1] >> 8;
 80009d0:	6a3b      	ldr	r3, [r7, #32]
 80009d2:	0a1b      	lsrs	r3, r3, #8
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <SendDownData+0x138>)
 80009d8:	73da      	strb	r2, [r3, #15]
	DownDataSend[16] = SendData.ArmPWM[1];
 80009da:	6a3b      	ldr	r3, [r7, #32]
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <SendDownData+0x138>)
 80009e0:	741a      	strb	r2, [r3, #16]
	DownDataSend[17] = SendData.ArmPWM[2] >> 8;
 80009e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <SendDownData+0x138>)
 80009ea:	745a      	strb	r2, [r3, #17]
	DownDataSend[18] = SendData.ArmPWM[2];
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <SendDownData+0x138>)
 80009f2:	749a      	strb	r2, [r3, #18]
	DownDataSend[19] = SendData.ArmPWM[3] >> 8;
 80009f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f6:	0a1b      	lsrs	r3, r3, #8
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <SendDownData+0x138>)
 80009fc:	74da      	strb	r2, [r3, #19]
	DownDataSend[20] = SendData.ArmPWM[3];
 80009fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <SendDownData+0x138>)
 8000a04:	751a      	strb	r2, [r3, #20]
	DownDataSend[21] = SendData.ArmPWM[4] >> 8;
 8000a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <SendDownData+0x138>)
 8000a0e:	755a      	strb	r2, [r3, #21]
	DownDataSend[22] = SendData.ArmPWM[4];
 8000a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <SendDownData+0x138>)
 8000a16:	759a      	strb	r2, [r3, #22]
	DownDataSend[23] = SendData.ArmPWM[5] >> 8;
 8000a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1a:	0a1b      	lsrs	r3, r3, #8
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <SendDownData+0x138>)
 8000a20:	75da      	strb	r2, [r3, #23]
	DownDataSend[24] = SendData.ArmPWM[5];
 8000a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <SendDownData+0x138>)
 8000a28:	761a      	strb	r2, [r3, #24]
	DownDataSend[25] = SendData.ResPWM >> 8;
 8000a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <SendDownData+0x138>)
 8000a32:	765a      	strb	r2, [r3, #25]
	DownDataSend[26] = SendData.ResPWM;
 8000a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <SendDownData+0x138>)
 8000a3a:	769a      	strb	r2, [r3, #26]
	DownDataSend[27] = SendData.Relay; //直接下传数据
 8000a3c:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <SendDownData+0x138>)
 8000a42:	76da      	strb	r2, [r3, #27]
	DownDataSend[28] = XorCaculate(DownDataSend, 28);
 8000a44:	211c      	movs	r1, #28
 8000a46:	480a      	ldr	r0, [pc, #40]	; (8000a70 <SendDownData+0x138>)
 8000a48:	f000 f95c 	bl	8000d04 <XorCaculate>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <SendDownData+0x138>)
 8000a52:	771a      	strb	r2, [r3, #28]
	DownDataSend[29] = 0x21;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <SendDownData+0x138>)
 8000a56:	2221      	movs	r2, #33	; 0x21
 8000a58:	775a      	strb	r2, [r3, #29]

	HAL_UART_Transmit_DMA(&Down_UART, DownDataSend, Down_UART_TXLEN);
 8000a5a:	221e      	movs	r2, #30
 8000a5c:	4904      	ldr	r1, [pc, #16]	; (8000a70 <SendDownData+0x138>)
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <SendDownData+0x13c>)
 8000a60:	f008 ff8a 	bl	8009978 <HAL_UART_Transmit_DMA>
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a6c:	b004      	add	sp, #16
 8000a6e:	4770      	bx	lr
 8000a70:	24000020 	.word	0x24000020
 8000a74:	200045ac 	.word	0x200045ac

08000a78 <CaptureUpData>:
/**
 * @brief 捕获下位向上位发送的数据
 * @return UpDataDef 下位机上传的数据结构体
 */
UpDataDef CaptureUpData(void)
{
 8000a78:	b5b0      	push	{r4, r5, r7, lr}
 8000a7a:	b08e      	sub	sp, #56	; 0x38
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	UpDataDef CaptureData;

	if ((UpDataReceive[0] == 0x25) && (UpDataReceive[45] == 0xFF)
 8000a80:	4b94      	ldr	r3, [pc, #592]	; (8000cd4 <CaptureUpData+0x25c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b25      	cmp	r3, #37	; 0x25
 8000a86:	f040 8120 	bne.w	8000cca <CaptureUpData+0x252>
 8000a8a:	4b92      	ldr	r3, [pc, #584]	; (8000cd4 <CaptureUpData+0x25c>)
 8000a8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000a90:	2bff      	cmp	r3, #255	; 0xff
 8000a92:	f040 811a 	bne.w	8000cca <CaptureUpData+0x252>
			&& (UpDataReceive[46] == 0xFF))
 8000a96:	4b8f      	ldr	r3, [pc, #572]	; (8000cd4 <CaptureUpData+0x25c>)
 8000a98:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000a9c:	2bff      	cmp	r3, #255	; 0xff
 8000a9e:	f040 8114 	bne.w	8000cca <CaptureUpData+0x252>
	{
		CaptureData.CabinNum = (UpDataReceive[1] & 0b0001); //0b0000控制仓，0b0001==1电源仓
 8000aa2:	4b8c      	ldr	r3, [pc, #560]	; (8000cd4 <CaptureUpData+0x25c>)
 8000aa4:	785b      	ldrb	r3, [r3, #1]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	723b      	strb	r3, [r7, #8]
		CaptureData.WaterDetect = (UpDataReceive[1] & 0b0010); //0b0000正常，0b0010==2漏水
 8000aae:	4b89      	ldr	r3, [pc, #548]	; (8000cd4 <CaptureUpData+0x25c>)
 8000ab0:	785b      	ldrb	r3, [r3, #1]
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	727b      	strb	r3, [r7, #9]
		CaptureData.CabinTemperature = ((UpDataReceive[3])
 8000aba:	4b86      	ldr	r3, [pc, #536]	; (8000cd4 <CaptureUpData+0x25c>)
 8000abc:	78db      	ldrb	r3, [r3, #3]
 8000abe:	b21a      	sxth	r2, r3
				| UpDataReceive[2] << 8);
 8000ac0:	4b84      	ldr	r3, [pc, #528]	; (8000cd4 <CaptureUpData+0x25c>)
 8000ac2:	789b      	ldrb	r3, [r3, #2]
 8000ac4:	021b      	lsls	r3, r3, #8
 8000ac6:	b21b      	sxth	r3, r3
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	b29b      	uxth	r3, r3
		CaptureData.CabinTemperature = ((UpDataReceive[3])
 8000ace:	817b      	strh	r3, [r7, #10]
		CaptureData.CabinBaro = ((UpDataReceive[7] << 16)
 8000ad0:	4b80      	ldr	r3, [pc, #512]	; (8000cd4 <CaptureUpData+0x25c>)
 8000ad2:	79db      	ldrb	r3, [r3, #7]
 8000ad4:	041a      	lsls	r2, r3, #16
				| (UpDataReceive[6] << 8) | (UpDataReceive[5] << 24)
 8000ad6:	4b7f      	ldr	r3, [pc, #508]	; (8000cd4 <CaptureUpData+0x25c>)
 8000ad8:	799b      	ldrb	r3, [r3, #6]
 8000ada:	021b      	lsls	r3, r3, #8
 8000adc:	431a      	orrs	r2, r3
 8000ade:	4b7d      	ldr	r3, [pc, #500]	; (8000cd4 <CaptureUpData+0x25c>)
 8000ae0:	795b      	ldrb	r3, [r3, #5]
 8000ae2:	061b      	lsls	r3, r3, #24
 8000ae4:	4313      	orrs	r3, r2
				| UpDataReceive[4]);
 8000ae6:	4a7b      	ldr	r2, [pc, #492]	; (8000cd4 <CaptureUpData+0x25c>)
 8000ae8:	7912      	ldrb	r2, [r2, #4]
 8000aea:	4313      	orrs	r3, r2
		CaptureData.CabinBaro = ((UpDataReceive[7] << 16)
 8000aec:	60fb      	str	r3, [r7, #12]
		CaptureData.CabinHum = ((UpDataReceive[9]) | UpDataReceive[8] << 8);
 8000aee:	4b79      	ldr	r3, [pc, #484]	; (8000cd4 <CaptureUpData+0x25c>)
 8000af0:	7a5b      	ldrb	r3, [r3, #9]
 8000af2:	b21a      	sxth	r2, r3
 8000af4:	4b77      	ldr	r3, [pc, #476]	; (8000cd4 <CaptureUpData+0x25c>)
 8000af6:	7a1b      	ldrb	r3, [r3, #8]
 8000af8:	021b      	lsls	r3, r3, #8
 8000afa:	b21b      	sxth	r3, r3
 8000afc:	4313      	orrs	r3, r2
 8000afe:	b21b      	sxth	r3, r3
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	823b      	strh	r3, [r7, #16]
		CaptureData.AccNum[0] = ((UpDataReceive[11] << 8) | UpDataReceive[10]);
 8000b04:	4b73      	ldr	r3, [pc, #460]	; (8000cd4 <CaptureUpData+0x25c>)
 8000b06:	7adb      	ldrb	r3, [r3, #11]
 8000b08:	021b      	lsls	r3, r3, #8
 8000b0a:	b21a      	sxth	r2, r3
 8000b0c:	4b71      	ldr	r3, [pc, #452]	; (8000cd4 <CaptureUpData+0x25c>)
 8000b0e:	7a9b      	ldrb	r3, [r3, #10]
 8000b10:	b21b      	sxth	r3, r3
 8000b12:	4313      	orrs	r3, r2
 8000b14:	b21b      	sxth	r3, r3
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	827b      	strh	r3, [r7, #18]
		CaptureData.AccNum[1] = ((UpDataReceive[13] << 8) | UpDataReceive[12]);
 8000b1a:	4b6e      	ldr	r3, [pc, #440]	; (8000cd4 <CaptureUpData+0x25c>)
 8000b1c:	7b5b      	ldrb	r3, [r3, #13]
 8000b1e:	021b      	lsls	r3, r3, #8
 8000b20:	b21a      	sxth	r2, r3
 8000b22:	4b6c      	ldr	r3, [pc, #432]	; (8000cd4 <CaptureUpData+0x25c>)
 8000b24:	7b1b      	ldrb	r3, [r3, #12]
 8000b26:	b21b      	sxth	r3, r3
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	b21b      	sxth	r3, r3
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	82bb      	strh	r3, [r7, #20]
		CaptureData.AccNum[2] = ((UpDataReceive[15] << 8) | UpDataReceive[14]);
 8000b30:	4b68      	ldr	r3, [pc, #416]	; (8000cd4 <CaptureUpData+0x25c>)
 8000b32:	7bdb      	ldrb	r3, [r3, #15]
 8000b34:	021b      	lsls	r3, r3, #8
 8000b36:	b21a      	sxth	r2, r3
 8000b38:	4b66      	ldr	r3, [pc, #408]	; (8000cd4 <CaptureUpData+0x25c>)
 8000b3a:	7b9b      	ldrb	r3, [r3, #14]
 8000b3c:	b21b      	sxth	r3, r3
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	b21b      	sxth	r3, r3
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	82fb      	strh	r3, [r7, #22]
		CaptureData.RotNum[0] = ((UpDataReceive[17] << 8) | UpDataReceive[16]);
 8000b46:	4b63      	ldr	r3, [pc, #396]	; (8000cd4 <CaptureUpData+0x25c>)
 8000b48:	7c5b      	ldrb	r3, [r3, #17]
 8000b4a:	021b      	lsls	r3, r3, #8
 8000b4c:	b21a      	sxth	r2, r3
 8000b4e:	4b61      	ldr	r3, [pc, #388]	; (8000cd4 <CaptureUpData+0x25c>)
 8000b50:	7c1b      	ldrb	r3, [r3, #16]
 8000b52:	b21b      	sxth	r3, r3
 8000b54:	4313      	orrs	r3, r2
 8000b56:	b21b      	sxth	r3, r3
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	833b      	strh	r3, [r7, #24]
		CaptureData.RotNum[1] = ((UpDataReceive[19] << 8) | UpDataReceive[18]);
 8000b5c:	4b5d      	ldr	r3, [pc, #372]	; (8000cd4 <CaptureUpData+0x25c>)
 8000b5e:	7cdb      	ldrb	r3, [r3, #19]
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	4b5b      	ldr	r3, [pc, #364]	; (8000cd4 <CaptureUpData+0x25c>)
 8000b66:	7c9b      	ldrb	r3, [r3, #18]
 8000b68:	b21b      	sxth	r3, r3
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	b21b      	sxth	r3, r3
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	837b      	strh	r3, [r7, #26]
		CaptureData.RotNum[2] = ((UpDataReceive[21] << 8) | UpDataReceive[20]);
 8000b72:	4b58      	ldr	r3, [pc, #352]	; (8000cd4 <CaptureUpData+0x25c>)
 8000b74:	7d5b      	ldrb	r3, [r3, #21]
 8000b76:	021b      	lsls	r3, r3, #8
 8000b78:	b21a      	sxth	r2, r3
 8000b7a:	4b56      	ldr	r3, [pc, #344]	; (8000cd4 <CaptureUpData+0x25c>)
 8000b7c:	7d1b      	ldrb	r3, [r3, #20]
 8000b7e:	b21b      	sxth	r3, r3
 8000b80:	4313      	orrs	r3, r2
 8000b82:	b21b      	sxth	r3, r3
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	83bb      	strh	r3, [r7, #28]
		CaptureData.EulNum[0] = ((UpDataReceive[23] << 8) | UpDataReceive[22]);
 8000b88:	4b52      	ldr	r3, [pc, #328]	; (8000cd4 <CaptureUpData+0x25c>)
 8000b8a:	7ddb      	ldrb	r3, [r3, #23]
 8000b8c:	021b      	lsls	r3, r3, #8
 8000b8e:	b21a      	sxth	r2, r3
 8000b90:	4b50      	ldr	r3, [pc, #320]	; (8000cd4 <CaptureUpData+0x25c>)
 8000b92:	7d9b      	ldrb	r3, [r3, #22]
 8000b94:	b21b      	sxth	r3, r3
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b21b      	sxth	r3, r3
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	83fb      	strh	r3, [r7, #30]
		CaptureData.EulNum[1] = ((UpDataReceive[25] << 8) | UpDataReceive[24]);
 8000b9e:	4b4d      	ldr	r3, [pc, #308]	; (8000cd4 <CaptureUpData+0x25c>)
 8000ba0:	7e5b      	ldrb	r3, [r3, #25]
 8000ba2:	021b      	lsls	r3, r3, #8
 8000ba4:	b21a      	sxth	r2, r3
 8000ba6:	4b4b      	ldr	r3, [pc, #300]	; (8000cd4 <CaptureUpData+0x25c>)
 8000ba8:	7e1b      	ldrb	r3, [r3, #24]
 8000baa:	b21b      	sxth	r3, r3
 8000bac:	4313      	orrs	r3, r2
 8000bae:	b21b      	sxth	r3, r3
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	843b      	strh	r3, [r7, #32]
		CaptureData.EulNum[2] = ((UpDataReceive[27] << 8) | UpDataReceive[26]);
 8000bb4:	4b47      	ldr	r3, [pc, #284]	; (8000cd4 <CaptureUpData+0x25c>)
 8000bb6:	7edb      	ldrb	r3, [r3, #27]
 8000bb8:	021b      	lsls	r3, r3, #8
 8000bba:	b21a      	sxth	r2, r3
 8000bbc:	4b45      	ldr	r3, [pc, #276]	; (8000cd4 <CaptureUpData+0x25c>)
 8000bbe:	7e9b      	ldrb	r3, [r3, #26]
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	b21b      	sxth	r3, r3
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	847b      	strh	r3, [r7, #34]	; 0x22
		CaptureData.MagNum[0] = ((UpDataReceive[29] << 8) | UpDataReceive[28]);
 8000bca:	4b42      	ldr	r3, [pc, #264]	; (8000cd4 <CaptureUpData+0x25c>)
 8000bcc:	7f5b      	ldrb	r3, [r3, #29]
 8000bce:	021b      	lsls	r3, r3, #8
 8000bd0:	b21a      	sxth	r2, r3
 8000bd2:	4b40      	ldr	r3, [pc, #256]	; (8000cd4 <CaptureUpData+0x25c>)
 8000bd4:	7f1b      	ldrb	r3, [r3, #28]
 8000bd6:	b21b      	sxth	r3, r3
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	84bb      	strh	r3, [r7, #36]	; 0x24
		CaptureData.MagNum[1] = ((UpDataReceive[31] << 8) | UpDataReceive[30]);
 8000be0:	4b3c      	ldr	r3, [pc, #240]	; (8000cd4 <CaptureUpData+0x25c>)
 8000be2:	7fdb      	ldrb	r3, [r3, #31]
 8000be4:	021b      	lsls	r3, r3, #8
 8000be6:	b21a      	sxth	r2, r3
 8000be8:	4b3a      	ldr	r3, [pc, #232]	; (8000cd4 <CaptureUpData+0x25c>)
 8000bea:	7f9b      	ldrb	r3, [r3, #30]
 8000bec:	b21b      	sxth	r3, r3
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	b21b      	sxth	r3, r3
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	84fb      	strh	r3, [r7, #38]	; 0x26
		CaptureData.MagNum[2] = ((UpDataReceive[33] << 8) | UpDataReceive[32]);
 8000bf6:	4b37      	ldr	r3, [pc, #220]	; (8000cd4 <CaptureUpData+0x25c>)
 8000bf8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bfc:	021b      	lsls	r3, r3, #8
 8000bfe:	b21a      	sxth	r2, r3
 8000c00:	4b34      	ldr	r3, [pc, #208]	; (8000cd4 <CaptureUpData+0x25c>)
 8000c02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c06:	b21b      	sxth	r3, r3
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	853b      	strh	r3, [r7, #40]	; 0x28
		CaptureData.DepthToBottom = ((UpDataReceive[37] << 16)
 8000c10:	4b30      	ldr	r3, [pc, #192]	; (8000cd4 <CaptureUpData+0x25c>)
 8000c12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c16:	041a      	lsls	r2, r3, #16
				| (UpDataReceive[36] << 24) | (UpDataReceive[35] << 8)
 8000c18:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <CaptureUpData+0x25c>)
 8000c1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c1e:	061b      	lsls	r3, r3, #24
 8000c20:	431a      	orrs	r2, r3
 8000c22:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <CaptureUpData+0x25c>)
 8000c24:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000c28:	021b      	lsls	r3, r3, #8
 8000c2a:	4313      	orrs	r3, r2
				| UpDataReceive[34]);
 8000c2c:	4a29      	ldr	r2, [pc, #164]	; (8000cd4 <CaptureUpData+0x25c>)
 8000c2e:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8000c32:	4313      	orrs	r3, r2
		CaptureData.DepthToBottom = ((UpDataReceive[37] << 16)
 8000c34:	633b      	str	r3, [r7, #48]	; 0x30
		CaptureData.Confidence = ((UpDataReceive[39] << 8) | UpDataReceive[38]);
 8000c36:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <CaptureUpData+0x25c>)
 8000c38:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000c3c:	021b      	lsls	r3, r3, #8
 8000c3e:	b21a      	sxth	r2, r3
 8000c40:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <CaptureUpData+0x25c>)
 8000c42:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000c46:	b21b      	sxth	r3, r3
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	b21b      	sxth	r3, r3
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		CaptureData.WaterTemperature = ((UpDataReceive[41] << 8)
 8000c50:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <CaptureUpData+0x25c>)
 8000c52:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000c56:	021b      	lsls	r3, r3, #8
				| UpDataReceive[40]);
 8000c58:	b21a      	sxth	r2, r3
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <CaptureUpData+0x25c>)
 8000c5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000c60:	b21b      	sxth	r3, r3
 8000c62:	4313      	orrs	r3, r2
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	b29b      	uxth	r3, r3
		CaptureData.WaterTemperature = ((UpDataReceive[41] << 8)
 8000c68:	857b      	strh	r3, [r7, #42]	; 0x2a
		CaptureData.WaterDepth = ((UpDataReceive[43] << 8) | UpDataReceive[42]);
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <CaptureUpData+0x25c>)
 8000c6c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000c70:	021b      	lsls	r3, r3, #8
 8000c72:	b21a      	sxth	r2, r3
 8000c74:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <CaptureUpData+0x25c>)
 8000c76:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000c7a:	b21b      	sxth	r3, r3
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	b21b      	sxth	r3, r3
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	85bb      	strh	r3, [r7, #44]	; 0x2c
		CaptureData.IdTest = IdTest(UpDataReceive, 1, 44, 28);
 8000c84:	231c      	movs	r3, #28
 8000c86:	222c      	movs	r2, #44	; 0x2c
 8000c88:	2101      	movs	r1, #1
 8000c8a:	4812      	ldr	r0, [pc, #72]	; (8000cd4 <CaptureUpData+0x25c>)
 8000c8c:	f000 f826 	bl	8000cdc <IdTest>
 8000c90:	4603      	mov	r3, r0
 8000c92:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

		__HAL_UART_ENABLE_IT(&Down_UART, UART_IT_IDLE);
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <CaptureUpData+0x260>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <CaptureUpData+0x260>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f042 0210 	orr.w	r2, r2, #16
 8000ca4:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_DMA(&Down_UART, UpDataReceive, Down_UART_RXLen);
 8000ca6:	2230      	movs	r2, #48	; 0x30
 8000ca8:	490a      	ldr	r1, [pc, #40]	; (8000cd4 <CaptureUpData+0x25c>)
 8000caa:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <CaptureUpData+0x260>)
 8000cac:	f008 fee4 	bl	8009a78 <HAL_UART_Receive_DMA>
		return CaptureData;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	461d      	mov	r5, r3
 8000cb4:	f107 0408 	add.w	r4, r7, #8
 8000cb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cc0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cc4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000cc8:	e000      	b.n	8000ccc <CaptureUpData+0x254>
	}
}
 8000cca:	bf00      	nop
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	3738      	adds	r7, #56	; 0x38
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8000cd4:	24000040 	.word	0x24000040
 8000cd8:	200045ac 	.word	0x200045ac

08000cdc <IdTest>:
 * @param  SendUpLength     上传数据长度
 * @param  SendDownLength   下传指令长度
 * @return u8 正确为1；错误为0，如果不开启奇偶校验默认为1
 */
static u8 IdTest(u8 *String, u8 Format, u8 SendUpLength, u8 SendDownLength)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4603      	mov	r3, r0
 8000cec:	70fb      	strb	r3, [r7, #3]
 8000cee:	460b      	mov	r3, r1
 8000cf0:	70bb      	strb	r3, [r7, #2]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	707b      	strb	r3, [r7, #1]
			return 0;
		}
	}
	return 1;
#else
	return 1; //不开启奇偶校验时默认成功
 8000cf6:	2301      	movs	r3, #1
#endif
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <XorCaculate>:
 * @param  CacString        待校验数据
 * @param  CacStringSize    待校验数据长度
 * @return u8 异或运算结果，如果不开启数据校验则默认返回0
 */
static u8 XorCaculate(u8 *CacString, u8 CacStringSize)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	70fb      	strb	r3, [r7, #3]
	{
		CacResult ^= CacString[i];
	}
	return CacResult;
#else
	return 0;
 8000d10:	2300      	movs	r3, #0
#endif
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <InitGY39>:

/**
 * @brief GY39温湿度大气压传感器初始化
 */
void InitGY39(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	GY39Send[0] = 0xa5;
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <InitGY39+0x24>)
 8000d26:	22a5      	movs	r2, #165	; 0xa5
 8000d28:	701a      	strb	r2, [r3, #0]
	GY39Send[1] = 0x82;
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <InitGY39+0x24>)
 8000d2c:	2282      	movs	r2, #130	; 0x82
 8000d2e:	705a      	strb	r2, [r3, #1]
	GY39Send[2] = 0x27;
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <InitGY39+0x24>)
 8000d32:	2227      	movs	r2, #39	; 0x27
 8000d34:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_DMA(&GY39_UART, GY39Send, GY39_UART_TXLen);
 8000d36:	2203      	movs	r2, #3
 8000d38:	4902      	ldr	r1, [pc, #8]	; (8000d44 <InitGY39+0x24>)
 8000d3a:	4803      	ldr	r0, [pc, #12]	; (8000d48 <InitGY39+0x28>)
 8000d3c:	f008 fe1c 	bl	8009978 <HAL_UART_Transmit_DMA>
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	240000fc 	.word	0x240000fc
 8000d48:	200046d8 	.word	0x200046d8

08000d4c <ReceiveGY39>:
/**
 * @brief 接收GY39温湿度大气压传感器数据
 * @return GY39Data GY39传感器数据接收结构体
 */
GY39Data ReceiveGY39(void)
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b087      	sub	sp, #28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	GY39Data RevGY39;

	RevGY39.Temperature = ((GY39Receive[4] << 8) | GY39Receive[5]);
 8000d54:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <ReceiveGY39+0x84>)
 8000d56:	791b      	ldrb	r3, [r3, #4]
 8000d58:	021b      	lsls	r3, r3, #8
 8000d5a:	b21a      	sxth	r2, r3
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <ReceiveGY39+0x84>)
 8000d5e:	795b      	ldrb	r3, [r3, #5]
 8000d60:	b21b      	sxth	r3, r3
 8000d62:	4313      	orrs	r3, r2
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	81bb      	strh	r3, [r7, #12]
	RevGY39.Baro = ((GY39Receive[8] << 24) | (GY39Receive[9] << 16)
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <ReceiveGY39+0x84>)
 8000d6c:	7a1b      	ldrb	r3, [r3, #8]
 8000d6e:	061a      	lsls	r2, r3, #24
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <ReceiveGY39+0x84>)
 8000d72:	7a5b      	ldrb	r3, [r3, #9]
 8000d74:	041b      	lsls	r3, r3, #16
 8000d76:	431a      	orrs	r2, r3
			| (GY39Receive[7] << 8) | GY39Receive[6]);
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <ReceiveGY39+0x84>)
 8000d7a:	79db      	ldrb	r3, [r3, #7]
 8000d7c:	021b      	lsls	r3, r3, #8
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	4a13      	ldr	r2, [pc, #76]	; (8000dd0 <ReceiveGY39+0x84>)
 8000d82:	7992      	ldrb	r2, [r2, #6]
 8000d84:	4313      	orrs	r3, r2
	RevGY39.Baro = ((GY39Receive[8] << 24) | (GY39Receive[9] << 16)
 8000d86:	613b      	str	r3, [r7, #16]
	RevGY39.Hum = ((GY39Receive[10] << 8) | GY39Receive[11]);
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <ReceiveGY39+0x84>)
 8000d8a:	7a9b      	ldrb	r3, [r3, #10]
 8000d8c:	021b      	lsls	r3, r3, #8
 8000d8e:	b21a      	sxth	r2, r3
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <ReceiveGY39+0x84>)
 8000d92:	7adb      	ldrb	r3, [r3, #11]
 8000d94:	b21b      	sxth	r3, r3
 8000d96:	4313      	orrs	r3, r2
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	82bb      	strh	r3, [r7, #20]

	__HAL_UART_ENABLE_IT(&GY39_UART, UART_IT_IDLE);
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <ReceiveGY39+0x88>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <ReceiveGY39+0x88>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f042 0210 	orr.w	r2, r2, #16
 8000dac:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&GY39_UART, GY39Receive, GY39_UART_RXLen);
 8000dae:	220f      	movs	r2, #15
 8000db0:	4907      	ldr	r1, [pc, #28]	; (8000dd0 <ReceiveGY39+0x84>)
 8000db2:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <ReceiveGY39+0x88>)
 8000db4:	f008 fe60 	bl	8009a78 <HAL_UART_Receive_DMA>

	return RevGY39;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	461c      	mov	r4, r3
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000dc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	371c      	adds	r7, #28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd90      	pop	{r4, r7, pc}
 8000dd0:	24000100 	.word	0x24000100
 8000dd4:	200046d8 	.word	0x200046d8

08000dd8 <ReceiveWT931>:
/**
 * @brief 接收WT931九轴传感器数据
 * @return WT931Data WT931九轴传感器数据结构体
 */
WT931Data ReceiveWT931(void)
{
 8000dd8:	b5b0      	push	{r4, r5, r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	WT931Data RevWT931;

	for (int i = 0; i < WT931_UART_RXLen; i++)
 8000de0:	2300      	movs	r3, #0
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
 8000de4:	e0e9      	b.n	8000fba <ReceiveWT931+0x1e2>
	{
		if ((WT931Receive[i] == 0x55) && (WT931Receive[i + 1] == 0x51))
 8000de6:	4a85      	ldr	r2, [pc, #532]	; (8000ffc <ReceiveWT931+0x224>)
 8000de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dea:	4413      	add	r3, r2
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b55      	cmp	r3, #85	; 0x55
 8000df0:	d133      	bne.n	8000e5a <ReceiveWT931+0x82>
 8000df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df4:	3301      	adds	r3, #1
 8000df6:	4a81      	ldr	r2, [pc, #516]	; (8000ffc <ReceiveWT931+0x224>)
 8000df8:	5cd3      	ldrb	r3, [r2, r3]
 8000dfa:	2b51      	cmp	r3, #81	; 0x51
 8000dfc:	d12d      	bne.n	8000e5a <ReceiveWT931+0x82>
		{
			RevWT931.AccNum[0] = ((WT931Receive[i + 3] << 8)
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e00:	3303      	adds	r3, #3
 8000e02:	4a7e      	ldr	r2, [pc, #504]	; (8000ffc <ReceiveWT931+0x224>)
 8000e04:	5cd3      	ldrb	r3, [r2, r3]
 8000e06:	021b      	lsls	r3, r3, #8
					| WT931Receive[i + 2]);
 8000e08:	b21a      	sxth	r2, r3
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	497b      	ldr	r1, [pc, #492]	; (8000ffc <ReceiveWT931+0x224>)
 8000e10:	5ccb      	ldrb	r3, [r1, r3]
 8000e12:	b21b      	sxth	r3, r3
 8000e14:	4313      	orrs	r3, r2
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	b29b      	uxth	r3, r3
			RevWT931.AccNum[0] = ((WT931Receive[i + 3] << 8)
 8000e1a:	81bb      	strh	r3, [r7, #12]
			RevWT931.AccNum[1] = ((WT931Receive[i + 5] << 8)
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1e:	3305      	adds	r3, #5
 8000e20:	4a76      	ldr	r2, [pc, #472]	; (8000ffc <ReceiveWT931+0x224>)
 8000e22:	5cd3      	ldrb	r3, [r2, r3]
 8000e24:	021b      	lsls	r3, r3, #8
					| WT931Receive[i + 4]);
 8000e26:	b21a      	sxth	r2, r3
 8000e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2a:	3304      	adds	r3, #4
 8000e2c:	4973      	ldr	r1, [pc, #460]	; (8000ffc <ReceiveWT931+0x224>)
 8000e2e:	5ccb      	ldrb	r3, [r1, r3]
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	4313      	orrs	r3, r2
 8000e34:	b21b      	sxth	r3, r3
 8000e36:	b29b      	uxth	r3, r3
			RevWT931.AccNum[1] = ((WT931Receive[i + 5] << 8)
 8000e38:	81fb      	strh	r3, [r7, #14]
			RevWT931.AccNum[2] = ((WT931Receive[i + 7] << 8)
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3c:	3307      	adds	r3, #7
 8000e3e:	4a6f      	ldr	r2, [pc, #444]	; (8000ffc <ReceiveWT931+0x224>)
 8000e40:	5cd3      	ldrb	r3, [r2, r3]
 8000e42:	021b      	lsls	r3, r3, #8
					| WT931Receive[i + 6]);
 8000e44:	b21a      	sxth	r2, r3
 8000e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e48:	3306      	adds	r3, #6
 8000e4a:	496c      	ldr	r1, [pc, #432]	; (8000ffc <ReceiveWT931+0x224>)
 8000e4c:	5ccb      	ldrb	r3, [r1, r3]
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	4313      	orrs	r3, r2
 8000e52:	b21b      	sxth	r3, r3
 8000e54:	b29b      	uxth	r3, r3
			RevWT931.AccNum[2] = ((WT931Receive[i + 7] << 8)
 8000e56:	823b      	strh	r3, [r7, #16]
 8000e58:	e0ac      	b.n	8000fb4 <ReceiveWT931+0x1dc>
		}
		else if ((WT931Receive[i] == 0x55) && (WT931Receive[i + 1] == 0x52))
 8000e5a:	4a68      	ldr	r2, [pc, #416]	; (8000ffc <ReceiveWT931+0x224>)
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5e:	4413      	add	r3, r2
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b55      	cmp	r3, #85	; 0x55
 8000e64:	d133      	bne.n	8000ece <ReceiveWT931+0xf6>
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	3301      	adds	r3, #1
 8000e6a:	4a64      	ldr	r2, [pc, #400]	; (8000ffc <ReceiveWT931+0x224>)
 8000e6c:	5cd3      	ldrb	r3, [r2, r3]
 8000e6e:	2b52      	cmp	r3, #82	; 0x52
 8000e70:	d12d      	bne.n	8000ece <ReceiveWT931+0xf6>
		{
			RevWT931.RotNum[0] = ((WT931Receive[i + 3] << 8)
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	3303      	adds	r3, #3
 8000e76:	4a61      	ldr	r2, [pc, #388]	; (8000ffc <ReceiveWT931+0x224>)
 8000e78:	5cd3      	ldrb	r3, [r2, r3]
 8000e7a:	021b      	lsls	r3, r3, #8
					| WT931Receive[i + 2]);
 8000e7c:	b21a      	sxth	r2, r3
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e80:	3302      	adds	r3, #2
 8000e82:	495e      	ldr	r1, [pc, #376]	; (8000ffc <ReceiveWT931+0x224>)
 8000e84:	5ccb      	ldrb	r3, [r1, r3]
 8000e86:	b21b      	sxth	r3, r3
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	b21b      	sxth	r3, r3
 8000e8c:	b29b      	uxth	r3, r3
			RevWT931.RotNum[0] = ((WT931Receive[i + 3] << 8)
 8000e8e:	827b      	strh	r3, [r7, #18]
			RevWT931.RotNum[1] = ((WT931Receive[i + 5] << 8)
 8000e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e92:	3305      	adds	r3, #5
 8000e94:	4a59      	ldr	r2, [pc, #356]	; (8000ffc <ReceiveWT931+0x224>)
 8000e96:	5cd3      	ldrb	r3, [r2, r3]
 8000e98:	021b      	lsls	r3, r3, #8
					| WT931Receive[i + 4]);
 8000e9a:	b21a      	sxth	r2, r3
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	4956      	ldr	r1, [pc, #344]	; (8000ffc <ReceiveWT931+0x224>)
 8000ea2:	5ccb      	ldrb	r3, [r1, r3]
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	b29b      	uxth	r3, r3
			RevWT931.RotNum[1] = ((WT931Receive[i + 5] << 8)
 8000eac:	82bb      	strh	r3, [r7, #20]
			RevWT931.RotNum[2] = ((WT931Receive[i + 7] << 8)
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	3307      	adds	r3, #7
 8000eb2:	4a52      	ldr	r2, [pc, #328]	; (8000ffc <ReceiveWT931+0x224>)
 8000eb4:	5cd3      	ldrb	r3, [r2, r3]
 8000eb6:	021b      	lsls	r3, r3, #8
					| WT931Receive[i + 6]);
 8000eb8:	b21a      	sxth	r2, r3
 8000eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebc:	3306      	adds	r3, #6
 8000ebe:	494f      	ldr	r1, [pc, #316]	; (8000ffc <ReceiveWT931+0x224>)
 8000ec0:	5ccb      	ldrb	r3, [r1, r3]
 8000ec2:	b21b      	sxth	r3, r3
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b21b      	sxth	r3, r3
 8000ec8:	b29b      	uxth	r3, r3
			RevWT931.RotNum[2] = ((WT931Receive[i + 7] << 8)
 8000eca:	82fb      	strh	r3, [r7, #22]
 8000ecc:	e072      	b.n	8000fb4 <ReceiveWT931+0x1dc>
		}
		else if ((WT931Receive[i] == 0x55) && (WT931Receive[i + 1] == 0x53))
 8000ece:	4a4b      	ldr	r2, [pc, #300]	; (8000ffc <ReceiveWT931+0x224>)
 8000ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed2:	4413      	add	r3, r2
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b55      	cmp	r3, #85	; 0x55
 8000ed8:	d133      	bne.n	8000f42 <ReceiveWT931+0x16a>
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	3301      	adds	r3, #1
 8000ede:	4a47      	ldr	r2, [pc, #284]	; (8000ffc <ReceiveWT931+0x224>)
 8000ee0:	5cd3      	ldrb	r3, [r2, r3]
 8000ee2:	2b53      	cmp	r3, #83	; 0x53
 8000ee4:	d12d      	bne.n	8000f42 <ReceiveWT931+0x16a>
		{
			RevWT931.EulNum[0] = ((WT931Receive[i + 3] << 8)
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee8:	3303      	adds	r3, #3
 8000eea:	4a44      	ldr	r2, [pc, #272]	; (8000ffc <ReceiveWT931+0x224>)
 8000eec:	5cd3      	ldrb	r3, [r2, r3]
 8000eee:	021b      	lsls	r3, r3, #8
					| WT931Receive[i + 2]);
 8000ef0:	b21a      	sxth	r2, r3
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	4941      	ldr	r1, [pc, #260]	; (8000ffc <ReceiveWT931+0x224>)
 8000ef8:	5ccb      	ldrb	r3, [r1, r3]
 8000efa:	b21b      	sxth	r3, r3
 8000efc:	4313      	orrs	r3, r2
 8000efe:	b21b      	sxth	r3, r3
 8000f00:	b29b      	uxth	r3, r3
			RevWT931.EulNum[0] = ((WT931Receive[i + 3] << 8)
 8000f02:	833b      	strh	r3, [r7, #24]
			RevWT931.EulNum[1] = ((WT931Receive[i + 5] << 8)
 8000f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f06:	3305      	adds	r3, #5
 8000f08:	4a3c      	ldr	r2, [pc, #240]	; (8000ffc <ReceiveWT931+0x224>)
 8000f0a:	5cd3      	ldrb	r3, [r2, r3]
 8000f0c:	021b      	lsls	r3, r3, #8
					| WT931Receive[i + 4]);
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	3304      	adds	r3, #4
 8000f14:	4939      	ldr	r1, [pc, #228]	; (8000ffc <ReceiveWT931+0x224>)
 8000f16:	5ccb      	ldrb	r3, [r1, r3]
 8000f18:	b21b      	sxth	r3, r3
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	b21b      	sxth	r3, r3
 8000f1e:	b29b      	uxth	r3, r3
			RevWT931.EulNum[1] = ((WT931Receive[i + 5] << 8)
 8000f20:	837b      	strh	r3, [r7, #26]
			RevWT931.EulNum[2] = ((WT931Receive[i + 7] << 8)
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	3307      	adds	r3, #7
 8000f26:	4a35      	ldr	r2, [pc, #212]	; (8000ffc <ReceiveWT931+0x224>)
 8000f28:	5cd3      	ldrb	r3, [r2, r3]
 8000f2a:	021b      	lsls	r3, r3, #8
					| WT931Receive[i + 6]);
 8000f2c:	b21a      	sxth	r2, r3
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	3306      	adds	r3, #6
 8000f32:	4932      	ldr	r1, [pc, #200]	; (8000ffc <ReceiveWT931+0x224>)
 8000f34:	5ccb      	ldrb	r3, [r1, r3]
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	b29b      	uxth	r3, r3
			RevWT931.EulNum[2] = ((WT931Receive[i + 7] << 8)
 8000f3e:	83bb      	strh	r3, [r7, #28]
 8000f40:	e038      	b.n	8000fb4 <ReceiveWT931+0x1dc>
		}
		else if ((WT931Receive[i] == 0x55) && (WT931Receive[i + 1] == 0x54))
 8000f42:	4a2e      	ldr	r2, [pc, #184]	; (8000ffc <ReceiveWT931+0x224>)
 8000f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f46:	4413      	add	r3, r2
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b55      	cmp	r3, #85	; 0x55
 8000f4c:	d132      	bne.n	8000fb4 <ReceiveWT931+0x1dc>
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	3301      	adds	r3, #1
 8000f52:	4a2a      	ldr	r2, [pc, #168]	; (8000ffc <ReceiveWT931+0x224>)
 8000f54:	5cd3      	ldrb	r3, [r2, r3]
 8000f56:	2b54      	cmp	r3, #84	; 0x54
 8000f58:	d12c      	bne.n	8000fb4 <ReceiveWT931+0x1dc>
		{
			RevWT931.MagNum[0] = ((WT931Receive[i + 3] << 8)
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	3303      	adds	r3, #3
 8000f5e:	4a27      	ldr	r2, [pc, #156]	; (8000ffc <ReceiveWT931+0x224>)
 8000f60:	5cd3      	ldrb	r3, [r2, r3]
 8000f62:	021b      	lsls	r3, r3, #8
					| WT931Receive[i + 2]);
 8000f64:	b21a      	sxth	r2, r3
 8000f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f68:	3302      	adds	r3, #2
 8000f6a:	4924      	ldr	r1, [pc, #144]	; (8000ffc <ReceiveWT931+0x224>)
 8000f6c:	5ccb      	ldrb	r3, [r1, r3]
 8000f6e:	b21b      	sxth	r3, r3
 8000f70:	4313      	orrs	r3, r2
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	b29b      	uxth	r3, r3
			RevWT931.MagNum[0] = ((WT931Receive[i + 3] << 8)
 8000f76:	83fb      	strh	r3, [r7, #30]
			RevWT931.MagNum[1] = ((WT931Receive[i + 5] << 8)
 8000f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7a:	3305      	adds	r3, #5
 8000f7c:	4a1f      	ldr	r2, [pc, #124]	; (8000ffc <ReceiveWT931+0x224>)
 8000f7e:	5cd3      	ldrb	r3, [r2, r3]
 8000f80:	021b      	lsls	r3, r3, #8
					| WT931Receive[i + 4]);
 8000f82:	b21a      	sxth	r2, r3
 8000f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f86:	3304      	adds	r3, #4
 8000f88:	491c      	ldr	r1, [pc, #112]	; (8000ffc <ReceiveWT931+0x224>)
 8000f8a:	5ccb      	ldrb	r3, [r1, r3]
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	b29b      	uxth	r3, r3
			RevWT931.MagNum[1] = ((WT931Receive[i + 5] << 8)
 8000f94:	843b      	strh	r3, [r7, #32]
			RevWT931.MagNum[2] = ((WT931Receive[i + 7] << 8)
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	3307      	adds	r3, #7
 8000f9a:	4a18      	ldr	r2, [pc, #96]	; (8000ffc <ReceiveWT931+0x224>)
 8000f9c:	5cd3      	ldrb	r3, [r2, r3]
 8000f9e:	021b      	lsls	r3, r3, #8
					| WT931Receive[i + 6]);
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa4:	3306      	adds	r3, #6
 8000fa6:	4915      	ldr	r1, [pc, #84]	; (8000ffc <ReceiveWT931+0x224>)
 8000fa8:	5ccb      	ldrb	r3, [r1, r3]
 8000faa:	b21b      	sxth	r3, r3
 8000fac:	4313      	orrs	r3, r2
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	b29b      	uxth	r3, r3
			RevWT931.MagNum[2] = ((WT931Receive[i + 7] << 8)
 8000fb2:	847b      	strh	r3, [r7, #34]	; 0x22
	for (int i = 0; i < WT931_UART_RXLen; i++)
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	2b2b      	cmp	r3, #43	; 0x2b
 8000fbe:	f77f af12 	ble.w	8000de6 <ReceiveWT931+0xe>
//	RevWT931.EulNum[2] = ((WT931Receive[29] << 8) | WT931Receive[28]);
//
//	RevWT931.MagNum[0] = ((WT931Receive[36] << 8) | WT931Receive[35]);
//	RevWT931.MagNum[1] = ((WT931Receive[38] << 8) | WT931Receive[37]);
//	RevWT931.MagNum[2] = ((WT931Receive[40] << 8) | WT931Receive[39]);
	__HAL_UART_ENABLE_IT(&WT931_UART, UART_IT_IDLE);
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <ReceiveWT931+0x228>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <ReceiveWT931+0x228>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f042 0210 	orr.w	r2, r2, #16
 8000fd0:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&WT931_UART, WT931Receive, WT931_UART_RXLen);
 8000fd2:	222c      	movs	r2, #44	; 0x2c
 8000fd4:	4909      	ldr	r1, [pc, #36]	; (8000ffc <ReceiveWT931+0x224>)
 8000fd6:	480a      	ldr	r0, [pc, #40]	; (8001000 <ReceiveWT931+0x228>)
 8000fd8:	f008 fd4e 	bl	8009a78 <HAL_UART_Receive_DMA>

//	HAL_UART_Receive_DMA(&WT931_UART, WT931Receive, 45);

	return RevWT931;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	461d      	mov	r5, r3
 8000fe0:	f107 040c 	add.w	r4, r7, #12
 8000fe4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe6:	6028      	str	r0, [r5, #0]
 8000fe8:	6069      	str	r1, [r5, #4]
 8000fea:	60aa      	str	r2, [r5, #8]
 8000fec:	60eb      	str	r3, [r5, #12]
 8000fee:	cc03      	ldmia	r4!, {r0, r1}
 8000ff0:	6128      	str	r0, [r5, #16]
 8000ff2:	6169      	str	r1, [r5, #20]
}
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	3728      	adds	r7, #40	; 0x28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bdb0      	pop	{r4, r5, r7, pc}
 8000ffc:	240000d0 	.word	0x240000d0
 8001000:	2000415c 	.word	0x2000415c

08001004 <ReceiveDeep>:
/**
 * @brief 接收水深水温传感器数据
 * @return DeepData 水深水温传感器数据结构体
 */
DeepData ReceiveDeep(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
	DeepData RevDeep;

//	RevDeep.WaterDepth = ((DeepReceive[1] << 8) | DeepReceive[0]);
//	RevDeep.WaterTemperature = ((DeepReceive[3] << 8) | DeepReceive[2]);

	u8 temperature_origin_data[4] =
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
	{ 0 };
	u8 depth_origin_data[3] =
 800100e:	4b85      	ldr	r3, [pc, #532]	; (8001224 <ReceiveDeep+0x220>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	80bb      	strh	r3, [r7, #4]
 8001014:	2300      	movs	r3, #0
 8001016:	71bb      	strb	r3, [r7, #6]
	{ 0 };

	for (int i = 0; i < Deep_UART_RXLen; i++)
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	e0a5      	b.n	800116a <ReceiveDeep+0x166>
	{
		if ((DeepReceive[i] == 'T') && (DeepReceive[i + 1] == '='))
 800101e:	4a82      	ldr	r2, [pc, #520]	; (8001228 <ReceiveDeep+0x224>)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b54      	cmp	r3, #84	; 0x54
 8001028:	d151      	bne.n	80010ce <ReceiveDeep+0xca>
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3301      	adds	r3, #1
 800102e:	4a7e      	ldr	r2, [pc, #504]	; (8001228 <ReceiveDeep+0x224>)
 8001030:	5cd3      	ldrb	r3, [r2, r3]
 8001032:	2b3d      	cmp	r3, #61	; 0x3d
 8001034:	d14b      	bne.n	80010ce <ReceiveDeep+0xca>
		{ //解析温度
			if ((DeepReceive[i + 2] >= '0') && (DeepReceive[i + 2] <= '9'))
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	3302      	adds	r3, #2
 800103a:	4a7b      	ldr	r2, [pc, #492]	; (8001228 <ReceiveDeep+0x224>)
 800103c:	5cd3      	ldrb	r3, [r2, r3]
 800103e:	2b2f      	cmp	r3, #47	; 0x2f
 8001040:	d922      	bls.n	8001088 <ReceiveDeep+0x84>
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3302      	adds	r3, #2
 8001046:	4a78      	ldr	r2, [pc, #480]	; (8001228 <ReceiveDeep+0x224>)
 8001048:	5cd3      	ldrb	r3, [r2, r3]
 800104a:	2b39      	cmp	r3, #57	; 0x39
 800104c:	d81c      	bhi.n	8001088 <ReceiveDeep+0x84>
			{ //温度为正
				temperature_origin_data[0] = DeepReceive[i + 2] - '0';
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	3302      	adds	r3, #2
 8001052:	4a75      	ldr	r2, [pc, #468]	; (8001228 <ReceiveDeep+0x224>)
 8001054:	5cd3      	ldrb	r3, [r2, r3]
 8001056:	3b30      	subs	r3, #48	; 0x30
 8001058:	b2db      	uxtb	r3, r3
 800105a:	723b      	strb	r3, [r7, #8]
				temperature_origin_data[1] = DeepReceive[i + 3] - '0';
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	3303      	adds	r3, #3
 8001060:	4a71      	ldr	r2, [pc, #452]	; (8001228 <ReceiveDeep+0x224>)
 8001062:	5cd3      	ldrb	r3, [r2, r3]
 8001064:	3b30      	subs	r3, #48	; 0x30
 8001066:	b2db      	uxtb	r3, r3
 8001068:	727b      	strb	r3, [r7, #9]
				temperature_origin_data[2] = DeepReceive[i + 5] - '0';
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3305      	adds	r3, #5
 800106e:	4a6e      	ldr	r2, [pc, #440]	; (8001228 <ReceiveDeep+0x224>)
 8001070:	5cd3      	ldrb	r3, [r2, r3]
 8001072:	3b30      	subs	r3, #48	; 0x30
 8001074:	b2db      	uxtb	r3, r3
 8001076:	72bb      	strb	r3, [r7, #10]
				temperature_origin_data[3] = DeepReceive[i + 6] - '0';
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	3306      	adds	r3, #6
 800107c:	4a6a      	ldr	r2, [pc, #424]	; (8001228 <ReceiveDeep+0x224>)
 800107e:	5cd3      	ldrb	r3, [r2, r3]
 8001080:	3b30      	subs	r3, #48	; 0x30
 8001082:	b2db      	uxtb	r3, r3
 8001084:	72fb      	strb	r3, [r7, #11]
			if ((DeepReceive[i + 2] >= '0') && (DeepReceive[i + 2] <= '9'))
 8001086:	e06c      	b.n	8001162 <ReceiveDeep+0x15e>
			}
			else if (DeepReceive[i + 2] == '-')
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	3302      	adds	r3, #2
 800108c:	4a66      	ldr	r2, [pc, #408]	; (8001228 <ReceiveDeep+0x224>)
 800108e:	5cd3      	ldrb	r3, [r2, r3]
 8001090:	2b2d      	cmp	r3, #45	; 0x2d
 8001092:	d166      	bne.n	8001162 <ReceiveDeep+0x15e>
			{ //温度为负
				temperature_origin_data[0] = DeepReceive[i + 3] - '0';
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	3303      	adds	r3, #3
 8001098:	4a63      	ldr	r2, [pc, #396]	; (8001228 <ReceiveDeep+0x224>)
 800109a:	5cd3      	ldrb	r3, [r2, r3]
 800109c:	3b30      	subs	r3, #48	; 0x30
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	723b      	strb	r3, [r7, #8]
				temperature_origin_data[1] = DeepReceive[i + 4] - '0';
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	3304      	adds	r3, #4
 80010a6:	4a60      	ldr	r2, [pc, #384]	; (8001228 <ReceiveDeep+0x224>)
 80010a8:	5cd3      	ldrb	r3, [r2, r3]
 80010aa:	3b30      	subs	r3, #48	; 0x30
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	727b      	strb	r3, [r7, #9]
				temperature_origin_data[2] = DeepReceive[i + 6] - '0';
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	3306      	adds	r3, #6
 80010b4:	4a5c      	ldr	r2, [pc, #368]	; (8001228 <ReceiveDeep+0x224>)
 80010b6:	5cd3      	ldrb	r3, [r2, r3]
 80010b8:	3b30      	subs	r3, #48	; 0x30
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	72bb      	strb	r3, [r7, #10]
				temperature_origin_data[3] = DeepReceive[i + 7] - '0';
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	3307      	adds	r3, #7
 80010c2:	4a59      	ldr	r2, [pc, #356]	; (8001228 <ReceiveDeep+0x224>)
 80010c4:	5cd3      	ldrb	r3, [r2, r3]
 80010c6:	3b30      	subs	r3, #48	; 0x30
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	72fb      	strb	r3, [r7, #11]
			if ((DeepReceive[i + 2] >= '0') && (DeepReceive[i + 2] <= '9'))
 80010cc:	e049      	b.n	8001162 <ReceiveDeep+0x15e>
			}
		}
		else if ((DeepReceive[i] == 'D') && (DeepReceive[i + 1] == '='))
 80010ce:	4a56      	ldr	r2, [pc, #344]	; (8001228 <ReceiveDeep+0x224>)
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	4413      	add	r3, r2
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b44      	cmp	r3, #68	; 0x44
 80010d8:	d144      	bne.n	8001164 <ReceiveDeep+0x160>
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	4a52      	ldr	r2, [pc, #328]	; (8001228 <ReceiveDeep+0x224>)
 80010e0:	5cd3      	ldrb	r3, [r2, r3]
 80010e2:	2b3d      	cmp	r3, #61	; 0x3d
 80010e4:	d13e      	bne.n	8001164 <ReceiveDeep+0x160>
		{ //解析深度
			if (DeepReceive[i + 2] == '-')
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3302      	adds	r3, #2
 80010ea:	4a4f      	ldr	r2, [pc, #316]	; (8001228 <ReceiveDeep+0x224>)
 80010ec:	5cd3      	ldrb	r3, [r2, r3]
 80010ee:	2b2d      	cmp	r3, #45	; 0x2d
 80010f0:	d115      	bne.n	800111e <ReceiveDeep+0x11a>
			{ //深度为负
				depth_origin_data[0] = DeepReceive[i + 3] - '0';
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	3303      	adds	r3, #3
 80010f6:	4a4c      	ldr	r2, [pc, #304]	; (8001228 <ReceiveDeep+0x224>)
 80010f8:	5cd3      	ldrb	r3, [r2, r3]
 80010fa:	3b30      	subs	r3, #48	; 0x30
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	713b      	strb	r3, [r7, #4]
				depth_origin_data[1] = DeepReceive[i + 5] - '0';
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	3305      	adds	r3, #5
 8001104:	4a48      	ldr	r2, [pc, #288]	; (8001228 <ReceiveDeep+0x224>)
 8001106:	5cd3      	ldrb	r3, [r2, r3]
 8001108:	3b30      	subs	r3, #48	; 0x30
 800110a:	b2db      	uxtb	r3, r3
 800110c:	717b      	strb	r3, [r7, #5]
				depth_origin_data[2] = DeepReceive[i + 6] - '0';
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	3306      	adds	r3, #6
 8001112:	4a45      	ldr	r2, [pc, #276]	; (8001228 <ReceiveDeep+0x224>)
 8001114:	5cd3      	ldrb	r3, [r2, r3]
 8001116:	3b30      	subs	r3, #48	; 0x30
 8001118:	b2db      	uxtb	r3, r3
 800111a:	71bb      	strb	r3, [r7, #6]
 800111c:	e022      	b.n	8001164 <ReceiveDeep+0x160>
			}
			else if ((DeepReceive[i + 2] >= '0') && (DeepReceive[i + 2] <= '9'))
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3302      	adds	r3, #2
 8001122:	4a41      	ldr	r2, [pc, #260]	; (8001228 <ReceiveDeep+0x224>)
 8001124:	5cd3      	ldrb	r3, [r2, r3]
 8001126:	2b2f      	cmp	r3, #47	; 0x2f
 8001128:	d91c      	bls.n	8001164 <ReceiveDeep+0x160>
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	3302      	adds	r3, #2
 800112e:	4a3e      	ldr	r2, [pc, #248]	; (8001228 <ReceiveDeep+0x224>)
 8001130:	5cd3      	ldrb	r3, [r2, r3]
 8001132:	2b39      	cmp	r3, #57	; 0x39
 8001134:	d816      	bhi.n	8001164 <ReceiveDeep+0x160>
			{ //深度为正
				depth_origin_data[0] = DeepReceive[i + 2] - '0';
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3302      	adds	r3, #2
 800113a:	4a3b      	ldr	r2, [pc, #236]	; (8001228 <ReceiveDeep+0x224>)
 800113c:	5cd3      	ldrb	r3, [r2, r3]
 800113e:	3b30      	subs	r3, #48	; 0x30
 8001140:	b2db      	uxtb	r3, r3
 8001142:	713b      	strb	r3, [r7, #4]
				depth_origin_data[1] = DeepReceive[i + 4] - '0';
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	3304      	adds	r3, #4
 8001148:	4a37      	ldr	r2, [pc, #220]	; (8001228 <ReceiveDeep+0x224>)
 800114a:	5cd3      	ldrb	r3, [r2, r3]
 800114c:	3b30      	subs	r3, #48	; 0x30
 800114e:	b2db      	uxtb	r3, r3
 8001150:	717b      	strb	r3, [r7, #5]
				depth_origin_data[2] = DeepReceive[i + 5] - '0';
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	3305      	adds	r3, #5
 8001156:	4a34      	ldr	r2, [pc, #208]	; (8001228 <ReceiveDeep+0x224>)
 8001158:	5cd3      	ldrb	r3, [r2, r3]
 800115a:	3b30      	subs	r3, #48	; 0x30
 800115c:	b2db      	uxtb	r3, r3
 800115e:	71bb      	strb	r3, [r7, #6]
 8001160:	e000      	b.n	8001164 <ReceiveDeep+0x160>
			if ((DeepReceive[i + 2] >= '0') && (DeepReceive[i + 2] <= '9'))
 8001162:	bf00      	nop
	for (int i = 0; i < Deep_UART_RXLen; i++)
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	3301      	adds	r3, #1
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	2b0e      	cmp	r3, #14
 800116e:	f77f af56 	ble.w	800101e <ReceiveDeep+0x1a>
//			| (temperature_origin_data[1] << 16)
//			| (temperature_origin_data[2] << 8) | (temperature_origin_data[3]);
//	RevDeep.WaterDepth = (depth_origin_data[0] << 16)
//			| (depth_origin_data[1] << 8) + (depth_origin_data[2]);

	RevDeep.WaterTemperature = (temperature_origin_data[0] * 1000)
 8001172:	7a3b      	ldrb	r3, [r7, #8]
			+ (temperature_origin_data[1] * 100)
 8001174:	b29b      	uxth	r3, r3
 8001176:	461a      	mov	r2, r3
 8001178:	0152      	lsls	r2, r2, #5
 800117a:	1ad2      	subs	r2, r2, r3
 800117c:	0092      	lsls	r2, r2, #2
 800117e:	4413      	add	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	b29a      	uxth	r2, r3
 8001184:	7a7b      	ldrb	r3, [r7, #9]
 8001186:	b29b      	uxth	r3, r3
 8001188:	4619      	mov	r1, r3
 800118a:	0089      	lsls	r1, r1, #2
 800118c:	440b      	add	r3, r1
 800118e:	4619      	mov	r1, r3
 8001190:	0088      	lsls	r0, r1, #2
 8001192:	4619      	mov	r1, r3
 8001194:	4603      	mov	r3, r0
 8001196:	440b      	add	r3, r1
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	b29b      	uxth	r3, r3
 800119c:	4413      	add	r3, r2
 800119e:	b29a      	uxth	r2, r3
			+ (temperature_origin_data[2] * 10) + (temperature_origin_data[3]);
 80011a0:	7abb      	ldrb	r3, [r7, #10]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	4619      	mov	r1, r3
 80011a6:	0089      	lsls	r1, r1, #2
 80011a8:	440b      	add	r3, r1
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	4413      	add	r3, r2
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	7afb      	ldrb	r3, [r7, #11]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4413      	add	r3, r2
 80011b8:	b29b      	uxth	r3, r3
	RevDeep.WaterTemperature = (temperature_origin_data[0] * 1000)
 80011ba:	81bb      	strh	r3, [r7, #12]
	RevDeep.WaterDepth = (depth_origin_data[0] * 100)
 80011bc:	793b      	ldrb	r3, [r7, #4]
			+ (depth_origin_data[1] * 10) + (depth_origin_data[2]);
 80011be:	b29b      	uxth	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	0092      	lsls	r2, r2, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	461a      	mov	r2, r3
 80011c8:	0091      	lsls	r1, r2, #2
 80011ca:	461a      	mov	r2, r3
 80011cc:	460b      	mov	r3, r1
 80011ce:	4413      	add	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	797b      	ldrb	r3, [r7, #5]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	4619      	mov	r1, r3
 80011da:	0089      	lsls	r1, r1, #2
 80011dc:	440b      	add	r3, r1
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	4413      	add	r3, r2
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	79bb      	ldrb	r3, [r7, #6]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	4413      	add	r3, r2
 80011ec:	b29b      	uxth	r3, r3
	RevDeep.WaterDepth = (depth_origin_data[0] * 100)
 80011ee:	81fb      	strh	r3, [r7, #14]

//	__HAL_UART_ENABLE_IT(&Deep_UART, UART_IT_IDLE);
//	HAL_UART_Receive_DMA(&Deep_UART, DeepReceive, Deep_UART_RXLen);
	__HAL_UART_ENABLE_IT(&Deep_UART, UART_IT_IDLE);
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <ReceiveDeep+0x228>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <ReceiveDeep+0x228>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0210 	orr.w	r2, r2, #16
 80011fe:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Deep_UART, DeepReceive, Deep_UART_RXLen);
 8001200:	220f      	movs	r2, #15
 8001202:	4909      	ldr	r1, [pc, #36]	; (8001228 <ReceiveDeep+0x224>)
 8001204:	4809      	ldr	r0, [pc, #36]	; (800122c <ReceiveDeep+0x228>)
 8001206:	f008 fc37 	bl	8009a78 <HAL_UART_Receive_DMA>

	return RevDeep;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	2300      	movs	r3, #0
 8001210:	8a3a      	ldrh	r2, [r7, #16]
 8001212:	f362 030f 	bfi	r3, r2, #0, #16
 8001216:	8a7a      	ldrh	r2, [r7, #18]
 8001218:	f362 431f 	bfi	r3, r2, #16, #16
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	0800dd98 	.word	0x0800dd98
 8001228:	24000110 	.word	0x24000110
 800122c:	20004640 	.word	0x20004640

08001230 <InitP30>:

/**
 * @brief 声呐传感器初始化
 */
void InitP30(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	//42 52 02 00 78 05 00 00 BB 04 D2 01
	P30Send[0] = 0x42;
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <InitP30+0x5c>)
 8001236:	2242      	movs	r2, #66	; 0x42
 8001238:	701a      	strb	r2, [r3, #0]
	P30Send[1] = 0x52;
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <InitP30+0x5c>)
 800123c:	2252      	movs	r2, #82	; 0x52
 800123e:	705a      	strb	r2, [r3, #1]
	P30Send[2] = 0x02;
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <InitP30+0x5c>)
 8001242:	2202      	movs	r2, #2
 8001244:	709a      	strb	r2, [r3, #2]
	P30Send[3] = 0x00;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <InitP30+0x5c>)
 8001248:	2200      	movs	r2, #0
 800124a:	70da      	strb	r2, [r3, #3]
	P30Send[4] = 0x05;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <InitP30+0x5c>)
 800124e:	2205      	movs	r2, #5
 8001250:	711a      	strb	r2, [r3, #4]
	P30Send[5] = 0x00;
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <InitP30+0x5c>)
 8001254:	2200      	movs	r2, #0
 8001256:	715a      	strb	r2, [r3, #5]
	P30Send[6] = 0x00;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <InitP30+0x5c>)
 800125a:	2200      	movs	r2, #0
 800125c:	719a      	strb	r2, [r3, #6]
	P30Send[7] = 0x00;
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <InitP30+0x5c>)
 8001260:	2200      	movs	r2, #0
 8001262:	71da      	strb	r2, [r3, #7]
	P30Send[8] = 0xBB;
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <InitP30+0x5c>)
 8001266:	22bb      	movs	r2, #187	; 0xbb
 8001268:	721a      	strb	r2, [r3, #8]
	P30Send[9] = 0x04;
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <InitP30+0x5c>)
 800126c:	2204      	movs	r2, #4
 800126e:	725a      	strb	r2, [r3, #9]
	P30Send[10] = 0xD2;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <InitP30+0x5c>)
 8001272:	22d2      	movs	r2, #210	; 0xd2
 8001274:	729a      	strb	r2, [r3, #10]
	P30Send[11] = 0x01;
 8001276:	4b05      	ldr	r3, [pc, #20]	; (800128c <InitP30+0x5c>)
 8001278:	2201      	movs	r2, #1
 800127a:	72da      	strb	r2, [r3, #11]

	HAL_UART_Transmit_DMA(&GP30_UART, P30Send, P30_UART_TXLen);
 800127c:	220c      	movs	r2, #12
 800127e:	4903      	ldr	r1, [pc, #12]	; (800128c <InitP30+0x5c>)
 8001280:	4803      	ldr	r0, [pc, #12]	; (8001290 <InitP30+0x60>)
 8001282:	f008 fb79 	bl	8009978 <HAL_UART_Transmit_DMA>
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	24000120 	.word	0x24000120
 8001290:	20004294 	.word	0x20004294

08001294 <ReceiveP30>:
/**
 * @brief 接收声呐传感器数据
 * @return P30Data 声呐传感器数据结构体
 */
P30Data ReceiveP30(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	P30Data RevP30;

	uint8_t FrameState = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	77fb      	strb	r3, [r7, #31]
	uint8_t Bytenum = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	77bb      	strb	r3, [r7, #30]
	uint8_t CheckSum = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	777b      	strb	r3, [r7, #29]
	uint8_t datahex[11];

	for (uint8_t i = 0; i < 33; i++)
 80012a8:	2300      	movs	r3, #0
 80012aa:	773b      	strb	r3, [r7, #28]
 80012ac:	e064      	b.n	8001378 <ReceiveP30+0xe4>
	{
		if (FrameState == 0)
 80012ae:	7ffb      	ldrb	r3, [r7, #31]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d121      	bne.n	80012f8 <ReceiveP30+0x64>
		{
			if ((P30Receive[i] == 0x42) && (Bytenum == 0))
 80012b4:	7f3b      	ldrb	r3, [r7, #28]
 80012b6:	4a3e      	ldr	r2, [pc, #248]	; (80013b0 <ReceiveP30+0x11c>)
 80012b8:	5cd3      	ldrb	r3, [r2, r3]
 80012ba:	2b42      	cmp	r3, #66	; 0x42
 80012bc:	d109      	bne.n	80012d2 <ReceiveP30+0x3e>
 80012be:	7fbb      	ldrb	r3, [r7, #30]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d106      	bne.n	80012d2 <ReceiveP30+0x3e>
			{
				CheckSum = P30Receive[i];
 80012c4:	7f3b      	ldrb	r3, [r7, #28]
 80012c6:	4a3a      	ldr	r2, [pc, #232]	; (80013b0 <ReceiveP30+0x11c>)
 80012c8:	5cd3      	ldrb	r3, [r2, r3]
 80012ca:	777b      	strb	r3, [r7, #29]
				Bytenum = 1;
 80012cc:	2301      	movs	r3, #1
 80012ce:	77bb      	strb	r3, [r7, #30]
				continue;
 80012d0:	e04f      	b.n	8001372 <ReceiveP30+0xde>
			}
			else if ((P30Receive[i] == 0x52) && (Bytenum == 1))
 80012d2:	7f3b      	ldrb	r3, [r7, #28]
 80012d4:	4a36      	ldr	r2, [pc, #216]	; (80013b0 <ReceiveP30+0x11c>)
 80012d6:	5cd3      	ldrb	r3, [r2, r3]
 80012d8:	2b52      	cmp	r3, #82	; 0x52
 80012da:	d14a      	bne.n	8001372 <ReceiveP30+0xde>
 80012dc:	7fbb      	ldrb	r3, [r7, #30]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d147      	bne.n	8001372 <ReceiveP30+0xde>
			{
				CheckSum += P30Receive[i];
 80012e2:	7f3b      	ldrb	r3, [r7, #28]
 80012e4:	4a32      	ldr	r2, [pc, #200]	; (80013b0 <ReceiveP30+0x11c>)
 80012e6:	5cd2      	ldrb	r2, [r2, r3]
 80012e8:	7f7b      	ldrb	r3, [r7, #29]
 80012ea:	4413      	add	r3, r2
 80012ec:	777b      	strb	r3, [r7, #29]
				Bytenum = 2;
 80012ee:	2302      	movs	r3, #2
 80012f0:	77bb      	strb	r3, [r7, #30]
				FrameState = 1;
 80012f2:	2301      	movs	r3, #1
 80012f4:	77fb      	strb	r3, [r7, #31]
				continue;
 80012f6:	e03c      	b.n	8001372 <ReceiveP30+0xde>
			}
		}
		else if (FrameState == 1)
 80012f8:	7ffb      	ldrb	r3, [r7, #31]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d139      	bne.n	8001372 <ReceiveP30+0xde>
		{
			if (Bytenum < 13)
 80012fe:	7fbb      	ldrb	r3, [r7, #30]
 8001300:	2b0c      	cmp	r3, #12
 8001302:	d813      	bhi.n	800132c <ReceiveP30+0x98>
			{
				datahex[Bytenum - 2] = P30Receive[i];
 8001304:	7f3a      	ldrb	r2, [r7, #28]
 8001306:	7fbb      	ldrb	r3, [r7, #30]
 8001308:	3b02      	subs	r3, #2
 800130a:	4929      	ldr	r1, [pc, #164]	; (80013b0 <ReceiveP30+0x11c>)
 800130c:	5c8a      	ldrb	r2, [r1, r2]
 800130e:	f107 0120 	add.w	r1, r7, #32
 8001312:	440b      	add	r3, r1
 8001314:	f803 2c18 	strb.w	r2, [r3, #-24]
				CheckSum += P30Receive[i];
 8001318:	7f3b      	ldrb	r3, [r7, #28]
 800131a:	4a25      	ldr	r2, [pc, #148]	; (80013b0 <ReceiveP30+0x11c>)
 800131c:	5cd2      	ldrb	r2, [r2, r3]
 800131e:	7f7b      	ldrb	r3, [r7, #29]
 8001320:	4413      	add	r3, r2
 8001322:	777b      	strb	r3, [r7, #29]
				Bytenum++;
 8001324:	7fbb      	ldrb	r3, [r7, #30]
 8001326:	3301      	adds	r3, #1
 8001328:	77bb      	strb	r3, [r7, #30]
 800132a:	e022      	b.n	8001372 <ReceiveP30+0xde>
			}
			else
			{
				if (P30Receive[i] == (CheckSum & 0xFF))
 800132c:	7f3b      	ldrb	r3, [r7, #28]
 800132e:	4a20      	ldr	r2, [pc, #128]	; (80013b0 <ReceiveP30+0x11c>)
 8001330:	5cd3      	ldrb	r3, [r2, r3]
 8001332:	7f7a      	ldrb	r2, [r7, #29]
 8001334:	429a      	cmp	r2, r3
 8001336:	d116      	bne.n	8001366 <ReceiveP30+0xd2>
				{
					RevP30.Confidence = (datahex[10]) | (datahex[11]);
 8001338:	7cba      	ldrb	r2, [r7, #18]
 800133a:	7cfb      	ldrb	r3, [r7, #19]
 800133c:	4313      	orrs	r3, r2
 800133e:	b2db      	uxtb	r3, r3
 8001340:	b29b      	uxth	r3, r3
 8001342:	833b      	strh	r3, [r7, #24]
					RevP30.DepthToBottom = (((datahex[6] << 24)
 8001344:	7bbb      	ldrb	r3, [r7, #14]
 8001346:	061a      	lsls	r2, r3, #24
							| (datahex[7] << 16) | (datahex[8] << 8)
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	041b      	lsls	r3, r3, #16
 800134c:	431a      	orrs	r2, r3
 800134e:	7c3b      	ldrb	r3, [r7, #16]
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	4313      	orrs	r3, r2
							| (datahex[9])) / 1000);
 8001354:	7c7a      	ldrb	r2, [r7, #17]
 8001356:	4313      	orrs	r3, r2
 8001358:	4a16      	ldr	r2, [pc, #88]	; (80013b4 <ReceiveP30+0x120>)
 800135a:	fb82 1203 	smull	r1, r2, r2, r3
 800135e:	1192      	asrs	r2, r2, #6
 8001360:	17db      	asrs	r3, r3, #31
 8001362:	1ad3      	subs	r3, r2, r3
					RevP30.DepthToBottom = (((datahex[6] << 24)
 8001364:	617b      	str	r3, [r7, #20]
				}
				CheckSum = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	777b      	strb	r3, [r7, #29]
				Bytenum = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	77bb      	strb	r3, [r7, #30]
				FrameState = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	77fb      	strb	r3, [r7, #31]
	for (uint8_t i = 0; i < 33; i++)
 8001372:	7f3b      	ldrb	r3, [r7, #28]
 8001374:	3301      	adds	r3, #1
 8001376:	773b      	strb	r3, [r7, #28]
 8001378:	7f3b      	ldrb	r3, [r7, #28]
 800137a:	2b20      	cmp	r3, #32
 800137c:	d997      	bls.n	80012ae <ReceiveP30+0x1a>
			}
		}
	}

	__HAL_UART_ENABLE_IT(&GP30_UART, UART_IT_IDLE);
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <ReceiveP30+0x124>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <ReceiveP30+0x124>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f042 0210 	orr.w	r2, r2, #16
 800138c:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&GP30_UART, P30Receive, P30_UART_RXLen);
 800138e:	2221      	movs	r2, #33	; 0x21
 8001390:	4907      	ldr	r1, [pc, #28]	; (80013b0 <ReceiveP30+0x11c>)
 8001392:	4809      	ldr	r0, [pc, #36]	; (80013b8 <ReceiveP30+0x124>)
 8001394:	f008 fb70 	bl	8009a78 <HAL_UART_Receive_DMA>

	return RevP30;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	461a      	mov	r2, r3
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013a4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2400012c 	.word	0x2400012c
 80013b4:	10624dd3 	.word	0x10624dd3
 80013b8:	20004294 	.word	0x20004294

080013bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4a07      	ldr	r2, [pc, #28]	; (80013e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80013cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	4a06      	ldr	r2, [pc, #24]	; (80013ec <vApplicationGetIdleTaskMemory+0x30>)
 80013d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2280      	movs	r2, #128	; 0x80
 80013d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000030 	.word	0x20000030
 80013ec:	20000084 	.word	0x20000084

080013f0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80013f0:	b5b0      	push	{r4, r5, r7, lr}
 80013f2:	b0b6      	sub	sp, #216	; 0xd8
 80013f4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013f6:	f002 fa3b 	bl	8003870 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013fa:	f000 f96b 	bl	80016d4 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80013fe:	f000 f9ef 	bl	80017e0 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001402:	f000 fc7f 	bl	8001d04 <MX_GPIO_Init>
	MX_DMA_Init();
 8001406:	f000 fbfd 	bl	8001c04 <MX_DMA_Init>
	MX_IWDG1_Init();
 800140a:	f000 fa15 	bl	8001838 <MX_IWDG1_Init>
	MX_USART1_UART_Init();
 800140e:	f000 fb15 	bl	8001a3c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001412:	f000 fb5f 	bl	8001ad4 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001416:	f000 fba9 	bl	8001b6c <MX_USART3_UART_Init>
	MX_UART4_Init();
 800141a:	f000 fa2b 	bl	8001874 <MX_UART4_Init>
	MX_UART8_Init();
 800141e:	f000 fac1 	bl	80019a4 <MX_UART8_Init>
	MX_UART5_Init();
 8001422:	f000 fa73 	bl	800190c <MX_UART5_Init>
	/* USER CODE BEGIN 2 */
	HAL_IWDG_Refresh(&hiwdg1);
 8001426:	4893      	ldr	r0, [pc, #588]	; (8001674 <main+0x284>)
 8001428:	f005 fbfa 	bl	8006c20 <HAL_IWDG_Refresh>

	//初始化下位机

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 800142c:	2200      	movs	r2, #0
 800142e:	2110      	movs	r1, #16
 8001430:	4891      	ldr	r0, [pc, #580]	; (8001678 <main+0x288>)
 8001432:	f005 fb73 	bl	8006b1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8001436:	2201      	movs	r2, #1
 8001438:	2110      	movs	r1, #16
 800143a:	488f      	ldr	r0, [pc, #572]	; (8001678 <main+0x288>)
 800143c:	f005 fb6e 	bl	8006b1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	2110      	movs	r1, #16
 8001444:	488c      	ldr	r0, [pc, #560]	; (8001678 <main+0x288>)
 8001446:	f005 fb69 	bl	8006b1c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800144a:	2201      	movs	r2, #1
 800144c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001450:	488a      	ldr	r0, [pc, #552]	; (800167c <main+0x28c>)
 8001452:	f005 fb63 	bl	8006b1c <HAL_GPIO_WritePin>
	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of UptoBaseDataRWFlag */
	osMutexDef(UptoBaseDataRWFlag);
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	UptoBaseDataRWFlagHandle = osMutexCreate(osMutex(UptoBaseDataRWFlag));
 8001462:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001466:	4618      	mov	r0, r3
 8001468:	f00a f8ed 	bl	800b646 <osMutexCreate>
 800146c:	4603      	mov	r3, r0
 800146e:	4a84      	ldr	r2, [pc, #528]	; (8001680 <main+0x290>)
 8001470:	6013      	str	r3, [r2, #0]

	/* definition and creation of BasetoUpDataRWFlag */
	osMutexDef(BasetoUpDataRWFlag);
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	BasetoUpDataRWFlagHandle = osMutexCreate(osMutex(BasetoUpDataRWFlag));
 800147e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001482:	4618      	mov	r0, r3
 8001484:	f00a f8df 	bl	800b646 <osMutexCreate>
 8001488:	4603      	mov	r3, r0
 800148a:	4a7e      	ldr	r2, [pc, #504]	; (8001684 <main+0x294>)
 800148c:	6013      	str	r3, [r2, #0]

	/* definition and creation of WT931SensorDataRWFlag */
	osMutexDef(WT931SensorDataRWFlag);
 800148e:	2300      	movs	r3, #0
 8001490:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	WT931SensorDataRWFlagHandle = osMutexCreate(osMutex(WT931SensorDataRWFlag));
 800149a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800149e:	4618      	mov	r0, r3
 80014a0:	f00a f8d1 	bl	800b646 <osMutexCreate>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a78      	ldr	r2, [pc, #480]	; (8001688 <main+0x298>)
 80014a8:	6013      	str	r3, [r2, #0]

	/* definition and creation of GY39SensorDataRWFlag */
	osMutexDef(GY39SensorDataRWFlag);
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014b0:	2300      	movs	r3, #0
 80014b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	GY39SensorDataRWFlagHandle = osMutexCreate(osMutex(GY39SensorDataRWFlag));
 80014b6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80014ba:	4618      	mov	r0, r3
 80014bc:	f00a f8c3 	bl	800b646 <osMutexCreate>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4a72      	ldr	r2, [pc, #456]	; (800168c <main+0x29c>)
 80014c4:	6013      	str	r3, [r2, #0]

	/* definition and creation of DeepSensorDataRWFlag */
	osMutexDef(DeepSensorDataRWFlag);
 80014c6:	2300      	movs	r3, #0
 80014c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	DeepSensorDataRWFlagHandle = osMutexCreate(osMutex(DeepSensorDataRWFlag));
 80014d2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f00a f8b5 	bl	800b646 <osMutexCreate>
 80014dc:	4603      	mov	r3, r0
 80014de:	4a6c      	ldr	r2, [pc, #432]	; (8001690 <main+0x2a0>)
 80014e0:	6013      	str	r3, [r2, #0]

	/* definition and creation of BaseControlEnableFlag */
	osMutexDef(BaseControlEnableFlag);
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	BaseControlEnableFlagHandle = osMutexCreate(osMutex(BaseControlEnableFlag));
 80014ee:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80014f2:	4618      	mov	r0, r3
 80014f4:	f00a f8a7 	bl	800b646 <osMutexCreate>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4a66      	ldr	r2, [pc, #408]	; (8001694 <main+0x2a4>)
 80014fc:	6013      	str	r3, [r2, #0]

	/* definition and creation of P30SensorDataRWFlag */
	osMutexDef(P30SensorDataRWFlag);
 80014fe:	2300      	movs	r3, #0
 8001500:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001504:	2300      	movs	r3, #0
 8001506:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	P30SensorDataRWFlagHandle = osMutexCreate(osMutex(P30SensorDataRWFlag));
 800150a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800150e:	4618      	mov	r0, r3
 8001510:	f00a f899 	bl	800b646 <osMutexCreate>
 8001514:	4603      	mov	r3, r0
 8001516:	4a60      	ldr	r2, [pc, #384]	; (8001698 <main+0x2a8>)
 8001518:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_MUTEX */
	HAL_IWDG_Refresh(&hiwdg1);
 800151a:	4856      	ldr	r0, [pc, #344]	; (8001674 <main+0x284>)
 800151c:	f005 fb80 	bl	8006c20 <HAL_IWDG_Refresh>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of UptoBaseTransFinish */
	osSemaphoreDef(UptoBaseTransFinish);
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	UptoBaseTransFinishHandle = osSemaphoreCreate(
 800152c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001530:	2101      	movs	r1, #1
 8001532:	4618      	mov	r0, r3
 8001534:	f00a f89f 	bl	800b676 <osSemaphoreCreate>
 8001538:	4603      	mov	r3, r0
 800153a:	4a58      	ldr	r2, [pc, #352]	; (800169c <main+0x2ac>)
 800153c:	6013      	str	r3, [r2, #0]
			osSemaphore(UptoBaseTransFinish), 1);

	/* definition and creation of WT931TransFinish */
	osSemaphoreDef(WT931TransFinish);
 800153e:	2300      	movs	r3, #0
 8001540:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	WT931TransFinishHandle = osSemaphoreCreate(osSemaphore(WT931TransFinish),
 800154a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800154e:	2101      	movs	r1, #1
 8001550:	4618      	mov	r0, r3
 8001552:	f00a f890 	bl	800b676 <osSemaphoreCreate>
 8001556:	4603      	mov	r3, r0
 8001558:	4a51      	ldr	r2, [pc, #324]	; (80016a0 <main+0x2b0>)
 800155a:	6013      	str	r3, [r2, #0]
			1);

	/* definition and creation of GY39TransFinish */
	osSemaphoreDef(GY39TransFinish);
 800155c:	2300      	movs	r3, #0
 800155e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001562:	2300      	movs	r3, #0
 8001564:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	GY39TransFinishHandle = osSemaphoreCreate(osSemaphore(GY39TransFinish), 1);
 8001568:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800156c:	2101      	movs	r1, #1
 800156e:	4618      	mov	r0, r3
 8001570:	f00a f881 	bl	800b676 <osSemaphoreCreate>
 8001574:	4603      	mov	r3, r0
 8001576:	4a4b      	ldr	r2, [pc, #300]	; (80016a4 <main+0x2b4>)
 8001578:	6013      	str	r3, [r2, #0]

	/* definition and creation of BasetoUpTransFinishHandle */
	osSemaphoreDef(BasetoUpTransFinishHandle);
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	BasetoUpTransFinishHandleHandle = osSemaphoreCreate(
 8001586:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800158a:	2101      	movs	r1, #1
 800158c:	4618      	mov	r0, r3
 800158e:	f00a f872 	bl	800b676 <osSemaphoreCreate>
 8001592:	4603      	mov	r3, r0
 8001594:	4a44      	ldr	r2, [pc, #272]	; (80016a8 <main+0x2b8>)
 8001596:	6013      	str	r3, [r2, #0]
			osSemaphore(BasetoUpTransFinishHandle), 1);

	/* definition and creation of DeepTransFinishHandle */
	osSemaphoreDef(DeepTransFinishHandle);
 8001598:	2300      	movs	r3, #0
 800159a:	67bb      	str	r3, [r7, #120]	; 0x78
 800159c:	2300      	movs	r3, #0
 800159e:	67fb      	str	r3, [r7, #124]	; 0x7c
	DeepTransFinishHandleHandle = osSemaphoreCreate(
 80015a0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80015a4:	2101      	movs	r1, #1
 80015a6:	4618      	mov	r0, r3
 80015a8:	f00a f865 	bl	800b676 <osSemaphoreCreate>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4a3f      	ldr	r2, [pc, #252]	; (80016ac <main+0x2bc>)
 80015b0:	6013      	str	r3, [r2, #0]
			osSemaphore(DeepTransFinishHandle), 1);

	/* definition and creation of P30TransFinish */
	osSemaphoreDef(P30TransFinish);
 80015b2:	2300      	movs	r3, #0
 80015b4:	673b      	str	r3, [r7, #112]	; 0x70
 80015b6:	2300      	movs	r3, #0
 80015b8:	677b      	str	r3, [r7, #116]	; 0x74
	P30TransFinishHandle = osSemaphoreCreate(osSemaphore(P30TransFinish), 1);
 80015ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015be:	2101      	movs	r1, #1
 80015c0:	4618      	mov	r0, r3
 80015c2:	f00a f858 	bl	800b676 <osSemaphoreCreate>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4a39      	ldr	r2, [pc, #228]	; (80016b0 <main+0x2c0>)
 80015ca:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_SEMAPHORES */
	HAL_IWDG_Refresh(&hiwdg1);
 80015cc:	4829      	ldr	r0, [pc, #164]	; (8001674 <main+0x284>)
 80015ce:	f005 fb27 	bl	8006c20 <HAL_IWDG_Refresh>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of CtrlTask */
	osThreadDef(CtrlTask, CtrlTaskF, osPriorityNormal, 0, 128);
 80015d2:	4b38      	ldr	r3, [pc, #224]	; (80016b4 <main+0x2c4>)
 80015d4:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80015d8:	461d      	mov	r5, r3
 80015da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CtrlTaskHandle = osThreadCreate(osThread(CtrlTask), NULL);
 80015e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f009 ffca 	bl	800b586 <osThreadCreate>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a30      	ldr	r2, [pc, #192]	; (80016b8 <main+0x2c8>)
 80015f6:	6013      	str	r3, [r2, #0]

	/* definition and creation of SensorTask */
	osThreadDef(SensorTask, SensorTaskF, osPriorityNormal, 0, 128);
 80015f8:	4b30      	ldr	r3, [pc, #192]	; (80016bc <main+0x2cc>)
 80015fa:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80015fe:	461d      	mov	r5, r3
 8001600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001604:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001608:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	SensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 800160c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f009 ffb7 	bl	800b586 <osThreadCreate>
 8001618:	4603      	mov	r3, r0
 800161a:	4a29      	ldr	r2, [pc, #164]	; (80016c0 <main+0x2d0>)
 800161c:	6013      	str	r3, [r2, #0]

	/* definition and creation of UptoBaseTask */
	osThreadDef(UptoBaseTask, UtBF, osPriorityNormal, 0, 128);
 800161e:	4b29      	ldr	r3, [pc, #164]	; (80016c4 <main+0x2d4>)
 8001620:	f107 041c 	add.w	r4, r7, #28
 8001624:	461d      	mov	r5, r3
 8001626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800162a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800162e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	UptoBaseTaskHandle = osThreadCreate(osThread(UptoBaseTask), NULL);
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	2100      	movs	r1, #0
 8001638:	4618      	mov	r0, r3
 800163a:	f009 ffa4 	bl	800b586 <osThreadCreate>
 800163e:	4603      	mov	r3, r0
 8001640:	4a21      	ldr	r2, [pc, #132]	; (80016c8 <main+0x2d8>)
 8001642:	6013      	str	r3, [r2, #0]

	/* definition and creation of BasetoUpTask */
	osThreadDef(BasetoUpTask, BtUF, osPriorityNormal, 0, 128);
 8001644:	4b21      	ldr	r3, [pc, #132]	; (80016cc <main+0x2dc>)
 8001646:	463c      	mov	r4, r7
 8001648:	461d      	mov	r5, r3
 800164a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800164c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800164e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001652:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	BasetoUpTaskHandle = osThreadCreate(osThread(BasetoUpTask), NULL);
 8001656:	463b      	mov	r3, r7
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f009 ff93 	bl	800b586 <osThreadCreate>
 8001660:	4603      	mov	r3, r0
 8001662:	4a1b      	ldr	r2, [pc, #108]	; (80016d0 <main+0x2e0>)
 8001664:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	HAL_IWDG_Refresh(&hiwdg1);
 8001666:	4803      	ldr	r0, [pc, #12]	; (8001674 <main+0x284>)
 8001668:	f005 fada 	bl	8006c20 <HAL_IWDG_Refresh>
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800166c:	f009 ff84 	bl	800b578 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001670:	e7fe      	b.n	8001670 <main+0x280>
 8001672:	bf00      	nop
 8001674:	200040d4 	.word	0x200040d4
 8001678:	58021000 	.word	0x58021000
 800167c:	58020800 	.word	0x58020800
 8001680:	20004520 	.word	0x20004520
 8001684:	200047e8 	.word	0x200047e8
 8001688:	20004324 	.word	0x20004324
 800168c:	200041fc 	.word	0x200041fc
 8001690:	200041f0 	.word	0x200041f0
 8001694:	20004218 	.word	0x20004218
 8001698:	200041ec 	.word	0x200041ec
 800169c:	20003fdc 	.word	0x20003fdc
 80016a0:	200048e0 	.word	0x200048e0
 80016a4:	200041f4 	.word	0x200041f4
 80016a8:	200045a8 	.word	0x200045a8
 80016ac:	200047ec 	.word	0x200047ec
 80016b0:	20003fd8 	.word	0x20003fd8
 80016b4:	0800ddd4 	.word	0x0800ddd4
 80016b8:	200041f8 	.word	0x200041f8
 80016bc:	0800ddf0 	.word	0x0800ddf0
 80016c0:	20003fe0 	.word	0x20003fe0
 80016c4:	0800de0c 	.word	0x0800de0c
 80016c8:	200046d0 	.word	0x200046d0
 80016cc:	0800de28 	.word	0x0800de28
 80016d0:	200046d4 	.word	0x200046d4

080016d4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b09c      	sub	sp, #112	; 0x70
 80016d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80016da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016de:	224c      	movs	r2, #76	; 0x4c
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f00c fb44 	bl	800dd70 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	2220      	movs	r2, #32
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f00c fb3e 	bl	800dd70 <memset>
	{ 0 };

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80016f4:	2002      	movs	r0, #2
 80016f6:	f005 faa3 	bl	8006c40 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016fa:	2300      	movs	r3, #0
 80016fc:	603b      	str	r3, [r7, #0]
 80016fe:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <SystemClock_Config+0x100>)
 8001700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001702:	4a34      	ldr	r2, [pc, #208]	; (80017d4 <SystemClock_Config+0x100>)
 8001704:	f023 0301 	bic.w	r3, r3, #1
 8001708:	62d3      	str	r3, [r2, #44]	; 0x2c
 800170a:	4b32      	ldr	r3, [pc, #200]	; (80017d4 <SystemClock_Config+0x100>)
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <SystemClock_Config+0x104>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	4a2f      	ldr	r2, [pc, #188]	; (80017d8 <SystemClock_Config+0x104>)
 800171a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800171e:	6193      	str	r3, [r2, #24]
 8001720:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <SystemClock_Config+0x104>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 800172c:	bf00      	nop
 800172e:	4b2a      	ldr	r3, [pc, #168]	; (80017d8 <SystemClock_Config+0x104>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800173a:	d1f8      	bne.n	800172e <SystemClock_Config+0x5a>
	{
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800173c:	4b27      	ldr	r3, [pc, #156]	; (80017dc <SystemClock_Config+0x108>)
 800173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001740:	f023 0303 	bic.w	r3, r3, #3
 8001744:	4a25      	ldr	r2, [pc, #148]	; (80017dc <SystemClock_Config+0x108>)
 8001746:	f043 0302 	orr.w	r3, r3, #2
 800174a:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 800174c:	2309      	movs	r3, #9
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001756:	2301      	movs	r3, #1
 8001758:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800175a:	2302      	movs	r3, #2
 800175c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800175e:	2302      	movs	r3, #2
 8001760:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 8001762:	2305      	movs	r3, #5
 8001764:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 160;
 8001766:	23a0      	movs	r3, #160	; 0xa0
 8001768:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 800176a:	2302      	movs	r3, #2
 800176c:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800176e:	2302      	movs	r3, #2
 8001770:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001772:	2302      	movs	r3, #2
 8001774:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001776:	2308      	movs	r3, #8
 8001778:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800177a:	2300      	movs	r3, #0
 800177c:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001786:	4618      	mov	r0, r3
 8001788:	f005 fa94 	bl	8006cb4 <HAL_RCC_OscConfig>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8001792:	f000 fed7 	bl	8002544 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001796:	233f      	movs	r3, #63	; 0x3f
 8001798:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179a:	2303      	movs	r3, #3
 800179c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80017a2:	2308      	movs	r3, #8
 80017a4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80017a6:	2340      	movs	r3, #64	; 0x40
 80017a8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80017aa:	2340      	movs	r3, #64	; 0x40
 80017ac:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80017ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017b2:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80017b4:	2340      	movs	r3, #64	; 0x40
 80017b6:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2102      	movs	r1, #2
 80017bc:	4618      	mov	r0, r3
 80017be:	f005 fe89 	bl	80074d4 <HAL_RCC_ClockConfig>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <SystemClock_Config+0xf8>
	{
		Error_Handler();
 80017c8:	f000 febc 	bl	8002544 <Error_Handler>
	}
}
 80017cc:	bf00      	nop
 80017ce:	3770      	adds	r7, #112	; 0x70
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	58000400 	.word	0x58000400
 80017d8:	58024800 	.word	0x58024800
 80017dc:	58024400 	.word	0x58024400

080017e0 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b0b0      	sub	sp, #192	; 0xc0
 80017e4:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	22bc      	movs	r2, #188	; 0xbc
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f00c fabf 	bl	800dd70 <memset>
	{ 0 };

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5
 80017f2:	2303      	movs	r3, #3
 80017f4:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_UART8 | RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_UART4
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3;
	PeriphClkInitStruct.PLL3.PLL3M = 25;
 80017f6:	2319      	movs	r3, #25
 80017f8:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLL3.PLL3N = 192;
 80017fa:	23c0      	movs	r3, #192	; 0xc0
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLL3.PLL3P = 2;
 80017fe:	2302      	movs	r3, #2
 8001800:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001802:	2302      	movs	r3, #2
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001806:	2302      	movs	r3, #2
 8001808:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800180a:	2300      	movs	r3, #0
 800180c:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800180e:	2300      	movs	r3, #0
 8001810:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInitStruct.Usart234578ClockSelection =
 8001816:	2302      	movs	r3, #2
 8001818:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_USART234578CLKSOURCE_PLL3;
	PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 800181a:	2310      	movs	r3, #16
 800181c:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	4618      	mov	r0, r3
 8001822:	f006 fa25 	bl	8007c70 <HAL_RCCEx_PeriphCLKConfig>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <PeriphCommonClock_Config+0x50>
	{
		Error_Handler();
 800182c:	f000 fe8a 	bl	8002544 <Error_Handler>
	}
}
 8001830:	bf00      	nop
 8001832:	37c0      	adds	r7, #192	; 0xc0
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <MX_IWDG1_Init>:
 * @brief IWDG1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG1_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	/* USER CODE END IWDG1_Init 0 */

	/* USER CODE BEGIN IWDG1_Init 1 */

	/* USER CODE END IWDG1_Init 1 */
	hiwdg1.Instance = IWDG1;
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <MX_IWDG1_Init+0x34>)
 800183e:	4a0c      	ldr	r2, [pc, #48]	; (8001870 <MX_IWDG1_Init+0x38>)
 8001840:	601a      	str	r2, [r3, #0]
	hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <MX_IWDG1_Init+0x34>)
 8001844:	2200      	movs	r2, #0
 8001846:	605a      	str	r2, [r3, #4]
	hiwdg1.Init.Window = 4095;
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <MX_IWDG1_Init+0x34>)
 800184a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800184e:	60da      	str	r2, [r3, #12]
	hiwdg1.Init.Reload = 4095;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <MX_IWDG1_Init+0x34>)
 8001852:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001856:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8001858:	4804      	ldr	r0, [pc, #16]	; (800186c <MX_IWDG1_Init+0x34>)
 800185a:	f005 f992 	bl	8006b82 <HAL_IWDG_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_IWDG1_Init+0x30>
	{
		Error_Handler();
 8001864:	f000 fe6e 	bl	8002544 <Error_Handler>
	}
	/* USER CODE BEGIN IWDG1_Init 2 */

	/* USER CODE END IWDG1_Init 2 */

}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	200040d4 	.word	0x200040d4
 8001870:	58004800 	.word	0x58004800

08001874 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001878:	4b22      	ldr	r3, [pc, #136]	; (8001904 <MX_UART4_Init+0x90>)
 800187a:	4a23      	ldr	r2, [pc, #140]	; (8001908 <MX_UART4_Init+0x94>)
 800187c:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 800187e:	4b21      	ldr	r3, [pc, #132]	; (8001904 <MX_UART4_Init+0x90>)
 8001880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001884:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001886:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <MX_UART4_Init+0x90>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 800188c:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <MX_UART4_Init+0x90>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001892:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <MX_UART4_Init+0x90>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001898:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <MX_UART4_Init+0x90>)
 800189a:	220c      	movs	r2, #12
 800189c:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <MX_UART4_Init+0x90>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <MX_UART4_Init+0x90>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018aa:	4b16      	ldr	r3, [pc, #88]	; (8001904 <MX_UART4_Init+0x90>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <MX_UART4_Init+0x90>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <MX_UART4_Init+0x90>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK)
 80018bc:	4811      	ldr	r0, [pc, #68]	; (8001904 <MX_UART4_Init+0x90>)
 80018be:	f008 f80b 	bl	80098d8 <HAL_UART_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_UART4_Init+0x58>
	{
		Error_Handler();
 80018c8:	f000 fe3c 	bl	8002544 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 80018cc:	2100      	movs	r1, #0
 80018ce:	480d      	ldr	r0, [pc, #52]	; (8001904 <MX_UART4_Init+0x90>)
 80018d0:	f009 fd70 	bl	800b3b4 <HAL_UARTEx_SetTxFifoThreshold>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_UART4_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 80018da:	f000 fe33 	bl	8002544 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 80018de:	2100      	movs	r1, #0
 80018e0:	4808      	ldr	r0, [pc, #32]	; (8001904 <MX_UART4_Init+0x90>)
 80018e2:	f009 fda5 	bl	800b430 <HAL_UARTEx_SetRxFifoThreshold>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_UART4_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 80018ec:	f000 fe2a 	bl	8002544 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80018f0:	4804      	ldr	r0, [pc, #16]	; (8001904 <MX_UART4_Init+0x90>)
 80018f2:	f009 fd26 	bl	800b342 <HAL_UARTEx_DisableFifoMode>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_UART4_Init+0x8c>
	{
		Error_Handler();
 80018fc:	f000 fe22 	bl	8002544 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20004640 	.word	0x20004640
 8001908:	40004c00 	.word	0x40004c00

0800190c <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8001910:	4b22      	ldr	r3, [pc, #136]	; (800199c <MX_UART5_Init+0x90>)
 8001912:	4a23      	ldr	r2, [pc, #140]	; (80019a0 <MX_UART5_Init+0x94>)
 8001914:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8001916:	4b21      	ldr	r3, [pc, #132]	; (800199c <MX_UART5_Init+0x90>)
 8001918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800191c:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800191e:	4b1f      	ldr	r3, [pc, #124]	; (800199c <MX_UART5_Init+0x90>)
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001924:	4b1d      	ldr	r3, [pc, #116]	; (800199c <MX_UART5_Init+0x90>)
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 800192a:	4b1c      	ldr	r3, [pc, #112]	; (800199c <MX_UART5_Init+0x90>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001930:	4b1a      	ldr	r3, [pc, #104]	; (800199c <MX_UART5_Init+0x90>)
 8001932:	220c      	movs	r2, #12
 8001934:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001936:	4b19      	ldr	r3, [pc, #100]	; (800199c <MX_UART5_Init+0x90>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800193c:	4b17      	ldr	r3, [pc, #92]	; (800199c <MX_UART5_Init+0x90>)
 800193e:	2200      	movs	r2, #0
 8001940:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <MX_UART5_Init+0x90>)
 8001944:	2200      	movs	r2, #0
 8001946:	621a      	str	r2, [r3, #32]
	huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001948:	4b14      	ldr	r3, [pc, #80]	; (800199c <MX_UART5_Init+0x90>)
 800194a:	2200      	movs	r2, #0
 800194c:	625a      	str	r2, [r3, #36]	; 0x24
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800194e:	4b13      	ldr	r3, [pc, #76]	; (800199c <MX_UART5_Init+0x90>)
 8001950:	2200      	movs	r2, #0
 8001952:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart5) != HAL_OK)
 8001954:	4811      	ldr	r0, [pc, #68]	; (800199c <MX_UART5_Init+0x90>)
 8001956:	f007 ffbf 	bl	80098d8 <HAL_UART_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_UART5_Init+0x58>
	{
		Error_Handler();
 8001960:	f000 fdf0 	bl	8002544 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8)
 8001964:	2100      	movs	r1, #0
 8001966:	480d      	ldr	r0, [pc, #52]	; (800199c <MX_UART5_Init+0x90>)
 8001968:	f009 fd24 	bl	800b3b4 <HAL_UARTEx_SetTxFifoThreshold>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_UART5_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 8001972:	f000 fde7 	bl	8002544 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8)
 8001976:	2100      	movs	r1, #0
 8001978:	4808      	ldr	r0, [pc, #32]	; (800199c <MX_UART5_Init+0x90>)
 800197a:	f009 fd59 	bl	800b430 <HAL_UARTEx_SetRxFifoThreshold>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_UART5_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001984:	f000 fdde 	bl	8002544 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001988:	4804      	ldr	r0, [pc, #16]	; (800199c <MX_UART5_Init+0x90>)
 800198a:	f009 fcda 	bl	800b342 <HAL_UARTEx_DisableFifoMode>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_UART5_Init+0x8c>
	{
		Error_Handler();
 8001994:	f000 fdd6 	bl	8002544 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20004294 	.word	0x20004294
 80019a0:	40005000 	.word	0x40005000

080019a4 <MX_UART8_Init>:
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 80019a8:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <MX_UART8_Init+0x90>)
 80019aa:	4a23      	ldr	r2, [pc, #140]	; (8001a38 <MX_UART8_Init+0x94>)
 80019ac:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 80019ae:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <MX_UART8_Init+0x90>)
 80019b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019b4:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80019b6:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <MX_UART8_Init+0x90>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 80019bc:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <MX_UART8_Init+0x90>)
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 80019c2:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <MX_UART8_Init+0x90>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 80019c8:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <MX_UART8_Init+0x90>)
 80019ca:	220c      	movs	r2, #12
 80019cc:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ce:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <MX_UART8_Init+0x90>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <MX_UART8_Init+0x90>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <MX_UART8_Init+0x90>)
 80019dc:	2200      	movs	r2, #0
 80019de:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <MX_UART8_Init+0x90>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	625a      	str	r2, [r3, #36]	; 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <MX_UART8_Init+0x90>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart8) != HAL_OK)
 80019ec:	4811      	ldr	r0, [pc, #68]	; (8001a34 <MX_UART8_Init+0x90>)
 80019ee:	f007 ff73 	bl	80098d8 <HAL_UART_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_UART8_Init+0x58>
	{
		Error_Handler();
 80019f8:	f000 fda4 	bl	8002544 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8)
 80019fc:	2100      	movs	r1, #0
 80019fe:	480d      	ldr	r0, [pc, #52]	; (8001a34 <MX_UART8_Init+0x90>)
 8001a00:	f009 fcd8 	bl	800b3b4 <HAL_UARTEx_SetTxFifoThreshold>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_UART8_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 8001a0a:	f000 fd9b 	bl	8002544 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8)
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4808      	ldr	r0, [pc, #32]	; (8001a34 <MX_UART8_Init+0x90>)
 8001a12:	f009 fd0d 	bl	800b430 <HAL_UARTEx_SetRxFifoThreshold>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_UART8_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001a1c:	f000 fd92 	bl	8002544 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001a20:	4804      	ldr	r0, [pc, #16]	; (8001a34 <MX_UART8_Init+0x90>)
 8001a22:	f009 fc8e 	bl	800b342 <HAL_UARTEx_DisableFifoMode>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_UART8_Init+0x8c>
	{
		Error_Handler();
 8001a2c:	f000 fd8a 	bl	8002544 <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	200045ac 	.word	0x200045ac
 8001a38:	40007c00 	.word	0x40007c00

08001a3c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001a40:	4b22      	ldr	r3, [pc, #136]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a42:	4a23      	ldr	r2, [pc, #140]	; (8001ad0 <MX_USART1_UART_Init+0x94>)
 8001a44:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001a46:	4b21      	ldr	r3, [pc, #132]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a4c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4e:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001a54:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001a60:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a62:	220c      	movs	r2, #12
 8001a64:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a66:	4b19      	ldr	r3, [pc, #100]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a6c:	4b17      	ldr	r3, [pc, #92]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a72:	4b16      	ldr	r3, [pc, #88]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a7e:	4b13      	ldr	r3, [pc, #76]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a84:	4811      	ldr	r0, [pc, #68]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a86:	f007 ff27 	bl	80098d8 <HAL_UART_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 8001a90:	f000 fd58 	bl	8002544 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8001a94:	2100      	movs	r1, #0
 8001a96:	480d      	ldr	r0, [pc, #52]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001a98:	f009 fc8c 	bl	800b3b4 <HAL_UARTEx_SetTxFifoThreshold>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_USART1_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 8001aa2:	f000 fd4f 	bl	8002544 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4808      	ldr	r0, [pc, #32]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001aaa:	f009 fcc1 	bl	800b430 <HAL_UARTEx_SetRxFifoThreshold>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001ab4:	f000 fd46 	bl	8002544 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ab8:	4804      	ldr	r0, [pc, #16]	; (8001acc <MX_USART1_UART_Init+0x90>)
 8001aba:	f009 fc42 	bl	800b342 <HAL_UARTEx_DisableFifoMode>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 8001ac4:	f000 fd3e 	bl	8002544 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20004490 	.word	0x20004490
 8001ad0:	40011000 	.word	0x40011000

08001ad4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001ad8:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <MX_USART2_UART_Init+0x90>)
 8001ada:	4a23      	ldr	r2, [pc, #140]	; (8001b68 <MX_USART2_UART_Init+0x94>)
 8001adc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8001ade:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <MX_USART2_UART_Init+0x90>)
 8001ae0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ae4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae6:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <MX_USART2_UART_Init+0x90>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001aec:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <MX_USART2_UART_Init+0x90>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001af2:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <MX_USART2_UART_Init+0x90>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001af8:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <MX_USART2_UART_Init+0x90>)
 8001afa:	220c      	movs	r2, #12
 8001afc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001afe:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <MX_USART2_UART_Init+0x90>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b04:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <MX_USART2_UART_Init+0x90>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b0a:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <MX_USART2_UART_Init+0x90>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <MX_USART2_UART_Init+0x90>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b16:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <MX_USART2_UART_Init+0x90>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b1c:	4811      	ldr	r0, [pc, #68]	; (8001b64 <MX_USART2_UART_Init+0x90>)
 8001b1e:	f007 fedb 	bl	80098d8 <HAL_UART_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8001b28:	f000 fd0c 	bl	8002544 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	480d      	ldr	r0, [pc, #52]	; (8001b64 <MX_USART2_UART_Init+0x90>)
 8001b30:	f009 fc40 	bl	800b3b4 <HAL_UARTEx_SetTxFifoThreshold>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_USART2_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 8001b3a:	f000 fd03 	bl	8002544 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4808      	ldr	r0, [pc, #32]	; (8001b64 <MX_USART2_UART_Init+0x90>)
 8001b42:	f009 fc75 	bl	800b430 <HAL_UARTEx_SetRxFifoThreshold>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001b4c:	f000 fcfa 	bl	8002544 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b50:	4804      	ldr	r0, [pc, #16]	; (8001b64 <MX_USART2_UART_Init+0x90>)
 8001b52:	f009 fbf6 	bl	800b342 <HAL_UARTEx_DisableFifoMode>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 8001b5c:	f000 fcf2 	bl	8002544 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200046d8 	.word	0x200046d8
 8001b68:	40004400 	.word	0x40004400

08001b6c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001b70:	4b22      	ldr	r3, [pc, #136]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001b72:	4a23      	ldr	r2, [pc, #140]	; (8001c00 <MX_USART3_UART_Init+0x94>)
 8001b74:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 921600;
 8001b76:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001b78:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001b7c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7e:	4b1f      	ldr	r3, [pc, #124]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001b84:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001b8a:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001b92:	220c      	movs	r2, #12
 8001b94:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b96:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b9c:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ba8:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bae:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bb4:	4811      	ldr	r0, [pc, #68]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001bb6:	f007 fe8f 	bl	80098d8 <HAL_UART_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 8001bc0:	f000 fcc0 	bl	8002544 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	480d      	ldr	r0, [pc, #52]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001bc8:	f009 fbf4 	bl	800b3b4 <HAL_UARTEx_SetTxFifoThreshold>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_USART3_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 8001bd2:	f000 fcb7 	bl	8002544 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4808      	ldr	r0, [pc, #32]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001bda:	f009 fc29 	bl	800b430 <HAL_UARTEx_SetRxFifoThreshold>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_USART3_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001be4:	f000 fcae 	bl	8002544 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001be8:	4804      	ldr	r0, [pc, #16]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001bea:	f009 fbaa 	bl	800b342 <HAL_UARTEx_DisableFifoMode>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 8001bf4:	f000 fca6 	bl	8002544 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	2000415c 	.word	0x2000415c
 8001c00:	40004800 	.word	0x40004800

08001c04 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	; (8001d00 <MX_DMA_Init+0xfc>)
 8001c0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c10:	4a3b      	ldr	r2, [pc, #236]	; (8001d00 <MX_DMA_Init+0xfc>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c1a:	4b39      	ldr	r3, [pc, #228]	; (8001d00 <MX_DMA_Init+0xfc>)
 8001c1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001c28:	4b35      	ldr	r3, [pc, #212]	; (8001d00 <MX_DMA_Init+0xfc>)
 8001c2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c2e:	4a34      	ldr	r2, [pc, #208]	; (8001d00 <MX_DMA_Init+0xfc>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c38:	4b31      	ldr	r3, [pc, #196]	; (8001d00 <MX_DMA_Init+0xfc>)
 8001c3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2105      	movs	r1, #5
 8001c4a:	200b      	movs	r0, #11
 8001c4c:	f001 ff30 	bl	8003ab0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c50:	200b      	movs	r0, #11
 8001c52:	f001 ff47 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2105      	movs	r1, #5
 8001c5a:	200c      	movs	r0, #12
 8001c5c:	f001 ff28 	bl	8003ab0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c60:	200c      	movs	r0, #12
 8001c62:	f001 ff3f 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2105      	movs	r1, #5
 8001c6a:	200d      	movs	r0, #13
 8001c6c:	f001 ff20 	bl	8003ab0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001c70:	200d      	movs	r0, #13
 8001c72:	f001 ff37 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2105      	movs	r1, #5
 8001c7a:	200e      	movs	r0, #14
 8001c7c:	f001 ff18 	bl	8003ab0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001c80:	200e      	movs	r0, #14
 8001c82:	f001 ff2f 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2105      	movs	r1, #5
 8001c8a:	200f      	movs	r0, #15
 8001c8c:	f001 ff10 	bl	8003ab0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001c90:	200f      	movs	r0, #15
 8001c92:	f001 ff27 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2105      	movs	r1, #5
 8001c9a:	2010      	movs	r0, #16
 8001c9c:	f001 ff08 	bl	8003ab0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ca0:	2010      	movs	r0, #16
 8001ca2:	f001 ff1f 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2105      	movs	r1, #5
 8001caa:	2011      	movs	r0, #17
 8001cac:	f001 ff00 	bl	8003ab0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001cb0:	2011      	movs	r0, #17
 8001cb2:	f001 ff17 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2105      	movs	r1, #5
 8001cba:	202f      	movs	r0, #47	; 0x2f
 8001cbc:	f001 fef8 	bl	8003ab0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001cc0:	202f      	movs	r0, #47	; 0x2f
 8001cc2:	f001 ff0f 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2105      	movs	r1, #5
 8001cca:	2038      	movs	r0, #56	; 0x38
 8001ccc:	f001 fef0 	bl	8003ab0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001cd0:	2038      	movs	r0, #56	; 0x38
 8001cd2:	f001 ff07 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2105      	movs	r1, #5
 8001cda:	2039      	movs	r0, #57	; 0x39
 8001cdc:	f001 fee8 	bl	8003ab0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001ce0:	2039      	movs	r0, #57	; 0x39
 8001ce2:	f001 feff 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2105      	movs	r1, #5
 8001cea:	203a      	movs	r0, #58	; 0x3a
 8001cec:	f001 fee0 	bl	8003ab0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001cf0:	203a      	movs	r0, #58	; 0x3a
 8001cf2:	f001 fef7 	bl	8003ae4 <HAL_NVIC_EnableIRQ>

}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	58024400 	.word	0x58024400

08001d04 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	; 0x28
 8001d08:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8001d0a:	f107 0314 	add.w	r3, r7, #20
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
 8001d18:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001d1a:	4b4a      	ldr	r3, [pc, #296]	; (8001e44 <MX_GPIO_Init+0x140>)
 8001d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d20:	4a48      	ldr	r2, [pc, #288]	; (8001e44 <MX_GPIO_Init+0x140>)
 8001d22:	f043 0310 	orr.w	r3, r3, #16
 8001d26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d2a:	4b46      	ldr	r3, [pc, #280]	; (8001e44 <MX_GPIO_Init+0x140>)
 8001d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d30:	f003 0310 	and.w	r3, r3, #16
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001d38:	4b42      	ldr	r3, [pc, #264]	; (8001e44 <MX_GPIO_Init+0x140>)
 8001d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d3e:	4a41      	ldr	r2, [pc, #260]	; (8001e44 <MX_GPIO_Init+0x140>)
 8001d40:	f043 0304 	orr.w	r3, r3, #4
 8001d44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d48:	4b3e      	ldr	r3, [pc, #248]	; (8001e44 <MX_GPIO_Init+0x140>)
 8001d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001d56:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <MX_GPIO_Init+0x140>)
 8001d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5c:	4a39      	ldr	r2, [pc, #228]	; (8001e44 <MX_GPIO_Init+0x140>)
 8001d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d66:	4b37      	ldr	r3, [pc, #220]	; (8001e44 <MX_GPIO_Init+0x140>)
 8001d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d74:	4b33      	ldr	r3, [pc, #204]	; (8001e44 <MX_GPIO_Init+0x140>)
 8001d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7a:	4a32      	ldr	r2, [pc, #200]	; (8001e44 <MX_GPIO_Init+0x140>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d84:	4b2f      	ldr	r3, [pc, #188]	; (8001e44 <MX_GPIO_Init+0x140>)
 8001d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	4b2c      	ldr	r3, [pc, #176]	; (8001e44 <MX_GPIO_Init+0x140>)
 8001d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d98:	4a2a      	ldr	r2, [pc, #168]	; (8001e44 <MX_GPIO_Init+0x140>)
 8001d9a:	f043 0302 	orr.w	r3, r3, #2
 8001d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001da2:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <MX_GPIO_Init+0x140>)
 8001da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001db0:	2200      	movs	r2, #0
 8001db2:	2110      	movs	r1, #16
 8001db4:	4824      	ldr	r0, [pc, #144]	; (8001e48 <MX_GPIO_Init+0x144>)
 8001db6:	f004 feb1 	bl	8006b1c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dc0:	4822      	ldr	r0, [pc, #136]	; (8001e4c <MX_GPIO_Init+0x148>)
 8001dc2:	f004 feab 	bl	8006b1c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dc6:	2310      	movs	r3, #16
 8001dc8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	481a      	ldr	r0, [pc, #104]	; (8001e48 <MX_GPIO_Init+0x144>)
 8001dde:	f004 fcd5 	bl	800678c <HAL_GPIO_Init>

	/*Configure GPIO pin : PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001de2:	2340      	movs	r3, #64	; 0x40
 8001de4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	4619      	mov	r1, r3
 8001df4:	4814      	ldr	r0, [pc, #80]	; (8001e48 <MX_GPIO_Init+0x144>)
 8001df6:	f004 fcc9 	bl	800678c <HAL_GPIO_Init>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001dfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dfe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e00:	2301      	movs	r3, #1
 8001e02:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e04:	2301      	movs	r3, #1
 8001e06:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	4619      	mov	r1, r3
 8001e12:	480e      	ldr	r0, [pc, #56]	; (8001e4c <MX_GPIO_Init+0x148>)
 8001e14:	f004 fcba 	bl	800678c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e1c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e26:	2302      	movs	r3, #2
 8001e28:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	4806      	ldr	r0, [pc, #24]	; (8001e50 <MX_GPIO_Init+0x14c>)
 8001e36:	f004 fca9 	bl	800678c <HAL_GPIO_Init>

}
 8001e3a:	bf00      	nop
 8001e3c:	3728      	adds	r7, #40	; 0x28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	58024400 	.word	0x58024400
 8001e48:	58021000 	.word	0x58021000
 8001e4c:	58020800 	.word	0x58020800
 8001e50:	58020000 	.word	0x58020000

08001e54 <OpenWrt_Delay>:
/* USER CODE BEGIN 4 */
/**
 * @brief  跳过OpenWrt�?机启动信�?(dmesg)
 */
void OpenWrt_Delay(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
	for (int i = 0; i < 30; i++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
 8001e5e:	e014      	b.n	8001e8a <OpenWrt_Delay+0x36>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001e60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e64:	480f      	ldr	r0, [pc, #60]	; (8001ea4 <OpenWrt_Delay+0x50>)
 8001e66:	f004 fe72 	bl	8006b4e <HAL_GPIO_TogglePin>
		for (int j = 0; j < 1000; j++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	e005      	b.n	8001e7c <OpenWrt_Delay+0x28>
		{
			osDelay(1);
 8001e70:	2001      	movs	r0, #1
 8001e72:	f009 fbd4 	bl	800b61e <osDelay>
		for (int j = 0; j < 1000; j++)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e82:	dbf5      	blt.n	8001e70 <OpenWrt_Delay+0x1c>
	for (int i = 0; i < 30; i++)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3301      	adds	r3, #1
 8001e88:	607b      	str	r3, [r7, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b1d      	cmp	r3, #29
 8001e8e:	dde7      	ble.n	8001e60 <OpenWrt_Delay+0xc>
		}
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001e90:	2201      	movs	r2, #1
 8001e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e96:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <OpenWrt_Delay+0x50>)
 8001e98:	f004 fe40 	bl	8006b1c <HAL_GPIO_WritePin>
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	58020800 	.word	0x58020800

08001ea8 <CtrlTaskF>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_CtrlTaskF */
void CtrlTaskF(void const *argument)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for (;;)
	{
		/* 该任务作为空任务 */
		HAL_IWDG_Refresh(&hiwdg1);
 8001eb0:	4803      	ldr	r0, [pc, #12]	; (8001ec0 <CtrlTaskF+0x18>)
 8001eb2:	f004 feb5 	bl	8006c20 <HAL_IWDG_Refresh>
		osDelay(1);
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	f009 fbb1 	bl	800b61e <osDelay>
		HAL_IWDG_Refresh(&hiwdg1);
 8001ebc:	e7f8      	b.n	8001eb0 <CtrlTaskF+0x8>
 8001ebe:	bf00      	nop
 8001ec0:	200040d4 	.word	0x200040d4

08001ec4 <SensorTaskF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SensorTaskF */
void SensorTaskF(void const *argument)
{
 8001ec4:	b5b0      	push	{r4, r5, r7, lr}
 8001ec6:	b08c      	sub	sp, #48	; 0x30
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	62f8      	str	r0, [r7, #44]	; 0x2c
	/* USER CODE BEGIN SensorTaskF */
	InitGY39();
 8001ecc:	f7fe ff28 	bl	8000d20 <InitGY39>
	InitP30();
 8001ed0:	f7ff f9ae 	bl	8001230 <InitP30>
	osDelay(100);
 8001ed4:	2064      	movs	r0, #100	; 0x64
 8001ed6:	f009 fba2 	bl	800b61e <osDelay>
	ReceiveDeep();
 8001eda:	f7ff f893 	bl	8001004 <ReceiveDeep>
	ReceiveGY39();
 8001ede:	f107 0318 	add.w	r3, r7, #24
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe ff32 	bl	8000d4c <ReceiveGY39>
	ReceiveWT931();
 8001ee8:	463b      	mov	r3, r7
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe ff74 	bl	8000dd8 <ReceiveWT931>
	ReceiveP30();
 8001ef0:	463b      	mov	r3, r7
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff f9ce 	bl	8001294 <ReceiveP30>
	osDelay(100);
 8001ef8:	2064      	movs	r0, #100	; 0x64
 8001efa:	f009 fb90 	bl	800b61e <osDelay>
	DeepSensorData = ReceiveDeep();
 8001efe:	f7ff f881 	bl	8001004 <ReceiveDeep>
 8001f02:	4602      	mov	r2, r0
 8001f04:	4b76      	ldr	r3, [pc, #472]	; (80020e0 <SensorTaskF+0x21c>)
 8001f06:	4611      	mov	r1, r2
 8001f08:	8019      	strh	r1, [r3, #0]
 8001f0a:	f3c2 420f 	ubfx	r2, r2, #16, #16
 8001f0e:	805a      	strh	r2, [r3, #2]
	GY39SensorData = ReceiveGY39();
 8001f10:	4c74      	ldr	r4, [pc, #464]	; (80020e4 <SensorTaskF+0x220>)
 8001f12:	463b      	mov	r3, r7
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe ff19 	bl	8000d4c <ReceiveGY39>
 8001f1a:	463b      	mov	r3, r7
 8001f1c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	WT931SensorData = ReceiveWT931();
 8001f24:	4c70      	ldr	r4, [pc, #448]	; (80020e8 <SensorTaskF+0x224>)
 8001f26:	463b      	mov	r3, r7
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe ff55 	bl	8000dd8 <ReceiveWT931>
 8001f2e:	4622      	mov	r2, r4
 8001f30:	463b      	mov	r3, r7
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	6859      	ldr	r1, [r3, #4]
 8001f36:	689d      	ldr	r5, [r3, #8]
 8001f38:	68dc      	ldr	r4, [r3, #12]
 8001f3a:	6010      	str	r0, [r2, #0]
 8001f3c:	6051      	str	r1, [r2, #4]
 8001f3e:	6095      	str	r5, [r2, #8]
 8001f40:	60d4      	str	r4, [r2, #12]
 8001f42:	6918      	ldr	r0, [r3, #16]
 8001f44:	6959      	ldr	r1, [r3, #20]
 8001f46:	6110      	str	r0, [r2, #16]
 8001f48:	6151      	str	r1, [r2, #20]
	P30SensorData = ReceiveP30();
 8001f4a:	4c68      	ldr	r4, [pc, #416]	; (80020ec <SensorTaskF+0x228>)
 8001f4c:	463b      	mov	r3, r7
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff f9a0 	bl	8001294 <ReceiveP30>
 8001f54:	4622      	mov	r2, r4
 8001f56:	463b      	mov	r3, r7
 8001f58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f5c:	e882 0003 	stmia.w	r2, {r0, r1}
	osDelay(100);
 8001f60:	2064      	movs	r0, #100	; 0x64
 8001f62:	f009 fb5c 	bl	800b61e <osDelay>
	xSemaphoreGive(DeepSensorDataRWFlagHandle);
 8001f66:	4b62      	ldr	r3, [pc, #392]	; (80020f0 <SensorTaskF+0x22c>)
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2100      	movs	r1, #0
 8001f70:	f009 fdee 	bl	800bb50 <xQueueGenericSend>
	xSemaphoreGive(GY39SensorDataRWFlagHandle);
 8001f74:	4b5f      	ldr	r3, [pc, #380]	; (80020f4 <SensorTaskF+0x230>)
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	2300      	movs	r3, #0
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	f009 fde7 	bl	800bb50 <xQueueGenericSend>
	xSemaphoreGive(WT931SensorDataRWFlagHandle);
 8001f82:	4b5d      	ldr	r3, [pc, #372]	; (80020f8 <SensorTaskF+0x234>)
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	2300      	movs	r3, #0
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	f009 fde0 	bl	800bb50 <xQueueGenericSend>
	xSemaphoreGive(P30SensorDataRWFlagHandle);
 8001f90:	4b5a      	ldr	r3, [pc, #360]	; (80020fc <SensorTaskF+0x238>)
 8001f92:	6818      	ldr	r0, [r3, #0]
 8001f94:	2300      	movs	r3, #0
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	f009 fdd9 	bl	800bb50 <xQueueGenericSend>
	vTaskSuspend(SensorTaskHandle);
 8001f9e:	4b58      	ldr	r3, [pc, #352]	; (8002100 <SensorTaskF+0x23c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f00a fb36 	bl	800c614 <vTaskSuspend>
	osDelay(1);
 8001fa8:	2001      	movs	r0, #1
 8001faa:	f009 fb38 	bl	800b61e <osDelay>
	/* Infinite loop */
	for (;;)
	{
		//收取深度数据
		if (xSemaphoreTake(DeepTransFinishHandleHandle,
 8001fae:	4b55      	ldr	r3, [pc, #340]	; (8002104 <SensorTaskF+0x240>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f009 ff57 	bl	800be68 <xQueueSemaphoreTake>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d118      	bne.n	8001ff2 <SensorTaskF+0x12e>
				0) == pdTRUE)
		{
			if (xSemaphoreTake(DeepSensorDataRWFlagHandle,
 8001fc0:	4b4b      	ldr	r3, [pc, #300]	; (80020f0 <SensorTaskF+0x22c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f009 ff4e 	bl	800be68 <xQueueSemaphoreTake>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d10f      	bne.n	8001ff2 <SensorTaskF+0x12e>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				DeepSensorData = ReceiveDeep();
 8001fd2:	f7ff f817 	bl	8001004 <ReceiveDeep>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	4b41      	ldr	r3, [pc, #260]	; (80020e0 <SensorTaskF+0x21c>)
 8001fda:	4611      	mov	r1, r2
 8001fdc:	8019      	strh	r1, [r3, #0]
 8001fde:	f3c2 420f 	ubfx	r2, r2, #16, #16
 8001fe2:	805a      	strh	r2, [r3, #2]
				xSemaphoreGive(DeepSensorDataRWFlagHandle);
 8001fe4:	4b42      	ldr	r3, [pc, #264]	; (80020f0 <SensorTaskF+0x22c>)
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	2300      	movs	r3, #0
 8001fea:	2200      	movs	r2, #0
 8001fec:	2100      	movs	r1, #0
 8001fee:	f009 fdaf 	bl	800bb50 <xQueueGenericSend>
			}
		}
		//收取九轴数据
		if (xSemaphoreTake(WT931TransFinishHandle,
 8001ff2:	4b45      	ldr	r3, [pc, #276]	; (8002108 <SensorTaskF+0x244>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f009 ff35 	bl	800be68 <xQueueSemaphoreTake>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b01      	cmp	r3, #1
 8002002:	d122      	bne.n	800204a <SensorTaskF+0x186>
				0) == pdTRUE)
		{

			if (xSemaphoreTake(WT931SensorDataRWFlagHandle,
 8002004:	4b3c      	ldr	r3, [pc, #240]	; (80020f8 <SensorTaskF+0x234>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2101      	movs	r1, #1
 800200a:	4618      	mov	r0, r3
 800200c:	f009 ff2c 	bl	800be68 <xQueueSemaphoreTake>
 8002010:	4603      	mov	r3, r0
 8002012:	2b01      	cmp	r3, #1
 8002014:	d119      	bne.n	800204a <SensorTaskF+0x186>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				WT931SensorData = ReceiveWT931();
 8002016:	4c34      	ldr	r4, [pc, #208]	; (80020e8 <SensorTaskF+0x224>)
 8002018:	463b      	mov	r3, r7
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fedc 	bl	8000dd8 <ReceiveWT931>
 8002020:	4622      	mov	r2, r4
 8002022:	463b      	mov	r3, r7
 8002024:	6818      	ldr	r0, [r3, #0]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	689d      	ldr	r5, [r3, #8]
 800202a:	68dc      	ldr	r4, [r3, #12]
 800202c:	6010      	str	r0, [r2, #0]
 800202e:	6051      	str	r1, [r2, #4]
 8002030:	6095      	str	r5, [r2, #8]
 8002032:	60d4      	str	r4, [r2, #12]
 8002034:	6918      	ldr	r0, [r3, #16]
 8002036:	6959      	ldr	r1, [r3, #20]
 8002038:	6110      	str	r0, [r2, #16]
 800203a:	6151      	str	r1, [r2, #20]
				xSemaphoreGive(WT931SensorDataRWFlagHandle);
 800203c:	4b2e      	ldr	r3, [pc, #184]	; (80020f8 <SensorTaskF+0x234>)
 800203e:	6818      	ldr	r0, [r3, #0]
 8002040:	2300      	movs	r3, #0
 8002042:	2200      	movs	r2, #0
 8002044:	2100      	movs	r1, #0
 8002046:	f009 fd83 	bl	800bb50 <xQueueGenericSend>
			}
		}
		//收取温湿度数�???????
		if (xSemaphoreTake(GY39TransFinishHandle,
 800204a:	4b30      	ldr	r3, [pc, #192]	; (800210c <SensorTaskF+0x248>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2100      	movs	r1, #0
 8002050:	4618      	mov	r0, r3
 8002052:	f009 ff09 	bl	800be68 <xQueueSemaphoreTake>
 8002056:	4603      	mov	r3, r0
 8002058:	2b01      	cmp	r3, #1
 800205a:	d119      	bne.n	8002090 <SensorTaskF+0x1cc>
				0) == pdTRUE)
		{
			if (xSemaphoreTake(GY39SensorDataRWFlagHandle,
 800205c:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <SensorTaskF+0x230>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2101      	movs	r1, #1
 8002062:	4618      	mov	r0, r3
 8002064:	f009 ff00 	bl	800be68 <xQueueSemaphoreTake>
 8002068:	4603      	mov	r3, r0
 800206a:	2b01      	cmp	r3, #1
 800206c:	d110      	bne.n	8002090 <SensorTaskF+0x1cc>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				GY39SensorData = ReceiveGY39();
 800206e:	4c1d      	ldr	r4, [pc, #116]	; (80020e4 <SensorTaskF+0x220>)
 8002070:	463b      	mov	r3, r7
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe fe6a 	bl	8000d4c <ReceiveGY39>
 8002078:	463b      	mov	r3, r7
 800207a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800207e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				xSemaphoreGive(GY39SensorDataRWFlagHandle);
 8002082:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <SensorTaskF+0x230>)
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	2300      	movs	r3, #0
 8002088:	2200      	movs	r2, #0
 800208a:	2100      	movs	r1, #0
 800208c:	f009 fd60 	bl	800bb50 <xQueueGenericSend>
			}
		}
		//收取声呐数据
		if (xSemaphoreTake(P30TransFinishHandle,0) == pdTRUE)
 8002090:	4b1f      	ldr	r3, [pc, #124]	; (8002110 <SensorTaskF+0x24c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2100      	movs	r1, #0
 8002096:	4618      	mov	r0, r3
 8002098:	f009 fee6 	bl	800be68 <xQueueSemaphoreTake>
 800209c:	4603      	mov	r3, r0
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d11a      	bne.n	80020d8 <SensorTaskF+0x214>
		{
			if (xSemaphoreTake(P30SensorDataRWFlagHandle,
 80020a2:	4b16      	ldr	r3, [pc, #88]	; (80020fc <SensorTaskF+0x238>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2101      	movs	r1, #1
 80020a8:	4618      	mov	r0, r3
 80020aa:	f009 fedd 	bl	800be68 <xQueueSemaphoreTake>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d111      	bne.n	80020d8 <SensorTaskF+0x214>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				P30SensorData = ReceiveP30();
 80020b4:	4c0d      	ldr	r4, [pc, #52]	; (80020ec <SensorTaskF+0x228>)
 80020b6:	463b      	mov	r3, r7
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff f8eb 	bl	8001294 <ReceiveP30>
 80020be:	4622      	mov	r2, r4
 80020c0:	463b      	mov	r3, r7
 80020c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020c6:	e882 0003 	stmia.w	r2, {r0, r1}
				xSemaphoreGive(P30SensorDataRWFlagHandle);
 80020ca:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <SensorTaskF+0x238>)
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	2300      	movs	r3, #0
 80020d0:	2200      	movs	r2, #0
 80020d2:	2100      	movs	r1, #0
 80020d4:	f009 fd3c 	bl	800bb50 <xQueueGenericSend>
			}
		}
		HAL_IWDG_Refresh(&hiwdg1);
 80020d8:	480e      	ldr	r0, [pc, #56]	; (8002114 <SensorTaskF+0x250>)
 80020da:	f004 fda1 	bl	8006c20 <HAL_IWDG_Refresh>
		if (xSemaphoreTake(DeepTransFinishHandleHandle,
 80020de:	e766      	b.n	8001fae <SensorTaskF+0xea>
 80020e0:	2000463c 	.word	0x2000463c
 80020e4:	20004524 	.word	0x20004524
 80020e8:	20004200 	.word	0x20004200
 80020ec:	200047e0 	.word	0x200047e0
 80020f0:	200041f0 	.word	0x200041f0
 80020f4:	200041fc 	.word	0x200041fc
 80020f8:	20004324 	.word	0x20004324
 80020fc:	200041ec 	.word	0x200041ec
 8002100:	20003fe0 	.word	0x20003fe0
 8002104:	200047ec 	.word	0x200047ec
 8002108:	200048e0 	.word	0x200048e0
 800210c:	200041f4 	.word	0x200041f4
 8002110:	20003fd8 	.word	0x20003fd8
 8002114:	200040d4 	.word	0x200040d4

08002118 <UtBF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UtBF */
void UtBF(void const *argument)
{
 8002118:	b5b0      	push	{r4, r5, r7, lr}
 800211a:	b0a8      	sub	sp, #160	; 0xa0
 800211c:	af0a      	add	r7, sp, #40	; 0x28
 800211e:	63f8      	str	r0, [r7, #60]	; 0x3c
	/* USER CODE BEGIN UtBF */
	DownDataDef UptoBaseData =
 8002120:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002124:	2234      	movs	r2, #52	; 0x34
 8002126:	2100      	movs	r1, #0
 8002128:	4618      	mov	r0, r3
 800212a:	f00b fe21 	bl	800dd70 <memset>
	{ 0 };
	u8 Relay_filter = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	u8 Relay_temp = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	OpenWrt_Delay(); //跳过openwrt�??机时�??
 800213a:	f7ff fe8b 	bl	8001e54 <OpenWrt_Delay>

	CaptureDownData();
 800213e:	463b      	mov	r3, r7
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe fa49 	bl	80005d8 <CaptureDownData>
	osDelay(100);
 8002146:	2064      	movs	r0, #100	; 0x64
 8002148:	f009 fa69 	bl	800b61e <osDelay>
	//打开串口接收
	UptoBaseData = CaptureDownData();
 800214c:	463b      	mov	r3, r7
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fa42 	bl	80005d8 <CaptureDownData>
 8002154:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8002158:	463d      	mov	r5, r7
 800215a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800215c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800215e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002160:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002166:	682b      	ldr	r3, [r5, #0]
 8002168:	6023      	str	r3, [r4, #0]
	xSemaphoreGive(BasetoUpDataRWFlagHandle);
 800216a:	4b44      	ldr	r3, [pc, #272]	; (800227c <UtBF+0x164>)
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	2300      	movs	r3, #0
 8002170:	2200      	movs	r2, #0
 8002172:	2100      	movs	r1, #0
 8002174:	f009 fcec 	bl	800bb50 <xQueueGenericSend>
	xSemaphoreGive(UptoBaseDataRWFlagHandle);
 8002178:	4b41      	ldr	r3, [pc, #260]	; (8002280 <UtBF+0x168>)
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	2300      	movs	r3, #0
 800217e:	2200      	movs	r2, #0
 8002180:	2100      	movs	r1, #0
 8002182:	f009 fce5 	bl	800bb50 <xQueueGenericSend>
	vTaskResume(BasetoUpTaskHandle);
 8002186:	4b3f      	ldr	r3, [pc, #252]	; (8002284 <UtBF+0x16c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f00a fb06 	bl	800c79c <vTaskResume>
	vTaskResume(SensorTaskHandle);
 8002190:	4b3d      	ldr	r3, [pc, #244]	; (8002288 <UtBF+0x170>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f00a fb01 	bl	800c79c <vTaskResume>
	osDelay(1);
 800219a:	2001      	movs	r0, #1
 800219c:	f009 fa3f 	bl	800b61e <osDelay>
	/* Infinite loop */
	for (;;)
	{
		//收取上位机指�??????
		if (xSemaphoreTake(UptoBaseTransFinishHandle,
 80021a0:	4b3a      	ldr	r3, [pc, #232]	; (800228c <UtBF+0x174>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f009 fe5e 	bl	800be68 <xQueueSemaphoreTake>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d15f      	bne.n	8002272 <UtBF+0x15a>
				0) == pdTRUE)
		{
			if (xSemaphoreTake(UptoBaseDataRWFlagHandle,
 80021b2:	4b33      	ldr	r3, [pc, #204]	; (8002280 <UtBF+0x168>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2101      	movs	r1, #1
 80021b8:	4618      	mov	r0, r3
 80021ba:	f009 fe55 	bl	800be68 <xQueueSemaphoreTake>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d156      	bne.n	8002272 <UtBF+0x15a>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				UptoBaseData = CaptureDownData();
 80021c4:	463b      	mov	r3, r7
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe fa06 	bl	80005d8 <CaptureDownData>
 80021cc:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80021d0:	463d      	mov	r5, r7
 80021d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021de:	682b      	ldr	r3, [r5, #0]
 80021e0:	6023      	str	r3, [r4, #0]
				//下传指令
				if (xSemaphoreTake(BasetoUpDataRWFlagHandle,
 80021e2:	4b26      	ldr	r3, [pc, #152]	; (800227c <UtBF+0x164>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2101      	movs	r1, #1
 80021e8:	4618      	mov	r0, r3
 80021ea:	f009 fe3d 	bl	800be68 <xQueueSemaphoreTake>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d137      	bne.n	8002264 <UtBF+0x14c>
						portTICK_PERIOD_MS) == pdTRUE)
				{
					if (UptoBaseData.Relay == Relay_temp) //继电器保持原来的值
 80021f4:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80021f8:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d10c      	bne.n	800221a <UtBF+0x102>
					{
						Relay_filter++; //累计变化
 8002200:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002204:	3301      	adds	r3, #1
 8002206:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (Relay_filter >= 2)
 800220a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800220e:	2b01      	cmp	r3, #1
 8002210:	d90a      	bls.n	8002228 <UtBF+0x110>
						{
							Relay_filter = 2;
 8002212:	2302      	movs	r3, #2
 8002214:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002218:	e006      	b.n	8002228 <UtBF+0x110>
						}
					}
					else //继电器变化
					{
						Relay_filter = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						Relay_temp = UptoBaseData.Relay; //暂存新值
 8002220:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8002224:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
					}

					if (Relay_filter >= 2) //滤波
 8002228:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800222c:	2b01      	cmp	r3, #1
 800222e:	d912      	bls.n	8002256 <UtBF+0x13e>
					{
						SendDownData(UptoBaseData);
 8002230:	466d      	mov	r5, sp
 8002232:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002238:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800223a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800223c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	602b      	str	r3, [r5, #0]
 8002242:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002246:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002248:	f7fe fb76 	bl	8000938 <SendDownData>
						HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800224c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002250:	480f      	ldr	r0, [pc, #60]	; (8002290 <UtBF+0x178>)
 8002252:	f004 fc7c 	bl	8006b4e <HAL_GPIO_TogglePin>
					}

					xSemaphoreGive(BasetoUpDataRWFlagHandle);
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <UtBF+0x164>)
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	2300      	movs	r3, #0
 800225c:	2200      	movs	r2, #0
 800225e:	2100      	movs	r1, #0
 8002260:	f009 fc76 	bl	800bb50 <xQueueGenericSend>
				}
				xSemaphoreGive(UptoBaseDataRWFlagHandle);
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <UtBF+0x168>)
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	2300      	movs	r3, #0
 800226a:	2200      	movs	r2, #0
 800226c:	2100      	movs	r1, #0
 800226e:	f009 fc6f 	bl	800bb50 <xQueueGenericSend>
			}
		}

		HAL_IWDG_Refresh(&hiwdg1);
 8002272:	4808      	ldr	r0, [pc, #32]	; (8002294 <UtBF+0x17c>)
 8002274:	f004 fcd4 	bl	8006c20 <HAL_IWDG_Refresh>
		if (xSemaphoreTake(UptoBaseTransFinishHandle,
 8002278:	e792      	b.n	80021a0 <UtBF+0x88>
 800227a:	bf00      	nop
 800227c:	200047e8 	.word	0x200047e8
 8002280:	20004520 	.word	0x20004520
 8002284:	200046d4 	.word	0x200046d4
 8002288:	20003fe0 	.word	0x20003fe0
 800228c:	20003fdc 	.word	0x20003fdc
 8002290:	58020800 	.word	0x58020800
 8002294:	200040d4 	.word	0x200040d4

08002298 <BtUF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_BtUF */
void BtUF(void const *argument)
{
 8002298:	b5b0      	push	{r4, r5, r7, lr}
 800229a:	b0b0      	sub	sp, #192	; 0xc0
 800229c:	af08      	add	r7, sp, #32
 800229e:	6378      	str	r0, [r7, #52]	; 0x34
	/* USER CODE BEGIN BtUF */
	//置为1的时候表示推进器控制�????????????
	//置为0的时候表示主控仓
	u8 SensorCarbin = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	UpDataDef Power_BasetoUpData =
 80022a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022aa:	2230      	movs	r2, #48	; 0x30
 80022ac:	2100      	movs	r1, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f00b fd5e 	bl	800dd70 <memset>
	{ 0 };
	UpDataDef BasetoUpData =
 80022b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022b8:	2230      	movs	r2, #48	; 0x30
 80022ba:	2100      	movs	r1, #0
 80022bc:	4618      	mov	r0, r3
 80022be:	f00b fd57 	bl	800dd70 <memset>
	{ 0 };

	vTaskSuspend(BasetoUpTaskHandle);
 80022c2:	4b8a      	ldr	r3, [pc, #552]	; (80024ec <BtUF+0x254>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f00a f9a4 	bl	800c614 <vTaskSuspend>
	CaptureUpData();
 80022cc:	463b      	mov	r3, r7
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe fbd2 	bl	8000a78 <CaptureUpData>
	osDelay(100);
 80022d4:	2064      	movs	r0, #100	; 0x64
 80022d6:	f009 f9a2 	bl	800b61e <osDelay>
	Power_BasetoUpData = CaptureUpData();
 80022da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe fbca 	bl	8000a78 <CaptureUpData>
	osDelay(50);
 80022e4:	2032      	movs	r0, #50	; 0x32
 80022e6:	f009 f99a 	bl	800b61e <osDelay>
	/* Infinite loop */
	for (;;)
	{
		//单独接收下位仓回传的数据
		if (xSemaphoreTake(BasetoUpTransFinishHandleHandle,
 80022ea:	4b81      	ldr	r3, [pc, #516]	; (80024f0 <BtUF+0x258>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2101      	movs	r1, #1
 80022f0:	4618      	mov	r0, r3
 80022f2:	f009 fdb9 	bl	800be68 <xQueueSemaphoreTake>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d10e      	bne.n	800231a <BtUF+0x82>
				portTICK_PERIOD_MS) == pdTRUE) //原来�?0
		{
			Power_BasetoUpData = CaptureUpData();
 80022fc:	463b      	mov	r3, r7
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe fbba 	bl	8000a78 <CaptureUpData>
 8002304:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8002308:	463d      	mov	r5, r7
 800230a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800230c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800230e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002312:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002316:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
		//漏水�???????�???????
		BasetoUpData.WaterDetect = HAL_GPIO_ReadPin(GPIOE,
 800231a:	2140      	movs	r1, #64	; 0x40
 800231c:	4875      	ldr	r0, [pc, #468]	; (80024f4 <BtUF+0x25c>)
 800231e:	f004 fbe5 	bl	8006aec <HAL_GPIO_ReadPin>
 8002322:	4603      	mov	r3, r0
		GPIO_PIN_6) << 1;
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	b2db      	uxtb	r3, r3
		BasetoUpData.WaterDetect = HAL_GPIO_ReadPin(GPIOE,
 8002328:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		//九轴数据
		if (xSemaphoreTake(WT931SensorDataRWFlagHandle,
 800232c:	4b72      	ldr	r3, [pc, #456]	; (80024f8 <BtUF+0x260>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2101      	movs	r1, #1
 8002332:	4618      	mov	r0, r3
 8002334:	f009 fd98 	bl	800be68 <xQueueSemaphoreTake>
 8002338:	4603      	mov	r3, r0
 800233a:	2b01      	cmp	r3, #1
 800233c:	d136      	bne.n	80023ac <BtUF+0x114>
				portTICK_PERIOD_MS) == pdTRUE)
		{
			BasetoUpData.AccNum[0] = WT931SensorData.AccNum[0];
 800233e:	4b6f      	ldr	r3, [pc, #444]	; (80024fc <BtUF+0x264>)
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			BasetoUpData.AccNum[1] = WT931SensorData.AccNum[1];
 8002346:	4b6d      	ldr	r3, [pc, #436]	; (80024fc <BtUF+0x264>)
 8002348:	885b      	ldrh	r3, [r3, #2]
 800234a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
			BasetoUpData.AccNum[2] = WT931SensorData.AccNum[2];
 800234e:	4b6b      	ldr	r3, [pc, #428]	; (80024fc <BtUF+0x264>)
 8002350:	889b      	ldrh	r3, [r3, #4]
 8002352:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			BasetoUpData.RotNum[0] = WT931SensorData.RotNum[0];
 8002356:	4b69      	ldr	r3, [pc, #420]	; (80024fc <BtUF+0x264>)
 8002358:	88db      	ldrh	r3, [r3, #6]
 800235a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			BasetoUpData.RotNum[1] = WT931SensorData.RotNum[1];
 800235e:	4b67      	ldr	r3, [pc, #412]	; (80024fc <BtUF+0x264>)
 8002360:	891b      	ldrh	r3, [r3, #8]
 8002362:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			BasetoUpData.RotNum[2] = WT931SensorData.RotNum[2];
 8002366:	4b65      	ldr	r3, [pc, #404]	; (80024fc <BtUF+0x264>)
 8002368:	895b      	ldrh	r3, [r3, #10]
 800236a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			BasetoUpData.EulNum[0] = WT931SensorData.EulNum[0];
 800236e:	4b63      	ldr	r3, [pc, #396]	; (80024fc <BtUF+0x264>)
 8002370:	899b      	ldrh	r3, [r3, #12]
 8002372:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
			BasetoUpData.EulNum[1] = WT931SensorData.EulNum[1];
 8002376:	4b61      	ldr	r3, [pc, #388]	; (80024fc <BtUF+0x264>)
 8002378:	89db      	ldrh	r3, [r3, #14]
 800237a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			BasetoUpData.EulNum[2] = WT931SensorData.EulNum[2];
 800237e:	4b5f      	ldr	r3, [pc, #380]	; (80024fc <BtUF+0x264>)
 8002380:	8a1b      	ldrh	r3, [r3, #16]
 8002382:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
			BasetoUpData.MagNum[0] = WT931SensorData.MagNum[0];
 8002386:	4b5d      	ldr	r3, [pc, #372]	; (80024fc <BtUF+0x264>)
 8002388:	8a5b      	ldrh	r3, [r3, #18]
 800238a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			BasetoUpData.MagNum[1] = WT931SensorData.MagNum[1];
 800238e:	4b5b      	ldr	r3, [pc, #364]	; (80024fc <BtUF+0x264>)
 8002390:	8a9b      	ldrh	r3, [r3, #20]
 8002392:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			BasetoUpData.MagNum[2] = WT931SensorData.MagNum[2];
 8002396:	4b59      	ldr	r3, [pc, #356]	; (80024fc <BtUF+0x264>)
 8002398:	8adb      	ldrh	r3, [r3, #22]
 800239a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
			xSemaphoreGive(WT931SensorDataRWFlagHandle);
 800239e:	4b56      	ldr	r3, [pc, #344]	; (80024f8 <BtUF+0x260>)
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	2300      	movs	r3, #0
 80023a4:	2200      	movs	r2, #0
 80023a6:	2100      	movs	r1, #0
 80023a8:	f009 fbd2 	bl	800bb50 <xQueueGenericSend>
		}
		//温湿度大气压数据
		if (xSemaphoreTake(GY39SensorDataRWFlagHandle,
 80023ac:	4b54      	ldr	r3, [pc, #336]	; (8002500 <BtUF+0x268>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2101      	movs	r1, #1
 80023b2:	4618      	mov	r0, r3
 80023b4:	f009 fd58 	bl	800be68 <xQueueSemaphoreTake>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d110      	bne.n	80023e0 <BtUF+0x148>
				portTICK_PERIOD_MS) == pdTRUE)
		{
			BasetoUpData.CabinBaro = GY39SensorData.Baro;
 80023be:	4b51      	ldr	r3, [pc, #324]	; (8002504 <BtUF+0x26c>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	643b      	str	r3, [r7, #64]	; 0x40
			BasetoUpData.CabinHum = GY39SensorData.Hum;
 80023c4:	4b4f      	ldr	r3, [pc, #316]	; (8002504 <BtUF+0x26c>)
 80023c6:	891b      	ldrh	r3, [r3, #8]
 80023c8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			BasetoUpData.CabinTemperature = GY39SensorData.Temperature;
 80023cc:	4b4d      	ldr	r3, [pc, #308]	; (8002504 <BtUF+0x26c>)
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
			xSemaphoreGive(GY39SensorDataRWFlagHandle);
 80023d2:	4b4b      	ldr	r3, [pc, #300]	; (8002500 <BtUF+0x268>)
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	2300      	movs	r3, #0
 80023d8:	2200      	movs	r2, #0
 80023da:	2100      	movs	r1, #0
 80023dc:	f009 fbb8 	bl	800bb50 <xQueueGenericSend>
		}
		//水深水温数据
		if (xSemaphoreTake(DeepSensorDataRWFlagHandle,
 80023e0:	4b49      	ldr	r3, [pc, #292]	; (8002508 <BtUF+0x270>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2101      	movs	r1, #1
 80023e6:	4618      	mov	r0, r3
 80023e8:	f009 fd3e 	bl	800be68 <xQueueSemaphoreTake>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d10e      	bne.n	8002410 <BtUF+0x178>
				portTICK_PERIOD_MS) == pdTRUE)
		{
			BasetoUpData.WaterDepth = DeepSensorData.WaterDepth;
 80023f2:	4b46      	ldr	r3, [pc, #280]	; (800250c <BtUF+0x274>)
 80023f4:	885b      	ldrh	r3, [r3, #2]
 80023f6:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
			BasetoUpData.WaterTemperature = DeepSensorData.WaterTemperature;
 80023fa:	4b44      	ldr	r3, [pc, #272]	; (800250c <BtUF+0x274>)
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			xSemaphoreGive(DeepSensorDataRWFlagHandle);
 8002402:	4b41      	ldr	r3, [pc, #260]	; (8002508 <BtUF+0x270>)
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	2300      	movs	r3, #0
 8002408:	2200      	movs	r2, #0
 800240a:	2100      	movs	r1, #0
 800240c:	f009 fba0 	bl	800bb50 <xQueueGenericSend>
		}
		//声呐数据
		if (xSemaphoreTake(P30SensorDataRWFlagHandle,
 8002410:	4b3f      	ldr	r3, [pc, #252]	; (8002510 <BtUF+0x278>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2101      	movs	r1, #1
 8002416:	4618      	mov	r0, r3
 8002418:	f009 fd26 	bl	800be68 <xQueueSemaphoreTake>
 800241c:	4603      	mov	r3, r0
 800241e:	2b01      	cmp	r3, #1
 8002420:	d10d      	bne.n	800243e <BtUF+0x1a6>
				portTICK_PERIOD_MS) == pdTRUE)
		{
			BasetoUpData.DepthToBottom = P30SensorData.DepthToBottom;
 8002422:	4b3c      	ldr	r3, [pc, #240]	; (8002514 <BtUF+0x27c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	667b      	str	r3, [r7, #100]	; 0x64
			BasetoUpData.Confidence = P30SensorData.Confidence;
 8002428:	4b3a      	ldr	r3, [pc, #232]	; (8002514 <BtUF+0x27c>)
 800242a:	889b      	ldrh	r3, [r3, #4]
 800242c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			xSemaphoreGive(P30SensorDataRWFlagHandle);
 8002430:	4b37      	ldr	r3, [pc, #220]	; (8002510 <BtUF+0x278>)
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	2300      	movs	r3, #0
 8002436:	2200      	movs	r2, #0
 8002438:	2100      	movs	r1, #0
 800243a:	f009 fb89 	bl	800bb50 <xQueueGenericSend>
		}

		if (SensorCarbin == 1)
 800243e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002442:	2b01      	cmp	r3, #1
 8002444:	d125      	bne.n	8002492 <BtUF+0x1fa>
		{
			if (Power_BasetoUpData.CabinNum == 0b0001)
 8002446:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800244a:	2b01      	cmp	r3, #1
 800244c:	d11d      	bne.n	800248a <BtUF+0x1f2>
			{
				if (xSemaphoreTake(UptoBaseDataRWFlagHandle,
 800244e:	4b32      	ldr	r3, [pc, #200]	; (8002518 <BtUF+0x280>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2101      	movs	r1, #1
 8002454:	4618      	mov	r0, r3
 8002456:	f009 fd07 	bl	800be68 <xQueueSemaphoreTake>
 800245a:	4603      	mov	r3, r0
 800245c:	2b01      	cmp	r3, #1
 800245e:	d114      	bne.n	800248a <BtUF+0x1f2>
						portTICK_PERIOD_MS) == pdTRUE)
				{
					SendUpData(Power_BasetoUpData);
 8002460:	466d      	mov	r5, sp
 8002462:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8002466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800246a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800246e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002472:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002476:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002478:	f7fe f952 	bl	8000720 <SendUpData>
					xSemaphoreGive(UptoBaseDataRWFlagHandle);
 800247c:	4b26      	ldr	r3, [pc, #152]	; (8002518 <BtUF+0x280>)
 800247e:	6818      	ldr	r0, [r3, #0]
 8002480:	2300      	movs	r3, #0
 8002482:	2200      	movs	r2, #0
 8002484:	2100      	movs	r1, #0
 8002486:	f009 fb63 	bl	800bb50 <xQueueGenericSend>
				}
			}
			SensorCarbin = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8002490:	e027      	b.n	80024e2 <BtUF+0x24a>
		}
		else if (SensorCarbin == 0)	//发�?�主控仓数据
 8002492:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002496:	2b00      	cmp	r3, #0
 8002498:	d123      	bne.n	80024e2 <BtUF+0x24a>
		{
			//上传数据
			if (xSemaphoreTake(UptoBaseDataRWFlagHandle,
 800249a:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <BtUF+0x280>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2101      	movs	r1, #1
 80024a0:	4618      	mov	r0, r3
 80024a2:	f009 fce1 	bl	800be68 <xQueueSemaphoreTake>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d117      	bne.n	80024dc <BtUF+0x244>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				BasetoUpData.CabinNum = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				SendUpData(BasetoUpData);
 80024b2:	466d      	mov	r5, sp
 80024b4:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80024b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024c0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80024c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024ca:	f7fe f929 	bl	8000720 <SendUpData>
				xSemaphoreGive(UptoBaseDataRWFlagHandle);
 80024ce:	4b12      	ldr	r3, [pc, #72]	; (8002518 <BtUF+0x280>)
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	2300      	movs	r3, #0
 80024d4:	2200      	movs	r2, #0
 80024d6:	2100      	movs	r1, #0
 80024d8:	f009 fb3a 	bl	800bb50 <xQueueGenericSend>
			}
			SensorCarbin = 1;
 80024dc:	2301      	movs	r3, #1
 80024de:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		}
		HAL_IWDG_Refresh(&hiwdg1);
 80024e2:	480e      	ldr	r0, [pc, #56]	; (800251c <BtUF+0x284>)
 80024e4:	f004 fb9c 	bl	8006c20 <HAL_IWDG_Refresh>
		if (xSemaphoreTake(BasetoUpTransFinishHandleHandle,
 80024e8:	e6ff      	b.n	80022ea <BtUF+0x52>
 80024ea:	bf00      	nop
 80024ec:	200046d4 	.word	0x200046d4
 80024f0:	200045a8 	.word	0x200045a8
 80024f4:	58021000 	.word	0x58021000
 80024f8:	20004324 	.word	0x20004324
 80024fc:	20004200 	.word	0x20004200
 8002500:	200041fc 	.word	0x200041fc
 8002504:	20004524 	.word	0x20004524
 8002508:	200041f0 	.word	0x200041f0
 800250c:	2000463c 	.word	0x2000463c
 8002510:	200041ec 	.word	0x200041ec
 8002514:	200047e0 	.word	0x200047e0
 8002518:	20004520 	.word	0x20004520
 800251c:	200040d4 	.word	0x200040d4

08002520 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a04      	ldr	r2, [pc, #16]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d101      	bne.n	8002536 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8002532:	f001 f9d9 	bl	80038e8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40001000 	.word	0x40001000

08002544 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002548:	b672      	cpsid	i
}
 800254a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800254c:	e7fe      	b.n	800254c <Error_Handler+0x8>
	...

08002550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002556:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <HAL_MspInit+0x38>)
 8002558:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800255c:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <HAL_MspInit+0x38>)
 800255e:	f043 0302 	orr.w	r3, r3, #2
 8002562:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002566:	4b08      	ldr	r3, [pc, #32]	; (8002588 <HAL_MspInit+0x38>)
 8002568:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	607b      	str	r3, [r7, #4]
 8002572:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002574:	2200      	movs	r2, #0
 8002576:	210f      	movs	r1, #15
 8002578:	f06f 0001 	mvn.w	r0, #1
 800257c:	f001 fa98 	bl	8003ab0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	58024400 	.word	0x58024400

0800258c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b094      	sub	sp, #80	; 0x50
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002594:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a96      	ldr	r2, [pc, #600]	; (8002804 <HAL_UART_MspInit+0x278>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	f040 8091 	bne.w	80026d2 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80025b0:	4b95      	ldr	r3, [pc, #596]	; (8002808 <HAL_UART_MspInit+0x27c>)
 80025b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025b6:	4a94      	ldr	r2, [pc, #592]	; (8002808 <HAL_UART_MspInit+0x27c>)
 80025b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80025bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025c0:	4b91      	ldr	r3, [pc, #580]	; (8002808 <HAL_UART_MspInit+0x27c>)
 80025c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80025cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ce:	4b8e      	ldr	r3, [pc, #568]	; (8002808 <HAL_UART_MspInit+0x27c>)
 80025d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025d4:	4a8c      	ldr	r2, [pc, #560]	; (8002808 <HAL_UART_MspInit+0x27c>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025de:	4b8a      	ldr	r3, [pc, #552]	; (8002808 <HAL_UART_MspInit+0x27c>)
 80025e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	637b      	str	r3, [r7, #52]	; 0x34
 80025ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025ec:	2303      	movs	r3, #3
 80025ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f0:	2302      	movs	r3, #2
 80025f2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f8:	2300      	movs	r3, #0
 80025fa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80025fc:	2308      	movs	r3, #8
 80025fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002600:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002604:	4619      	mov	r1, r3
 8002606:	4881      	ldr	r0, [pc, #516]	; (800280c <HAL_UART_MspInit+0x280>)
 8002608:	f004 f8c0 	bl	800678c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream5;
 800260c:	4b80      	ldr	r3, [pc, #512]	; (8002810 <HAL_UART_MspInit+0x284>)
 800260e:	4a81      	ldr	r2, [pc, #516]	; (8002814 <HAL_UART_MspInit+0x288>)
 8002610:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002612:	4b7f      	ldr	r3, [pc, #508]	; (8002810 <HAL_UART_MspInit+0x284>)
 8002614:	223f      	movs	r2, #63	; 0x3f
 8002616:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002618:	4b7d      	ldr	r3, [pc, #500]	; (8002810 <HAL_UART_MspInit+0x284>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800261e:	4b7c      	ldr	r3, [pc, #496]	; (8002810 <HAL_UART_MspInit+0x284>)
 8002620:	2200      	movs	r2, #0
 8002622:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002624:	4b7a      	ldr	r3, [pc, #488]	; (8002810 <HAL_UART_MspInit+0x284>)
 8002626:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800262a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800262c:	4b78      	ldr	r3, [pc, #480]	; (8002810 <HAL_UART_MspInit+0x284>)
 800262e:	2200      	movs	r2, #0
 8002630:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002632:	4b77      	ldr	r3, [pc, #476]	; (8002810 <HAL_UART_MspInit+0x284>)
 8002634:	2200      	movs	r2, #0
 8002636:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002638:	4b75      	ldr	r3, [pc, #468]	; (8002810 <HAL_UART_MspInit+0x284>)
 800263a:	2200      	movs	r2, #0
 800263c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800263e:	4b74      	ldr	r3, [pc, #464]	; (8002810 <HAL_UART_MspInit+0x284>)
 8002640:	2200      	movs	r2, #0
 8002642:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002644:	4b72      	ldr	r3, [pc, #456]	; (8002810 <HAL_UART_MspInit+0x284>)
 8002646:	2200      	movs	r2, #0
 8002648:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800264a:	4871      	ldr	r0, [pc, #452]	; (8002810 <HAL_UART_MspInit+0x284>)
 800264c:	f001 fa58 	bl	8003b00 <HAL_DMA_Init>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002656:	f7ff ff75 	bl	8002544 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a6c      	ldr	r2, [pc, #432]	; (8002810 <HAL_UART_MspInit+0x284>)
 800265e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002660:	4a6b      	ldr	r2, [pc, #428]	; (8002810 <HAL_UART_MspInit+0x284>)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream6;
 8002666:	4b6c      	ldr	r3, [pc, #432]	; (8002818 <HAL_UART_MspInit+0x28c>)
 8002668:	4a6c      	ldr	r2, [pc, #432]	; (800281c <HAL_UART_MspInit+0x290>)
 800266a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 800266c:	4b6a      	ldr	r3, [pc, #424]	; (8002818 <HAL_UART_MspInit+0x28c>)
 800266e:	2240      	movs	r2, #64	; 0x40
 8002670:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002672:	4b69      	ldr	r3, [pc, #420]	; (8002818 <HAL_UART_MspInit+0x28c>)
 8002674:	2240      	movs	r2, #64	; 0x40
 8002676:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002678:	4b67      	ldr	r3, [pc, #412]	; (8002818 <HAL_UART_MspInit+0x28c>)
 800267a:	2200      	movs	r2, #0
 800267c:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800267e:	4b66      	ldr	r3, [pc, #408]	; (8002818 <HAL_UART_MspInit+0x28c>)
 8002680:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002684:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002686:	4b64      	ldr	r3, [pc, #400]	; (8002818 <HAL_UART_MspInit+0x28c>)
 8002688:	2200      	movs	r2, #0
 800268a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800268c:	4b62      	ldr	r3, [pc, #392]	; (8002818 <HAL_UART_MspInit+0x28c>)
 800268e:	2200      	movs	r2, #0
 8002690:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002692:	4b61      	ldr	r3, [pc, #388]	; (8002818 <HAL_UART_MspInit+0x28c>)
 8002694:	2200      	movs	r2, #0
 8002696:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002698:	4b5f      	ldr	r3, [pc, #380]	; (8002818 <HAL_UART_MspInit+0x28c>)
 800269a:	2200      	movs	r2, #0
 800269c:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800269e:	4b5e      	ldr	r3, [pc, #376]	; (8002818 <HAL_UART_MspInit+0x28c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80026a4:	485c      	ldr	r0, [pc, #368]	; (8002818 <HAL_UART_MspInit+0x28c>)
 80026a6:	f001 fa2b 	bl	8003b00 <HAL_DMA_Init>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80026b0:	f7ff ff48 	bl	8002544 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a58      	ldr	r2, [pc, #352]	; (8002818 <HAL_UART_MspInit+0x28c>)
 80026b8:	679a      	str	r2, [r3, #120]	; 0x78
 80026ba:	4a57      	ldr	r2, [pc, #348]	; (8002818 <HAL_UART_MspInit+0x28c>)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80026c0:	2200      	movs	r2, #0
 80026c2:	2105      	movs	r1, #5
 80026c4:	2034      	movs	r0, #52	; 0x34
 80026c6:	f001 f9f3 	bl	8003ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80026ca:	2034      	movs	r0, #52	; 0x34
 80026cc:	f001 fa0a 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80026d0:	e2fc      	b.n	8002ccc <HAL_UART_MspInit+0x740>
  else if(huart->Instance==UART5)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a52      	ldr	r2, [pc, #328]	; (8002820 <HAL_UART_MspInit+0x294>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	f040 80ad 	bne.w	8002838 <HAL_UART_MspInit+0x2ac>
    __HAL_RCC_UART5_CLK_ENABLE();
 80026de:	4b4a      	ldr	r3, [pc, #296]	; (8002808 <HAL_UART_MspInit+0x27c>)
 80026e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026e4:	4a48      	ldr	r2, [pc, #288]	; (8002808 <HAL_UART_MspInit+0x27c>)
 80026e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026ee:	4b46      	ldr	r3, [pc, #280]	; (8002808 <HAL_UART_MspInit+0x27c>)
 80026f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026f8:	633b      	str	r3, [r7, #48]	; 0x30
 80026fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fc:	4b42      	ldr	r3, [pc, #264]	; (8002808 <HAL_UART_MspInit+0x27c>)
 80026fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002702:	4a41      	ldr	r2, [pc, #260]	; (8002808 <HAL_UART_MspInit+0x27c>)
 8002704:	f043 0302 	orr.w	r3, r3, #2
 8002708:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800270c:	4b3e      	ldr	r3, [pc, #248]	; (8002808 <HAL_UART_MspInit+0x27c>)
 800270e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800271a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800271e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002728:	2300      	movs	r3, #0
 800272a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800272c:	230e      	movs	r3, #14
 800272e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002730:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002734:	4619      	mov	r1, r3
 8002736:	483b      	ldr	r0, [pc, #236]	; (8002824 <HAL_UART_MspInit+0x298>)
 8002738:	f004 f828 	bl	800678c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream4;
 800273c:	4b3a      	ldr	r3, [pc, #232]	; (8002828 <HAL_UART_MspInit+0x29c>)
 800273e:	4a3b      	ldr	r2, [pc, #236]	; (800282c <HAL_UART_MspInit+0x2a0>)
 8002740:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8002742:	4b39      	ldr	r3, [pc, #228]	; (8002828 <HAL_UART_MspInit+0x29c>)
 8002744:	2241      	movs	r2, #65	; 0x41
 8002746:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002748:	4b37      	ldr	r3, [pc, #220]	; (8002828 <HAL_UART_MspInit+0x29c>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800274e:	4b36      	ldr	r3, [pc, #216]	; (8002828 <HAL_UART_MspInit+0x29c>)
 8002750:	2200      	movs	r2, #0
 8002752:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002754:	4b34      	ldr	r3, [pc, #208]	; (8002828 <HAL_UART_MspInit+0x29c>)
 8002756:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800275a:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800275c:	4b32      	ldr	r3, [pc, #200]	; (8002828 <HAL_UART_MspInit+0x29c>)
 800275e:	2200      	movs	r2, #0
 8002760:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002762:	4b31      	ldr	r3, [pc, #196]	; (8002828 <HAL_UART_MspInit+0x29c>)
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002768:	4b2f      	ldr	r3, [pc, #188]	; (8002828 <HAL_UART_MspInit+0x29c>)
 800276a:	2200      	movs	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800276e:	4b2e      	ldr	r3, [pc, #184]	; (8002828 <HAL_UART_MspInit+0x29c>)
 8002770:	2200      	movs	r2, #0
 8002772:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002774:	4b2c      	ldr	r3, [pc, #176]	; (8002828 <HAL_UART_MspInit+0x29c>)
 8002776:	2200      	movs	r2, #0
 8002778:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800277a:	482b      	ldr	r0, [pc, #172]	; (8002828 <HAL_UART_MspInit+0x29c>)
 800277c:	f001 f9c0 	bl	8003b00 <HAL_DMA_Init>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 8002786:	f7ff fedd 	bl	8002544 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a26      	ldr	r2, [pc, #152]	; (8002828 <HAL_UART_MspInit+0x29c>)
 800278e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002790:	4a25      	ldr	r2, [pc, #148]	; (8002828 <HAL_UART_MspInit+0x29c>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA2_Stream2;
 8002796:	4b26      	ldr	r3, [pc, #152]	; (8002830 <HAL_UART_MspInit+0x2a4>)
 8002798:	4a26      	ldr	r2, [pc, #152]	; (8002834 <HAL_UART_MspInit+0x2a8>)
 800279a:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 800279c:	4b24      	ldr	r3, [pc, #144]	; (8002830 <HAL_UART_MspInit+0x2a4>)
 800279e:	2242      	movs	r2, #66	; 0x42
 80027a0:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027a2:	4b23      	ldr	r3, [pc, #140]	; (8002830 <HAL_UART_MspInit+0x2a4>)
 80027a4:	2240      	movs	r2, #64	; 0x40
 80027a6:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027a8:	4b21      	ldr	r3, [pc, #132]	; (8002830 <HAL_UART_MspInit+0x2a4>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027ae:	4b20      	ldr	r3, [pc, #128]	; (8002830 <HAL_UART_MspInit+0x2a4>)
 80027b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027b4:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027b6:	4b1e      	ldr	r3, [pc, #120]	; (8002830 <HAL_UART_MspInit+0x2a4>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027bc:	4b1c      	ldr	r3, [pc, #112]	; (8002830 <HAL_UART_MspInit+0x2a4>)
 80027be:	2200      	movs	r2, #0
 80027c0:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 80027c2:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <HAL_UART_MspInit+0x2a4>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027c8:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_UART_MspInit+0x2a4>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027ce:	4b18      	ldr	r3, [pc, #96]	; (8002830 <HAL_UART_MspInit+0x2a4>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80027d4:	4816      	ldr	r0, [pc, #88]	; (8002830 <HAL_UART_MspInit+0x2a4>)
 80027d6:	f001 f993 	bl	8003b00 <HAL_DMA_Init>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <HAL_UART_MspInit+0x258>
      Error_Handler();
 80027e0:	f7ff feb0 	bl	8002544 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a12      	ldr	r2, [pc, #72]	; (8002830 <HAL_UART_MspInit+0x2a4>)
 80027e8:	679a      	str	r2, [r3, #120]	; 0x78
 80027ea:	4a11      	ldr	r2, [pc, #68]	; (8002830 <HAL_UART_MspInit+0x2a4>)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80027f0:	2200      	movs	r2, #0
 80027f2:	2105      	movs	r1, #5
 80027f4:	2035      	movs	r0, #53	; 0x35
 80027f6:	f001 f95b 	bl	8003ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80027fa:	2035      	movs	r0, #53	; 0x35
 80027fc:	f001 f972 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
}
 8002800:	e264      	b.n	8002ccc <HAL_UART_MspInit+0x740>
 8002802:	bf00      	nop
 8002804:	40004c00 	.word	0x40004c00
 8002808:	58024400 	.word	0x58024400
 800280c:	58020000 	.word	0x58020000
 8002810:	20003fe4 	.word	0x20003fe4
 8002814:	40020088 	.word	0x40020088
 8002818:	200047f0 	.word	0x200047f0
 800281c:	400200a0 	.word	0x400200a0
 8002820:	40005000 	.word	0x40005000
 8002824:	58020400 	.word	0x58020400
 8002828:	20004768 	.word	0x20004768
 800282c:	40020070 	.word	0x40020070
 8002830:	20004868 	.word	0x20004868
 8002834:	40020440 	.word	0x40020440
  else if(huart->Instance==UART8)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a96      	ldr	r2, [pc, #600]	; (8002a98 <HAL_UART_MspInit+0x50c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	f040 8091 	bne.w	8002966 <HAL_UART_MspInit+0x3da>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002844:	4b95      	ldr	r3, [pc, #596]	; (8002a9c <HAL_UART_MspInit+0x510>)
 8002846:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800284a:	4a94      	ldr	r2, [pc, #592]	; (8002a9c <HAL_UART_MspInit+0x510>)
 800284c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002850:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002854:	4b91      	ldr	r3, [pc, #580]	; (8002a9c <HAL_UART_MspInit+0x510>)
 8002856:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800285a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800285e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002860:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002862:	4b8e      	ldr	r3, [pc, #568]	; (8002a9c <HAL_UART_MspInit+0x510>)
 8002864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002868:	4a8c      	ldr	r2, [pc, #560]	; (8002a9c <HAL_UART_MspInit+0x510>)
 800286a:	f043 0310 	orr.w	r3, r3, #16
 800286e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002872:	4b8a      	ldr	r3, [pc, #552]	; (8002a9c <HAL_UART_MspInit+0x510>)
 8002874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002880:	2303      	movs	r3, #3
 8002882:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002884:	2302      	movs	r3, #2
 8002886:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002888:	2300      	movs	r3, #0
 800288a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288c:	2300      	movs	r3, #0
 800288e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002890:	2308      	movs	r3, #8
 8002892:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002894:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002898:	4619      	mov	r1, r3
 800289a:	4881      	ldr	r0, [pc, #516]	; (8002aa0 <HAL_UART_MspInit+0x514>)
 800289c:	f003 ff76 	bl	800678c <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream7;
 80028a0:	4b80      	ldr	r3, [pc, #512]	; (8002aa4 <HAL_UART_MspInit+0x518>)
 80028a2:	4a81      	ldr	r2, [pc, #516]	; (8002aa8 <HAL_UART_MspInit+0x51c>)
 80028a4:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 80028a6:	4b7f      	ldr	r3, [pc, #508]	; (8002aa4 <HAL_UART_MspInit+0x518>)
 80028a8:	2251      	movs	r2, #81	; 0x51
 80028aa:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028ac:	4b7d      	ldr	r3, [pc, #500]	; (8002aa4 <HAL_UART_MspInit+0x518>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028b2:	4b7c      	ldr	r3, [pc, #496]	; (8002aa4 <HAL_UART_MspInit+0x518>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028b8:	4b7a      	ldr	r3, [pc, #488]	; (8002aa4 <HAL_UART_MspInit+0x518>)
 80028ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028be:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028c0:	4b78      	ldr	r3, [pc, #480]	; (8002aa4 <HAL_UART_MspInit+0x518>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028c6:	4b77      	ldr	r3, [pc, #476]	; (8002aa4 <HAL_UART_MspInit+0x518>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 80028cc:	4b75      	ldr	r3, [pc, #468]	; (8002aa4 <HAL_UART_MspInit+0x518>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028d2:	4b74      	ldr	r3, [pc, #464]	; (8002aa4 <HAL_UART_MspInit+0x518>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028d8:	4b72      	ldr	r3, [pc, #456]	; (8002aa4 <HAL_UART_MspInit+0x518>)
 80028da:	2200      	movs	r2, #0
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80028de:	4871      	ldr	r0, [pc, #452]	; (8002aa4 <HAL_UART_MspInit+0x518>)
 80028e0:	f001 f90e 	bl	8003b00 <HAL_DMA_Init>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_UART_MspInit+0x362>
      Error_Handler();
 80028ea:	f7ff fe2b 	bl	8002544 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a6c      	ldr	r2, [pc, #432]	; (8002aa4 <HAL_UART_MspInit+0x518>)
 80028f2:	67da      	str	r2, [r3, #124]	; 0x7c
 80028f4:	4a6b      	ldr	r2, [pc, #428]	; (8002aa4 <HAL_UART_MspInit+0x518>)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart8_tx.Instance = DMA2_Stream0;
 80028fa:	4b6c      	ldr	r3, [pc, #432]	; (8002aac <HAL_UART_MspInit+0x520>)
 80028fc:	4a6c      	ldr	r2, [pc, #432]	; (8002ab0 <HAL_UART_MspInit+0x524>)
 80028fe:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8002900:	4b6a      	ldr	r3, [pc, #424]	; (8002aac <HAL_UART_MspInit+0x520>)
 8002902:	2252      	movs	r2, #82	; 0x52
 8002904:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002906:	4b69      	ldr	r3, [pc, #420]	; (8002aac <HAL_UART_MspInit+0x520>)
 8002908:	2240      	movs	r2, #64	; 0x40
 800290a:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800290c:	4b67      	ldr	r3, [pc, #412]	; (8002aac <HAL_UART_MspInit+0x520>)
 800290e:	2200      	movs	r2, #0
 8002910:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002912:	4b66      	ldr	r3, [pc, #408]	; (8002aac <HAL_UART_MspInit+0x520>)
 8002914:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002918:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800291a:	4b64      	ldr	r3, [pc, #400]	; (8002aac <HAL_UART_MspInit+0x520>)
 800291c:	2200      	movs	r2, #0
 800291e:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002920:	4b62      	ldr	r3, [pc, #392]	; (8002aac <HAL_UART_MspInit+0x520>)
 8002922:	2200      	movs	r2, #0
 8002924:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8002926:	4b61      	ldr	r3, [pc, #388]	; (8002aac <HAL_UART_MspInit+0x520>)
 8002928:	2200      	movs	r2, #0
 800292a:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 800292c:	4b5f      	ldr	r3, [pc, #380]	; (8002aac <HAL_UART_MspInit+0x520>)
 800292e:	2200      	movs	r2, #0
 8002930:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002932:	4b5e      	ldr	r3, [pc, #376]	; (8002aac <HAL_UART_MspInit+0x520>)
 8002934:	2200      	movs	r2, #0
 8002936:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8002938:	485c      	ldr	r0, [pc, #368]	; (8002aac <HAL_UART_MspInit+0x520>)
 800293a:	f001 f8e1 	bl	8003b00 <HAL_DMA_Init>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_UART_MspInit+0x3bc>
      Error_Handler();
 8002944:	f7ff fdfe 	bl	8002544 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a58      	ldr	r2, [pc, #352]	; (8002aac <HAL_UART_MspInit+0x520>)
 800294c:	679a      	str	r2, [r3, #120]	; 0x78
 800294e:	4a57      	ldr	r2, [pc, #348]	; (8002aac <HAL_UART_MspInit+0x520>)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8002954:	2200      	movs	r2, #0
 8002956:	2105      	movs	r1, #5
 8002958:	2053      	movs	r0, #83	; 0x53
 800295a:	f001 f8a9 	bl	8003ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800295e:	2053      	movs	r0, #83	; 0x53
 8002960:	f001 f8c0 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
}
 8002964:	e1b2      	b.n	8002ccc <HAL_UART_MspInit+0x740>
  else if(huart->Instance==USART1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a52      	ldr	r2, [pc, #328]	; (8002ab4 <HAL_UART_MspInit+0x528>)
 800296c:	4293      	cmp	r3, r2
 800296e:	f040 80ad 	bne.w	8002acc <HAL_UART_MspInit+0x540>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002972:	4b4a      	ldr	r3, [pc, #296]	; (8002a9c <HAL_UART_MspInit+0x510>)
 8002974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002978:	4a48      	ldr	r2, [pc, #288]	; (8002a9c <HAL_UART_MspInit+0x510>)
 800297a:	f043 0310 	orr.w	r3, r3, #16
 800297e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002982:	4b46      	ldr	r3, [pc, #280]	; (8002a9c <HAL_UART_MspInit+0x510>)
 8002984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002988:	f003 0310 	and.w	r3, r3, #16
 800298c:	623b      	str	r3, [r7, #32]
 800298e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002990:	4b42      	ldr	r3, [pc, #264]	; (8002a9c <HAL_UART_MspInit+0x510>)
 8002992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002996:	4a41      	ldr	r2, [pc, #260]	; (8002a9c <HAL_UART_MspInit+0x510>)
 8002998:	f043 0302 	orr.w	r3, r3, #2
 800299c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029a0:	4b3e      	ldr	r3, [pc, #248]	; (8002a9c <HAL_UART_MspInit+0x510>)
 80029a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	61fb      	str	r3, [r7, #28]
 80029ac:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80029ae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80029b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b4:	2302      	movs	r3, #2
 80029b6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029bc:	2300      	movs	r3, #0
 80029be:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80029c0:	2304      	movs	r3, #4
 80029c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029c8:	4619      	mov	r1, r3
 80029ca:	483b      	ldr	r0, [pc, #236]	; (8002ab8 <HAL_UART_MspInit+0x52c>)
 80029cc:	f003 fede 	bl	800678c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80029d0:	4b3a      	ldr	r3, [pc, #232]	; (8002abc <HAL_UART_MspInit+0x530>)
 80029d2:	4a3b      	ldr	r2, [pc, #236]	; (8002ac0 <HAL_UART_MspInit+0x534>)
 80029d4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80029d6:	4b39      	ldr	r3, [pc, #228]	; (8002abc <HAL_UART_MspInit+0x530>)
 80029d8:	2229      	movs	r2, #41	; 0x29
 80029da:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029dc:	4b37      	ldr	r3, [pc, #220]	; (8002abc <HAL_UART_MspInit+0x530>)
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029e2:	4b36      	ldr	r3, [pc, #216]	; (8002abc <HAL_UART_MspInit+0x530>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029e8:	4b34      	ldr	r3, [pc, #208]	; (8002abc <HAL_UART_MspInit+0x530>)
 80029ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029ee:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029f0:	4b32      	ldr	r3, [pc, #200]	; (8002abc <HAL_UART_MspInit+0x530>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029f6:	4b31      	ldr	r3, [pc, #196]	; (8002abc <HAL_UART_MspInit+0x530>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80029fc:	4b2f      	ldr	r3, [pc, #188]	; (8002abc <HAL_UART_MspInit+0x530>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a02:	4b2e      	ldr	r3, [pc, #184]	; (8002abc <HAL_UART_MspInit+0x530>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a08:	4b2c      	ldr	r3, [pc, #176]	; (8002abc <HAL_UART_MspInit+0x530>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002a0e:	482b      	ldr	r0, [pc, #172]	; (8002abc <HAL_UART_MspInit+0x530>)
 8002a10:	f001 f876 	bl	8003b00 <HAL_DMA_Init>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_UART_MspInit+0x492>
      Error_Handler();
 8002a1a:	f7ff fd93 	bl	8002544 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a26      	ldr	r2, [pc, #152]	; (8002abc <HAL_UART_MspInit+0x530>)
 8002a22:	67da      	str	r2, [r3, #124]	; 0x7c
 8002a24:	4a25      	ldr	r2, [pc, #148]	; (8002abc <HAL_UART_MspInit+0x530>)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8002a2a:	4b26      	ldr	r3, [pc, #152]	; (8002ac4 <HAL_UART_MspInit+0x538>)
 8002a2c:	4a26      	ldr	r2, [pc, #152]	; (8002ac8 <HAL_UART_MspInit+0x53c>)
 8002a2e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002a30:	4b24      	ldr	r3, [pc, #144]	; (8002ac4 <HAL_UART_MspInit+0x538>)
 8002a32:	222a      	movs	r2, #42	; 0x2a
 8002a34:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a36:	4b23      	ldr	r3, [pc, #140]	; (8002ac4 <HAL_UART_MspInit+0x538>)
 8002a38:	2240      	movs	r2, #64	; 0x40
 8002a3a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a3c:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <HAL_UART_MspInit+0x538>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a42:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <HAL_UART_MspInit+0x538>)
 8002a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a48:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a4a:	4b1e      	ldr	r3, [pc, #120]	; (8002ac4 <HAL_UART_MspInit+0x538>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a50:	4b1c      	ldr	r3, [pc, #112]	; (8002ac4 <HAL_UART_MspInit+0x538>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002a56:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <HAL_UART_MspInit+0x538>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a5c:	4b19      	ldr	r3, [pc, #100]	; (8002ac4 <HAL_UART_MspInit+0x538>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a62:	4b18      	ldr	r3, [pc, #96]	; (8002ac4 <HAL_UART_MspInit+0x538>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002a68:	4816      	ldr	r0, [pc, #88]	; (8002ac4 <HAL_UART_MspInit+0x538>)
 8002a6a:	f001 f849 	bl	8003b00 <HAL_DMA_Init>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_UART_MspInit+0x4ec>
      Error_Handler();
 8002a74:	f7ff fd66 	bl	8002544 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a12      	ldr	r2, [pc, #72]	; (8002ac4 <HAL_UART_MspInit+0x538>)
 8002a7c:	679a      	str	r2, [r3, #120]	; 0x78
 8002a7e:	4a11      	ldr	r2, [pc, #68]	; (8002ac4 <HAL_UART_MspInit+0x538>)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002a84:	2200      	movs	r2, #0
 8002a86:	2105      	movs	r1, #5
 8002a88:	2025      	movs	r0, #37	; 0x25
 8002a8a:	f001 f811 	bl	8003ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a8e:	2025      	movs	r0, #37	; 0x25
 8002a90:	f001 f828 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
}
 8002a94:	e11a      	b.n	8002ccc <HAL_UART_MspInit+0x740>
 8002a96:	bf00      	nop
 8002a98:	40007c00 	.word	0x40007c00
 8002a9c:	58024400 	.word	0x58024400
 8002aa0:	58021000 	.word	0x58021000
 8002aa4:	20004418 	.word	0x20004418
 8002aa8:	400200b8 	.word	0x400200b8
 8002aac:	20004530 	.word	0x20004530
 8002ab0:	40020410 	.word	0x40020410
 8002ab4:	40011000 	.word	0x40011000
 8002ab8:	58020400 	.word	0x58020400
 8002abc:	20004328 	.word	0x20004328
 8002ac0:	40020010 	.word	0x40020010
 8002ac4:	2000421c 	.word	0x2000421c
 8002ac8:	40020028 	.word	0x40020028
  else if(huart->Instance==USART2)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a80      	ldr	r2, [pc, #512]	; (8002cd4 <HAL_UART_MspInit+0x748>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	f040 8091 	bne.w	8002bfa <HAL_UART_MspInit+0x66e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ad8:	4b7f      	ldr	r3, [pc, #508]	; (8002cd8 <HAL_UART_MspInit+0x74c>)
 8002ada:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ade:	4a7e      	ldr	r2, [pc, #504]	; (8002cd8 <HAL_UART_MspInit+0x74c>)
 8002ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ae8:	4b7b      	ldr	r3, [pc, #492]	; (8002cd8 <HAL_UART_MspInit+0x74c>)
 8002aea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af6:	4b78      	ldr	r3, [pc, #480]	; (8002cd8 <HAL_UART_MspInit+0x74c>)
 8002af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002afc:	4a76      	ldr	r2, [pc, #472]	; (8002cd8 <HAL_UART_MspInit+0x74c>)
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b06:	4b74      	ldr	r3, [pc, #464]	; (8002cd8 <HAL_UART_MspInit+0x74c>)
 8002b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b14:	230c      	movs	r3, #12
 8002b16:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	2300      	movs	r3, #0
 8002b22:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b24:	2307      	movs	r3, #7
 8002b26:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	486b      	ldr	r0, [pc, #428]	; (8002cdc <HAL_UART_MspInit+0x750>)
 8002b30:	f003 fe2c 	bl	800678c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream2;
 8002b34:	4b6a      	ldr	r3, [pc, #424]	; (8002ce0 <HAL_UART_MspInit+0x754>)
 8002b36:	4a6b      	ldr	r2, [pc, #428]	; (8002ce4 <HAL_UART_MspInit+0x758>)
 8002b38:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002b3a:	4b69      	ldr	r3, [pc, #420]	; (8002ce0 <HAL_UART_MspInit+0x754>)
 8002b3c:	222b      	movs	r2, #43	; 0x2b
 8002b3e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b40:	4b67      	ldr	r3, [pc, #412]	; (8002ce0 <HAL_UART_MspInit+0x754>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b46:	4b66      	ldr	r3, [pc, #408]	; (8002ce0 <HAL_UART_MspInit+0x754>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b4c:	4b64      	ldr	r3, [pc, #400]	; (8002ce0 <HAL_UART_MspInit+0x754>)
 8002b4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b52:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b54:	4b62      	ldr	r3, [pc, #392]	; (8002ce0 <HAL_UART_MspInit+0x754>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b5a:	4b61      	ldr	r3, [pc, #388]	; (8002ce0 <HAL_UART_MspInit+0x754>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002b60:	4b5f      	ldr	r3, [pc, #380]	; (8002ce0 <HAL_UART_MspInit+0x754>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b66:	4b5e      	ldr	r3, [pc, #376]	; (8002ce0 <HAL_UART_MspInit+0x754>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b6c:	4b5c      	ldr	r3, [pc, #368]	; (8002ce0 <HAL_UART_MspInit+0x754>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b72:	485b      	ldr	r0, [pc, #364]	; (8002ce0 <HAL_UART_MspInit+0x754>)
 8002b74:	f000 ffc4 	bl	8003b00 <HAL_DMA_Init>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_UART_MspInit+0x5f6>
      Error_Handler();
 8002b7e:	f7ff fce1 	bl	8002544 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a56      	ldr	r2, [pc, #344]	; (8002ce0 <HAL_UART_MspInit+0x754>)
 8002b86:	67da      	str	r2, [r3, #124]	; 0x7c
 8002b88:	4a55      	ldr	r2, [pc, #340]	; (8002ce0 <HAL_UART_MspInit+0x754>)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA2_Stream1;
 8002b8e:	4b56      	ldr	r3, [pc, #344]	; (8002ce8 <HAL_UART_MspInit+0x75c>)
 8002b90:	4a56      	ldr	r2, [pc, #344]	; (8002cec <HAL_UART_MspInit+0x760>)
 8002b92:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002b94:	4b54      	ldr	r3, [pc, #336]	; (8002ce8 <HAL_UART_MspInit+0x75c>)
 8002b96:	222c      	movs	r2, #44	; 0x2c
 8002b98:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b9a:	4b53      	ldr	r3, [pc, #332]	; (8002ce8 <HAL_UART_MspInit+0x75c>)
 8002b9c:	2240      	movs	r2, #64	; 0x40
 8002b9e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ba0:	4b51      	ldr	r3, [pc, #324]	; (8002ce8 <HAL_UART_MspInit+0x75c>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ba6:	4b50      	ldr	r3, [pc, #320]	; (8002ce8 <HAL_UART_MspInit+0x75c>)
 8002ba8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bac:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bae:	4b4e      	ldr	r3, [pc, #312]	; (8002ce8 <HAL_UART_MspInit+0x75c>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bb4:	4b4c      	ldr	r3, [pc, #304]	; (8002ce8 <HAL_UART_MspInit+0x75c>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002bba:	4b4b      	ldr	r3, [pc, #300]	; (8002ce8 <HAL_UART_MspInit+0x75c>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bc0:	4b49      	ldr	r3, [pc, #292]	; (8002ce8 <HAL_UART_MspInit+0x75c>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bc6:	4b48      	ldr	r3, [pc, #288]	; (8002ce8 <HAL_UART_MspInit+0x75c>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002bcc:	4846      	ldr	r0, [pc, #280]	; (8002ce8 <HAL_UART_MspInit+0x75c>)
 8002bce:	f000 ff97 	bl	8003b00 <HAL_DMA_Init>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_UART_MspInit+0x650>
      Error_Handler();
 8002bd8:	f7ff fcb4 	bl	8002544 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a42      	ldr	r2, [pc, #264]	; (8002ce8 <HAL_UART_MspInit+0x75c>)
 8002be0:	679a      	str	r2, [r3, #120]	; 0x78
 8002be2:	4a41      	ldr	r2, [pc, #260]	; (8002ce8 <HAL_UART_MspInit+0x75c>)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002be8:	2200      	movs	r2, #0
 8002bea:	2105      	movs	r1, #5
 8002bec:	2026      	movs	r0, #38	; 0x26
 8002bee:	f000 ff5f 	bl	8003ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bf2:	2026      	movs	r0, #38	; 0x26
 8002bf4:	f000 ff76 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
}
 8002bf8:	e068      	b.n	8002ccc <HAL_UART_MspInit+0x740>
  else if(huart->Instance==USART3)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a3c      	ldr	r2, [pc, #240]	; (8002cf0 <HAL_UART_MspInit+0x764>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d163      	bne.n	8002ccc <HAL_UART_MspInit+0x740>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c04:	4b34      	ldr	r3, [pc, #208]	; (8002cd8 <HAL_UART_MspInit+0x74c>)
 8002c06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c0a:	4a33      	ldr	r2, [pc, #204]	; (8002cd8 <HAL_UART_MspInit+0x74c>)
 8002c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c14:	4b30      	ldr	r3, [pc, #192]	; (8002cd8 <HAL_UART_MspInit+0x74c>)
 8002c16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c22:	4b2d      	ldr	r3, [pc, #180]	; (8002cd8 <HAL_UART_MspInit+0x74c>)
 8002c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c28:	4a2b      	ldr	r2, [pc, #172]	; (8002cd8 <HAL_UART_MspInit+0x74c>)
 8002c2a:	f043 0302 	orr.w	r3, r3, #2
 8002c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c32:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <HAL_UART_MspInit+0x74c>)
 8002c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c40:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c44:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c46:	2302      	movs	r3, #2
 8002c48:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c52:	2307      	movs	r3, #7
 8002c54:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4825      	ldr	r0, [pc, #148]	; (8002cf4 <HAL_UART_MspInit+0x768>)
 8002c5e:	f003 fd95 	bl	800678c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream3;
 8002c62:	4b25      	ldr	r3, [pc, #148]	; (8002cf8 <HAL_UART_MspInit+0x76c>)
 8002c64:	4a25      	ldr	r2, [pc, #148]	; (8002cfc <HAL_UART_MspInit+0x770>)
 8002c66:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002c68:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <HAL_UART_MspInit+0x76c>)
 8002c6a:	222d      	movs	r2, #45	; 0x2d
 8002c6c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c6e:	4b22      	ldr	r3, [pc, #136]	; (8002cf8 <HAL_UART_MspInit+0x76c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c74:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <HAL_UART_MspInit+0x76c>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c7a:	4b1f      	ldr	r3, [pc, #124]	; (8002cf8 <HAL_UART_MspInit+0x76c>)
 8002c7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c80:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c82:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <HAL_UART_MspInit+0x76c>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c88:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <HAL_UART_MspInit+0x76c>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002c8e:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <HAL_UART_MspInit+0x76c>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c94:	4b18      	ldr	r3, [pc, #96]	; (8002cf8 <HAL_UART_MspInit+0x76c>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c9a:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <HAL_UART_MspInit+0x76c>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002ca0:	4815      	ldr	r0, [pc, #84]	; (8002cf8 <HAL_UART_MspInit+0x76c>)
 8002ca2:	f000 ff2d 	bl	8003b00 <HAL_DMA_Init>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <HAL_UART_MspInit+0x724>
      Error_Handler();
 8002cac:	f7ff fc4a 	bl	8002544 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a11      	ldr	r2, [pc, #68]	; (8002cf8 <HAL_UART_MspInit+0x76c>)
 8002cb4:	67da      	str	r2, [r3, #124]	; 0x7c
 8002cb6:	4a10      	ldr	r2, [pc, #64]	; (8002cf8 <HAL_UART_MspInit+0x76c>)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2105      	movs	r1, #5
 8002cc0:	2027      	movs	r0, #39	; 0x27
 8002cc2:	f000 fef5 	bl	8003ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002cc6:	2027      	movs	r0, #39	; 0x27
 8002cc8:	f000 ff0c 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
}
 8002ccc:	bf00      	nop
 8002cce:	3750      	adds	r7, #80	; 0x50
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40004400 	.word	0x40004400
 8002cd8:	58024400 	.word	0x58024400
 8002cdc:	58020000 	.word	0x58020000
 8002ce0:	2000405c 	.word	0x2000405c
 8002ce4:	40020040 	.word	0x40020040
 8002ce8:	200043a0 	.word	0x200043a0
 8002cec:	40020428 	.word	0x40020428
 8002cf0:	40004800 	.word	0x40004800
 8002cf4:	58020400 	.word	0x58020400
 8002cf8:	200040e4 	.word	0x200040e4
 8002cfc:	40020058 	.word	0x40020058

08002d00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b090      	sub	sp, #64	; 0x40
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b0f      	cmp	r3, #15
 8002d0c:	d827      	bhi.n	8002d5e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002d0e:	2200      	movs	r2, #0
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	2036      	movs	r0, #54	; 0x36
 8002d14:	f000 fecc 	bl	8003ab0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d18:	2036      	movs	r0, #54	; 0x36
 8002d1a:	f000 fee3 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002d1e:	4a29      	ldr	r2, [pc, #164]	; (8002dc4 <HAL_InitTick+0xc4>)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002d24:	4b28      	ldr	r3, [pc, #160]	; (8002dc8 <HAL_InitTick+0xc8>)
 8002d26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d2a:	4a27      	ldr	r2, [pc, #156]	; (8002dc8 <HAL_InitTick+0xc8>)
 8002d2c:	f043 0310 	orr.w	r3, r3, #16
 8002d30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d34:	4b24      	ldr	r3, [pc, #144]	; (8002dc8 <HAL_InitTick+0xc8>)
 8002d36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d3a:	f003 0310 	and.w	r3, r3, #16
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d42:	f107 0210 	add.w	r2, r7, #16
 8002d46:	f107 0314 	add.w	r3, r7, #20
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f004 ff4d 	bl	8007bec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d54:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d106      	bne.n	8002d6a <HAL_InitTick+0x6a>
 8002d5c:	e001      	b.n	8002d62 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e02b      	b.n	8002dba <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002d62:	f004 ff17 	bl	8007b94 <HAL_RCC_GetPCLK1Freq>
 8002d66:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002d68:	e004      	b.n	8002d74 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002d6a:	f004 ff13 	bl	8007b94 <HAL_RCC_GetPCLK1Freq>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d76:	4a15      	ldr	r2, [pc, #84]	; (8002dcc <HAL_InitTick+0xcc>)
 8002d78:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7c:	0c9b      	lsrs	r3, r3, #18
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002d82:	4b13      	ldr	r3, [pc, #76]	; (8002dd0 <HAL_InitTick+0xd0>)
 8002d84:	4a13      	ldr	r2, [pc, #76]	; (8002dd4 <HAL_InitTick+0xd4>)
 8002d86:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002d88:	4b11      	ldr	r3, [pc, #68]	; (8002dd0 <HAL_InitTick+0xd0>)
 8002d8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d8e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002d90:	4a0f      	ldr	r2, [pc, #60]	; (8002dd0 <HAL_InitTick+0xd0>)
 8002d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d94:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002d96:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <HAL_InitTick+0xd0>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <HAL_InitTick+0xd0>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002da2:	480b      	ldr	r0, [pc, #44]	; (8002dd0 <HAL_InitTick+0xd0>)
 8002da4:	f006 fac6 	bl	8009334 <HAL_TIM_Base_Init>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d104      	bne.n	8002db8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002dae:	4808      	ldr	r0, [pc, #32]	; (8002dd0 <HAL_InitTick+0xd0>)
 8002db0:	f006 fb22 	bl	80093f8 <HAL_TIM_Base_Start_IT>
 8002db4:	4603      	mov	r3, r0
 8002db6:	e000      	b.n	8002dba <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3740      	adds	r7, #64	; 0x40
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000008 	.word	0x20000008
 8002dc8:	58024400 	.word	0x58024400
 8002dcc:	431bde83 	.word	0x431bde83
 8002dd0:	200048e4 	.word	0x200048e4
 8002dd4:	40001000 	.word	0x40001000

08002dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8002ddc:	e7fe      	b.n	8002ddc <NMI_Handler+0x4>

08002dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002de2:	e7fe      	b.n	8002de2 <HardFault_Handler+0x4>

08002de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002de8:	e7fe      	b.n	8002de8 <MemManage_Handler+0x4>

08002dea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dee:	e7fe      	b.n	8002dee <BusFault_Handler+0x4>

08002df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002df4:	e7fe      	b.n	8002df4 <UsageFault_Handler+0x4>

08002df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002df6:	b480      	push	{r7}
 8002df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002e08:	4802      	ldr	r0, [pc, #8]	; (8002e14 <DMA1_Stream0_IRQHandler+0x10>)
 8002e0a:	f002 f9a1 	bl	8005150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20004328 	.word	0x20004328

08002e18 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002e1c:	4802      	ldr	r0, [pc, #8]	; (8002e28 <DMA1_Stream1_IRQHandler+0x10>)
 8002e1e:	f002 f997 	bl	8005150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	2000421c 	.word	0x2000421c

08002e2c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002e30:	4802      	ldr	r0, [pc, #8]	; (8002e3c <DMA1_Stream2_IRQHandler+0x10>)
 8002e32:	f002 f98d 	bl	8005150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	2000405c 	.word	0x2000405c

08002e40 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002e44:	4802      	ldr	r0, [pc, #8]	; (8002e50 <DMA1_Stream3_IRQHandler+0x10>)
 8002e46:	f002 f983 	bl	8005150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	200040e4 	.word	0x200040e4

08002e54 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002e58:	4802      	ldr	r0, [pc, #8]	; (8002e64 <DMA1_Stream4_IRQHandler+0x10>)
 8002e5a:	f002 f979 	bl	8005150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20004768 	.word	0x20004768

08002e68 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002e6c:	4802      	ldr	r0, [pc, #8]	; (8002e78 <DMA1_Stream5_IRQHandler+0x10>)
 8002e6e:	f002 f96f 	bl	8005150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20003fe4 	.word	0x20003fe4

08002e7c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002e80:	4802      	ldr	r0, [pc, #8]	; (8002e8c <DMA1_Stream6_IRQHandler+0x10>)
 8002e82:	f002 f965 	bl	8005150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	200047f0 	.word	0x200047f0

08002e90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE);
 8002e9a:	4b40      	ldr	r3, [pc, #256]	; (8002f9c <USART1_IRQHandler+0x10c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	2b10      	cmp	r3, #16
 8002ea6:	bf0c      	ite	eq
 8002ea8:	2301      	moveq	r3, #1
 8002eaa:	2300      	movne	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d06b      	beq.n	8002f8e <USART1_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8002eb6:	4b39      	ldr	r3, [pc, #228]	; (8002f9c <USART1_IRQHandler+0x10c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2210      	movs	r2, #16
 8002ebc:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart1);
 8002ebe:	4837      	ldr	r0, [pc, #220]	; (8002f9c <USART1_IRQHandler+0x10c>)
 8002ec0:	f006 fe20 	bl	8009b04 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8002ec4:	4b36      	ldr	r3, [pc, #216]	; (8002fa0 <USART1_IRQHandler+0x110>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a36      	ldr	r2, [pc, #216]	; (8002fa4 <USART1_IRQHandler+0x114>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d04a      	beq.n	8002f64 <USART1_IRQHandler+0xd4>
 8002ece:	4b34      	ldr	r3, [pc, #208]	; (8002fa0 <USART1_IRQHandler+0x110>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a35      	ldr	r2, [pc, #212]	; (8002fa8 <USART1_IRQHandler+0x118>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d045      	beq.n	8002f64 <USART1_IRQHandler+0xd4>
 8002ed8:	4b31      	ldr	r3, [pc, #196]	; (8002fa0 <USART1_IRQHandler+0x110>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a33      	ldr	r2, [pc, #204]	; (8002fac <USART1_IRQHandler+0x11c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d040      	beq.n	8002f64 <USART1_IRQHandler+0xd4>
 8002ee2:	4b2f      	ldr	r3, [pc, #188]	; (8002fa0 <USART1_IRQHandler+0x110>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a32      	ldr	r2, [pc, #200]	; (8002fb0 <USART1_IRQHandler+0x120>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d03b      	beq.n	8002f64 <USART1_IRQHandler+0xd4>
 8002eec:	4b2c      	ldr	r3, [pc, #176]	; (8002fa0 <USART1_IRQHandler+0x110>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a30      	ldr	r2, [pc, #192]	; (8002fb4 <USART1_IRQHandler+0x124>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d036      	beq.n	8002f64 <USART1_IRQHandler+0xd4>
 8002ef6:	4b2a      	ldr	r3, [pc, #168]	; (8002fa0 <USART1_IRQHandler+0x110>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a2f      	ldr	r2, [pc, #188]	; (8002fb8 <USART1_IRQHandler+0x128>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d031      	beq.n	8002f64 <USART1_IRQHandler+0xd4>
 8002f00:	4b27      	ldr	r3, [pc, #156]	; (8002fa0 <USART1_IRQHandler+0x110>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a2d      	ldr	r2, [pc, #180]	; (8002fbc <USART1_IRQHandler+0x12c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d02c      	beq.n	8002f64 <USART1_IRQHandler+0xd4>
 8002f0a:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <USART1_IRQHandler+0x110>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a2c      	ldr	r2, [pc, #176]	; (8002fc0 <USART1_IRQHandler+0x130>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d027      	beq.n	8002f64 <USART1_IRQHandler+0xd4>
 8002f14:	4b22      	ldr	r3, [pc, #136]	; (8002fa0 <USART1_IRQHandler+0x110>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a2a      	ldr	r2, [pc, #168]	; (8002fc4 <USART1_IRQHandler+0x134>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d022      	beq.n	8002f64 <USART1_IRQHandler+0xd4>
 8002f1e:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <USART1_IRQHandler+0x110>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a29      	ldr	r2, [pc, #164]	; (8002fc8 <USART1_IRQHandler+0x138>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d01d      	beq.n	8002f64 <USART1_IRQHandler+0xd4>
 8002f28:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <USART1_IRQHandler+0x110>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a27      	ldr	r2, [pc, #156]	; (8002fcc <USART1_IRQHandler+0x13c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d018      	beq.n	8002f64 <USART1_IRQHandler+0xd4>
 8002f32:	4b1b      	ldr	r3, [pc, #108]	; (8002fa0 <USART1_IRQHandler+0x110>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a26      	ldr	r2, [pc, #152]	; (8002fd0 <USART1_IRQHandler+0x140>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d013      	beq.n	8002f64 <USART1_IRQHandler+0xd4>
 8002f3c:	4b18      	ldr	r3, [pc, #96]	; (8002fa0 <USART1_IRQHandler+0x110>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a24      	ldr	r2, [pc, #144]	; (8002fd4 <USART1_IRQHandler+0x144>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00e      	beq.n	8002f64 <USART1_IRQHandler+0xd4>
 8002f46:	4b16      	ldr	r3, [pc, #88]	; (8002fa0 <USART1_IRQHandler+0x110>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a23      	ldr	r2, [pc, #140]	; (8002fd8 <USART1_IRQHandler+0x148>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d009      	beq.n	8002f64 <USART1_IRQHandler+0xd4>
 8002f50:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <USART1_IRQHandler+0x110>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a21      	ldr	r2, [pc, #132]	; (8002fdc <USART1_IRQHandler+0x14c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d004      	beq.n	8002f64 <USART1_IRQHandler+0xd4>
 8002f5a:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <USART1_IRQHandler+0x110>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a20      	ldr	r2, [pc, #128]	; (8002fe0 <USART1_IRQHandler+0x150>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d103      	bne.n	8002f6c <USART1_IRQHandler+0xdc>
 8002f64:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <USART1_IRQHandler+0x110>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	e002      	b.n	8002f72 <USART1_IRQHandler+0xe2>
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <USART1_IRQHandler+0x110>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8002f72:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <USART1_IRQHandler+0x10c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <USART1_IRQHandler+0x10c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0210 	bic.w	r2, r2, #16
 8002f80:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(UptoBaseTransFinishHandle, pdFALSE);
 8002f82:	4b18      	ldr	r3, [pc, #96]	; (8002fe4 <USART1_IRQHandler+0x154>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2100      	movs	r1, #0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f008 fedf 	bl	800bd4c <xQueueGiveFromISR>
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f8e:	4803      	ldr	r0, [pc, #12]	; (8002f9c <USART1_IRQHandler+0x10c>)
 8002f90:	f006 fe28 	bl	8009be4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f94:	bf00      	nop
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20004490 	.word	0x20004490
 8002fa0:	20004328 	.word	0x20004328
 8002fa4:	40020010 	.word	0x40020010
 8002fa8:	40020028 	.word	0x40020028
 8002fac:	40020040 	.word	0x40020040
 8002fb0:	40020058 	.word	0x40020058
 8002fb4:	40020070 	.word	0x40020070
 8002fb8:	40020088 	.word	0x40020088
 8002fbc:	400200a0 	.word	0x400200a0
 8002fc0:	400200b8 	.word	0x400200b8
 8002fc4:	40020410 	.word	0x40020410
 8002fc8:	40020428 	.word	0x40020428
 8002fcc:	40020440 	.word	0x40020440
 8002fd0:	40020458 	.word	0x40020458
 8002fd4:	40020470 	.word	0x40020470
 8002fd8:	40020488 	.word	0x40020488
 8002fdc:	400204a0 	.word	0x400204a0
 8002fe0:	400204b8 	.word	0x400204b8
 8002fe4:	20003fdc 	.word	0x20003fdc

08002fe8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE);
 8002ff2:	4b40      	ldr	r3, [pc, #256]	; (80030f4 <USART2_IRQHandler+0x10c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b10      	cmp	r3, #16
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d06b      	beq.n	80030e6 <USART2_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 800300e:	4b39      	ldr	r3, [pc, #228]	; (80030f4 <USART2_IRQHandler+0x10c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2210      	movs	r2, #16
 8003014:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart2);
 8003016:	4837      	ldr	r0, [pc, #220]	; (80030f4 <USART2_IRQHandler+0x10c>)
 8003018:	f006 fd74 	bl	8009b04 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 800301c:	4b36      	ldr	r3, [pc, #216]	; (80030f8 <USART2_IRQHandler+0x110>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a36      	ldr	r2, [pc, #216]	; (80030fc <USART2_IRQHandler+0x114>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d04a      	beq.n	80030bc <USART2_IRQHandler+0xd4>
 8003026:	4b34      	ldr	r3, [pc, #208]	; (80030f8 <USART2_IRQHandler+0x110>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a35      	ldr	r2, [pc, #212]	; (8003100 <USART2_IRQHandler+0x118>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d045      	beq.n	80030bc <USART2_IRQHandler+0xd4>
 8003030:	4b31      	ldr	r3, [pc, #196]	; (80030f8 <USART2_IRQHandler+0x110>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a33      	ldr	r2, [pc, #204]	; (8003104 <USART2_IRQHandler+0x11c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d040      	beq.n	80030bc <USART2_IRQHandler+0xd4>
 800303a:	4b2f      	ldr	r3, [pc, #188]	; (80030f8 <USART2_IRQHandler+0x110>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a32      	ldr	r2, [pc, #200]	; (8003108 <USART2_IRQHandler+0x120>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d03b      	beq.n	80030bc <USART2_IRQHandler+0xd4>
 8003044:	4b2c      	ldr	r3, [pc, #176]	; (80030f8 <USART2_IRQHandler+0x110>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a30      	ldr	r2, [pc, #192]	; (800310c <USART2_IRQHandler+0x124>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d036      	beq.n	80030bc <USART2_IRQHandler+0xd4>
 800304e:	4b2a      	ldr	r3, [pc, #168]	; (80030f8 <USART2_IRQHandler+0x110>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a2f      	ldr	r2, [pc, #188]	; (8003110 <USART2_IRQHandler+0x128>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d031      	beq.n	80030bc <USART2_IRQHandler+0xd4>
 8003058:	4b27      	ldr	r3, [pc, #156]	; (80030f8 <USART2_IRQHandler+0x110>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a2d      	ldr	r2, [pc, #180]	; (8003114 <USART2_IRQHandler+0x12c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d02c      	beq.n	80030bc <USART2_IRQHandler+0xd4>
 8003062:	4b25      	ldr	r3, [pc, #148]	; (80030f8 <USART2_IRQHandler+0x110>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a2c      	ldr	r2, [pc, #176]	; (8003118 <USART2_IRQHandler+0x130>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d027      	beq.n	80030bc <USART2_IRQHandler+0xd4>
 800306c:	4b22      	ldr	r3, [pc, #136]	; (80030f8 <USART2_IRQHandler+0x110>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a2a      	ldr	r2, [pc, #168]	; (800311c <USART2_IRQHandler+0x134>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d022      	beq.n	80030bc <USART2_IRQHandler+0xd4>
 8003076:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <USART2_IRQHandler+0x110>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a29      	ldr	r2, [pc, #164]	; (8003120 <USART2_IRQHandler+0x138>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d01d      	beq.n	80030bc <USART2_IRQHandler+0xd4>
 8003080:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <USART2_IRQHandler+0x110>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a27      	ldr	r2, [pc, #156]	; (8003124 <USART2_IRQHandler+0x13c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d018      	beq.n	80030bc <USART2_IRQHandler+0xd4>
 800308a:	4b1b      	ldr	r3, [pc, #108]	; (80030f8 <USART2_IRQHandler+0x110>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a26      	ldr	r2, [pc, #152]	; (8003128 <USART2_IRQHandler+0x140>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d013      	beq.n	80030bc <USART2_IRQHandler+0xd4>
 8003094:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <USART2_IRQHandler+0x110>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a24      	ldr	r2, [pc, #144]	; (800312c <USART2_IRQHandler+0x144>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d00e      	beq.n	80030bc <USART2_IRQHandler+0xd4>
 800309e:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <USART2_IRQHandler+0x110>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a23      	ldr	r2, [pc, #140]	; (8003130 <USART2_IRQHandler+0x148>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d009      	beq.n	80030bc <USART2_IRQHandler+0xd4>
 80030a8:	4b13      	ldr	r3, [pc, #76]	; (80030f8 <USART2_IRQHandler+0x110>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a21      	ldr	r2, [pc, #132]	; (8003134 <USART2_IRQHandler+0x14c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d004      	beq.n	80030bc <USART2_IRQHandler+0xd4>
 80030b2:	4b11      	ldr	r3, [pc, #68]	; (80030f8 <USART2_IRQHandler+0x110>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a20      	ldr	r2, [pc, #128]	; (8003138 <USART2_IRQHandler+0x150>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d103      	bne.n	80030c4 <USART2_IRQHandler+0xdc>
 80030bc:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <USART2_IRQHandler+0x110>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	e002      	b.n	80030ca <USART2_IRQHandler+0xe2>
 80030c4:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <USART2_IRQHandler+0x110>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_IDLE);
 80030ca:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <USART2_IRQHandler+0x10c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <USART2_IRQHandler+0x10c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0210 	bic.w	r2, r2, #16
 80030d8:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(GY39TransFinishHandle, pdFALSE);
 80030da:	4b18      	ldr	r3, [pc, #96]	; (800313c <USART2_IRQHandler+0x154>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2100      	movs	r1, #0
 80030e0:	4618      	mov	r0, r3
 80030e2:	f008 fe33 	bl	800bd4c <xQueueGiveFromISR>
	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80030e6:	4803      	ldr	r0, [pc, #12]	; (80030f4 <USART2_IRQHandler+0x10c>)
 80030e8:	f006 fd7c 	bl	8009be4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80030ec:	bf00      	nop
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	200046d8 	.word	0x200046d8
 80030f8:	2000405c 	.word	0x2000405c
 80030fc:	40020010 	.word	0x40020010
 8003100:	40020028 	.word	0x40020028
 8003104:	40020040 	.word	0x40020040
 8003108:	40020058 	.word	0x40020058
 800310c:	40020070 	.word	0x40020070
 8003110:	40020088 	.word	0x40020088
 8003114:	400200a0 	.word	0x400200a0
 8003118:	400200b8 	.word	0x400200b8
 800311c:	40020410 	.word	0x40020410
 8003120:	40020428 	.word	0x40020428
 8003124:	40020440 	.word	0x40020440
 8003128:	40020458 	.word	0x40020458
 800312c:	40020470 	.word	0x40020470
 8003130:	40020488 	.word	0x40020488
 8003134:	400204a0 	.word	0x400204a0
 8003138:	400204b8 	.word	0x400204b8
 800313c:	200041f4 	.word	0x200041f4

08003140 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	uint32_t tmp_flag = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE);
 800314a:	4b40      	ldr	r3, [pc, #256]	; (800324c <USART3_IRQHandler+0x10c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	f003 0310 	and.w	r3, r3, #16
 8003154:	2b10      	cmp	r3, #16
 8003156:	bf0c      	ite	eq
 8003158:	2301      	moveq	r3, #1
 800315a:	2300      	movne	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d06b      	beq.n	800323e <USART3_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8003166:	4b39      	ldr	r3, [pc, #228]	; (800324c <USART3_IRQHandler+0x10c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2210      	movs	r2, #16
 800316c:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart3);
 800316e:	4837      	ldr	r0, [pc, #220]	; (800324c <USART3_IRQHandler+0x10c>)
 8003170:	f006 fcc8 	bl	8009b04 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 8003174:	4b36      	ldr	r3, [pc, #216]	; (8003250 <USART3_IRQHandler+0x110>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a36      	ldr	r2, [pc, #216]	; (8003254 <USART3_IRQHandler+0x114>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d04a      	beq.n	8003214 <USART3_IRQHandler+0xd4>
 800317e:	4b34      	ldr	r3, [pc, #208]	; (8003250 <USART3_IRQHandler+0x110>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a35      	ldr	r2, [pc, #212]	; (8003258 <USART3_IRQHandler+0x118>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d045      	beq.n	8003214 <USART3_IRQHandler+0xd4>
 8003188:	4b31      	ldr	r3, [pc, #196]	; (8003250 <USART3_IRQHandler+0x110>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a33      	ldr	r2, [pc, #204]	; (800325c <USART3_IRQHandler+0x11c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d040      	beq.n	8003214 <USART3_IRQHandler+0xd4>
 8003192:	4b2f      	ldr	r3, [pc, #188]	; (8003250 <USART3_IRQHandler+0x110>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a32      	ldr	r2, [pc, #200]	; (8003260 <USART3_IRQHandler+0x120>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d03b      	beq.n	8003214 <USART3_IRQHandler+0xd4>
 800319c:	4b2c      	ldr	r3, [pc, #176]	; (8003250 <USART3_IRQHandler+0x110>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a30      	ldr	r2, [pc, #192]	; (8003264 <USART3_IRQHandler+0x124>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d036      	beq.n	8003214 <USART3_IRQHandler+0xd4>
 80031a6:	4b2a      	ldr	r3, [pc, #168]	; (8003250 <USART3_IRQHandler+0x110>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a2f      	ldr	r2, [pc, #188]	; (8003268 <USART3_IRQHandler+0x128>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d031      	beq.n	8003214 <USART3_IRQHandler+0xd4>
 80031b0:	4b27      	ldr	r3, [pc, #156]	; (8003250 <USART3_IRQHandler+0x110>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a2d      	ldr	r2, [pc, #180]	; (800326c <USART3_IRQHandler+0x12c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d02c      	beq.n	8003214 <USART3_IRQHandler+0xd4>
 80031ba:	4b25      	ldr	r3, [pc, #148]	; (8003250 <USART3_IRQHandler+0x110>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a2c      	ldr	r2, [pc, #176]	; (8003270 <USART3_IRQHandler+0x130>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d027      	beq.n	8003214 <USART3_IRQHandler+0xd4>
 80031c4:	4b22      	ldr	r3, [pc, #136]	; (8003250 <USART3_IRQHandler+0x110>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a2a      	ldr	r2, [pc, #168]	; (8003274 <USART3_IRQHandler+0x134>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d022      	beq.n	8003214 <USART3_IRQHandler+0xd4>
 80031ce:	4b20      	ldr	r3, [pc, #128]	; (8003250 <USART3_IRQHandler+0x110>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a29      	ldr	r2, [pc, #164]	; (8003278 <USART3_IRQHandler+0x138>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d01d      	beq.n	8003214 <USART3_IRQHandler+0xd4>
 80031d8:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <USART3_IRQHandler+0x110>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a27      	ldr	r2, [pc, #156]	; (800327c <USART3_IRQHandler+0x13c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d018      	beq.n	8003214 <USART3_IRQHandler+0xd4>
 80031e2:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <USART3_IRQHandler+0x110>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a26      	ldr	r2, [pc, #152]	; (8003280 <USART3_IRQHandler+0x140>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d013      	beq.n	8003214 <USART3_IRQHandler+0xd4>
 80031ec:	4b18      	ldr	r3, [pc, #96]	; (8003250 <USART3_IRQHandler+0x110>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a24      	ldr	r2, [pc, #144]	; (8003284 <USART3_IRQHandler+0x144>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d00e      	beq.n	8003214 <USART3_IRQHandler+0xd4>
 80031f6:	4b16      	ldr	r3, [pc, #88]	; (8003250 <USART3_IRQHandler+0x110>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a23      	ldr	r2, [pc, #140]	; (8003288 <USART3_IRQHandler+0x148>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d009      	beq.n	8003214 <USART3_IRQHandler+0xd4>
 8003200:	4b13      	ldr	r3, [pc, #76]	; (8003250 <USART3_IRQHandler+0x110>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a21      	ldr	r2, [pc, #132]	; (800328c <USART3_IRQHandler+0x14c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d004      	beq.n	8003214 <USART3_IRQHandler+0xd4>
 800320a:	4b11      	ldr	r3, [pc, #68]	; (8003250 <USART3_IRQHandler+0x110>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a20      	ldr	r2, [pc, #128]	; (8003290 <USART3_IRQHandler+0x150>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d103      	bne.n	800321c <USART3_IRQHandler+0xdc>
 8003214:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <USART3_IRQHandler+0x110>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	e002      	b.n	8003222 <USART3_IRQHandler+0xe2>
 800321c:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <USART3_IRQHandler+0x110>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart3, UART_IT_IDLE);
 8003222:	4b0a      	ldr	r3, [pc, #40]	; (800324c <USART3_IRQHandler+0x10c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b08      	ldr	r3, [pc, #32]	; (800324c <USART3_IRQHandler+0x10c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0210 	bic.w	r2, r2, #16
 8003230:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(WT931TransFinishHandle, pdFALSE);
 8003232:	4b18      	ldr	r3, [pc, #96]	; (8003294 <USART3_IRQHandler+0x154>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2100      	movs	r1, #0
 8003238:	4618      	mov	r0, r3
 800323a:	f008 fd87 	bl	800bd4c <xQueueGiveFromISR>
	}
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800323e:	4803      	ldr	r0, [pc, #12]	; (800324c <USART3_IRQHandler+0x10c>)
 8003240:	f006 fcd0 	bl	8009be4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003244:	bf00      	nop
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	2000415c 	.word	0x2000415c
 8003250:	200040e4 	.word	0x200040e4
 8003254:	40020010 	.word	0x40020010
 8003258:	40020028 	.word	0x40020028
 800325c:	40020040 	.word	0x40020040
 8003260:	40020058 	.word	0x40020058
 8003264:	40020070 	.word	0x40020070
 8003268:	40020088 	.word	0x40020088
 800326c:	400200a0 	.word	0x400200a0
 8003270:	400200b8 	.word	0x400200b8
 8003274:	40020410 	.word	0x40020410
 8003278:	40020428 	.word	0x40020428
 800327c:	40020440 	.word	0x40020440
 8003280:	40020458 	.word	0x40020458
 8003284:	40020470 	.word	0x40020470
 8003288:	40020488 	.word	0x40020488
 800328c:	400204a0 	.word	0x400204a0
 8003290:	400204b8 	.word	0x400204b8
 8003294:	200048e0 	.word	0x200048e0

08003298 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 800329c:	4802      	ldr	r0, [pc, #8]	; (80032a8 <DMA1_Stream7_IRQHandler+0x10>)
 800329e:	f001 ff57 	bl	8005150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80032a2:	bf00      	nop
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20004418 	.word	0x20004418

080032ac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	uint32_t tmp_flag = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE);
 80032b6:	4b40      	ldr	r3, [pc, #256]	; (80033b8 <UART4_IRQHandler+0x10c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	f003 0310 	and.w	r3, r3, #16
 80032c0:	2b10      	cmp	r3, #16
 80032c2:	bf0c      	ite	eq
 80032c4:	2301      	moveq	r3, #1
 80032c6:	2300      	movne	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d06b      	beq.n	80033aa <UART4_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 80032d2:	4b39      	ldr	r3, [pc, #228]	; (80033b8 <UART4_IRQHandler+0x10c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2210      	movs	r2, #16
 80032d8:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart4);
 80032da:	4837      	ldr	r0, [pc, #220]	; (80033b8 <UART4_IRQHandler+0x10c>)
 80032dc:	f006 fc12 	bl	8009b04 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart4_rx);
 80032e0:	4b36      	ldr	r3, [pc, #216]	; (80033bc <UART4_IRQHandler+0x110>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a36      	ldr	r2, [pc, #216]	; (80033c0 <UART4_IRQHandler+0x114>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d04a      	beq.n	8003380 <UART4_IRQHandler+0xd4>
 80032ea:	4b34      	ldr	r3, [pc, #208]	; (80033bc <UART4_IRQHandler+0x110>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a35      	ldr	r2, [pc, #212]	; (80033c4 <UART4_IRQHandler+0x118>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d045      	beq.n	8003380 <UART4_IRQHandler+0xd4>
 80032f4:	4b31      	ldr	r3, [pc, #196]	; (80033bc <UART4_IRQHandler+0x110>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a33      	ldr	r2, [pc, #204]	; (80033c8 <UART4_IRQHandler+0x11c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d040      	beq.n	8003380 <UART4_IRQHandler+0xd4>
 80032fe:	4b2f      	ldr	r3, [pc, #188]	; (80033bc <UART4_IRQHandler+0x110>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a32      	ldr	r2, [pc, #200]	; (80033cc <UART4_IRQHandler+0x120>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d03b      	beq.n	8003380 <UART4_IRQHandler+0xd4>
 8003308:	4b2c      	ldr	r3, [pc, #176]	; (80033bc <UART4_IRQHandler+0x110>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a30      	ldr	r2, [pc, #192]	; (80033d0 <UART4_IRQHandler+0x124>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d036      	beq.n	8003380 <UART4_IRQHandler+0xd4>
 8003312:	4b2a      	ldr	r3, [pc, #168]	; (80033bc <UART4_IRQHandler+0x110>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a2f      	ldr	r2, [pc, #188]	; (80033d4 <UART4_IRQHandler+0x128>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d031      	beq.n	8003380 <UART4_IRQHandler+0xd4>
 800331c:	4b27      	ldr	r3, [pc, #156]	; (80033bc <UART4_IRQHandler+0x110>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a2d      	ldr	r2, [pc, #180]	; (80033d8 <UART4_IRQHandler+0x12c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d02c      	beq.n	8003380 <UART4_IRQHandler+0xd4>
 8003326:	4b25      	ldr	r3, [pc, #148]	; (80033bc <UART4_IRQHandler+0x110>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a2c      	ldr	r2, [pc, #176]	; (80033dc <UART4_IRQHandler+0x130>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d027      	beq.n	8003380 <UART4_IRQHandler+0xd4>
 8003330:	4b22      	ldr	r3, [pc, #136]	; (80033bc <UART4_IRQHandler+0x110>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a2a      	ldr	r2, [pc, #168]	; (80033e0 <UART4_IRQHandler+0x134>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d022      	beq.n	8003380 <UART4_IRQHandler+0xd4>
 800333a:	4b20      	ldr	r3, [pc, #128]	; (80033bc <UART4_IRQHandler+0x110>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a29      	ldr	r2, [pc, #164]	; (80033e4 <UART4_IRQHandler+0x138>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d01d      	beq.n	8003380 <UART4_IRQHandler+0xd4>
 8003344:	4b1d      	ldr	r3, [pc, #116]	; (80033bc <UART4_IRQHandler+0x110>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a27      	ldr	r2, [pc, #156]	; (80033e8 <UART4_IRQHandler+0x13c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d018      	beq.n	8003380 <UART4_IRQHandler+0xd4>
 800334e:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <UART4_IRQHandler+0x110>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a26      	ldr	r2, [pc, #152]	; (80033ec <UART4_IRQHandler+0x140>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d013      	beq.n	8003380 <UART4_IRQHandler+0xd4>
 8003358:	4b18      	ldr	r3, [pc, #96]	; (80033bc <UART4_IRQHandler+0x110>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a24      	ldr	r2, [pc, #144]	; (80033f0 <UART4_IRQHandler+0x144>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d00e      	beq.n	8003380 <UART4_IRQHandler+0xd4>
 8003362:	4b16      	ldr	r3, [pc, #88]	; (80033bc <UART4_IRQHandler+0x110>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a23      	ldr	r2, [pc, #140]	; (80033f4 <UART4_IRQHandler+0x148>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d009      	beq.n	8003380 <UART4_IRQHandler+0xd4>
 800336c:	4b13      	ldr	r3, [pc, #76]	; (80033bc <UART4_IRQHandler+0x110>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a21      	ldr	r2, [pc, #132]	; (80033f8 <UART4_IRQHandler+0x14c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d004      	beq.n	8003380 <UART4_IRQHandler+0xd4>
 8003376:	4b11      	ldr	r3, [pc, #68]	; (80033bc <UART4_IRQHandler+0x110>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a20      	ldr	r2, [pc, #128]	; (80033fc <UART4_IRQHandler+0x150>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d103      	bne.n	8003388 <UART4_IRQHandler+0xdc>
 8003380:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <UART4_IRQHandler+0x110>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	e002      	b.n	800338e <UART4_IRQHandler+0xe2>
 8003388:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <UART4_IRQHandler+0x110>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart4, UART_IT_IDLE);
 800338e:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <UART4_IRQHandler+0x10c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <UART4_IRQHandler+0x10c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0210 	bic.w	r2, r2, #16
 800339c:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(DeepTransFinishHandleHandle, pdFALSE);
 800339e:	4b18      	ldr	r3, [pc, #96]	; (8003400 <UART4_IRQHandler+0x154>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2100      	movs	r1, #0
 80033a4:	4618      	mov	r0, r3
 80033a6:	f008 fcd1 	bl	800bd4c <xQueueGiveFromISR>
	}
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80033aa:	4803      	ldr	r0, [pc, #12]	; (80033b8 <UART4_IRQHandler+0x10c>)
 80033ac:	f006 fc1a 	bl	8009be4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80033b0:	bf00      	nop
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20004640 	.word	0x20004640
 80033bc:	20003fe4 	.word	0x20003fe4
 80033c0:	40020010 	.word	0x40020010
 80033c4:	40020028 	.word	0x40020028
 80033c8:	40020040 	.word	0x40020040
 80033cc:	40020058 	.word	0x40020058
 80033d0:	40020070 	.word	0x40020070
 80033d4:	40020088 	.word	0x40020088
 80033d8:	400200a0 	.word	0x400200a0
 80033dc:	400200b8 	.word	0x400200b8
 80033e0:	40020410 	.word	0x40020410
 80033e4:	40020428 	.word	0x40020428
 80033e8:	40020440 	.word	0x40020440
 80033ec:	40020458 	.word	0x40020458
 80033f0:	40020470 	.word	0x40020470
 80033f4:	40020488 	.word	0x40020488
 80033f8:	400204a0 	.word	0x400204a0
 80033fc:	400204b8 	.word	0x400204b8
 8003400:	200047ec 	.word	0x200047ec

08003404 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	uint32_t tmp_flag = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart5, UART_FLAG_IDLE);
 800340e:	4b40      	ldr	r3, [pc, #256]	; (8003510 <UART5_IRQHandler+0x10c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b10      	cmp	r3, #16
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d06b      	beq.n	8003502 <UART5_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart5);
 800342a:	4b39      	ldr	r3, [pc, #228]	; (8003510 <UART5_IRQHandler+0x10c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2210      	movs	r2, #16
 8003430:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart5);
 8003432:	4837      	ldr	r0, [pc, #220]	; (8003510 <UART5_IRQHandler+0x10c>)
 8003434:	f006 fb66 	bl	8009b04 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart5_rx);
 8003438:	4b36      	ldr	r3, [pc, #216]	; (8003514 <UART5_IRQHandler+0x110>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a36      	ldr	r2, [pc, #216]	; (8003518 <UART5_IRQHandler+0x114>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d04a      	beq.n	80034d8 <UART5_IRQHandler+0xd4>
 8003442:	4b34      	ldr	r3, [pc, #208]	; (8003514 <UART5_IRQHandler+0x110>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a35      	ldr	r2, [pc, #212]	; (800351c <UART5_IRQHandler+0x118>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d045      	beq.n	80034d8 <UART5_IRQHandler+0xd4>
 800344c:	4b31      	ldr	r3, [pc, #196]	; (8003514 <UART5_IRQHandler+0x110>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a33      	ldr	r2, [pc, #204]	; (8003520 <UART5_IRQHandler+0x11c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d040      	beq.n	80034d8 <UART5_IRQHandler+0xd4>
 8003456:	4b2f      	ldr	r3, [pc, #188]	; (8003514 <UART5_IRQHandler+0x110>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a32      	ldr	r2, [pc, #200]	; (8003524 <UART5_IRQHandler+0x120>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d03b      	beq.n	80034d8 <UART5_IRQHandler+0xd4>
 8003460:	4b2c      	ldr	r3, [pc, #176]	; (8003514 <UART5_IRQHandler+0x110>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a30      	ldr	r2, [pc, #192]	; (8003528 <UART5_IRQHandler+0x124>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d036      	beq.n	80034d8 <UART5_IRQHandler+0xd4>
 800346a:	4b2a      	ldr	r3, [pc, #168]	; (8003514 <UART5_IRQHandler+0x110>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a2f      	ldr	r2, [pc, #188]	; (800352c <UART5_IRQHandler+0x128>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d031      	beq.n	80034d8 <UART5_IRQHandler+0xd4>
 8003474:	4b27      	ldr	r3, [pc, #156]	; (8003514 <UART5_IRQHandler+0x110>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a2d      	ldr	r2, [pc, #180]	; (8003530 <UART5_IRQHandler+0x12c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d02c      	beq.n	80034d8 <UART5_IRQHandler+0xd4>
 800347e:	4b25      	ldr	r3, [pc, #148]	; (8003514 <UART5_IRQHandler+0x110>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a2c      	ldr	r2, [pc, #176]	; (8003534 <UART5_IRQHandler+0x130>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d027      	beq.n	80034d8 <UART5_IRQHandler+0xd4>
 8003488:	4b22      	ldr	r3, [pc, #136]	; (8003514 <UART5_IRQHandler+0x110>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a2a      	ldr	r2, [pc, #168]	; (8003538 <UART5_IRQHandler+0x134>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d022      	beq.n	80034d8 <UART5_IRQHandler+0xd4>
 8003492:	4b20      	ldr	r3, [pc, #128]	; (8003514 <UART5_IRQHandler+0x110>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a29      	ldr	r2, [pc, #164]	; (800353c <UART5_IRQHandler+0x138>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d01d      	beq.n	80034d8 <UART5_IRQHandler+0xd4>
 800349c:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <UART5_IRQHandler+0x110>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a27      	ldr	r2, [pc, #156]	; (8003540 <UART5_IRQHandler+0x13c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d018      	beq.n	80034d8 <UART5_IRQHandler+0xd4>
 80034a6:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <UART5_IRQHandler+0x110>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a26      	ldr	r2, [pc, #152]	; (8003544 <UART5_IRQHandler+0x140>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d013      	beq.n	80034d8 <UART5_IRQHandler+0xd4>
 80034b0:	4b18      	ldr	r3, [pc, #96]	; (8003514 <UART5_IRQHandler+0x110>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a24      	ldr	r2, [pc, #144]	; (8003548 <UART5_IRQHandler+0x144>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00e      	beq.n	80034d8 <UART5_IRQHandler+0xd4>
 80034ba:	4b16      	ldr	r3, [pc, #88]	; (8003514 <UART5_IRQHandler+0x110>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a23      	ldr	r2, [pc, #140]	; (800354c <UART5_IRQHandler+0x148>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d009      	beq.n	80034d8 <UART5_IRQHandler+0xd4>
 80034c4:	4b13      	ldr	r3, [pc, #76]	; (8003514 <UART5_IRQHandler+0x110>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a21      	ldr	r2, [pc, #132]	; (8003550 <UART5_IRQHandler+0x14c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d004      	beq.n	80034d8 <UART5_IRQHandler+0xd4>
 80034ce:	4b11      	ldr	r3, [pc, #68]	; (8003514 <UART5_IRQHandler+0x110>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a20      	ldr	r2, [pc, #128]	; (8003554 <UART5_IRQHandler+0x150>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d103      	bne.n	80034e0 <UART5_IRQHandler+0xdc>
 80034d8:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <UART5_IRQHandler+0x110>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	e002      	b.n	80034e6 <UART5_IRQHandler+0xe2>
 80034e0:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <UART5_IRQHandler+0x110>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart5, UART_IT_IDLE);
 80034e6:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <UART5_IRQHandler+0x10c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	4b08      	ldr	r3, [pc, #32]	; (8003510 <UART5_IRQHandler+0x10c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0210 	bic.w	r2, r2, #16
 80034f4:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(P30TransFinishHandle, pdFALSE);
 80034f6:	4b18      	ldr	r3, [pc, #96]	; (8003558 <UART5_IRQHandler+0x154>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2100      	movs	r1, #0
 80034fc:	4618      	mov	r0, r3
 80034fe:	f008 fc25 	bl	800bd4c <xQueueGiveFromISR>
	}
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003502:	4803      	ldr	r0, [pc, #12]	; (8003510 <UART5_IRQHandler+0x10c>)
 8003504:	f006 fb6e 	bl	8009be4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003508:	bf00      	nop
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	20004294 	.word	0x20004294
 8003514:	20004768 	.word	0x20004768
 8003518:	40020010 	.word	0x40020010
 800351c:	40020028 	.word	0x40020028
 8003520:	40020040 	.word	0x40020040
 8003524:	40020058 	.word	0x40020058
 8003528:	40020070 	.word	0x40020070
 800352c:	40020088 	.word	0x40020088
 8003530:	400200a0 	.word	0x400200a0
 8003534:	400200b8 	.word	0x400200b8
 8003538:	40020410 	.word	0x40020410
 800353c:	40020428 	.word	0x40020428
 8003540:	40020440 	.word	0x40020440
 8003544:	40020458 	.word	0x40020458
 8003548:	40020470 	.word	0x40020470
 800354c:	40020488 	.word	0x40020488
 8003550:	400204a0 	.word	0x400204a0
 8003554:	400204b8 	.word	0x400204b8
 8003558:	20003fd8 	.word	0x20003fd8

0800355c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003560:	4802      	ldr	r0, [pc, #8]	; (800356c <TIM6_DAC_IRQHandler+0x10>)
 8003562:	f005 ffb9 	bl	80094d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	200048e4 	.word	0x200048e4

08003570 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8003574:	4802      	ldr	r0, [pc, #8]	; (8003580 <DMA2_Stream0_IRQHandler+0x10>)
 8003576:	f001 fdeb 	bl	8005150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	20004530 	.word	0x20004530

08003584 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003588:	4802      	ldr	r0, [pc, #8]	; (8003594 <DMA2_Stream1_IRQHandler+0x10>)
 800358a:	f001 fde1 	bl	8005150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	200043a0 	.word	0x200043a0

08003598 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800359c:	4802      	ldr	r0, [pc, #8]	; (80035a8 <DMA2_Stream2_IRQHandler+0x10>)
 800359e:	f001 fdd7 	bl	8005150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80035a2:	bf00      	nop
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20004868 	.word	0x20004868

080035ac <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */
	uint32_t tmp_flag = 0;
 80035b2:	2300      	movs	r3, #0
 80035b4:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart8, UART_FLAG_IDLE);
 80035b6:	4b40      	ldr	r3, [pc, #256]	; (80036b8 <UART8_IRQHandler+0x10c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b10      	cmp	r3, #16
 80035c2:	bf0c      	ite	eq
 80035c4:	2301      	moveq	r3, #1
 80035c6:	2300      	movne	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d06b      	beq.n	80036aa <UART8_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart8);
 80035d2:	4b39      	ldr	r3, [pc, #228]	; (80036b8 <UART8_IRQHandler+0x10c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2210      	movs	r2, #16
 80035d8:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart8);
 80035da:	4837      	ldr	r0, [pc, #220]	; (80036b8 <UART8_IRQHandler+0x10c>)
 80035dc:	f006 fa92 	bl	8009b04 <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart8_rx);
 80035e0:	4b36      	ldr	r3, [pc, #216]	; (80036bc <UART8_IRQHandler+0x110>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a36      	ldr	r2, [pc, #216]	; (80036c0 <UART8_IRQHandler+0x114>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d04a      	beq.n	8003680 <UART8_IRQHandler+0xd4>
 80035ea:	4b34      	ldr	r3, [pc, #208]	; (80036bc <UART8_IRQHandler+0x110>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a35      	ldr	r2, [pc, #212]	; (80036c4 <UART8_IRQHandler+0x118>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d045      	beq.n	8003680 <UART8_IRQHandler+0xd4>
 80035f4:	4b31      	ldr	r3, [pc, #196]	; (80036bc <UART8_IRQHandler+0x110>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a33      	ldr	r2, [pc, #204]	; (80036c8 <UART8_IRQHandler+0x11c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d040      	beq.n	8003680 <UART8_IRQHandler+0xd4>
 80035fe:	4b2f      	ldr	r3, [pc, #188]	; (80036bc <UART8_IRQHandler+0x110>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a32      	ldr	r2, [pc, #200]	; (80036cc <UART8_IRQHandler+0x120>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d03b      	beq.n	8003680 <UART8_IRQHandler+0xd4>
 8003608:	4b2c      	ldr	r3, [pc, #176]	; (80036bc <UART8_IRQHandler+0x110>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a30      	ldr	r2, [pc, #192]	; (80036d0 <UART8_IRQHandler+0x124>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d036      	beq.n	8003680 <UART8_IRQHandler+0xd4>
 8003612:	4b2a      	ldr	r3, [pc, #168]	; (80036bc <UART8_IRQHandler+0x110>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a2f      	ldr	r2, [pc, #188]	; (80036d4 <UART8_IRQHandler+0x128>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d031      	beq.n	8003680 <UART8_IRQHandler+0xd4>
 800361c:	4b27      	ldr	r3, [pc, #156]	; (80036bc <UART8_IRQHandler+0x110>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a2d      	ldr	r2, [pc, #180]	; (80036d8 <UART8_IRQHandler+0x12c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d02c      	beq.n	8003680 <UART8_IRQHandler+0xd4>
 8003626:	4b25      	ldr	r3, [pc, #148]	; (80036bc <UART8_IRQHandler+0x110>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a2c      	ldr	r2, [pc, #176]	; (80036dc <UART8_IRQHandler+0x130>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d027      	beq.n	8003680 <UART8_IRQHandler+0xd4>
 8003630:	4b22      	ldr	r3, [pc, #136]	; (80036bc <UART8_IRQHandler+0x110>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a2a      	ldr	r2, [pc, #168]	; (80036e0 <UART8_IRQHandler+0x134>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d022      	beq.n	8003680 <UART8_IRQHandler+0xd4>
 800363a:	4b20      	ldr	r3, [pc, #128]	; (80036bc <UART8_IRQHandler+0x110>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a29      	ldr	r2, [pc, #164]	; (80036e4 <UART8_IRQHandler+0x138>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d01d      	beq.n	8003680 <UART8_IRQHandler+0xd4>
 8003644:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <UART8_IRQHandler+0x110>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a27      	ldr	r2, [pc, #156]	; (80036e8 <UART8_IRQHandler+0x13c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d018      	beq.n	8003680 <UART8_IRQHandler+0xd4>
 800364e:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <UART8_IRQHandler+0x110>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a26      	ldr	r2, [pc, #152]	; (80036ec <UART8_IRQHandler+0x140>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d013      	beq.n	8003680 <UART8_IRQHandler+0xd4>
 8003658:	4b18      	ldr	r3, [pc, #96]	; (80036bc <UART8_IRQHandler+0x110>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a24      	ldr	r2, [pc, #144]	; (80036f0 <UART8_IRQHandler+0x144>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00e      	beq.n	8003680 <UART8_IRQHandler+0xd4>
 8003662:	4b16      	ldr	r3, [pc, #88]	; (80036bc <UART8_IRQHandler+0x110>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a23      	ldr	r2, [pc, #140]	; (80036f4 <UART8_IRQHandler+0x148>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d009      	beq.n	8003680 <UART8_IRQHandler+0xd4>
 800366c:	4b13      	ldr	r3, [pc, #76]	; (80036bc <UART8_IRQHandler+0x110>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a21      	ldr	r2, [pc, #132]	; (80036f8 <UART8_IRQHandler+0x14c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d004      	beq.n	8003680 <UART8_IRQHandler+0xd4>
 8003676:	4b11      	ldr	r3, [pc, #68]	; (80036bc <UART8_IRQHandler+0x110>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a20      	ldr	r2, [pc, #128]	; (80036fc <UART8_IRQHandler+0x150>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d103      	bne.n	8003688 <UART8_IRQHandler+0xdc>
 8003680:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <UART8_IRQHandler+0x110>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	e002      	b.n	800368e <UART8_IRQHandler+0xe2>
 8003688:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <UART8_IRQHandler+0x110>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart8, UART_IT_IDLE);
 800368e:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <UART8_IRQHandler+0x10c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <UART8_IRQHandler+0x10c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0210 	bic.w	r2, r2, #16
 800369c:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(BasetoUpTransFinishHandleHandle, pdFALSE);
 800369e:	4b18      	ldr	r3, [pc, #96]	; (8003700 <UART8_IRQHandler+0x154>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2100      	movs	r1, #0
 80036a4:	4618      	mov	r0, r3
 80036a6:	f008 fb51 	bl	800bd4c <xQueueGiveFromISR>
	}
  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80036aa:	4803      	ldr	r0, [pc, #12]	; (80036b8 <UART8_IRQHandler+0x10c>)
 80036ac:	f006 fa9a 	bl	8009be4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80036b0:	bf00      	nop
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	200045ac 	.word	0x200045ac
 80036bc:	20004418 	.word	0x20004418
 80036c0:	40020010 	.word	0x40020010
 80036c4:	40020028 	.word	0x40020028
 80036c8:	40020040 	.word	0x40020040
 80036cc:	40020058 	.word	0x40020058
 80036d0:	40020070 	.word	0x40020070
 80036d4:	40020088 	.word	0x40020088
 80036d8:	400200a0 	.word	0x400200a0
 80036dc:	400200b8 	.word	0x400200b8
 80036e0:	40020410 	.word	0x40020410
 80036e4:	40020428 	.word	0x40020428
 80036e8:	40020440 	.word	0x40020440
 80036ec:	40020458 	.word	0x40020458
 80036f0:	40020470 	.word	0x40020470
 80036f4:	40020488 	.word	0x40020488
 80036f8:	400204a0 	.word	0x400204a0
 80036fc:	400204b8 	.word	0x400204b8
 8003700:	200045a8 	.word	0x200045a8

08003704 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003708:	4b39      	ldr	r3, [pc, #228]	; (80037f0 <SystemInit+0xec>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370e:	4a38      	ldr	r2, [pc, #224]	; (80037f0 <SystemInit+0xec>)
 8003710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003718:	4b36      	ldr	r3, [pc, #216]	; (80037f4 <SystemInit+0xf0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 030f 	and.w	r3, r3, #15
 8003720:	2b06      	cmp	r3, #6
 8003722:	d807      	bhi.n	8003734 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003724:	4b33      	ldr	r3, [pc, #204]	; (80037f4 <SystemInit+0xf0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f023 030f 	bic.w	r3, r3, #15
 800372c:	4a31      	ldr	r2, [pc, #196]	; (80037f4 <SystemInit+0xf0>)
 800372e:	f043 0307 	orr.w	r3, r3, #7
 8003732:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003734:	4b30      	ldr	r3, [pc, #192]	; (80037f8 <SystemInit+0xf4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a2f      	ldr	r2, [pc, #188]	; (80037f8 <SystemInit+0xf4>)
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003740:	4b2d      	ldr	r3, [pc, #180]	; (80037f8 <SystemInit+0xf4>)
 8003742:	2200      	movs	r2, #0
 8003744:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003746:	4b2c      	ldr	r3, [pc, #176]	; (80037f8 <SystemInit+0xf4>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	492b      	ldr	r1, [pc, #172]	; (80037f8 <SystemInit+0xf4>)
 800374c:	4b2b      	ldr	r3, [pc, #172]	; (80037fc <SystemInit+0xf8>)
 800374e:	4013      	ands	r3, r2
 8003750:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003752:	4b28      	ldr	r3, [pc, #160]	; (80037f4 <SystemInit+0xf0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d007      	beq.n	800376e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800375e:	4b25      	ldr	r3, [pc, #148]	; (80037f4 <SystemInit+0xf0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f023 030f 	bic.w	r3, r3, #15
 8003766:	4a23      	ldr	r2, [pc, #140]	; (80037f4 <SystemInit+0xf0>)
 8003768:	f043 0307 	orr.w	r3, r3, #7
 800376c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800376e:	4b22      	ldr	r3, [pc, #136]	; (80037f8 <SystemInit+0xf4>)
 8003770:	2200      	movs	r2, #0
 8003772:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003774:	4b20      	ldr	r3, [pc, #128]	; (80037f8 <SystemInit+0xf4>)
 8003776:	2200      	movs	r2, #0
 8003778:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800377a:	4b1f      	ldr	r3, [pc, #124]	; (80037f8 <SystemInit+0xf4>)
 800377c:	2200      	movs	r2, #0
 800377e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003780:	4b1d      	ldr	r3, [pc, #116]	; (80037f8 <SystemInit+0xf4>)
 8003782:	4a1f      	ldr	r2, [pc, #124]	; (8003800 <SystemInit+0xfc>)
 8003784:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003786:	4b1c      	ldr	r3, [pc, #112]	; (80037f8 <SystemInit+0xf4>)
 8003788:	4a1e      	ldr	r2, [pc, #120]	; (8003804 <SystemInit+0x100>)
 800378a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800378c:	4b1a      	ldr	r3, [pc, #104]	; (80037f8 <SystemInit+0xf4>)
 800378e:	4a1e      	ldr	r2, [pc, #120]	; (8003808 <SystemInit+0x104>)
 8003790:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003792:	4b19      	ldr	r3, [pc, #100]	; (80037f8 <SystemInit+0xf4>)
 8003794:	2200      	movs	r2, #0
 8003796:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003798:	4b17      	ldr	r3, [pc, #92]	; (80037f8 <SystemInit+0xf4>)
 800379a:	4a1b      	ldr	r2, [pc, #108]	; (8003808 <SystemInit+0x104>)
 800379c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800379e:	4b16      	ldr	r3, [pc, #88]	; (80037f8 <SystemInit+0xf4>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80037a4:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <SystemInit+0xf4>)
 80037a6:	4a18      	ldr	r2, [pc, #96]	; (8003808 <SystemInit+0x104>)
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80037aa:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <SystemInit+0xf4>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80037b0:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <SystemInit+0xf4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a10      	ldr	r2, [pc, #64]	; (80037f8 <SystemInit+0xf4>)
 80037b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80037bc:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <SystemInit+0xf4>)
 80037be:	2200      	movs	r2, #0
 80037c0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80037c2:	4b12      	ldr	r3, [pc, #72]	; (800380c <SystemInit+0x108>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	4b12      	ldr	r3, [pc, #72]	; (8003810 <SystemInit+0x10c>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037ce:	d202      	bcs.n	80037d6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80037d0:	4b10      	ldr	r3, [pc, #64]	; (8003814 <SystemInit+0x110>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80037d6:	4b10      	ldr	r3, [pc, #64]	; (8003818 <SystemInit+0x114>)
 80037d8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80037dc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037de:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <SystemInit+0xec>)
 80037e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037e4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80037e6:	bf00      	nop
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	e000ed00 	.word	0xe000ed00
 80037f4:	52002000 	.word	0x52002000
 80037f8:	58024400 	.word	0x58024400
 80037fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8003800:	02020200 	.word	0x02020200
 8003804:	01ff0000 	.word	0x01ff0000
 8003808:	01010280 	.word	0x01010280
 800380c:	5c001000 	.word	0x5c001000
 8003810:	ffff0000 	.word	0xffff0000
 8003814:	51008108 	.word	0x51008108
 8003818:	52004000 	.word	0x52004000

0800381c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800381c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003854 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003820:	f7ff ff70 	bl	8003704 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003824:	480c      	ldr	r0, [pc, #48]	; (8003858 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003826:	490d      	ldr	r1, [pc, #52]	; (800385c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003828:	4a0d      	ldr	r2, [pc, #52]	; (8003860 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800382a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800382c:	e002      	b.n	8003834 <LoopCopyDataInit>

0800382e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800382e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003832:	3304      	adds	r3, #4

08003834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003838:	d3f9      	bcc.n	800382e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800383a:	4a0a      	ldr	r2, [pc, #40]	; (8003864 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800383c:	4c0a      	ldr	r4, [pc, #40]	; (8003868 <LoopFillZerobss+0x22>)
  movs r3, #0
 800383e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003840:	e001      	b.n	8003846 <LoopFillZerobss>

08003842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003844:	3204      	adds	r2, #4

08003846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003848:	d3fb      	bcc.n	8003842 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800384a:	f00a fa5f 	bl	800dd0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800384e:	f7fd fdcf 	bl	80013f0 <main>
  bx  lr
 8003852:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003854:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800385c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8003860:	0800de9c 	.word	0x0800de9c
  ldr r2, =_sbss
 8003864:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8003868:	20004934 	.word	0x20004934

0800386c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800386c:	e7fe      	b.n	800386c <ADC3_IRQHandler>
	...

08003870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003876:	2003      	movs	r0, #3
 8003878:	f000 f90f 	bl	8003a9a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800387c:	f003 ffe0 	bl	8007840 <HAL_RCC_GetSysClockFreq>
 8003880:	4602      	mov	r2, r0
 8003882:	4b15      	ldr	r3, [pc, #84]	; (80038d8 <HAL_Init+0x68>)
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	0a1b      	lsrs	r3, r3, #8
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	4913      	ldr	r1, [pc, #76]	; (80038dc <HAL_Init+0x6c>)
 800388e:	5ccb      	ldrb	r3, [r1, r3]
 8003890:	f003 031f 	and.w	r3, r3, #31
 8003894:	fa22 f303 	lsr.w	r3, r2, r3
 8003898:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800389a:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <HAL_Init+0x68>)
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	4a0e      	ldr	r2, [pc, #56]	; (80038dc <HAL_Init+0x6c>)
 80038a4:	5cd3      	ldrb	r3, [r2, r3]
 80038a6:	f003 031f 	and.w	r3, r3, #31
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	fa22 f303 	lsr.w	r3, r2, r3
 80038b0:	4a0b      	ldr	r2, [pc, #44]	; (80038e0 <HAL_Init+0x70>)
 80038b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038b4:	4a0b      	ldr	r2, [pc, #44]	; (80038e4 <HAL_Init+0x74>)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038ba:	2000      	movs	r0, #0
 80038bc:	f7ff fa20 	bl	8002d00 <HAL_InitTick>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e002      	b.n	80038d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80038ca:	f7fe fe41 	bl	8002550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	58024400 	.word	0x58024400
 80038dc:	0800de4c 	.word	0x0800de4c
 80038e0:	20000004 	.word	0x20000004
 80038e4:	20000000 	.word	0x20000000

080038e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038ec:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_IncTick+0x20>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b06      	ldr	r3, [pc, #24]	; (800390c <HAL_IncTick+0x24>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4413      	add	r3, r2
 80038f8:	4a04      	ldr	r2, [pc, #16]	; (800390c <HAL_IncTick+0x24>)
 80038fa:	6013      	str	r3, [r2, #0]
}
 80038fc:	bf00      	nop
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	2000000c 	.word	0x2000000c
 800390c:	20004930 	.word	0x20004930

08003910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return uwTick;
 8003914:	4b03      	ldr	r3, [pc, #12]	; (8003924 <HAL_GetTick+0x14>)
 8003916:	681b      	ldr	r3, [r3, #0]
}
 8003918:	4618      	mov	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	20004930 	.word	0x20004930

08003928 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <HAL_GetREVID+0x14>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	0c1b      	lsrs	r3, r3, #16
}
 8003932:	4618      	mov	r0, r3
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	5c001000 	.word	0x5c001000

08003940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <__NVIC_SetPriorityGrouping+0x40>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800395c:	4013      	ands	r3, r2
 800395e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003968:	4b06      	ldr	r3, [pc, #24]	; (8003984 <__NVIC_SetPriorityGrouping+0x44>)
 800396a:	4313      	orrs	r3, r2
 800396c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800396e:	4a04      	ldr	r2, [pc, #16]	; (8003980 <__NVIC_SetPriorityGrouping+0x40>)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	60d3      	str	r3, [r2, #12]
}
 8003974:	bf00      	nop
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	e000ed00 	.word	0xe000ed00
 8003984:	05fa0000 	.word	0x05fa0000

08003988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800398c:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <__NVIC_GetPriorityGrouping+0x18>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	0a1b      	lsrs	r3, r3, #8
 8003992:	f003 0307 	and.w	r3, r3, #7
}
 8003996:	4618      	mov	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	e000ed00 	.word	0xe000ed00

080039a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	db0b      	blt.n	80039ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039b6:	88fb      	ldrh	r3, [r7, #6]
 80039b8:	f003 021f 	and.w	r2, r3, #31
 80039bc:	4907      	ldr	r1, [pc, #28]	; (80039dc <__NVIC_EnableIRQ+0x38>)
 80039be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	2001      	movs	r0, #1
 80039c6:	fa00 f202 	lsl.w	r2, r0, r2
 80039ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	e000e100 	.word	0xe000e100

080039e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	6039      	str	r1, [r7, #0]
 80039ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	db0a      	blt.n	8003a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	490c      	ldr	r1, [pc, #48]	; (8003a2c <__NVIC_SetPriority+0x4c>)
 80039fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039fe:	0112      	lsls	r2, r2, #4
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	440b      	add	r3, r1
 8003a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a08:	e00a      	b.n	8003a20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	4908      	ldr	r1, [pc, #32]	; (8003a30 <__NVIC_SetPriority+0x50>)
 8003a10:	88fb      	ldrh	r3, [r7, #6]
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	3b04      	subs	r3, #4
 8003a18:	0112      	lsls	r2, r2, #4
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	761a      	strb	r2, [r3, #24]
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	e000e100 	.word	0xe000e100
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b089      	sub	sp, #36	; 0x24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f1c3 0307 	rsb	r3, r3, #7
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	bf28      	it	cs
 8003a52:	2304      	movcs	r3, #4
 8003a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	3304      	adds	r3, #4
 8003a5a:	2b06      	cmp	r3, #6
 8003a5c:	d902      	bls.n	8003a64 <NVIC_EncodePriority+0x30>
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	3b03      	subs	r3, #3
 8003a62:	e000      	b.n	8003a66 <NVIC_EncodePriority+0x32>
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a68:	f04f 32ff 	mov.w	r2, #4294967295
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43da      	mvns	r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	401a      	ands	r2, r3
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	fa01 f303 	lsl.w	r3, r1, r3
 8003a86:	43d9      	mvns	r1, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a8c:	4313      	orrs	r3, r2
         );
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3724      	adds	r7, #36	; 0x24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b082      	sub	sp, #8
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff ff4c 	bl	8003940 <__NVIC_SetPriorityGrouping>
}
 8003aa8:	bf00      	nop
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003abe:	f7ff ff63 	bl	8003988 <__NVIC_GetPriorityGrouping>
 8003ac2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	6978      	ldr	r0, [r7, #20]
 8003aca:	f7ff ffb3 	bl	8003a34 <NVIC_EncodePriority>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff ff82 	bl	80039e0 <__NVIC_SetPriority>
}
 8003adc:	bf00      	nop
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff ff56 	bl	80039a4 <__NVIC_EnableIRQ>
}
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003b08:	f7ff ff02 	bl	8003910 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e316      	b.n	8004146 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a66      	ldr	r2, [pc, #408]	; (8003cb8 <HAL_DMA_Init+0x1b8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d04a      	beq.n	8003bb8 <HAL_DMA_Init+0xb8>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a65      	ldr	r2, [pc, #404]	; (8003cbc <HAL_DMA_Init+0x1bc>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d045      	beq.n	8003bb8 <HAL_DMA_Init+0xb8>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a63      	ldr	r2, [pc, #396]	; (8003cc0 <HAL_DMA_Init+0x1c0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d040      	beq.n	8003bb8 <HAL_DMA_Init+0xb8>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a62      	ldr	r2, [pc, #392]	; (8003cc4 <HAL_DMA_Init+0x1c4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d03b      	beq.n	8003bb8 <HAL_DMA_Init+0xb8>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a60      	ldr	r2, [pc, #384]	; (8003cc8 <HAL_DMA_Init+0x1c8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d036      	beq.n	8003bb8 <HAL_DMA_Init+0xb8>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a5f      	ldr	r2, [pc, #380]	; (8003ccc <HAL_DMA_Init+0x1cc>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d031      	beq.n	8003bb8 <HAL_DMA_Init+0xb8>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a5d      	ldr	r2, [pc, #372]	; (8003cd0 <HAL_DMA_Init+0x1d0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d02c      	beq.n	8003bb8 <HAL_DMA_Init+0xb8>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a5c      	ldr	r2, [pc, #368]	; (8003cd4 <HAL_DMA_Init+0x1d4>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d027      	beq.n	8003bb8 <HAL_DMA_Init+0xb8>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a5a      	ldr	r2, [pc, #360]	; (8003cd8 <HAL_DMA_Init+0x1d8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d022      	beq.n	8003bb8 <HAL_DMA_Init+0xb8>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a59      	ldr	r2, [pc, #356]	; (8003cdc <HAL_DMA_Init+0x1dc>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d01d      	beq.n	8003bb8 <HAL_DMA_Init+0xb8>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a57      	ldr	r2, [pc, #348]	; (8003ce0 <HAL_DMA_Init+0x1e0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d018      	beq.n	8003bb8 <HAL_DMA_Init+0xb8>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a56      	ldr	r2, [pc, #344]	; (8003ce4 <HAL_DMA_Init+0x1e4>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d013      	beq.n	8003bb8 <HAL_DMA_Init+0xb8>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a54      	ldr	r2, [pc, #336]	; (8003ce8 <HAL_DMA_Init+0x1e8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00e      	beq.n	8003bb8 <HAL_DMA_Init+0xb8>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a53      	ldr	r2, [pc, #332]	; (8003cec <HAL_DMA_Init+0x1ec>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d009      	beq.n	8003bb8 <HAL_DMA_Init+0xb8>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a51      	ldr	r2, [pc, #324]	; (8003cf0 <HAL_DMA_Init+0x1f0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d004      	beq.n	8003bb8 <HAL_DMA_Init+0xb8>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a50      	ldr	r2, [pc, #320]	; (8003cf4 <HAL_DMA_Init+0x1f4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d101      	bne.n	8003bbc <HAL_DMA_Init+0xbc>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <HAL_DMA_Init+0xbe>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 813b 	beq.w	8003e3a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a37      	ldr	r2, [pc, #220]	; (8003cb8 <HAL_DMA_Init+0x1b8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d04a      	beq.n	8003c74 <HAL_DMA_Init+0x174>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a36      	ldr	r2, [pc, #216]	; (8003cbc <HAL_DMA_Init+0x1bc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d045      	beq.n	8003c74 <HAL_DMA_Init+0x174>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a34      	ldr	r2, [pc, #208]	; (8003cc0 <HAL_DMA_Init+0x1c0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d040      	beq.n	8003c74 <HAL_DMA_Init+0x174>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a33      	ldr	r2, [pc, #204]	; (8003cc4 <HAL_DMA_Init+0x1c4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d03b      	beq.n	8003c74 <HAL_DMA_Init+0x174>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a31      	ldr	r2, [pc, #196]	; (8003cc8 <HAL_DMA_Init+0x1c8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d036      	beq.n	8003c74 <HAL_DMA_Init+0x174>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a30      	ldr	r2, [pc, #192]	; (8003ccc <HAL_DMA_Init+0x1cc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d031      	beq.n	8003c74 <HAL_DMA_Init+0x174>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a2e      	ldr	r2, [pc, #184]	; (8003cd0 <HAL_DMA_Init+0x1d0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d02c      	beq.n	8003c74 <HAL_DMA_Init+0x174>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a2d      	ldr	r2, [pc, #180]	; (8003cd4 <HAL_DMA_Init+0x1d4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d027      	beq.n	8003c74 <HAL_DMA_Init+0x174>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a2b      	ldr	r2, [pc, #172]	; (8003cd8 <HAL_DMA_Init+0x1d8>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d022      	beq.n	8003c74 <HAL_DMA_Init+0x174>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a2a      	ldr	r2, [pc, #168]	; (8003cdc <HAL_DMA_Init+0x1dc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d01d      	beq.n	8003c74 <HAL_DMA_Init+0x174>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a28      	ldr	r2, [pc, #160]	; (8003ce0 <HAL_DMA_Init+0x1e0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d018      	beq.n	8003c74 <HAL_DMA_Init+0x174>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a27      	ldr	r2, [pc, #156]	; (8003ce4 <HAL_DMA_Init+0x1e4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d013      	beq.n	8003c74 <HAL_DMA_Init+0x174>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a25      	ldr	r2, [pc, #148]	; (8003ce8 <HAL_DMA_Init+0x1e8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00e      	beq.n	8003c74 <HAL_DMA_Init+0x174>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a24      	ldr	r2, [pc, #144]	; (8003cec <HAL_DMA_Init+0x1ec>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d009      	beq.n	8003c74 <HAL_DMA_Init+0x174>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a22      	ldr	r2, [pc, #136]	; (8003cf0 <HAL_DMA_Init+0x1f0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d004      	beq.n	8003c74 <HAL_DMA_Init+0x174>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a21      	ldr	r2, [pc, #132]	; (8003cf4 <HAL_DMA_Init+0x1f4>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d108      	bne.n	8003c86 <HAL_DMA_Init+0x186>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0201 	bic.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	e007      	b.n	8003c96 <HAL_DMA_Init+0x196>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0201 	bic.w	r2, r2, #1
 8003c94:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c96:	e02f      	b.n	8003cf8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c98:	f7ff fe3a 	bl	8003910 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b05      	cmp	r3, #5
 8003ca4:	d928      	bls.n	8003cf8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2203      	movs	r2, #3
 8003cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e246      	b.n	8004146 <HAL_DMA_Init+0x646>
 8003cb8:	40020010 	.word	0x40020010
 8003cbc:	40020028 	.word	0x40020028
 8003cc0:	40020040 	.word	0x40020040
 8003cc4:	40020058 	.word	0x40020058
 8003cc8:	40020070 	.word	0x40020070
 8003ccc:	40020088 	.word	0x40020088
 8003cd0:	400200a0 	.word	0x400200a0
 8003cd4:	400200b8 	.word	0x400200b8
 8003cd8:	40020410 	.word	0x40020410
 8003cdc:	40020428 	.word	0x40020428
 8003ce0:	40020440 	.word	0x40020440
 8003ce4:	40020458 	.word	0x40020458
 8003ce8:	40020470 	.word	0x40020470
 8003cec:	40020488 	.word	0x40020488
 8003cf0:	400204a0 	.word	0x400204a0
 8003cf4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1c8      	bne.n	8003c98 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4b83      	ldr	r3, [pc, #524]	; (8003f20 <HAL_DMA_Init+0x420>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003d1e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d2a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d36:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d107      	bne.n	8003d5c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	4313      	orrs	r3, r2
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003d5c:	4b71      	ldr	r3, [pc, #452]	; (8003f24 <HAL_DMA_Init+0x424>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	4b71      	ldr	r3, [pc, #452]	; (8003f28 <HAL_DMA_Init+0x428>)
 8003d62:	4013      	ands	r3, r2
 8003d64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d68:	d328      	bcc.n	8003dbc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b28      	cmp	r3, #40	; 0x28
 8003d70:	d903      	bls.n	8003d7a <HAL_DMA_Init+0x27a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b2e      	cmp	r3, #46	; 0x2e
 8003d78:	d917      	bls.n	8003daa <HAL_DMA_Init+0x2aa>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b3e      	cmp	r3, #62	; 0x3e
 8003d80:	d903      	bls.n	8003d8a <HAL_DMA_Init+0x28a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b42      	cmp	r3, #66	; 0x42
 8003d88:	d90f      	bls.n	8003daa <HAL_DMA_Init+0x2aa>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b46      	cmp	r3, #70	; 0x46
 8003d90:	d903      	bls.n	8003d9a <HAL_DMA_Init+0x29a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b48      	cmp	r3, #72	; 0x48
 8003d98:	d907      	bls.n	8003daa <HAL_DMA_Init+0x2aa>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b4e      	cmp	r3, #78	; 0x4e
 8003da0:	d905      	bls.n	8003dae <HAL_DMA_Init+0x2ae>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b52      	cmp	r3, #82	; 0x52
 8003da8:	d801      	bhi.n	8003dae <HAL_DMA_Init+0x2ae>
 8003daa:	2301      	movs	r3, #1
 8003dac:	e000      	b.n	8003db0 <HAL_DMA_Init+0x2b0>
 8003dae:	2300      	movs	r3, #0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dba:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f023 0307 	bic.w	r3, r3, #7
 8003dd2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d117      	bne.n	8003e16 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00e      	beq.n	8003e16 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f002 fb3d 	bl	8006478 <DMA_CheckFifoParam>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2240      	movs	r2, #64	; 0x40
 8003e08:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e197      	b.n	8004146 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f002 fa78 	bl	8006314 <DMA_CalcBaseAndBitshift>
 8003e24:	4603      	mov	r3, r0
 8003e26:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2c:	f003 031f 	and.w	r3, r3, #31
 8003e30:	223f      	movs	r2, #63	; 0x3f
 8003e32:	409a      	lsls	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	609a      	str	r2, [r3, #8]
 8003e38:	e0cd      	b.n	8003fd6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a3b      	ldr	r2, [pc, #236]	; (8003f2c <HAL_DMA_Init+0x42c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d022      	beq.n	8003e8a <HAL_DMA_Init+0x38a>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a39      	ldr	r2, [pc, #228]	; (8003f30 <HAL_DMA_Init+0x430>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d01d      	beq.n	8003e8a <HAL_DMA_Init+0x38a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a38      	ldr	r2, [pc, #224]	; (8003f34 <HAL_DMA_Init+0x434>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d018      	beq.n	8003e8a <HAL_DMA_Init+0x38a>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a36      	ldr	r2, [pc, #216]	; (8003f38 <HAL_DMA_Init+0x438>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d013      	beq.n	8003e8a <HAL_DMA_Init+0x38a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a35      	ldr	r2, [pc, #212]	; (8003f3c <HAL_DMA_Init+0x43c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00e      	beq.n	8003e8a <HAL_DMA_Init+0x38a>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a33      	ldr	r2, [pc, #204]	; (8003f40 <HAL_DMA_Init+0x440>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d009      	beq.n	8003e8a <HAL_DMA_Init+0x38a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a32      	ldr	r2, [pc, #200]	; (8003f44 <HAL_DMA_Init+0x444>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d004      	beq.n	8003e8a <HAL_DMA_Init+0x38a>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a30      	ldr	r2, [pc, #192]	; (8003f48 <HAL_DMA_Init+0x448>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d101      	bne.n	8003e8e <HAL_DMA_Init+0x38e>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <HAL_DMA_Init+0x390>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 8097 	beq.w	8003fc4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a24      	ldr	r2, [pc, #144]	; (8003f2c <HAL_DMA_Init+0x42c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d021      	beq.n	8003ee4 <HAL_DMA_Init+0x3e4>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a22      	ldr	r2, [pc, #136]	; (8003f30 <HAL_DMA_Init+0x430>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d01c      	beq.n	8003ee4 <HAL_DMA_Init+0x3e4>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a21      	ldr	r2, [pc, #132]	; (8003f34 <HAL_DMA_Init+0x434>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d017      	beq.n	8003ee4 <HAL_DMA_Init+0x3e4>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1f      	ldr	r2, [pc, #124]	; (8003f38 <HAL_DMA_Init+0x438>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d012      	beq.n	8003ee4 <HAL_DMA_Init+0x3e4>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a1e      	ldr	r2, [pc, #120]	; (8003f3c <HAL_DMA_Init+0x43c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00d      	beq.n	8003ee4 <HAL_DMA_Init+0x3e4>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1c      	ldr	r2, [pc, #112]	; (8003f40 <HAL_DMA_Init+0x440>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d008      	beq.n	8003ee4 <HAL_DMA_Init+0x3e4>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1b      	ldr	r2, [pc, #108]	; (8003f44 <HAL_DMA_Init+0x444>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d003      	beq.n	8003ee4 <HAL_DMA_Init+0x3e4>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a19      	ldr	r2, [pc, #100]	; (8003f48 <HAL_DMA_Init+0x448>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	4b12      	ldr	r3, [pc, #72]	; (8003f4c <HAL_DMA_Init+0x44c>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2b40      	cmp	r3, #64	; 0x40
 8003f0c:	d020      	beq.n	8003f50 <HAL_DMA_Init+0x450>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2b80      	cmp	r3, #128	; 0x80
 8003f14:	d102      	bne.n	8003f1c <HAL_DMA_Init+0x41c>
 8003f16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f1a:	e01a      	b.n	8003f52 <HAL_DMA_Init+0x452>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	e018      	b.n	8003f52 <HAL_DMA_Init+0x452>
 8003f20:	fe10803f 	.word	0xfe10803f
 8003f24:	5c001000 	.word	0x5c001000
 8003f28:	ffff0000 	.word	0xffff0000
 8003f2c:	58025408 	.word	0x58025408
 8003f30:	5802541c 	.word	0x5802541c
 8003f34:	58025430 	.word	0x58025430
 8003f38:	58025444 	.word	0x58025444
 8003f3c:	58025458 	.word	0x58025458
 8003f40:	5802546c 	.word	0x5802546c
 8003f44:	58025480 	.word	0x58025480
 8003f48:	58025494 	.word	0x58025494
 8003f4c:	fffe000f 	.word	0xfffe000f
 8003f50:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	68d2      	ldr	r2, [r2, #12]
 8003f56:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003f60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003f68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003f70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003f78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003f80:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	4b6e      	ldr	r3, [pc, #440]	; (8004150 <HAL_DMA_Init+0x650>)
 8003f98:	4413      	add	r3, r2
 8003f9a:	4a6e      	ldr	r2, [pc, #440]	; (8004154 <HAL_DMA_Init+0x654>)
 8003f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa0:	091b      	lsrs	r3, r3, #4
 8003fa2:	009a      	lsls	r2, r3, #2
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f002 f9b3 	bl	8006314 <DMA_CalcBaseAndBitshift>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb6:	f003 031f 	and.w	r3, r3, #31
 8003fba:	2201      	movs	r2, #1
 8003fbc:	409a      	lsls	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	605a      	str	r2, [r3, #4]
 8003fc2:	e008      	b.n	8003fd6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2240      	movs	r2, #64	; 0x40
 8003fc8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2203      	movs	r2, #3
 8003fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e0b7      	b.n	8004146 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a5f      	ldr	r2, [pc, #380]	; (8004158 <HAL_DMA_Init+0x658>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d072      	beq.n	80040c6 <HAL_DMA_Init+0x5c6>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a5d      	ldr	r2, [pc, #372]	; (800415c <HAL_DMA_Init+0x65c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d06d      	beq.n	80040c6 <HAL_DMA_Init+0x5c6>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a5c      	ldr	r2, [pc, #368]	; (8004160 <HAL_DMA_Init+0x660>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d068      	beq.n	80040c6 <HAL_DMA_Init+0x5c6>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a5a      	ldr	r2, [pc, #360]	; (8004164 <HAL_DMA_Init+0x664>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d063      	beq.n	80040c6 <HAL_DMA_Init+0x5c6>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a59      	ldr	r2, [pc, #356]	; (8004168 <HAL_DMA_Init+0x668>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d05e      	beq.n	80040c6 <HAL_DMA_Init+0x5c6>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a57      	ldr	r2, [pc, #348]	; (800416c <HAL_DMA_Init+0x66c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d059      	beq.n	80040c6 <HAL_DMA_Init+0x5c6>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a56      	ldr	r2, [pc, #344]	; (8004170 <HAL_DMA_Init+0x670>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d054      	beq.n	80040c6 <HAL_DMA_Init+0x5c6>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a54      	ldr	r2, [pc, #336]	; (8004174 <HAL_DMA_Init+0x674>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d04f      	beq.n	80040c6 <HAL_DMA_Init+0x5c6>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a53      	ldr	r2, [pc, #332]	; (8004178 <HAL_DMA_Init+0x678>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d04a      	beq.n	80040c6 <HAL_DMA_Init+0x5c6>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a51      	ldr	r2, [pc, #324]	; (800417c <HAL_DMA_Init+0x67c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d045      	beq.n	80040c6 <HAL_DMA_Init+0x5c6>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a50      	ldr	r2, [pc, #320]	; (8004180 <HAL_DMA_Init+0x680>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d040      	beq.n	80040c6 <HAL_DMA_Init+0x5c6>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a4e      	ldr	r2, [pc, #312]	; (8004184 <HAL_DMA_Init+0x684>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d03b      	beq.n	80040c6 <HAL_DMA_Init+0x5c6>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a4d      	ldr	r2, [pc, #308]	; (8004188 <HAL_DMA_Init+0x688>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d036      	beq.n	80040c6 <HAL_DMA_Init+0x5c6>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a4b      	ldr	r2, [pc, #300]	; (800418c <HAL_DMA_Init+0x68c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d031      	beq.n	80040c6 <HAL_DMA_Init+0x5c6>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a4a      	ldr	r2, [pc, #296]	; (8004190 <HAL_DMA_Init+0x690>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d02c      	beq.n	80040c6 <HAL_DMA_Init+0x5c6>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a48      	ldr	r2, [pc, #288]	; (8004194 <HAL_DMA_Init+0x694>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d027      	beq.n	80040c6 <HAL_DMA_Init+0x5c6>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a47      	ldr	r2, [pc, #284]	; (8004198 <HAL_DMA_Init+0x698>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d022      	beq.n	80040c6 <HAL_DMA_Init+0x5c6>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a45      	ldr	r2, [pc, #276]	; (800419c <HAL_DMA_Init+0x69c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d01d      	beq.n	80040c6 <HAL_DMA_Init+0x5c6>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a44      	ldr	r2, [pc, #272]	; (80041a0 <HAL_DMA_Init+0x6a0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d018      	beq.n	80040c6 <HAL_DMA_Init+0x5c6>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a42      	ldr	r2, [pc, #264]	; (80041a4 <HAL_DMA_Init+0x6a4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d013      	beq.n	80040c6 <HAL_DMA_Init+0x5c6>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a41      	ldr	r2, [pc, #260]	; (80041a8 <HAL_DMA_Init+0x6a8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00e      	beq.n	80040c6 <HAL_DMA_Init+0x5c6>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a3f      	ldr	r2, [pc, #252]	; (80041ac <HAL_DMA_Init+0x6ac>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d009      	beq.n	80040c6 <HAL_DMA_Init+0x5c6>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a3e      	ldr	r2, [pc, #248]	; (80041b0 <HAL_DMA_Init+0x6b0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d004      	beq.n	80040c6 <HAL_DMA_Init+0x5c6>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a3c      	ldr	r2, [pc, #240]	; (80041b4 <HAL_DMA_Init+0x6b4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d101      	bne.n	80040ca <HAL_DMA_Init+0x5ca>
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <HAL_DMA_Init+0x5cc>
 80040ca:	2300      	movs	r3, #0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d032      	beq.n	8004136 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f002 fa4d 	bl	8006570 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	2b80      	cmp	r3, #128	; 0x80
 80040dc:	d102      	bne.n	80040e4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80040f8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d010      	beq.n	8004124 <HAL_DMA_Init+0x624>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b08      	cmp	r3, #8
 8004108:	d80c      	bhi.n	8004124 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f002 faca 	bl	80066a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004120:	605a      	str	r2, [r3, #4]
 8004122:	e008      	b.n	8004136 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	a7fdabf8 	.word	0xa7fdabf8
 8004154:	cccccccd 	.word	0xcccccccd
 8004158:	40020010 	.word	0x40020010
 800415c:	40020028 	.word	0x40020028
 8004160:	40020040 	.word	0x40020040
 8004164:	40020058 	.word	0x40020058
 8004168:	40020070 	.word	0x40020070
 800416c:	40020088 	.word	0x40020088
 8004170:	400200a0 	.word	0x400200a0
 8004174:	400200b8 	.word	0x400200b8
 8004178:	40020410 	.word	0x40020410
 800417c:	40020428 	.word	0x40020428
 8004180:	40020440 	.word	0x40020440
 8004184:	40020458 	.word	0x40020458
 8004188:	40020470 	.word	0x40020470
 800418c:	40020488 	.word	0x40020488
 8004190:	400204a0 	.word	0x400204a0
 8004194:	400204b8 	.word	0x400204b8
 8004198:	58025408 	.word	0x58025408
 800419c:	5802541c 	.word	0x5802541c
 80041a0:	58025430 	.word	0x58025430
 80041a4:	58025444 	.word	0x58025444
 80041a8:	58025458 	.word	0x58025458
 80041ac:	5802546c 	.word	0x5802546c
 80041b0:	58025480 	.word	0x58025480
 80041b4:	58025494 	.word	0x58025494

080041b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e226      	b.n	8004622 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <HAL_DMA_Start_IT+0x2a>
 80041de:	2302      	movs	r3, #2
 80041e0:	e21f      	b.n	8004622 <HAL_DMA_Start_IT+0x46a>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	f040 820a 	bne.w	800460c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a68      	ldr	r2, [pc, #416]	; (80043ac <HAL_DMA_Start_IT+0x1f4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d04a      	beq.n	80042a6 <HAL_DMA_Start_IT+0xee>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a66      	ldr	r2, [pc, #408]	; (80043b0 <HAL_DMA_Start_IT+0x1f8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d045      	beq.n	80042a6 <HAL_DMA_Start_IT+0xee>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a65      	ldr	r2, [pc, #404]	; (80043b4 <HAL_DMA_Start_IT+0x1fc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d040      	beq.n	80042a6 <HAL_DMA_Start_IT+0xee>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a63      	ldr	r2, [pc, #396]	; (80043b8 <HAL_DMA_Start_IT+0x200>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d03b      	beq.n	80042a6 <HAL_DMA_Start_IT+0xee>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a62      	ldr	r2, [pc, #392]	; (80043bc <HAL_DMA_Start_IT+0x204>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d036      	beq.n	80042a6 <HAL_DMA_Start_IT+0xee>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a60      	ldr	r2, [pc, #384]	; (80043c0 <HAL_DMA_Start_IT+0x208>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d031      	beq.n	80042a6 <HAL_DMA_Start_IT+0xee>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a5f      	ldr	r2, [pc, #380]	; (80043c4 <HAL_DMA_Start_IT+0x20c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d02c      	beq.n	80042a6 <HAL_DMA_Start_IT+0xee>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a5d      	ldr	r2, [pc, #372]	; (80043c8 <HAL_DMA_Start_IT+0x210>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d027      	beq.n	80042a6 <HAL_DMA_Start_IT+0xee>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a5c      	ldr	r2, [pc, #368]	; (80043cc <HAL_DMA_Start_IT+0x214>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d022      	beq.n	80042a6 <HAL_DMA_Start_IT+0xee>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a5a      	ldr	r2, [pc, #360]	; (80043d0 <HAL_DMA_Start_IT+0x218>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d01d      	beq.n	80042a6 <HAL_DMA_Start_IT+0xee>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a59      	ldr	r2, [pc, #356]	; (80043d4 <HAL_DMA_Start_IT+0x21c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d018      	beq.n	80042a6 <HAL_DMA_Start_IT+0xee>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a57      	ldr	r2, [pc, #348]	; (80043d8 <HAL_DMA_Start_IT+0x220>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d013      	beq.n	80042a6 <HAL_DMA_Start_IT+0xee>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a56      	ldr	r2, [pc, #344]	; (80043dc <HAL_DMA_Start_IT+0x224>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d00e      	beq.n	80042a6 <HAL_DMA_Start_IT+0xee>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a54      	ldr	r2, [pc, #336]	; (80043e0 <HAL_DMA_Start_IT+0x228>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d009      	beq.n	80042a6 <HAL_DMA_Start_IT+0xee>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a53      	ldr	r2, [pc, #332]	; (80043e4 <HAL_DMA_Start_IT+0x22c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d004      	beq.n	80042a6 <HAL_DMA_Start_IT+0xee>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a51      	ldr	r2, [pc, #324]	; (80043e8 <HAL_DMA_Start_IT+0x230>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d108      	bne.n	80042b8 <HAL_DMA_Start_IT+0x100>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0201 	bic.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	e007      	b.n	80042c8 <HAL_DMA_Start_IT+0x110>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0201 	bic.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f001 fe74 	bl	8005fbc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a34      	ldr	r2, [pc, #208]	; (80043ac <HAL_DMA_Start_IT+0x1f4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d04a      	beq.n	8004374 <HAL_DMA_Start_IT+0x1bc>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a33      	ldr	r2, [pc, #204]	; (80043b0 <HAL_DMA_Start_IT+0x1f8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d045      	beq.n	8004374 <HAL_DMA_Start_IT+0x1bc>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a31      	ldr	r2, [pc, #196]	; (80043b4 <HAL_DMA_Start_IT+0x1fc>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d040      	beq.n	8004374 <HAL_DMA_Start_IT+0x1bc>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a30      	ldr	r2, [pc, #192]	; (80043b8 <HAL_DMA_Start_IT+0x200>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d03b      	beq.n	8004374 <HAL_DMA_Start_IT+0x1bc>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a2e      	ldr	r2, [pc, #184]	; (80043bc <HAL_DMA_Start_IT+0x204>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d036      	beq.n	8004374 <HAL_DMA_Start_IT+0x1bc>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a2d      	ldr	r2, [pc, #180]	; (80043c0 <HAL_DMA_Start_IT+0x208>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d031      	beq.n	8004374 <HAL_DMA_Start_IT+0x1bc>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a2b      	ldr	r2, [pc, #172]	; (80043c4 <HAL_DMA_Start_IT+0x20c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d02c      	beq.n	8004374 <HAL_DMA_Start_IT+0x1bc>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a2a      	ldr	r2, [pc, #168]	; (80043c8 <HAL_DMA_Start_IT+0x210>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d027      	beq.n	8004374 <HAL_DMA_Start_IT+0x1bc>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a28      	ldr	r2, [pc, #160]	; (80043cc <HAL_DMA_Start_IT+0x214>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d022      	beq.n	8004374 <HAL_DMA_Start_IT+0x1bc>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a27      	ldr	r2, [pc, #156]	; (80043d0 <HAL_DMA_Start_IT+0x218>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d01d      	beq.n	8004374 <HAL_DMA_Start_IT+0x1bc>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a25      	ldr	r2, [pc, #148]	; (80043d4 <HAL_DMA_Start_IT+0x21c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d018      	beq.n	8004374 <HAL_DMA_Start_IT+0x1bc>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a24      	ldr	r2, [pc, #144]	; (80043d8 <HAL_DMA_Start_IT+0x220>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d013      	beq.n	8004374 <HAL_DMA_Start_IT+0x1bc>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a22      	ldr	r2, [pc, #136]	; (80043dc <HAL_DMA_Start_IT+0x224>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d00e      	beq.n	8004374 <HAL_DMA_Start_IT+0x1bc>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a21      	ldr	r2, [pc, #132]	; (80043e0 <HAL_DMA_Start_IT+0x228>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d009      	beq.n	8004374 <HAL_DMA_Start_IT+0x1bc>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a1f      	ldr	r2, [pc, #124]	; (80043e4 <HAL_DMA_Start_IT+0x22c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d004      	beq.n	8004374 <HAL_DMA_Start_IT+0x1bc>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a1e      	ldr	r2, [pc, #120]	; (80043e8 <HAL_DMA_Start_IT+0x230>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d101      	bne.n	8004378 <HAL_DMA_Start_IT+0x1c0>
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <HAL_DMA_Start_IT+0x1c2>
 8004378:	2300      	movs	r3, #0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d036      	beq.n	80043ec <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f023 021e 	bic.w	r2, r3, #30
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 0216 	orr.w	r2, r2, #22
 8004390:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d03e      	beq.n	8004418 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 0208 	orr.w	r2, r2, #8
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	e035      	b.n	8004418 <HAL_DMA_Start_IT+0x260>
 80043ac:	40020010 	.word	0x40020010
 80043b0:	40020028 	.word	0x40020028
 80043b4:	40020040 	.word	0x40020040
 80043b8:	40020058 	.word	0x40020058
 80043bc:	40020070 	.word	0x40020070
 80043c0:	40020088 	.word	0x40020088
 80043c4:	400200a0 	.word	0x400200a0
 80043c8:	400200b8 	.word	0x400200b8
 80043cc:	40020410 	.word	0x40020410
 80043d0:	40020428 	.word	0x40020428
 80043d4:	40020440 	.word	0x40020440
 80043d8:	40020458 	.word	0x40020458
 80043dc:	40020470 	.word	0x40020470
 80043e0:	40020488 	.word	0x40020488
 80043e4:	400204a0 	.word	0x400204a0
 80043e8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f023 020e 	bic.w	r2, r3, #14
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 020a 	orr.w	r2, r2, #10
 80043fe:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	2b00      	cmp	r3, #0
 8004406:	d007      	beq.n	8004418 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0204 	orr.w	r2, r2, #4
 8004416:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a83      	ldr	r2, [pc, #524]	; (800462c <HAL_DMA_Start_IT+0x474>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d072      	beq.n	8004508 <HAL_DMA_Start_IT+0x350>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a82      	ldr	r2, [pc, #520]	; (8004630 <HAL_DMA_Start_IT+0x478>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d06d      	beq.n	8004508 <HAL_DMA_Start_IT+0x350>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a80      	ldr	r2, [pc, #512]	; (8004634 <HAL_DMA_Start_IT+0x47c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d068      	beq.n	8004508 <HAL_DMA_Start_IT+0x350>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a7f      	ldr	r2, [pc, #508]	; (8004638 <HAL_DMA_Start_IT+0x480>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d063      	beq.n	8004508 <HAL_DMA_Start_IT+0x350>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a7d      	ldr	r2, [pc, #500]	; (800463c <HAL_DMA_Start_IT+0x484>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d05e      	beq.n	8004508 <HAL_DMA_Start_IT+0x350>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a7c      	ldr	r2, [pc, #496]	; (8004640 <HAL_DMA_Start_IT+0x488>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d059      	beq.n	8004508 <HAL_DMA_Start_IT+0x350>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a7a      	ldr	r2, [pc, #488]	; (8004644 <HAL_DMA_Start_IT+0x48c>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d054      	beq.n	8004508 <HAL_DMA_Start_IT+0x350>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a79      	ldr	r2, [pc, #484]	; (8004648 <HAL_DMA_Start_IT+0x490>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d04f      	beq.n	8004508 <HAL_DMA_Start_IT+0x350>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a77      	ldr	r2, [pc, #476]	; (800464c <HAL_DMA_Start_IT+0x494>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d04a      	beq.n	8004508 <HAL_DMA_Start_IT+0x350>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a76      	ldr	r2, [pc, #472]	; (8004650 <HAL_DMA_Start_IT+0x498>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d045      	beq.n	8004508 <HAL_DMA_Start_IT+0x350>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a74      	ldr	r2, [pc, #464]	; (8004654 <HAL_DMA_Start_IT+0x49c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d040      	beq.n	8004508 <HAL_DMA_Start_IT+0x350>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a73      	ldr	r2, [pc, #460]	; (8004658 <HAL_DMA_Start_IT+0x4a0>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d03b      	beq.n	8004508 <HAL_DMA_Start_IT+0x350>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a71      	ldr	r2, [pc, #452]	; (800465c <HAL_DMA_Start_IT+0x4a4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d036      	beq.n	8004508 <HAL_DMA_Start_IT+0x350>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a70      	ldr	r2, [pc, #448]	; (8004660 <HAL_DMA_Start_IT+0x4a8>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d031      	beq.n	8004508 <HAL_DMA_Start_IT+0x350>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a6e      	ldr	r2, [pc, #440]	; (8004664 <HAL_DMA_Start_IT+0x4ac>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d02c      	beq.n	8004508 <HAL_DMA_Start_IT+0x350>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a6d      	ldr	r2, [pc, #436]	; (8004668 <HAL_DMA_Start_IT+0x4b0>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d027      	beq.n	8004508 <HAL_DMA_Start_IT+0x350>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a6b      	ldr	r2, [pc, #428]	; (800466c <HAL_DMA_Start_IT+0x4b4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d022      	beq.n	8004508 <HAL_DMA_Start_IT+0x350>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a6a      	ldr	r2, [pc, #424]	; (8004670 <HAL_DMA_Start_IT+0x4b8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d01d      	beq.n	8004508 <HAL_DMA_Start_IT+0x350>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a68      	ldr	r2, [pc, #416]	; (8004674 <HAL_DMA_Start_IT+0x4bc>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d018      	beq.n	8004508 <HAL_DMA_Start_IT+0x350>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a67      	ldr	r2, [pc, #412]	; (8004678 <HAL_DMA_Start_IT+0x4c0>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d013      	beq.n	8004508 <HAL_DMA_Start_IT+0x350>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a65      	ldr	r2, [pc, #404]	; (800467c <HAL_DMA_Start_IT+0x4c4>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d00e      	beq.n	8004508 <HAL_DMA_Start_IT+0x350>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a64      	ldr	r2, [pc, #400]	; (8004680 <HAL_DMA_Start_IT+0x4c8>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d009      	beq.n	8004508 <HAL_DMA_Start_IT+0x350>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a62      	ldr	r2, [pc, #392]	; (8004684 <HAL_DMA_Start_IT+0x4cc>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d004      	beq.n	8004508 <HAL_DMA_Start_IT+0x350>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a61      	ldr	r2, [pc, #388]	; (8004688 <HAL_DMA_Start_IT+0x4d0>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d101      	bne.n	800450c <HAL_DMA_Start_IT+0x354>
 8004508:	2301      	movs	r3, #1
 800450a:	e000      	b.n	800450e <HAL_DMA_Start_IT+0x356>
 800450c:	2300      	movs	r3, #0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d01a      	beq.n	8004548 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d007      	beq.n	8004530 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800452a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800452e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004534:	2b00      	cmp	r3, #0
 8004536:	d007      	beq.n	8004548 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004546:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a37      	ldr	r2, [pc, #220]	; (800462c <HAL_DMA_Start_IT+0x474>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d04a      	beq.n	80045e8 <HAL_DMA_Start_IT+0x430>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a36      	ldr	r2, [pc, #216]	; (8004630 <HAL_DMA_Start_IT+0x478>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d045      	beq.n	80045e8 <HAL_DMA_Start_IT+0x430>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a34      	ldr	r2, [pc, #208]	; (8004634 <HAL_DMA_Start_IT+0x47c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d040      	beq.n	80045e8 <HAL_DMA_Start_IT+0x430>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a33      	ldr	r2, [pc, #204]	; (8004638 <HAL_DMA_Start_IT+0x480>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d03b      	beq.n	80045e8 <HAL_DMA_Start_IT+0x430>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a31      	ldr	r2, [pc, #196]	; (800463c <HAL_DMA_Start_IT+0x484>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d036      	beq.n	80045e8 <HAL_DMA_Start_IT+0x430>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a30      	ldr	r2, [pc, #192]	; (8004640 <HAL_DMA_Start_IT+0x488>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d031      	beq.n	80045e8 <HAL_DMA_Start_IT+0x430>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a2e      	ldr	r2, [pc, #184]	; (8004644 <HAL_DMA_Start_IT+0x48c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d02c      	beq.n	80045e8 <HAL_DMA_Start_IT+0x430>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a2d      	ldr	r2, [pc, #180]	; (8004648 <HAL_DMA_Start_IT+0x490>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d027      	beq.n	80045e8 <HAL_DMA_Start_IT+0x430>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a2b      	ldr	r2, [pc, #172]	; (800464c <HAL_DMA_Start_IT+0x494>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d022      	beq.n	80045e8 <HAL_DMA_Start_IT+0x430>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a2a      	ldr	r2, [pc, #168]	; (8004650 <HAL_DMA_Start_IT+0x498>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d01d      	beq.n	80045e8 <HAL_DMA_Start_IT+0x430>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a28      	ldr	r2, [pc, #160]	; (8004654 <HAL_DMA_Start_IT+0x49c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d018      	beq.n	80045e8 <HAL_DMA_Start_IT+0x430>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a27      	ldr	r2, [pc, #156]	; (8004658 <HAL_DMA_Start_IT+0x4a0>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d013      	beq.n	80045e8 <HAL_DMA_Start_IT+0x430>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a25      	ldr	r2, [pc, #148]	; (800465c <HAL_DMA_Start_IT+0x4a4>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00e      	beq.n	80045e8 <HAL_DMA_Start_IT+0x430>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a24      	ldr	r2, [pc, #144]	; (8004660 <HAL_DMA_Start_IT+0x4a8>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d009      	beq.n	80045e8 <HAL_DMA_Start_IT+0x430>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a22      	ldr	r2, [pc, #136]	; (8004664 <HAL_DMA_Start_IT+0x4ac>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d004      	beq.n	80045e8 <HAL_DMA_Start_IT+0x430>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a21      	ldr	r2, [pc, #132]	; (8004668 <HAL_DMA_Start_IT+0x4b0>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d108      	bne.n	80045fa <HAL_DMA_Start_IT+0x442>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	e012      	b.n	8004620 <HAL_DMA_Start_IT+0x468>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0201 	orr.w	r2, r2, #1
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	e009      	b.n	8004620 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800461a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004620:	7dfb      	ldrb	r3, [r7, #23]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40020010 	.word	0x40020010
 8004630:	40020028 	.word	0x40020028
 8004634:	40020040 	.word	0x40020040
 8004638:	40020058 	.word	0x40020058
 800463c:	40020070 	.word	0x40020070
 8004640:	40020088 	.word	0x40020088
 8004644:	400200a0 	.word	0x400200a0
 8004648:	400200b8 	.word	0x400200b8
 800464c:	40020410 	.word	0x40020410
 8004650:	40020428 	.word	0x40020428
 8004654:	40020440 	.word	0x40020440
 8004658:	40020458 	.word	0x40020458
 800465c:	40020470 	.word	0x40020470
 8004660:	40020488 	.word	0x40020488
 8004664:	400204a0 	.word	0x400204a0
 8004668:	400204b8 	.word	0x400204b8
 800466c:	58025408 	.word	0x58025408
 8004670:	5802541c 	.word	0x5802541c
 8004674:	58025430 	.word	0x58025430
 8004678:	58025444 	.word	0x58025444
 800467c:	58025458 	.word	0x58025458
 8004680:	5802546c 	.word	0x5802546c
 8004684:	58025480 	.word	0x58025480
 8004688:	58025494 	.word	0x58025494

0800468c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004694:	f7ff f93c 	bl	8003910 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e2dc      	b.n	8004c5e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d008      	beq.n	80046c2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2280      	movs	r2, #128	; 0x80
 80046b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e2cd      	b.n	8004c5e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a76      	ldr	r2, [pc, #472]	; (80048a0 <HAL_DMA_Abort+0x214>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d04a      	beq.n	8004762 <HAL_DMA_Abort+0xd6>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a74      	ldr	r2, [pc, #464]	; (80048a4 <HAL_DMA_Abort+0x218>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d045      	beq.n	8004762 <HAL_DMA_Abort+0xd6>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a73      	ldr	r2, [pc, #460]	; (80048a8 <HAL_DMA_Abort+0x21c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d040      	beq.n	8004762 <HAL_DMA_Abort+0xd6>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a71      	ldr	r2, [pc, #452]	; (80048ac <HAL_DMA_Abort+0x220>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d03b      	beq.n	8004762 <HAL_DMA_Abort+0xd6>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a70      	ldr	r2, [pc, #448]	; (80048b0 <HAL_DMA_Abort+0x224>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d036      	beq.n	8004762 <HAL_DMA_Abort+0xd6>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a6e      	ldr	r2, [pc, #440]	; (80048b4 <HAL_DMA_Abort+0x228>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d031      	beq.n	8004762 <HAL_DMA_Abort+0xd6>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a6d      	ldr	r2, [pc, #436]	; (80048b8 <HAL_DMA_Abort+0x22c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d02c      	beq.n	8004762 <HAL_DMA_Abort+0xd6>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a6b      	ldr	r2, [pc, #428]	; (80048bc <HAL_DMA_Abort+0x230>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d027      	beq.n	8004762 <HAL_DMA_Abort+0xd6>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a6a      	ldr	r2, [pc, #424]	; (80048c0 <HAL_DMA_Abort+0x234>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d022      	beq.n	8004762 <HAL_DMA_Abort+0xd6>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a68      	ldr	r2, [pc, #416]	; (80048c4 <HAL_DMA_Abort+0x238>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d01d      	beq.n	8004762 <HAL_DMA_Abort+0xd6>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a67      	ldr	r2, [pc, #412]	; (80048c8 <HAL_DMA_Abort+0x23c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d018      	beq.n	8004762 <HAL_DMA_Abort+0xd6>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a65      	ldr	r2, [pc, #404]	; (80048cc <HAL_DMA_Abort+0x240>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d013      	beq.n	8004762 <HAL_DMA_Abort+0xd6>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a64      	ldr	r2, [pc, #400]	; (80048d0 <HAL_DMA_Abort+0x244>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00e      	beq.n	8004762 <HAL_DMA_Abort+0xd6>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a62      	ldr	r2, [pc, #392]	; (80048d4 <HAL_DMA_Abort+0x248>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d009      	beq.n	8004762 <HAL_DMA_Abort+0xd6>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a61      	ldr	r2, [pc, #388]	; (80048d8 <HAL_DMA_Abort+0x24c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d004      	beq.n	8004762 <HAL_DMA_Abort+0xd6>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a5f      	ldr	r2, [pc, #380]	; (80048dc <HAL_DMA_Abort+0x250>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d101      	bne.n	8004766 <HAL_DMA_Abort+0xda>
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <HAL_DMA_Abort+0xdc>
 8004766:	2300      	movs	r3, #0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d013      	beq.n	8004794 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 021e 	bic.w	r2, r2, #30
 800477a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695a      	ldr	r2, [r3, #20]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800478a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	e00a      	b.n	80047aa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 020e 	bic.w	r2, r2, #14
 80047a2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a3c      	ldr	r2, [pc, #240]	; (80048a0 <HAL_DMA_Abort+0x214>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d072      	beq.n	800489a <HAL_DMA_Abort+0x20e>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a3a      	ldr	r2, [pc, #232]	; (80048a4 <HAL_DMA_Abort+0x218>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d06d      	beq.n	800489a <HAL_DMA_Abort+0x20e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a39      	ldr	r2, [pc, #228]	; (80048a8 <HAL_DMA_Abort+0x21c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d068      	beq.n	800489a <HAL_DMA_Abort+0x20e>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a37      	ldr	r2, [pc, #220]	; (80048ac <HAL_DMA_Abort+0x220>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d063      	beq.n	800489a <HAL_DMA_Abort+0x20e>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a36      	ldr	r2, [pc, #216]	; (80048b0 <HAL_DMA_Abort+0x224>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d05e      	beq.n	800489a <HAL_DMA_Abort+0x20e>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a34      	ldr	r2, [pc, #208]	; (80048b4 <HAL_DMA_Abort+0x228>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d059      	beq.n	800489a <HAL_DMA_Abort+0x20e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a33      	ldr	r2, [pc, #204]	; (80048b8 <HAL_DMA_Abort+0x22c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d054      	beq.n	800489a <HAL_DMA_Abort+0x20e>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a31      	ldr	r2, [pc, #196]	; (80048bc <HAL_DMA_Abort+0x230>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d04f      	beq.n	800489a <HAL_DMA_Abort+0x20e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a30      	ldr	r2, [pc, #192]	; (80048c0 <HAL_DMA_Abort+0x234>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d04a      	beq.n	800489a <HAL_DMA_Abort+0x20e>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a2e      	ldr	r2, [pc, #184]	; (80048c4 <HAL_DMA_Abort+0x238>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d045      	beq.n	800489a <HAL_DMA_Abort+0x20e>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a2d      	ldr	r2, [pc, #180]	; (80048c8 <HAL_DMA_Abort+0x23c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d040      	beq.n	800489a <HAL_DMA_Abort+0x20e>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a2b      	ldr	r2, [pc, #172]	; (80048cc <HAL_DMA_Abort+0x240>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d03b      	beq.n	800489a <HAL_DMA_Abort+0x20e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a2a      	ldr	r2, [pc, #168]	; (80048d0 <HAL_DMA_Abort+0x244>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d036      	beq.n	800489a <HAL_DMA_Abort+0x20e>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a28      	ldr	r2, [pc, #160]	; (80048d4 <HAL_DMA_Abort+0x248>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d031      	beq.n	800489a <HAL_DMA_Abort+0x20e>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a27      	ldr	r2, [pc, #156]	; (80048d8 <HAL_DMA_Abort+0x24c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d02c      	beq.n	800489a <HAL_DMA_Abort+0x20e>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a25      	ldr	r2, [pc, #148]	; (80048dc <HAL_DMA_Abort+0x250>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d027      	beq.n	800489a <HAL_DMA_Abort+0x20e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a24      	ldr	r2, [pc, #144]	; (80048e0 <HAL_DMA_Abort+0x254>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d022      	beq.n	800489a <HAL_DMA_Abort+0x20e>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a22      	ldr	r2, [pc, #136]	; (80048e4 <HAL_DMA_Abort+0x258>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d01d      	beq.n	800489a <HAL_DMA_Abort+0x20e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a21      	ldr	r2, [pc, #132]	; (80048e8 <HAL_DMA_Abort+0x25c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d018      	beq.n	800489a <HAL_DMA_Abort+0x20e>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a1f      	ldr	r2, [pc, #124]	; (80048ec <HAL_DMA_Abort+0x260>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d013      	beq.n	800489a <HAL_DMA_Abort+0x20e>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a1e      	ldr	r2, [pc, #120]	; (80048f0 <HAL_DMA_Abort+0x264>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d00e      	beq.n	800489a <HAL_DMA_Abort+0x20e>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a1c      	ldr	r2, [pc, #112]	; (80048f4 <HAL_DMA_Abort+0x268>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d009      	beq.n	800489a <HAL_DMA_Abort+0x20e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a1b      	ldr	r2, [pc, #108]	; (80048f8 <HAL_DMA_Abort+0x26c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d004      	beq.n	800489a <HAL_DMA_Abort+0x20e>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a19      	ldr	r2, [pc, #100]	; (80048fc <HAL_DMA_Abort+0x270>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d132      	bne.n	8004900 <HAL_DMA_Abort+0x274>
 800489a:	2301      	movs	r3, #1
 800489c:	e031      	b.n	8004902 <HAL_DMA_Abort+0x276>
 800489e:	bf00      	nop
 80048a0:	40020010 	.word	0x40020010
 80048a4:	40020028 	.word	0x40020028
 80048a8:	40020040 	.word	0x40020040
 80048ac:	40020058 	.word	0x40020058
 80048b0:	40020070 	.word	0x40020070
 80048b4:	40020088 	.word	0x40020088
 80048b8:	400200a0 	.word	0x400200a0
 80048bc:	400200b8 	.word	0x400200b8
 80048c0:	40020410 	.word	0x40020410
 80048c4:	40020428 	.word	0x40020428
 80048c8:	40020440 	.word	0x40020440
 80048cc:	40020458 	.word	0x40020458
 80048d0:	40020470 	.word	0x40020470
 80048d4:	40020488 	.word	0x40020488
 80048d8:	400204a0 	.word	0x400204a0
 80048dc:	400204b8 	.word	0x400204b8
 80048e0:	58025408 	.word	0x58025408
 80048e4:	5802541c 	.word	0x5802541c
 80048e8:	58025430 	.word	0x58025430
 80048ec:	58025444 	.word	0x58025444
 80048f0:	58025458 	.word	0x58025458
 80048f4:	5802546c 	.word	0x5802546c
 80048f8:	58025480 	.word	0x58025480
 80048fc:	58025494 	.word	0x58025494
 8004900:	2300      	movs	r3, #0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d007      	beq.n	8004916 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004914:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a6d      	ldr	r2, [pc, #436]	; (8004ad0 <HAL_DMA_Abort+0x444>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d04a      	beq.n	80049b6 <HAL_DMA_Abort+0x32a>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a6b      	ldr	r2, [pc, #428]	; (8004ad4 <HAL_DMA_Abort+0x448>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d045      	beq.n	80049b6 <HAL_DMA_Abort+0x32a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a6a      	ldr	r2, [pc, #424]	; (8004ad8 <HAL_DMA_Abort+0x44c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d040      	beq.n	80049b6 <HAL_DMA_Abort+0x32a>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a68      	ldr	r2, [pc, #416]	; (8004adc <HAL_DMA_Abort+0x450>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d03b      	beq.n	80049b6 <HAL_DMA_Abort+0x32a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a67      	ldr	r2, [pc, #412]	; (8004ae0 <HAL_DMA_Abort+0x454>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d036      	beq.n	80049b6 <HAL_DMA_Abort+0x32a>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a65      	ldr	r2, [pc, #404]	; (8004ae4 <HAL_DMA_Abort+0x458>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d031      	beq.n	80049b6 <HAL_DMA_Abort+0x32a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a64      	ldr	r2, [pc, #400]	; (8004ae8 <HAL_DMA_Abort+0x45c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d02c      	beq.n	80049b6 <HAL_DMA_Abort+0x32a>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a62      	ldr	r2, [pc, #392]	; (8004aec <HAL_DMA_Abort+0x460>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d027      	beq.n	80049b6 <HAL_DMA_Abort+0x32a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a61      	ldr	r2, [pc, #388]	; (8004af0 <HAL_DMA_Abort+0x464>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d022      	beq.n	80049b6 <HAL_DMA_Abort+0x32a>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a5f      	ldr	r2, [pc, #380]	; (8004af4 <HAL_DMA_Abort+0x468>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d01d      	beq.n	80049b6 <HAL_DMA_Abort+0x32a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a5e      	ldr	r2, [pc, #376]	; (8004af8 <HAL_DMA_Abort+0x46c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d018      	beq.n	80049b6 <HAL_DMA_Abort+0x32a>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a5c      	ldr	r2, [pc, #368]	; (8004afc <HAL_DMA_Abort+0x470>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d013      	beq.n	80049b6 <HAL_DMA_Abort+0x32a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a5b      	ldr	r2, [pc, #364]	; (8004b00 <HAL_DMA_Abort+0x474>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00e      	beq.n	80049b6 <HAL_DMA_Abort+0x32a>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a59      	ldr	r2, [pc, #356]	; (8004b04 <HAL_DMA_Abort+0x478>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d009      	beq.n	80049b6 <HAL_DMA_Abort+0x32a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a58      	ldr	r2, [pc, #352]	; (8004b08 <HAL_DMA_Abort+0x47c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d004      	beq.n	80049b6 <HAL_DMA_Abort+0x32a>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a56      	ldr	r2, [pc, #344]	; (8004b0c <HAL_DMA_Abort+0x480>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d108      	bne.n	80049c8 <HAL_DMA_Abort+0x33c>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0201 	bic.w	r2, r2, #1
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	e007      	b.n	80049d8 <HAL_DMA_Abort+0x34c>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0201 	bic.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80049d8:	e013      	b.n	8004a02 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049da:	f7fe ff99 	bl	8003910 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b05      	cmp	r3, #5
 80049e6:	d90c      	bls.n	8004a02 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2220      	movs	r2, #32
 80049ec:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2203      	movs	r2, #3
 80049fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e12d      	b.n	8004c5e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1e5      	bne.n	80049da <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a2f      	ldr	r2, [pc, #188]	; (8004ad0 <HAL_DMA_Abort+0x444>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d04a      	beq.n	8004aae <HAL_DMA_Abort+0x422>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a2d      	ldr	r2, [pc, #180]	; (8004ad4 <HAL_DMA_Abort+0x448>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d045      	beq.n	8004aae <HAL_DMA_Abort+0x422>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a2c      	ldr	r2, [pc, #176]	; (8004ad8 <HAL_DMA_Abort+0x44c>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d040      	beq.n	8004aae <HAL_DMA_Abort+0x422>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a2a      	ldr	r2, [pc, #168]	; (8004adc <HAL_DMA_Abort+0x450>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d03b      	beq.n	8004aae <HAL_DMA_Abort+0x422>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a29      	ldr	r2, [pc, #164]	; (8004ae0 <HAL_DMA_Abort+0x454>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d036      	beq.n	8004aae <HAL_DMA_Abort+0x422>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a27      	ldr	r2, [pc, #156]	; (8004ae4 <HAL_DMA_Abort+0x458>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d031      	beq.n	8004aae <HAL_DMA_Abort+0x422>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a26      	ldr	r2, [pc, #152]	; (8004ae8 <HAL_DMA_Abort+0x45c>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d02c      	beq.n	8004aae <HAL_DMA_Abort+0x422>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a24      	ldr	r2, [pc, #144]	; (8004aec <HAL_DMA_Abort+0x460>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d027      	beq.n	8004aae <HAL_DMA_Abort+0x422>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a23      	ldr	r2, [pc, #140]	; (8004af0 <HAL_DMA_Abort+0x464>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d022      	beq.n	8004aae <HAL_DMA_Abort+0x422>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a21      	ldr	r2, [pc, #132]	; (8004af4 <HAL_DMA_Abort+0x468>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d01d      	beq.n	8004aae <HAL_DMA_Abort+0x422>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a20      	ldr	r2, [pc, #128]	; (8004af8 <HAL_DMA_Abort+0x46c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d018      	beq.n	8004aae <HAL_DMA_Abort+0x422>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a1e      	ldr	r2, [pc, #120]	; (8004afc <HAL_DMA_Abort+0x470>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d013      	beq.n	8004aae <HAL_DMA_Abort+0x422>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a1d      	ldr	r2, [pc, #116]	; (8004b00 <HAL_DMA_Abort+0x474>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d00e      	beq.n	8004aae <HAL_DMA_Abort+0x422>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a1b      	ldr	r2, [pc, #108]	; (8004b04 <HAL_DMA_Abort+0x478>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d009      	beq.n	8004aae <HAL_DMA_Abort+0x422>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a1a      	ldr	r2, [pc, #104]	; (8004b08 <HAL_DMA_Abort+0x47c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d004      	beq.n	8004aae <HAL_DMA_Abort+0x422>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a18      	ldr	r2, [pc, #96]	; (8004b0c <HAL_DMA_Abort+0x480>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d101      	bne.n	8004ab2 <HAL_DMA_Abort+0x426>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e000      	b.n	8004ab4 <HAL_DMA_Abort+0x428>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d02b      	beq.n	8004b10 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac2:	f003 031f 	and.w	r3, r3, #31
 8004ac6:	223f      	movs	r2, #63	; 0x3f
 8004ac8:	409a      	lsls	r2, r3
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	609a      	str	r2, [r3, #8]
 8004ace:	e02a      	b.n	8004b26 <HAL_DMA_Abort+0x49a>
 8004ad0:	40020010 	.word	0x40020010
 8004ad4:	40020028 	.word	0x40020028
 8004ad8:	40020040 	.word	0x40020040
 8004adc:	40020058 	.word	0x40020058
 8004ae0:	40020070 	.word	0x40020070
 8004ae4:	40020088 	.word	0x40020088
 8004ae8:	400200a0 	.word	0x400200a0
 8004aec:	400200b8 	.word	0x400200b8
 8004af0:	40020410 	.word	0x40020410
 8004af4:	40020428 	.word	0x40020428
 8004af8:	40020440 	.word	0x40020440
 8004afc:	40020458 	.word	0x40020458
 8004b00:	40020470 	.word	0x40020470
 8004b04:	40020488 	.word	0x40020488
 8004b08:	400204a0 	.word	0x400204a0
 8004b0c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b14:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b1a:	f003 031f 	and.w	r3, r3, #31
 8004b1e:	2201      	movs	r2, #1
 8004b20:	409a      	lsls	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a4f      	ldr	r2, [pc, #316]	; (8004c68 <HAL_DMA_Abort+0x5dc>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d072      	beq.n	8004c16 <HAL_DMA_Abort+0x58a>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a4d      	ldr	r2, [pc, #308]	; (8004c6c <HAL_DMA_Abort+0x5e0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d06d      	beq.n	8004c16 <HAL_DMA_Abort+0x58a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a4c      	ldr	r2, [pc, #304]	; (8004c70 <HAL_DMA_Abort+0x5e4>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d068      	beq.n	8004c16 <HAL_DMA_Abort+0x58a>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a4a      	ldr	r2, [pc, #296]	; (8004c74 <HAL_DMA_Abort+0x5e8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d063      	beq.n	8004c16 <HAL_DMA_Abort+0x58a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a49      	ldr	r2, [pc, #292]	; (8004c78 <HAL_DMA_Abort+0x5ec>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d05e      	beq.n	8004c16 <HAL_DMA_Abort+0x58a>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a47      	ldr	r2, [pc, #284]	; (8004c7c <HAL_DMA_Abort+0x5f0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d059      	beq.n	8004c16 <HAL_DMA_Abort+0x58a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a46      	ldr	r2, [pc, #280]	; (8004c80 <HAL_DMA_Abort+0x5f4>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d054      	beq.n	8004c16 <HAL_DMA_Abort+0x58a>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a44      	ldr	r2, [pc, #272]	; (8004c84 <HAL_DMA_Abort+0x5f8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d04f      	beq.n	8004c16 <HAL_DMA_Abort+0x58a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a43      	ldr	r2, [pc, #268]	; (8004c88 <HAL_DMA_Abort+0x5fc>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d04a      	beq.n	8004c16 <HAL_DMA_Abort+0x58a>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a41      	ldr	r2, [pc, #260]	; (8004c8c <HAL_DMA_Abort+0x600>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d045      	beq.n	8004c16 <HAL_DMA_Abort+0x58a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a40      	ldr	r2, [pc, #256]	; (8004c90 <HAL_DMA_Abort+0x604>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d040      	beq.n	8004c16 <HAL_DMA_Abort+0x58a>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a3e      	ldr	r2, [pc, #248]	; (8004c94 <HAL_DMA_Abort+0x608>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d03b      	beq.n	8004c16 <HAL_DMA_Abort+0x58a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a3d      	ldr	r2, [pc, #244]	; (8004c98 <HAL_DMA_Abort+0x60c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d036      	beq.n	8004c16 <HAL_DMA_Abort+0x58a>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a3b      	ldr	r2, [pc, #236]	; (8004c9c <HAL_DMA_Abort+0x610>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d031      	beq.n	8004c16 <HAL_DMA_Abort+0x58a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a3a      	ldr	r2, [pc, #232]	; (8004ca0 <HAL_DMA_Abort+0x614>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d02c      	beq.n	8004c16 <HAL_DMA_Abort+0x58a>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a38      	ldr	r2, [pc, #224]	; (8004ca4 <HAL_DMA_Abort+0x618>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d027      	beq.n	8004c16 <HAL_DMA_Abort+0x58a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a37      	ldr	r2, [pc, #220]	; (8004ca8 <HAL_DMA_Abort+0x61c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d022      	beq.n	8004c16 <HAL_DMA_Abort+0x58a>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a35      	ldr	r2, [pc, #212]	; (8004cac <HAL_DMA_Abort+0x620>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d01d      	beq.n	8004c16 <HAL_DMA_Abort+0x58a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a34      	ldr	r2, [pc, #208]	; (8004cb0 <HAL_DMA_Abort+0x624>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d018      	beq.n	8004c16 <HAL_DMA_Abort+0x58a>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a32      	ldr	r2, [pc, #200]	; (8004cb4 <HAL_DMA_Abort+0x628>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d013      	beq.n	8004c16 <HAL_DMA_Abort+0x58a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a31      	ldr	r2, [pc, #196]	; (8004cb8 <HAL_DMA_Abort+0x62c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d00e      	beq.n	8004c16 <HAL_DMA_Abort+0x58a>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a2f      	ldr	r2, [pc, #188]	; (8004cbc <HAL_DMA_Abort+0x630>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d009      	beq.n	8004c16 <HAL_DMA_Abort+0x58a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a2e      	ldr	r2, [pc, #184]	; (8004cc0 <HAL_DMA_Abort+0x634>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d004      	beq.n	8004c16 <HAL_DMA_Abort+0x58a>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a2c      	ldr	r2, [pc, #176]	; (8004cc4 <HAL_DMA_Abort+0x638>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d101      	bne.n	8004c1a <HAL_DMA_Abort+0x58e>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e000      	b.n	8004c1c <HAL_DMA_Abort+0x590>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d015      	beq.n	8004c4c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004c28:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00c      	beq.n	8004c4c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c40:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c4a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40020010 	.word	0x40020010
 8004c6c:	40020028 	.word	0x40020028
 8004c70:	40020040 	.word	0x40020040
 8004c74:	40020058 	.word	0x40020058
 8004c78:	40020070 	.word	0x40020070
 8004c7c:	40020088 	.word	0x40020088
 8004c80:	400200a0 	.word	0x400200a0
 8004c84:	400200b8 	.word	0x400200b8
 8004c88:	40020410 	.word	0x40020410
 8004c8c:	40020428 	.word	0x40020428
 8004c90:	40020440 	.word	0x40020440
 8004c94:	40020458 	.word	0x40020458
 8004c98:	40020470 	.word	0x40020470
 8004c9c:	40020488 	.word	0x40020488
 8004ca0:	400204a0 	.word	0x400204a0
 8004ca4:	400204b8 	.word	0x400204b8
 8004ca8:	58025408 	.word	0x58025408
 8004cac:	5802541c 	.word	0x5802541c
 8004cb0:	58025430 	.word	0x58025430
 8004cb4:	58025444 	.word	0x58025444
 8004cb8:	58025458 	.word	0x58025458
 8004cbc:	5802546c 	.word	0x5802546c
 8004cc0:	58025480 	.word	0x58025480
 8004cc4:	58025494 	.word	0x58025494

08004cc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e205      	b.n	80050e6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d004      	beq.n	8004cf0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2280      	movs	r2, #128	; 0x80
 8004cea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e1fa      	b.n	80050e6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a8c      	ldr	r2, [pc, #560]	; (8004f28 <HAL_DMA_Abort_IT+0x260>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d04a      	beq.n	8004d90 <HAL_DMA_Abort_IT+0xc8>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a8b      	ldr	r2, [pc, #556]	; (8004f2c <HAL_DMA_Abort_IT+0x264>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d045      	beq.n	8004d90 <HAL_DMA_Abort_IT+0xc8>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a89      	ldr	r2, [pc, #548]	; (8004f30 <HAL_DMA_Abort_IT+0x268>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d040      	beq.n	8004d90 <HAL_DMA_Abort_IT+0xc8>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a88      	ldr	r2, [pc, #544]	; (8004f34 <HAL_DMA_Abort_IT+0x26c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d03b      	beq.n	8004d90 <HAL_DMA_Abort_IT+0xc8>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a86      	ldr	r2, [pc, #536]	; (8004f38 <HAL_DMA_Abort_IT+0x270>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d036      	beq.n	8004d90 <HAL_DMA_Abort_IT+0xc8>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a85      	ldr	r2, [pc, #532]	; (8004f3c <HAL_DMA_Abort_IT+0x274>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d031      	beq.n	8004d90 <HAL_DMA_Abort_IT+0xc8>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a83      	ldr	r2, [pc, #524]	; (8004f40 <HAL_DMA_Abort_IT+0x278>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d02c      	beq.n	8004d90 <HAL_DMA_Abort_IT+0xc8>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a82      	ldr	r2, [pc, #520]	; (8004f44 <HAL_DMA_Abort_IT+0x27c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d027      	beq.n	8004d90 <HAL_DMA_Abort_IT+0xc8>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a80      	ldr	r2, [pc, #512]	; (8004f48 <HAL_DMA_Abort_IT+0x280>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d022      	beq.n	8004d90 <HAL_DMA_Abort_IT+0xc8>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a7f      	ldr	r2, [pc, #508]	; (8004f4c <HAL_DMA_Abort_IT+0x284>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d01d      	beq.n	8004d90 <HAL_DMA_Abort_IT+0xc8>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a7d      	ldr	r2, [pc, #500]	; (8004f50 <HAL_DMA_Abort_IT+0x288>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d018      	beq.n	8004d90 <HAL_DMA_Abort_IT+0xc8>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a7c      	ldr	r2, [pc, #496]	; (8004f54 <HAL_DMA_Abort_IT+0x28c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d013      	beq.n	8004d90 <HAL_DMA_Abort_IT+0xc8>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a7a      	ldr	r2, [pc, #488]	; (8004f58 <HAL_DMA_Abort_IT+0x290>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d00e      	beq.n	8004d90 <HAL_DMA_Abort_IT+0xc8>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a79      	ldr	r2, [pc, #484]	; (8004f5c <HAL_DMA_Abort_IT+0x294>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d009      	beq.n	8004d90 <HAL_DMA_Abort_IT+0xc8>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a77      	ldr	r2, [pc, #476]	; (8004f60 <HAL_DMA_Abort_IT+0x298>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d004      	beq.n	8004d90 <HAL_DMA_Abort_IT+0xc8>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a76      	ldr	r2, [pc, #472]	; (8004f64 <HAL_DMA_Abort_IT+0x29c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d101      	bne.n	8004d94 <HAL_DMA_Abort_IT+0xcc>
 8004d90:	2301      	movs	r3, #1
 8004d92:	e000      	b.n	8004d96 <HAL_DMA_Abort_IT+0xce>
 8004d94:	2300      	movs	r3, #0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d065      	beq.n	8004e66 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2204      	movs	r2, #4
 8004d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a60      	ldr	r2, [pc, #384]	; (8004f28 <HAL_DMA_Abort_IT+0x260>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d04a      	beq.n	8004e42 <HAL_DMA_Abort_IT+0x17a>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a5e      	ldr	r2, [pc, #376]	; (8004f2c <HAL_DMA_Abort_IT+0x264>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d045      	beq.n	8004e42 <HAL_DMA_Abort_IT+0x17a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a5d      	ldr	r2, [pc, #372]	; (8004f30 <HAL_DMA_Abort_IT+0x268>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d040      	beq.n	8004e42 <HAL_DMA_Abort_IT+0x17a>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a5b      	ldr	r2, [pc, #364]	; (8004f34 <HAL_DMA_Abort_IT+0x26c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d03b      	beq.n	8004e42 <HAL_DMA_Abort_IT+0x17a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a5a      	ldr	r2, [pc, #360]	; (8004f38 <HAL_DMA_Abort_IT+0x270>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d036      	beq.n	8004e42 <HAL_DMA_Abort_IT+0x17a>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a58      	ldr	r2, [pc, #352]	; (8004f3c <HAL_DMA_Abort_IT+0x274>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d031      	beq.n	8004e42 <HAL_DMA_Abort_IT+0x17a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a57      	ldr	r2, [pc, #348]	; (8004f40 <HAL_DMA_Abort_IT+0x278>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d02c      	beq.n	8004e42 <HAL_DMA_Abort_IT+0x17a>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a55      	ldr	r2, [pc, #340]	; (8004f44 <HAL_DMA_Abort_IT+0x27c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d027      	beq.n	8004e42 <HAL_DMA_Abort_IT+0x17a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a54      	ldr	r2, [pc, #336]	; (8004f48 <HAL_DMA_Abort_IT+0x280>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d022      	beq.n	8004e42 <HAL_DMA_Abort_IT+0x17a>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a52      	ldr	r2, [pc, #328]	; (8004f4c <HAL_DMA_Abort_IT+0x284>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d01d      	beq.n	8004e42 <HAL_DMA_Abort_IT+0x17a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a51      	ldr	r2, [pc, #324]	; (8004f50 <HAL_DMA_Abort_IT+0x288>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d018      	beq.n	8004e42 <HAL_DMA_Abort_IT+0x17a>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a4f      	ldr	r2, [pc, #316]	; (8004f54 <HAL_DMA_Abort_IT+0x28c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d013      	beq.n	8004e42 <HAL_DMA_Abort_IT+0x17a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a4e      	ldr	r2, [pc, #312]	; (8004f58 <HAL_DMA_Abort_IT+0x290>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00e      	beq.n	8004e42 <HAL_DMA_Abort_IT+0x17a>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a4c      	ldr	r2, [pc, #304]	; (8004f5c <HAL_DMA_Abort_IT+0x294>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d009      	beq.n	8004e42 <HAL_DMA_Abort_IT+0x17a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a4b      	ldr	r2, [pc, #300]	; (8004f60 <HAL_DMA_Abort_IT+0x298>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d004      	beq.n	8004e42 <HAL_DMA_Abort_IT+0x17a>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a49      	ldr	r2, [pc, #292]	; (8004f64 <HAL_DMA_Abort_IT+0x29c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d108      	bne.n	8004e54 <HAL_DMA_Abort_IT+0x18c>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0201 	bic.w	r2, r2, #1
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	e147      	b.n	80050e4 <HAL_DMA_Abort_IT+0x41c>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0201 	bic.w	r2, r2, #1
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	e13e      	b.n	80050e4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 020e 	bic.w	r2, r2, #14
 8004e74:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a2b      	ldr	r2, [pc, #172]	; (8004f28 <HAL_DMA_Abort_IT+0x260>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d04a      	beq.n	8004f16 <HAL_DMA_Abort_IT+0x24e>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a29      	ldr	r2, [pc, #164]	; (8004f2c <HAL_DMA_Abort_IT+0x264>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d045      	beq.n	8004f16 <HAL_DMA_Abort_IT+0x24e>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a28      	ldr	r2, [pc, #160]	; (8004f30 <HAL_DMA_Abort_IT+0x268>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d040      	beq.n	8004f16 <HAL_DMA_Abort_IT+0x24e>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a26      	ldr	r2, [pc, #152]	; (8004f34 <HAL_DMA_Abort_IT+0x26c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d03b      	beq.n	8004f16 <HAL_DMA_Abort_IT+0x24e>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a25      	ldr	r2, [pc, #148]	; (8004f38 <HAL_DMA_Abort_IT+0x270>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d036      	beq.n	8004f16 <HAL_DMA_Abort_IT+0x24e>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a23      	ldr	r2, [pc, #140]	; (8004f3c <HAL_DMA_Abort_IT+0x274>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d031      	beq.n	8004f16 <HAL_DMA_Abort_IT+0x24e>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a22      	ldr	r2, [pc, #136]	; (8004f40 <HAL_DMA_Abort_IT+0x278>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d02c      	beq.n	8004f16 <HAL_DMA_Abort_IT+0x24e>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a20      	ldr	r2, [pc, #128]	; (8004f44 <HAL_DMA_Abort_IT+0x27c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d027      	beq.n	8004f16 <HAL_DMA_Abort_IT+0x24e>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a1f      	ldr	r2, [pc, #124]	; (8004f48 <HAL_DMA_Abort_IT+0x280>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d022      	beq.n	8004f16 <HAL_DMA_Abort_IT+0x24e>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a1d      	ldr	r2, [pc, #116]	; (8004f4c <HAL_DMA_Abort_IT+0x284>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d01d      	beq.n	8004f16 <HAL_DMA_Abort_IT+0x24e>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a1c      	ldr	r2, [pc, #112]	; (8004f50 <HAL_DMA_Abort_IT+0x288>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d018      	beq.n	8004f16 <HAL_DMA_Abort_IT+0x24e>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1a      	ldr	r2, [pc, #104]	; (8004f54 <HAL_DMA_Abort_IT+0x28c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d013      	beq.n	8004f16 <HAL_DMA_Abort_IT+0x24e>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a19      	ldr	r2, [pc, #100]	; (8004f58 <HAL_DMA_Abort_IT+0x290>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d00e      	beq.n	8004f16 <HAL_DMA_Abort_IT+0x24e>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a17      	ldr	r2, [pc, #92]	; (8004f5c <HAL_DMA_Abort_IT+0x294>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d009      	beq.n	8004f16 <HAL_DMA_Abort_IT+0x24e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a16      	ldr	r2, [pc, #88]	; (8004f60 <HAL_DMA_Abort_IT+0x298>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d004      	beq.n	8004f16 <HAL_DMA_Abort_IT+0x24e>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a14      	ldr	r2, [pc, #80]	; (8004f64 <HAL_DMA_Abort_IT+0x29c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d128      	bne.n	8004f68 <HAL_DMA_Abort_IT+0x2a0>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0201 	bic.w	r2, r2, #1
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	e027      	b.n	8004f78 <HAL_DMA_Abort_IT+0x2b0>
 8004f28:	40020010 	.word	0x40020010
 8004f2c:	40020028 	.word	0x40020028
 8004f30:	40020040 	.word	0x40020040
 8004f34:	40020058 	.word	0x40020058
 8004f38:	40020070 	.word	0x40020070
 8004f3c:	40020088 	.word	0x40020088
 8004f40:	400200a0 	.word	0x400200a0
 8004f44:	400200b8 	.word	0x400200b8
 8004f48:	40020410 	.word	0x40020410
 8004f4c:	40020428 	.word	0x40020428
 8004f50:	40020440 	.word	0x40020440
 8004f54:	40020458 	.word	0x40020458
 8004f58:	40020470 	.word	0x40020470
 8004f5c:	40020488 	.word	0x40020488
 8004f60:	400204a0 	.word	0x400204a0
 8004f64:	400204b8 	.word	0x400204b8
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0201 	bic.w	r2, r2, #1
 8004f76:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a5c      	ldr	r2, [pc, #368]	; (80050f0 <HAL_DMA_Abort_IT+0x428>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d072      	beq.n	8005068 <HAL_DMA_Abort_IT+0x3a0>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a5b      	ldr	r2, [pc, #364]	; (80050f4 <HAL_DMA_Abort_IT+0x42c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d06d      	beq.n	8005068 <HAL_DMA_Abort_IT+0x3a0>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a59      	ldr	r2, [pc, #356]	; (80050f8 <HAL_DMA_Abort_IT+0x430>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d068      	beq.n	8005068 <HAL_DMA_Abort_IT+0x3a0>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a58      	ldr	r2, [pc, #352]	; (80050fc <HAL_DMA_Abort_IT+0x434>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d063      	beq.n	8005068 <HAL_DMA_Abort_IT+0x3a0>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a56      	ldr	r2, [pc, #344]	; (8005100 <HAL_DMA_Abort_IT+0x438>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d05e      	beq.n	8005068 <HAL_DMA_Abort_IT+0x3a0>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a55      	ldr	r2, [pc, #340]	; (8005104 <HAL_DMA_Abort_IT+0x43c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d059      	beq.n	8005068 <HAL_DMA_Abort_IT+0x3a0>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a53      	ldr	r2, [pc, #332]	; (8005108 <HAL_DMA_Abort_IT+0x440>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d054      	beq.n	8005068 <HAL_DMA_Abort_IT+0x3a0>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a52      	ldr	r2, [pc, #328]	; (800510c <HAL_DMA_Abort_IT+0x444>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d04f      	beq.n	8005068 <HAL_DMA_Abort_IT+0x3a0>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a50      	ldr	r2, [pc, #320]	; (8005110 <HAL_DMA_Abort_IT+0x448>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d04a      	beq.n	8005068 <HAL_DMA_Abort_IT+0x3a0>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a4f      	ldr	r2, [pc, #316]	; (8005114 <HAL_DMA_Abort_IT+0x44c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d045      	beq.n	8005068 <HAL_DMA_Abort_IT+0x3a0>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a4d      	ldr	r2, [pc, #308]	; (8005118 <HAL_DMA_Abort_IT+0x450>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d040      	beq.n	8005068 <HAL_DMA_Abort_IT+0x3a0>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a4c      	ldr	r2, [pc, #304]	; (800511c <HAL_DMA_Abort_IT+0x454>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d03b      	beq.n	8005068 <HAL_DMA_Abort_IT+0x3a0>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a4a      	ldr	r2, [pc, #296]	; (8005120 <HAL_DMA_Abort_IT+0x458>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d036      	beq.n	8005068 <HAL_DMA_Abort_IT+0x3a0>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a49      	ldr	r2, [pc, #292]	; (8005124 <HAL_DMA_Abort_IT+0x45c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d031      	beq.n	8005068 <HAL_DMA_Abort_IT+0x3a0>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a47      	ldr	r2, [pc, #284]	; (8005128 <HAL_DMA_Abort_IT+0x460>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d02c      	beq.n	8005068 <HAL_DMA_Abort_IT+0x3a0>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a46      	ldr	r2, [pc, #280]	; (800512c <HAL_DMA_Abort_IT+0x464>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d027      	beq.n	8005068 <HAL_DMA_Abort_IT+0x3a0>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a44      	ldr	r2, [pc, #272]	; (8005130 <HAL_DMA_Abort_IT+0x468>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d022      	beq.n	8005068 <HAL_DMA_Abort_IT+0x3a0>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a43      	ldr	r2, [pc, #268]	; (8005134 <HAL_DMA_Abort_IT+0x46c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d01d      	beq.n	8005068 <HAL_DMA_Abort_IT+0x3a0>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a41      	ldr	r2, [pc, #260]	; (8005138 <HAL_DMA_Abort_IT+0x470>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d018      	beq.n	8005068 <HAL_DMA_Abort_IT+0x3a0>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a40      	ldr	r2, [pc, #256]	; (800513c <HAL_DMA_Abort_IT+0x474>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d013      	beq.n	8005068 <HAL_DMA_Abort_IT+0x3a0>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a3e      	ldr	r2, [pc, #248]	; (8005140 <HAL_DMA_Abort_IT+0x478>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00e      	beq.n	8005068 <HAL_DMA_Abort_IT+0x3a0>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a3d      	ldr	r2, [pc, #244]	; (8005144 <HAL_DMA_Abort_IT+0x47c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d009      	beq.n	8005068 <HAL_DMA_Abort_IT+0x3a0>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a3b      	ldr	r2, [pc, #236]	; (8005148 <HAL_DMA_Abort_IT+0x480>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d004      	beq.n	8005068 <HAL_DMA_Abort_IT+0x3a0>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a3a      	ldr	r2, [pc, #232]	; (800514c <HAL_DMA_Abort_IT+0x484>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d101      	bne.n	800506c <HAL_DMA_Abort_IT+0x3a4>
 8005068:	2301      	movs	r3, #1
 800506a:	e000      	b.n	800506e <HAL_DMA_Abort_IT+0x3a6>
 800506c:	2300      	movs	r3, #0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d028      	beq.n	80050c4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800507c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005080:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005086:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508c:	f003 031f 	and.w	r3, r3, #31
 8005090:	2201      	movs	r2, #1
 8005092:	409a      	lsls	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80050a0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00c      	beq.n	80050c4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050b8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80050c2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40020010 	.word	0x40020010
 80050f4:	40020028 	.word	0x40020028
 80050f8:	40020040 	.word	0x40020040
 80050fc:	40020058 	.word	0x40020058
 8005100:	40020070 	.word	0x40020070
 8005104:	40020088 	.word	0x40020088
 8005108:	400200a0 	.word	0x400200a0
 800510c:	400200b8 	.word	0x400200b8
 8005110:	40020410 	.word	0x40020410
 8005114:	40020428 	.word	0x40020428
 8005118:	40020440 	.word	0x40020440
 800511c:	40020458 	.word	0x40020458
 8005120:	40020470 	.word	0x40020470
 8005124:	40020488 	.word	0x40020488
 8005128:	400204a0 	.word	0x400204a0
 800512c:	400204b8 	.word	0x400204b8
 8005130:	58025408 	.word	0x58025408
 8005134:	5802541c 	.word	0x5802541c
 8005138:	58025430 	.word	0x58025430
 800513c:	58025444 	.word	0x58025444
 8005140:	58025458 	.word	0x58025458
 8005144:	5802546c 	.word	0x5802546c
 8005148:	58025480 	.word	0x58025480
 800514c:	58025494 	.word	0x58025494

08005150 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b08a      	sub	sp, #40	; 0x28
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005158:	2300      	movs	r3, #0
 800515a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800515c:	4b67      	ldr	r3, [pc, #412]	; (80052fc <HAL_DMA_IRQHandler+0x1ac>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a67      	ldr	r2, [pc, #412]	; (8005300 <HAL_DMA_IRQHandler+0x1b0>)
 8005162:	fba2 2303 	umull	r2, r3, r2, r3
 8005166:	0a9b      	lsrs	r3, r3, #10
 8005168:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005174:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a5f      	ldr	r2, [pc, #380]	; (8005304 <HAL_DMA_IRQHandler+0x1b4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d04a      	beq.n	8005222 <HAL_DMA_IRQHandler+0xd2>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a5d      	ldr	r2, [pc, #372]	; (8005308 <HAL_DMA_IRQHandler+0x1b8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d045      	beq.n	8005222 <HAL_DMA_IRQHandler+0xd2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a5c      	ldr	r2, [pc, #368]	; (800530c <HAL_DMA_IRQHandler+0x1bc>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d040      	beq.n	8005222 <HAL_DMA_IRQHandler+0xd2>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a5a      	ldr	r2, [pc, #360]	; (8005310 <HAL_DMA_IRQHandler+0x1c0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d03b      	beq.n	8005222 <HAL_DMA_IRQHandler+0xd2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a59      	ldr	r2, [pc, #356]	; (8005314 <HAL_DMA_IRQHandler+0x1c4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d036      	beq.n	8005222 <HAL_DMA_IRQHandler+0xd2>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a57      	ldr	r2, [pc, #348]	; (8005318 <HAL_DMA_IRQHandler+0x1c8>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d031      	beq.n	8005222 <HAL_DMA_IRQHandler+0xd2>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a56      	ldr	r2, [pc, #344]	; (800531c <HAL_DMA_IRQHandler+0x1cc>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d02c      	beq.n	8005222 <HAL_DMA_IRQHandler+0xd2>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a54      	ldr	r2, [pc, #336]	; (8005320 <HAL_DMA_IRQHandler+0x1d0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d027      	beq.n	8005222 <HAL_DMA_IRQHandler+0xd2>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a53      	ldr	r2, [pc, #332]	; (8005324 <HAL_DMA_IRQHandler+0x1d4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d022      	beq.n	8005222 <HAL_DMA_IRQHandler+0xd2>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a51      	ldr	r2, [pc, #324]	; (8005328 <HAL_DMA_IRQHandler+0x1d8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d01d      	beq.n	8005222 <HAL_DMA_IRQHandler+0xd2>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a50      	ldr	r2, [pc, #320]	; (800532c <HAL_DMA_IRQHandler+0x1dc>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d018      	beq.n	8005222 <HAL_DMA_IRQHandler+0xd2>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a4e      	ldr	r2, [pc, #312]	; (8005330 <HAL_DMA_IRQHandler+0x1e0>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d013      	beq.n	8005222 <HAL_DMA_IRQHandler+0xd2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a4d      	ldr	r2, [pc, #308]	; (8005334 <HAL_DMA_IRQHandler+0x1e4>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d00e      	beq.n	8005222 <HAL_DMA_IRQHandler+0xd2>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a4b      	ldr	r2, [pc, #300]	; (8005338 <HAL_DMA_IRQHandler+0x1e8>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d009      	beq.n	8005222 <HAL_DMA_IRQHandler+0xd2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a4a      	ldr	r2, [pc, #296]	; (800533c <HAL_DMA_IRQHandler+0x1ec>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d004      	beq.n	8005222 <HAL_DMA_IRQHandler+0xd2>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a48      	ldr	r2, [pc, #288]	; (8005340 <HAL_DMA_IRQHandler+0x1f0>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d101      	bne.n	8005226 <HAL_DMA_IRQHandler+0xd6>
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <HAL_DMA_IRQHandler+0xd8>
 8005226:	2300      	movs	r3, #0
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 842b 	beq.w	8005a84 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005232:	f003 031f 	and.w	r3, r3, #31
 8005236:	2208      	movs	r2, #8
 8005238:	409a      	lsls	r2, r3
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	4013      	ands	r3, r2
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 80a2 	beq.w	8005388 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a2e      	ldr	r2, [pc, #184]	; (8005304 <HAL_DMA_IRQHandler+0x1b4>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d04a      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x194>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a2d      	ldr	r2, [pc, #180]	; (8005308 <HAL_DMA_IRQHandler+0x1b8>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d045      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x194>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a2b      	ldr	r2, [pc, #172]	; (800530c <HAL_DMA_IRQHandler+0x1bc>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d040      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x194>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a2a      	ldr	r2, [pc, #168]	; (8005310 <HAL_DMA_IRQHandler+0x1c0>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d03b      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x194>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a28      	ldr	r2, [pc, #160]	; (8005314 <HAL_DMA_IRQHandler+0x1c4>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d036      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x194>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a27      	ldr	r2, [pc, #156]	; (8005318 <HAL_DMA_IRQHandler+0x1c8>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d031      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x194>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a25      	ldr	r2, [pc, #148]	; (800531c <HAL_DMA_IRQHandler+0x1cc>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d02c      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x194>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a24      	ldr	r2, [pc, #144]	; (8005320 <HAL_DMA_IRQHandler+0x1d0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d027      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x194>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a22      	ldr	r2, [pc, #136]	; (8005324 <HAL_DMA_IRQHandler+0x1d4>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d022      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x194>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a21      	ldr	r2, [pc, #132]	; (8005328 <HAL_DMA_IRQHandler+0x1d8>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d01d      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x194>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a1f      	ldr	r2, [pc, #124]	; (800532c <HAL_DMA_IRQHandler+0x1dc>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d018      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x194>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a1e      	ldr	r2, [pc, #120]	; (8005330 <HAL_DMA_IRQHandler+0x1e0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d013      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x194>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a1c      	ldr	r2, [pc, #112]	; (8005334 <HAL_DMA_IRQHandler+0x1e4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00e      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x194>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a1b      	ldr	r2, [pc, #108]	; (8005338 <HAL_DMA_IRQHandler+0x1e8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d009      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x194>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a19      	ldr	r2, [pc, #100]	; (800533c <HAL_DMA_IRQHandler+0x1ec>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d004      	beq.n	80052e4 <HAL_DMA_IRQHandler+0x194>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a18      	ldr	r2, [pc, #96]	; (8005340 <HAL_DMA_IRQHandler+0x1f0>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d12f      	bne.n	8005344 <HAL_DMA_IRQHandler+0x1f4>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	bf14      	ite	ne
 80052f2:	2301      	movne	r3, #1
 80052f4:	2300      	moveq	r3, #0
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	e02e      	b.n	8005358 <HAL_DMA_IRQHandler+0x208>
 80052fa:	bf00      	nop
 80052fc:	20000000 	.word	0x20000000
 8005300:	1b4e81b5 	.word	0x1b4e81b5
 8005304:	40020010 	.word	0x40020010
 8005308:	40020028 	.word	0x40020028
 800530c:	40020040 	.word	0x40020040
 8005310:	40020058 	.word	0x40020058
 8005314:	40020070 	.word	0x40020070
 8005318:	40020088 	.word	0x40020088
 800531c:	400200a0 	.word	0x400200a0
 8005320:	400200b8 	.word	0x400200b8
 8005324:	40020410 	.word	0x40020410
 8005328:	40020428 	.word	0x40020428
 800532c:	40020440 	.word	0x40020440
 8005330:	40020458 	.word	0x40020458
 8005334:	40020470 	.word	0x40020470
 8005338:	40020488 	.word	0x40020488
 800533c:	400204a0 	.word	0x400204a0
 8005340:	400204b8 	.word	0x400204b8
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0308 	and.w	r3, r3, #8
 800534e:	2b00      	cmp	r3, #0
 8005350:	bf14      	ite	ne
 8005352:	2301      	movne	r3, #1
 8005354:	2300      	moveq	r3, #0
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d015      	beq.n	8005388 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0204 	bic.w	r2, r2, #4
 800536a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005370:	f003 031f 	and.w	r3, r3, #31
 8005374:	2208      	movs	r2, #8
 8005376:	409a      	lsls	r2, r3
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005380:	f043 0201 	orr.w	r2, r3, #1
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800538c:	f003 031f 	and.w	r3, r3, #31
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	fa22 f303 	lsr.w	r3, r2, r3
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d06e      	beq.n	800547c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a69      	ldr	r2, [pc, #420]	; (8005548 <HAL_DMA_IRQHandler+0x3f8>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d04a      	beq.n	800543e <HAL_DMA_IRQHandler+0x2ee>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a67      	ldr	r2, [pc, #412]	; (800554c <HAL_DMA_IRQHandler+0x3fc>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d045      	beq.n	800543e <HAL_DMA_IRQHandler+0x2ee>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a66      	ldr	r2, [pc, #408]	; (8005550 <HAL_DMA_IRQHandler+0x400>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d040      	beq.n	800543e <HAL_DMA_IRQHandler+0x2ee>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a64      	ldr	r2, [pc, #400]	; (8005554 <HAL_DMA_IRQHandler+0x404>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d03b      	beq.n	800543e <HAL_DMA_IRQHandler+0x2ee>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a63      	ldr	r2, [pc, #396]	; (8005558 <HAL_DMA_IRQHandler+0x408>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d036      	beq.n	800543e <HAL_DMA_IRQHandler+0x2ee>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a61      	ldr	r2, [pc, #388]	; (800555c <HAL_DMA_IRQHandler+0x40c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d031      	beq.n	800543e <HAL_DMA_IRQHandler+0x2ee>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a60      	ldr	r2, [pc, #384]	; (8005560 <HAL_DMA_IRQHandler+0x410>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d02c      	beq.n	800543e <HAL_DMA_IRQHandler+0x2ee>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a5e      	ldr	r2, [pc, #376]	; (8005564 <HAL_DMA_IRQHandler+0x414>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d027      	beq.n	800543e <HAL_DMA_IRQHandler+0x2ee>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a5d      	ldr	r2, [pc, #372]	; (8005568 <HAL_DMA_IRQHandler+0x418>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d022      	beq.n	800543e <HAL_DMA_IRQHandler+0x2ee>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a5b      	ldr	r2, [pc, #364]	; (800556c <HAL_DMA_IRQHandler+0x41c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d01d      	beq.n	800543e <HAL_DMA_IRQHandler+0x2ee>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a5a      	ldr	r2, [pc, #360]	; (8005570 <HAL_DMA_IRQHandler+0x420>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d018      	beq.n	800543e <HAL_DMA_IRQHandler+0x2ee>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a58      	ldr	r2, [pc, #352]	; (8005574 <HAL_DMA_IRQHandler+0x424>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d013      	beq.n	800543e <HAL_DMA_IRQHandler+0x2ee>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a57      	ldr	r2, [pc, #348]	; (8005578 <HAL_DMA_IRQHandler+0x428>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00e      	beq.n	800543e <HAL_DMA_IRQHandler+0x2ee>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a55      	ldr	r2, [pc, #340]	; (800557c <HAL_DMA_IRQHandler+0x42c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d009      	beq.n	800543e <HAL_DMA_IRQHandler+0x2ee>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a54      	ldr	r2, [pc, #336]	; (8005580 <HAL_DMA_IRQHandler+0x430>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d004      	beq.n	800543e <HAL_DMA_IRQHandler+0x2ee>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a52      	ldr	r2, [pc, #328]	; (8005584 <HAL_DMA_IRQHandler+0x434>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d10a      	bne.n	8005454 <HAL_DMA_IRQHandler+0x304>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005448:	2b00      	cmp	r3, #0
 800544a:	bf14      	ite	ne
 800544c:	2301      	movne	r3, #1
 800544e:	2300      	moveq	r3, #0
 8005450:	b2db      	uxtb	r3, r3
 8005452:	e003      	b.n	800545c <HAL_DMA_IRQHandler+0x30c>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2300      	movs	r3, #0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00d      	beq.n	800547c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005464:	f003 031f 	and.w	r3, r3, #31
 8005468:	2201      	movs	r2, #1
 800546a:	409a      	lsls	r2, r3
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005474:	f043 0202 	orr.w	r2, r3, #2
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005480:	f003 031f 	and.w	r3, r3, #31
 8005484:	2204      	movs	r2, #4
 8005486:	409a      	lsls	r2, r3
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	4013      	ands	r3, r2
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 808f 	beq.w	80055b0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a2c      	ldr	r2, [pc, #176]	; (8005548 <HAL_DMA_IRQHandler+0x3f8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d04a      	beq.n	8005532 <HAL_DMA_IRQHandler+0x3e2>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a2a      	ldr	r2, [pc, #168]	; (800554c <HAL_DMA_IRQHandler+0x3fc>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d045      	beq.n	8005532 <HAL_DMA_IRQHandler+0x3e2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a29      	ldr	r2, [pc, #164]	; (8005550 <HAL_DMA_IRQHandler+0x400>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d040      	beq.n	8005532 <HAL_DMA_IRQHandler+0x3e2>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a27      	ldr	r2, [pc, #156]	; (8005554 <HAL_DMA_IRQHandler+0x404>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d03b      	beq.n	8005532 <HAL_DMA_IRQHandler+0x3e2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a26      	ldr	r2, [pc, #152]	; (8005558 <HAL_DMA_IRQHandler+0x408>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d036      	beq.n	8005532 <HAL_DMA_IRQHandler+0x3e2>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a24      	ldr	r2, [pc, #144]	; (800555c <HAL_DMA_IRQHandler+0x40c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d031      	beq.n	8005532 <HAL_DMA_IRQHandler+0x3e2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a23      	ldr	r2, [pc, #140]	; (8005560 <HAL_DMA_IRQHandler+0x410>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d02c      	beq.n	8005532 <HAL_DMA_IRQHandler+0x3e2>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a21      	ldr	r2, [pc, #132]	; (8005564 <HAL_DMA_IRQHandler+0x414>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d027      	beq.n	8005532 <HAL_DMA_IRQHandler+0x3e2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a20      	ldr	r2, [pc, #128]	; (8005568 <HAL_DMA_IRQHandler+0x418>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d022      	beq.n	8005532 <HAL_DMA_IRQHandler+0x3e2>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1e      	ldr	r2, [pc, #120]	; (800556c <HAL_DMA_IRQHandler+0x41c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d01d      	beq.n	8005532 <HAL_DMA_IRQHandler+0x3e2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a1d      	ldr	r2, [pc, #116]	; (8005570 <HAL_DMA_IRQHandler+0x420>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d018      	beq.n	8005532 <HAL_DMA_IRQHandler+0x3e2>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a1b      	ldr	r2, [pc, #108]	; (8005574 <HAL_DMA_IRQHandler+0x424>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d013      	beq.n	8005532 <HAL_DMA_IRQHandler+0x3e2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a1a      	ldr	r2, [pc, #104]	; (8005578 <HAL_DMA_IRQHandler+0x428>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00e      	beq.n	8005532 <HAL_DMA_IRQHandler+0x3e2>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a18      	ldr	r2, [pc, #96]	; (800557c <HAL_DMA_IRQHandler+0x42c>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d009      	beq.n	8005532 <HAL_DMA_IRQHandler+0x3e2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a17      	ldr	r2, [pc, #92]	; (8005580 <HAL_DMA_IRQHandler+0x430>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d004      	beq.n	8005532 <HAL_DMA_IRQHandler+0x3e2>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a15      	ldr	r2, [pc, #84]	; (8005584 <HAL_DMA_IRQHandler+0x434>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d12a      	bne.n	8005588 <HAL_DMA_IRQHandler+0x438>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b00      	cmp	r3, #0
 800553e:	bf14      	ite	ne
 8005540:	2301      	movne	r3, #1
 8005542:	2300      	moveq	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	e023      	b.n	8005590 <HAL_DMA_IRQHandler+0x440>
 8005548:	40020010 	.word	0x40020010
 800554c:	40020028 	.word	0x40020028
 8005550:	40020040 	.word	0x40020040
 8005554:	40020058 	.word	0x40020058
 8005558:	40020070 	.word	0x40020070
 800555c:	40020088 	.word	0x40020088
 8005560:	400200a0 	.word	0x400200a0
 8005564:	400200b8 	.word	0x400200b8
 8005568:	40020410 	.word	0x40020410
 800556c:	40020428 	.word	0x40020428
 8005570:	40020440 	.word	0x40020440
 8005574:	40020458 	.word	0x40020458
 8005578:	40020470 	.word	0x40020470
 800557c:	40020488 	.word	0x40020488
 8005580:	400204a0 	.word	0x400204a0
 8005584:	400204b8 	.word	0x400204b8
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2300      	movs	r3, #0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00d      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005598:	f003 031f 	and.w	r3, r3, #31
 800559c:	2204      	movs	r2, #4
 800559e:	409a      	lsls	r2, r3
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a8:	f043 0204 	orr.w	r2, r3, #4
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b4:	f003 031f 	and.w	r3, r3, #31
 80055b8:	2210      	movs	r2, #16
 80055ba:	409a      	lsls	r2, r3
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	4013      	ands	r3, r2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 80a6 	beq.w	8005712 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a85      	ldr	r2, [pc, #532]	; (80057e0 <HAL_DMA_IRQHandler+0x690>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d04a      	beq.n	8005666 <HAL_DMA_IRQHandler+0x516>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a83      	ldr	r2, [pc, #524]	; (80057e4 <HAL_DMA_IRQHandler+0x694>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d045      	beq.n	8005666 <HAL_DMA_IRQHandler+0x516>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a82      	ldr	r2, [pc, #520]	; (80057e8 <HAL_DMA_IRQHandler+0x698>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d040      	beq.n	8005666 <HAL_DMA_IRQHandler+0x516>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a80      	ldr	r2, [pc, #512]	; (80057ec <HAL_DMA_IRQHandler+0x69c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d03b      	beq.n	8005666 <HAL_DMA_IRQHandler+0x516>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a7f      	ldr	r2, [pc, #508]	; (80057f0 <HAL_DMA_IRQHandler+0x6a0>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d036      	beq.n	8005666 <HAL_DMA_IRQHandler+0x516>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a7d      	ldr	r2, [pc, #500]	; (80057f4 <HAL_DMA_IRQHandler+0x6a4>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d031      	beq.n	8005666 <HAL_DMA_IRQHandler+0x516>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a7c      	ldr	r2, [pc, #496]	; (80057f8 <HAL_DMA_IRQHandler+0x6a8>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d02c      	beq.n	8005666 <HAL_DMA_IRQHandler+0x516>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a7a      	ldr	r2, [pc, #488]	; (80057fc <HAL_DMA_IRQHandler+0x6ac>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d027      	beq.n	8005666 <HAL_DMA_IRQHandler+0x516>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a79      	ldr	r2, [pc, #484]	; (8005800 <HAL_DMA_IRQHandler+0x6b0>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d022      	beq.n	8005666 <HAL_DMA_IRQHandler+0x516>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a77      	ldr	r2, [pc, #476]	; (8005804 <HAL_DMA_IRQHandler+0x6b4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d01d      	beq.n	8005666 <HAL_DMA_IRQHandler+0x516>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a76      	ldr	r2, [pc, #472]	; (8005808 <HAL_DMA_IRQHandler+0x6b8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d018      	beq.n	8005666 <HAL_DMA_IRQHandler+0x516>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a74      	ldr	r2, [pc, #464]	; (800580c <HAL_DMA_IRQHandler+0x6bc>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d013      	beq.n	8005666 <HAL_DMA_IRQHandler+0x516>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a73      	ldr	r2, [pc, #460]	; (8005810 <HAL_DMA_IRQHandler+0x6c0>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00e      	beq.n	8005666 <HAL_DMA_IRQHandler+0x516>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a71      	ldr	r2, [pc, #452]	; (8005814 <HAL_DMA_IRQHandler+0x6c4>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d009      	beq.n	8005666 <HAL_DMA_IRQHandler+0x516>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a70      	ldr	r2, [pc, #448]	; (8005818 <HAL_DMA_IRQHandler+0x6c8>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d004      	beq.n	8005666 <HAL_DMA_IRQHandler+0x516>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a6e      	ldr	r2, [pc, #440]	; (800581c <HAL_DMA_IRQHandler+0x6cc>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d10a      	bne.n	800567c <HAL_DMA_IRQHandler+0x52c>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0308 	and.w	r3, r3, #8
 8005670:	2b00      	cmp	r3, #0
 8005672:	bf14      	ite	ne
 8005674:	2301      	movne	r3, #1
 8005676:	2300      	moveq	r3, #0
 8005678:	b2db      	uxtb	r3, r3
 800567a:	e009      	b.n	8005690 <HAL_DMA_IRQHandler+0x540>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0304 	and.w	r3, r3, #4
 8005686:	2b00      	cmp	r3, #0
 8005688:	bf14      	ite	ne
 800568a:	2301      	movne	r3, #1
 800568c:	2300      	moveq	r3, #0
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	d03e      	beq.n	8005712 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005698:	f003 031f 	and.w	r3, r3, #31
 800569c:	2210      	movs	r2, #16
 800569e:	409a      	lsls	r2, r3
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d018      	beq.n	80056e4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d108      	bne.n	80056d2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d024      	beq.n	8005712 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	4798      	blx	r3
 80056d0:	e01f      	b.n	8005712 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01b      	beq.n	8005712 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	4798      	blx	r3
 80056e2:	e016      	b.n	8005712 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d107      	bne.n	8005702 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0208 	bic.w	r2, r2, #8
 8005700:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005716:	f003 031f 	and.w	r3, r3, #31
 800571a:	2220      	movs	r2, #32
 800571c:	409a      	lsls	r2, r3
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	4013      	ands	r3, r2
 8005722:	2b00      	cmp	r3, #0
 8005724:	f000 8110 	beq.w	8005948 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a2c      	ldr	r2, [pc, #176]	; (80057e0 <HAL_DMA_IRQHandler+0x690>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d04a      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x678>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a2b      	ldr	r2, [pc, #172]	; (80057e4 <HAL_DMA_IRQHandler+0x694>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d045      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x678>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a29      	ldr	r2, [pc, #164]	; (80057e8 <HAL_DMA_IRQHandler+0x698>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d040      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x678>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a28      	ldr	r2, [pc, #160]	; (80057ec <HAL_DMA_IRQHandler+0x69c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d03b      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x678>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a26      	ldr	r2, [pc, #152]	; (80057f0 <HAL_DMA_IRQHandler+0x6a0>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d036      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x678>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a25      	ldr	r2, [pc, #148]	; (80057f4 <HAL_DMA_IRQHandler+0x6a4>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d031      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x678>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a23      	ldr	r2, [pc, #140]	; (80057f8 <HAL_DMA_IRQHandler+0x6a8>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d02c      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x678>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a22      	ldr	r2, [pc, #136]	; (80057fc <HAL_DMA_IRQHandler+0x6ac>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d027      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x678>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a20      	ldr	r2, [pc, #128]	; (8005800 <HAL_DMA_IRQHandler+0x6b0>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d022      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x678>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a1f      	ldr	r2, [pc, #124]	; (8005804 <HAL_DMA_IRQHandler+0x6b4>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d01d      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x678>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a1d      	ldr	r2, [pc, #116]	; (8005808 <HAL_DMA_IRQHandler+0x6b8>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d018      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x678>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a1c      	ldr	r2, [pc, #112]	; (800580c <HAL_DMA_IRQHandler+0x6bc>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d013      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x678>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a1a      	ldr	r2, [pc, #104]	; (8005810 <HAL_DMA_IRQHandler+0x6c0>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d00e      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x678>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a19      	ldr	r2, [pc, #100]	; (8005814 <HAL_DMA_IRQHandler+0x6c4>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d009      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x678>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a17      	ldr	r2, [pc, #92]	; (8005818 <HAL_DMA_IRQHandler+0x6c8>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d004      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x678>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a16      	ldr	r2, [pc, #88]	; (800581c <HAL_DMA_IRQHandler+0x6cc>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d12b      	bne.n	8005820 <HAL_DMA_IRQHandler+0x6d0>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0310 	and.w	r3, r3, #16
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	bf14      	ite	ne
 80057d6:	2301      	movne	r3, #1
 80057d8:	2300      	moveq	r3, #0
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	e02a      	b.n	8005834 <HAL_DMA_IRQHandler+0x6e4>
 80057de:	bf00      	nop
 80057e0:	40020010 	.word	0x40020010
 80057e4:	40020028 	.word	0x40020028
 80057e8:	40020040 	.word	0x40020040
 80057ec:	40020058 	.word	0x40020058
 80057f0:	40020070 	.word	0x40020070
 80057f4:	40020088 	.word	0x40020088
 80057f8:	400200a0 	.word	0x400200a0
 80057fc:	400200b8 	.word	0x400200b8
 8005800:	40020410 	.word	0x40020410
 8005804:	40020428 	.word	0x40020428
 8005808:	40020440 	.word	0x40020440
 800580c:	40020458 	.word	0x40020458
 8005810:	40020470 	.word	0x40020470
 8005814:	40020488 	.word	0x40020488
 8005818:	400204a0 	.word	0x400204a0
 800581c:	400204b8 	.word	0x400204b8
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	bf14      	ite	ne
 800582e:	2301      	movne	r3, #1
 8005830:	2300      	moveq	r3, #0
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 8087 	beq.w	8005948 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583e:	f003 031f 	and.w	r3, r3, #31
 8005842:	2220      	movs	r2, #32
 8005844:	409a      	lsls	r2, r3
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b04      	cmp	r3, #4
 8005854:	d139      	bne.n	80058ca <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0216 	bic.w	r2, r2, #22
 8005864:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695a      	ldr	r2, [r3, #20]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005874:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	2b00      	cmp	r3, #0
 800587c:	d103      	bne.n	8005886 <HAL_DMA_IRQHandler+0x736>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005882:	2b00      	cmp	r3, #0
 8005884:	d007      	beq.n	8005896 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0208 	bic.w	r2, r2, #8
 8005894:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800589a:	f003 031f 	and.w	r3, r3, #31
 800589e:	223f      	movs	r2, #63	; 0x3f
 80058a0:	409a      	lsls	r2, r3
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 834a 	beq.w	8005f54 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	4798      	blx	r3
          }
          return;
 80058c8:	e344      	b.n	8005f54 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d018      	beq.n	800590a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d108      	bne.n	80058f8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d02c      	beq.n	8005948 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	4798      	blx	r3
 80058f6:	e027      	b.n	8005948 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d023      	beq.n	8005948 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	4798      	blx	r3
 8005908:	e01e      	b.n	8005948 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10f      	bne.n	8005938 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 0210 	bic.w	r2, r2, #16
 8005926:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 8306 	beq.w	8005f5e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 8088 	beq.w	8005a70 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2204      	movs	r2, #4
 8005964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a7a      	ldr	r2, [pc, #488]	; (8005b58 <HAL_DMA_IRQHandler+0xa08>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d04a      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x8b8>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a79      	ldr	r2, [pc, #484]	; (8005b5c <HAL_DMA_IRQHandler+0xa0c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d045      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x8b8>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a77      	ldr	r2, [pc, #476]	; (8005b60 <HAL_DMA_IRQHandler+0xa10>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d040      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x8b8>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a76      	ldr	r2, [pc, #472]	; (8005b64 <HAL_DMA_IRQHandler+0xa14>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d03b      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x8b8>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a74      	ldr	r2, [pc, #464]	; (8005b68 <HAL_DMA_IRQHandler+0xa18>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d036      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x8b8>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a73      	ldr	r2, [pc, #460]	; (8005b6c <HAL_DMA_IRQHandler+0xa1c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d031      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x8b8>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a71      	ldr	r2, [pc, #452]	; (8005b70 <HAL_DMA_IRQHandler+0xa20>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d02c      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x8b8>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a70      	ldr	r2, [pc, #448]	; (8005b74 <HAL_DMA_IRQHandler+0xa24>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d027      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x8b8>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a6e      	ldr	r2, [pc, #440]	; (8005b78 <HAL_DMA_IRQHandler+0xa28>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d022      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x8b8>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a6d      	ldr	r2, [pc, #436]	; (8005b7c <HAL_DMA_IRQHandler+0xa2c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d01d      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x8b8>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a6b      	ldr	r2, [pc, #428]	; (8005b80 <HAL_DMA_IRQHandler+0xa30>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d018      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x8b8>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a6a      	ldr	r2, [pc, #424]	; (8005b84 <HAL_DMA_IRQHandler+0xa34>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d013      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x8b8>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a68      	ldr	r2, [pc, #416]	; (8005b88 <HAL_DMA_IRQHandler+0xa38>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00e      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x8b8>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a67      	ldr	r2, [pc, #412]	; (8005b8c <HAL_DMA_IRQHandler+0xa3c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d009      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x8b8>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a65      	ldr	r2, [pc, #404]	; (8005b90 <HAL_DMA_IRQHandler+0xa40>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d004      	beq.n	8005a08 <HAL_DMA_IRQHandler+0x8b8>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a64      	ldr	r2, [pc, #400]	; (8005b94 <HAL_DMA_IRQHandler+0xa44>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d108      	bne.n	8005a1a <HAL_DMA_IRQHandler+0x8ca>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0201 	bic.w	r2, r2, #1
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	e007      	b.n	8005a2a <HAL_DMA_IRQHandler+0x8da>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0201 	bic.w	r2, r2, #1
 8005a28:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d307      	bcc.n	8005a46 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1f2      	bne.n	8005a2a <HAL_DMA_IRQHandler+0x8da>
 8005a44:	e000      	b.n	8005a48 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005a46:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d004      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2203      	movs	r2, #3
 8005a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005a66:	e003      	b.n	8005a70 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 8272 	beq.w	8005f5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	4798      	blx	r3
 8005a82:	e26c      	b.n	8005f5e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a43      	ldr	r2, [pc, #268]	; (8005b98 <HAL_DMA_IRQHandler+0xa48>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d022      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x984>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a42      	ldr	r2, [pc, #264]	; (8005b9c <HAL_DMA_IRQHandler+0xa4c>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d01d      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x984>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a40      	ldr	r2, [pc, #256]	; (8005ba0 <HAL_DMA_IRQHandler+0xa50>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d018      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x984>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a3f      	ldr	r2, [pc, #252]	; (8005ba4 <HAL_DMA_IRQHandler+0xa54>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d013      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x984>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a3d      	ldr	r2, [pc, #244]	; (8005ba8 <HAL_DMA_IRQHandler+0xa58>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00e      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x984>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a3c      	ldr	r2, [pc, #240]	; (8005bac <HAL_DMA_IRQHandler+0xa5c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d009      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x984>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a3a      	ldr	r2, [pc, #232]	; (8005bb0 <HAL_DMA_IRQHandler+0xa60>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d004      	beq.n	8005ad4 <HAL_DMA_IRQHandler+0x984>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a39      	ldr	r2, [pc, #228]	; (8005bb4 <HAL_DMA_IRQHandler+0xa64>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d101      	bne.n	8005ad8 <HAL_DMA_IRQHandler+0x988>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e000      	b.n	8005ada <HAL_DMA_IRQHandler+0x98a>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 823f 	beq.w	8005f5e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aec:	f003 031f 	and.w	r3, r3, #31
 8005af0:	2204      	movs	r2, #4
 8005af2:	409a      	lsls	r2, r3
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	4013      	ands	r3, r2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 80cd 	beq.w	8005c98 <HAL_DMA_IRQHandler+0xb48>
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 80c7 	beq.w	8005c98 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b0e:	f003 031f 	and.w	r3, r3, #31
 8005b12:	2204      	movs	r2, #4
 8005b14:	409a      	lsls	r2, r3
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d049      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d109      	bne.n	8005b42 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 8210 	beq.w	8005f58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b40:	e20a      	b.n	8005f58 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 8206 	beq.w	8005f58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b54:	e200      	b.n	8005f58 <HAL_DMA_IRQHandler+0xe08>
 8005b56:	bf00      	nop
 8005b58:	40020010 	.word	0x40020010
 8005b5c:	40020028 	.word	0x40020028
 8005b60:	40020040 	.word	0x40020040
 8005b64:	40020058 	.word	0x40020058
 8005b68:	40020070 	.word	0x40020070
 8005b6c:	40020088 	.word	0x40020088
 8005b70:	400200a0 	.word	0x400200a0
 8005b74:	400200b8 	.word	0x400200b8
 8005b78:	40020410 	.word	0x40020410
 8005b7c:	40020428 	.word	0x40020428
 8005b80:	40020440 	.word	0x40020440
 8005b84:	40020458 	.word	0x40020458
 8005b88:	40020470 	.word	0x40020470
 8005b8c:	40020488 	.word	0x40020488
 8005b90:	400204a0 	.word	0x400204a0
 8005b94:	400204b8 	.word	0x400204b8
 8005b98:	58025408 	.word	0x58025408
 8005b9c:	5802541c 	.word	0x5802541c
 8005ba0:	58025430 	.word	0x58025430
 8005ba4:	58025444 	.word	0x58025444
 8005ba8:	58025458 	.word	0x58025458
 8005bac:	5802546c 	.word	0x5802546c
 8005bb0:	58025480 	.word	0x58025480
 8005bb4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f003 0320 	and.w	r3, r3, #32
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d160      	bne.n	8005c84 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a8c      	ldr	r2, [pc, #560]	; (8005df8 <HAL_DMA_IRQHandler+0xca8>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d04a      	beq.n	8005c62 <HAL_DMA_IRQHandler+0xb12>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a8a      	ldr	r2, [pc, #552]	; (8005dfc <HAL_DMA_IRQHandler+0xcac>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d045      	beq.n	8005c62 <HAL_DMA_IRQHandler+0xb12>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a89      	ldr	r2, [pc, #548]	; (8005e00 <HAL_DMA_IRQHandler+0xcb0>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d040      	beq.n	8005c62 <HAL_DMA_IRQHandler+0xb12>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a87      	ldr	r2, [pc, #540]	; (8005e04 <HAL_DMA_IRQHandler+0xcb4>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d03b      	beq.n	8005c62 <HAL_DMA_IRQHandler+0xb12>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a86      	ldr	r2, [pc, #536]	; (8005e08 <HAL_DMA_IRQHandler+0xcb8>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d036      	beq.n	8005c62 <HAL_DMA_IRQHandler+0xb12>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a84      	ldr	r2, [pc, #528]	; (8005e0c <HAL_DMA_IRQHandler+0xcbc>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d031      	beq.n	8005c62 <HAL_DMA_IRQHandler+0xb12>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a83      	ldr	r2, [pc, #524]	; (8005e10 <HAL_DMA_IRQHandler+0xcc0>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d02c      	beq.n	8005c62 <HAL_DMA_IRQHandler+0xb12>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a81      	ldr	r2, [pc, #516]	; (8005e14 <HAL_DMA_IRQHandler+0xcc4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d027      	beq.n	8005c62 <HAL_DMA_IRQHandler+0xb12>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a80      	ldr	r2, [pc, #512]	; (8005e18 <HAL_DMA_IRQHandler+0xcc8>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d022      	beq.n	8005c62 <HAL_DMA_IRQHandler+0xb12>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a7e      	ldr	r2, [pc, #504]	; (8005e1c <HAL_DMA_IRQHandler+0xccc>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d01d      	beq.n	8005c62 <HAL_DMA_IRQHandler+0xb12>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a7d      	ldr	r2, [pc, #500]	; (8005e20 <HAL_DMA_IRQHandler+0xcd0>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d018      	beq.n	8005c62 <HAL_DMA_IRQHandler+0xb12>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a7b      	ldr	r2, [pc, #492]	; (8005e24 <HAL_DMA_IRQHandler+0xcd4>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d013      	beq.n	8005c62 <HAL_DMA_IRQHandler+0xb12>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a7a      	ldr	r2, [pc, #488]	; (8005e28 <HAL_DMA_IRQHandler+0xcd8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d00e      	beq.n	8005c62 <HAL_DMA_IRQHandler+0xb12>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a78      	ldr	r2, [pc, #480]	; (8005e2c <HAL_DMA_IRQHandler+0xcdc>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d009      	beq.n	8005c62 <HAL_DMA_IRQHandler+0xb12>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a77      	ldr	r2, [pc, #476]	; (8005e30 <HAL_DMA_IRQHandler+0xce0>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d004      	beq.n	8005c62 <HAL_DMA_IRQHandler+0xb12>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a75      	ldr	r2, [pc, #468]	; (8005e34 <HAL_DMA_IRQHandler+0xce4>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d108      	bne.n	8005c74 <HAL_DMA_IRQHandler+0xb24>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0208 	bic.w	r2, r2, #8
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	e007      	b.n	8005c84 <HAL_DMA_IRQHandler+0xb34>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0204 	bic.w	r2, r2, #4
 8005c82:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 8165 	beq.w	8005f58 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c96:	e15f      	b.n	8005f58 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c9c:	f003 031f 	and.w	r3, r3, #31
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	409a      	lsls	r2, r3
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 80c5 	beq.w	8005e38 <HAL_DMA_IRQHandler+0xce8>
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 80bf 	beq.w	8005e38 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cbe:	f003 031f 	and.w	r3, r3, #31
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	409a      	lsls	r2, r3
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d018      	beq.n	8005d06 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d109      	bne.n	8005cf2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 813a 	beq.w	8005f5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cf0:	e134      	b.n	8005f5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f000 8130 	beq.w	8005f5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d04:	e12a      	b.n	8005f5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f003 0320 	and.w	r3, r3, #32
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d168      	bne.n	8005de2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a38      	ldr	r2, [pc, #224]	; (8005df8 <HAL_DMA_IRQHandler+0xca8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d04a      	beq.n	8005db0 <HAL_DMA_IRQHandler+0xc60>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a37      	ldr	r2, [pc, #220]	; (8005dfc <HAL_DMA_IRQHandler+0xcac>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d045      	beq.n	8005db0 <HAL_DMA_IRQHandler+0xc60>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a35      	ldr	r2, [pc, #212]	; (8005e00 <HAL_DMA_IRQHandler+0xcb0>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d040      	beq.n	8005db0 <HAL_DMA_IRQHandler+0xc60>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a34      	ldr	r2, [pc, #208]	; (8005e04 <HAL_DMA_IRQHandler+0xcb4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d03b      	beq.n	8005db0 <HAL_DMA_IRQHandler+0xc60>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a32      	ldr	r2, [pc, #200]	; (8005e08 <HAL_DMA_IRQHandler+0xcb8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d036      	beq.n	8005db0 <HAL_DMA_IRQHandler+0xc60>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a31      	ldr	r2, [pc, #196]	; (8005e0c <HAL_DMA_IRQHandler+0xcbc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d031      	beq.n	8005db0 <HAL_DMA_IRQHandler+0xc60>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a2f      	ldr	r2, [pc, #188]	; (8005e10 <HAL_DMA_IRQHandler+0xcc0>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d02c      	beq.n	8005db0 <HAL_DMA_IRQHandler+0xc60>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a2e      	ldr	r2, [pc, #184]	; (8005e14 <HAL_DMA_IRQHandler+0xcc4>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d027      	beq.n	8005db0 <HAL_DMA_IRQHandler+0xc60>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a2c      	ldr	r2, [pc, #176]	; (8005e18 <HAL_DMA_IRQHandler+0xcc8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d022      	beq.n	8005db0 <HAL_DMA_IRQHandler+0xc60>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a2b      	ldr	r2, [pc, #172]	; (8005e1c <HAL_DMA_IRQHandler+0xccc>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d01d      	beq.n	8005db0 <HAL_DMA_IRQHandler+0xc60>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a29      	ldr	r2, [pc, #164]	; (8005e20 <HAL_DMA_IRQHandler+0xcd0>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d018      	beq.n	8005db0 <HAL_DMA_IRQHandler+0xc60>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a28      	ldr	r2, [pc, #160]	; (8005e24 <HAL_DMA_IRQHandler+0xcd4>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d013      	beq.n	8005db0 <HAL_DMA_IRQHandler+0xc60>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a26      	ldr	r2, [pc, #152]	; (8005e28 <HAL_DMA_IRQHandler+0xcd8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00e      	beq.n	8005db0 <HAL_DMA_IRQHandler+0xc60>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a25      	ldr	r2, [pc, #148]	; (8005e2c <HAL_DMA_IRQHandler+0xcdc>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d009      	beq.n	8005db0 <HAL_DMA_IRQHandler+0xc60>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a23      	ldr	r2, [pc, #140]	; (8005e30 <HAL_DMA_IRQHandler+0xce0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d004      	beq.n	8005db0 <HAL_DMA_IRQHandler+0xc60>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a22      	ldr	r2, [pc, #136]	; (8005e34 <HAL_DMA_IRQHandler+0xce4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d108      	bne.n	8005dc2 <HAL_DMA_IRQHandler+0xc72>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0214 	bic.w	r2, r2, #20
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	e007      	b.n	8005dd2 <HAL_DMA_IRQHandler+0xc82>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 020a 	bic.w	r2, r2, #10
 8005dd0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 80b8 	beq.w	8005f5c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005df4:	e0b2      	b.n	8005f5c <HAL_DMA_IRQHandler+0xe0c>
 8005df6:	bf00      	nop
 8005df8:	40020010 	.word	0x40020010
 8005dfc:	40020028 	.word	0x40020028
 8005e00:	40020040 	.word	0x40020040
 8005e04:	40020058 	.word	0x40020058
 8005e08:	40020070 	.word	0x40020070
 8005e0c:	40020088 	.word	0x40020088
 8005e10:	400200a0 	.word	0x400200a0
 8005e14:	400200b8 	.word	0x400200b8
 8005e18:	40020410 	.word	0x40020410
 8005e1c:	40020428 	.word	0x40020428
 8005e20:	40020440 	.word	0x40020440
 8005e24:	40020458 	.word	0x40020458
 8005e28:	40020470 	.word	0x40020470
 8005e2c:	40020488 	.word	0x40020488
 8005e30:	400204a0 	.word	0x400204a0
 8005e34:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e3c:	f003 031f 	and.w	r3, r3, #31
 8005e40:	2208      	movs	r2, #8
 8005e42:	409a      	lsls	r2, r3
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	4013      	ands	r3, r2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 8088 	beq.w	8005f5e <HAL_DMA_IRQHandler+0xe0e>
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 8082 	beq.w	8005f5e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a41      	ldr	r2, [pc, #260]	; (8005f64 <HAL_DMA_IRQHandler+0xe14>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d04a      	beq.n	8005efa <HAL_DMA_IRQHandler+0xdaa>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a3f      	ldr	r2, [pc, #252]	; (8005f68 <HAL_DMA_IRQHandler+0xe18>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d045      	beq.n	8005efa <HAL_DMA_IRQHandler+0xdaa>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a3e      	ldr	r2, [pc, #248]	; (8005f6c <HAL_DMA_IRQHandler+0xe1c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d040      	beq.n	8005efa <HAL_DMA_IRQHandler+0xdaa>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a3c      	ldr	r2, [pc, #240]	; (8005f70 <HAL_DMA_IRQHandler+0xe20>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d03b      	beq.n	8005efa <HAL_DMA_IRQHandler+0xdaa>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a3b      	ldr	r2, [pc, #236]	; (8005f74 <HAL_DMA_IRQHandler+0xe24>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d036      	beq.n	8005efa <HAL_DMA_IRQHandler+0xdaa>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a39      	ldr	r2, [pc, #228]	; (8005f78 <HAL_DMA_IRQHandler+0xe28>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d031      	beq.n	8005efa <HAL_DMA_IRQHandler+0xdaa>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a38      	ldr	r2, [pc, #224]	; (8005f7c <HAL_DMA_IRQHandler+0xe2c>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d02c      	beq.n	8005efa <HAL_DMA_IRQHandler+0xdaa>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a36      	ldr	r2, [pc, #216]	; (8005f80 <HAL_DMA_IRQHandler+0xe30>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d027      	beq.n	8005efa <HAL_DMA_IRQHandler+0xdaa>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a35      	ldr	r2, [pc, #212]	; (8005f84 <HAL_DMA_IRQHandler+0xe34>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d022      	beq.n	8005efa <HAL_DMA_IRQHandler+0xdaa>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a33      	ldr	r2, [pc, #204]	; (8005f88 <HAL_DMA_IRQHandler+0xe38>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d01d      	beq.n	8005efa <HAL_DMA_IRQHandler+0xdaa>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a32      	ldr	r2, [pc, #200]	; (8005f8c <HAL_DMA_IRQHandler+0xe3c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d018      	beq.n	8005efa <HAL_DMA_IRQHandler+0xdaa>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a30      	ldr	r2, [pc, #192]	; (8005f90 <HAL_DMA_IRQHandler+0xe40>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d013      	beq.n	8005efa <HAL_DMA_IRQHandler+0xdaa>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a2f      	ldr	r2, [pc, #188]	; (8005f94 <HAL_DMA_IRQHandler+0xe44>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d00e      	beq.n	8005efa <HAL_DMA_IRQHandler+0xdaa>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a2d      	ldr	r2, [pc, #180]	; (8005f98 <HAL_DMA_IRQHandler+0xe48>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d009      	beq.n	8005efa <HAL_DMA_IRQHandler+0xdaa>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a2c      	ldr	r2, [pc, #176]	; (8005f9c <HAL_DMA_IRQHandler+0xe4c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d004      	beq.n	8005efa <HAL_DMA_IRQHandler+0xdaa>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a2a      	ldr	r2, [pc, #168]	; (8005fa0 <HAL_DMA_IRQHandler+0xe50>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d108      	bne.n	8005f0c <HAL_DMA_IRQHandler+0xdbc>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 021c 	bic.w	r2, r2, #28
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	e007      	b.n	8005f1c <HAL_DMA_IRQHandler+0xdcc>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 020e 	bic.w	r2, r2, #14
 8005f1a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f20:	f003 031f 	and.w	r3, r3, #31
 8005f24:	2201      	movs	r2, #1
 8005f26:	409a      	lsls	r2, r3
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d009      	beq.n	8005f5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	4798      	blx	r3
 8005f52:	e004      	b.n	8005f5e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005f54:	bf00      	nop
 8005f56:	e002      	b.n	8005f5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f58:	bf00      	nop
 8005f5a:	e000      	b.n	8005f5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f5c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005f5e:	3728      	adds	r7, #40	; 0x28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	40020010 	.word	0x40020010
 8005f68:	40020028 	.word	0x40020028
 8005f6c:	40020040 	.word	0x40020040
 8005f70:	40020058 	.word	0x40020058
 8005f74:	40020070 	.word	0x40020070
 8005f78:	40020088 	.word	0x40020088
 8005f7c:	400200a0 	.word	0x400200a0
 8005f80:	400200b8 	.word	0x400200b8
 8005f84:	40020410 	.word	0x40020410
 8005f88:	40020428 	.word	0x40020428
 8005f8c:	40020440 	.word	0x40020440
 8005f90:	40020458 	.word	0x40020458
 8005f94:	40020470 	.word	0x40020470
 8005f98:	40020488 	.word	0x40020488
 8005f9c:	400204a0 	.word	0x400204a0
 8005fa0:	400204b8 	.word	0x400204b8

08005fa4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fce:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a84      	ldr	r2, [pc, #528]	; (80061ec <DMA_SetConfig+0x230>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d072      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a82      	ldr	r2, [pc, #520]	; (80061f0 <DMA_SetConfig+0x234>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d06d      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a81      	ldr	r2, [pc, #516]	; (80061f4 <DMA_SetConfig+0x238>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d068      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a7f      	ldr	r2, [pc, #508]	; (80061f8 <DMA_SetConfig+0x23c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d063      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a7e      	ldr	r2, [pc, #504]	; (80061fc <DMA_SetConfig+0x240>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d05e      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a7c      	ldr	r2, [pc, #496]	; (8006200 <DMA_SetConfig+0x244>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d059      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a7b      	ldr	r2, [pc, #492]	; (8006204 <DMA_SetConfig+0x248>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d054      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a79      	ldr	r2, [pc, #484]	; (8006208 <DMA_SetConfig+0x24c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d04f      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a78      	ldr	r2, [pc, #480]	; (800620c <DMA_SetConfig+0x250>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d04a      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a76      	ldr	r2, [pc, #472]	; (8006210 <DMA_SetConfig+0x254>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d045      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a75      	ldr	r2, [pc, #468]	; (8006214 <DMA_SetConfig+0x258>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d040      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a73      	ldr	r2, [pc, #460]	; (8006218 <DMA_SetConfig+0x25c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d03b      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a72      	ldr	r2, [pc, #456]	; (800621c <DMA_SetConfig+0x260>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d036      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a70      	ldr	r2, [pc, #448]	; (8006220 <DMA_SetConfig+0x264>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d031      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a6f      	ldr	r2, [pc, #444]	; (8006224 <DMA_SetConfig+0x268>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d02c      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a6d      	ldr	r2, [pc, #436]	; (8006228 <DMA_SetConfig+0x26c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d027      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a6c      	ldr	r2, [pc, #432]	; (800622c <DMA_SetConfig+0x270>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d022      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a6a      	ldr	r2, [pc, #424]	; (8006230 <DMA_SetConfig+0x274>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d01d      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a69      	ldr	r2, [pc, #420]	; (8006234 <DMA_SetConfig+0x278>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d018      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a67      	ldr	r2, [pc, #412]	; (8006238 <DMA_SetConfig+0x27c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d013      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a66      	ldr	r2, [pc, #408]	; (800623c <DMA_SetConfig+0x280>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d00e      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a64      	ldr	r2, [pc, #400]	; (8006240 <DMA_SetConfig+0x284>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d009      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a63      	ldr	r2, [pc, #396]	; (8006244 <DMA_SetConfig+0x288>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d004      	beq.n	80060c6 <DMA_SetConfig+0x10a>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a61      	ldr	r2, [pc, #388]	; (8006248 <DMA_SetConfig+0x28c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d101      	bne.n	80060ca <DMA_SetConfig+0x10e>
 80060c6:	2301      	movs	r3, #1
 80060c8:	e000      	b.n	80060cc <DMA_SetConfig+0x110>
 80060ca:	2300      	movs	r3, #0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00d      	beq.n	80060ec <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80060d8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d004      	beq.n	80060ec <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80060ea:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a3e      	ldr	r2, [pc, #248]	; (80061ec <DMA_SetConfig+0x230>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d04a      	beq.n	800618c <DMA_SetConfig+0x1d0>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a3d      	ldr	r2, [pc, #244]	; (80061f0 <DMA_SetConfig+0x234>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d045      	beq.n	800618c <DMA_SetConfig+0x1d0>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a3b      	ldr	r2, [pc, #236]	; (80061f4 <DMA_SetConfig+0x238>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d040      	beq.n	800618c <DMA_SetConfig+0x1d0>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a3a      	ldr	r2, [pc, #232]	; (80061f8 <DMA_SetConfig+0x23c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d03b      	beq.n	800618c <DMA_SetConfig+0x1d0>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a38      	ldr	r2, [pc, #224]	; (80061fc <DMA_SetConfig+0x240>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d036      	beq.n	800618c <DMA_SetConfig+0x1d0>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a37      	ldr	r2, [pc, #220]	; (8006200 <DMA_SetConfig+0x244>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d031      	beq.n	800618c <DMA_SetConfig+0x1d0>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a35      	ldr	r2, [pc, #212]	; (8006204 <DMA_SetConfig+0x248>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d02c      	beq.n	800618c <DMA_SetConfig+0x1d0>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a34      	ldr	r2, [pc, #208]	; (8006208 <DMA_SetConfig+0x24c>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d027      	beq.n	800618c <DMA_SetConfig+0x1d0>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a32      	ldr	r2, [pc, #200]	; (800620c <DMA_SetConfig+0x250>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d022      	beq.n	800618c <DMA_SetConfig+0x1d0>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a31      	ldr	r2, [pc, #196]	; (8006210 <DMA_SetConfig+0x254>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d01d      	beq.n	800618c <DMA_SetConfig+0x1d0>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a2f      	ldr	r2, [pc, #188]	; (8006214 <DMA_SetConfig+0x258>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d018      	beq.n	800618c <DMA_SetConfig+0x1d0>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a2e      	ldr	r2, [pc, #184]	; (8006218 <DMA_SetConfig+0x25c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d013      	beq.n	800618c <DMA_SetConfig+0x1d0>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a2c      	ldr	r2, [pc, #176]	; (800621c <DMA_SetConfig+0x260>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00e      	beq.n	800618c <DMA_SetConfig+0x1d0>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a2b      	ldr	r2, [pc, #172]	; (8006220 <DMA_SetConfig+0x264>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d009      	beq.n	800618c <DMA_SetConfig+0x1d0>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a29      	ldr	r2, [pc, #164]	; (8006224 <DMA_SetConfig+0x268>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d004      	beq.n	800618c <DMA_SetConfig+0x1d0>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a28      	ldr	r2, [pc, #160]	; (8006228 <DMA_SetConfig+0x26c>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d101      	bne.n	8006190 <DMA_SetConfig+0x1d4>
 800618c:	2301      	movs	r3, #1
 800618e:	e000      	b.n	8006192 <DMA_SetConfig+0x1d6>
 8006190:	2300      	movs	r3, #0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d05a      	beq.n	800624c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	223f      	movs	r2, #63	; 0x3f
 80061a0:	409a      	lsls	r2, r3
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80061b4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	2b40      	cmp	r3, #64	; 0x40
 80061c4:	d108      	bne.n	80061d8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80061d6:	e087      	b.n	80062e8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	60da      	str	r2, [r3, #12]
}
 80061e8:	e07e      	b.n	80062e8 <DMA_SetConfig+0x32c>
 80061ea:	bf00      	nop
 80061ec:	40020010 	.word	0x40020010
 80061f0:	40020028 	.word	0x40020028
 80061f4:	40020040 	.word	0x40020040
 80061f8:	40020058 	.word	0x40020058
 80061fc:	40020070 	.word	0x40020070
 8006200:	40020088 	.word	0x40020088
 8006204:	400200a0 	.word	0x400200a0
 8006208:	400200b8 	.word	0x400200b8
 800620c:	40020410 	.word	0x40020410
 8006210:	40020428 	.word	0x40020428
 8006214:	40020440 	.word	0x40020440
 8006218:	40020458 	.word	0x40020458
 800621c:	40020470 	.word	0x40020470
 8006220:	40020488 	.word	0x40020488
 8006224:	400204a0 	.word	0x400204a0
 8006228:	400204b8 	.word	0x400204b8
 800622c:	58025408 	.word	0x58025408
 8006230:	5802541c 	.word	0x5802541c
 8006234:	58025430 	.word	0x58025430
 8006238:	58025444 	.word	0x58025444
 800623c:	58025458 	.word	0x58025458
 8006240:	5802546c 	.word	0x5802546c
 8006244:	58025480 	.word	0x58025480
 8006248:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a28      	ldr	r2, [pc, #160]	; (80062f4 <DMA_SetConfig+0x338>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d022      	beq.n	800629c <DMA_SetConfig+0x2e0>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a27      	ldr	r2, [pc, #156]	; (80062f8 <DMA_SetConfig+0x33c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d01d      	beq.n	800629c <DMA_SetConfig+0x2e0>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a25      	ldr	r2, [pc, #148]	; (80062fc <DMA_SetConfig+0x340>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d018      	beq.n	800629c <DMA_SetConfig+0x2e0>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a24      	ldr	r2, [pc, #144]	; (8006300 <DMA_SetConfig+0x344>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d013      	beq.n	800629c <DMA_SetConfig+0x2e0>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a22      	ldr	r2, [pc, #136]	; (8006304 <DMA_SetConfig+0x348>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d00e      	beq.n	800629c <DMA_SetConfig+0x2e0>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a21      	ldr	r2, [pc, #132]	; (8006308 <DMA_SetConfig+0x34c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d009      	beq.n	800629c <DMA_SetConfig+0x2e0>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a1f      	ldr	r2, [pc, #124]	; (800630c <DMA_SetConfig+0x350>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d004      	beq.n	800629c <DMA_SetConfig+0x2e0>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a1e      	ldr	r2, [pc, #120]	; (8006310 <DMA_SetConfig+0x354>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d101      	bne.n	80062a0 <DMA_SetConfig+0x2e4>
 800629c:	2301      	movs	r3, #1
 800629e:	e000      	b.n	80062a2 <DMA_SetConfig+0x2e6>
 80062a0:	2300      	movs	r3, #0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d020      	beq.n	80062e8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062aa:	f003 031f 	and.w	r3, r3, #31
 80062ae:	2201      	movs	r2, #1
 80062b0:	409a      	lsls	r2, r3
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	2b40      	cmp	r3, #64	; 0x40
 80062c4:	d108      	bne.n	80062d8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	60da      	str	r2, [r3, #12]
}
 80062d6:	e007      	b.n	80062e8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	60da      	str	r2, [r3, #12]
}
 80062e8:	bf00      	nop
 80062ea:	371c      	adds	r7, #28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	58025408 	.word	0x58025408
 80062f8:	5802541c 	.word	0x5802541c
 80062fc:	58025430 	.word	0x58025430
 8006300:	58025444 	.word	0x58025444
 8006304:	58025458 	.word	0x58025458
 8006308:	5802546c 	.word	0x5802546c
 800630c:	58025480 	.word	0x58025480
 8006310:	58025494 	.word	0x58025494

08006314 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a42      	ldr	r2, [pc, #264]	; (800642c <DMA_CalcBaseAndBitshift+0x118>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d04a      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a41      	ldr	r2, [pc, #260]	; (8006430 <DMA_CalcBaseAndBitshift+0x11c>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d045      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a3f      	ldr	r2, [pc, #252]	; (8006434 <DMA_CalcBaseAndBitshift+0x120>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d040      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a3e      	ldr	r2, [pc, #248]	; (8006438 <DMA_CalcBaseAndBitshift+0x124>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d03b      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a3c      	ldr	r2, [pc, #240]	; (800643c <DMA_CalcBaseAndBitshift+0x128>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d036      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a3b      	ldr	r2, [pc, #236]	; (8006440 <DMA_CalcBaseAndBitshift+0x12c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d031      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a39      	ldr	r2, [pc, #228]	; (8006444 <DMA_CalcBaseAndBitshift+0x130>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d02c      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a38      	ldr	r2, [pc, #224]	; (8006448 <DMA_CalcBaseAndBitshift+0x134>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d027      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a36      	ldr	r2, [pc, #216]	; (800644c <DMA_CalcBaseAndBitshift+0x138>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d022      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a35      	ldr	r2, [pc, #212]	; (8006450 <DMA_CalcBaseAndBitshift+0x13c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d01d      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a33      	ldr	r2, [pc, #204]	; (8006454 <DMA_CalcBaseAndBitshift+0x140>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d018      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a32      	ldr	r2, [pc, #200]	; (8006458 <DMA_CalcBaseAndBitshift+0x144>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d013      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a30      	ldr	r2, [pc, #192]	; (800645c <DMA_CalcBaseAndBitshift+0x148>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d00e      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a2f      	ldr	r2, [pc, #188]	; (8006460 <DMA_CalcBaseAndBitshift+0x14c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d009      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a2d      	ldr	r2, [pc, #180]	; (8006464 <DMA_CalcBaseAndBitshift+0x150>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d004      	beq.n	80063bc <DMA_CalcBaseAndBitshift+0xa8>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a2c      	ldr	r2, [pc, #176]	; (8006468 <DMA_CalcBaseAndBitshift+0x154>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d101      	bne.n	80063c0 <DMA_CalcBaseAndBitshift+0xac>
 80063bc:	2301      	movs	r3, #1
 80063be:	e000      	b.n	80063c2 <DMA_CalcBaseAndBitshift+0xae>
 80063c0:	2300      	movs	r3, #0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d024      	beq.n	8006410 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	3b10      	subs	r3, #16
 80063ce:	4a27      	ldr	r2, [pc, #156]	; (800646c <DMA_CalcBaseAndBitshift+0x158>)
 80063d0:	fba2 2303 	umull	r2, r3, r2, r3
 80063d4:	091b      	lsrs	r3, r3, #4
 80063d6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f003 0307 	and.w	r3, r3, #7
 80063de:	4a24      	ldr	r2, [pc, #144]	; (8006470 <DMA_CalcBaseAndBitshift+0x15c>)
 80063e0:	5cd3      	ldrb	r3, [r2, r3]
 80063e2:	461a      	mov	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d908      	bls.n	8006400 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	461a      	mov	r2, r3
 80063f4:	4b1f      	ldr	r3, [pc, #124]	; (8006474 <DMA_CalcBaseAndBitshift+0x160>)
 80063f6:	4013      	ands	r3, r2
 80063f8:	1d1a      	adds	r2, r3, #4
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	659a      	str	r2, [r3, #88]	; 0x58
 80063fe:	e00d      	b.n	800641c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	461a      	mov	r2, r3
 8006406:	4b1b      	ldr	r3, [pc, #108]	; (8006474 <DMA_CalcBaseAndBitshift+0x160>)
 8006408:	4013      	ands	r3, r2
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	6593      	str	r3, [r2, #88]	; 0x58
 800640e:	e005      	b.n	800641c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006420:	4618      	mov	r0, r3
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	40020010 	.word	0x40020010
 8006430:	40020028 	.word	0x40020028
 8006434:	40020040 	.word	0x40020040
 8006438:	40020058 	.word	0x40020058
 800643c:	40020070 	.word	0x40020070
 8006440:	40020088 	.word	0x40020088
 8006444:	400200a0 	.word	0x400200a0
 8006448:	400200b8 	.word	0x400200b8
 800644c:	40020410 	.word	0x40020410
 8006450:	40020428 	.word	0x40020428
 8006454:	40020440 	.word	0x40020440
 8006458:	40020458 	.word	0x40020458
 800645c:	40020470 	.word	0x40020470
 8006460:	40020488 	.word	0x40020488
 8006464:	400204a0 	.word	0x400204a0
 8006468:	400204b8 	.word	0x400204b8
 800646c:	aaaaaaab 	.word	0xaaaaaaab
 8006470:	0800de5c 	.word	0x0800de5c
 8006474:	fffffc00 	.word	0xfffffc00

08006478 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d120      	bne.n	80064ce <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006490:	2b03      	cmp	r3, #3
 8006492:	d858      	bhi.n	8006546 <DMA_CheckFifoParam+0xce>
 8006494:	a201      	add	r2, pc, #4	; (adr r2, 800649c <DMA_CheckFifoParam+0x24>)
 8006496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649a:	bf00      	nop
 800649c:	080064ad 	.word	0x080064ad
 80064a0:	080064bf 	.word	0x080064bf
 80064a4:	080064ad 	.word	0x080064ad
 80064a8:	08006547 	.word	0x08006547
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d048      	beq.n	800654a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064bc:	e045      	b.n	800654a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064c6:	d142      	bne.n	800654e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064cc:	e03f      	b.n	800654e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064d6:	d123      	bne.n	8006520 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d838      	bhi.n	8006552 <DMA_CheckFifoParam+0xda>
 80064e0:	a201      	add	r2, pc, #4	; (adr r2, 80064e8 <DMA_CheckFifoParam+0x70>)
 80064e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e6:	bf00      	nop
 80064e8:	080064f9 	.word	0x080064f9
 80064ec:	080064ff 	.word	0x080064ff
 80064f0:	080064f9 	.word	0x080064f9
 80064f4:	08006511 	.word	0x08006511
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	73fb      	strb	r3, [r7, #15]
        break;
 80064fc:	e030      	b.n	8006560 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006502:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d025      	beq.n	8006556 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800650e:	e022      	b.n	8006556 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006518:	d11f      	bne.n	800655a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800651e:	e01c      	b.n	800655a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006524:	2b02      	cmp	r3, #2
 8006526:	d902      	bls.n	800652e <DMA_CheckFifoParam+0xb6>
 8006528:	2b03      	cmp	r3, #3
 800652a:	d003      	beq.n	8006534 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800652c:	e018      	b.n	8006560 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	73fb      	strb	r3, [r7, #15]
        break;
 8006532:	e015      	b.n	8006560 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006538:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00e      	beq.n	800655e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	73fb      	strb	r3, [r7, #15]
    break;
 8006544:	e00b      	b.n	800655e <DMA_CheckFifoParam+0xe6>
        break;
 8006546:	bf00      	nop
 8006548:	e00a      	b.n	8006560 <DMA_CheckFifoParam+0xe8>
        break;
 800654a:	bf00      	nop
 800654c:	e008      	b.n	8006560 <DMA_CheckFifoParam+0xe8>
        break;
 800654e:	bf00      	nop
 8006550:	e006      	b.n	8006560 <DMA_CheckFifoParam+0xe8>
        break;
 8006552:	bf00      	nop
 8006554:	e004      	b.n	8006560 <DMA_CheckFifoParam+0xe8>
        break;
 8006556:	bf00      	nop
 8006558:	e002      	b.n	8006560 <DMA_CheckFifoParam+0xe8>
        break;
 800655a:	bf00      	nop
 800655c:	e000      	b.n	8006560 <DMA_CheckFifoParam+0xe8>
    break;
 800655e:	bf00      	nop
    }
  }

  return status;
 8006560:	7bfb      	ldrb	r3, [r7, #15]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop

08006570 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a38      	ldr	r2, [pc, #224]	; (8006664 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d022      	beq.n	80065ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a36      	ldr	r2, [pc, #216]	; (8006668 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d01d      	beq.n	80065ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a35      	ldr	r2, [pc, #212]	; (800666c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d018      	beq.n	80065ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a33      	ldr	r2, [pc, #204]	; (8006670 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d013      	beq.n	80065ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a32      	ldr	r2, [pc, #200]	; (8006674 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d00e      	beq.n	80065ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a30      	ldr	r2, [pc, #192]	; (8006678 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d009      	beq.n	80065ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a2f      	ldr	r2, [pc, #188]	; (800667c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d004      	beq.n	80065ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a2d      	ldr	r2, [pc, #180]	; (8006680 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d101      	bne.n	80065d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e000      	b.n	80065d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80065d2:	2300      	movs	r3, #0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d01a      	beq.n	800660e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	3b08      	subs	r3, #8
 80065e0:	4a28      	ldr	r2, [pc, #160]	; (8006684 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80065e2:	fba2 2303 	umull	r2, r3, r2, r3
 80065e6:	091b      	lsrs	r3, r3, #4
 80065e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	4b26      	ldr	r3, [pc, #152]	; (8006688 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80065ee:	4413      	add	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	461a      	mov	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a24      	ldr	r2, [pc, #144]	; (800668c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80065fc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f003 031f 	and.w	r3, r3, #31
 8006604:	2201      	movs	r2, #1
 8006606:	409a      	lsls	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800660c:	e024      	b.n	8006658 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	b2db      	uxtb	r3, r3
 8006614:	3b10      	subs	r3, #16
 8006616:	4a1e      	ldr	r2, [pc, #120]	; (8006690 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006618:	fba2 2303 	umull	r2, r3, r2, r3
 800661c:	091b      	lsrs	r3, r3, #4
 800661e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4a1c      	ldr	r2, [pc, #112]	; (8006694 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d806      	bhi.n	8006636 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	4a1b      	ldr	r2, [pc, #108]	; (8006698 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d902      	bls.n	8006636 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	3308      	adds	r3, #8
 8006634:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	4b18      	ldr	r3, [pc, #96]	; (800669c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800663a:	4413      	add	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	461a      	mov	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a16      	ldr	r2, [pc, #88]	; (80066a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006648:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f003 031f 	and.w	r3, r3, #31
 8006650:	2201      	movs	r2, #1
 8006652:	409a      	lsls	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006658:	bf00      	nop
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	58025408 	.word	0x58025408
 8006668:	5802541c 	.word	0x5802541c
 800666c:	58025430 	.word	0x58025430
 8006670:	58025444 	.word	0x58025444
 8006674:	58025458 	.word	0x58025458
 8006678:	5802546c 	.word	0x5802546c
 800667c:	58025480 	.word	0x58025480
 8006680:	58025494 	.word	0x58025494
 8006684:	cccccccd 	.word	0xcccccccd
 8006688:	16009600 	.word	0x16009600
 800668c:	58025880 	.word	0x58025880
 8006690:	aaaaaaab 	.word	0xaaaaaaab
 8006694:	400204b8 	.word	0x400204b8
 8006698:	4002040f 	.word	0x4002040f
 800669c:	10008200 	.word	0x10008200
 80066a0:	40020880 	.word	0x40020880

080066a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d04a      	beq.n	8006750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2b08      	cmp	r3, #8
 80066be:	d847      	bhi.n	8006750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a25      	ldr	r2, [pc, #148]	; (800675c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d022      	beq.n	8006710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a24      	ldr	r2, [pc, #144]	; (8006760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d01d      	beq.n	8006710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a22      	ldr	r2, [pc, #136]	; (8006764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d018      	beq.n	8006710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a21      	ldr	r2, [pc, #132]	; (8006768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d013      	beq.n	8006710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a1f      	ldr	r2, [pc, #124]	; (800676c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d00e      	beq.n	8006710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a1e      	ldr	r2, [pc, #120]	; (8006770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d009      	beq.n	8006710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a1c      	ldr	r2, [pc, #112]	; (8006774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d004      	beq.n	8006710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a1b      	ldr	r2, [pc, #108]	; (8006778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d101      	bne.n	8006714 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006710:	2301      	movs	r3, #1
 8006712:	e000      	b.n	8006716 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006714:	2300      	movs	r3, #0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00a      	beq.n	8006730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	4b17      	ldr	r3, [pc, #92]	; (800677c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800671e:	4413      	add	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	461a      	mov	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a15      	ldr	r2, [pc, #84]	; (8006780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800672c:	671a      	str	r2, [r3, #112]	; 0x70
 800672e:	e009      	b.n	8006744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	4b14      	ldr	r3, [pc, #80]	; (8006784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006734:	4413      	add	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	461a      	mov	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a11      	ldr	r2, [pc, #68]	; (8006788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006742:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	3b01      	subs	r3, #1
 8006748:	2201      	movs	r2, #1
 800674a:	409a      	lsls	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006750:	bf00      	nop
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	58025408 	.word	0x58025408
 8006760:	5802541c 	.word	0x5802541c
 8006764:	58025430 	.word	0x58025430
 8006768:	58025444 	.word	0x58025444
 800676c:	58025458 	.word	0x58025458
 8006770:	5802546c 	.word	0x5802546c
 8006774:	58025480 	.word	0x58025480
 8006778:	58025494 	.word	0x58025494
 800677c:	1600963f 	.word	0x1600963f
 8006780:	58025940 	.word	0x58025940
 8006784:	1000823f 	.word	0x1000823f
 8006788:	40020940 	.word	0x40020940

0800678c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800678c:	b480      	push	{r7}
 800678e:	b089      	sub	sp, #36	; 0x24
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006796:	2300      	movs	r3, #0
 8006798:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800679a:	4b89      	ldr	r3, [pc, #548]	; (80069c0 <HAL_GPIO_Init+0x234>)
 800679c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800679e:	e194      	b.n	8006aca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	2101      	movs	r1, #1
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	fa01 f303 	lsl.w	r3, r1, r3
 80067ac:	4013      	ands	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 8186 	beq.w	8006ac4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d00b      	beq.n	80067d8 <HAL_GPIO_Init+0x4c>
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d007      	beq.n	80067d8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80067cc:	2b11      	cmp	r3, #17
 80067ce:	d003      	beq.n	80067d8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	2b12      	cmp	r3, #18
 80067d6:	d130      	bne.n	800683a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	005b      	lsls	r3, r3, #1
 80067e2:	2203      	movs	r2, #3
 80067e4:	fa02 f303 	lsl.w	r3, r2, r3
 80067e8:	43db      	mvns	r3, r3
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	4013      	ands	r3, r2
 80067ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	68da      	ldr	r2, [r3, #12]
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	005b      	lsls	r3, r3, #1
 80067f8:	fa02 f303 	lsl.w	r3, r2, r3
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	4313      	orrs	r3, r2
 8006800:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800680e:	2201      	movs	r2, #1
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	fa02 f303 	lsl.w	r3, r2, r3
 8006816:	43db      	mvns	r3, r3
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	4013      	ands	r3, r2
 800681c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	091b      	lsrs	r3, r3, #4
 8006824:	f003 0201 	and.w	r2, r3, #1
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	fa02 f303 	lsl.w	r3, r2, r3
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	4313      	orrs	r3, r2
 8006832:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	69ba      	ldr	r2, [r7, #24]
 8006838:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	2203      	movs	r2, #3
 8006846:	fa02 f303 	lsl.w	r3, r2, r3
 800684a:	43db      	mvns	r3, r3
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	4013      	ands	r3, r2
 8006850:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	689a      	ldr	r2, [r3, #8]
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	005b      	lsls	r3, r3, #1
 800685a:	fa02 f303 	lsl.w	r3, r2, r3
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	4313      	orrs	r3, r2
 8006862:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	2b02      	cmp	r3, #2
 8006870:	d003      	beq.n	800687a <HAL_GPIO_Init+0xee>
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	2b12      	cmp	r3, #18
 8006878:	d123      	bne.n	80068c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	08da      	lsrs	r2, r3, #3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	3208      	adds	r2, #8
 8006882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	f003 0307 	and.w	r3, r3, #7
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	220f      	movs	r2, #15
 8006892:	fa02 f303 	lsl.w	r3, r2, r3
 8006896:	43db      	mvns	r3, r3
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	4013      	ands	r3, r2
 800689c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	691a      	ldr	r2, [r3, #16]
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	f003 0307 	and.w	r3, r3, #7
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	fa02 f303 	lsl.w	r3, r2, r3
 80068ae:	69ba      	ldr	r2, [r7, #24]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	08da      	lsrs	r2, r3, #3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	3208      	adds	r2, #8
 80068bc:	69b9      	ldr	r1, [r7, #24]
 80068be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	2203      	movs	r2, #3
 80068ce:	fa02 f303 	lsl.w	r3, r2, r3
 80068d2:	43db      	mvns	r3, r3
 80068d4:	69ba      	ldr	r2, [r7, #24]
 80068d6:	4013      	ands	r3, r2
 80068d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f003 0203 	and.w	r2, r3, #3
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 80e0 	beq.w	8006ac4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006904:	4b2f      	ldr	r3, [pc, #188]	; (80069c4 <HAL_GPIO_Init+0x238>)
 8006906:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800690a:	4a2e      	ldr	r2, [pc, #184]	; (80069c4 <HAL_GPIO_Init+0x238>)
 800690c:	f043 0302 	orr.w	r3, r3, #2
 8006910:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006914:	4b2b      	ldr	r3, [pc, #172]	; (80069c4 <HAL_GPIO_Init+0x238>)
 8006916:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006922:	4a29      	ldr	r2, [pc, #164]	; (80069c8 <HAL_GPIO_Init+0x23c>)
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	089b      	lsrs	r3, r3, #2
 8006928:	3302      	adds	r3, #2
 800692a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800692e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	f003 0303 	and.w	r3, r3, #3
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	220f      	movs	r2, #15
 800693a:	fa02 f303 	lsl.w	r3, r2, r3
 800693e:	43db      	mvns	r3, r3
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	4013      	ands	r3, r2
 8006944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a20      	ldr	r2, [pc, #128]	; (80069cc <HAL_GPIO_Init+0x240>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d052      	beq.n	80069f4 <HAL_GPIO_Init+0x268>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a1f      	ldr	r2, [pc, #124]	; (80069d0 <HAL_GPIO_Init+0x244>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d031      	beq.n	80069ba <HAL_GPIO_Init+0x22e>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a1e      	ldr	r2, [pc, #120]	; (80069d4 <HAL_GPIO_Init+0x248>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d02b      	beq.n	80069b6 <HAL_GPIO_Init+0x22a>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a1d      	ldr	r2, [pc, #116]	; (80069d8 <HAL_GPIO_Init+0x24c>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d025      	beq.n	80069b2 <HAL_GPIO_Init+0x226>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a1c      	ldr	r2, [pc, #112]	; (80069dc <HAL_GPIO_Init+0x250>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d01f      	beq.n	80069ae <HAL_GPIO_Init+0x222>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a1b      	ldr	r2, [pc, #108]	; (80069e0 <HAL_GPIO_Init+0x254>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d019      	beq.n	80069aa <HAL_GPIO_Init+0x21e>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a1a      	ldr	r2, [pc, #104]	; (80069e4 <HAL_GPIO_Init+0x258>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d013      	beq.n	80069a6 <HAL_GPIO_Init+0x21a>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a19      	ldr	r2, [pc, #100]	; (80069e8 <HAL_GPIO_Init+0x25c>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00d      	beq.n	80069a2 <HAL_GPIO_Init+0x216>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a18      	ldr	r2, [pc, #96]	; (80069ec <HAL_GPIO_Init+0x260>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d007      	beq.n	800699e <HAL_GPIO_Init+0x212>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a17      	ldr	r2, [pc, #92]	; (80069f0 <HAL_GPIO_Init+0x264>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d101      	bne.n	800699a <HAL_GPIO_Init+0x20e>
 8006996:	2309      	movs	r3, #9
 8006998:	e02d      	b.n	80069f6 <HAL_GPIO_Init+0x26a>
 800699a:	230a      	movs	r3, #10
 800699c:	e02b      	b.n	80069f6 <HAL_GPIO_Init+0x26a>
 800699e:	2308      	movs	r3, #8
 80069a0:	e029      	b.n	80069f6 <HAL_GPIO_Init+0x26a>
 80069a2:	2307      	movs	r3, #7
 80069a4:	e027      	b.n	80069f6 <HAL_GPIO_Init+0x26a>
 80069a6:	2306      	movs	r3, #6
 80069a8:	e025      	b.n	80069f6 <HAL_GPIO_Init+0x26a>
 80069aa:	2305      	movs	r3, #5
 80069ac:	e023      	b.n	80069f6 <HAL_GPIO_Init+0x26a>
 80069ae:	2304      	movs	r3, #4
 80069b0:	e021      	b.n	80069f6 <HAL_GPIO_Init+0x26a>
 80069b2:	2303      	movs	r3, #3
 80069b4:	e01f      	b.n	80069f6 <HAL_GPIO_Init+0x26a>
 80069b6:	2302      	movs	r3, #2
 80069b8:	e01d      	b.n	80069f6 <HAL_GPIO_Init+0x26a>
 80069ba:	2301      	movs	r3, #1
 80069bc:	e01b      	b.n	80069f6 <HAL_GPIO_Init+0x26a>
 80069be:	bf00      	nop
 80069c0:	58000080 	.word	0x58000080
 80069c4:	58024400 	.word	0x58024400
 80069c8:	58000400 	.word	0x58000400
 80069cc:	58020000 	.word	0x58020000
 80069d0:	58020400 	.word	0x58020400
 80069d4:	58020800 	.word	0x58020800
 80069d8:	58020c00 	.word	0x58020c00
 80069dc:	58021000 	.word	0x58021000
 80069e0:	58021400 	.word	0x58021400
 80069e4:	58021800 	.word	0x58021800
 80069e8:	58021c00 	.word	0x58021c00
 80069ec:	58022000 	.word	0x58022000
 80069f0:	58022400 	.word	0x58022400
 80069f4:	2300      	movs	r3, #0
 80069f6:	69fa      	ldr	r2, [r7, #28]
 80069f8:	f002 0203 	and.w	r2, r2, #3
 80069fc:	0092      	lsls	r2, r2, #2
 80069fe:	4093      	lsls	r3, r2
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a06:	4938      	ldr	r1, [pc, #224]	; (8006ae8 <HAL_GPIO_Init+0x35c>)
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	089b      	lsrs	r3, r3, #2
 8006a0c:	3302      	adds	r3, #2
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	43db      	mvns	r3, r3
 8006a1e:	69ba      	ldr	r2, [r7, #24]
 8006a20:	4013      	ands	r3, r2
 8006a22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d003      	beq.n	8006a38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	43db      	mvns	r3, r3
 8006a48:	69ba      	ldr	r2, [r7, #24]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	43db      	mvns	r3, r3
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	4013      	ands	r3, r2
 8006a78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006a8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	43db      	mvns	r3, r3
 8006aa2:	69ba      	ldr	r2, [r7, #24]
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d003      	beq.n	8006abc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006ab4:	69ba      	ldr	r2, [r7, #24]
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006abc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f47f ae63 	bne.w	80067a0 <HAL_GPIO_Init+0x14>
  }
}
 8006ada:	bf00      	nop
 8006adc:	bf00      	nop
 8006ade:	3724      	adds	r7, #36	; 0x24
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr
 8006ae8:	58000400 	.word	0x58000400

08006aec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	691a      	ldr	r2, [r3, #16]
 8006afc:	887b      	ldrh	r3, [r7, #2]
 8006afe:	4013      	ands	r3, r2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d002      	beq.n	8006b0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b04:	2301      	movs	r3, #1
 8006b06:	73fb      	strb	r3, [r7, #15]
 8006b08:	e001      	b.n	8006b0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	460b      	mov	r3, r1
 8006b26:	807b      	strh	r3, [r7, #2]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b2c:	787b      	ldrb	r3, [r7, #1]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b32:	887a      	ldrh	r2, [r7, #2]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006b38:	e003      	b.n	8006b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006b3a:	887b      	ldrh	r3, [r7, #2]
 8006b3c:	041a      	lsls	r2, r3, #16
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	619a      	str	r2, [r3, #24]
}
 8006b42:	bf00      	nop
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b085      	sub	sp, #20
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	460b      	mov	r3, r1
 8006b58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006b60:	887a      	ldrh	r2, [r7, #2]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	4013      	ands	r3, r2
 8006b66:	041a      	lsls	r2, r3, #16
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	43d9      	mvns	r1, r3
 8006b6c:	887b      	ldrh	r3, [r7, #2]
 8006b6e:	400b      	ands	r3, r1
 8006b70:	431a      	orrs	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	619a      	str	r2, [r3, #24]
}
 8006b76:	bf00      	nop
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b084      	sub	sp, #16
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e041      	b.n	8006c18 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006b9c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f245 5255 	movw	r2, #21845	; 0x5555
 8006ba6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	6852      	ldr	r2, [r2, #4]
 8006bb0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	6892      	ldr	r2, [r2, #8]
 8006bba:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006bbc:	f7fc fea8 	bl	8003910 <HAL_GetTick>
 8006bc0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006bc2:	e00f      	b.n	8006be4 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006bc4:	f7fc fea4 	bl	8003910 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b30      	cmp	r3, #48	; 0x30
 8006bd0:	d908      	bls.n	8006be4 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f003 0307 	and.w	r3, r3, #7
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e019      	b.n	8006c18 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f003 0307 	and.w	r3, r3, #7
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1e8      	bne.n	8006bc4 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	691a      	ldr	r2, [r3, #16]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d005      	beq.n	8006c0c <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	68d2      	ldr	r2, [r2, #12]
 8006c08:	611a      	str	r2, [r3, #16]
 8006c0a:	e004      	b.n	8006c16 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006c14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006c30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006c48:	4b19      	ldr	r3, [pc, #100]	; (8006cb0 <HAL_PWREx_ConfigSupply+0x70>)
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	d00a      	beq.n	8006c6a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006c54:	4b16      	ldr	r3, [pc, #88]	; (8006cb0 <HAL_PWREx_ConfigSupply+0x70>)
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f003 0307 	and.w	r3, r3, #7
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d001      	beq.n	8006c66 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e01f      	b.n	8006ca6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006c66:	2300      	movs	r3, #0
 8006c68:	e01d      	b.n	8006ca6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006c6a:	4b11      	ldr	r3, [pc, #68]	; (8006cb0 <HAL_PWREx_ConfigSupply+0x70>)
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	f023 0207 	bic.w	r2, r3, #7
 8006c72:	490f      	ldr	r1, [pc, #60]	; (8006cb0 <HAL_PWREx_ConfigSupply+0x70>)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006c7a:	f7fc fe49 	bl	8003910 <HAL_GetTick>
 8006c7e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006c80:	e009      	b.n	8006c96 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006c82:	f7fc fe45 	bl	8003910 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c90:	d901      	bls.n	8006c96 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e007      	b.n	8006ca6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006c96:	4b06      	ldr	r3, [pc, #24]	; (8006cb0 <HAL_PWREx_ConfigSupply+0x70>)
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ca2:	d1ee      	bne.n	8006c82 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	58024800 	.word	0x58024800

08006cb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b08c      	sub	sp, #48	; 0x30
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e3ff      	b.n	80074c6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 8087 	beq.w	8006de2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cd4:	4b99      	ldr	r3, [pc, #612]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006cde:	4b97      	ldr	r3, [pc, #604]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce6:	2b10      	cmp	r3, #16
 8006ce8:	d007      	beq.n	8006cfa <HAL_RCC_OscConfig+0x46>
 8006cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cec:	2b18      	cmp	r3, #24
 8006cee:	d110      	bne.n	8006d12 <HAL_RCC_OscConfig+0x5e>
 8006cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf2:	f003 0303 	and.w	r3, r3, #3
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d10b      	bne.n	8006d12 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cfa:	4b90      	ldr	r3, [pc, #576]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d06c      	beq.n	8006de0 <HAL_RCC_OscConfig+0x12c>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d168      	bne.n	8006de0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e3d9      	b.n	80074c6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d1a:	d106      	bne.n	8006d2a <HAL_RCC_OscConfig+0x76>
 8006d1c:	4b87      	ldr	r3, [pc, #540]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a86      	ldr	r2, [pc, #536]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d26:	6013      	str	r3, [r2, #0]
 8006d28:	e02e      	b.n	8006d88 <HAL_RCC_OscConfig+0xd4>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10c      	bne.n	8006d4c <HAL_RCC_OscConfig+0x98>
 8006d32:	4b82      	ldr	r3, [pc, #520]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a81      	ldr	r2, [pc, #516]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d3c:	6013      	str	r3, [r2, #0]
 8006d3e:	4b7f      	ldr	r3, [pc, #508]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a7e      	ldr	r2, [pc, #504]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d48:	6013      	str	r3, [r2, #0]
 8006d4a:	e01d      	b.n	8006d88 <HAL_RCC_OscConfig+0xd4>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d54:	d10c      	bne.n	8006d70 <HAL_RCC_OscConfig+0xbc>
 8006d56:	4b79      	ldr	r3, [pc, #484]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a78      	ldr	r2, [pc, #480]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d60:	6013      	str	r3, [r2, #0]
 8006d62:	4b76      	ldr	r3, [pc, #472]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a75      	ldr	r2, [pc, #468]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d6c:	6013      	str	r3, [r2, #0]
 8006d6e:	e00b      	b.n	8006d88 <HAL_RCC_OscConfig+0xd4>
 8006d70:	4b72      	ldr	r3, [pc, #456]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a71      	ldr	r2, [pc, #452]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d7a:	6013      	str	r3, [r2, #0]
 8006d7c:	4b6f      	ldr	r3, [pc, #444]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a6e      	ldr	r2, [pc, #440]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d013      	beq.n	8006db8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d90:	f7fc fdbe 	bl	8003910 <HAL_GetTick>
 8006d94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d96:	e008      	b.n	8006daa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d98:	f7fc fdba 	bl	8003910 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	2b64      	cmp	r3, #100	; 0x64
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e38d      	b.n	80074c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006daa:	4b64      	ldr	r3, [pc, #400]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d0f0      	beq.n	8006d98 <HAL_RCC_OscConfig+0xe4>
 8006db6:	e014      	b.n	8006de2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db8:	f7fc fdaa 	bl	8003910 <HAL_GetTick>
 8006dbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006dbe:	e008      	b.n	8006dd2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dc0:	f7fc fda6 	bl	8003910 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	2b64      	cmp	r3, #100	; 0x64
 8006dcc:	d901      	bls.n	8006dd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e379      	b.n	80074c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006dd2:	4b5a      	ldr	r3, [pc, #360]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1f0      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x10c>
 8006dde:	e000      	b.n	8006de2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0302 	and.w	r3, r3, #2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 80ae 	beq.w	8006f4c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006df0:	4b52      	ldr	r3, [pc, #328]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006df8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006dfa:	4b50      	ldr	r3, [pc, #320]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfe:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d007      	beq.n	8006e16 <HAL_RCC_OscConfig+0x162>
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	2b18      	cmp	r3, #24
 8006e0a:	d13a      	bne.n	8006e82 <HAL_RCC_OscConfig+0x1ce>
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	f003 0303 	and.w	r3, r3, #3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d135      	bne.n	8006e82 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e16:	4b49      	ldr	r3, [pc, #292]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0304 	and.w	r3, r3, #4
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d005      	beq.n	8006e2e <HAL_RCC_OscConfig+0x17a>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e34b      	b.n	80074c6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e2e:	f7fc fd7b 	bl	8003928 <HAL_GetREVID>
 8006e32:	4603      	mov	r3, r0
 8006e34:	f241 0203 	movw	r2, #4099	; 0x1003
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d817      	bhi.n	8006e6c <HAL_RCC_OscConfig+0x1b8>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	2b40      	cmp	r3, #64	; 0x40
 8006e42:	d108      	bne.n	8006e56 <HAL_RCC_OscConfig+0x1a2>
 8006e44:	4b3d      	ldr	r3, [pc, #244]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006e4c:	4a3b      	ldr	r2, [pc, #236]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e52:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e54:	e07a      	b.n	8006f4c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e56:	4b39      	ldr	r3, [pc, #228]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	031b      	lsls	r3, r3, #12
 8006e64:	4935      	ldr	r1, [pc, #212]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e6a:	e06f      	b.n	8006f4c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e6c:	4b33      	ldr	r3, [pc, #204]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	061b      	lsls	r3, r3, #24
 8006e7a:	4930      	ldr	r1, [pc, #192]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e80:	e064      	b.n	8006f4c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d045      	beq.n	8006f16 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e8a:	4b2c      	ldr	r3, [pc, #176]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f023 0219 	bic.w	r2, r3, #25
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	4929      	ldr	r1, [pc, #164]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e9c:	f7fc fd38 	bl	8003910 <HAL_GetTick>
 8006ea0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ea2:	e008      	b.n	8006eb6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ea4:	f7fc fd34 	bl	8003910 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d901      	bls.n	8006eb6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e307      	b.n	80074c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006eb6:	4b21      	ldr	r3, [pc, #132]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0304 	and.w	r3, r3, #4
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d0f0      	beq.n	8006ea4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ec2:	f7fc fd31 	bl	8003928 <HAL_GetREVID>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d817      	bhi.n	8006f00 <HAL_RCC_OscConfig+0x24c>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	2b40      	cmp	r3, #64	; 0x40
 8006ed6:	d108      	bne.n	8006eea <HAL_RCC_OscConfig+0x236>
 8006ed8:	4b18      	ldr	r3, [pc, #96]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006ee0:	4a16      	ldr	r2, [pc, #88]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ee6:	6053      	str	r3, [r2, #4]
 8006ee8:	e030      	b.n	8006f4c <HAL_RCC_OscConfig+0x298>
 8006eea:	4b14      	ldr	r3, [pc, #80]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	031b      	lsls	r3, r3, #12
 8006ef8:	4910      	ldr	r1, [pc, #64]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	604b      	str	r3, [r1, #4]
 8006efe:	e025      	b.n	8006f4c <HAL_RCC_OscConfig+0x298>
 8006f00:	4b0e      	ldr	r3, [pc, #56]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	061b      	lsls	r3, r3, #24
 8006f0e:	490b      	ldr	r1, [pc, #44]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	604b      	str	r3, [r1, #4]
 8006f14:	e01a      	b.n	8006f4c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f16:	4b09      	ldr	r3, [pc, #36]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a08      	ldr	r2, [pc, #32]	; (8006f3c <HAL_RCC_OscConfig+0x288>)
 8006f1c:	f023 0301 	bic.w	r3, r3, #1
 8006f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f22:	f7fc fcf5 	bl	8003910 <HAL_GetTick>
 8006f26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f28:	e00a      	b.n	8006f40 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f2a:	f7fc fcf1 	bl	8003910 <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d903      	bls.n	8006f40 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e2c4      	b.n	80074c6 <HAL_RCC_OscConfig+0x812>
 8006f3c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f40:	4ba4      	ldr	r3, [pc, #656]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0304 	and.w	r3, r3, #4
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1ee      	bne.n	8006f2a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0310 	and.w	r3, r3, #16
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 80a9 	beq.w	80070ac <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f5a:	4b9e      	ldr	r3, [pc, #632]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f62:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f64:	4b9b      	ldr	r3, [pc, #620]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 8006f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f68:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	d007      	beq.n	8006f80 <HAL_RCC_OscConfig+0x2cc>
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	2b18      	cmp	r3, #24
 8006f74:	d13a      	bne.n	8006fec <HAL_RCC_OscConfig+0x338>
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f003 0303 	and.w	r3, r3, #3
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d135      	bne.n	8006fec <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f80:	4b94      	ldr	r3, [pc, #592]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d005      	beq.n	8006f98 <HAL_RCC_OscConfig+0x2e4>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	69db      	ldr	r3, [r3, #28]
 8006f90:	2b80      	cmp	r3, #128	; 0x80
 8006f92:	d001      	beq.n	8006f98 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e296      	b.n	80074c6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f98:	f7fc fcc6 	bl	8003928 <HAL_GetREVID>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d817      	bhi.n	8006fd6 <HAL_RCC_OscConfig+0x322>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	2b20      	cmp	r3, #32
 8006fac:	d108      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x30c>
 8006fae:	4b89      	ldr	r3, [pc, #548]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006fb6:	4a87      	ldr	r2, [pc, #540]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 8006fb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fbc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006fbe:	e075      	b.n	80070ac <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006fc0:	4b84      	ldr	r3, [pc, #528]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a1b      	ldr	r3, [r3, #32]
 8006fcc:	069b      	lsls	r3, r3, #26
 8006fce:	4981      	ldr	r1, [pc, #516]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006fd4:	e06a      	b.n	80070ac <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006fd6:	4b7f      	ldr	r3, [pc, #508]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	061b      	lsls	r3, r3, #24
 8006fe4:	497b      	ldr	r1, [pc, #492]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006fea:	e05f      	b.n	80070ac <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d042      	beq.n	800707a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006ff4:	4b77      	ldr	r3, [pc, #476]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a76      	ldr	r2, [pc, #472]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 8006ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007000:	f7fc fc86 	bl	8003910 <HAL_GetTick>
 8007004:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007006:	e008      	b.n	800701a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007008:	f7fc fc82 	bl	8003910 <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	2b02      	cmp	r3, #2
 8007014:	d901      	bls.n	800701a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e255      	b.n	80074c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800701a:	4b6e      	ldr	r3, [pc, #440]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007022:	2b00      	cmp	r3, #0
 8007024:	d0f0      	beq.n	8007008 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007026:	f7fc fc7f 	bl	8003928 <HAL_GetREVID>
 800702a:	4603      	mov	r3, r0
 800702c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007030:	4293      	cmp	r3, r2
 8007032:	d817      	bhi.n	8007064 <HAL_RCC_OscConfig+0x3b0>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	2b20      	cmp	r3, #32
 800703a:	d108      	bne.n	800704e <HAL_RCC_OscConfig+0x39a>
 800703c:	4b65      	ldr	r3, [pc, #404]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007044:	4a63      	ldr	r2, [pc, #396]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 8007046:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800704a:	6053      	str	r3, [r2, #4]
 800704c:	e02e      	b.n	80070ac <HAL_RCC_OscConfig+0x3f8>
 800704e:	4b61      	ldr	r3, [pc, #388]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	069b      	lsls	r3, r3, #26
 800705c:	495d      	ldr	r1, [pc, #372]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 800705e:	4313      	orrs	r3, r2
 8007060:	604b      	str	r3, [r1, #4]
 8007062:	e023      	b.n	80070ac <HAL_RCC_OscConfig+0x3f8>
 8007064:	4b5b      	ldr	r3, [pc, #364]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	061b      	lsls	r3, r3, #24
 8007072:	4958      	ldr	r1, [pc, #352]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 8007074:	4313      	orrs	r3, r2
 8007076:	60cb      	str	r3, [r1, #12]
 8007078:	e018      	b.n	80070ac <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800707a:	4b56      	ldr	r3, [pc, #344]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a55      	ldr	r2, [pc, #340]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 8007080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007086:	f7fc fc43 	bl	8003910 <HAL_GetTick>
 800708a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800708c:	e008      	b.n	80070a0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800708e:	f7fc fc3f 	bl	8003910 <HAL_GetTick>
 8007092:	4602      	mov	r2, r0
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	2b02      	cmp	r3, #2
 800709a:	d901      	bls.n	80070a0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e212      	b.n	80074c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80070a0:	4b4c      	ldr	r3, [pc, #304]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1f0      	bne.n	800708e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0308 	and.w	r3, r3, #8
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d036      	beq.n	8007126 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	695b      	ldr	r3, [r3, #20]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d019      	beq.n	80070f4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070c0:	4b44      	ldr	r3, [pc, #272]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 80070c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070c4:	4a43      	ldr	r2, [pc, #268]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 80070c6:	f043 0301 	orr.w	r3, r3, #1
 80070ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070cc:	f7fc fc20 	bl	8003910 <HAL_GetTick>
 80070d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80070d2:	e008      	b.n	80070e6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070d4:	f7fc fc1c 	bl	8003910 <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d901      	bls.n	80070e6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e1ef      	b.n	80074c6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80070e6:	4b3b      	ldr	r3, [pc, #236]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 80070e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d0f0      	beq.n	80070d4 <HAL_RCC_OscConfig+0x420>
 80070f2:	e018      	b.n	8007126 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070f4:	4b37      	ldr	r3, [pc, #220]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 80070f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070f8:	4a36      	ldr	r2, [pc, #216]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 80070fa:	f023 0301 	bic.w	r3, r3, #1
 80070fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007100:	f7fc fc06 	bl	8003910 <HAL_GetTick>
 8007104:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007106:	e008      	b.n	800711a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007108:	f7fc fc02 	bl	8003910 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	2b02      	cmp	r3, #2
 8007114:	d901      	bls.n	800711a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e1d5      	b.n	80074c6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800711a:	4b2e      	ldr	r3, [pc, #184]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 800711c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800711e:	f003 0302 	and.w	r3, r3, #2
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1f0      	bne.n	8007108 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0320 	and.w	r3, r3, #32
 800712e:	2b00      	cmp	r3, #0
 8007130:	d036      	beq.n	80071a0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d019      	beq.n	800716e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800713a:	4b26      	ldr	r3, [pc, #152]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a25      	ldr	r2, [pc, #148]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 8007140:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007144:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007146:	f7fc fbe3 	bl	8003910 <HAL_GetTick>
 800714a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800714c:	e008      	b.n	8007160 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800714e:	f7fc fbdf 	bl	8003910 <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	2b02      	cmp	r3, #2
 800715a:	d901      	bls.n	8007160 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e1b2      	b.n	80074c6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007160:	4b1c      	ldr	r3, [pc, #112]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d0f0      	beq.n	800714e <HAL_RCC_OscConfig+0x49a>
 800716c:	e018      	b.n	80071a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800716e:	4b19      	ldr	r3, [pc, #100]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a18      	ldr	r2, [pc, #96]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 8007174:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007178:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800717a:	f7fc fbc9 	bl	8003910 <HAL_GetTick>
 800717e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007180:	e008      	b.n	8007194 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007182:	f7fc fbc5 	bl	8003910 <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	2b02      	cmp	r3, #2
 800718e:	d901      	bls.n	8007194 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	e198      	b.n	80074c6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007194:	4b0f      	ldr	r3, [pc, #60]	; (80071d4 <HAL_RCC_OscConfig+0x520>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1f0      	bne.n	8007182 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0304 	and.w	r3, r3, #4
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 8085 	beq.w	80072b8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80071ae:	4b0a      	ldr	r3, [pc, #40]	; (80071d8 <HAL_RCC_OscConfig+0x524>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a09      	ldr	r2, [pc, #36]	; (80071d8 <HAL_RCC_OscConfig+0x524>)
 80071b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071ba:	f7fc fba9 	bl	8003910 <HAL_GetTick>
 80071be:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071c0:	e00c      	b.n	80071dc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80071c2:	f7fc fba5 	bl	8003910 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	2b64      	cmp	r3, #100	; 0x64
 80071ce:	d905      	bls.n	80071dc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e178      	b.n	80074c6 <HAL_RCC_OscConfig+0x812>
 80071d4:	58024400 	.word	0x58024400
 80071d8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071dc:	4b96      	ldr	r3, [pc, #600]	; (8007438 <HAL_RCC_OscConfig+0x784>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d0ec      	beq.n	80071c2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d106      	bne.n	80071fe <HAL_RCC_OscConfig+0x54a>
 80071f0:	4b92      	ldr	r3, [pc, #584]	; (800743c <HAL_RCC_OscConfig+0x788>)
 80071f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f4:	4a91      	ldr	r2, [pc, #580]	; (800743c <HAL_RCC_OscConfig+0x788>)
 80071f6:	f043 0301 	orr.w	r3, r3, #1
 80071fa:	6713      	str	r3, [r2, #112]	; 0x70
 80071fc:	e02d      	b.n	800725a <HAL_RCC_OscConfig+0x5a6>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10c      	bne.n	8007220 <HAL_RCC_OscConfig+0x56c>
 8007206:	4b8d      	ldr	r3, [pc, #564]	; (800743c <HAL_RCC_OscConfig+0x788>)
 8007208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800720a:	4a8c      	ldr	r2, [pc, #560]	; (800743c <HAL_RCC_OscConfig+0x788>)
 800720c:	f023 0301 	bic.w	r3, r3, #1
 8007210:	6713      	str	r3, [r2, #112]	; 0x70
 8007212:	4b8a      	ldr	r3, [pc, #552]	; (800743c <HAL_RCC_OscConfig+0x788>)
 8007214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007216:	4a89      	ldr	r2, [pc, #548]	; (800743c <HAL_RCC_OscConfig+0x788>)
 8007218:	f023 0304 	bic.w	r3, r3, #4
 800721c:	6713      	str	r3, [r2, #112]	; 0x70
 800721e:	e01c      	b.n	800725a <HAL_RCC_OscConfig+0x5a6>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	2b05      	cmp	r3, #5
 8007226:	d10c      	bne.n	8007242 <HAL_RCC_OscConfig+0x58e>
 8007228:	4b84      	ldr	r3, [pc, #528]	; (800743c <HAL_RCC_OscConfig+0x788>)
 800722a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722c:	4a83      	ldr	r2, [pc, #524]	; (800743c <HAL_RCC_OscConfig+0x788>)
 800722e:	f043 0304 	orr.w	r3, r3, #4
 8007232:	6713      	str	r3, [r2, #112]	; 0x70
 8007234:	4b81      	ldr	r3, [pc, #516]	; (800743c <HAL_RCC_OscConfig+0x788>)
 8007236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007238:	4a80      	ldr	r2, [pc, #512]	; (800743c <HAL_RCC_OscConfig+0x788>)
 800723a:	f043 0301 	orr.w	r3, r3, #1
 800723e:	6713      	str	r3, [r2, #112]	; 0x70
 8007240:	e00b      	b.n	800725a <HAL_RCC_OscConfig+0x5a6>
 8007242:	4b7e      	ldr	r3, [pc, #504]	; (800743c <HAL_RCC_OscConfig+0x788>)
 8007244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007246:	4a7d      	ldr	r2, [pc, #500]	; (800743c <HAL_RCC_OscConfig+0x788>)
 8007248:	f023 0301 	bic.w	r3, r3, #1
 800724c:	6713      	str	r3, [r2, #112]	; 0x70
 800724e:	4b7b      	ldr	r3, [pc, #492]	; (800743c <HAL_RCC_OscConfig+0x788>)
 8007250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007252:	4a7a      	ldr	r2, [pc, #488]	; (800743c <HAL_RCC_OscConfig+0x788>)
 8007254:	f023 0304 	bic.w	r3, r3, #4
 8007258:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d015      	beq.n	800728e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007262:	f7fc fb55 	bl	8003910 <HAL_GetTick>
 8007266:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007268:	e00a      	b.n	8007280 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800726a:	f7fc fb51 	bl	8003910 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	f241 3288 	movw	r2, #5000	; 0x1388
 8007278:	4293      	cmp	r3, r2
 800727a:	d901      	bls.n	8007280 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e122      	b.n	80074c6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007280:	4b6e      	ldr	r3, [pc, #440]	; (800743c <HAL_RCC_OscConfig+0x788>)
 8007282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d0ee      	beq.n	800726a <HAL_RCC_OscConfig+0x5b6>
 800728c:	e014      	b.n	80072b8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800728e:	f7fc fb3f 	bl	8003910 <HAL_GetTick>
 8007292:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007294:	e00a      	b.n	80072ac <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007296:	f7fc fb3b 	bl	8003910 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d901      	bls.n	80072ac <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e10c      	b.n	80074c6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80072ac:	4b63      	ldr	r3, [pc, #396]	; (800743c <HAL_RCC_OscConfig+0x788>)
 80072ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b0:	f003 0302 	and.w	r3, r3, #2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1ee      	bne.n	8007296 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 8101 	beq.w	80074c4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80072c2:	4b5e      	ldr	r3, [pc, #376]	; (800743c <HAL_RCC_OscConfig+0x788>)
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072ca:	2b18      	cmp	r3, #24
 80072cc:	f000 80bc 	beq.w	8007448 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	f040 8095 	bne.w	8007404 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072da:	4b58      	ldr	r3, [pc, #352]	; (800743c <HAL_RCC_OscConfig+0x788>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a57      	ldr	r2, [pc, #348]	; (800743c <HAL_RCC_OscConfig+0x788>)
 80072e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e6:	f7fc fb13 	bl	8003910 <HAL_GetTick>
 80072ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072ec:	e008      	b.n	8007300 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072ee:	f7fc fb0f 	bl	8003910 <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d901      	bls.n	8007300 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e0e2      	b.n	80074c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007300:	4b4e      	ldr	r3, [pc, #312]	; (800743c <HAL_RCC_OscConfig+0x788>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1f0      	bne.n	80072ee <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800730c:	4b4b      	ldr	r3, [pc, #300]	; (800743c <HAL_RCC_OscConfig+0x788>)
 800730e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007310:	4b4b      	ldr	r3, [pc, #300]	; (8007440 <HAL_RCC_OscConfig+0x78c>)
 8007312:	4013      	ands	r3, r2
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800731c:	0112      	lsls	r2, r2, #4
 800731e:	430a      	orrs	r2, r1
 8007320:	4946      	ldr	r1, [pc, #280]	; (800743c <HAL_RCC_OscConfig+0x788>)
 8007322:	4313      	orrs	r3, r2
 8007324:	628b      	str	r3, [r1, #40]	; 0x28
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732a:	3b01      	subs	r3, #1
 800732c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007334:	3b01      	subs	r3, #1
 8007336:	025b      	lsls	r3, r3, #9
 8007338:	b29b      	uxth	r3, r3
 800733a:	431a      	orrs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007340:	3b01      	subs	r3, #1
 8007342:	041b      	lsls	r3, r3, #16
 8007344:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007348:	431a      	orrs	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734e:	3b01      	subs	r3, #1
 8007350:	061b      	lsls	r3, r3, #24
 8007352:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007356:	4939      	ldr	r1, [pc, #228]	; (800743c <HAL_RCC_OscConfig+0x788>)
 8007358:	4313      	orrs	r3, r2
 800735a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800735c:	4b37      	ldr	r3, [pc, #220]	; (800743c <HAL_RCC_OscConfig+0x788>)
 800735e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007360:	4a36      	ldr	r2, [pc, #216]	; (800743c <HAL_RCC_OscConfig+0x788>)
 8007362:	f023 0301 	bic.w	r3, r3, #1
 8007366:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007368:	4b34      	ldr	r3, [pc, #208]	; (800743c <HAL_RCC_OscConfig+0x788>)
 800736a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800736c:	4b35      	ldr	r3, [pc, #212]	; (8007444 <HAL_RCC_OscConfig+0x790>)
 800736e:	4013      	ands	r3, r2
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007374:	00d2      	lsls	r2, r2, #3
 8007376:	4931      	ldr	r1, [pc, #196]	; (800743c <HAL_RCC_OscConfig+0x788>)
 8007378:	4313      	orrs	r3, r2
 800737a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800737c:	4b2f      	ldr	r3, [pc, #188]	; (800743c <HAL_RCC_OscConfig+0x788>)
 800737e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007380:	f023 020c 	bic.w	r2, r3, #12
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007388:	492c      	ldr	r1, [pc, #176]	; (800743c <HAL_RCC_OscConfig+0x788>)
 800738a:	4313      	orrs	r3, r2
 800738c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800738e:	4b2b      	ldr	r3, [pc, #172]	; (800743c <HAL_RCC_OscConfig+0x788>)
 8007390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007392:	f023 0202 	bic.w	r2, r3, #2
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800739a:	4928      	ldr	r1, [pc, #160]	; (800743c <HAL_RCC_OscConfig+0x788>)
 800739c:	4313      	orrs	r3, r2
 800739e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80073a0:	4b26      	ldr	r3, [pc, #152]	; (800743c <HAL_RCC_OscConfig+0x788>)
 80073a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a4:	4a25      	ldr	r2, [pc, #148]	; (800743c <HAL_RCC_OscConfig+0x788>)
 80073a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073ac:	4b23      	ldr	r3, [pc, #140]	; (800743c <HAL_RCC_OscConfig+0x788>)
 80073ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b0:	4a22      	ldr	r2, [pc, #136]	; (800743c <HAL_RCC_OscConfig+0x788>)
 80073b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80073b8:	4b20      	ldr	r3, [pc, #128]	; (800743c <HAL_RCC_OscConfig+0x788>)
 80073ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073bc:	4a1f      	ldr	r2, [pc, #124]	; (800743c <HAL_RCC_OscConfig+0x788>)
 80073be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80073c4:	4b1d      	ldr	r3, [pc, #116]	; (800743c <HAL_RCC_OscConfig+0x788>)
 80073c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c8:	4a1c      	ldr	r2, [pc, #112]	; (800743c <HAL_RCC_OscConfig+0x788>)
 80073ca:	f043 0301 	orr.w	r3, r3, #1
 80073ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073d0:	4b1a      	ldr	r3, [pc, #104]	; (800743c <HAL_RCC_OscConfig+0x788>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a19      	ldr	r2, [pc, #100]	; (800743c <HAL_RCC_OscConfig+0x788>)
 80073d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073dc:	f7fc fa98 	bl	8003910 <HAL_GetTick>
 80073e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073e2:	e008      	b.n	80073f6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073e4:	f7fc fa94 	bl	8003910 <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d901      	bls.n	80073f6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e067      	b.n	80074c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073f6:	4b11      	ldr	r3, [pc, #68]	; (800743c <HAL_RCC_OscConfig+0x788>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d0f0      	beq.n	80073e4 <HAL_RCC_OscConfig+0x730>
 8007402:	e05f      	b.n	80074c4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007404:	4b0d      	ldr	r3, [pc, #52]	; (800743c <HAL_RCC_OscConfig+0x788>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a0c      	ldr	r2, [pc, #48]	; (800743c <HAL_RCC_OscConfig+0x788>)
 800740a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800740e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007410:	f7fc fa7e 	bl	8003910 <HAL_GetTick>
 8007414:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007416:	e008      	b.n	800742a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007418:	f7fc fa7a 	bl	8003910 <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	2b02      	cmp	r3, #2
 8007424:	d901      	bls.n	800742a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e04d      	b.n	80074c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800742a:	4b04      	ldr	r3, [pc, #16]	; (800743c <HAL_RCC_OscConfig+0x788>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1f0      	bne.n	8007418 <HAL_RCC_OscConfig+0x764>
 8007436:	e045      	b.n	80074c4 <HAL_RCC_OscConfig+0x810>
 8007438:	58024800 	.word	0x58024800
 800743c:	58024400 	.word	0x58024400
 8007440:	fffffc0c 	.word	0xfffffc0c
 8007444:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007448:	4b21      	ldr	r3, [pc, #132]	; (80074d0 <HAL_RCC_OscConfig+0x81c>)
 800744a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800744e:	4b20      	ldr	r3, [pc, #128]	; (80074d0 <HAL_RCC_OscConfig+0x81c>)
 8007450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007452:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007458:	2b01      	cmp	r3, #1
 800745a:	d031      	beq.n	80074c0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	f003 0203 	and.w	r2, r3, #3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007466:	429a      	cmp	r2, r3
 8007468:	d12a      	bne.n	80074c0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	091b      	lsrs	r3, r3, #4
 800746e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007476:	429a      	cmp	r2, r3
 8007478:	d122      	bne.n	80074c0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007484:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007486:	429a      	cmp	r2, r3
 8007488:	d11a      	bne.n	80074c0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	0a5b      	lsrs	r3, r3, #9
 800748e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007496:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007498:	429a      	cmp	r2, r3
 800749a:	d111      	bne.n	80074c0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	0c1b      	lsrs	r3, r3, #16
 80074a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d108      	bne.n	80074c0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	0e1b      	lsrs	r3, r3, #24
 80074b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80074bc:	429a      	cmp	r2, r3
 80074be:	d001      	beq.n	80074c4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e000      	b.n	80074c6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3730      	adds	r7, #48	; 0x30
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	58024400 	.word	0x58024400

080074d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e19c      	b.n	8007822 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074e8:	4b8a      	ldr	r3, [pc, #552]	; (8007714 <HAL_RCC_ClockConfig+0x240>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 030f 	and.w	r3, r3, #15
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d910      	bls.n	8007518 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074f6:	4b87      	ldr	r3, [pc, #540]	; (8007714 <HAL_RCC_ClockConfig+0x240>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f023 020f 	bic.w	r2, r3, #15
 80074fe:	4985      	ldr	r1, [pc, #532]	; (8007714 <HAL_RCC_ClockConfig+0x240>)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	4313      	orrs	r3, r2
 8007504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007506:	4b83      	ldr	r3, [pc, #524]	; (8007714 <HAL_RCC_ClockConfig+0x240>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 030f 	and.w	r3, r3, #15
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	429a      	cmp	r2, r3
 8007512:	d001      	beq.n	8007518 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e184      	b.n	8007822 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0304 	and.w	r3, r3, #4
 8007520:	2b00      	cmp	r3, #0
 8007522:	d010      	beq.n	8007546 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	691a      	ldr	r2, [r3, #16]
 8007528:	4b7b      	ldr	r3, [pc, #492]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007530:	429a      	cmp	r2, r3
 8007532:	d908      	bls.n	8007546 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007534:	4b78      	ldr	r3, [pc, #480]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	4975      	ldr	r1, [pc, #468]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 8007542:	4313      	orrs	r3, r2
 8007544:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0308 	and.w	r3, r3, #8
 800754e:	2b00      	cmp	r3, #0
 8007550:	d010      	beq.n	8007574 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	695a      	ldr	r2, [r3, #20]
 8007556:	4b70      	ldr	r3, [pc, #448]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800755e:	429a      	cmp	r2, r3
 8007560:	d908      	bls.n	8007574 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007562:	4b6d      	ldr	r3, [pc, #436]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	496a      	ldr	r1, [pc, #424]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 8007570:	4313      	orrs	r3, r2
 8007572:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0310 	and.w	r3, r3, #16
 800757c:	2b00      	cmp	r3, #0
 800757e:	d010      	beq.n	80075a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	699a      	ldr	r2, [r3, #24]
 8007584:	4b64      	ldr	r3, [pc, #400]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 8007586:	69db      	ldr	r3, [r3, #28]
 8007588:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800758c:	429a      	cmp	r2, r3
 800758e:	d908      	bls.n	80075a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007590:	4b61      	ldr	r3, [pc, #388]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 8007592:	69db      	ldr	r3, [r3, #28]
 8007594:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	495e      	ldr	r1, [pc, #376]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0320 	and.w	r3, r3, #32
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d010      	beq.n	80075d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	69da      	ldr	r2, [r3, #28]
 80075b2:	4b59      	ldr	r3, [pc, #356]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 80075b4:	6a1b      	ldr	r3, [r3, #32]
 80075b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d908      	bls.n	80075d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80075be:	4b56      	ldr	r3, [pc, #344]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	4953      	ldr	r1, [pc, #332]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d010      	beq.n	80075fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68da      	ldr	r2, [r3, #12]
 80075e0:	4b4d      	ldr	r3, [pc, #308]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	f003 030f 	and.w	r3, r3, #15
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d908      	bls.n	80075fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075ec:	4b4a      	ldr	r3, [pc, #296]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	f023 020f 	bic.w	r2, r3, #15
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	4947      	ldr	r1, [pc, #284]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	d055      	beq.n	80076b6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800760a:	4b43      	ldr	r3, [pc, #268]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	4940      	ldr	r1, [pc, #256]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 8007618:	4313      	orrs	r3, r2
 800761a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	2b02      	cmp	r3, #2
 8007622:	d107      	bne.n	8007634 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007624:	4b3c      	ldr	r3, [pc, #240]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d121      	bne.n	8007674 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e0f6      	b.n	8007822 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	2b03      	cmp	r3, #3
 800763a:	d107      	bne.n	800764c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800763c:	4b36      	ldr	r3, [pc, #216]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d115      	bne.n	8007674 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e0ea      	b.n	8007822 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d107      	bne.n	8007664 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007654:	4b30      	ldr	r3, [pc, #192]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800765c:	2b00      	cmp	r3, #0
 800765e:	d109      	bne.n	8007674 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e0de      	b.n	8007822 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007664:	4b2c      	ldr	r3, [pc, #176]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0304 	and.w	r3, r3, #4
 800766c:	2b00      	cmp	r3, #0
 800766e:	d101      	bne.n	8007674 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e0d6      	b.n	8007822 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007674:	4b28      	ldr	r3, [pc, #160]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	f023 0207 	bic.w	r2, r3, #7
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	4925      	ldr	r1, [pc, #148]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 8007682:	4313      	orrs	r3, r2
 8007684:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007686:	f7fc f943 	bl	8003910 <HAL_GetTick>
 800768a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800768c:	e00a      	b.n	80076a4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800768e:	f7fc f93f 	bl	8003910 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	f241 3288 	movw	r2, #5000	; 0x1388
 800769c:	4293      	cmp	r3, r2
 800769e:	d901      	bls.n	80076a4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e0be      	b.n	8007822 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076a4:	4b1c      	ldr	r3, [pc, #112]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	00db      	lsls	r3, r3, #3
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d1eb      	bne.n	800768e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0302 	and.w	r3, r3, #2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d010      	beq.n	80076e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68da      	ldr	r2, [r3, #12]
 80076c6:	4b14      	ldr	r3, [pc, #80]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	f003 030f 	and.w	r3, r3, #15
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d208      	bcs.n	80076e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076d2:	4b11      	ldr	r3, [pc, #68]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	f023 020f 	bic.w	r2, r3, #15
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	490e      	ldr	r1, [pc, #56]	; (8007718 <HAL_RCC_ClockConfig+0x244>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80076e4:	4b0b      	ldr	r3, [pc, #44]	; (8007714 <HAL_RCC_ClockConfig+0x240>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 030f 	and.w	r3, r3, #15
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d214      	bcs.n	800771c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076f2:	4b08      	ldr	r3, [pc, #32]	; (8007714 <HAL_RCC_ClockConfig+0x240>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f023 020f 	bic.w	r2, r3, #15
 80076fa:	4906      	ldr	r1, [pc, #24]	; (8007714 <HAL_RCC_ClockConfig+0x240>)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	4313      	orrs	r3, r2
 8007700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007702:	4b04      	ldr	r3, [pc, #16]	; (8007714 <HAL_RCC_ClockConfig+0x240>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 030f 	and.w	r3, r3, #15
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	429a      	cmp	r2, r3
 800770e:	d005      	beq.n	800771c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e086      	b.n	8007822 <HAL_RCC_ClockConfig+0x34e>
 8007714:	52002000 	.word	0x52002000
 8007718:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 0304 	and.w	r3, r3, #4
 8007724:	2b00      	cmp	r3, #0
 8007726:	d010      	beq.n	800774a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	691a      	ldr	r2, [r3, #16]
 800772c:	4b3f      	ldr	r3, [pc, #252]	; (800782c <HAL_RCC_ClockConfig+0x358>)
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007734:	429a      	cmp	r2, r3
 8007736:	d208      	bcs.n	800774a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007738:	4b3c      	ldr	r3, [pc, #240]	; (800782c <HAL_RCC_ClockConfig+0x358>)
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	4939      	ldr	r1, [pc, #228]	; (800782c <HAL_RCC_ClockConfig+0x358>)
 8007746:	4313      	orrs	r3, r2
 8007748:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0308 	and.w	r3, r3, #8
 8007752:	2b00      	cmp	r3, #0
 8007754:	d010      	beq.n	8007778 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	695a      	ldr	r2, [r3, #20]
 800775a:	4b34      	ldr	r3, [pc, #208]	; (800782c <HAL_RCC_ClockConfig+0x358>)
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007762:	429a      	cmp	r2, r3
 8007764:	d208      	bcs.n	8007778 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007766:	4b31      	ldr	r3, [pc, #196]	; (800782c <HAL_RCC_ClockConfig+0x358>)
 8007768:	69db      	ldr	r3, [r3, #28]
 800776a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	695b      	ldr	r3, [r3, #20]
 8007772:	492e      	ldr	r1, [pc, #184]	; (800782c <HAL_RCC_ClockConfig+0x358>)
 8007774:	4313      	orrs	r3, r2
 8007776:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0310 	and.w	r3, r3, #16
 8007780:	2b00      	cmp	r3, #0
 8007782:	d010      	beq.n	80077a6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	699a      	ldr	r2, [r3, #24]
 8007788:	4b28      	ldr	r3, [pc, #160]	; (800782c <HAL_RCC_ClockConfig+0x358>)
 800778a:	69db      	ldr	r3, [r3, #28]
 800778c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007790:	429a      	cmp	r2, r3
 8007792:	d208      	bcs.n	80077a6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007794:	4b25      	ldr	r3, [pc, #148]	; (800782c <HAL_RCC_ClockConfig+0x358>)
 8007796:	69db      	ldr	r3, [r3, #28]
 8007798:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	4922      	ldr	r1, [pc, #136]	; (800782c <HAL_RCC_ClockConfig+0x358>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0320 	and.w	r3, r3, #32
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d010      	beq.n	80077d4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	69da      	ldr	r2, [r3, #28]
 80077b6:	4b1d      	ldr	r3, [pc, #116]	; (800782c <HAL_RCC_ClockConfig+0x358>)
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077be:	429a      	cmp	r2, r3
 80077c0:	d208      	bcs.n	80077d4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80077c2:	4b1a      	ldr	r3, [pc, #104]	; (800782c <HAL_RCC_ClockConfig+0x358>)
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	69db      	ldr	r3, [r3, #28]
 80077ce:	4917      	ldr	r1, [pc, #92]	; (800782c <HAL_RCC_ClockConfig+0x358>)
 80077d0:	4313      	orrs	r3, r2
 80077d2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80077d4:	f000 f834 	bl	8007840 <HAL_RCC_GetSysClockFreq>
 80077d8:	4602      	mov	r2, r0
 80077da:	4b14      	ldr	r3, [pc, #80]	; (800782c <HAL_RCC_ClockConfig+0x358>)
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	0a1b      	lsrs	r3, r3, #8
 80077e0:	f003 030f 	and.w	r3, r3, #15
 80077e4:	4912      	ldr	r1, [pc, #72]	; (8007830 <HAL_RCC_ClockConfig+0x35c>)
 80077e6:	5ccb      	ldrb	r3, [r1, r3]
 80077e8:	f003 031f 	and.w	r3, r3, #31
 80077ec:	fa22 f303 	lsr.w	r3, r2, r3
 80077f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077f2:	4b0e      	ldr	r3, [pc, #56]	; (800782c <HAL_RCC_ClockConfig+0x358>)
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	f003 030f 	and.w	r3, r3, #15
 80077fa:	4a0d      	ldr	r2, [pc, #52]	; (8007830 <HAL_RCC_ClockConfig+0x35c>)
 80077fc:	5cd3      	ldrb	r3, [r2, r3]
 80077fe:	f003 031f 	and.w	r3, r3, #31
 8007802:	693a      	ldr	r2, [r7, #16]
 8007804:	fa22 f303 	lsr.w	r3, r2, r3
 8007808:	4a0a      	ldr	r2, [pc, #40]	; (8007834 <HAL_RCC_ClockConfig+0x360>)
 800780a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800780c:	4a0a      	ldr	r2, [pc, #40]	; (8007838 <HAL_RCC_ClockConfig+0x364>)
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007812:	4b0a      	ldr	r3, [pc, #40]	; (800783c <HAL_RCC_ClockConfig+0x368>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4618      	mov	r0, r3
 8007818:	f7fb fa72 	bl	8002d00 <HAL_InitTick>
 800781c:	4603      	mov	r3, r0
 800781e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007820:	7bfb      	ldrb	r3, [r7, #15]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3718      	adds	r7, #24
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	58024400 	.word	0x58024400
 8007830:	0800de4c 	.word	0x0800de4c
 8007834:	20000004 	.word	0x20000004
 8007838:	20000000 	.word	0x20000000
 800783c:	20000008 	.word	0x20000008

08007840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007840:	b480      	push	{r7}
 8007842:	b089      	sub	sp, #36	; 0x24
 8007844:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007846:	4bb3      	ldr	r3, [pc, #716]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800784e:	2b18      	cmp	r3, #24
 8007850:	f200 8155 	bhi.w	8007afe <HAL_RCC_GetSysClockFreq+0x2be>
 8007854:	a201      	add	r2, pc, #4	; (adr r2, 800785c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785a:	bf00      	nop
 800785c:	080078c1 	.word	0x080078c1
 8007860:	08007aff 	.word	0x08007aff
 8007864:	08007aff 	.word	0x08007aff
 8007868:	08007aff 	.word	0x08007aff
 800786c:	08007aff 	.word	0x08007aff
 8007870:	08007aff 	.word	0x08007aff
 8007874:	08007aff 	.word	0x08007aff
 8007878:	08007aff 	.word	0x08007aff
 800787c:	080078e7 	.word	0x080078e7
 8007880:	08007aff 	.word	0x08007aff
 8007884:	08007aff 	.word	0x08007aff
 8007888:	08007aff 	.word	0x08007aff
 800788c:	08007aff 	.word	0x08007aff
 8007890:	08007aff 	.word	0x08007aff
 8007894:	08007aff 	.word	0x08007aff
 8007898:	08007aff 	.word	0x08007aff
 800789c:	080078ed 	.word	0x080078ed
 80078a0:	08007aff 	.word	0x08007aff
 80078a4:	08007aff 	.word	0x08007aff
 80078a8:	08007aff 	.word	0x08007aff
 80078ac:	08007aff 	.word	0x08007aff
 80078b0:	08007aff 	.word	0x08007aff
 80078b4:	08007aff 	.word	0x08007aff
 80078b8:	08007aff 	.word	0x08007aff
 80078bc:	080078f3 	.word	0x080078f3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078c0:	4b94      	ldr	r3, [pc, #592]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0320 	and.w	r3, r3, #32
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d009      	beq.n	80078e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078cc:	4b91      	ldr	r3, [pc, #580]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	08db      	lsrs	r3, r3, #3
 80078d2:	f003 0303 	and.w	r3, r3, #3
 80078d6:	4a90      	ldr	r2, [pc, #576]	; (8007b18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80078d8:	fa22 f303 	lsr.w	r3, r2, r3
 80078dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80078de:	e111      	b.n	8007b04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80078e0:	4b8d      	ldr	r3, [pc, #564]	; (8007b18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80078e2:	61bb      	str	r3, [r7, #24]
    break;
 80078e4:	e10e      	b.n	8007b04 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80078e6:	4b8d      	ldr	r3, [pc, #564]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80078e8:	61bb      	str	r3, [r7, #24]
    break;
 80078ea:	e10b      	b.n	8007b04 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80078ec:	4b8c      	ldr	r3, [pc, #560]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80078ee:	61bb      	str	r3, [r7, #24]
    break;
 80078f0:	e108      	b.n	8007b04 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078f2:	4b88      	ldr	r3, [pc, #544]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f6:	f003 0303 	and.w	r3, r3, #3
 80078fa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80078fc:	4b85      	ldr	r3, [pc, #532]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007900:	091b      	lsrs	r3, r3, #4
 8007902:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007906:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007908:	4b82      	ldr	r3, [pc, #520]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800790a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007912:	4b80      	ldr	r3, [pc, #512]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007916:	08db      	lsrs	r3, r3, #3
 8007918:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	fb02 f303 	mul.w	r3, r2, r3
 8007922:	ee07 3a90 	vmov	s15, r3
 8007926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800792a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 80e1 	beq.w	8007af8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	2b02      	cmp	r3, #2
 800793a:	f000 8083 	beq.w	8007a44 <HAL_RCC_GetSysClockFreq+0x204>
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	2b02      	cmp	r3, #2
 8007942:	f200 80a1 	bhi.w	8007a88 <HAL_RCC_GetSysClockFreq+0x248>
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <HAL_RCC_GetSysClockFreq+0x114>
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d056      	beq.n	8007a00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007952:	e099      	b.n	8007a88 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007954:	4b6f      	ldr	r3, [pc, #444]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0320 	and.w	r3, r3, #32
 800795c:	2b00      	cmp	r3, #0
 800795e:	d02d      	beq.n	80079bc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007960:	4b6c      	ldr	r3, [pc, #432]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	08db      	lsrs	r3, r3, #3
 8007966:	f003 0303 	and.w	r3, r3, #3
 800796a:	4a6b      	ldr	r2, [pc, #428]	; (8007b18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800796c:	fa22 f303 	lsr.w	r3, r2, r3
 8007970:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	ee07 3a90 	vmov	s15, r3
 8007978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	ee07 3a90 	vmov	s15, r3
 8007982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800798a:	4b62      	ldr	r3, [pc, #392]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800798c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007992:	ee07 3a90 	vmov	s15, r3
 8007996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800799a:	ed97 6a02 	vldr	s12, [r7, #8]
 800799e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007b24 <HAL_RCC_GetSysClockFreq+0x2e4>
 80079a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80079ba:	e087      	b.n	8007acc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	ee07 3a90 	vmov	s15, r3
 80079c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007b28 <HAL_RCC_GetSysClockFreq+0x2e8>
 80079ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ce:	4b51      	ldr	r3, [pc, #324]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079d6:	ee07 3a90 	vmov	s15, r3
 80079da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079de:	ed97 6a02 	vldr	s12, [r7, #8]
 80079e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007b24 <HAL_RCC_GetSysClockFreq+0x2e4>
 80079e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079fe:	e065      	b.n	8007acc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	ee07 3a90 	vmov	s15, r3
 8007a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a0a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007b2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a12:	4b40      	ldr	r3, [pc, #256]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a1a:	ee07 3a90 	vmov	s15, r3
 8007a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a22:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a26:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007b24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a42:	e043      	b.n	8007acc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	ee07 3a90 	vmov	s15, r3
 8007a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a4e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007b30 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a56:	4b2f      	ldr	r3, [pc, #188]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a5e:	ee07 3a90 	vmov	s15, r3
 8007a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a66:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a6a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007b24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a86:	e021      	b.n	8007acc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	ee07 3a90 	vmov	s15, r3
 8007a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a92:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007b2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a9a:	4b1e      	ldr	r3, [pc, #120]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aa2:	ee07 3a90 	vmov	s15, r3
 8007aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8007aae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007b24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007aca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007acc:	4b11      	ldr	r3, [pc, #68]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad0:	0a5b      	lsrs	r3, r3, #9
 8007ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	ee07 3a90 	vmov	s15, r3
 8007ae0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ae4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007af0:	ee17 3a90 	vmov	r3, s15
 8007af4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007af6:	e005      	b.n	8007b04 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	61bb      	str	r3, [r7, #24]
    break;
 8007afc:	e002      	b.n	8007b04 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007afe:	4b07      	ldr	r3, [pc, #28]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007b00:	61bb      	str	r3, [r7, #24]
    break;
 8007b02:	bf00      	nop
  }

  return sysclockfreq;
 8007b04:	69bb      	ldr	r3, [r7, #24]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3724      	adds	r7, #36	; 0x24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	58024400 	.word	0x58024400
 8007b18:	03d09000 	.word	0x03d09000
 8007b1c:	003d0900 	.word	0x003d0900
 8007b20:	017d7840 	.word	0x017d7840
 8007b24:	46000000 	.word	0x46000000
 8007b28:	4c742400 	.word	0x4c742400
 8007b2c:	4a742400 	.word	0x4a742400
 8007b30:	4bbebc20 	.word	0x4bbebc20

08007b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007b3a:	f7ff fe81 	bl	8007840 <HAL_RCC_GetSysClockFreq>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	4b10      	ldr	r3, [pc, #64]	; (8007b84 <HAL_RCC_GetHCLKFreq+0x50>)
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	0a1b      	lsrs	r3, r3, #8
 8007b46:	f003 030f 	and.w	r3, r3, #15
 8007b4a:	490f      	ldr	r1, [pc, #60]	; (8007b88 <HAL_RCC_GetHCLKFreq+0x54>)
 8007b4c:	5ccb      	ldrb	r3, [r1, r3]
 8007b4e:	f003 031f 	and.w	r3, r3, #31
 8007b52:	fa22 f303 	lsr.w	r3, r2, r3
 8007b56:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b58:	4b0a      	ldr	r3, [pc, #40]	; (8007b84 <HAL_RCC_GetHCLKFreq+0x50>)
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	f003 030f 	and.w	r3, r3, #15
 8007b60:	4a09      	ldr	r2, [pc, #36]	; (8007b88 <HAL_RCC_GetHCLKFreq+0x54>)
 8007b62:	5cd3      	ldrb	r3, [r2, r3]
 8007b64:	f003 031f 	and.w	r3, r3, #31
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b6e:	4a07      	ldr	r2, [pc, #28]	; (8007b8c <HAL_RCC_GetHCLKFreq+0x58>)
 8007b70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b72:	4a07      	ldr	r2, [pc, #28]	; (8007b90 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007b78:	4b04      	ldr	r3, [pc, #16]	; (8007b8c <HAL_RCC_GetHCLKFreq+0x58>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3708      	adds	r7, #8
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	58024400 	.word	0x58024400
 8007b88:	0800de4c 	.word	0x0800de4c
 8007b8c:	20000004 	.word	0x20000004
 8007b90:	20000000 	.word	0x20000000

08007b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007b98:	f7ff ffcc 	bl	8007b34 <HAL_RCC_GetHCLKFreq>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	4b06      	ldr	r3, [pc, #24]	; (8007bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ba0:	69db      	ldr	r3, [r3, #28]
 8007ba2:	091b      	lsrs	r3, r3, #4
 8007ba4:	f003 0307 	and.w	r3, r3, #7
 8007ba8:	4904      	ldr	r1, [pc, #16]	; (8007bbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8007baa:	5ccb      	ldrb	r3, [r1, r3]
 8007bac:	f003 031f 	and.w	r3, r3, #31
 8007bb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	58024400 	.word	0x58024400
 8007bbc:	0800de4c 	.word	0x0800de4c

08007bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007bc4:	f7ff ffb6 	bl	8007b34 <HAL_RCC_GetHCLKFreq>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	4b06      	ldr	r3, [pc, #24]	; (8007be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	0a1b      	lsrs	r3, r3, #8
 8007bd0:	f003 0307 	and.w	r3, r3, #7
 8007bd4:	4904      	ldr	r1, [pc, #16]	; (8007be8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007bd6:	5ccb      	ldrb	r3, [r1, r3]
 8007bd8:	f003 031f 	and.w	r3, r3, #31
 8007bdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	58024400 	.word	0x58024400
 8007be8:	0800de4c 	.word	0x0800de4c

08007bec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	223f      	movs	r2, #63	; 0x3f
 8007bfa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007bfc:	4b1a      	ldr	r3, [pc, #104]	; (8007c68 <HAL_RCC_GetClockConfig+0x7c>)
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	f003 0207 	and.w	r2, r3, #7
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007c08:	4b17      	ldr	r3, [pc, #92]	; (8007c68 <HAL_RCC_GetClockConfig+0x7c>)
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007c14:	4b14      	ldr	r3, [pc, #80]	; (8007c68 <HAL_RCC_GetClockConfig+0x7c>)
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	f003 020f 	and.w	r2, r3, #15
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007c20:	4b11      	ldr	r3, [pc, #68]	; (8007c68 <HAL_RCC_GetClockConfig+0x7c>)
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007c2c:	4b0e      	ldr	r3, [pc, #56]	; (8007c68 <HAL_RCC_GetClockConfig+0x7c>)
 8007c2e:	69db      	ldr	r3, [r3, #28]
 8007c30:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007c38:	4b0b      	ldr	r3, [pc, #44]	; (8007c68 <HAL_RCC_GetClockConfig+0x7c>)
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007c44:	4b08      	ldr	r3, [pc, #32]	; (8007c68 <HAL_RCC_GetClockConfig+0x7c>)
 8007c46:	6a1b      	ldr	r3, [r3, #32]
 8007c48:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007c50:	4b06      	ldr	r3, [pc, #24]	; (8007c6c <HAL_RCC_GetClockConfig+0x80>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 020f 	and.w	r2, r3, #15
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	601a      	str	r2, [r3, #0]
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr
 8007c68:	58024400 	.word	0x58024400
 8007c6c:	52002000 	.word	0x52002000

08007c70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c78:	2300      	movs	r3, #0
 8007c7a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d03f      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c94:	d02a      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007c96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c9a:	d824      	bhi.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007c9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ca0:	d018      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007ca2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ca6:	d81e      	bhi.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d003      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007cac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cb0:	d007      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007cb2:	e018      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cb4:	4bab      	ldr	r3, [pc, #684]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb8:	4aaa      	ldr	r2, [pc, #680]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007cc0:	e015      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	2102      	movs	r1, #2
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f001 f9cf 	bl	800906c <RCCEx_PLL2_Config>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007cd2:	e00c      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	3324      	adds	r3, #36	; 0x24
 8007cd8:	2102      	movs	r1, #2
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f001 fa78 	bl	80091d0 <RCCEx_PLL3_Config>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ce4:	e003      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8007cea:	e000      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007cec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cee:	7dfb      	ldrb	r3, [r7, #23]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d109      	bne.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007cf4:	4b9b      	ldr	r3, [pc, #620]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d00:	4998      	ldr	r1, [pc, #608]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	650b      	str	r3, [r1, #80]	; 0x50
 8007d06:	e001      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d08:	7dfb      	ldrb	r3, [r7, #23]
 8007d0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d03d      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1c:	2b04      	cmp	r3, #4
 8007d1e:	d826      	bhi.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007d20:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d26:	bf00      	nop
 8007d28:	08007d3d 	.word	0x08007d3d
 8007d2c:	08007d4b 	.word	0x08007d4b
 8007d30:	08007d5d 	.word	0x08007d5d
 8007d34:	08007d75 	.word	0x08007d75
 8007d38:	08007d75 	.word	0x08007d75
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d3c:	4b89      	ldr	r3, [pc, #548]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d40:	4a88      	ldr	r2, [pc, #544]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d48:	e015      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	2100      	movs	r1, #0
 8007d50:	4618      	mov	r0, r3
 8007d52:	f001 f98b 	bl	800906c <RCCEx_PLL2_Config>
 8007d56:	4603      	mov	r3, r0
 8007d58:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d5a:	e00c      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	3324      	adds	r3, #36	; 0x24
 8007d60:	2100      	movs	r1, #0
 8007d62:	4618      	mov	r0, r3
 8007d64:	f001 fa34 	bl	80091d0 <RCCEx_PLL3_Config>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d6c:	e003      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	75fb      	strb	r3, [r7, #23]
      break;
 8007d72:	e000      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007d74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d76:	7dfb      	ldrb	r3, [r7, #23]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d109      	bne.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d7c:	4b79      	ldr	r3, [pc, #484]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d80:	f023 0207 	bic.w	r2, r3, #7
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d88:	4976      	ldr	r1, [pc, #472]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	650b      	str	r3, [r1, #80]	; 0x50
 8007d8e:	e001      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d90:	7dfb      	ldrb	r3, [r7, #23]
 8007d92:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d042      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007da8:	d02b      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dae:	d825      	bhi.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007db0:	2bc0      	cmp	r3, #192	; 0xc0
 8007db2:	d028      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007db4:	2bc0      	cmp	r3, #192	; 0xc0
 8007db6:	d821      	bhi.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007db8:	2b80      	cmp	r3, #128	; 0x80
 8007dba:	d016      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007dbc:	2b80      	cmp	r3, #128	; 0x80
 8007dbe:	d81d      	bhi.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d002      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007dc4:	2b40      	cmp	r3, #64	; 0x40
 8007dc6:	d007      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007dc8:	e018      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dca:	4b66      	ldr	r3, [pc, #408]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dce:	4a65      	ldr	r2, [pc, #404]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007dd6:	e017      	b.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	3304      	adds	r3, #4
 8007ddc:	2100      	movs	r1, #0
 8007dde:	4618      	mov	r0, r3
 8007de0:	f001 f944 	bl	800906c <RCCEx_PLL2_Config>
 8007de4:	4603      	mov	r3, r0
 8007de6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007de8:	e00e      	b.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	3324      	adds	r3, #36	; 0x24
 8007dee:	2100      	movs	r1, #0
 8007df0:	4618      	mov	r0, r3
 8007df2:	f001 f9ed 	bl	80091d0 <RCCEx_PLL3_Config>
 8007df6:	4603      	mov	r3, r0
 8007df8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007dfa:	e005      	b.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	75fb      	strb	r3, [r7, #23]
      break;
 8007e00:	e002      	b.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007e02:	bf00      	nop
 8007e04:	e000      	b.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007e06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e08:	7dfb      	ldrb	r3, [r7, #23]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d109      	bne.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007e0e:	4b55      	ldr	r3, [pc, #340]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e12:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e1a:	4952      	ldr	r1, [pc, #328]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	650b      	str	r3, [r1, #80]	; 0x50
 8007e20:	e001      	b.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e22:	7dfb      	ldrb	r3, [r7, #23]
 8007e24:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d049      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007e38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e3c:	d030      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007e3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e42:	d82a      	bhi.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007e44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e48:	d02c      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007e4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e4e:	d824      	bhi.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007e50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e54:	d018      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007e56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e5a:	d81e      	bhi.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d003      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007e60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e64:	d007      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007e66:	e018      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e68:	4b3e      	ldr	r3, [pc, #248]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6c:	4a3d      	ldr	r2, [pc, #244]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e74:	e017      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	3304      	adds	r3, #4
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f001 f8f5 	bl	800906c <RCCEx_PLL2_Config>
 8007e82:	4603      	mov	r3, r0
 8007e84:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007e86:	e00e      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3324      	adds	r3, #36	; 0x24
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f001 f99e 	bl	80091d0 <RCCEx_PLL3_Config>
 8007e94:	4603      	mov	r3, r0
 8007e96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e98:	e005      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e9e:	e002      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007ea0:	bf00      	nop
 8007ea2:	e000      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ea6:	7dfb      	ldrb	r3, [r7, #23]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10a      	bne.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007eac:	4b2d      	ldr	r3, [pc, #180]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eb0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007eba:	492a      	ldr	r1, [pc, #168]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	658b      	str	r3, [r1, #88]	; 0x58
 8007ec0:	e001      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec2:	7dfb      	ldrb	r3, [r7, #23]
 8007ec4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d04c      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ed8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007edc:	d030      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007ede:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ee2:	d82a      	bhi.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007ee4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ee8:	d02c      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007eea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007eee:	d824      	bhi.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007ef0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ef4:	d018      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007ef6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007efa:	d81e      	bhi.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d003      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f04:	d007      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007f06:	e018      	b.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f08:	4b16      	ldr	r3, [pc, #88]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0c:	4a15      	ldr	r2, [pc, #84]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f14:	e017      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	3304      	adds	r3, #4
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f001 f8a5 	bl	800906c <RCCEx_PLL2_Config>
 8007f22:	4603      	mov	r3, r0
 8007f24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007f26:	e00e      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	3324      	adds	r3, #36	; 0x24
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f001 f94e 	bl	80091d0 <RCCEx_PLL3_Config>
 8007f34:	4603      	mov	r3, r0
 8007f36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f38:	e005      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f3e:	e002      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007f40:	bf00      	nop
 8007f42:	e000      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007f44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10d      	bne.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007f4c:	4b05      	ldr	r3, [pc, #20]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f50:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f5a:	4902      	ldr	r1, [pc, #8]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	658b      	str	r3, [r1, #88]	; 0x58
 8007f60:	e004      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007f62:	bf00      	nop
 8007f64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f68:	7dfb      	ldrb	r3, [r7, #23]
 8007f6a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d032      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f7c:	2b30      	cmp	r3, #48	; 0x30
 8007f7e:	d01c      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007f80:	2b30      	cmp	r3, #48	; 0x30
 8007f82:	d817      	bhi.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007f84:	2b20      	cmp	r3, #32
 8007f86:	d00c      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007f88:	2b20      	cmp	r3, #32
 8007f8a:	d813      	bhi.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d016      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007f90:	2b10      	cmp	r3, #16
 8007f92:	d10f      	bne.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f94:	4baf      	ldr	r3, [pc, #700]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f98:	4aae      	ldr	r2, [pc, #696]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007fa0:	e00e      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	3304      	adds	r3, #4
 8007fa6:	2102      	movs	r1, #2
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f001 f85f 	bl	800906c <RCCEx_PLL2_Config>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007fb2:	e005      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8007fb8:	e002      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007fba:	bf00      	nop
 8007fbc:	e000      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007fbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fc0:	7dfb      	ldrb	r3, [r7, #23]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d109      	bne.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007fc6:	4ba3      	ldr	r3, [pc, #652]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fd2:	49a0      	ldr	r1, [pc, #640]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007fd8:	e001      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fda:	7dfb      	ldrb	r3, [r7, #23]
 8007fdc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d047      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ff2:	d030      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007ff4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ff8:	d82a      	bhi.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007ffa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ffe:	d02c      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8008000:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008004:	d824      	bhi.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800800a:	d018      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800800c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008010:	d81e      	bhi.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008012:	2b00      	cmp	r3, #0
 8008014:	d003      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800801a:	d007      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800801c:	e018      	b.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800801e:	4b8d      	ldr	r3, [pc, #564]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008022:	4a8c      	ldr	r2, [pc, #560]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008028:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800802a:	e017      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	3304      	adds	r3, #4
 8008030:	2100      	movs	r1, #0
 8008032:	4618      	mov	r0, r3
 8008034:	f001 f81a 	bl	800906c <RCCEx_PLL2_Config>
 8008038:	4603      	mov	r3, r0
 800803a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800803c:	e00e      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	3324      	adds	r3, #36	; 0x24
 8008042:	2100      	movs	r1, #0
 8008044:	4618      	mov	r0, r3
 8008046:	f001 f8c3 	bl	80091d0 <RCCEx_PLL3_Config>
 800804a:	4603      	mov	r3, r0
 800804c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800804e:	e005      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	75fb      	strb	r3, [r7, #23]
      break;
 8008054:	e002      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008056:	bf00      	nop
 8008058:	e000      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800805a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800805c:	7dfb      	ldrb	r3, [r7, #23]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d109      	bne.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008062:	4b7c      	ldr	r3, [pc, #496]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008066:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800806e:	4979      	ldr	r1, [pc, #484]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008070:	4313      	orrs	r3, r2
 8008072:	650b      	str	r3, [r1, #80]	; 0x50
 8008074:	e001      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008076:	7dfb      	ldrb	r3, [r7, #23]
 8008078:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d049      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800808a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800808e:	d02e      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008094:	d828      	bhi.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008096:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800809a:	d02a      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800809c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080a0:	d822      	bhi.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80080a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080a6:	d026      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80080a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080ac:	d81c      	bhi.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80080ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080b2:	d010      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80080b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080b8:	d816      	bhi.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d01d      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80080be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080c2:	d111      	bne.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	3304      	adds	r3, #4
 80080c8:	2101      	movs	r1, #1
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 ffce 	bl	800906c <RCCEx_PLL2_Config>
 80080d0:	4603      	mov	r3, r0
 80080d2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80080d4:	e012      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	3324      	adds	r3, #36	; 0x24
 80080da:	2101      	movs	r1, #1
 80080dc:	4618      	mov	r0, r3
 80080de:	f001 f877 	bl	80091d0 <RCCEx_PLL3_Config>
 80080e2:	4603      	mov	r3, r0
 80080e4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80080e6:	e009      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	75fb      	strb	r3, [r7, #23]
      break;
 80080ec:	e006      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80080ee:	bf00      	nop
 80080f0:	e004      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80080f2:	bf00      	nop
 80080f4:	e002      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80080f6:	bf00      	nop
 80080f8:	e000      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80080fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080fc:	7dfb      	ldrb	r3, [r7, #23]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d109      	bne.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008102:	4b54      	ldr	r3, [pc, #336]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008106:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800810e:	4951      	ldr	r1, [pc, #324]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008110:	4313      	orrs	r3, r2
 8008112:	650b      	str	r3, [r1, #80]	; 0x50
 8008114:	e001      	b.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008116:	7dfb      	ldrb	r3, [r7, #23]
 8008118:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d04b      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800812c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008130:	d02e      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8008132:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008136:	d828      	bhi.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800813c:	d02a      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800813e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008142:	d822      	bhi.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008144:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008148:	d026      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800814a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800814e:	d81c      	bhi.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008154:	d010      	beq.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800815a:	d816      	bhi.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800815c:	2b00      	cmp	r3, #0
 800815e:	d01d      	beq.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008160:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008164:	d111      	bne.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	3304      	adds	r3, #4
 800816a:	2101      	movs	r1, #1
 800816c:	4618      	mov	r0, r3
 800816e:	f000 ff7d 	bl	800906c <RCCEx_PLL2_Config>
 8008172:	4603      	mov	r3, r0
 8008174:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008176:	e012      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	3324      	adds	r3, #36	; 0x24
 800817c:	2101      	movs	r1, #1
 800817e:	4618      	mov	r0, r3
 8008180:	f001 f826 	bl	80091d0 <RCCEx_PLL3_Config>
 8008184:	4603      	mov	r3, r0
 8008186:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008188:	e009      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	75fb      	strb	r3, [r7, #23]
      break;
 800818e:	e006      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008190:	bf00      	nop
 8008192:	e004      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008194:	bf00      	nop
 8008196:	e002      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008198:	bf00      	nop
 800819a:	e000      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800819c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800819e:	7dfb      	ldrb	r3, [r7, #23]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10a      	bne.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80081a4:	4b2b      	ldr	r3, [pc, #172]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081a8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80081b2:	4928      	ldr	r1, [pc, #160]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081b4:	4313      	orrs	r3, r2
 80081b6:	658b      	str	r3, [r1, #88]	; 0x58
 80081b8:	e001      	b.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ba:	7dfb      	ldrb	r3, [r7, #23]
 80081bc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d02f      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081d2:	d00e      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80081d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081d8:	d814      	bhi.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d015      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80081de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081e2:	d10f      	bne.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081e4:	4b1b      	ldr	r3, [pc, #108]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e8:	4a1a      	ldr	r2, [pc, #104]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80081f0:	e00c      	b.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	3304      	adds	r3, #4
 80081f6:	2101      	movs	r1, #1
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 ff37 	bl	800906c <RCCEx_PLL2_Config>
 80081fe:	4603      	mov	r3, r0
 8008200:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008202:	e003      	b.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	75fb      	strb	r3, [r7, #23]
      break;
 8008208:	e000      	b.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800820a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800820c:	7dfb      	ldrb	r3, [r7, #23]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d109      	bne.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008212:	4b10      	ldr	r3, [pc, #64]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008216:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800821e:	490d      	ldr	r1, [pc, #52]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008220:	4313      	orrs	r3, r2
 8008222:	650b      	str	r3, [r1, #80]	; 0x50
 8008224:	e001      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008226:	7dfb      	ldrb	r3, [r7, #23]
 8008228:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d033      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800823a:	2b03      	cmp	r3, #3
 800823c:	d81c      	bhi.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800823e:	a201      	add	r2, pc, #4	; (adr r2, 8008244 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8008240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008244:	0800827f 	.word	0x0800827f
 8008248:	08008259 	.word	0x08008259
 800824c:	08008267 	.word	0x08008267
 8008250:	0800827f 	.word	0x0800827f
 8008254:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008258:	4bb8      	ldr	r3, [pc, #736]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825c:	4ab7      	ldr	r2, [pc, #732]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800825e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008262:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008264:	e00c      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	3304      	adds	r3, #4
 800826a:	2102      	movs	r1, #2
 800826c:	4618      	mov	r0, r3
 800826e:	f000 fefd 	bl	800906c <RCCEx_PLL2_Config>
 8008272:	4603      	mov	r3, r0
 8008274:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008276:	e003      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	75fb      	strb	r3, [r7, #23]
      break;
 800827c:	e000      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800827e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008280:	7dfb      	ldrb	r3, [r7, #23]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d109      	bne.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008286:	4bad      	ldr	r3, [pc, #692]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800828a:	f023 0203 	bic.w	r2, r3, #3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008292:	49aa      	ldr	r1, [pc, #680]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008294:	4313      	orrs	r3, r2
 8008296:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008298:	e001      	b.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800829a:	7dfb      	ldrb	r3, [r7, #23]
 800829c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f000 8086 	beq.w	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80082ac:	4ba4      	ldr	r3, [pc, #656]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4aa3      	ldr	r2, [pc, #652]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80082b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80082b8:	f7fb fb2a 	bl	8003910 <HAL_GetTick>
 80082bc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082be:	e009      	b.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082c0:	f7fb fb26 	bl	8003910 <HAL_GetTick>
 80082c4:	4602      	mov	r2, r0
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	2b64      	cmp	r3, #100	; 0x64
 80082cc:	d902      	bls.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	75fb      	strb	r3, [r7, #23]
        break;
 80082d2:	e005      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082d4:	4b9a      	ldr	r3, [pc, #616]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d0ef      	beq.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80082e0:	7dfb      	ldrb	r3, [r7, #23]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d166      	bne.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80082e6:	4b95      	ldr	r3, [pc, #596]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80082e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082f0:	4053      	eors	r3, r2
 80082f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d013      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80082fa:	4b90      	ldr	r3, [pc, #576]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80082fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008302:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008304:	4b8d      	ldr	r3, [pc, #564]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008308:	4a8c      	ldr	r2, [pc, #560]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800830a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800830e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008310:	4b8a      	ldr	r3, [pc, #552]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008314:	4a89      	ldr	r2, [pc, #548]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800831a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800831c:	4a87      	ldr	r2, [pc, #540]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800832c:	d115      	bne.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800832e:	f7fb faef 	bl	8003910 <HAL_GetTick>
 8008332:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008334:	e00b      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008336:	f7fb faeb 	bl	8003910 <HAL_GetTick>
 800833a:	4602      	mov	r2, r0
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	f241 3288 	movw	r2, #5000	; 0x1388
 8008344:	4293      	cmp	r3, r2
 8008346:	d902      	bls.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	75fb      	strb	r3, [r7, #23]
            break;
 800834c:	e005      	b.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800834e:	4b7b      	ldr	r3, [pc, #492]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008352:	f003 0302 	and.w	r3, r3, #2
 8008356:	2b00      	cmp	r3, #0
 8008358:	d0ed      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800835a:	7dfb      	ldrb	r3, [r7, #23]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d126      	bne.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800836a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800836e:	d10d      	bne.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008370:	4b72      	ldr	r3, [pc, #456]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800837e:	0919      	lsrs	r1, r3, #4
 8008380:	4b70      	ldr	r3, [pc, #448]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8008382:	400b      	ands	r3, r1
 8008384:	496d      	ldr	r1, [pc, #436]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008386:	4313      	orrs	r3, r2
 8008388:	610b      	str	r3, [r1, #16]
 800838a:	e005      	b.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800838c:	4b6b      	ldr	r3, [pc, #428]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	4a6a      	ldr	r2, [pc, #424]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008392:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008396:	6113      	str	r3, [r2, #16]
 8008398:	4b68      	ldr	r3, [pc, #416]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800839a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083a6:	4965      	ldr	r1, [pc, #404]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083a8:	4313      	orrs	r3, r2
 80083aa:	670b      	str	r3, [r1, #112]	; 0x70
 80083ac:	e004      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80083ae:	7dfb      	ldrb	r3, [r7, #23]
 80083b0:	75bb      	strb	r3, [r7, #22]
 80083b2:	e001      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b4:	7dfb      	ldrb	r3, [r7, #23]
 80083b6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d07e      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083c8:	2b28      	cmp	r3, #40	; 0x28
 80083ca:	d867      	bhi.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80083cc:	a201      	add	r2, pc, #4	; (adr r2, 80083d4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80083ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d2:	bf00      	nop
 80083d4:	080084a3 	.word	0x080084a3
 80083d8:	0800849d 	.word	0x0800849d
 80083dc:	0800849d 	.word	0x0800849d
 80083e0:	0800849d 	.word	0x0800849d
 80083e4:	0800849d 	.word	0x0800849d
 80083e8:	0800849d 	.word	0x0800849d
 80083ec:	0800849d 	.word	0x0800849d
 80083f0:	0800849d 	.word	0x0800849d
 80083f4:	08008479 	.word	0x08008479
 80083f8:	0800849d 	.word	0x0800849d
 80083fc:	0800849d 	.word	0x0800849d
 8008400:	0800849d 	.word	0x0800849d
 8008404:	0800849d 	.word	0x0800849d
 8008408:	0800849d 	.word	0x0800849d
 800840c:	0800849d 	.word	0x0800849d
 8008410:	0800849d 	.word	0x0800849d
 8008414:	0800848b 	.word	0x0800848b
 8008418:	0800849d 	.word	0x0800849d
 800841c:	0800849d 	.word	0x0800849d
 8008420:	0800849d 	.word	0x0800849d
 8008424:	0800849d 	.word	0x0800849d
 8008428:	0800849d 	.word	0x0800849d
 800842c:	0800849d 	.word	0x0800849d
 8008430:	0800849d 	.word	0x0800849d
 8008434:	080084a3 	.word	0x080084a3
 8008438:	0800849d 	.word	0x0800849d
 800843c:	0800849d 	.word	0x0800849d
 8008440:	0800849d 	.word	0x0800849d
 8008444:	0800849d 	.word	0x0800849d
 8008448:	0800849d 	.word	0x0800849d
 800844c:	0800849d 	.word	0x0800849d
 8008450:	0800849d 	.word	0x0800849d
 8008454:	080084a3 	.word	0x080084a3
 8008458:	0800849d 	.word	0x0800849d
 800845c:	0800849d 	.word	0x0800849d
 8008460:	0800849d 	.word	0x0800849d
 8008464:	0800849d 	.word	0x0800849d
 8008468:	0800849d 	.word	0x0800849d
 800846c:	0800849d 	.word	0x0800849d
 8008470:	0800849d 	.word	0x0800849d
 8008474:	080084a3 	.word	0x080084a3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	3304      	adds	r3, #4
 800847c:	2101      	movs	r1, #1
 800847e:	4618      	mov	r0, r3
 8008480:	f000 fdf4 	bl	800906c <RCCEx_PLL2_Config>
 8008484:	4603      	mov	r3, r0
 8008486:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008488:	e00c      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	3324      	adds	r3, #36	; 0x24
 800848e:	2101      	movs	r1, #1
 8008490:	4618      	mov	r0, r3
 8008492:	f000 fe9d 	bl	80091d0 <RCCEx_PLL3_Config>
 8008496:	4603      	mov	r3, r0
 8008498:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800849a:	e003      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	75fb      	strb	r3, [r7, #23]
      break;
 80084a0:	e000      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80084a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084a4:	7dfb      	ldrb	r3, [r7, #23]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d109      	bne.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80084aa:	4b24      	ldr	r3, [pc, #144]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ae:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084b6:	4921      	ldr	r1, [pc, #132]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	654b      	str	r3, [r1, #84]	; 0x54
 80084bc:	e001      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084be:	7dfb      	ldrb	r3, [r7, #23]
 80084c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 0302 	and.w	r3, r3, #2
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d03e      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084d2:	2b05      	cmp	r3, #5
 80084d4:	d820      	bhi.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80084d6:	a201      	add	r2, pc, #4	; (adr r2, 80084dc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80084d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084dc:	0800851f 	.word	0x0800851f
 80084e0:	080084f5 	.word	0x080084f5
 80084e4:	08008507 	.word	0x08008507
 80084e8:	0800851f 	.word	0x0800851f
 80084ec:	0800851f 	.word	0x0800851f
 80084f0:	0800851f 	.word	0x0800851f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	3304      	adds	r3, #4
 80084f8:	2101      	movs	r1, #1
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 fdb6 	bl	800906c <RCCEx_PLL2_Config>
 8008500:	4603      	mov	r3, r0
 8008502:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008504:	e00c      	b.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	3324      	adds	r3, #36	; 0x24
 800850a:	2101      	movs	r1, #1
 800850c:	4618      	mov	r0, r3
 800850e:	f000 fe5f 	bl	80091d0 <RCCEx_PLL3_Config>
 8008512:	4603      	mov	r3, r0
 8008514:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008516:	e003      	b.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	75fb      	strb	r3, [r7, #23]
      break;
 800851c:	e000      	b.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800851e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008520:	7dfb      	ldrb	r3, [r7, #23]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d110      	bne.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008526:	4b05      	ldr	r3, [pc, #20]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800852a:	f023 0207 	bic.w	r2, r3, #7
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008532:	4902      	ldr	r1, [pc, #8]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008534:	4313      	orrs	r3, r2
 8008536:	654b      	str	r3, [r1, #84]	; 0x54
 8008538:	e008      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800853a:	bf00      	nop
 800853c:	58024400 	.word	0x58024400
 8008540:	58024800 	.word	0x58024800
 8008544:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008548:	7dfb      	ldrb	r3, [r7, #23]
 800854a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0304 	and.w	r3, r3, #4
 8008554:	2b00      	cmp	r3, #0
 8008556:	d039      	beq.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800855e:	2b05      	cmp	r3, #5
 8008560:	d820      	bhi.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008562:	a201      	add	r2, pc, #4	; (adr r2, 8008568 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008568:	080085ab 	.word	0x080085ab
 800856c:	08008581 	.word	0x08008581
 8008570:	08008593 	.word	0x08008593
 8008574:	080085ab 	.word	0x080085ab
 8008578:	080085ab 	.word	0x080085ab
 800857c:	080085ab 	.word	0x080085ab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	3304      	adds	r3, #4
 8008584:	2101      	movs	r1, #1
 8008586:	4618      	mov	r0, r3
 8008588:	f000 fd70 	bl	800906c <RCCEx_PLL2_Config>
 800858c:	4603      	mov	r3, r0
 800858e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008590:	e00c      	b.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	3324      	adds	r3, #36	; 0x24
 8008596:	2101      	movs	r1, #1
 8008598:	4618      	mov	r0, r3
 800859a:	f000 fe19 	bl	80091d0 <RCCEx_PLL3_Config>
 800859e:	4603      	mov	r3, r0
 80085a0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80085a2:	e003      	b.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	75fb      	strb	r3, [r7, #23]
      break;
 80085a8:	e000      	b.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80085aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085ac:	7dfb      	ldrb	r3, [r7, #23]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10a      	bne.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80085b2:	4bb7      	ldr	r3, [pc, #732]	; (8008890 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80085b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085b6:	f023 0207 	bic.w	r2, r3, #7
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085c0:	49b3      	ldr	r1, [pc, #716]	; (8008890 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80085c2:	4313      	orrs	r3, r2
 80085c4:	658b      	str	r3, [r1, #88]	; 0x58
 80085c6:	e001      	b.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c8:	7dfb      	ldrb	r3, [r7, #23]
 80085ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 0320 	and.w	r3, r3, #32
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d04b      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085e2:	d02e      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80085e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085e8:	d828      	bhi.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80085ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085ee:	d02a      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80085f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085f4:	d822      	bhi.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80085f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085fa:	d026      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80085fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008600:	d81c      	bhi.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008606:	d010      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008608:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800860c:	d816      	bhi.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800860e:	2b00      	cmp	r3, #0
 8008610:	d01d      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008612:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008616:	d111      	bne.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	3304      	adds	r3, #4
 800861c:	2100      	movs	r1, #0
 800861e:	4618      	mov	r0, r3
 8008620:	f000 fd24 	bl	800906c <RCCEx_PLL2_Config>
 8008624:	4603      	mov	r3, r0
 8008626:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008628:	e012      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	3324      	adds	r3, #36	; 0x24
 800862e:	2102      	movs	r1, #2
 8008630:	4618      	mov	r0, r3
 8008632:	f000 fdcd 	bl	80091d0 <RCCEx_PLL3_Config>
 8008636:	4603      	mov	r3, r0
 8008638:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800863a:	e009      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	75fb      	strb	r3, [r7, #23]
      break;
 8008640:	e006      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008642:	bf00      	nop
 8008644:	e004      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008646:	bf00      	nop
 8008648:	e002      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800864a:	bf00      	nop
 800864c:	e000      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800864e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008650:	7dfb      	ldrb	r3, [r7, #23]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10a      	bne.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008656:	4b8e      	ldr	r3, [pc, #568]	; (8008890 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800865a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008664:	498a      	ldr	r1, [pc, #552]	; (8008890 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008666:	4313      	orrs	r3, r2
 8008668:	654b      	str	r3, [r1, #84]	; 0x54
 800866a:	e001      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800866c:	7dfb      	ldrb	r3, [r7, #23]
 800866e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008678:	2b00      	cmp	r3, #0
 800867a:	d04b      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008682:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008686:	d02e      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008688:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800868c:	d828      	bhi.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800868e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008692:	d02a      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008698:	d822      	bhi.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800869a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800869e:	d026      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80086a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086a4:	d81c      	bhi.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80086a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086aa:	d010      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80086ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086b0:	d816      	bhi.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d01d      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80086b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086ba:	d111      	bne.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	3304      	adds	r3, #4
 80086c0:	2100      	movs	r1, #0
 80086c2:	4618      	mov	r0, r3
 80086c4:	f000 fcd2 	bl	800906c <RCCEx_PLL2_Config>
 80086c8:	4603      	mov	r3, r0
 80086ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80086cc:	e012      	b.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	3324      	adds	r3, #36	; 0x24
 80086d2:	2102      	movs	r1, #2
 80086d4:	4618      	mov	r0, r3
 80086d6:	f000 fd7b 	bl	80091d0 <RCCEx_PLL3_Config>
 80086da:	4603      	mov	r3, r0
 80086dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80086de:	e009      	b.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	75fb      	strb	r3, [r7, #23]
      break;
 80086e4:	e006      	b.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80086e6:	bf00      	nop
 80086e8:	e004      	b.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80086ea:	bf00      	nop
 80086ec:	e002      	b.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80086ee:	bf00      	nop
 80086f0:	e000      	b.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80086f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086f4:	7dfb      	ldrb	r3, [r7, #23]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d10a      	bne.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80086fa:	4b65      	ldr	r3, [pc, #404]	; (8008890 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80086fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086fe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008708:	4961      	ldr	r1, [pc, #388]	; (8008890 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800870a:	4313      	orrs	r3, r2
 800870c:	658b      	str	r3, [r1, #88]	; 0x58
 800870e:	e001      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008710:	7dfb      	ldrb	r3, [r7, #23]
 8008712:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800871c:	2b00      	cmp	r3, #0
 800871e:	d04b      	beq.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008726:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800872a:	d02e      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800872c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008730:	d828      	bhi.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008736:	d02a      	beq.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800873c:	d822      	bhi.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800873e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008742:	d026      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008744:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008748:	d81c      	bhi.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800874a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800874e:	d010      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008750:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008754:	d816      	bhi.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008756:	2b00      	cmp	r3, #0
 8008758:	d01d      	beq.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800875a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800875e:	d111      	bne.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	3304      	adds	r3, #4
 8008764:	2100      	movs	r1, #0
 8008766:	4618      	mov	r0, r3
 8008768:	f000 fc80 	bl	800906c <RCCEx_PLL2_Config>
 800876c:	4603      	mov	r3, r0
 800876e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008770:	e012      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	3324      	adds	r3, #36	; 0x24
 8008776:	2102      	movs	r1, #2
 8008778:	4618      	mov	r0, r3
 800877a:	f000 fd29 	bl	80091d0 <RCCEx_PLL3_Config>
 800877e:	4603      	mov	r3, r0
 8008780:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008782:	e009      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	75fb      	strb	r3, [r7, #23]
      break;
 8008788:	e006      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800878a:	bf00      	nop
 800878c:	e004      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800878e:	bf00      	nop
 8008790:	e002      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008792:	bf00      	nop
 8008794:	e000      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008796:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008798:	7dfb      	ldrb	r3, [r7, #23]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10a      	bne.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800879e:	4b3c      	ldr	r3, [pc, #240]	; (8008890 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80087a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80087ac:	4938      	ldr	r1, [pc, #224]	; (8008890 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80087ae:	4313      	orrs	r3, r2
 80087b0:	658b      	str	r3, [r1, #88]	; 0x58
 80087b2:	e001      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b4:	7dfb      	ldrb	r3, [r7, #23]
 80087b6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0308 	and.w	r3, r3, #8
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d01a      	beq.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ce:	d10a      	bne.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	3324      	adds	r3, #36	; 0x24
 80087d4:	2102      	movs	r1, #2
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 fcfa 	bl	80091d0 <RCCEx_PLL3_Config>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d001      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80087e6:	4b2a      	ldr	r3, [pc, #168]	; (8008890 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80087e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087f4:	4926      	ldr	r1, [pc, #152]	; (8008890 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80087f6:	4313      	orrs	r3, r2
 80087f8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 0310 	and.w	r3, r3, #16
 8008802:	2b00      	cmp	r3, #0
 8008804:	d01a      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800880c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008810:	d10a      	bne.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	3324      	adds	r3, #36	; 0x24
 8008816:	2102      	movs	r1, #2
 8008818:	4618      	mov	r0, r3
 800881a:	f000 fcd9 	bl	80091d0 <RCCEx_PLL3_Config>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008828:	4b19      	ldr	r3, [pc, #100]	; (8008890 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800882a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800882c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008836:	4916      	ldr	r1, [pc, #88]	; (8008890 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008838:	4313      	orrs	r3, r2
 800883a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008844:	2b00      	cmp	r3, #0
 8008846:	d036      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800884e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008852:	d01f      	beq.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008854:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008858:	d817      	bhi.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800885a:	2b00      	cmp	r3, #0
 800885c:	d003      	beq.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800885e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008862:	d009      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008864:	e011      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	3304      	adds	r3, #4
 800886a:	2100      	movs	r1, #0
 800886c:	4618      	mov	r0, r3
 800886e:	f000 fbfd 	bl	800906c <RCCEx_PLL2_Config>
 8008872:	4603      	mov	r3, r0
 8008874:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008876:	e00e      	b.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	3324      	adds	r3, #36	; 0x24
 800887c:	2102      	movs	r1, #2
 800887e:	4618      	mov	r0, r3
 8008880:	f000 fca6 	bl	80091d0 <RCCEx_PLL3_Config>
 8008884:	4603      	mov	r3, r0
 8008886:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008888:	e005      	b.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	75fb      	strb	r3, [r7, #23]
      break;
 800888e:	e002      	b.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008890:	58024400 	.word	0x58024400
      break;
 8008894:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008896:	7dfb      	ldrb	r3, [r7, #23]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10a      	bne.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800889c:	4b93      	ldr	r3, [pc, #588]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800889e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80088aa:	4990      	ldr	r1, [pc, #576]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088ac:	4313      	orrs	r3, r2
 80088ae:	658b      	str	r3, [r1, #88]	; 0x58
 80088b0:	e001      	b.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
 80088b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d033      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088cc:	d01c      	beq.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80088ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80088d2:	d816      	bhi.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80088d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088d8:	d003      	beq.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80088da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088de:	d007      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80088e0:	e00f      	b.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088e2:	4b82      	ldr	r3, [pc, #520]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e6:	4a81      	ldr	r2, [pc, #516]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80088ee:	e00c      	b.n	800890a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	3324      	adds	r3, #36	; 0x24
 80088f4:	2101      	movs	r1, #1
 80088f6:	4618      	mov	r0, r3
 80088f8:	f000 fc6a 	bl	80091d0 <RCCEx_PLL3_Config>
 80088fc:	4603      	mov	r3, r0
 80088fe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008900:	e003      	b.n	800890a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	75fb      	strb	r3, [r7, #23]
      break;
 8008906:	e000      	b.n	800890a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008908:	bf00      	nop
    }

    if(ret == HAL_OK)
 800890a:	7dfb      	ldrb	r3, [r7, #23]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10a      	bne.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008910:	4b76      	ldr	r3, [pc, #472]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008914:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800891e:	4973      	ldr	r1, [pc, #460]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008920:	4313      	orrs	r3, r2
 8008922:	654b      	str	r3, [r1, #84]	; 0x54
 8008924:	e001      	b.n	800892a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008926:	7dfb      	ldrb	r3, [r7, #23]
 8008928:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008932:	2b00      	cmp	r3, #0
 8008934:	d029      	beq.n	800898a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800893a:	2b00      	cmp	r3, #0
 800893c:	d003      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800893e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008942:	d007      	beq.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008944:	e00f      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008946:	4b69      	ldr	r3, [pc, #420]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894a:	4a68      	ldr	r2, [pc, #416]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800894c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008950:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008952:	e00b      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	3304      	adds	r3, #4
 8008958:	2102      	movs	r1, #2
 800895a:	4618      	mov	r0, r3
 800895c:	f000 fb86 	bl	800906c <RCCEx_PLL2_Config>
 8008960:	4603      	mov	r3, r0
 8008962:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008964:	e002      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	75fb      	strb	r3, [r7, #23]
      break;
 800896a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800896c:	7dfb      	ldrb	r3, [r7, #23]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d109      	bne.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008972:	4b5e      	ldr	r3, [pc, #376]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008976:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800897e:	495b      	ldr	r1, [pc, #364]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008980:	4313      	orrs	r3, r2
 8008982:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008984:	e001      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008986:	7dfb      	ldrb	r3, [r7, #23]
 8008988:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00a      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	3324      	adds	r3, #36	; 0x24
 800899a:	2102      	movs	r1, #2
 800899c:	4618      	mov	r0, r3
 800899e:	f000 fc17 	bl	80091d0 <RCCEx_PLL3_Config>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d001      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d030      	beq.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089c0:	d017      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80089c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089c6:	d811      	bhi.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80089c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089cc:	d013      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80089ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089d2:	d80b      	bhi.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d010      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80089d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089dc:	d106      	bne.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089de:	4b43      	ldr	r3, [pc, #268]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e2:	4a42      	ldr	r2, [pc, #264]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80089ea:	e007      	b.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	75fb      	strb	r3, [r7, #23]
      break;
 80089f0:	e004      	b.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80089f2:	bf00      	nop
 80089f4:	e002      	b.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80089f6:	bf00      	nop
 80089f8:	e000      	b.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80089fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089fc:	7dfb      	ldrb	r3, [r7, #23]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d109      	bne.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008a02:	4b3a      	ldr	r3, [pc, #232]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a0e:	4937      	ldr	r1, [pc, #220]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a10:	4313      	orrs	r3, r2
 8008a12:	654b      	str	r3, [r1, #84]	; 0x54
 8008a14:	e001      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a16:	7dfb      	ldrb	r3, [r7, #23]
 8008a18:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d008      	beq.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008a26:	4b31      	ldr	r3, [pc, #196]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a32:	492e      	ldr	r1, [pc, #184]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a34:	4313      	orrs	r3, r2
 8008a36:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d009      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008a44:	4b29      	ldr	r3, [pc, #164]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008a52:	4926      	ldr	r1, [pc, #152]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d008      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a64:	4b21      	ldr	r3, [pc, #132]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a68:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a70:	491e      	ldr	r1, [pc, #120]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a72:	4313      	orrs	r3, r2
 8008a74:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00d      	beq.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a82:	4b1a      	ldr	r3, [pc, #104]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	4a19      	ldr	r2, [pc, #100]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a8c:	6113      	str	r3, [r2, #16]
 8008a8e:	4b17      	ldr	r3, [pc, #92]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a90:	691a      	ldr	r2, [r3, #16]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008a98:	4914      	ldr	r1, [pc, #80]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	da08      	bge.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008aa6:	4b11      	ldr	r3, [pc, #68]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aaa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ab2:	490e      	ldr	r1, [pc, #56]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d009      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008ac4:	4b09      	ldr	r3, [pc, #36]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ad2:	4906      	ldr	r1, [pc, #24]	; (8008aec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008ad8:	7dbb      	ldrb	r3, [r7, #22]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d101      	bne.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	e000      	b.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3718      	adds	r7, #24
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	58024400 	.word	0x58024400

08008af0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008af4:	f7ff f81e 	bl	8007b34 <HAL_RCC_GetHCLKFreq>
 8008af8:	4602      	mov	r2, r0
 8008afa:	4b06      	ldr	r3, [pc, #24]	; (8008b14 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008afc:	6a1b      	ldr	r3, [r3, #32]
 8008afe:	091b      	lsrs	r3, r3, #4
 8008b00:	f003 0307 	and.w	r3, r3, #7
 8008b04:	4904      	ldr	r1, [pc, #16]	; (8008b18 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008b06:	5ccb      	ldrb	r3, [r1, r3]
 8008b08:	f003 031f 	and.w	r3, r3, #31
 8008b0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	58024400 	.word	0x58024400
 8008b18:	0800de4c 	.word	0x0800de4c

08008b1c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b089      	sub	sp, #36	; 0x24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b24:	4ba1      	ldr	r3, [pc, #644]	; (8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b28:	f003 0303 	and.w	r3, r3, #3
 8008b2c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008b2e:	4b9f      	ldr	r3, [pc, #636]	; (8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b32:	0b1b      	lsrs	r3, r3, #12
 8008b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b38:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008b3a:	4b9c      	ldr	r3, [pc, #624]	; (8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b3e:	091b      	lsrs	r3, r3, #4
 8008b40:	f003 0301 	and.w	r3, r3, #1
 8008b44:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008b46:	4b99      	ldr	r3, [pc, #612]	; (8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b4a:	08db      	lsrs	r3, r3, #3
 8008b4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	fb02 f303 	mul.w	r3, r2, r3
 8008b56:	ee07 3a90 	vmov	s15, r3
 8008b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f000 8111 	beq.w	8008d8c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	f000 8083 	beq.w	8008c78 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	f200 80a1 	bhi.w	8008cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d003      	beq.n	8008b88 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d056      	beq.n	8008c34 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008b86:	e099      	b.n	8008cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b88:	4b88      	ldr	r3, [pc, #544]	; (8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 0320 	and.w	r3, r3, #32
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d02d      	beq.n	8008bf0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b94:	4b85      	ldr	r3, [pc, #532]	; (8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	08db      	lsrs	r3, r3, #3
 8008b9a:	f003 0303 	and.w	r3, r3, #3
 8008b9e:	4a84      	ldr	r2, [pc, #528]	; (8008db0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ba4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	ee07 3a90 	vmov	s15, r3
 8008bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	ee07 3a90 	vmov	s15, r3
 8008bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bbe:	4b7b      	ldr	r3, [pc, #492]	; (8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc6:	ee07 3a90 	vmov	s15, r3
 8008bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bd2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008bee:	e087      	b.n	8008d00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	ee07 3a90 	vmov	s15, r3
 8008bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bfa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008db8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c02:	4b6a      	ldr	r3, [pc, #424]	; (8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c0a:	ee07 3a90 	vmov	s15, r3
 8008c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c16:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c32:	e065      	b.n	8008d00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	ee07 3a90 	vmov	s15, r3
 8008c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008dbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c46:	4b59      	ldr	r3, [pc, #356]	; (8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c4e:	ee07 3a90 	vmov	s15, r3
 8008c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c76:	e043      	b.n	8008d00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	ee07 3a90 	vmov	s15, r3
 8008c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c8a:	4b48      	ldr	r3, [pc, #288]	; (8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c92:	ee07 3a90 	vmov	s15, r3
 8008c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008cba:	e021      	b.n	8008d00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	ee07 3a90 	vmov	s15, r3
 8008cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008dbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cce:	4b37      	ldr	r3, [pc, #220]	; (8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cd6:	ee07 3a90 	vmov	s15, r3
 8008cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ce2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cfa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008cfe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008d00:	4b2a      	ldr	r3, [pc, #168]	; (8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d04:	0a5b      	lsrs	r3, r3, #9
 8008d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d0a:	ee07 3a90 	vmov	s15, r3
 8008d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d26:	ee17 2a90 	vmov	r2, s15
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008d2e:	4b1f      	ldr	r3, [pc, #124]	; (8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d32:	0c1b      	lsrs	r3, r3, #16
 8008d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d38:	ee07 3a90 	vmov	s15, r3
 8008d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d48:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d54:	ee17 2a90 	vmov	r2, s15
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008d5c:	4b13      	ldr	r3, [pc, #76]	; (8008dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d60:	0e1b      	lsrs	r3, r3, #24
 8008d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d66:	ee07 3a90 	vmov	s15, r3
 8008d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d76:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d82:	ee17 2a90 	vmov	r2, s15
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008d8a:	e008      	b.n	8008d9e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	609a      	str	r2, [r3, #8]
}
 8008d9e:	bf00      	nop
 8008da0:	3724      	adds	r7, #36	; 0x24
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	58024400 	.word	0x58024400
 8008db0:	03d09000 	.word	0x03d09000
 8008db4:	46000000 	.word	0x46000000
 8008db8:	4c742400 	.word	0x4c742400
 8008dbc:	4a742400 	.word	0x4a742400
 8008dc0:	4bbebc20 	.word	0x4bbebc20

08008dc4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b089      	sub	sp, #36	; 0x24
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008dcc:	4ba1      	ldr	r3, [pc, #644]	; (8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd0:	f003 0303 	and.w	r3, r3, #3
 8008dd4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008dd6:	4b9f      	ldr	r3, [pc, #636]	; (8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dda:	0d1b      	lsrs	r3, r3, #20
 8008ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008de0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008de2:	4b9c      	ldr	r3, [pc, #624]	; (8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de6:	0a1b      	lsrs	r3, r3, #8
 8008de8:	f003 0301 	and.w	r3, r3, #1
 8008dec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008dee:	4b99      	ldr	r3, [pc, #612]	; (8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008df2:	08db      	lsrs	r3, r3, #3
 8008df4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008df8:	693a      	ldr	r2, [r7, #16]
 8008dfa:	fb02 f303 	mul.w	r3, r2, r3
 8008dfe:	ee07 3a90 	vmov	s15, r3
 8008e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 8111 	beq.w	8009034 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	f000 8083 	beq.w	8008f20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	f200 80a1 	bhi.w	8008f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d003      	beq.n	8008e30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d056      	beq.n	8008edc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008e2e:	e099      	b.n	8008f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e30:	4b88      	ldr	r3, [pc, #544]	; (8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 0320 	and.w	r3, r3, #32
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d02d      	beq.n	8008e98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e3c:	4b85      	ldr	r3, [pc, #532]	; (8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	08db      	lsrs	r3, r3, #3
 8008e42:	f003 0303 	and.w	r3, r3, #3
 8008e46:	4a84      	ldr	r2, [pc, #528]	; (8009058 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008e48:	fa22 f303 	lsr.w	r3, r2, r3
 8008e4c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	ee07 3a90 	vmov	s15, r3
 8008e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	ee07 3a90 	vmov	s15, r3
 8008e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e66:	4b7b      	ldr	r3, [pc, #492]	; (8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e6e:	ee07 3a90 	vmov	s15, r3
 8008e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800905c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e92:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008e96:	e087      	b.n	8008fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	ee07 3a90 	vmov	s15, r3
 8008e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009060 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eaa:	4b6a      	ldr	r3, [pc, #424]	; (8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb2:	ee07 3a90 	vmov	s15, r3
 8008eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ebe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800905c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ed6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008eda:	e065      	b.n	8008fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	ee07 3a90 	vmov	s15, r3
 8008ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ee6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009064 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eee:	4b59      	ldr	r3, [pc, #356]	; (8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ef6:	ee07 3a90 	vmov	s15, r3
 8008efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f02:	eddf 5a56 	vldr	s11, [pc, #344]	; 800905c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f1e:	e043      	b.n	8008fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	ee07 3a90 	vmov	s15, r3
 8008f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009068 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f32:	4b48      	ldr	r3, [pc, #288]	; (8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f3a:	ee07 3a90 	vmov	s15, r3
 8008f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f46:	eddf 5a45 	vldr	s11, [pc, #276]	; 800905c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f62:	e021      	b.n	8008fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	ee07 3a90 	vmov	s15, r3
 8008f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009064 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f76:	4b37      	ldr	r3, [pc, #220]	; (8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f7e:	ee07 3a90 	vmov	s15, r3
 8008f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800905c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008fa6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008fa8:	4b2a      	ldr	r3, [pc, #168]	; (8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fac:	0a5b      	lsrs	r3, r3, #9
 8008fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fb2:	ee07 3a90 	vmov	s15, r3
 8008fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fce:	ee17 2a90 	vmov	r2, s15
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008fd6:	4b1f      	ldr	r3, [pc, #124]	; (8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fda:	0c1b      	lsrs	r3, r3, #16
 8008fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fe0:	ee07 3a90 	vmov	s15, r3
 8008fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fe8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ff0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ffc:	ee17 2a90 	vmov	r2, s15
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009004:	4b13      	ldr	r3, [pc, #76]	; (8009054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009008:	0e1b      	lsrs	r3, r3, #24
 800900a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800900e:	ee07 3a90 	vmov	s15, r3
 8009012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009016:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800901a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800901e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800902a:	ee17 2a90 	vmov	r2, s15
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009032:	e008      	b.n	8009046 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	609a      	str	r2, [r3, #8]
}
 8009046:	bf00      	nop
 8009048:	3724      	adds	r7, #36	; 0x24
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	58024400 	.word	0x58024400
 8009058:	03d09000 	.word	0x03d09000
 800905c:	46000000 	.word	0x46000000
 8009060:	4c742400 	.word	0x4c742400
 8009064:	4a742400 	.word	0x4a742400
 8009068:	4bbebc20 	.word	0x4bbebc20

0800906c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009076:	2300      	movs	r3, #0
 8009078:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800907a:	4b53      	ldr	r3, [pc, #332]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 800907c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907e:	f003 0303 	and.w	r3, r3, #3
 8009082:	2b03      	cmp	r3, #3
 8009084:	d101      	bne.n	800908a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e099      	b.n	80091be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800908a:	4b4f      	ldr	r3, [pc, #316]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a4e      	ldr	r2, [pc, #312]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 8009090:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009094:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009096:	f7fa fc3b 	bl	8003910 <HAL_GetTick>
 800909a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800909c:	e008      	b.n	80090b0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800909e:	f7fa fc37 	bl	8003910 <HAL_GetTick>
 80090a2:	4602      	mov	r2, r0
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	1ad3      	subs	r3, r2, r3
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d901      	bls.n	80090b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80090ac:	2303      	movs	r3, #3
 80090ae:	e086      	b.n	80091be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80090b0:	4b45      	ldr	r3, [pc, #276]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1f0      	bne.n	800909e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80090bc:	4b42      	ldr	r3, [pc, #264]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 80090be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	031b      	lsls	r3, r3, #12
 80090ca:	493f      	ldr	r1, [pc, #252]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 80090cc:	4313      	orrs	r3, r2
 80090ce:	628b      	str	r3, [r1, #40]	; 0x28
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	3b01      	subs	r3, #1
 80090d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	3b01      	subs	r3, #1
 80090e0:	025b      	lsls	r3, r3, #9
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	431a      	orrs	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	3b01      	subs	r3, #1
 80090ec:	041b      	lsls	r3, r3, #16
 80090ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80090f2:	431a      	orrs	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	3b01      	subs	r3, #1
 80090fa:	061b      	lsls	r3, r3, #24
 80090fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009100:	4931      	ldr	r1, [pc, #196]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 8009102:	4313      	orrs	r3, r2
 8009104:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009106:	4b30      	ldr	r3, [pc, #192]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 8009108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	695b      	ldr	r3, [r3, #20]
 8009112:	492d      	ldr	r1, [pc, #180]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 8009114:	4313      	orrs	r3, r2
 8009116:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009118:	4b2b      	ldr	r3, [pc, #172]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 800911a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911c:	f023 0220 	bic.w	r2, r3, #32
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	4928      	ldr	r1, [pc, #160]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 8009126:	4313      	orrs	r3, r2
 8009128:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800912a:	4b27      	ldr	r3, [pc, #156]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 800912c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912e:	4a26      	ldr	r2, [pc, #152]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 8009130:	f023 0310 	bic.w	r3, r3, #16
 8009134:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009136:	4b24      	ldr	r3, [pc, #144]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 8009138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800913a:	4b24      	ldr	r3, [pc, #144]	; (80091cc <RCCEx_PLL2_Config+0x160>)
 800913c:	4013      	ands	r3, r2
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	69d2      	ldr	r2, [r2, #28]
 8009142:	00d2      	lsls	r2, r2, #3
 8009144:	4920      	ldr	r1, [pc, #128]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 8009146:	4313      	orrs	r3, r2
 8009148:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800914a:	4b1f      	ldr	r3, [pc, #124]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 800914c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914e:	4a1e      	ldr	r2, [pc, #120]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 8009150:	f043 0310 	orr.w	r3, r3, #16
 8009154:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d106      	bne.n	800916a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800915c:	4b1a      	ldr	r3, [pc, #104]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 800915e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009160:	4a19      	ldr	r2, [pc, #100]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 8009162:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009166:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009168:	e00f      	b.n	800918a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b01      	cmp	r3, #1
 800916e:	d106      	bne.n	800917e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009170:	4b15      	ldr	r3, [pc, #84]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 8009172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009174:	4a14      	ldr	r2, [pc, #80]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 8009176:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800917a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800917c:	e005      	b.n	800918a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800917e:	4b12      	ldr	r3, [pc, #72]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 8009180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009182:	4a11      	ldr	r2, [pc, #68]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 8009184:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009188:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800918a:	4b0f      	ldr	r3, [pc, #60]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a0e      	ldr	r2, [pc, #56]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 8009190:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009194:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009196:	f7fa fbbb 	bl	8003910 <HAL_GetTick>
 800919a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800919c:	e008      	b.n	80091b0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800919e:	f7fa fbb7 	bl	8003910 <HAL_GetTick>
 80091a2:	4602      	mov	r2, r0
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	1ad3      	subs	r3, r2, r3
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	d901      	bls.n	80091b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80091ac:	2303      	movs	r3, #3
 80091ae:	e006      	b.n	80091be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80091b0:	4b05      	ldr	r3, [pc, #20]	; (80091c8 <RCCEx_PLL2_Config+0x15c>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d0f0      	beq.n	800919e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80091bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	58024400 	.word	0x58024400
 80091cc:	ffff0007 	.word	0xffff0007

080091d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091de:	4b53      	ldr	r3, [pc, #332]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 80091e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e2:	f003 0303 	and.w	r3, r3, #3
 80091e6:	2b03      	cmp	r3, #3
 80091e8:	d101      	bne.n	80091ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e099      	b.n	8009322 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80091ee:	4b4f      	ldr	r3, [pc, #316]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a4e      	ldr	r2, [pc, #312]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 80091f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091fa:	f7fa fb89 	bl	8003910 <HAL_GetTick>
 80091fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009200:	e008      	b.n	8009214 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009202:	f7fa fb85 	bl	8003910 <HAL_GetTick>
 8009206:	4602      	mov	r2, r0
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	2b02      	cmp	r3, #2
 800920e:	d901      	bls.n	8009214 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009210:	2303      	movs	r3, #3
 8009212:	e086      	b.n	8009322 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009214:	4b45      	ldr	r3, [pc, #276]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1f0      	bne.n	8009202 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009220:	4b42      	ldr	r3, [pc, #264]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 8009222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009224:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	051b      	lsls	r3, r3, #20
 800922e:	493f      	ldr	r1, [pc, #252]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 8009230:	4313      	orrs	r3, r2
 8009232:	628b      	str	r3, [r1, #40]	; 0x28
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	3b01      	subs	r3, #1
 800923a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	3b01      	subs	r3, #1
 8009244:	025b      	lsls	r3, r3, #9
 8009246:	b29b      	uxth	r3, r3
 8009248:	431a      	orrs	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	3b01      	subs	r3, #1
 8009250:	041b      	lsls	r3, r3, #16
 8009252:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009256:	431a      	orrs	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	3b01      	subs	r3, #1
 800925e:	061b      	lsls	r3, r3, #24
 8009260:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009264:	4931      	ldr	r1, [pc, #196]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 8009266:	4313      	orrs	r3, r2
 8009268:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800926a:	4b30      	ldr	r3, [pc, #192]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 800926c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	695b      	ldr	r3, [r3, #20]
 8009276:	492d      	ldr	r1, [pc, #180]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 8009278:	4313      	orrs	r3, r2
 800927a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800927c:	4b2b      	ldr	r3, [pc, #172]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 800927e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009280:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	4928      	ldr	r1, [pc, #160]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 800928a:	4313      	orrs	r3, r2
 800928c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800928e:	4b27      	ldr	r3, [pc, #156]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 8009290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009292:	4a26      	ldr	r2, [pc, #152]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 8009294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009298:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800929a:	4b24      	ldr	r3, [pc, #144]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 800929c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800929e:	4b24      	ldr	r3, [pc, #144]	; (8009330 <RCCEx_PLL3_Config+0x160>)
 80092a0:	4013      	ands	r3, r2
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	69d2      	ldr	r2, [r2, #28]
 80092a6:	00d2      	lsls	r2, r2, #3
 80092a8:	4920      	ldr	r1, [pc, #128]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 80092aa:	4313      	orrs	r3, r2
 80092ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80092ae:	4b1f      	ldr	r3, [pc, #124]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 80092b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b2:	4a1e      	ldr	r2, [pc, #120]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 80092b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d106      	bne.n	80092ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80092c0:	4b1a      	ldr	r3, [pc, #104]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 80092c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c4:	4a19      	ldr	r2, [pc, #100]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 80092c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80092ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092cc:	e00f      	b.n	80092ee <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d106      	bne.n	80092e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80092d4:	4b15      	ldr	r3, [pc, #84]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 80092d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d8:	4a14      	ldr	r2, [pc, #80]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 80092da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80092de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092e0:	e005      	b.n	80092ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80092e2:	4b12      	ldr	r3, [pc, #72]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 80092e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e6:	4a11      	ldr	r2, [pc, #68]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 80092e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80092ee:	4b0f      	ldr	r3, [pc, #60]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a0e      	ldr	r2, [pc, #56]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 80092f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092fa:	f7fa fb09 	bl	8003910 <HAL_GetTick>
 80092fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009300:	e008      	b.n	8009314 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009302:	f7fa fb05 	bl	8003910 <HAL_GetTick>
 8009306:	4602      	mov	r2, r0
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	2b02      	cmp	r3, #2
 800930e:	d901      	bls.n	8009314 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009310:	2303      	movs	r3, #3
 8009312:	e006      	b.n	8009322 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009314:	4b05      	ldr	r3, [pc, #20]	; (800932c <RCCEx_PLL3_Config+0x15c>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d0f0      	beq.n	8009302 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009320:	7bfb      	ldrb	r3, [r7, #15]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	58024400 	.word	0x58024400
 8009330:	ffff0007 	.word	0xffff0007

08009334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d101      	bne.n	8009346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	e049      	b.n	80093da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800934c:	b2db      	uxtb	r3, r3
 800934e:	2b00      	cmp	r3, #0
 8009350:	d106      	bne.n	8009360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f841 	bl	80093e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2202      	movs	r2, #2
 8009364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	3304      	adds	r3, #4
 8009370:	4619      	mov	r1, r3
 8009372:	4610      	mov	r0, r2
 8009374:	f000 f9f8 	bl	8009768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3708      	adds	r7, #8
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b083      	sub	sp, #12
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80093ea:	bf00      	nop
 80093ec:	370c      	adds	r7, #12
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr
	...

080093f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009406:	b2db      	uxtb	r3, r3
 8009408:	2b01      	cmp	r3, #1
 800940a:	d001      	beq.n	8009410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	e04f      	b.n	80094b0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2202      	movs	r2, #2
 8009414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68da      	ldr	r2, [r3, #12]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f042 0201 	orr.w	r2, r2, #1
 8009426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a23      	ldr	r2, [pc, #140]	; (80094bc <HAL_TIM_Base_Start_IT+0xc4>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d01d      	beq.n	800946e <HAL_TIM_Base_Start_IT+0x76>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800943a:	d018      	beq.n	800946e <HAL_TIM_Base_Start_IT+0x76>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a1f      	ldr	r2, [pc, #124]	; (80094c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d013      	beq.n	800946e <HAL_TIM_Base_Start_IT+0x76>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a1e      	ldr	r2, [pc, #120]	; (80094c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d00e      	beq.n	800946e <HAL_TIM_Base_Start_IT+0x76>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a1c      	ldr	r2, [pc, #112]	; (80094c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d009      	beq.n	800946e <HAL_TIM_Base_Start_IT+0x76>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a1b      	ldr	r2, [pc, #108]	; (80094cc <HAL_TIM_Base_Start_IT+0xd4>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d004      	beq.n	800946e <HAL_TIM_Base_Start_IT+0x76>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a19      	ldr	r2, [pc, #100]	; (80094d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d115      	bne.n	800949a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	689a      	ldr	r2, [r3, #8]
 8009474:	4b17      	ldr	r3, [pc, #92]	; (80094d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009476:	4013      	ands	r3, r2
 8009478:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2b06      	cmp	r3, #6
 800947e:	d015      	beq.n	80094ac <HAL_TIM_Base_Start_IT+0xb4>
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009486:	d011      	beq.n	80094ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f042 0201 	orr.w	r2, r2, #1
 8009496:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009498:	e008      	b.n	80094ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f042 0201 	orr.w	r2, r2, #1
 80094a8:	601a      	str	r2, [r3, #0]
 80094aa:	e000      	b.n	80094ae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3714      	adds	r7, #20
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr
 80094bc:	40010000 	.word	0x40010000
 80094c0:	40000400 	.word	0x40000400
 80094c4:	40000800 	.word	0x40000800
 80094c8:	40000c00 	.word	0x40000c00
 80094cc:	40010400 	.word	0x40010400
 80094d0:	40001800 	.word	0x40001800
 80094d4:	00010007 	.word	0x00010007

080094d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	f003 0302 	and.w	r3, r3, #2
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d122      	bne.n	8009534 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	f003 0302 	and.w	r3, r3, #2
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	d11b      	bne.n	8009534 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f06f 0202 	mvn.w	r2, #2
 8009504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2201      	movs	r2, #1
 800950a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	699b      	ldr	r3, [r3, #24]
 8009512:	f003 0303 	and.w	r3, r3, #3
 8009516:	2b00      	cmp	r3, #0
 8009518:	d003      	beq.n	8009522 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f905 	bl	800972a <HAL_TIM_IC_CaptureCallback>
 8009520:	e005      	b.n	800952e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f8f7 	bl	8009716 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 f908 	bl	800973e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	f003 0304 	and.w	r3, r3, #4
 800953e:	2b04      	cmp	r3, #4
 8009540:	d122      	bne.n	8009588 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	f003 0304 	and.w	r3, r3, #4
 800954c:	2b04      	cmp	r3, #4
 800954e:	d11b      	bne.n	8009588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f06f 0204 	mvn.w	r2, #4
 8009558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2202      	movs	r2, #2
 800955e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800956a:	2b00      	cmp	r3, #0
 800956c:	d003      	beq.n	8009576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 f8db 	bl	800972a <HAL_TIM_IC_CaptureCallback>
 8009574:	e005      	b.n	8009582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f8cd 	bl	8009716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f8de 	bl	800973e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	f003 0308 	and.w	r3, r3, #8
 8009592:	2b08      	cmp	r3, #8
 8009594:	d122      	bne.n	80095dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	f003 0308 	and.w	r3, r3, #8
 80095a0:	2b08      	cmp	r3, #8
 80095a2:	d11b      	bne.n	80095dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f06f 0208 	mvn.w	r2, #8
 80095ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2204      	movs	r2, #4
 80095b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	69db      	ldr	r3, [r3, #28]
 80095ba:	f003 0303 	and.w	r3, r3, #3
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d003      	beq.n	80095ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f8b1 	bl	800972a <HAL_TIM_IC_CaptureCallback>
 80095c8:	e005      	b.n	80095d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f8a3 	bl	8009716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 f8b4 	bl	800973e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	f003 0310 	and.w	r3, r3, #16
 80095e6:	2b10      	cmp	r3, #16
 80095e8:	d122      	bne.n	8009630 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	f003 0310 	and.w	r3, r3, #16
 80095f4:	2b10      	cmp	r3, #16
 80095f6:	d11b      	bne.n	8009630 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f06f 0210 	mvn.w	r2, #16
 8009600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2208      	movs	r2, #8
 8009606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	69db      	ldr	r3, [r3, #28]
 800960e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009612:	2b00      	cmp	r3, #0
 8009614:	d003      	beq.n	800961e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f887 	bl	800972a <HAL_TIM_IC_CaptureCallback>
 800961c:	e005      	b.n	800962a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f879 	bl	8009716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 f88a 	bl	800973e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	f003 0301 	and.w	r3, r3, #1
 800963a:	2b01      	cmp	r3, #1
 800963c:	d10e      	bne.n	800965c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	f003 0301 	and.w	r3, r3, #1
 8009648:	2b01      	cmp	r3, #1
 800964a:	d107      	bne.n	800965c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f06f 0201 	mvn.w	r2, #1
 8009654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7f8 ff62 	bl	8002520 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009666:	2b80      	cmp	r3, #128	; 0x80
 8009668:	d10e      	bne.n	8009688 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009674:	2b80      	cmp	r3, #128	; 0x80
 8009676:	d107      	bne.n	8009688 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 f914 	bl	80098b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009696:	d10e      	bne.n	80096b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096a2:	2b80      	cmp	r3, #128	; 0x80
 80096a4:	d107      	bne.n	80096b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80096ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 f907 	bl	80098c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c0:	2b40      	cmp	r3, #64	; 0x40
 80096c2:	d10e      	bne.n	80096e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ce:	2b40      	cmp	r3, #64	; 0x40
 80096d0:	d107      	bne.n	80096e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80096da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 f838 	bl	8009752 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	691b      	ldr	r3, [r3, #16]
 80096e8:	f003 0320 	and.w	r3, r3, #32
 80096ec:	2b20      	cmp	r3, #32
 80096ee:	d10e      	bne.n	800970e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	f003 0320 	and.w	r3, r3, #32
 80096fa:	2b20      	cmp	r3, #32
 80096fc:	d107      	bne.n	800970e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f06f 0220 	mvn.w	r2, #32
 8009706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 f8c7 	bl	800989c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800970e:	bf00      	nop
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009716:	b480      	push	{r7}
 8009718:	b083      	sub	sp, #12
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800971e:	bf00      	nop
 8009720:	370c      	adds	r7, #12
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr

0800972a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800972a:	b480      	push	{r7}
 800972c:	b083      	sub	sp, #12
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009732:	bf00      	nop
 8009734:	370c      	adds	r7, #12
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr

0800973e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800973e:	b480      	push	{r7}
 8009740:	b083      	sub	sp, #12
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009746:	bf00      	nop
 8009748:	370c      	adds	r7, #12
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr

08009752 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009752:	b480      	push	{r7}
 8009754:	b083      	sub	sp, #12
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800975a:	bf00      	nop
 800975c:	370c      	adds	r7, #12
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
	...

08009768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009768:	b480      	push	{r7}
 800976a:	b085      	sub	sp, #20
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a40      	ldr	r2, [pc, #256]	; (800987c <TIM_Base_SetConfig+0x114>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d013      	beq.n	80097a8 <TIM_Base_SetConfig+0x40>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009786:	d00f      	beq.n	80097a8 <TIM_Base_SetConfig+0x40>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a3d      	ldr	r2, [pc, #244]	; (8009880 <TIM_Base_SetConfig+0x118>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d00b      	beq.n	80097a8 <TIM_Base_SetConfig+0x40>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a3c      	ldr	r2, [pc, #240]	; (8009884 <TIM_Base_SetConfig+0x11c>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d007      	beq.n	80097a8 <TIM_Base_SetConfig+0x40>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a3b      	ldr	r2, [pc, #236]	; (8009888 <TIM_Base_SetConfig+0x120>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d003      	beq.n	80097a8 <TIM_Base_SetConfig+0x40>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a3a      	ldr	r2, [pc, #232]	; (800988c <TIM_Base_SetConfig+0x124>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d108      	bne.n	80097ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4a2f      	ldr	r2, [pc, #188]	; (800987c <TIM_Base_SetConfig+0x114>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d01f      	beq.n	8009802 <TIM_Base_SetConfig+0x9a>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097c8:	d01b      	beq.n	8009802 <TIM_Base_SetConfig+0x9a>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a2c      	ldr	r2, [pc, #176]	; (8009880 <TIM_Base_SetConfig+0x118>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d017      	beq.n	8009802 <TIM_Base_SetConfig+0x9a>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a2b      	ldr	r2, [pc, #172]	; (8009884 <TIM_Base_SetConfig+0x11c>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d013      	beq.n	8009802 <TIM_Base_SetConfig+0x9a>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a2a      	ldr	r2, [pc, #168]	; (8009888 <TIM_Base_SetConfig+0x120>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d00f      	beq.n	8009802 <TIM_Base_SetConfig+0x9a>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a29      	ldr	r2, [pc, #164]	; (800988c <TIM_Base_SetConfig+0x124>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d00b      	beq.n	8009802 <TIM_Base_SetConfig+0x9a>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a28      	ldr	r2, [pc, #160]	; (8009890 <TIM_Base_SetConfig+0x128>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d007      	beq.n	8009802 <TIM_Base_SetConfig+0x9a>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a27      	ldr	r2, [pc, #156]	; (8009894 <TIM_Base_SetConfig+0x12c>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d003      	beq.n	8009802 <TIM_Base_SetConfig+0x9a>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a26      	ldr	r2, [pc, #152]	; (8009898 <TIM_Base_SetConfig+0x130>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d108      	bne.n	8009814 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	4313      	orrs	r3, r2
 8009812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	695b      	ldr	r3, [r3, #20]
 800981e:	4313      	orrs	r3, r2
 8009820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	689a      	ldr	r2, [r3, #8]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a10      	ldr	r2, [pc, #64]	; (800987c <TIM_Base_SetConfig+0x114>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d00f      	beq.n	8009860 <TIM_Base_SetConfig+0xf8>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a12      	ldr	r2, [pc, #72]	; (800988c <TIM_Base_SetConfig+0x124>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d00b      	beq.n	8009860 <TIM_Base_SetConfig+0xf8>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a11      	ldr	r2, [pc, #68]	; (8009890 <TIM_Base_SetConfig+0x128>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d007      	beq.n	8009860 <TIM_Base_SetConfig+0xf8>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a10      	ldr	r2, [pc, #64]	; (8009894 <TIM_Base_SetConfig+0x12c>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d003      	beq.n	8009860 <TIM_Base_SetConfig+0xf8>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a0f      	ldr	r2, [pc, #60]	; (8009898 <TIM_Base_SetConfig+0x130>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d103      	bne.n	8009868 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	691a      	ldr	r2, [r3, #16]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	615a      	str	r2, [r3, #20]
}
 800986e:	bf00      	nop
 8009870:	3714      	adds	r7, #20
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	40010000 	.word	0x40010000
 8009880:	40000400 	.word	0x40000400
 8009884:	40000800 	.word	0x40000800
 8009888:	40000c00 	.word	0x40000c00
 800988c:	40010400 	.word	0x40010400
 8009890:	40014000 	.word	0x40014000
 8009894:	40014400 	.word	0x40014400
 8009898:	40014800 	.word	0x40014800

0800989c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80098a4:	bf00      	nop
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80098b8:	bf00      	nop
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80098cc:	bf00      	nop
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d101      	bne.n	80098ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	e042      	b.n	8009970 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d106      	bne.n	8009902 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f7f8 fe45 	bl	800258c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2224      	movs	r2, #36	; 0x24
 8009906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	681a      	ldr	r2, [r3, #0]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f022 0201 	bic.w	r2, r2, #1
 8009918:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 fc5a 	bl	800a1d4 <UART_SetConfig>
 8009920:	4603      	mov	r3, r0
 8009922:	2b01      	cmp	r3, #1
 8009924:	d101      	bne.n	800992a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	e022      	b.n	8009970 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800992e:	2b00      	cmp	r3, #0
 8009930:	d002      	beq.n	8009938 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f001 f9ae 	bl	800ac94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	685a      	ldr	r2, [r3, #4]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009946:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	689a      	ldr	r2, [r3, #8]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009956:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f042 0201 	orr.w	r2, r2, #1
 8009966:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f001 fa35 	bl	800add8 <UART_CheckIdleState>
 800996e:	4603      	mov	r3, r0
}
 8009970:	4618      	mov	r0, r3
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	4613      	mov	r3, r2
 8009984:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800998c:	2b20      	cmp	r3, #32
 800998e:	d168      	bne.n	8009a62 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d002      	beq.n	800999c <HAL_UART_Transmit_DMA+0x24>
 8009996:	88fb      	ldrh	r3, [r7, #6]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d101      	bne.n	80099a0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800999c:	2301      	movs	r3, #1
 800999e:	e061      	b.n	8009a64 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d101      	bne.n	80099ae <HAL_UART_Transmit_DMA+0x36>
 80099aa:	2302      	movs	r3, #2
 80099ac:	e05a      	b.n	8009a64 <HAL_UART_Transmit_DMA+0xec>
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2201      	movs	r2, #1
 80099b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	88fa      	ldrh	r2, [r7, #6]
 80099c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	88fa      	ldrh	r2, [r7, #6]
 80099c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2221      	movs	r2, #33	; 0x21
 80099d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d02c      	beq.n	8009a3e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099e8:	4a20      	ldr	r2, [pc, #128]	; (8009a6c <HAL_UART_Transmit_DMA+0xf4>)
 80099ea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099f0:	4a1f      	ldr	r2, [pc, #124]	; (8009a70 <HAL_UART_Transmit_DMA+0xf8>)
 80099f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099f8:	4a1e      	ldr	r2, [pc, #120]	; (8009a74 <HAL_UART_Transmit_DMA+0xfc>)
 80099fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a00:	2200      	movs	r2, #0
 8009a02:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	3328      	adds	r3, #40	; 0x28
 8009a14:	461a      	mov	r2, r3
 8009a16:	88fb      	ldrh	r3, [r7, #6]
 8009a18:	f7fa fbce 	bl	80041b8 <HAL_DMA_Start_IT>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00d      	beq.n	8009a3e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2210      	movs	r2, #16
 8009a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2220      	movs	r2, #32
 8009a36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e012      	b.n	8009a64 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2240      	movs	r2, #64	; 0x40
 8009a44:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	689a      	ldr	r2, [r3, #8]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009a5c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	e000      	b.n	8009a64 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8009a62:	2302      	movs	r3, #2
  }
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	0800b0ed 	.word	0x0800b0ed
 8009a70:	0800b13d 	.word	0x0800b13d
 8009a74:	0800b227 	.word	0x0800b227

08009a78 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	4613      	mov	r3, r2
 8009a84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a8c:	2b20      	cmp	r3, #32
 8009a8e:	d131      	bne.n	8009af4 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d002      	beq.n	8009a9c <HAL_UART_Receive_DMA+0x24>
 8009a96:	88fb      	ldrh	r3, [r7, #6]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d101      	bne.n	8009aa0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e02a      	b.n	8009af6 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d101      	bne.n	8009aae <HAL_UART_Receive_DMA+0x36>
 8009aaa:	2302      	movs	r3, #2
 8009aac:	e023      	b.n	8009af6 <HAL_UART_Receive_DMA+0x7e>
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a0f      	ldr	r2, [pc, #60]	; (8009b00 <HAL_UART_Receive_DMA+0x88>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d00e      	beq.n	8009ae4 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d007      	beq.n	8009ae4 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009ae2:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009ae4:	88fb      	ldrh	r3, [r7, #6]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	68b9      	ldr	r1, [r7, #8]
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f001 fa40 	bl	800af70 <UART_Start_Receive_DMA>
 8009af0:	4603      	mov	r3, r0
 8009af2:	e000      	b.n	8009af6 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009af4:	2302      	movs	r3, #2
  }
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	58000c00 	.word	0x58000c00

08009b04 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b12:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b1a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	689b      	ldr	r3, [r3, #8]
 8009b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b26:	2b80      	cmp	r3, #128	; 0x80
 8009b28:	d127      	bne.n	8009b7a <HAL_UART_DMAStop+0x76>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2b21      	cmp	r3, #33	; 0x21
 8009b2e:	d124      	bne.n	8009b7a <HAL_UART_DMAStop+0x76>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	689a      	ldr	r2, [r3, #8]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b3e:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d015      	beq.n	8009b74 <HAL_UART_DMAStop+0x70>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7fa fd9d 	bl	800468c <HAL_DMA_Abort>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00d      	beq.n	8009b74 <HAL_UART_DMAStop+0x70>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7fc fa21 	bl	8005fa4 <HAL_DMA_GetError>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b20      	cmp	r3, #32
 8009b66:	d105      	bne.n	8009b74 <HAL_UART_DMAStop+0x70>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2210      	movs	r2, #16
 8009b6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e032      	b.n	8009bda <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f001 fa69 	bl	800b04c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b84:	2b40      	cmp	r3, #64	; 0x40
 8009b86:	d127      	bne.n	8009bd8 <HAL_UART_DMAStop+0xd4>
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	2b22      	cmp	r3, #34	; 0x22
 8009b8c:	d124      	bne.n	8009bd8 <HAL_UART_DMAStop+0xd4>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	689a      	ldr	r2, [r3, #8]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b9c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d015      	beq.n	8009bd2 <HAL_UART_DMAStop+0xce>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7fa fd6e 	bl	800468c <HAL_DMA_Abort>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00d      	beq.n	8009bd2 <HAL_UART_DMAStop+0xce>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7fc f9f2 	bl	8005fa4 <HAL_DMA_GetError>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b20      	cmp	r3, #32
 8009bc4:	d105      	bne.n	8009bd2 <HAL_UART_DMAStop+0xce>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2210      	movs	r2, #16
 8009bca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	e003      	b.n	8009bda <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f001 fa58 	bl	800b088 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009bd8:	2300      	movs	r3, #0
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
	...

08009be4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b088      	sub	sp, #32
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	69db      	ldr	r3, [r3, #28]
 8009bf2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009c04:	69fa      	ldr	r2, [r7, #28]
 8009c06:	f640 030f 	movw	r3, #2063	; 0x80f
 8009c0a:	4013      	ands	r3, r2
 8009c0c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d118      	bne.n	8009c46 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	f003 0320 	and.w	r3, r3, #32
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d013      	beq.n	8009c46 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	f003 0320 	and.w	r3, r3, #32
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d104      	bne.n	8009c32 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d009      	beq.n	8009c46 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f000 8282 	beq.w	800a140 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	4798      	blx	r3
      }
      return;
 8009c44:	e27c      	b.n	800a140 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	f000 80ef 	beq.w	8009e2c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009c4e:	697a      	ldr	r2, [r7, #20]
 8009c50:	4b73      	ldr	r3, [pc, #460]	; (8009e20 <HAL_UART_IRQHandler+0x23c>)
 8009c52:	4013      	ands	r3, r2
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d105      	bne.n	8009c64 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009c58:	69ba      	ldr	r2, [r7, #24]
 8009c5a:	4b72      	ldr	r3, [pc, #456]	; (8009e24 <HAL_UART_IRQHandler+0x240>)
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f000 80e4 	beq.w	8009e2c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	f003 0301 	and.w	r3, r3, #1
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d010      	beq.n	8009c90 <HAL_UART_IRQHandler+0xac>
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00b      	beq.n	8009c90 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c86:	f043 0201 	orr.w	r2, r3, #1
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	f003 0302 	and.w	r3, r3, #2
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d010      	beq.n	8009cbc <HAL_UART_IRQHandler+0xd8>
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	f003 0301 	and.w	r3, r3, #1
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00b      	beq.n	8009cbc <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2202      	movs	r2, #2
 8009caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cb2:	f043 0204 	orr.w	r2, r3, #4
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	f003 0304 	and.w	r3, r3, #4
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d010      	beq.n	8009ce8 <HAL_UART_IRQHandler+0x104>
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	f003 0301 	and.w	r3, r3, #1
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00b      	beq.n	8009ce8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2204      	movs	r2, #4
 8009cd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cde:	f043 0202 	orr.w	r2, r3, #2
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	f003 0308 	and.w	r3, r3, #8
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d015      	beq.n	8009d1e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	f003 0320 	and.w	r3, r3, #32
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d104      	bne.n	8009d06 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009cfc:	697a      	ldr	r2, [r7, #20]
 8009cfe:	4b48      	ldr	r3, [pc, #288]	; (8009e20 <HAL_UART_IRQHandler+0x23c>)
 8009d00:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00b      	beq.n	8009d1e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2208      	movs	r2, #8
 8009d0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d14:	f043 0208 	orr.w	r2, r3, #8
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d011      	beq.n	8009d4c <HAL_UART_IRQHandler+0x168>
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00c      	beq.n	8009d4c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d42:	f043 0220 	orr.w	r2, r3, #32
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f000 81f6 	beq.w	800a144 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	f003 0320 	and.w	r3, r3, #32
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d011      	beq.n	8009d86 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	f003 0320 	and.w	r3, r3, #32
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d104      	bne.n	8009d76 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d007      	beq.n	8009d86 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d003      	beq.n	8009d86 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d8c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d98:	2b40      	cmp	r3, #64	; 0x40
 8009d9a:	d004      	beq.n	8009da6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d031      	beq.n	8009e0a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f001 f96e 	bl	800b088 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009db6:	2b40      	cmp	r3, #64	; 0x40
 8009db8:	d123      	bne.n	8009e02 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	689a      	ldr	r2, [r3, #8]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009dc8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d013      	beq.n	8009dfa <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dd6:	4a14      	ldr	r2, [pc, #80]	; (8009e28 <HAL_UART_IRQHandler+0x244>)
 8009dd8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fa ff72 	bl	8004cc8 <HAL_DMA_Abort_IT>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d017      	beq.n	8009e1a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009df4:	4610      	mov	r0, r2
 8009df6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009df8:	e00f      	b.n	8009e1a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f9d4 	bl	800a1a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e00:	e00b      	b.n	8009e1a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 f9d0 	bl	800a1a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e08:	e007      	b.n	8009e1a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 f9cc 	bl	800a1a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009e18:	e194      	b.n	800a144 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e1a:	bf00      	nop
    return;
 8009e1c:	e192      	b.n	800a144 <HAL_UART_IRQHandler+0x560>
 8009e1e:	bf00      	nop
 8009e20:	10000001 	.word	0x10000001
 8009e24:	04000120 	.word	0x04000120
 8009e28:	0800b2a7 	.word	0x0800b2a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	f040 810f 	bne.w	800a054 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	f003 0310 	and.w	r3, r3, #16
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f000 8109 	beq.w	800a054 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	f003 0310 	and.w	r3, r3, #16
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 8103 	beq.w	800a054 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2210      	movs	r2, #16
 8009e54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e60:	2b40      	cmp	r3, #64	; 0x40
 8009e62:	f040 80bb 	bne.w	8009fdc <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a96      	ldr	r2, [pc, #600]	; (800a0c8 <HAL_UART_IRQHandler+0x4e4>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d059      	beq.n	8009f26 <HAL_UART_IRQHandler+0x342>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a94      	ldr	r2, [pc, #592]	; (800a0cc <HAL_UART_IRQHandler+0x4e8>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d053      	beq.n	8009f26 <HAL_UART_IRQHandler+0x342>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a92      	ldr	r2, [pc, #584]	; (800a0d0 <HAL_UART_IRQHandler+0x4ec>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d04d      	beq.n	8009f26 <HAL_UART_IRQHandler+0x342>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a90      	ldr	r2, [pc, #576]	; (800a0d4 <HAL_UART_IRQHandler+0x4f0>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d047      	beq.n	8009f26 <HAL_UART_IRQHandler+0x342>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a8e      	ldr	r2, [pc, #568]	; (800a0d8 <HAL_UART_IRQHandler+0x4f4>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d041      	beq.n	8009f26 <HAL_UART_IRQHandler+0x342>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a8c      	ldr	r2, [pc, #560]	; (800a0dc <HAL_UART_IRQHandler+0x4f8>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d03b      	beq.n	8009f26 <HAL_UART_IRQHandler+0x342>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a8a      	ldr	r2, [pc, #552]	; (800a0e0 <HAL_UART_IRQHandler+0x4fc>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d035      	beq.n	8009f26 <HAL_UART_IRQHandler+0x342>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a88      	ldr	r2, [pc, #544]	; (800a0e4 <HAL_UART_IRQHandler+0x500>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d02f      	beq.n	8009f26 <HAL_UART_IRQHandler+0x342>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a86      	ldr	r2, [pc, #536]	; (800a0e8 <HAL_UART_IRQHandler+0x504>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d029      	beq.n	8009f26 <HAL_UART_IRQHandler+0x342>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a84      	ldr	r2, [pc, #528]	; (800a0ec <HAL_UART_IRQHandler+0x508>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d023      	beq.n	8009f26 <HAL_UART_IRQHandler+0x342>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a82      	ldr	r2, [pc, #520]	; (800a0f0 <HAL_UART_IRQHandler+0x50c>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d01d      	beq.n	8009f26 <HAL_UART_IRQHandler+0x342>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a80      	ldr	r2, [pc, #512]	; (800a0f4 <HAL_UART_IRQHandler+0x510>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d017      	beq.n	8009f26 <HAL_UART_IRQHandler+0x342>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a7e      	ldr	r2, [pc, #504]	; (800a0f8 <HAL_UART_IRQHandler+0x514>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d011      	beq.n	8009f26 <HAL_UART_IRQHandler+0x342>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a7c      	ldr	r2, [pc, #496]	; (800a0fc <HAL_UART_IRQHandler+0x518>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d00b      	beq.n	8009f26 <HAL_UART_IRQHandler+0x342>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a7a      	ldr	r2, [pc, #488]	; (800a100 <HAL_UART_IRQHandler+0x51c>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d005      	beq.n	8009f26 <HAL_UART_IRQHandler+0x342>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a78      	ldr	r2, [pc, #480]	; (800a104 <HAL_UART_IRQHandler+0x520>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d105      	bne.n	8009f32 <HAL_UART_IRQHandler+0x34e>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	e004      	b.n	8009f3c <HAL_UART_IRQHandler+0x358>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8009f3e:	893b      	ldrh	r3, [r7, #8]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	f000 8101 	beq.w	800a148 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009f4c:	893a      	ldrh	r2, [r7, #8]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	f080 80fa 	bcs.w	800a148 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	893a      	ldrh	r2, [r7, #8]
 8009f58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f60:	69db      	ldr	r3, [r3, #28]
 8009f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f66:	d02b      	beq.n	8009fc0 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f76:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	689a      	ldr	r2, [r3, #8]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f022 0201 	bic.w	r2, r2, #1
 8009f86:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	689a      	ldr	r2, [r3, #8]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f96:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2220      	movs	r2, #32
 8009f9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f022 0210 	bic.w	r2, r2, #16
 8009fb4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fa fb66 	bl	800468c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	1ad3      	subs	r3, r2, r3
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f8f1 	bl	800a1bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009fda:	e0b5      	b.n	800a148 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	1ad3      	subs	r3, r2, r3
 8009fec:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f000 80a8 	beq.w	800a14c <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8009ffc:	897b      	ldrh	r3, [r7, #10]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f000 80a4 	beq.w	800a14c <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a012:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	6899      	ldr	r1, [r3, #8]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	4b3a      	ldr	r3, [pc, #232]	; (800a108 <HAL_UART_IRQHandler+0x524>)
 800a020:	400b      	ands	r3, r1
 800a022:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2220      	movs	r2, #32
 800a028:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f022 0210 	bic.w	r2, r2, #16
 800a046:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a048:	897b      	ldrh	r3, [r7, #10]
 800a04a:	4619      	mov	r1, r3
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 f8b5 	bl	800a1bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a052:	e07b      	b.n	800a14c <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00d      	beq.n	800a07a <HAL_UART_IRQHandler+0x496>
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a064:	2b00      	cmp	r3, #0
 800a066:	d008      	beq.n	800a07a <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a070:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f001 f947 	bl	800b306 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a078:	e06b      	b.n	800a152 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a080:	2b00      	cmp	r3, #0
 800a082:	d012      	beq.n	800a0aa <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d104      	bne.n	800a098 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a094:	2b00      	cmp	r3, #0
 800a096:	d008      	beq.n	800a0aa <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d057      	beq.n	800a150 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	4798      	blx	r3
    }
    return;
 800a0a8:	e052      	b.n	800a150 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d02b      	beq.n	800a10c <HAL_UART_IRQHandler+0x528>
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d026      	beq.n	800a10c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f001 f907 	bl	800b2d2 <UART_EndTransmit_IT>
    return;
 800a0c4:	e045      	b.n	800a152 <HAL_UART_IRQHandler+0x56e>
 800a0c6:	bf00      	nop
 800a0c8:	40020010 	.word	0x40020010
 800a0cc:	40020028 	.word	0x40020028
 800a0d0:	40020040 	.word	0x40020040
 800a0d4:	40020058 	.word	0x40020058
 800a0d8:	40020070 	.word	0x40020070
 800a0dc:	40020088 	.word	0x40020088
 800a0e0:	400200a0 	.word	0x400200a0
 800a0e4:	400200b8 	.word	0x400200b8
 800a0e8:	40020410 	.word	0x40020410
 800a0ec:	40020428 	.word	0x40020428
 800a0f0:	40020440 	.word	0x40020440
 800a0f4:	40020458 	.word	0x40020458
 800a0f8:	40020470 	.word	0x40020470
 800a0fc:	40020488 	.word	0x40020488
 800a100:	400204a0 	.word	0x400204a0
 800a104:	400204b8 	.word	0x400204b8
 800a108:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a112:	2b00      	cmp	r3, #0
 800a114:	d008      	beq.n	800a128 <HAL_UART_IRQHandler+0x544>
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d003      	beq.n	800a128 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f001 f904 	bl	800b32e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a126:	e014      	b.n	800a152 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d00f      	beq.n	800a152 <HAL_UART_IRQHandler+0x56e>
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	2b00      	cmp	r3, #0
 800a136:	da0c      	bge.n	800a152 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f001 f8ee 	bl	800b31a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a13e:	e008      	b.n	800a152 <HAL_UART_IRQHandler+0x56e>
      return;
 800a140:	bf00      	nop
 800a142:	e006      	b.n	800a152 <HAL_UART_IRQHandler+0x56e>
    return;
 800a144:	bf00      	nop
 800a146:	e004      	b.n	800a152 <HAL_UART_IRQHandler+0x56e>
      return;
 800a148:	bf00      	nop
 800a14a:	e002      	b.n	800a152 <HAL_UART_IRQHandler+0x56e>
      return;
 800a14c:	bf00      	nop
 800a14e:	e000      	b.n	800a152 <HAL_UART_IRQHandler+0x56e>
    return;
 800a150:	bf00      	nop
  }
}
 800a152:	3720      	adds	r7, #32
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a160:	bf00      	nop
 800a162:	370c      	adds	r7, #12
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a174:	bf00      	nop
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr

0800a180 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a188:	bf00      	nop
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a19c:	bf00      	nop
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a1b0:	bf00      	nop
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a1d4:	b5b0      	push	{r4, r5, r7, lr}
 800a1d6:	b08e      	sub	sp, #56	; 0x38
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	689a      	ldr	r2, [r3, #8]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	691b      	ldr	r3, [r3, #16]
 800a1ea:	431a      	orrs	r2, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	695b      	ldr	r3, [r3, #20]
 800a1f0:	431a      	orrs	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	69db      	ldr	r3, [r3, #28]
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	4bbf      	ldr	r3, [pc, #764]	; (800a500 <UART_SetConfig+0x32c>)
 800a202:	4013      	ands	r3, r2
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	6812      	ldr	r2, [r2, #0]
 800a208:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a20a:	430b      	orrs	r3, r1
 800a20c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	68da      	ldr	r2, [r3, #12]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	430a      	orrs	r2, r1
 800a222:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	699b      	ldr	r3, [r3, #24]
 800a228:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4ab5      	ldr	r2, [pc, #724]	; (800a504 <UART_SetConfig+0x330>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d004      	beq.n	800a23e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a1b      	ldr	r3, [r3, #32]
 800a238:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a23a:	4313      	orrs	r3, r2
 800a23c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	689a      	ldr	r2, [r3, #8]
 800a244:	4bb0      	ldr	r3, [pc, #704]	; (800a508 <UART_SetConfig+0x334>)
 800a246:	4013      	ands	r3, r2
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	6812      	ldr	r2, [r2, #0]
 800a24c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a24e:	430b      	orrs	r3, r1
 800a250:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a258:	f023 010f 	bic.w	r1, r3, #15
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	430a      	orrs	r2, r1
 800a266:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4aa7      	ldr	r2, [pc, #668]	; (800a50c <UART_SetConfig+0x338>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d176      	bne.n	800a360 <UART_SetConfig+0x18c>
 800a272:	4ba7      	ldr	r3, [pc, #668]	; (800a510 <UART_SetConfig+0x33c>)
 800a274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a27a:	2b28      	cmp	r3, #40	; 0x28
 800a27c:	d86c      	bhi.n	800a358 <UART_SetConfig+0x184>
 800a27e:	a201      	add	r2, pc, #4	; (adr r2, 800a284 <UART_SetConfig+0xb0>)
 800a280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a284:	0800a329 	.word	0x0800a329
 800a288:	0800a359 	.word	0x0800a359
 800a28c:	0800a359 	.word	0x0800a359
 800a290:	0800a359 	.word	0x0800a359
 800a294:	0800a359 	.word	0x0800a359
 800a298:	0800a359 	.word	0x0800a359
 800a29c:	0800a359 	.word	0x0800a359
 800a2a0:	0800a359 	.word	0x0800a359
 800a2a4:	0800a331 	.word	0x0800a331
 800a2a8:	0800a359 	.word	0x0800a359
 800a2ac:	0800a359 	.word	0x0800a359
 800a2b0:	0800a359 	.word	0x0800a359
 800a2b4:	0800a359 	.word	0x0800a359
 800a2b8:	0800a359 	.word	0x0800a359
 800a2bc:	0800a359 	.word	0x0800a359
 800a2c0:	0800a359 	.word	0x0800a359
 800a2c4:	0800a339 	.word	0x0800a339
 800a2c8:	0800a359 	.word	0x0800a359
 800a2cc:	0800a359 	.word	0x0800a359
 800a2d0:	0800a359 	.word	0x0800a359
 800a2d4:	0800a359 	.word	0x0800a359
 800a2d8:	0800a359 	.word	0x0800a359
 800a2dc:	0800a359 	.word	0x0800a359
 800a2e0:	0800a359 	.word	0x0800a359
 800a2e4:	0800a341 	.word	0x0800a341
 800a2e8:	0800a359 	.word	0x0800a359
 800a2ec:	0800a359 	.word	0x0800a359
 800a2f0:	0800a359 	.word	0x0800a359
 800a2f4:	0800a359 	.word	0x0800a359
 800a2f8:	0800a359 	.word	0x0800a359
 800a2fc:	0800a359 	.word	0x0800a359
 800a300:	0800a359 	.word	0x0800a359
 800a304:	0800a349 	.word	0x0800a349
 800a308:	0800a359 	.word	0x0800a359
 800a30c:	0800a359 	.word	0x0800a359
 800a310:	0800a359 	.word	0x0800a359
 800a314:	0800a359 	.word	0x0800a359
 800a318:	0800a359 	.word	0x0800a359
 800a31c:	0800a359 	.word	0x0800a359
 800a320:	0800a359 	.word	0x0800a359
 800a324:	0800a351 	.word	0x0800a351
 800a328:	2301      	movs	r3, #1
 800a32a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a32e:	e222      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a330:	2304      	movs	r3, #4
 800a332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a336:	e21e      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a338:	2308      	movs	r3, #8
 800a33a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a33e:	e21a      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a340:	2310      	movs	r3, #16
 800a342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a346:	e216      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a348:	2320      	movs	r3, #32
 800a34a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a34e:	e212      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a350:	2340      	movs	r3, #64	; 0x40
 800a352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a356:	e20e      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a358:	2380      	movs	r3, #128	; 0x80
 800a35a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a35e:	e20a      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a6b      	ldr	r2, [pc, #428]	; (800a514 <UART_SetConfig+0x340>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d130      	bne.n	800a3cc <UART_SetConfig+0x1f8>
 800a36a:	4b69      	ldr	r3, [pc, #420]	; (800a510 <UART_SetConfig+0x33c>)
 800a36c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a36e:	f003 0307 	and.w	r3, r3, #7
 800a372:	2b05      	cmp	r3, #5
 800a374:	d826      	bhi.n	800a3c4 <UART_SetConfig+0x1f0>
 800a376:	a201      	add	r2, pc, #4	; (adr r2, 800a37c <UART_SetConfig+0x1a8>)
 800a378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37c:	0800a395 	.word	0x0800a395
 800a380:	0800a39d 	.word	0x0800a39d
 800a384:	0800a3a5 	.word	0x0800a3a5
 800a388:	0800a3ad 	.word	0x0800a3ad
 800a38c:	0800a3b5 	.word	0x0800a3b5
 800a390:	0800a3bd 	.word	0x0800a3bd
 800a394:	2300      	movs	r3, #0
 800a396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a39a:	e1ec      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a39c:	2304      	movs	r3, #4
 800a39e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3a2:	e1e8      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a3a4:	2308      	movs	r3, #8
 800a3a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3aa:	e1e4      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a3ac:	2310      	movs	r3, #16
 800a3ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3b2:	e1e0      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a3b4:	2320      	movs	r3, #32
 800a3b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ba:	e1dc      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a3bc:	2340      	movs	r3, #64	; 0x40
 800a3be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3c2:	e1d8      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a3c4:	2380      	movs	r3, #128	; 0x80
 800a3c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ca:	e1d4      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a51      	ldr	r2, [pc, #324]	; (800a518 <UART_SetConfig+0x344>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d130      	bne.n	800a438 <UART_SetConfig+0x264>
 800a3d6:	4b4e      	ldr	r3, [pc, #312]	; (800a510 <UART_SetConfig+0x33c>)
 800a3d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3da:	f003 0307 	and.w	r3, r3, #7
 800a3de:	2b05      	cmp	r3, #5
 800a3e0:	d826      	bhi.n	800a430 <UART_SetConfig+0x25c>
 800a3e2:	a201      	add	r2, pc, #4	; (adr r2, 800a3e8 <UART_SetConfig+0x214>)
 800a3e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e8:	0800a401 	.word	0x0800a401
 800a3ec:	0800a409 	.word	0x0800a409
 800a3f0:	0800a411 	.word	0x0800a411
 800a3f4:	0800a419 	.word	0x0800a419
 800a3f8:	0800a421 	.word	0x0800a421
 800a3fc:	0800a429 	.word	0x0800a429
 800a400:	2300      	movs	r3, #0
 800a402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a406:	e1b6      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a408:	2304      	movs	r3, #4
 800a40a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a40e:	e1b2      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a410:	2308      	movs	r3, #8
 800a412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a416:	e1ae      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a418:	2310      	movs	r3, #16
 800a41a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a41e:	e1aa      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a420:	2320      	movs	r3, #32
 800a422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a426:	e1a6      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a428:	2340      	movs	r3, #64	; 0x40
 800a42a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a42e:	e1a2      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a430:	2380      	movs	r3, #128	; 0x80
 800a432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a436:	e19e      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a37      	ldr	r2, [pc, #220]	; (800a51c <UART_SetConfig+0x348>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d130      	bne.n	800a4a4 <UART_SetConfig+0x2d0>
 800a442:	4b33      	ldr	r3, [pc, #204]	; (800a510 <UART_SetConfig+0x33c>)
 800a444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a446:	f003 0307 	and.w	r3, r3, #7
 800a44a:	2b05      	cmp	r3, #5
 800a44c:	d826      	bhi.n	800a49c <UART_SetConfig+0x2c8>
 800a44e:	a201      	add	r2, pc, #4	; (adr r2, 800a454 <UART_SetConfig+0x280>)
 800a450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a454:	0800a46d 	.word	0x0800a46d
 800a458:	0800a475 	.word	0x0800a475
 800a45c:	0800a47d 	.word	0x0800a47d
 800a460:	0800a485 	.word	0x0800a485
 800a464:	0800a48d 	.word	0x0800a48d
 800a468:	0800a495 	.word	0x0800a495
 800a46c:	2300      	movs	r3, #0
 800a46e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a472:	e180      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a474:	2304      	movs	r3, #4
 800a476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a47a:	e17c      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a47c:	2308      	movs	r3, #8
 800a47e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a482:	e178      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a484:	2310      	movs	r3, #16
 800a486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a48a:	e174      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a48c:	2320      	movs	r3, #32
 800a48e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a492:	e170      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a494:	2340      	movs	r3, #64	; 0x40
 800a496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a49a:	e16c      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a49c:	2380      	movs	r3, #128	; 0x80
 800a49e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4a2:	e168      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a1d      	ldr	r2, [pc, #116]	; (800a520 <UART_SetConfig+0x34c>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d142      	bne.n	800a534 <UART_SetConfig+0x360>
 800a4ae:	4b18      	ldr	r3, [pc, #96]	; (800a510 <UART_SetConfig+0x33c>)
 800a4b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4b2:	f003 0307 	and.w	r3, r3, #7
 800a4b6:	2b05      	cmp	r3, #5
 800a4b8:	d838      	bhi.n	800a52c <UART_SetConfig+0x358>
 800a4ba:	a201      	add	r2, pc, #4	; (adr r2, 800a4c0 <UART_SetConfig+0x2ec>)
 800a4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c0:	0800a4d9 	.word	0x0800a4d9
 800a4c4:	0800a4e1 	.word	0x0800a4e1
 800a4c8:	0800a4e9 	.word	0x0800a4e9
 800a4cc:	0800a4f1 	.word	0x0800a4f1
 800a4d0:	0800a4f9 	.word	0x0800a4f9
 800a4d4:	0800a525 	.word	0x0800a525
 800a4d8:	2300      	movs	r3, #0
 800a4da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4de:	e14a      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a4e0:	2304      	movs	r3, #4
 800a4e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4e6:	e146      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a4e8:	2308      	movs	r3, #8
 800a4ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ee:	e142      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a4f0:	2310      	movs	r3, #16
 800a4f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4f6:	e13e      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a4f8:	2320      	movs	r3, #32
 800a4fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4fe:	e13a      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a500:	cfff69f3 	.word	0xcfff69f3
 800a504:	58000c00 	.word	0x58000c00
 800a508:	11fff4ff 	.word	0x11fff4ff
 800a50c:	40011000 	.word	0x40011000
 800a510:	58024400 	.word	0x58024400
 800a514:	40004400 	.word	0x40004400
 800a518:	40004800 	.word	0x40004800
 800a51c:	40004c00 	.word	0x40004c00
 800a520:	40005000 	.word	0x40005000
 800a524:	2340      	movs	r3, #64	; 0x40
 800a526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a52a:	e124      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a52c:	2380      	movs	r3, #128	; 0x80
 800a52e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a532:	e120      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4acc      	ldr	r2, [pc, #816]	; (800a86c <UART_SetConfig+0x698>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d176      	bne.n	800a62c <UART_SetConfig+0x458>
 800a53e:	4bcc      	ldr	r3, [pc, #816]	; (800a870 <UART_SetConfig+0x69c>)
 800a540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a546:	2b28      	cmp	r3, #40	; 0x28
 800a548:	d86c      	bhi.n	800a624 <UART_SetConfig+0x450>
 800a54a:	a201      	add	r2, pc, #4	; (adr r2, 800a550 <UART_SetConfig+0x37c>)
 800a54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a550:	0800a5f5 	.word	0x0800a5f5
 800a554:	0800a625 	.word	0x0800a625
 800a558:	0800a625 	.word	0x0800a625
 800a55c:	0800a625 	.word	0x0800a625
 800a560:	0800a625 	.word	0x0800a625
 800a564:	0800a625 	.word	0x0800a625
 800a568:	0800a625 	.word	0x0800a625
 800a56c:	0800a625 	.word	0x0800a625
 800a570:	0800a5fd 	.word	0x0800a5fd
 800a574:	0800a625 	.word	0x0800a625
 800a578:	0800a625 	.word	0x0800a625
 800a57c:	0800a625 	.word	0x0800a625
 800a580:	0800a625 	.word	0x0800a625
 800a584:	0800a625 	.word	0x0800a625
 800a588:	0800a625 	.word	0x0800a625
 800a58c:	0800a625 	.word	0x0800a625
 800a590:	0800a605 	.word	0x0800a605
 800a594:	0800a625 	.word	0x0800a625
 800a598:	0800a625 	.word	0x0800a625
 800a59c:	0800a625 	.word	0x0800a625
 800a5a0:	0800a625 	.word	0x0800a625
 800a5a4:	0800a625 	.word	0x0800a625
 800a5a8:	0800a625 	.word	0x0800a625
 800a5ac:	0800a625 	.word	0x0800a625
 800a5b0:	0800a60d 	.word	0x0800a60d
 800a5b4:	0800a625 	.word	0x0800a625
 800a5b8:	0800a625 	.word	0x0800a625
 800a5bc:	0800a625 	.word	0x0800a625
 800a5c0:	0800a625 	.word	0x0800a625
 800a5c4:	0800a625 	.word	0x0800a625
 800a5c8:	0800a625 	.word	0x0800a625
 800a5cc:	0800a625 	.word	0x0800a625
 800a5d0:	0800a615 	.word	0x0800a615
 800a5d4:	0800a625 	.word	0x0800a625
 800a5d8:	0800a625 	.word	0x0800a625
 800a5dc:	0800a625 	.word	0x0800a625
 800a5e0:	0800a625 	.word	0x0800a625
 800a5e4:	0800a625 	.word	0x0800a625
 800a5e8:	0800a625 	.word	0x0800a625
 800a5ec:	0800a625 	.word	0x0800a625
 800a5f0:	0800a61d 	.word	0x0800a61d
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5fa:	e0bc      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a5fc:	2304      	movs	r3, #4
 800a5fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a602:	e0b8      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a604:	2308      	movs	r3, #8
 800a606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a60a:	e0b4      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a60c:	2310      	movs	r3, #16
 800a60e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a612:	e0b0      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a614:	2320      	movs	r3, #32
 800a616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a61a:	e0ac      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a61c:	2340      	movs	r3, #64	; 0x40
 800a61e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a622:	e0a8      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a624:	2380      	movs	r3, #128	; 0x80
 800a626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a62a:	e0a4      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a90      	ldr	r2, [pc, #576]	; (800a874 <UART_SetConfig+0x6a0>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d130      	bne.n	800a698 <UART_SetConfig+0x4c4>
 800a636:	4b8e      	ldr	r3, [pc, #568]	; (800a870 <UART_SetConfig+0x69c>)
 800a638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a63a:	f003 0307 	and.w	r3, r3, #7
 800a63e:	2b05      	cmp	r3, #5
 800a640:	d826      	bhi.n	800a690 <UART_SetConfig+0x4bc>
 800a642:	a201      	add	r2, pc, #4	; (adr r2, 800a648 <UART_SetConfig+0x474>)
 800a644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a648:	0800a661 	.word	0x0800a661
 800a64c:	0800a669 	.word	0x0800a669
 800a650:	0800a671 	.word	0x0800a671
 800a654:	0800a679 	.word	0x0800a679
 800a658:	0800a681 	.word	0x0800a681
 800a65c:	0800a689 	.word	0x0800a689
 800a660:	2300      	movs	r3, #0
 800a662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a666:	e086      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a668:	2304      	movs	r3, #4
 800a66a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a66e:	e082      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a670:	2308      	movs	r3, #8
 800a672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a676:	e07e      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a678:	2310      	movs	r3, #16
 800a67a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a67e:	e07a      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a680:	2320      	movs	r3, #32
 800a682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a686:	e076      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a688:	2340      	movs	r3, #64	; 0x40
 800a68a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a68e:	e072      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a690:	2380      	movs	r3, #128	; 0x80
 800a692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a696:	e06e      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a76      	ldr	r2, [pc, #472]	; (800a878 <UART_SetConfig+0x6a4>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d130      	bne.n	800a704 <UART_SetConfig+0x530>
 800a6a2:	4b73      	ldr	r3, [pc, #460]	; (800a870 <UART_SetConfig+0x69c>)
 800a6a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6a6:	f003 0307 	and.w	r3, r3, #7
 800a6aa:	2b05      	cmp	r3, #5
 800a6ac:	d826      	bhi.n	800a6fc <UART_SetConfig+0x528>
 800a6ae:	a201      	add	r2, pc, #4	; (adr r2, 800a6b4 <UART_SetConfig+0x4e0>)
 800a6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b4:	0800a6cd 	.word	0x0800a6cd
 800a6b8:	0800a6d5 	.word	0x0800a6d5
 800a6bc:	0800a6dd 	.word	0x0800a6dd
 800a6c0:	0800a6e5 	.word	0x0800a6e5
 800a6c4:	0800a6ed 	.word	0x0800a6ed
 800a6c8:	0800a6f5 	.word	0x0800a6f5
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6d2:	e050      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a6d4:	2304      	movs	r3, #4
 800a6d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6da:	e04c      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a6dc:	2308      	movs	r3, #8
 800a6de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6e2:	e048      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a6e4:	2310      	movs	r3, #16
 800a6e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6ea:	e044      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a6ec:	2320      	movs	r3, #32
 800a6ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6f2:	e040      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a6f4:	2340      	movs	r3, #64	; 0x40
 800a6f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6fa:	e03c      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a6fc:	2380      	movs	r3, #128	; 0x80
 800a6fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a702:	e038      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a5c      	ldr	r2, [pc, #368]	; (800a87c <UART_SetConfig+0x6a8>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d130      	bne.n	800a770 <UART_SetConfig+0x59c>
 800a70e:	4b58      	ldr	r3, [pc, #352]	; (800a870 <UART_SetConfig+0x69c>)
 800a710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a712:	f003 0307 	and.w	r3, r3, #7
 800a716:	2b05      	cmp	r3, #5
 800a718:	d826      	bhi.n	800a768 <UART_SetConfig+0x594>
 800a71a:	a201      	add	r2, pc, #4	; (adr r2, 800a720 <UART_SetConfig+0x54c>)
 800a71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a720:	0800a739 	.word	0x0800a739
 800a724:	0800a741 	.word	0x0800a741
 800a728:	0800a749 	.word	0x0800a749
 800a72c:	0800a751 	.word	0x0800a751
 800a730:	0800a759 	.word	0x0800a759
 800a734:	0800a761 	.word	0x0800a761
 800a738:	2302      	movs	r3, #2
 800a73a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a73e:	e01a      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a740:	2304      	movs	r3, #4
 800a742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a746:	e016      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a748:	2308      	movs	r3, #8
 800a74a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a74e:	e012      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a750:	2310      	movs	r3, #16
 800a752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a756:	e00e      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a758:	2320      	movs	r3, #32
 800a75a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a75e:	e00a      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a760:	2340      	movs	r3, #64	; 0x40
 800a762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a766:	e006      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a768:	2380      	movs	r3, #128	; 0x80
 800a76a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a76e:	e002      	b.n	800a776 <UART_SetConfig+0x5a2>
 800a770:	2380      	movs	r3, #128	; 0x80
 800a772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a40      	ldr	r2, [pc, #256]	; (800a87c <UART_SetConfig+0x6a8>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	f040 80ef 	bne.w	800a960 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a782:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a786:	2b20      	cmp	r3, #32
 800a788:	dc46      	bgt.n	800a818 <UART_SetConfig+0x644>
 800a78a:	2b02      	cmp	r3, #2
 800a78c:	f2c0 8081 	blt.w	800a892 <UART_SetConfig+0x6be>
 800a790:	3b02      	subs	r3, #2
 800a792:	2b1e      	cmp	r3, #30
 800a794:	d87d      	bhi.n	800a892 <UART_SetConfig+0x6be>
 800a796:	a201      	add	r2, pc, #4	; (adr r2, 800a79c <UART_SetConfig+0x5c8>)
 800a798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79c:	0800a81f 	.word	0x0800a81f
 800a7a0:	0800a893 	.word	0x0800a893
 800a7a4:	0800a827 	.word	0x0800a827
 800a7a8:	0800a893 	.word	0x0800a893
 800a7ac:	0800a893 	.word	0x0800a893
 800a7b0:	0800a893 	.word	0x0800a893
 800a7b4:	0800a837 	.word	0x0800a837
 800a7b8:	0800a893 	.word	0x0800a893
 800a7bc:	0800a893 	.word	0x0800a893
 800a7c0:	0800a893 	.word	0x0800a893
 800a7c4:	0800a893 	.word	0x0800a893
 800a7c8:	0800a893 	.word	0x0800a893
 800a7cc:	0800a893 	.word	0x0800a893
 800a7d0:	0800a893 	.word	0x0800a893
 800a7d4:	0800a847 	.word	0x0800a847
 800a7d8:	0800a893 	.word	0x0800a893
 800a7dc:	0800a893 	.word	0x0800a893
 800a7e0:	0800a893 	.word	0x0800a893
 800a7e4:	0800a893 	.word	0x0800a893
 800a7e8:	0800a893 	.word	0x0800a893
 800a7ec:	0800a893 	.word	0x0800a893
 800a7f0:	0800a893 	.word	0x0800a893
 800a7f4:	0800a893 	.word	0x0800a893
 800a7f8:	0800a893 	.word	0x0800a893
 800a7fc:	0800a893 	.word	0x0800a893
 800a800:	0800a893 	.word	0x0800a893
 800a804:	0800a893 	.word	0x0800a893
 800a808:	0800a893 	.word	0x0800a893
 800a80c:	0800a893 	.word	0x0800a893
 800a810:	0800a893 	.word	0x0800a893
 800a814:	0800a885 	.word	0x0800a885
 800a818:	2b40      	cmp	r3, #64	; 0x40
 800a81a:	d036      	beq.n	800a88a <UART_SetConfig+0x6b6>
 800a81c:	e039      	b.n	800a892 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a81e:	f7fe f967 	bl	8008af0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a822:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a824:	e03b      	b.n	800a89e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a826:	f107 0314 	add.w	r3, r7, #20
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7fe f976 	bl	8008b1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a834:	e033      	b.n	800a89e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a836:	f107 0308 	add.w	r3, r7, #8
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fe fac2 	bl	8008dc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a844:	e02b      	b.n	800a89e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a846:	4b0a      	ldr	r3, [pc, #40]	; (800a870 <UART_SetConfig+0x69c>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f003 0320 	and.w	r3, r3, #32
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d009      	beq.n	800a866 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a852:	4b07      	ldr	r3, [pc, #28]	; (800a870 <UART_SetConfig+0x69c>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	08db      	lsrs	r3, r3, #3
 800a858:	f003 0303 	and.w	r3, r3, #3
 800a85c:	4a08      	ldr	r2, [pc, #32]	; (800a880 <UART_SetConfig+0x6ac>)
 800a85e:	fa22 f303 	lsr.w	r3, r2, r3
 800a862:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a864:	e01b      	b.n	800a89e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800a866:	4b06      	ldr	r3, [pc, #24]	; (800a880 <UART_SetConfig+0x6ac>)
 800a868:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a86a:	e018      	b.n	800a89e <UART_SetConfig+0x6ca>
 800a86c:	40011400 	.word	0x40011400
 800a870:	58024400 	.word	0x58024400
 800a874:	40007800 	.word	0x40007800
 800a878:	40007c00 	.word	0x40007c00
 800a87c:	58000c00 	.word	0x58000c00
 800a880:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a884:	4bc4      	ldr	r3, [pc, #784]	; (800ab98 <UART_SetConfig+0x9c4>)
 800a886:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a888:	e009      	b.n	800a89e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a88a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a88e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a890:	e005      	b.n	800a89e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800a892:	2300      	movs	r3, #0
 800a894:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a896:	2301      	movs	r3, #1
 800a898:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a89c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f000 81da 	beq.w	800ac5a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8aa:	4abc      	ldr	r2, [pc, #752]	; (800ab9c <UART_SetConfig+0x9c8>)
 800a8ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8b8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	685a      	ldr	r2, [r3, #4]
 800a8be:	4613      	mov	r3, r2
 800a8c0:	005b      	lsls	r3, r3, #1
 800a8c2:	4413      	add	r3, r2
 800a8c4:	6a3a      	ldr	r2, [r7, #32]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d305      	bcc.n	800a8d6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8d0:	6a3a      	ldr	r2, [r7, #32]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d903      	bls.n	800a8de <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a8dc:	e1bd      	b.n	800ac5a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f04f 0100 	mov.w	r1, #0
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ea:	4aac      	ldr	r2, [pc, #688]	; (800ab9c <UART_SetConfig+0x9c8>)
 800a8ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8f0:	b29a      	uxth	r2, r3
 800a8f2:	f04f 0300 	mov.w	r3, #0
 800a8f6:	f7f5 fcf3 	bl	80002e0 <__aeabi_uldivmod>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	4610      	mov	r0, r2
 800a900:	4619      	mov	r1, r3
 800a902:	f04f 0200 	mov.w	r2, #0
 800a906:	f04f 0300 	mov.w	r3, #0
 800a90a:	020b      	lsls	r3, r1, #8
 800a90c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a910:	0202      	lsls	r2, r0, #8
 800a912:	6879      	ldr	r1, [r7, #4]
 800a914:	6849      	ldr	r1, [r1, #4]
 800a916:	0849      	lsrs	r1, r1, #1
 800a918:	4608      	mov	r0, r1
 800a91a:	f04f 0100 	mov.w	r1, #0
 800a91e:	1814      	adds	r4, r2, r0
 800a920:	eb43 0501 	adc.w	r5, r3, r1
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	461a      	mov	r2, r3
 800a92a:	f04f 0300 	mov.w	r3, #0
 800a92e:	4620      	mov	r0, r4
 800a930:	4629      	mov	r1, r5
 800a932:	f7f5 fcd5 	bl	80002e0 <__aeabi_uldivmod>
 800a936:	4602      	mov	r2, r0
 800a938:	460b      	mov	r3, r1
 800a93a:	4613      	mov	r3, r2
 800a93c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a940:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a944:	d308      	bcc.n	800a958 <UART_SetConfig+0x784>
 800a946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a948:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a94c:	d204      	bcs.n	800a958 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a954:	60da      	str	r2, [r3, #12]
 800a956:	e180      	b.n	800ac5a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a958:	2301      	movs	r3, #1
 800a95a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a95e:	e17c      	b.n	800ac5a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	69db      	ldr	r3, [r3, #28]
 800a964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a968:	f040 80bf 	bne.w	800aaea <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800a96c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a970:	2b20      	cmp	r3, #32
 800a972:	dc49      	bgt.n	800aa08 <UART_SetConfig+0x834>
 800a974:	2b00      	cmp	r3, #0
 800a976:	db7c      	blt.n	800aa72 <UART_SetConfig+0x89e>
 800a978:	2b20      	cmp	r3, #32
 800a97a:	d87a      	bhi.n	800aa72 <UART_SetConfig+0x89e>
 800a97c:	a201      	add	r2, pc, #4	; (adr r2, 800a984 <UART_SetConfig+0x7b0>)
 800a97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a982:	bf00      	nop
 800a984:	0800aa0f 	.word	0x0800aa0f
 800a988:	0800aa17 	.word	0x0800aa17
 800a98c:	0800aa73 	.word	0x0800aa73
 800a990:	0800aa73 	.word	0x0800aa73
 800a994:	0800aa1f 	.word	0x0800aa1f
 800a998:	0800aa73 	.word	0x0800aa73
 800a99c:	0800aa73 	.word	0x0800aa73
 800a9a0:	0800aa73 	.word	0x0800aa73
 800a9a4:	0800aa2f 	.word	0x0800aa2f
 800a9a8:	0800aa73 	.word	0x0800aa73
 800a9ac:	0800aa73 	.word	0x0800aa73
 800a9b0:	0800aa73 	.word	0x0800aa73
 800a9b4:	0800aa73 	.word	0x0800aa73
 800a9b8:	0800aa73 	.word	0x0800aa73
 800a9bc:	0800aa73 	.word	0x0800aa73
 800a9c0:	0800aa73 	.word	0x0800aa73
 800a9c4:	0800aa3f 	.word	0x0800aa3f
 800a9c8:	0800aa73 	.word	0x0800aa73
 800a9cc:	0800aa73 	.word	0x0800aa73
 800a9d0:	0800aa73 	.word	0x0800aa73
 800a9d4:	0800aa73 	.word	0x0800aa73
 800a9d8:	0800aa73 	.word	0x0800aa73
 800a9dc:	0800aa73 	.word	0x0800aa73
 800a9e0:	0800aa73 	.word	0x0800aa73
 800a9e4:	0800aa73 	.word	0x0800aa73
 800a9e8:	0800aa73 	.word	0x0800aa73
 800a9ec:	0800aa73 	.word	0x0800aa73
 800a9f0:	0800aa73 	.word	0x0800aa73
 800a9f4:	0800aa73 	.word	0x0800aa73
 800a9f8:	0800aa73 	.word	0x0800aa73
 800a9fc:	0800aa73 	.word	0x0800aa73
 800aa00:	0800aa73 	.word	0x0800aa73
 800aa04:	0800aa65 	.word	0x0800aa65
 800aa08:	2b40      	cmp	r3, #64	; 0x40
 800aa0a:	d02e      	beq.n	800aa6a <UART_SetConfig+0x896>
 800aa0c:	e031      	b.n	800aa72 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa0e:	f7fd f8c1 	bl	8007b94 <HAL_RCC_GetPCLK1Freq>
 800aa12:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aa14:	e033      	b.n	800aa7e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa16:	f7fd f8d3 	bl	8007bc0 <HAL_RCC_GetPCLK2Freq>
 800aa1a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aa1c:	e02f      	b.n	800aa7e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa1e:	f107 0314 	add.w	r3, r7, #20
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7fe f87a 	bl	8008b1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa2c:	e027      	b.n	800aa7e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa2e:	f107 0308 	add.w	r3, r7, #8
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fe f9c6 	bl	8008dc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa3c:	e01f      	b.n	800aa7e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa3e:	4b58      	ldr	r3, [pc, #352]	; (800aba0 <UART_SetConfig+0x9cc>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f003 0320 	and.w	r3, r3, #32
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d009      	beq.n	800aa5e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa4a:	4b55      	ldr	r3, [pc, #340]	; (800aba0 <UART_SetConfig+0x9cc>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	08db      	lsrs	r3, r3, #3
 800aa50:	f003 0303 	and.w	r3, r3, #3
 800aa54:	4a53      	ldr	r2, [pc, #332]	; (800aba4 <UART_SetConfig+0x9d0>)
 800aa56:	fa22 f303 	lsr.w	r3, r2, r3
 800aa5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa5c:	e00f      	b.n	800aa7e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800aa5e:	4b51      	ldr	r3, [pc, #324]	; (800aba4 <UART_SetConfig+0x9d0>)
 800aa60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa62:	e00c      	b.n	800aa7e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa64:	4b4c      	ldr	r3, [pc, #304]	; (800ab98 <UART_SetConfig+0x9c4>)
 800aa66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa68:	e009      	b.n	800aa7e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa70:	e005      	b.n	800aa7e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800aa72:	2300      	movs	r3, #0
 800aa74:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aa76:	2301      	movs	r3, #1
 800aa78:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800aa7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f000 80ea 	beq.w	800ac5a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8a:	4a44      	ldr	r2, [pc, #272]	; (800ab9c <UART_SetConfig+0x9c8>)
 800aa8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa90:	461a      	mov	r2, r3
 800aa92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa94:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa98:	005a      	lsls	r2, r3, #1
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	085b      	lsrs	r3, r3, #1
 800aaa0:	441a      	add	r2, r3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aaae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab0:	2b0f      	cmp	r3, #15
 800aab2:	d916      	bls.n	800aae2 <UART_SetConfig+0x90e>
 800aab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaba:	d212      	bcs.n	800aae2 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	f023 030f 	bic.w	r3, r3, #15
 800aac4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac8:	085b      	lsrs	r3, r3, #1
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	f003 0307 	and.w	r3, r3, #7
 800aad0:	b29a      	uxth	r2, r3
 800aad2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aad4:	4313      	orrs	r3, r2
 800aad6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800aade:	60da      	str	r2, [r3, #12]
 800aae0:	e0bb      	b.n	800ac5a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800aae2:	2301      	movs	r3, #1
 800aae4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800aae8:	e0b7      	b.n	800ac5a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aaea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aaee:	2b20      	cmp	r3, #32
 800aaf0:	dc4a      	bgt.n	800ab88 <UART_SetConfig+0x9b4>
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f2c0 8086 	blt.w	800ac04 <UART_SetConfig+0xa30>
 800aaf8:	2b20      	cmp	r3, #32
 800aafa:	f200 8083 	bhi.w	800ac04 <UART_SetConfig+0xa30>
 800aafe:	a201      	add	r2, pc, #4	; (adr r2, 800ab04 <UART_SetConfig+0x930>)
 800ab00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab04:	0800ab8f 	.word	0x0800ab8f
 800ab08:	0800aba9 	.word	0x0800aba9
 800ab0c:	0800ac05 	.word	0x0800ac05
 800ab10:	0800ac05 	.word	0x0800ac05
 800ab14:	0800abb1 	.word	0x0800abb1
 800ab18:	0800ac05 	.word	0x0800ac05
 800ab1c:	0800ac05 	.word	0x0800ac05
 800ab20:	0800ac05 	.word	0x0800ac05
 800ab24:	0800abc1 	.word	0x0800abc1
 800ab28:	0800ac05 	.word	0x0800ac05
 800ab2c:	0800ac05 	.word	0x0800ac05
 800ab30:	0800ac05 	.word	0x0800ac05
 800ab34:	0800ac05 	.word	0x0800ac05
 800ab38:	0800ac05 	.word	0x0800ac05
 800ab3c:	0800ac05 	.word	0x0800ac05
 800ab40:	0800ac05 	.word	0x0800ac05
 800ab44:	0800abd1 	.word	0x0800abd1
 800ab48:	0800ac05 	.word	0x0800ac05
 800ab4c:	0800ac05 	.word	0x0800ac05
 800ab50:	0800ac05 	.word	0x0800ac05
 800ab54:	0800ac05 	.word	0x0800ac05
 800ab58:	0800ac05 	.word	0x0800ac05
 800ab5c:	0800ac05 	.word	0x0800ac05
 800ab60:	0800ac05 	.word	0x0800ac05
 800ab64:	0800ac05 	.word	0x0800ac05
 800ab68:	0800ac05 	.word	0x0800ac05
 800ab6c:	0800ac05 	.word	0x0800ac05
 800ab70:	0800ac05 	.word	0x0800ac05
 800ab74:	0800ac05 	.word	0x0800ac05
 800ab78:	0800ac05 	.word	0x0800ac05
 800ab7c:	0800ac05 	.word	0x0800ac05
 800ab80:	0800ac05 	.word	0x0800ac05
 800ab84:	0800abf7 	.word	0x0800abf7
 800ab88:	2b40      	cmp	r3, #64	; 0x40
 800ab8a:	d037      	beq.n	800abfc <UART_SetConfig+0xa28>
 800ab8c:	e03a      	b.n	800ac04 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab8e:	f7fd f801 	bl	8007b94 <HAL_RCC_GetPCLK1Freq>
 800ab92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ab94:	e03c      	b.n	800ac10 <UART_SetConfig+0xa3c>
 800ab96:	bf00      	nop
 800ab98:	003d0900 	.word	0x003d0900
 800ab9c:	0800de64 	.word	0x0800de64
 800aba0:	58024400 	.word	0x58024400
 800aba4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aba8:	f7fd f80a 	bl	8007bc0 <HAL_RCC_GetPCLK2Freq>
 800abac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800abae:	e02f      	b.n	800ac10 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abb0:	f107 0314 	add.w	r3, r7, #20
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7fd ffb1 	bl	8008b1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abbe:	e027      	b.n	800ac10 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abc0:	f107 0308 	add.w	r3, r7, #8
 800abc4:	4618      	mov	r0, r3
 800abc6:	f7fe f8fd 	bl	8008dc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abce:	e01f      	b.n	800ac10 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abd0:	4b2c      	ldr	r3, [pc, #176]	; (800ac84 <UART_SetConfig+0xab0>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f003 0320 	and.w	r3, r3, #32
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d009      	beq.n	800abf0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800abdc:	4b29      	ldr	r3, [pc, #164]	; (800ac84 <UART_SetConfig+0xab0>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	08db      	lsrs	r3, r3, #3
 800abe2:	f003 0303 	and.w	r3, r3, #3
 800abe6:	4a28      	ldr	r2, [pc, #160]	; (800ac88 <UART_SetConfig+0xab4>)
 800abe8:	fa22 f303 	lsr.w	r3, r2, r3
 800abec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800abee:	e00f      	b.n	800ac10 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800abf0:	4b25      	ldr	r3, [pc, #148]	; (800ac88 <UART_SetConfig+0xab4>)
 800abf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abf4:	e00c      	b.n	800ac10 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800abf6:	4b25      	ldr	r3, [pc, #148]	; (800ac8c <UART_SetConfig+0xab8>)
 800abf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abfa:	e009      	b.n	800ac10 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac02:	e005      	b.n	800ac10 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800ac04:	2300      	movs	r3, #0
 800ac06:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ac0e:	bf00      	nop
    }

    if (pclk != 0U)
 800ac10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d021      	beq.n	800ac5a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1a:	4a1d      	ldr	r2, [pc, #116]	; (800ac90 <UART_SetConfig+0xabc>)
 800ac1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac20:	461a      	mov	r2, r3
 800ac22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac24:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	085b      	lsrs	r3, r3, #1
 800ac2e:	441a      	add	r2, r3
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3e:	2b0f      	cmp	r3, #15
 800ac40:	d908      	bls.n	800ac54 <UART_SetConfig+0xa80>
 800ac42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac48:	d204      	bcs.n	800ac54 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac50:	60da      	str	r2, [r3, #12]
 800ac52:	e002      	b.n	800ac5a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800ac54:	2301      	movs	r3, #1
 800ac56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2201      	movs	r2, #1
 800ac66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ac76:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3738      	adds	r7, #56	; 0x38
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bdb0      	pop	{r4, r5, r7, pc}
 800ac82:	bf00      	nop
 800ac84:	58024400 	.word	0x58024400
 800ac88:	03d09000 	.word	0x03d09000
 800ac8c:	003d0900 	.word	0x003d0900
 800ac90:	0800de64 	.word	0x0800de64

0800ac94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca0:	f003 0301 	and.w	r3, r3, #1
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00a      	beq.n	800acbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	430a      	orrs	r2, r1
 800acbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc2:	f003 0302 	and.w	r3, r3, #2
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00a      	beq.n	800ace0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	430a      	orrs	r2, r1
 800acde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace4:	f003 0304 	and.w	r3, r3, #4
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d00a      	beq.n	800ad02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	430a      	orrs	r2, r1
 800ad00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad06:	f003 0308 	and.w	r3, r3, #8
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d00a      	beq.n	800ad24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	430a      	orrs	r2, r1
 800ad22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad28:	f003 0310 	and.w	r3, r3, #16
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d00a      	beq.n	800ad46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	430a      	orrs	r2, r1
 800ad44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad4a:	f003 0320 	and.w	r3, r3, #32
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00a      	beq.n	800ad68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	430a      	orrs	r2, r1
 800ad66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d01a      	beq.n	800adaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	430a      	orrs	r2, r1
 800ad88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad92:	d10a      	bne.n	800adaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	430a      	orrs	r2, r1
 800ada8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d00a      	beq.n	800adcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	430a      	orrs	r2, r1
 800adca:	605a      	str	r2, [r3, #4]
  }
}
 800adcc:	bf00      	nop
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	af02      	add	r7, sp, #8
 800adde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ade8:	f7f8 fd92 	bl	8003910 <HAL_GetTick>
 800adec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f003 0308 	and.w	r3, r3, #8
 800adf8:	2b08      	cmp	r3, #8
 800adfa:	d10e      	bne.n	800ae1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800adfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae00:	9300      	str	r3, [sp, #0]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2200      	movs	r2, #0
 800ae06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 f82f 	bl	800ae6e <UART_WaitOnFlagUntilTimeout>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d001      	beq.n	800ae1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae16:	2303      	movs	r3, #3
 800ae18:	e025      	b.n	800ae66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f003 0304 	and.w	r3, r3, #4
 800ae24:	2b04      	cmp	r3, #4
 800ae26:	d10e      	bne.n	800ae46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae2c:	9300      	str	r3, [sp, #0]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2200      	movs	r2, #0
 800ae32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 f819 	bl	800ae6e <UART_WaitOnFlagUntilTimeout>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d001      	beq.n	800ae46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae42:	2303      	movs	r3, #3
 800ae44:	e00f      	b.n	800ae66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2220      	movs	r2, #32
 800ae4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2220      	movs	r2, #32
 800ae52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b084      	sub	sp, #16
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	60f8      	str	r0, [r7, #12]
 800ae76:	60b9      	str	r1, [r7, #8]
 800ae78:	603b      	str	r3, [r7, #0]
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae7e:	e062      	b.n	800af46 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae80:	69bb      	ldr	r3, [r7, #24]
 800ae82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae86:	d05e      	beq.n	800af46 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae88:	f7f8 fd42 	bl	8003910 <HAL_GetTick>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	1ad3      	subs	r3, r2, r3
 800ae92:	69ba      	ldr	r2, [r7, #24]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d302      	bcc.n	800ae9e <UART_WaitOnFlagUntilTimeout+0x30>
 800ae98:	69bb      	ldr	r3, [r7, #24]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d11d      	bne.n	800aeda <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aeac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	689a      	ldr	r2, [r3, #8]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f022 0201 	bic.w	r2, r2, #1
 800aebc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2220      	movs	r2, #32
 800aec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2220      	movs	r2, #32
 800aeca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2200      	movs	r2, #0
 800aed2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800aed6:	2303      	movs	r3, #3
 800aed8:	e045      	b.n	800af66 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f003 0304 	and.w	r3, r3, #4
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d02e      	beq.n	800af46 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	69db      	ldr	r3, [r3, #28]
 800aeee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aef6:	d126      	bne.n	800af46 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800af10:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	689a      	ldr	r2, [r3, #8]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f022 0201 	bic.w	r2, r2, #1
 800af20:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2220      	movs	r2, #32
 800af26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2220      	movs	r2, #32
 800af2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2220      	movs	r2, #32
 800af36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2200      	movs	r2, #0
 800af3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800af42:	2303      	movs	r3, #3
 800af44:	e00f      	b.n	800af66 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	69da      	ldr	r2, [r3, #28]
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	4013      	ands	r3, r2
 800af50:	68ba      	ldr	r2, [r7, #8]
 800af52:	429a      	cmp	r2, r3
 800af54:	bf0c      	ite	eq
 800af56:	2301      	moveq	r3, #1
 800af58:	2300      	movne	r3, #0
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	461a      	mov	r2, r3
 800af5e:	79fb      	ldrb	r3, [r7, #7]
 800af60:	429a      	cmp	r2, r3
 800af62:	d08d      	beq.n	800ae80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
	...

0800af70 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	4613      	mov	r3, r2
 800af7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	68ba      	ldr	r2, [r7, #8]
 800af82:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	88fa      	ldrh	r2, [r7, #6]
 800af88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2200      	movs	r2, #0
 800af90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2222      	movs	r2, #34	; 0x22
 800af98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d02c      	beq.n	800affe <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afa8:	4a25      	ldr	r2, [pc, #148]	; (800b040 <UART_Start_Receive_DMA+0xd0>)
 800afaa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afb0:	4a24      	ldr	r2, [pc, #144]	; (800b044 <UART_Start_Receive_DMA+0xd4>)
 800afb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afb8:	4a23      	ldr	r2, [pc, #140]	; (800b048 <UART_Start_Receive_DMA+0xd8>)
 800afba:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afc0:	2200      	movs	r2, #0
 800afc2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	3324      	adds	r3, #36	; 0x24
 800afce:	4619      	mov	r1, r3
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afd4:	461a      	mov	r2, r3
 800afd6:	88fb      	ldrh	r3, [r7, #6]
 800afd8:	f7f9 f8ee 	bl	80041b8 <HAL_DMA_Start_IT>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00d      	beq.n	800affe <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2210      	movs	r2, #16
 800afe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2200      	movs	r2, #0
 800afee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2220      	movs	r2, #32
 800aff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800affa:	2301      	movs	r3, #1
 800affc:	e01c      	b.n	800b038 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2200      	movs	r2, #0
 800b002:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b014:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	689a      	ldr	r2, [r3, #8]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f042 0201 	orr.w	r2, r2, #1
 800b024:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	689a      	ldr	r2, [r3, #8]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b034:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800b036:	2300      	movs	r3, #0
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3710      	adds	r7, #16
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	0800b159 	.word	0x0800b159
 800b044:	0800b1ef 	.word	0x0800b1ef
 800b048:	0800b227 	.word	0x0800b227

0800b04c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b062:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	689a      	ldr	r2, [r3, #8]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800b072:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2220      	movs	r2, #32
 800b078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800b07c:	bf00      	nop
 800b07e:	370c      	adds	r7, #12
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b088:	b480      	push	{r7}
 800b08a:	b083      	sub	sp, #12
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b09e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	6899      	ldr	r1, [r3, #8]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	4b0f      	ldr	r3, [pc, #60]	; (800b0e8 <UART_EndRxTransfer+0x60>)
 800b0ac:	400b      	ands	r3, r1
 800b0ae:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d107      	bne.n	800b0c8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f022 0210 	bic.w	r2, r2, #16
 800b0c6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2220      	movs	r2, #32
 800b0cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b0dc:	bf00      	nop
 800b0de:	370c      	adds	r7, #12
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr
 800b0e8:	effffffe 	.word	0xeffffffe

0800b0ec <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	69db      	ldr	r3, [r3, #28]
 800b0fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b102:	d014      	beq.n	800b12e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2200      	movs	r2, #0
 800b108:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	689a      	ldr	r2, [r3, #8]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b11a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b12a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b12c:	e002      	b.n	800b134 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800b12e:	68f8      	ldr	r0, [r7, #12]
 800b130:	f7ff f812 	bl	800a158 <HAL_UART_TxCpltCallback>
}
 800b134:	bf00      	nop
 800b136:	3710      	adds	r7, #16
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b148:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b14a:	68f8      	ldr	r0, [r7, #12]
 800b14c:	f7ff f80e 	bl	800a16c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b150:	bf00      	nop
 800b152:	3710      	adds	r7, #16
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b164:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	69db      	ldr	r3, [r3, #28]
 800b16a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b16e:	d02b      	beq.n	800b1c8 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2200      	movs	r2, #0
 800b174:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b186:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	689a      	ldr	r2, [r3, #8]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f022 0201 	bic.w	r2, r2, #1
 800b196:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	689a      	ldr	r2, [r3, #8]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1a6:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2220      	movs	r2, #32
 800b1ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d107      	bne.n	800b1c8 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f022 0210 	bic.w	r2, r2, #16
 800b1c6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d107      	bne.n	800b1e0 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	f7fe ffef 	bl	800a1bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b1de:	e002      	b.n	800b1e6 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800b1e0:	68f8      	ldr	r0, [r7, #12]
 800b1e2:	f7fe ffcd 	bl	800a180 <HAL_UART_RxCpltCallback>
}
 800b1e6:	bf00      	nop
 800b1e8:	3710      	adds	r7, #16
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b084      	sub	sp, #16
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1fa:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b200:	2b01      	cmp	r3, #1
 800b202:	d109      	bne.n	800b218 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b20a:	085b      	lsrs	r3, r3, #1
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	4619      	mov	r1, r3
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f7fe ffd3 	bl	800a1bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b216:	e002      	b.n	800b21e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	f7fe ffbb 	bl	800a194 <HAL_UART_RxHalfCpltCallback>
}
 800b21e:	bf00      	nop
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}

0800b226 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b226:	b580      	push	{r7, lr}
 800b228:	b086      	sub	sp, #24
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b232:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b23a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b242:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b24e:	2b80      	cmp	r3, #128	; 0x80
 800b250:	d109      	bne.n	800b266 <UART_DMAError+0x40>
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	2b21      	cmp	r3, #33	; 0x21
 800b256:	d106      	bne.n	800b266 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	2200      	movs	r2, #0
 800b25c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b260:	6978      	ldr	r0, [r7, #20]
 800b262:	f7ff fef3 	bl	800b04c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b270:	2b40      	cmp	r3, #64	; 0x40
 800b272:	d109      	bne.n	800b288 <UART_DMAError+0x62>
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2b22      	cmp	r3, #34	; 0x22
 800b278:	d106      	bne.n	800b288 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b282:	6978      	ldr	r0, [r7, #20]
 800b284:	f7ff ff00 	bl	800b088 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b28e:	f043 0210 	orr.w	r2, r3, #16
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b298:	6978      	ldr	r0, [r7, #20]
 800b29a:	f7fe ff85 	bl	800a1a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b29e:	bf00      	nop
 800b2a0:	3718      	adds	r7, #24
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b084      	sub	sp, #16
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	f7fe ff6f 	bl	800a1a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2ca:	bf00      	nop
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b082      	sub	sp, #8
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	681a      	ldr	r2, [r3, #0]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2e8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2220      	movs	r2, #32
 800b2ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f7fe ff2d 	bl	800a158 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2fe:	bf00      	nop
 800b300:	3708      	adds	r7, #8
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}

0800b306 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b306:	b480      	push	{r7}
 800b308:	b083      	sub	sp, #12
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b30e:	bf00      	nop
 800b310:	370c      	adds	r7, #12
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b31a:	b480      	push	{r7}
 800b31c:	b083      	sub	sp, #12
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b322:	bf00      	nop
 800b324:	370c      	adds	r7, #12
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b32e:	b480      	push	{r7}
 800b330:	b083      	sub	sp, #12
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b336:	bf00      	nop
 800b338:	370c      	adds	r7, #12
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr

0800b342 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b342:	b480      	push	{r7}
 800b344:	b085      	sub	sp, #20
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b350:	2b01      	cmp	r3, #1
 800b352:	d101      	bne.n	800b358 <HAL_UARTEx_DisableFifoMode+0x16>
 800b354:	2302      	movs	r3, #2
 800b356:	e027      	b.n	800b3a8 <HAL_UARTEx_DisableFifoMode+0x66>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2224      	movs	r2, #36	; 0x24
 800b364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f022 0201 	bic.w	r2, r2, #1
 800b37e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b386:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	68fa      	ldr	r2, [r7, #12]
 800b394:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2220      	movs	r2, #32
 800b39a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3714      	adds	r7, #20
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d101      	bne.n	800b3cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b3c8:	2302      	movs	r3, #2
 800b3ca:	e02d      	b.n	800b428 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2224      	movs	r2, #36	; 0x24
 800b3d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f022 0201 	bic.w	r2, r2, #1
 800b3f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	689b      	ldr	r3, [r3, #8]
 800b3fa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	683a      	ldr	r2, [r7, #0]
 800b404:	430a      	orrs	r2, r1
 800b406:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 f84f 	bl	800b4ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	68fa      	ldr	r2, [r7, #12]
 800b414:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2220      	movs	r2, #32
 800b41a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b426:	2300      	movs	r3, #0
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3710      	adds	r7, #16
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b440:	2b01      	cmp	r3, #1
 800b442:	d101      	bne.n	800b448 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b444:	2302      	movs	r3, #2
 800b446:	e02d      	b.n	800b4a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2201      	movs	r2, #1
 800b44c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2224      	movs	r2, #36	; 0x24
 800b454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f022 0201 	bic.w	r2, r2, #1
 800b46e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	683a      	ldr	r2, [r7, #0]
 800b480:	430a      	orrs	r2, r1
 800b482:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f000 f811 	bl	800b4ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	68fa      	ldr	r2, [r7, #12]
 800b490:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2220      	movs	r2, #32
 800b496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2200      	movs	r2, #0
 800b49e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3710      	adds	r7, #16
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d108      	bne.n	800b4ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b4cc:	e031      	b.n	800b532 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b4ce:	2310      	movs	r3, #16
 800b4d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b4d2:	2310      	movs	r3, #16
 800b4d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	0e5b      	lsrs	r3, r3, #25
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	f003 0307 	and.w	r3, r3, #7
 800b4e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	0f5b      	lsrs	r3, r3, #29
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	f003 0307 	and.w	r3, r3, #7
 800b4f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4f6:	7bbb      	ldrb	r3, [r7, #14]
 800b4f8:	7b3a      	ldrb	r2, [r7, #12]
 800b4fa:	4911      	ldr	r1, [pc, #68]	; (800b540 <UARTEx_SetNbDataToProcess+0x94>)
 800b4fc:	5c8a      	ldrb	r2, [r1, r2]
 800b4fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b502:	7b3a      	ldrb	r2, [r7, #12]
 800b504:	490f      	ldr	r1, [pc, #60]	; (800b544 <UARTEx_SetNbDataToProcess+0x98>)
 800b506:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b508:	fb93 f3f2 	sdiv	r3, r3, r2
 800b50c:	b29a      	uxth	r2, r3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b514:	7bfb      	ldrb	r3, [r7, #15]
 800b516:	7b7a      	ldrb	r2, [r7, #13]
 800b518:	4909      	ldr	r1, [pc, #36]	; (800b540 <UARTEx_SetNbDataToProcess+0x94>)
 800b51a:	5c8a      	ldrb	r2, [r1, r2]
 800b51c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b520:	7b7a      	ldrb	r2, [r7, #13]
 800b522:	4908      	ldr	r1, [pc, #32]	; (800b544 <UARTEx_SetNbDataToProcess+0x98>)
 800b524:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b526:	fb93 f3f2 	sdiv	r3, r3, r2
 800b52a:	b29a      	uxth	r2, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b532:	bf00      	nop
 800b534:	3714      	adds	r7, #20
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	0800de7c 	.word	0x0800de7c
 800b544:	0800de84 	.word	0x0800de84

0800b548 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b548:	b480      	push	{r7}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	4603      	mov	r3, r0
 800b550:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b552:	2300      	movs	r3, #0
 800b554:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b55a:	2b84      	cmp	r3, #132	; 0x84
 800b55c:	d005      	beq.n	800b56a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b55e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	4413      	add	r3, r2
 800b566:	3303      	adds	r3, #3
 800b568:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b56a:	68fb      	ldr	r3, [r7, #12]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3714      	adds	r7, #20
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr

0800b578 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b57c:	f001 f96c 	bl	800c858 <vTaskStartScheduler>
  
  return osOK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	bd80      	pop	{r7, pc}

0800b586 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b586:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b588:	b089      	sub	sp, #36	; 0x24
 800b58a:	af04      	add	r7, sp, #16
 800b58c:	6078      	str	r0, [r7, #4]
 800b58e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	695b      	ldr	r3, [r3, #20]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d020      	beq.n	800b5da <osThreadCreate+0x54>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	699b      	ldr	r3, [r3, #24]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d01c      	beq.n	800b5da <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	685c      	ldr	r4, [r3, #4]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681d      	ldr	r5, [r3, #0]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	691e      	ldr	r6, [r3, #16]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7ff ffc8 	bl	800b548 <makeFreeRtosPriority>
 800b5b8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	695b      	ldr	r3, [r3, #20]
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b5c2:	9202      	str	r2, [sp, #8]
 800b5c4:	9301      	str	r3, [sp, #4]
 800b5c6:	9100      	str	r1, [sp, #0]
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	4632      	mov	r2, r6
 800b5cc:	4629      	mov	r1, r5
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	f000 fe58 	bl	800c284 <xTaskCreateStatic>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	60fb      	str	r3, [r7, #12]
 800b5d8:	e01c      	b.n	800b614 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	685c      	ldr	r4, [r3, #4]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b5e6:	b29e      	uxth	r6, r3
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7ff ffaa 	bl	800b548 <makeFreeRtosPriority>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	f107 030c 	add.w	r3, r7, #12
 800b5fa:	9301      	str	r3, [sp, #4]
 800b5fc:	9200      	str	r2, [sp, #0]
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	4632      	mov	r2, r6
 800b602:	4629      	mov	r1, r5
 800b604:	4620      	mov	r0, r4
 800b606:	f000 fe9a 	bl	800c33e <xTaskCreate>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d001      	beq.n	800b614 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b610:	2300      	movs	r3, #0
 800b612:	e000      	b.n	800b616 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b614:	68fb      	ldr	r3, [r7, #12]
}
 800b616:	4618      	mov	r0, r3
 800b618:	3714      	adds	r7, #20
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b61e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b61e:	b580      	push	{r7, lr}
 800b620:	b084      	sub	sp, #16
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d001      	beq.n	800b634 <osDelay+0x16>
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	e000      	b.n	800b636 <osDelay+0x18>
 800b634:	2301      	movs	r3, #1
 800b636:	4618      	mov	r0, r3
 800b638:	f000 ffb8 	bl	800c5ac <vTaskDelay>
  
  return osOK;
 800b63c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3710      	adds	r7, #16
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b646:	b580      	push	{r7, lr}
 800b648:	b082      	sub	sp, #8
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d007      	beq.n	800b666 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	4619      	mov	r1, r3
 800b65c:	2001      	movs	r0, #1
 800b65e:	f000 fa5c 	bl	800bb1a <xQueueCreateMutexStatic>
 800b662:	4603      	mov	r3, r0
 800b664:	e003      	b.n	800b66e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b666:	2001      	movs	r0, #1
 800b668:	f000 fa3f 	bl	800baea <xQueueCreateMutex>
 800b66c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3708      	adds	r7, #8
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b676:	b580      	push	{r7, lr}
 800b678:	b086      	sub	sp, #24
 800b67a:	af02      	add	r7, sp, #8
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d00f      	beq.n	800b6a8 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d10a      	bne.n	800b6a4 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	2203      	movs	r2, #3
 800b694:	9200      	str	r2, [sp, #0]
 800b696:	2200      	movs	r2, #0
 800b698:	2100      	movs	r1, #0
 800b69a:	2001      	movs	r0, #1
 800b69c:	f000 f93a 	bl	800b914 <xQueueGenericCreateStatic>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	e016      	b.n	800b6d2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	e014      	b.n	800b6d2 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d110      	bne.n	800b6d0 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b6ae:	2203      	movs	r2, #3
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	2001      	movs	r0, #1
 800b6b4:	f000 f9a6 	bl	800ba04 <xQueueGenericCreate>
 800b6b8:	60f8      	str	r0, [r7, #12]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d005      	beq.n	800b6cc <osSemaphoreCreate+0x56>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	68f8      	ldr	r0, [r7, #12]
 800b6c8:	f000 fa42 	bl	800bb50 <xQueueGenericSend>
      return sema;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	e000      	b.n	800b6d2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b6d0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b6da:	b480      	push	{r7}
 800b6dc:	b083      	sub	sp, #12
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f103 0208 	add.w	r2, r3, #8
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b6f2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f103 0208 	add.w	r2, r3, #8
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f103 0208 	add.w	r2, r3, #8
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2200      	movs	r2, #0
 800b70c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b70e:	bf00      	nop
 800b710:	370c      	adds	r7, #12
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr

0800b71a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b71a:	b480      	push	{r7}
 800b71c:	b083      	sub	sp, #12
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b728:	bf00      	nop
 800b72a:	370c      	adds	r7, #12
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b734:	b480      	push	{r7}
 800b736:	b085      	sub	sp, #20
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	68fa      	ldr	r2, [r7, #12]
 800b748:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	689a      	ldr	r2, [r3, #8]
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	683a      	ldr	r2, [r7, #0]
 800b758:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	683a      	ldr	r2, [r7, #0]
 800b75e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	1c5a      	adds	r2, r3, #1
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	601a      	str	r2, [r3, #0]
}
 800b770:	bf00      	nop
 800b772:	3714      	adds	r7, #20
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b77c:	b480      	push	{r7}
 800b77e:	b085      	sub	sp, #20
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b792:	d103      	bne.n	800b79c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	691b      	ldr	r3, [r3, #16]
 800b798:	60fb      	str	r3, [r7, #12]
 800b79a:	e00c      	b.n	800b7b6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	3308      	adds	r3, #8
 800b7a0:	60fb      	str	r3, [r7, #12]
 800b7a2:	e002      	b.n	800b7aa <vListInsert+0x2e>
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	60fb      	str	r3, [r7, #12]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	68ba      	ldr	r2, [r7, #8]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d2f6      	bcs.n	800b7a4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	685a      	ldr	r2, [r3, #4]
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	683a      	ldr	r2, [r7, #0]
 800b7c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	683a      	ldr	r2, [r7, #0]
 800b7d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	1c5a      	adds	r2, r3, #1
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	601a      	str	r2, [r3, #0]
}
 800b7e2:	bf00      	nop
 800b7e4:	3714      	adds	r7, #20
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr

0800b7ee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b7ee:	b480      	push	{r7}
 800b7f0:	b085      	sub	sp, #20
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	691b      	ldr	r3, [r3, #16]
 800b7fa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	6892      	ldr	r2, [r2, #8]
 800b804:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	689b      	ldr	r3, [r3, #8]
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	6852      	ldr	r2, [r2, #4]
 800b80e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	429a      	cmp	r2, r3
 800b818:	d103      	bne.n	800b822 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	689a      	ldr	r2, [r3, #8]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2200      	movs	r2, #0
 800b826:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	1e5a      	subs	r2, r3, #1
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
}
 800b836:	4618      	mov	r0, r3
 800b838:	3714      	adds	r7, #20
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr
	...

0800b844 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d10a      	bne.n	800b86e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85c:	f383 8811 	msr	BASEPRI, r3
 800b860:	f3bf 8f6f 	isb	sy
 800b864:	f3bf 8f4f 	dsb	sy
 800b868:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b86a:	bf00      	nop
 800b86c:	e7fe      	b.n	800b86c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b86e:	f001 ff41 	bl	800d6f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681a      	ldr	r2, [r3, #0]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b87a:	68f9      	ldr	r1, [r7, #12]
 800b87c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b87e:	fb01 f303 	mul.w	r3, r1, r3
 800b882:	441a      	add	r2, r3
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2200      	movs	r2, #0
 800b88c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b89e:	3b01      	subs	r3, #1
 800b8a0:	68f9      	ldr	r1, [r7, #12]
 800b8a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b8a4:	fb01 f303 	mul.w	r3, r1, r3
 800b8a8:	441a      	add	r2, r3
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	22ff      	movs	r2, #255	; 0xff
 800b8b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	22ff      	movs	r2, #255	; 0xff
 800b8ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d114      	bne.n	800b8ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	691b      	ldr	r3, [r3, #16]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d01a      	beq.n	800b902 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	3310      	adds	r3, #16
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f001 fa03 	bl	800ccdc <xTaskRemoveFromEventList>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d012      	beq.n	800b902 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b8dc:	4b0c      	ldr	r3, [pc, #48]	; (800b910 <xQueueGenericReset+0xcc>)
 800b8de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8e2:	601a      	str	r2, [r3, #0]
 800b8e4:	f3bf 8f4f 	dsb	sy
 800b8e8:	f3bf 8f6f 	isb	sy
 800b8ec:	e009      	b.n	800b902 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	3310      	adds	r3, #16
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7ff fef1 	bl	800b6da <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	3324      	adds	r3, #36	; 0x24
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7ff feec 	bl	800b6da <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b902:	f001 ff27 	bl	800d754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b906:	2301      	movs	r3, #1
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3710      	adds	r7, #16
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	e000ed04 	.word	0xe000ed04

0800b914 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b914:	b580      	push	{r7, lr}
 800b916:	b08e      	sub	sp, #56	; 0x38
 800b918:	af02      	add	r7, sp, #8
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	607a      	str	r2, [r7, #4]
 800b920:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d10a      	bne.n	800b93e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92c:	f383 8811 	msr	BASEPRI, r3
 800b930:	f3bf 8f6f 	isb	sy
 800b934:	f3bf 8f4f 	dsb	sy
 800b938:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b93a:	bf00      	nop
 800b93c:	e7fe      	b.n	800b93c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d10a      	bne.n	800b95a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b948:	f383 8811 	msr	BASEPRI, r3
 800b94c:	f3bf 8f6f 	isb	sy
 800b950:	f3bf 8f4f 	dsb	sy
 800b954:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b956:	bf00      	nop
 800b958:	e7fe      	b.n	800b958 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d002      	beq.n	800b966 <xQueueGenericCreateStatic+0x52>
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d001      	beq.n	800b96a <xQueueGenericCreateStatic+0x56>
 800b966:	2301      	movs	r3, #1
 800b968:	e000      	b.n	800b96c <xQueueGenericCreateStatic+0x58>
 800b96a:	2300      	movs	r3, #0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d10a      	bne.n	800b986 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b974:	f383 8811 	msr	BASEPRI, r3
 800b978:	f3bf 8f6f 	isb	sy
 800b97c:	f3bf 8f4f 	dsb	sy
 800b980:	623b      	str	r3, [r7, #32]
}
 800b982:	bf00      	nop
 800b984:	e7fe      	b.n	800b984 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d102      	bne.n	800b992 <xQueueGenericCreateStatic+0x7e>
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d101      	bne.n	800b996 <xQueueGenericCreateStatic+0x82>
 800b992:	2301      	movs	r3, #1
 800b994:	e000      	b.n	800b998 <xQueueGenericCreateStatic+0x84>
 800b996:	2300      	movs	r3, #0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d10a      	bne.n	800b9b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a0:	f383 8811 	msr	BASEPRI, r3
 800b9a4:	f3bf 8f6f 	isb	sy
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	61fb      	str	r3, [r7, #28]
}
 800b9ae:	bf00      	nop
 800b9b0:	e7fe      	b.n	800b9b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b9b2:	2348      	movs	r3, #72	; 0x48
 800b9b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	2b48      	cmp	r3, #72	; 0x48
 800b9ba:	d00a      	beq.n	800b9d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c0:	f383 8811 	msr	BASEPRI, r3
 800b9c4:	f3bf 8f6f 	isb	sy
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	61bb      	str	r3, [r7, #24]
}
 800b9ce:	bf00      	nop
 800b9d0:	e7fe      	b.n	800b9d0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b9d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00d      	beq.n	800b9fa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b9e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ec:	9300      	str	r3, [sp, #0]
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	68b9      	ldr	r1, [r7, #8]
 800b9f4:	68f8      	ldr	r0, [r7, #12]
 800b9f6:	f000 f83f 	bl	800ba78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3730      	adds	r7, #48	; 0x30
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b08a      	sub	sp, #40	; 0x28
 800ba08:	af02      	add	r7, sp, #8
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	60b9      	str	r1, [r7, #8]
 800ba0e:	4613      	mov	r3, r2
 800ba10:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d10a      	bne.n	800ba2e <xQueueGenericCreate+0x2a>
	__asm volatile
 800ba18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1c:	f383 8811 	msr	BASEPRI, r3
 800ba20:	f3bf 8f6f 	isb	sy
 800ba24:	f3bf 8f4f 	dsb	sy
 800ba28:	613b      	str	r3, [r7, #16]
}
 800ba2a:	bf00      	nop
 800ba2c:	e7fe      	b.n	800ba2c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	68ba      	ldr	r2, [r7, #8]
 800ba32:	fb02 f303 	mul.w	r3, r2, r3
 800ba36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	3348      	adds	r3, #72	; 0x48
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f001 ff7b 	bl	800d938 <pvPortMalloc>
 800ba42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d011      	beq.n	800ba6e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	3348      	adds	r3, #72	; 0x48
 800ba52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ba54:	69bb      	ldr	r3, [r7, #24]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba5c:	79fa      	ldrb	r2, [r7, #7]
 800ba5e:	69bb      	ldr	r3, [r7, #24]
 800ba60:	9300      	str	r3, [sp, #0]
 800ba62:	4613      	mov	r3, r2
 800ba64:	697a      	ldr	r2, [r7, #20]
 800ba66:	68b9      	ldr	r1, [r7, #8]
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	f000 f805 	bl	800ba78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba6e:	69bb      	ldr	r3, [r7, #24]
	}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3720      	adds	r7, #32
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]
 800ba84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d103      	bne.n	800ba94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	69ba      	ldr	r2, [r7, #24]
 800ba90:	601a      	str	r2, [r3, #0]
 800ba92:	e002      	b.n	800ba9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ba94:	69bb      	ldr	r3, [r7, #24]
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800baa0:	69bb      	ldr	r3, [r7, #24]
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800baa6:	2101      	movs	r1, #1
 800baa8:	69b8      	ldr	r0, [r7, #24]
 800baaa:	f7ff fecb 	bl	800b844 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800baae:	bf00      	nop
 800bab0:	3710      	adds	r7, #16
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b082      	sub	sp, #8
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d00e      	beq.n	800bae2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2200      	movs	r2, #0
 800bace:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2200      	movs	r2, #0
 800bad4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bad6:	2300      	movs	r3, #0
 800bad8:	2200      	movs	r2, #0
 800bada:	2100      	movs	r1, #0
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f000 f837 	bl	800bb50 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bae2:	bf00      	nop
 800bae4:	3708      	adds	r7, #8
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800baea:	b580      	push	{r7, lr}
 800baec:	b086      	sub	sp, #24
 800baee:	af00      	add	r7, sp, #0
 800baf0:	4603      	mov	r3, r0
 800baf2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800baf4:	2301      	movs	r3, #1
 800baf6:	617b      	str	r3, [r7, #20]
 800baf8:	2300      	movs	r3, #0
 800bafa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bafc:	79fb      	ldrb	r3, [r7, #7]
 800bafe:	461a      	mov	r2, r3
 800bb00:	6939      	ldr	r1, [r7, #16]
 800bb02:	6978      	ldr	r0, [r7, #20]
 800bb04:	f7ff ff7e 	bl	800ba04 <xQueueGenericCreate>
 800bb08:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bb0a:	68f8      	ldr	r0, [r7, #12]
 800bb0c:	f7ff ffd3 	bl	800bab6 <prvInitialiseMutex>

		return xNewQueue;
 800bb10:	68fb      	ldr	r3, [r7, #12]
	}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3718      	adds	r7, #24
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b088      	sub	sp, #32
 800bb1e:	af02      	add	r7, sp, #8
 800bb20:	4603      	mov	r3, r0
 800bb22:	6039      	str	r1, [r7, #0]
 800bb24:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bb26:	2301      	movs	r3, #1
 800bb28:	617b      	str	r3, [r7, #20]
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bb2e:	79fb      	ldrb	r3, [r7, #7]
 800bb30:	9300      	str	r3, [sp, #0]
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	2200      	movs	r2, #0
 800bb36:	6939      	ldr	r1, [r7, #16]
 800bb38:	6978      	ldr	r0, [r7, #20]
 800bb3a:	f7ff feeb 	bl	800b914 <xQueueGenericCreateStatic>
 800bb3e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bb40:	68f8      	ldr	r0, [r7, #12]
 800bb42:	f7ff ffb8 	bl	800bab6 <prvInitialiseMutex>

		return xNewQueue;
 800bb46:	68fb      	ldr	r3, [r7, #12]
	}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3718      	adds	r7, #24
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b08e      	sub	sp, #56	; 0x38
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	60f8      	str	r0, [r7, #12]
 800bb58:	60b9      	str	r1, [r7, #8]
 800bb5a:	607a      	str	r2, [r7, #4]
 800bb5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d10a      	bne.n	800bb82 <xQueueGenericSend+0x32>
	__asm volatile
 800bb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb70:	f383 8811 	msr	BASEPRI, r3
 800bb74:	f3bf 8f6f 	isb	sy
 800bb78:	f3bf 8f4f 	dsb	sy
 800bb7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb7e:	bf00      	nop
 800bb80:	e7fe      	b.n	800bb80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d103      	bne.n	800bb90 <xQueueGenericSend+0x40>
 800bb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d101      	bne.n	800bb94 <xQueueGenericSend+0x44>
 800bb90:	2301      	movs	r3, #1
 800bb92:	e000      	b.n	800bb96 <xQueueGenericSend+0x46>
 800bb94:	2300      	movs	r3, #0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d10a      	bne.n	800bbb0 <xQueueGenericSend+0x60>
	__asm volatile
 800bb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9e:	f383 8811 	msr	BASEPRI, r3
 800bba2:	f3bf 8f6f 	isb	sy
 800bba6:	f3bf 8f4f 	dsb	sy
 800bbaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bbac:	bf00      	nop
 800bbae:	e7fe      	b.n	800bbae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	2b02      	cmp	r3, #2
 800bbb4:	d103      	bne.n	800bbbe <xQueueGenericSend+0x6e>
 800bbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d101      	bne.n	800bbc2 <xQueueGenericSend+0x72>
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	e000      	b.n	800bbc4 <xQueueGenericSend+0x74>
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d10a      	bne.n	800bbde <xQueueGenericSend+0x8e>
	__asm volatile
 800bbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbcc:	f383 8811 	msr	BASEPRI, r3
 800bbd0:	f3bf 8f6f 	isb	sy
 800bbd4:	f3bf 8f4f 	dsb	sy
 800bbd8:	623b      	str	r3, [r7, #32]
}
 800bbda:	bf00      	nop
 800bbdc:	e7fe      	b.n	800bbdc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bbde:	f001 fa39 	bl	800d054 <xTaskGetSchedulerState>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d102      	bne.n	800bbee <xQueueGenericSend+0x9e>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d101      	bne.n	800bbf2 <xQueueGenericSend+0xa2>
 800bbee:	2301      	movs	r3, #1
 800bbf0:	e000      	b.n	800bbf4 <xQueueGenericSend+0xa4>
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d10a      	bne.n	800bc0e <xQueueGenericSend+0xbe>
	__asm volatile
 800bbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfc:	f383 8811 	msr	BASEPRI, r3
 800bc00:	f3bf 8f6f 	isb	sy
 800bc04:	f3bf 8f4f 	dsb	sy
 800bc08:	61fb      	str	r3, [r7, #28]
}
 800bc0a:	bf00      	nop
 800bc0c:	e7fe      	b.n	800bc0c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc0e:	f001 fd71 	bl	800d6f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d302      	bcc.n	800bc24 <xQueueGenericSend+0xd4>
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	2b02      	cmp	r3, #2
 800bc22:	d129      	bne.n	800bc78 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc24:	683a      	ldr	r2, [r7, #0]
 800bc26:	68b9      	ldr	r1, [r7, #8]
 800bc28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc2a:	f000 fa41 	bl	800c0b0 <prvCopyDataToQueue>
 800bc2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d010      	beq.n	800bc5a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3a:	3324      	adds	r3, #36	; 0x24
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f001 f84d 	bl	800ccdc <xTaskRemoveFromEventList>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d013      	beq.n	800bc70 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bc48:	4b3f      	ldr	r3, [pc, #252]	; (800bd48 <xQueueGenericSend+0x1f8>)
 800bc4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc4e:	601a      	str	r2, [r3, #0]
 800bc50:	f3bf 8f4f 	dsb	sy
 800bc54:	f3bf 8f6f 	isb	sy
 800bc58:	e00a      	b.n	800bc70 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bc5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d007      	beq.n	800bc70 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bc60:	4b39      	ldr	r3, [pc, #228]	; (800bd48 <xQueueGenericSend+0x1f8>)
 800bc62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc66:	601a      	str	r2, [r3, #0]
 800bc68:	f3bf 8f4f 	dsb	sy
 800bc6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bc70:	f001 fd70 	bl	800d754 <vPortExitCritical>
				return pdPASS;
 800bc74:	2301      	movs	r3, #1
 800bc76:	e063      	b.n	800bd40 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d103      	bne.n	800bc86 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bc7e:	f001 fd69 	bl	800d754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bc82:	2300      	movs	r3, #0
 800bc84:	e05c      	b.n	800bd40 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bc86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d106      	bne.n	800bc9a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc8c:	f107 0314 	add.w	r3, r7, #20
 800bc90:	4618      	mov	r0, r3
 800bc92:	f001 f885 	bl	800cda0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc96:	2301      	movs	r3, #1
 800bc98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc9a:	f001 fd5b 	bl	800d754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc9e:	f000 fe3b 	bl	800c918 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bca2:	f001 fd27 	bl	800d6f4 <vPortEnterCritical>
 800bca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcac:	b25b      	sxtb	r3, r3
 800bcae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcb2:	d103      	bne.n	800bcbc <xQueueGenericSend+0x16c>
 800bcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcc2:	b25b      	sxtb	r3, r3
 800bcc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcc8:	d103      	bne.n	800bcd2 <xQueueGenericSend+0x182>
 800bcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bccc:	2200      	movs	r2, #0
 800bcce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcd2:	f001 fd3f 	bl	800d754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bcd6:	1d3a      	adds	r2, r7, #4
 800bcd8:	f107 0314 	add.w	r3, r7, #20
 800bcdc:	4611      	mov	r1, r2
 800bcde:	4618      	mov	r0, r3
 800bce0:	f001 f874 	bl	800cdcc <xTaskCheckForTimeOut>
 800bce4:	4603      	mov	r3, r0
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d124      	bne.n	800bd34 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bcea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcec:	f000 fab2 	bl	800c254 <prvIsQueueFull>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d018      	beq.n	800bd28 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf8:	3310      	adds	r3, #16
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	4611      	mov	r1, r2
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f000 ffc8 	bl	800cc94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bd04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd06:	f000 fa3d 	bl	800c184 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bd0a:	f000 fe13 	bl	800c934 <xTaskResumeAll>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	f47f af7c 	bne.w	800bc0e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bd16:	4b0c      	ldr	r3, [pc, #48]	; (800bd48 <xQueueGenericSend+0x1f8>)
 800bd18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd1c:	601a      	str	r2, [r3, #0]
 800bd1e:	f3bf 8f4f 	dsb	sy
 800bd22:	f3bf 8f6f 	isb	sy
 800bd26:	e772      	b.n	800bc0e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bd28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd2a:	f000 fa2b 	bl	800c184 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd2e:	f000 fe01 	bl	800c934 <xTaskResumeAll>
 800bd32:	e76c      	b.n	800bc0e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bd34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd36:	f000 fa25 	bl	800c184 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd3a:	f000 fdfb 	bl	800c934 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bd3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3738      	adds	r7, #56	; 0x38
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	e000ed04 	.word	0xe000ed04

0800bd4c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b08e      	sub	sp, #56	; 0x38
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10a      	bne.n	800bd76 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800bd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd64:	f383 8811 	msr	BASEPRI, r3
 800bd68:	f3bf 8f6f 	isb	sy
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	623b      	str	r3, [r7, #32]
}
 800bd72:	bf00      	nop
 800bd74:	e7fe      	b.n	800bd74 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00a      	beq.n	800bd94 <xQueueGiveFromISR+0x48>
	__asm volatile
 800bd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd82:	f383 8811 	msr	BASEPRI, r3
 800bd86:	f3bf 8f6f 	isb	sy
 800bd8a:	f3bf 8f4f 	dsb	sy
 800bd8e:	61fb      	str	r3, [r7, #28]
}
 800bd90:	bf00      	nop
 800bd92:	e7fe      	b.n	800bd92 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d103      	bne.n	800bda4 <xQueueGiveFromISR+0x58>
 800bd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d101      	bne.n	800bda8 <xQueueGiveFromISR+0x5c>
 800bda4:	2301      	movs	r3, #1
 800bda6:	e000      	b.n	800bdaa <xQueueGiveFromISR+0x5e>
 800bda8:	2300      	movs	r3, #0
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d10a      	bne.n	800bdc4 <xQueueGiveFromISR+0x78>
	__asm volatile
 800bdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb2:	f383 8811 	msr	BASEPRI, r3
 800bdb6:	f3bf 8f6f 	isb	sy
 800bdba:	f3bf 8f4f 	dsb	sy
 800bdbe:	61bb      	str	r3, [r7, #24]
}
 800bdc0:	bf00      	nop
 800bdc2:	e7fe      	b.n	800bdc2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bdc4:	f001 fd78 	bl	800d8b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bdc8:	f3ef 8211 	mrs	r2, BASEPRI
 800bdcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd0:	f383 8811 	msr	BASEPRI, r3
 800bdd4:	f3bf 8f6f 	isb	sy
 800bdd8:	f3bf 8f4f 	dsb	sy
 800bddc:	617a      	str	r2, [r7, #20]
 800bdde:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bde0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bde2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bde8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d22b      	bcs.n	800be4c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bdfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bdfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be00:	1c5a      	adds	r2, r3, #1
 800be02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be04:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800be06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800be0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be0e:	d112      	bne.n	800be36 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be14:	2b00      	cmp	r3, #0
 800be16:	d016      	beq.n	800be46 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1a:	3324      	adds	r3, #36	; 0x24
 800be1c:	4618      	mov	r0, r3
 800be1e:	f000 ff5d 	bl	800ccdc <xTaskRemoveFromEventList>
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d00e      	beq.n	800be46 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d00b      	beq.n	800be46 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	2201      	movs	r2, #1
 800be32:	601a      	str	r2, [r3, #0]
 800be34:	e007      	b.n	800be46 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800be36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be3a:	3301      	adds	r3, #1
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	b25a      	sxtb	r2, r3
 800be40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800be46:	2301      	movs	r3, #1
 800be48:	637b      	str	r3, [r7, #52]	; 0x34
 800be4a:	e001      	b.n	800be50 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800be4c:	2300      	movs	r3, #0
 800be4e:	637b      	str	r3, [r7, #52]	; 0x34
 800be50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be52:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800be5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3738      	adds	r7, #56	; 0x38
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
	...

0800be68 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b08e      	sub	sp, #56	; 0x38
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800be72:	2300      	movs	r3, #0
 800be74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800be7a:	2300      	movs	r3, #0
 800be7c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800be7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be80:	2b00      	cmp	r3, #0
 800be82:	d10a      	bne.n	800be9a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800be84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	623b      	str	r3, [r7, #32]
}
 800be96:	bf00      	nop
 800be98:	e7fe      	b.n	800be98 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800be9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d00a      	beq.n	800beb8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea6:	f383 8811 	msr	BASEPRI, r3
 800beaa:	f3bf 8f6f 	isb	sy
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	61fb      	str	r3, [r7, #28]
}
 800beb4:	bf00      	nop
 800beb6:	e7fe      	b.n	800beb6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800beb8:	f001 f8cc 	bl	800d054 <xTaskGetSchedulerState>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d102      	bne.n	800bec8 <xQueueSemaphoreTake+0x60>
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d101      	bne.n	800becc <xQueueSemaphoreTake+0x64>
 800bec8:	2301      	movs	r3, #1
 800beca:	e000      	b.n	800bece <xQueueSemaphoreTake+0x66>
 800becc:	2300      	movs	r3, #0
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d10a      	bne.n	800bee8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed6:	f383 8811 	msr	BASEPRI, r3
 800beda:	f3bf 8f6f 	isb	sy
 800bede:	f3bf 8f4f 	dsb	sy
 800bee2:	61bb      	str	r3, [r7, #24]
}
 800bee4:	bf00      	nop
 800bee6:	e7fe      	b.n	800bee6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bee8:	f001 fc04 	bl	800d6f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800beec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d024      	beq.n	800bf42 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befa:	1e5a      	subs	r2, r3, #1
 800befc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d104      	bne.n	800bf12 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bf08:	f001 fa4c 	bl	800d3a4 <pvTaskIncrementMutexHeldCount>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf10:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf14:	691b      	ldr	r3, [r3, #16]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d00f      	beq.n	800bf3a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1c:	3310      	adds	r3, #16
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f000 fedc 	bl	800ccdc <xTaskRemoveFromEventList>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d007      	beq.n	800bf3a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bf2a:	4b54      	ldr	r3, [pc, #336]	; (800c07c <xQueueSemaphoreTake+0x214>)
 800bf2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf30:	601a      	str	r2, [r3, #0]
 800bf32:	f3bf 8f4f 	dsb	sy
 800bf36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bf3a:	f001 fc0b 	bl	800d754 <vPortExitCritical>
				return pdPASS;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	e097      	b.n	800c072 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d111      	bne.n	800bf6c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bf48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d00a      	beq.n	800bf64 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bf4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf52:	f383 8811 	msr	BASEPRI, r3
 800bf56:	f3bf 8f6f 	isb	sy
 800bf5a:	f3bf 8f4f 	dsb	sy
 800bf5e:	617b      	str	r3, [r7, #20]
}
 800bf60:	bf00      	nop
 800bf62:	e7fe      	b.n	800bf62 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bf64:	f001 fbf6 	bl	800d754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	e082      	b.n	800c072 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d106      	bne.n	800bf80 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf72:	f107 030c 	add.w	r3, r7, #12
 800bf76:	4618      	mov	r0, r3
 800bf78:	f000 ff12 	bl	800cda0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf80:	f001 fbe8 	bl	800d754 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf84:	f000 fcc8 	bl	800c918 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf88:	f001 fbb4 	bl	800d6f4 <vPortEnterCritical>
 800bf8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf92:	b25b      	sxtb	r3, r3
 800bf94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf98:	d103      	bne.n	800bfa2 <xQueueSemaphoreTake+0x13a>
 800bf9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfa8:	b25b      	sxtb	r3, r3
 800bfaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfae:	d103      	bne.n	800bfb8 <xQueueSemaphoreTake+0x150>
 800bfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfb8:	f001 fbcc 	bl	800d754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bfbc:	463a      	mov	r2, r7
 800bfbe:	f107 030c 	add.w	r3, r7, #12
 800bfc2:	4611      	mov	r1, r2
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f000 ff01 	bl	800cdcc <xTaskCheckForTimeOut>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d132      	bne.n	800c036 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bfd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfd2:	f000 f929 	bl	800c228 <prvIsQueueEmpty>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d026      	beq.n	800c02a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bfdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d109      	bne.n	800bff8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800bfe4:	f001 fb86 	bl	800d6f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfea:	689b      	ldr	r3, [r3, #8]
 800bfec:	4618      	mov	r0, r3
 800bfee:	f001 f84f 	bl	800d090 <xTaskPriorityInherit>
 800bff2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bff4:	f001 fbae 	bl	800d754 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffa:	3324      	adds	r3, #36	; 0x24
 800bffc:	683a      	ldr	r2, [r7, #0]
 800bffe:	4611      	mov	r1, r2
 800c000:	4618      	mov	r0, r3
 800c002:	f000 fe47 	bl	800cc94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c006:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c008:	f000 f8bc 	bl	800c184 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c00c:	f000 fc92 	bl	800c934 <xTaskResumeAll>
 800c010:	4603      	mov	r3, r0
 800c012:	2b00      	cmp	r3, #0
 800c014:	f47f af68 	bne.w	800bee8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c018:	4b18      	ldr	r3, [pc, #96]	; (800c07c <xQueueSemaphoreTake+0x214>)
 800c01a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c01e:	601a      	str	r2, [r3, #0]
 800c020:	f3bf 8f4f 	dsb	sy
 800c024:	f3bf 8f6f 	isb	sy
 800c028:	e75e      	b.n	800bee8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c02a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c02c:	f000 f8aa 	bl	800c184 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c030:	f000 fc80 	bl	800c934 <xTaskResumeAll>
 800c034:	e758      	b.n	800bee8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c036:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c038:	f000 f8a4 	bl	800c184 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c03c:	f000 fc7a 	bl	800c934 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c040:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c042:	f000 f8f1 	bl	800c228 <prvIsQueueEmpty>
 800c046:	4603      	mov	r3, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	f43f af4d 	beq.w	800bee8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c050:	2b00      	cmp	r3, #0
 800c052:	d00d      	beq.n	800c070 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c054:	f001 fb4e 	bl	800d6f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c058:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c05a:	f000 f811 	bl	800c080 <prvGetDisinheritPriorityAfterTimeout>
 800c05e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c066:	4618      	mov	r0, r3
 800c068:	f001 f90e 	bl	800d288 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c06c:	f001 fb72 	bl	800d754 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c070:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c072:	4618      	mov	r0, r3
 800c074:	3738      	adds	r7, #56	; 0x38
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	e000ed04 	.word	0xe000ed04

0800c080 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c080:	b480      	push	{r7}
 800c082:	b085      	sub	sp, #20
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d006      	beq.n	800c09e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f1c3 0307 	rsb	r3, r3, #7
 800c09a:	60fb      	str	r3, [r7, #12]
 800c09c:	e001      	b.n	800c0a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
	}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3714      	adds	r7, #20
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr

0800c0b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b086      	sub	sp, #24
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	60f8      	str	r0, [r7, #12]
 800c0b8:	60b9      	str	r1, [r7, #8]
 800c0ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d10d      	bne.n	800c0ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d14d      	bne.n	800c172 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	689b      	ldr	r3, [r3, #8]
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f001 f84e 	bl	800d17c <xTaskPriorityDisinherit>
 800c0e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	609a      	str	r2, [r3, #8]
 800c0e8:	e043      	b.n	800c172 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d119      	bne.n	800c124 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	6858      	ldr	r0, [r3, #4]
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	68b9      	ldr	r1, [r7, #8]
 800c0fc:	f001 fe2a 	bl	800dd54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	685a      	ldr	r2, [r3, #4]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c108:	441a      	add	r2, r3
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	685a      	ldr	r2, [r3, #4]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	689b      	ldr	r3, [r3, #8]
 800c116:	429a      	cmp	r2, r3
 800c118:	d32b      	bcc.n	800c172 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	605a      	str	r2, [r3, #4]
 800c122:	e026      	b.n	800c172 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	68d8      	ldr	r0, [r3, #12]
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c12c:	461a      	mov	r2, r3
 800c12e:	68b9      	ldr	r1, [r7, #8]
 800c130:	f001 fe10 	bl	800dd54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	68da      	ldr	r2, [r3, #12]
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c13c:	425b      	negs	r3, r3
 800c13e:	441a      	add	r2, r3
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	68da      	ldr	r2, [r3, #12]
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d207      	bcs.n	800c160 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	689a      	ldr	r2, [r3, #8]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c158:	425b      	negs	r3, r3
 800c15a:	441a      	add	r2, r3
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2b02      	cmp	r3, #2
 800c164:	d105      	bne.n	800c172 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d002      	beq.n	800c172 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	3b01      	subs	r3, #1
 800c170:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	1c5a      	adds	r2, r3, #1
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c17a:	697b      	ldr	r3, [r7, #20]
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3718      	adds	r7, #24
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b084      	sub	sp, #16
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c18c:	f001 fab2 	bl	800d6f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c196:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c198:	e011      	b.n	800c1be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d012      	beq.n	800c1c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	3324      	adds	r3, #36	; 0x24
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f000 fd98 	bl	800ccdc <xTaskRemoveFromEventList>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d001      	beq.n	800c1b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c1b2:	f000 fe6d 	bl	800ce90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c1b6:	7bfb      	ldrb	r3, [r7, #15]
 800c1b8:	3b01      	subs	r3, #1
 800c1ba:	b2db      	uxtb	r3, r3
 800c1bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c1be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	dce9      	bgt.n	800c19a <prvUnlockQueue+0x16>
 800c1c6:	e000      	b.n	800c1ca <prvUnlockQueue+0x46>
					break;
 800c1c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	22ff      	movs	r2, #255	; 0xff
 800c1ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c1d2:	f001 fabf 	bl	800d754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c1d6:	f001 fa8d 	bl	800d6f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c1e2:	e011      	b.n	800c208 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	691b      	ldr	r3, [r3, #16]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d012      	beq.n	800c212 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	3310      	adds	r3, #16
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f000 fd73 	bl	800ccdc <xTaskRemoveFromEventList>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d001      	beq.n	800c200 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c1fc:	f000 fe48 	bl	800ce90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c200:	7bbb      	ldrb	r3, [r7, #14]
 800c202:	3b01      	subs	r3, #1
 800c204:	b2db      	uxtb	r3, r3
 800c206:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c208:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	dce9      	bgt.n	800c1e4 <prvUnlockQueue+0x60>
 800c210:	e000      	b.n	800c214 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c212:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	22ff      	movs	r2, #255	; 0xff
 800c218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c21c:	f001 fa9a 	bl	800d754 <vPortExitCritical>
}
 800c220:	bf00      	nop
 800c222:	3710      	adds	r7, #16
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c230:	f001 fa60 	bl	800d6f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d102      	bne.n	800c242 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c23c:	2301      	movs	r3, #1
 800c23e:	60fb      	str	r3, [r7, #12]
 800c240:	e001      	b.n	800c246 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c242:	2300      	movs	r3, #0
 800c244:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c246:	f001 fa85 	bl	800d754 <vPortExitCritical>

	return xReturn;
 800c24a:	68fb      	ldr	r3, [r7, #12]
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3710      	adds	r7, #16
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c25c:	f001 fa4a 	bl	800d6f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c268:	429a      	cmp	r2, r3
 800c26a:	d102      	bne.n	800c272 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c26c:	2301      	movs	r3, #1
 800c26e:	60fb      	str	r3, [r7, #12]
 800c270:	e001      	b.n	800c276 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c272:	2300      	movs	r3, #0
 800c274:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c276:	f001 fa6d 	bl	800d754 <vPortExitCritical>

	return xReturn;
 800c27a:	68fb      	ldr	r3, [r7, #12]
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3710      	adds	r7, #16
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c284:	b580      	push	{r7, lr}
 800c286:	b08e      	sub	sp, #56	; 0x38
 800c288:	af04      	add	r7, sp, #16
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	607a      	str	r2, [r7, #4]
 800c290:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c294:	2b00      	cmp	r3, #0
 800c296:	d10a      	bne.n	800c2ae <xTaskCreateStatic+0x2a>
	__asm volatile
 800c298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29c:	f383 8811 	msr	BASEPRI, r3
 800c2a0:	f3bf 8f6f 	isb	sy
 800c2a4:	f3bf 8f4f 	dsb	sy
 800c2a8:	623b      	str	r3, [r7, #32]
}
 800c2aa:	bf00      	nop
 800c2ac:	e7fe      	b.n	800c2ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d10a      	bne.n	800c2ca <xTaskCreateStatic+0x46>
	__asm volatile
 800c2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b8:	f383 8811 	msr	BASEPRI, r3
 800c2bc:	f3bf 8f6f 	isb	sy
 800c2c0:	f3bf 8f4f 	dsb	sy
 800c2c4:	61fb      	str	r3, [r7, #28]
}
 800c2c6:	bf00      	nop
 800c2c8:	e7fe      	b.n	800c2c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c2ca:	2354      	movs	r3, #84	; 0x54
 800c2cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	2b54      	cmp	r3, #84	; 0x54
 800c2d2:	d00a      	beq.n	800c2ea <xTaskCreateStatic+0x66>
	__asm volatile
 800c2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d8:	f383 8811 	msr	BASEPRI, r3
 800c2dc:	f3bf 8f6f 	isb	sy
 800c2e0:	f3bf 8f4f 	dsb	sy
 800c2e4:	61bb      	str	r3, [r7, #24]
}
 800c2e6:	bf00      	nop
 800c2e8:	e7fe      	b.n	800c2e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c2ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d01e      	beq.n	800c330 <xTaskCreateStatic+0xac>
 800c2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d01b      	beq.n	800c330 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c300:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c304:	2202      	movs	r2, #2
 800c306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c30a:	2300      	movs	r3, #0
 800c30c:	9303      	str	r3, [sp, #12]
 800c30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c310:	9302      	str	r3, [sp, #8]
 800c312:	f107 0314 	add.w	r3, r7, #20
 800c316:	9301      	str	r3, [sp, #4]
 800c318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31a:	9300      	str	r3, [sp, #0]
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	68b9      	ldr	r1, [r7, #8]
 800c322:	68f8      	ldr	r0, [r7, #12]
 800c324:	f000 f850 	bl	800c3c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c328:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c32a:	f000 f8d5 	bl	800c4d8 <prvAddNewTaskToReadyList>
 800c32e:	e001      	b.n	800c334 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c330:	2300      	movs	r3, #0
 800c332:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c334:	697b      	ldr	r3, [r7, #20]
	}
 800c336:	4618      	mov	r0, r3
 800c338:	3728      	adds	r7, #40	; 0x28
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}

0800c33e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c33e:	b580      	push	{r7, lr}
 800c340:	b08c      	sub	sp, #48	; 0x30
 800c342:	af04      	add	r7, sp, #16
 800c344:	60f8      	str	r0, [r7, #12]
 800c346:	60b9      	str	r1, [r7, #8]
 800c348:	603b      	str	r3, [r7, #0]
 800c34a:	4613      	mov	r3, r2
 800c34c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c34e:	88fb      	ldrh	r3, [r7, #6]
 800c350:	009b      	lsls	r3, r3, #2
 800c352:	4618      	mov	r0, r3
 800c354:	f001 faf0 	bl	800d938 <pvPortMalloc>
 800c358:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d00e      	beq.n	800c37e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c360:	2054      	movs	r0, #84	; 0x54
 800c362:	f001 fae9 	bl	800d938 <pvPortMalloc>
 800c366:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c368:	69fb      	ldr	r3, [r7, #28]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d003      	beq.n	800c376 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c36e:	69fb      	ldr	r3, [r7, #28]
 800c370:	697a      	ldr	r2, [r7, #20]
 800c372:	631a      	str	r2, [r3, #48]	; 0x30
 800c374:	e005      	b.n	800c382 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c376:	6978      	ldr	r0, [r7, #20]
 800c378:	f001 fbaa 	bl	800dad0 <vPortFree>
 800c37c:	e001      	b.n	800c382 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c37e:	2300      	movs	r3, #0
 800c380:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d017      	beq.n	800c3b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c388:	69fb      	ldr	r3, [r7, #28]
 800c38a:	2200      	movs	r2, #0
 800c38c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c390:	88fa      	ldrh	r2, [r7, #6]
 800c392:	2300      	movs	r3, #0
 800c394:	9303      	str	r3, [sp, #12]
 800c396:	69fb      	ldr	r3, [r7, #28]
 800c398:	9302      	str	r3, [sp, #8]
 800c39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39c:	9301      	str	r3, [sp, #4]
 800c39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a0:	9300      	str	r3, [sp, #0]
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	68b9      	ldr	r1, [r7, #8]
 800c3a6:	68f8      	ldr	r0, [r7, #12]
 800c3a8:	f000 f80e 	bl	800c3c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c3ac:	69f8      	ldr	r0, [r7, #28]
 800c3ae:	f000 f893 	bl	800c4d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	61bb      	str	r3, [r7, #24]
 800c3b6:	e002      	b.n	800c3be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c3b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c3bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c3be:	69bb      	ldr	r3, [r7, #24]
	}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3720      	adds	r7, #32
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b088      	sub	sp, #32
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	60b9      	str	r1, [r7, #8]
 800c3d2:	607a      	str	r2, [r7, #4]
 800c3d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3da:	6879      	ldr	r1, [r7, #4]
 800c3dc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c3e0:	440b      	add	r3, r1
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	4413      	add	r3, r2
 800c3e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c3e8:	69bb      	ldr	r3, [r7, #24]
 800c3ea:	f023 0307 	bic.w	r3, r3, #7
 800c3ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c3f0:	69bb      	ldr	r3, [r7, #24]
 800c3f2:	f003 0307 	and.w	r3, r3, #7
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00a      	beq.n	800c410 <prvInitialiseNewTask+0x48>
	__asm volatile
 800c3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3fe:	f383 8811 	msr	BASEPRI, r3
 800c402:	f3bf 8f6f 	isb	sy
 800c406:	f3bf 8f4f 	dsb	sy
 800c40a:	617b      	str	r3, [r7, #20]
}
 800c40c:	bf00      	nop
 800c40e:	e7fe      	b.n	800c40e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d01f      	beq.n	800c456 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c416:	2300      	movs	r3, #0
 800c418:	61fb      	str	r3, [r7, #28]
 800c41a:	e012      	b.n	800c442 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c41c:	68ba      	ldr	r2, [r7, #8]
 800c41e:	69fb      	ldr	r3, [r7, #28]
 800c420:	4413      	add	r3, r2
 800c422:	7819      	ldrb	r1, [r3, #0]
 800c424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c426:	69fb      	ldr	r3, [r7, #28]
 800c428:	4413      	add	r3, r2
 800c42a:	3334      	adds	r3, #52	; 0x34
 800c42c:	460a      	mov	r2, r1
 800c42e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c430:	68ba      	ldr	r2, [r7, #8]
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	4413      	add	r3, r2
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d006      	beq.n	800c44a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	3301      	adds	r3, #1
 800c440:	61fb      	str	r3, [r7, #28]
 800c442:	69fb      	ldr	r3, [r7, #28]
 800c444:	2b0f      	cmp	r3, #15
 800c446:	d9e9      	bls.n	800c41c <prvInitialiseNewTask+0x54>
 800c448:	e000      	b.n	800c44c <prvInitialiseNewTask+0x84>
			{
				break;
 800c44a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44e:	2200      	movs	r2, #0
 800c450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c454:	e003      	b.n	800c45e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c458:	2200      	movs	r2, #0
 800c45a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c460:	2b06      	cmp	r3, #6
 800c462:	d901      	bls.n	800c468 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c464:	2306      	movs	r3, #6
 800c466:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c46c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c472:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c476:	2200      	movs	r2, #0
 800c478:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47c:	3304      	adds	r3, #4
 800c47e:	4618      	mov	r0, r3
 800c480:	f7ff f94b 	bl	800b71a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c486:	3318      	adds	r3, #24
 800c488:	4618      	mov	r0, r3
 800c48a:	f7ff f946 	bl	800b71a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c492:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c496:	f1c3 0207 	rsb	r2, r3, #7
 800c49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c4b2:	683a      	ldr	r2, [r7, #0]
 800c4b4:	68f9      	ldr	r1, [r7, #12]
 800c4b6:	69b8      	ldr	r0, [r7, #24]
 800c4b8:	f000 ffee 	bl	800d498 <pxPortInitialiseStack>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d002      	beq.n	800c4ce <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4ce:	bf00      	nop
 800c4d0:	3720      	adds	r7, #32
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
	...

0800c4d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c4e0:	f001 f908 	bl	800d6f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c4e4:	4b2a      	ldr	r3, [pc, #168]	; (800c590 <prvAddNewTaskToReadyList+0xb8>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	4a29      	ldr	r2, [pc, #164]	; (800c590 <prvAddNewTaskToReadyList+0xb8>)
 800c4ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c4ee:	4b29      	ldr	r3, [pc, #164]	; (800c594 <prvAddNewTaskToReadyList+0xbc>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d109      	bne.n	800c50a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c4f6:	4a27      	ldr	r2, [pc, #156]	; (800c594 <prvAddNewTaskToReadyList+0xbc>)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c4fc:	4b24      	ldr	r3, [pc, #144]	; (800c590 <prvAddNewTaskToReadyList+0xb8>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2b01      	cmp	r3, #1
 800c502:	d110      	bne.n	800c526 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c504:	f000 fce8 	bl	800ced8 <prvInitialiseTaskLists>
 800c508:	e00d      	b.n	800c526 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c50a:	4b23      	ldr	r3, [pc, #140]	; (800c598 <prvAddNewTaskToReadyList+0xc0>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d109      	bne.n	800c526 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c512:	4b20      	ldr	r3, [pc, #128]	; (800c594 <prvAddNewTaskToReadyList+0xbc>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d802      	bhi.n	800c526 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c520:	4a1c      	ldr	r2, [pc, #112]	; (800c594 <prvAddNewTaskToReadyList+0xbc>)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c526:	4b1d      	ldr	r3, [pc, #116]	; (800c59c <prvAddNewTaskToReadyList+0xc4>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	3301      	adds	r3, #1
 800c52c:	4a1b      	ldr	r2, [pc, #108]	; (800c59c <prvAddNewTaskToReadyList+0xc4>)
 800c52e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c534:	2201      	movs	r2, #1
 800c536:	409a      	lsls	r2, r3
 800c538:	4b19      	ldr	r3, [pc, #100]	; (800c5a0 <prvAddNewTaskToReadyList+0xc8>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4313      	orrs	r3, r2
 800c53e:	4a18      	ldr	r2, [pc, #96]	; (800c5a0 <prvAddNewTaskToReadyList+0xc8>)
 800c540:	6013      	str	r3, [r2, #0]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c546:	4613      	mov	r3, r2
 800c548:	009b      	lsls	r3, r3, #2
 800c54a:	4413      	add	r3, r2
 800c54c:	009b      	lsls	r3, r3, #2
 800c54e:	4a15      	ldr	r2, [pc, #84]	; (800c5a4 <prvAddNewTaskToReadyList+0xcc>)
 800c550:	441a      	add	r2, r3
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	3304      	adds	r3, #4
 800c556:	4619      	mov	r1, r3
 800c558:	4610      	mov	r0, r2
 800c55a:	f7ff f8eb 	bl	800b734 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c55e:	f001 f8f9 	bl	800d754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c562:	4b0d      	ldr	r3, [pc, #52]	; (800c598 <prvAddNewTaskToReadyList+0xc0>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00e      	beq.n	800c588 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c56a:	4b0a      	ldr	r3, [pc, #40]	; (800c594 <prvAddNewTaskToReadyList+0xbc>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c574:	429a      	cmp	r2, r3
 800c576:	d207      	bcs.n	800c588 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c578:	4b0b      	ldr	r3, [pc, #44]	; (800c5a8 <prvAddNewTaskToReadyList+0xd0>)
 800c57a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c57e:	601a      	str	r2, [r3, #0]
 800c580:	f3bf 8f4f 	dsb	sy
 800c584:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c588:	bf00      	nop
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	20000384 	.word	0x20000384
 800c594:	20000284 	.word	0x20000284
 800c598:	20000390 	.word	0x20000390
 800c59c:	200003a0 	.word	0x200003a0
 800c5a0:	2000038c 	.word	0x2000038c
 800c5a4:	20000288 	.word	0x20000288
 800c5a8:	e000ed04 	.word	0xe000ed04

0800c5ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d017      	beq.n	800c5ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c5be:	4b13      	ldr	r3, [pc, #76]	; (800c60c <vTaskDelay+0x60>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d00a      	beq.n	800c5dc <vTaskDelay+0x30>
	__asm volatile
 800c5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ca:	f383 8811 	msr	BASEPRI, r3
 800c5ce:	f3bf 8f6f 	isb	sy
 800c5d2:	f3bf 8f4f 	dsb	sy
 800c5d6:	60bb      	str	r3, [r7, #8]
}
 800c5d8:	bf00      	nop
 800c5da:	e7fe      	b.n	800c5da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c5dc:	f000 f99c 	bl	800c918 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c5e0:	2100      	movs	r1, #0
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 fef2 	bl	800d3cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c5e8:	f000 f9a4 	bl	800c934 <xTaskResumeAll>
 800c5ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d107      	bne.n	800c604 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c5f4:	4b06      	ldr	r3, [pc, #24]	; (800c610 <vTaskDelay+0x64>)
 800c5f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5fa:	601a      	str	r2, [r3, #0]
 800c5fc:	f3bf 8f4f 	dsb	sy
 800c600:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c604:	bf00      	nop
 800c606:	3710      	adds	r7, #16
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	200003ac 	.word	0x200003ac
 800c610:	e000ed04 	.word	0xe000ed04

0800c614 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c61c:	f001 f86a 	bl	800d6f4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d102      	bne.n	800c62c <vTaskSuspend+0x18>
 800c626:	4b3c      	ldr	r3, [pc, #240]	; (800c718 <vTaskSuspend+0x104>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	e000      	b.n	800c62e <vTaskSuspend+0x1a>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	3304      	adds	r3, #4
 800c634:	4618      	mov	r0, r3
 800c636:	f7ff f8da 	bl	800b7ee <uxListRemove>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d115      	bne.n	800c66c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c644:	4935      	ldr	r1, [pc, #212]	; (800c71c <vTaskSuspend+0x108>)
 800c646:	4613      	mov	r3, r2
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	4413      	add	r3, r2
 800c64c:	009b      	lsls	r3, r3, #2
 800c64e:	440b      	add	r3, r1
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d10a      	bne.n	800c66c <vTaskSuspend+0x58>
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c65a:	2201      	movs	r2, #1
 800c65c:	fa02 f303 	lsl.w	r3, r2, r3
 800c660:	43da      	mvns	r2, r3
 800c662:	4b2f      	ldr	r3, [pc, #188]	; (800c720 <vTaskSuspend+0x10c>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4013      	ands	r3, r2
 800c668:	4a2d      	ldr	r2, [pc, #180]	; (800c720 <vTaskSuspend+0x10c>)
 800c66a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c670:	2b00      	cmp	r3, #0
 800c672:	d004      	beq.n	800c67e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	3318      	adds	r3, #24
 800c678:	4618      	mov	r0, r3
 800c67a:	f7ff f8b8 	bl	800b7ee <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	3304      	adds	r3, #4
 800c682:	4619      	mov	r1, r3
 800c684:	4827      	ldr	r0, [pc, #156]	; (800c724 <vTaskSuspend+0x110>)
 800c686:	f7ff f855 	bl	800b734 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c690:	b2db      	uxtb	r3, r3
 800c692:	2b01      	cmp	r3, #1
 800c694:	d103      	bne.n	800c69e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2200      	movs	r2, #0
 800c69a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c69e:	f001 f859 	bl	800d754 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c6a2:	4b21      	ldr	r3, [pc, #132]	; (800c728 <vTaskSuspend+0x114>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d005      	beq.n	800c6b6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c6aa:	f001 f823 	bl	800d6f4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c6ae:	f000 fcb1 	bl	800d014 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c6b2:	f001 f84f 	bl	800d754 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c6b6:	4b18      	ldr	r3, [pc, #96]	; (800c718 <vTaskSuspend+0x104>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d127      	bne.n	800c710 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800c6c0:	4b19      	ldr	r3, [pc, #100]	; (800c728 <vTaskSuspend+0x114>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d017      	beq.n	800c6f8 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c6c8:	4b18      	ldr	r3, [pc, #96]	; (800c72c <vTaskSuspend+0x118>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d00a      	beq.n	800c6e6 <vTaskSuspend+0xd2>
	__asm volatile
 800c6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d4:	f383 8811 	msr	BASEPRI, r3
 800c6d8:	f3bf 8f6f 	isb	sy
 800c6dc:	f3bf 8f4f 	dsb	sy
 800c6e0:	60bb      	str	r3, [r7, #8]
}
 800c6e2:	bf00      	nop
 800c6e4:	e7fe      	b.n	800c6e4 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800c6e6:	4b12      	ldr	r3, [pc, #72]	; (800c730 <vTaskSuspend+0x11c>)
 800c6e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6ec:	601a      	str	r2, [r3, #0]
 800c6ee:	f3bf 8f4f 	dsb	sy
 800c6f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c6f6:	e00b      	b.n	800c710 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800c6f8:	4b0a      	ldr	r3, [pc, #40]	; (800c724 <vTaskSuspend+0x110>)
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	4b0d      	ldr	r3, [pc, #52]	; (800c734 <vTaskSuspend+0x120>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	429a      	cmp	r2, r3
 800c702:	d103      	bne.n	800c70c <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800c704:	4b04      	ldr	r3, [pc, #16]	; (800c718 <vTaskSuspend+0x104>)
 800c706:	2200      	movs	r2, #0
 800c708:	601a      	str	r2, [r3, #0]
	}
 800c70a:	e001      	b.n	800c710 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800c70c:	f000 fa66 	bl	800cbdc <vTaskSwitchContext>
	}
 800c710:	bf00      	nop
 800c712:	3710      	adds	r7, #16
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	20000284 	.word	0x20000284
 800c71c:	20000288 	.word	0x20000288
 800c720:	2000038c 	.word	0x2000038c
 800c724:	20000370 	.word	0x20000370
 800c728:	20000390 	.word	0x20000390
 800c72c:	200003ac 	.word	0x200003ac
 800c730:	e000ed04 	.word	0xe000ed04
 800c734:	20000384 	.word	0x20000384

0800c738 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800c738:	b480      	push	{r7}
 800c73a:	b087      	sub	sp, #28
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800c740:	2300      	movs	r3, #0
 800c742:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d10a      	bne.n	800c764 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800c74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	60fb      	str	r3, [r7, #12]
}
 800c760:	bf00      	nop
 800c762:	e7fe      	b.n	800c762 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	695b      	ldr	r3, [r3, #20]
 800c768:	4a0a      	ldr	r2, [pc, #40]	; (800c794 <prvTaskIsTaskSuspended+0x5c>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d10a      	bne.n	800c784 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c772:	4a09      	ldr	r2, [pc, #36]	; (800c798 <prvTaskIsTaskSuspended+0x60>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d005      	beq.n	800c784 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d101      	bne.n	800c784 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800c780:	2301      	movs	r3, #1
 800c782:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c784:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800c786:	4618      	mov	r0, r3
 800c788:	371c      	adds	r7, #28
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr
 800c792:	bf00      	nop
 800c794:	20000370 	.word	0x20000370
 800c798:	20000344 	.word	0x20000344

0800c79c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b084      	sub	sp, #16
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d10a      	bne.n	800c7c4 <vTaskResume+0x28>
	__asm volatile
 800c7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b2:	f383 8811 	msr	BASEPRI, r3
 800c7b6:	f3bf 8f6f 	isb	sy
 800c7ba:	f3bf 8f4f 	dsb	sy
 800c7be:	60bb      	str	r3, [r7, #8]
}
 800c7c0:	bf00      	nop
 800c7c2:	e7fe      	b.n	800c7c2 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800c7c4:	4b20      	ldr	r3, [pc, #128]	; (800c848 <vTaskResume+0xac>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	68fa      	ldr	r2, [r7, #12]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d037      	beq.n	800c83e <vTaskResume+0xa2>
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d034      	beq.n	800c83e <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800c7d4:	f000 ff8e 	bl	800d6f4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800c7d8:	68f8      	ldr	r0, [r7, #12]
 800c7da:	f7ff ffad 	bl	800c738 <prvTaskIsTaskSuspended>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d02a      	beq.n	800c83a <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	3304      	adds	r3, #4
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f7ff f800 	bl	800b7ee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	409a      	lsls	r2, r3
 800c7f6:	4b15      	ldr	r3, [pc, #84]	; (800c84c <vTaskResume+0xb0>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	4a13      	ldr	r2, [pc, #76]	; (800c84c <vTaskResume+0xb0>)
 800c7fe:	6013      	str	r3, [r2, #0]
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c804:	4613      	mov	r3, r2
 800c806:	009b      	lsls	r3, r3, #2
 800c808:	4413      	add	r3, r2
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	4a10      	ldr	r2, [pc, #64]	; (800c850 <vTaskResume+0xb4>)
 800c80e:	441a      	add	r2, r3
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	3304      	adds	r3, #4
 800c814:	4619      	mov	r1, r3
 800c816:	4610      	mov	r0, r2
 800c818:	f7fe ff8c 	bl	800b734 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c820:	4b09      	ldr	r3, [pc, #36]	; (800c848 <vTaskResume+0xac>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c826:	429a      	cmp	r2, r3
 800c828:	d307      	bcc.n	800c83a <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800c82a:	4b0a      	ldr	r3, [pc, #40]	; (800c854 <vTaskResume+0xb8>)
 800c82c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c830:	601a      	str	r2, [r3, #0]
 800c832:	f3bf 8f4f 	dsb	sy
 800c836:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800c83a:	f000 ff8b 	bl	800d754 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c83e:	bf00      	nop
 800c840:	3710      	adds	r7, #16
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	20000284 	.word	0x20000284
 800c84c:	2000038c 	.word	0x2000038c
 800c850:	20000288 	.word	0x20000288
 800c854:	e000ed04 	.word	0xe000ed04

0800c858 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b08a      	sub	sp, #40	; 0x28
 800c85c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c85e:	2300      	movs	r3, #0
 800c860:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c862:	2300      	movs	r3, #0
 800c864:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c866:	463a      	mov	r2, r7
 800c868:	1d39      	adds	r1, r7, #4
 800c86a:	f107 0308 	add.w	r3, r7, #8
 800c86e:	4618      	mov	r0, r3
 800c870:	f7f4 fda4 	bl	80013bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c874:	6839      	ldr	r1, [r7, #0]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	68ba      	ldr	r2, [r7, #8]
 800c87a:	9202      	str	r2, [sp, #8]
 800c87c:	9301      	str	r3, [sp, #4]
 800c87e:	2300      	movs	r3, #0
 800c880:	9300      	str	r3, [sp, #0]
 800c882:	2300      	movs	r3, #0
 800c884:	460a      	mov	r2, r1
 800c886:	491e      	ldr	r1, [pc, #120]	; (800c900 <vTaskStartScheduler+0xa8>)
 800c888:	481e      	ldr	r0, [pc, #120]	; (800c904 <vTaskStartScheduler+0xac>)
 800c88a:	f7ff fcfb 	bl	800c284 <xTaskCreateStatic>
 800c88e:	4603      	mov	r3, r0
 800c890:	4a1d      	ldr	r2, [pc, #116]	; (800c908 <vTaskStartScheduler+0xb0>)
 800c892:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c894:	4b1c      	ldr	r3, [pc, #112]	; (800c908 <vTaskStartScheduler+0xb0>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d002      	beq.n	800c8a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c89c:	2301      	movs	r3, #1
 800c89e:	617b      	str	r3, [r7, #20]
 800c8a0:	e001      	b.n	800c8a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d116      	bne.n	800c8da <vTaskStartScheduler+0x82>
	__asm volatile
 800c8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b0:	f383 8811 	msr	BASEPRI, r3
 800c8b4:	f3bf 8f6f 	isb	sy
 800c8b8:	f3bf 8f4f 	dsb	sy
 800c8bc:	613b      	str	r3, [r7, #16]
}
 800c8be:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c8c0:	4b12      	ldr	r3, [pc, #72]	; (800c90c <vTaskStartScheduler+0xb4>)
 800c8c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c8c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c8c8:	4b11      	ldr	r3, [pc, #68]	; (800c910 <vTaskStartScheduler+0xb8>)
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c8ce:	4b11      	ldr	r3, [pc, #68]	; (800c914 <vTaskStartScheduler+0xbc>)
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c8d4:	f000 fe6c 	bl	800d5b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c8d8:	e00e      	b.n	800c8f8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8e0:	d10a      	bne.n	800c8f8 <vTaskStartScheduler+0xa0>
	__asm volatile
 800c8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e6:	f383 8811 	msr	BASEPRI, r3
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	60fb      	str	r3, [r7, #12]
}
 800c8f4:	bf00      	nop
 800c8f6:	e7fe      	b.n	800c8f6 <vTaskStartScheduler+0x9e>
}
 800c8f8:	bf00      	nop
 800c8fa:	3718      	adds	r7, #24
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}
 800c900:	0800de44 	.word	0x0800de44
 800c904:	0800cea9 	.word	0x0800cea9
 800c908:	200003a8 	.word	0x200003a8
 800c90c:	200003a4 	.word	0x200003a4
 800c910:	20000390 	.word	0x20000390
 800c914:	20000388 	.word	0x20000388

0800c918 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c918:	b480      	push	{r7}
 800c91a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c91c:	4b04      	ldr	r3, [pc, #16]	; (800c930 <vTaskSuspendAll+0x18>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	3301      	adds	r3, #1
 800c922:	4a03      	ldr	r2, [pc, #12]	; (800c930 <vTaskSuspendAll+0x18>)
 800c924:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c926:	bf00      	nop
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr
 800c930:	200003ac 	.word	0x200003ac

0800c934 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c93a:	2300      	movs	r3, #0
 800c93c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c93e:	2300      	movs	r3, #0
 800c940:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c942:	4b41      	ldr	r3, [pc, #260]	; (800ca48 <xTaskResumeAll+0x114>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d10a      	bne.n	800c960 <xTaskResumeAll+0x2c>
	__asm volatile
 800c94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c94e:	f383 8811 	msr	BASEPRI, r3
 800c952:	f3bf 8f6f 	isb	sy
 800c956:	f3bf 8f4f 	dsb	sy
 800c95a:	603b      	str	r3, [r7, #0]
}
 800c95c:	bf00      	nop
 800c95e:	e7fe      	b.n	800c95e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c960:	f000 fec8 	bl	800d6f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c964:	4b38      	ldr	r3, [pc, #224]	; (800ca48 <xTaskResumeAll+0x114>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	3b01      	subs	r3, #1
 800c96a:	4a37      	ldr	r2, [pc, #220]	; (800ca48 <xTaskResumeAll+0x114>)
 800c96c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c96e:	4b36      	ldr	r3, [pc, #216]	; (800ca48 <xTaskResumeAll+0x114>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d161      	bne.n	800ca3a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c976:	4b35      	ldr	r3, [pc, #212]	; (800ca4c <xTaskResumeAll+0x118>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d05d      	beq.n	800ca3a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c97e:	e02e      	b.n	800c9de <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c980:	4b33      	ldr	r3, [pc, #204]	; (800ca50 <xTaskResumeAll+0x11c>)
 800c982:	68db      	ldr	r3, [r3, #12]
 800c984:	68db      	ldr	r3, [r3, #12]
 800c986:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	3318      	adds	r3, #24
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7fe ff2e 	bl	800b7ee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	3304      	adds	r3, #4
 800c996:	4618      	mov	r0, r3
 800c998:	f7fe ff29 	bl	800b7ee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9a0:	2201      	movs	r2, #1
 800c9a2:	409a      	lsls	r2, r3
 800c9a4:	4b2b      	ldr	r3, [pc, #172]	; (800ca54 <xTaskResumeAll+0x120>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	4a2a      	ldr	r2, [pc, #168]	; (800ca54 <xTaskResumeAll+0x120>)
 800c9ac:	6013      	str	r3, [r2, #0]
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9b2:	4613      	mov	r3, r2
 800c9b4:	009b      	lsls	r3, r3, #2
 800c9b6:	4413      	add	r3, r2
 800c9b8:	009b      	lsls	r3, r3, #2
 800c9ba:	4a27      	ldr	r2, [pc, #156]	; (800ca58 <xTaskResumeAll+0x124>)
 800c9bc:	441a      	add	r2, r3
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	3304      	adds	r3, #4
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	4610      	mov	r0, r2
 800c9c6:	f7fe feb5 	bl	800b734 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9ce:	4b23      	ldr	r3, [pc, #140]	; (800ca5c <xTaskResumeAll+0x128>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d302      	bcc.n	800c9de <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c9d8:	4b21      	ldr	r3, [pc, #132]	; (800ca60 <xTaskResumeAll+0x12c>)
 800c9da:	2201      	movs	r2, #1
 800c9dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c9de:	4b1c      	ldr	r3, [pc, #112]	; (800ca50 <xTaskResumeAll+0x11c>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d1cc      	bne.n	800c980 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d001      	beq.n	800c9f0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c9ec:	f000 fb12 	bl	800d014 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c9f0:	4b1c      	ldr	r3, [pc, #112]	; (800ca64 <xTaskResumeAll+0x130>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d010      	beq.n	800ca1e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c9fc:	f000 f836 	bl	800ca6c <xTaskIncrementTick>
 800ca00:	4603      	mov	r3, r0
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d002      	beq.n	800ca0c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ca06:	4b16      	ldr	r3, [pc, #88]	; (800ca60 <xTaskResumeAll+0x12c>)
 800ca08:	2201      	movs	r2, #1
 800ca0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	3b01      	subs	r3, #1
 800ca10:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d1f1      	bne.n	800c9fc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800ca18:	4b12      	ldr	r3, [pc, #72]	; (800ca64 <xTaskResumeAll+0x130>)
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ca1e:	4b10      	ldr	r3, [pc, #64]	; (800ca60 <xTaskResumeAll+0x12c>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d009      	beq.n	800ca3a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ca26:	2301      	movs	r3, #1
 800ca28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ca2a:	4b0f      	ldr	r3, [pc, #60]	; (800ca68 <xTaskResumeAll+0x134>)
 800ca2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca30:	601a      	str	r2, [r3, #0]
 800ca32:	f3bf 8f4f 	dsb	sy
 800ca36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca3a:	f000 fe8b 	bl	800d754 <vPortExitCritical>

	return xAlreadyYielded;
 800ca3e:	68bb      	ldr	r3, [r7, #8]
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3710      	adds	r7, #16
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	200003ac 	.word	0x200003ac
 800ca4c:	20000384 	.word	0x20000384
 800ca50:	20000344 	.word	0x20000344
 800ca54:	2000038c 	.word	0x2000038c
 800ca58:	20000288 	.word	0x20000288
 800ca5c:	20000284 	.word	0x20000284
 800ca60:	20000398 	.word	0x20000398
 800ca64:	20000394 	.word	0x20000394
 800ca68:	e000ed04 	.word	0xe000ed04

0800ca6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b086      	sub	sp, #24
 800ca70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ca72:	2300      	movs	r3, #0
 800ca74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca76:	4b4e      	ldr	r3, [pc, #312]	; (800cbb0 <xTaskIncrementTick+0x144>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	f040 808e 	bne.w	800cb9c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ca80:	4b4c      	ldr	r3, [pc, #304]	; (800cbb4 <xTaskIncrementTick+0x148>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	3301      	adds	r3, #1
 800ca86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ca88:	4a4a      	ldr	r2, [pc, #296]	; (800cbb4 <xTaskIncrementTick+0x148>)
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d120      	bne.n	800cad6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ca94:	4b48      	ldr	r3, [pc, #288]	; (800cbb8 <xTaskIncrementTick+0x14c>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d00a      	beq.n	800cab4 <xTaskIncrementTick+0x48>
	__asm volatile
 800ca9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa2:	f383 8811 	msr	BASEPRI, r3
 800caa6:	f3bf 8f6f 	isb	sy
 800caaa:	f3bf 8f4f 	dsb	sy
 800caae:	603b      	str	r3, [r7, #0]
}
 800cab0:	bf00      	nop
 800cab2:	e7fe      	b.n	800cab2 <xTaskIncrementTick+0x46>
 800cab4:	4b40      	ldr	r3, [pc, #256]	; (800cbb8 <xTaskIncrementTick+0x14c>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	60fb      	str	r3, [r7, #12]
 800caba:	4b40      	ldr	r3, [pc, #256]	; (800cbbc <xTaskIncrementTick+0x150>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	4a3e      	ldr	r2, [pc, #248]	; (800cbb8 <xTaskIncrementTick+0x14c>)
 800cac0:	6013      	str	r3, [r2, #0]
 800cac2:	4a3e      	ldr	r2, [pc, #248]	; (800cbbc <xTaskIncrementTick+0x150>)
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	6013      	str	r3, [r2, #0]
 800cac8:	4b3d      	ldr	r3, [pc, #244]	; (800cbc0 <xTaskIncrementTick+0x154>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	3301      	adds	r3, #1
 800cace:	4a3c      	ldr	r2, [pc, #240]	; (800cbc0 <xTaskIncrementTick+0x154>)
 800cad0:	6013      	str	r3, [r2, #0]
 800cad2:	f000 fa9f 	bl	800d014 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cad6:	4b3b      	ldr	r3, [pc, #236]	; (800cbc4 <xTaskIncrementTick+0x158>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	693a      	ldr	r2, [r7, #16]
 800cadc:	429a      	cmp	r2, r3
 800cade:	d348      	bcc.n	800cb72 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cae0:	4b35      	ldr	r3, [pc, #212]	; (800cbb8 <xTaskIncrementTick+0x14c>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d104      	bne.n	800caf4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800caea:	4b36      	ldr	r3, [pc, #216]	; (800cbc4 <xTaskIncrementTick+0x158>)
 800caec:	f04f 32ff 	mov.w	r2, #4294967295
 800caf0:	601a      	str	r2, [r3, #0]
					break;
 800caf2:	e03e      	b.n	800cb72 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caf4:	4b30      	ldr	r3, [pc, #192]	; (800cbb8 <xTaskIncrementTick+0x14c>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	68db      	ldr	r3, [r3, #12]
 800cafa:	68db      	ldr	r3, [r3, #12]
 800cafc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cb04:	693a      	ldr	r2, [r7, #16]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d203      	bcs.n	800cb14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cb0c:	4a2d      	ldr	r2, [pc, #180]	; (800cbc4 <xTaskIncrementTick+0x158>)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cb12:	e02e      	b.n	800cb72 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	3304      	adds	r3, #4
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7fe fe68 	bl	800b7ee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d004      	beq.n	800cb30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	3318      	adds	r3, #24
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7fe fe5f 	bl	800b7ee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb34:	2201      	movs	r2, #1
 800cb36:	409a      	lsls	r2, r3
 800cb38:	4b23      	ldr	r3, [pc, #140]	; (800cbc8 <xTaskIncrementTick+0x15c>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	4a22      	ldr	r2, [pc, #136]	; (800cbc8 <xTaskIncrementTick+0x15c>)
 800cb40:	6013      	str	r3, [r2, #0]
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb46:	4613      	mov	r3, r2
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	4413      	add	r3, r2
 800cb4c:	009b      	lsls	r3, r3, #2
 800cb4e:	4a1f      	ldr	r2, [pc, #124]	; (800cbcc <xTaskIncrementTick+0x160>)
 800cb50:	441a      	add	r2, r3
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	3304      	adds	r3, #4
 800cb56:	4619      	mov	r1, r3
 800cb58:	4610      	mov	r0, r2
 800cb5a:	f7fe fdeb 	bl	800b734 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb62:	4b1b      	ldr	r3, [pc, #108]	; (800cbd0 <xTaskIncrementTick+0x164>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d3b9      	bcc.n	800cae0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb70:	e7b6      	b.n	800cae0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cb72:	4b17      	ldr	r3, [pc, #92]	; (800cbd0 <xTaskIncrementTick+0x164>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb78:	4914      	ldr	r1, [pc, #80]	; (800cbcc <xTaskIncrementTick+0x160>)
 800cb7a:	4613      	mov	r3, r2
 800cb7c:	009b      	lsls	r3, r3, #2
 800cb7e:	4413      	add	r3, r2
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	440b      	add	r3, r1
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	d901      	bls.n	800cb8e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cb8e:	4b11      	ldr	r3, [pc, #68]	; (800cbd4 <xTaskIncrementTick+0x168>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d007      	beq.n	800cba6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800cb96:	2301      	movs	r3, #1
 800cb98:	617b      	str	r3, [r7, #20]
 800cb9a:	e004      	b.n	800cba6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cb9c:	4b0e      	ldr	r3, [pc, #56]	; (800cbd8 <xTaskIncrementTick+0x16c>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	3301      	adds	r3, #1
 800cba2:	4a0d      	ldr	r2, [pc, #52]	; (800cbd8 <xTaskIncrementTick+0x16c>)
 800cba4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cba6:	697b      	ldr	r3, [r7, #20]
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3718      	adds	r7, #24
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}
 800cbb0:	200003ac 	.word	0x200003ac
 800cbb4:	20000388 	.word	0x20000388
 800cbb8:	2000033c 	.word	0x2000033c
 800cbbc:	20000340 	.word	0x20000340
 800cbc0:	2000039c 	.word	0x2000039c
 800cbc4:	200003a4 	.word	0x200003a4
 800cbc8:	2000038c 	.word	0x2000038c
 800cbcc:	20000288 	.word	0x20000288
 800cbd0:	20000284 	.word	0x20000284
 800cbd4:	20000398 	.word	0x20000398
 800cbd8:	20000394 	.word	0x20000394

0800cbdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b087      	sub	sp, #28
 800cbe0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cbe2:	4b27      	ldr	r3, [pc, #156]	; (800cc80 <vTaskSwitchContext+0xa4>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d003      	beq.n	800cbf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cbea:	4b26      	ldr	r3, [pc, #152]	; (800cc84 <vTaskSwitchContext+0xa8>)
 800cbec:	2201      	movs	r2, #1
 800cbee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cbf0:	e03f      	b.n	800cc72 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800cbf2:	4b24      	ldr	r3, [pc, #144]	; (800cc84 <vTaskSwitchContext+0xa8>)
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbf8:	4b23      	ldr	r3, [pc, #140]	; (800cc88 <vTaskSwitchContext+0xac>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	fab3 f383 	clz	r3, r3
 800cc04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cc06:	7afb      	ldrb	r3, [r7, #11]
 800cc08:	f1c3 031f 	rsb	r3, r3, #31
 800cc0c:	617b      	str	r3, [r7, #20]
 800cc0e:	491f      	ldr	r1, [pc, #124]	; (800cc8c <vTaskSwitchContext+0xb0>)
 800cc10:	697a      	ldr	r2, [r7, #20]
 800cc12:	4613      	mov	r3, r2
 800cc14:	009b      	lsls	r3, r3, #2
 800cc16:	4413      	add	r3, r2
 800cc18:	009b      	lsls	r3, r3, #2
 800cc1a:	440b      	add	r3, r1
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d10a      	bne.n	800cc38 <vTaskSwitchContext+0x5c>
	__asm volatile
 800cc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc26:	f383 8811 	msr	BASEPRI, r3
 800cc2a:	f3bf 8f6f 	isb	sy
 800cc2e:	f3bf 8f4f 	dsb	sy
 800cc32:	607b      	str	r3, [r7, #4]
}
 800cc34:	bf00      	nop
 800cc36:	e7fe      	b.n	800cc36 <vTaskSwitchContext+0x5a>
 800cc38:	697a      	ldr	r2, [r7, #20]
 800cc3a:	4613      	mov	r3, r2
 800cc3c:	009b      	lsls	r3, r3, #2
 800cc3e:	4413      	add	r3, r2
 800cc40:	009b      	lsls	r3, r3, #2
 800cc42:	4a12      	ldr	r2, [pc, #72]	; (800cc8c <vTaskSwitchContext+0xb0>)
 800cc44:	4413      	add	r3, r2
 800cc46:	613b      	str	r3, [r7, #16]
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	685a      	ldr	r2, [r3, #4]
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	605a      	str	r2, [r3, #4]
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	685a      	ldr	r2, [r3, #4]
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	3308      	adds	r3, #8
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d104      	bne.n	800cc68 <vTaskSwitchContext+0x8c>
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	685a      	ldr	r2, [r3, #4]
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	605a      	str	r2, [r3, #4]
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	4a08      	ldr	r2, [pc, #32]	; (800cc90 <vTaskSwitchContext+0xb4>)
 800cc70:	6013      	str	r3, [r2, #0]
}
 800cc72:	bf00      	nop
 800cc74:	371c      	adds	r7, #28
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop
 800cc80:	200003ac 	.word	0x200003ac
 800cc84:	20000398 	.word	0x20000398
 800cc88:	2000038c 	.word	0x2000038c
 800cc8c:	20000288 	.word	0x20000288
 800cc90:	20000284 	.word	0x20000284

0800cc94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d10a      	bne.n	800ccba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca8:	f383 8811 	msr	BASEPRI, r3
 800ccac:	f3bf 8f6f 	isb	sy
 800ccb0:	f3bf 8f4f 	dsb	sy
 800ccb4:	60fb      	str	r3, [r7, #12]
}
 800ccb6:	bf00      	nop
 800ccb8:	e7fe      	b.n	800ccb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ccba:	4b07      	ldr	r3, [pc, #28]	; (800ccd8 <vTaskPlaceOnEventList+0x44>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	3318      	adds	r3, #24
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f7fe fd5a 	bl	800b77c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ccc8:	2101      	movs	r1, #1
 800ccca:	6838      	ldr	r0, [r7, #0]
 800cccc:	f000 fb7e 	bl	800d3cc <prvAddCurrentTaskToDelayedList>
}
 800ccd0:	bf00      	nop
 800ccd2:	3710      	adds	r7, #16
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	20000284 	.word	0x20000284

0800ccdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b086      	sub	sp, #24
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	68db      	ldr	r3, [r3, #12]
 800cce8:	68db      	ldr	r3, [r3, #12]
 800ccea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d10a      	bne.n	800cd08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ccf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf6:	f383 8811 	msr	BASEPRI, r3
 800ccfa:	f3bf 8f6f 	isb	sy
 800ccfe:	f3bf 8f4f 	dsb	sy
 800cd02:	60fb      	str	r3, [r7, #12]
}
 800cd04:	bf00      	nop
 800cd06:	e7fe      	b.n	800cd06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	3318      	adds	r3, #24
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7fe fd6e 	bl	800b7ee <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd12:	4b1d      	ldr	r3, [pc, #116]	; (800cd88 <xTaskRemoveFromEventList+0xac>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d11c      	bne.n	800cd54 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	3304      	adds	r3, #4
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7fe fd65 	bl	800b7ee <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd28:	2201      	movs	r2, #1
 800cd2a:	409a      	lsls	r2, r3
 800cd2c:	4b17      	ldr	r3, [pc, #92]	; (800cd8c <xTaskRemoveFromEventList+0xb0>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4313      	orrs	r3, r2
 800cd32:	4a16      	ldr	r2, [pc, #88]	; (800cd8c <xTaskRemoveFromEventList+0xb0>)
 800cd34:	6013      	str	r3, [r2, #0]
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	4413      	add	r3, r2
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	4a13      	ldr	r2, [pc, #76]	; (800cd90 <xTaskRemoveFromEventList+0xb4>)
 800cd44:	441a      	add	r2, r3
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	3304      	adds	r3, #4
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	4610      	mov	r0, r2
 800cd4e:	f7fe fcf1 	bl	800b734 <vListInsertEnd>
 800cd52:	e005      	b.n	800cd60 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	3318      	adds	r3, #24
 800cd58:	4619      	mov	r1, r3
 800cd5a:	480e      	ldr	r0, [pc, #56]	; (800cd94 <xTaskRemoveFromEventList+0xb8>)
 800cd5c:	f7fe fcea 	bl	800b734 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd64:	4b0c      	ldr	r3, [pc, #48]	; (800cd98 <xTaskRemoveFromEventList+0xbc>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d905      	bls.n	800cd7a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cd72:	4b0a      	ldr	r3, [pc, #40]	; (800cd9c <xTaskRemoveFromEventList+0xc0>)
 800cd74:	2201      	movs	r2, #1
 800cd76:	601a      	str	r2, [r3, #0]
 800cd78:	e001      	b.n	800cd7e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cd7e:	697b      	ldr	r3, [r7, #20]
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3718      	adds	r7, #24
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}
 800cd88:	200003ac 	.word	0x200003ac
 800cd8c:	2000038c 	.word	0x2000038c
 800cd90:	20000288 	.word	0x20000288
 800cd94:	20000344 	.word	0x20000344
 800cd98:	20000284 	.word	0x20000284
 800cd9c:	20000398 	.word	0x20000398

0800cda0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cda0:	b480      	push	{r7}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cda8:	4b06      	ldr	r3, [pc, #24]	; (800cdc4 <vTaskInternalSetTimeOutState+0x24>)
 800cdaa:	681a      	ldr	r2, [r3, #0]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cdb0:	4b05      	ldr	r3, [pc, #20]	; (800cdc8 <vTaskInternalSetTimeOutState+0x28>)
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	605a      	str	r2, [r3, #4]
}
 800cdb8:	bf00      	nop
 800cdba:	370c      	adds	r7, #12
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc2:	4770      	bx	lr
 800cdc4:	2000039c 	.word	0x2000039c
 800cdc8:	20000388 	.word	0x20000388

0800cdcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b088      	sub	sp, #32
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d10a      	bne.n	800cdf2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde0:	f383 8811 	msr	BASEPRI, r3
 800cde4:	f3bf 8f6f 	isb	sy
 800cde8:	f3bf 8f4f 	dsb	sy
 800cdec:	613b      	str	r3, [r7, #16]
}
 800cdee:	bf00      	nop
 800cdf0:	e7fe      	b.n	800cdf0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d10a      	bne.n	800ce0e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cdf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdfc:	f383 8811 	msr	BASEPRI, r3
 800ce00:	f3bf 8f6f 	isb	sy
 800ce04:	f3bf 8f4f 	dsb	sy
 800ce08:	60fb      	str	r3, [r7, #12]
}
 800ce0a:	bf00      	nop
 800ce0c:	e7fe      	b.n	800ce0c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ce0e:	f000 fc71 	bl	800d6f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ce12:	4b1d      	ldr	r3, [pc, #116]	; (800ce88 <xTaskCheckForTimeOut+0xbc>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	69ba      	ldr	r2, [r7, #24]
 800ce1e:	1ad3      	subs	r3, r2, r3
 800ce20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce2a:	d102      	bne.n	800ce32 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	61fb      	str	r3, [r7, #28]
 800ce30:	e023      	b.n	800ce7a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	4b15      	ldr	r3, [pc, #84]	; (800ce8c <xTaskCheckForTimeOut+0xc0>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d007      	beq.n	800ce4e <xTaskCheckForTimeOut+0x82>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	685b      	ldr	r3, [r3, #4]
 800ce42:	69ba      	ldr	r2, [r7, #24]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d302      	bcc.n	800ce4e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ce48:	2301      	movs	r3, #1
 800ce4a:	61fb      	str	r3, [r7, #28]
 800ce4c:	e015      	b.n	800ce7a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	697a      	ldr	r2, [r7, #20]
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d20b      	bcs.n	800ce70 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	1ad2      	subs	r2, r2, r3
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f7ff ff9b 	bl	800cda0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	61fb      	str	r3, [r7, #28]
 800ce6e:	e004      	b.n	800ce7a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	2200      	movs	r2, #0
 800ce74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ce76:	2301      	movs	r3, #1
 800ce78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ce7a:	f000 fc6b 	bl	800d754 <vPortExitCritical>

	return xReturn;
 800ce7e:	69fb      	ldr	r3, [r7, #28]
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3720      	adds	r7, #32
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	20000388 	.word	0x20000388
 800ce8c:	2000039c 	.word	0x2000039c

0800ce90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ce90:	b480      	push	{r7}
 800ce92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ce94:	4b03      	ldr	r3, [pc, #12]	; (800cea4 <vTaskMissedYield+0x14>)
 800ce96:	2201      	movs	r2, #1
 800ce98:	601a      	str	r2, [r3, #0]
}
 800ce9a:	bf00      	nop
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr
 800cea4:	20000398 	.word	0x20000398

0800cea8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ceb0:	f000 f852 	bl	800cf58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ceb4:	4b06      	ldr	r3, [pc, #24]	; (800ced0 <prvIdleTask+0x28>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d9f9      	bls.n	800ceb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cebc:	4b05      	ldr	r3, [pc, #20]	; (800ced4 <prvIdleTask+0x2c>)
 800cebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cec2:	601a      	str	r2, [r3, #0]
 800cec4:	f3bf 8f4f 	dsb	sy
 800cec8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cecc:	e7f0      	b.n	800ceb0 <prvIdleTask+0x8>
 800cece:	bf00      	nop
 800ced0:	20000288 	.word	0x20000288
 800ced4:	e000ed04 	.word	0xe000ed04

0800ced8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b082      	sub	sp, #8
 800cedc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cede:	2300      	movs	r3, #0
 800cee0:	607b      	str	r3, [r7, #4]
 800cee2:	e00c      	b.n	800cefe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cee4:	687a      	ldr	r2, [r7, #4]
 800cee6:	4613      	mov	r3, r2
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	4413      	add	r3, r2
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	4a12      	ldr	r2, [pc, #72]	; (800cf38 <prvInitialiseTaskLists+0x60>)
 800cef0:	4413      	add	r3, r2
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7fe fbf1 	bl	800b6da <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	3301      	adds	r3, #1
 800cefc:	607b      	str	r3, [r7, #4]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2b06      	cmp	r3, #6
 800cf02:	d9ef      	bls.n	800cee4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cf04:	480d      	ldr	r0, [pc, #52]	; (800cf3c <prvInitialiseTaskLists+0x64>)
 800cf06:	f7fe fbe8 	bl	800b6da <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cf0a:	480d      	ldr	r0, [pc, #52]	; (800cf40 <prvInitialiseTaskLists+0x68>)
 800cf0c:	f7fe fbe5 	bl	800b6da <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cf10:	480c      	ldr	r0, [pc, #48]	; (800cf44 <prvInitialiseTaskLists+0x6c>)
 800cf12:	f7fe fbe2 	bl	800b6da <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cf16:	480c      	ldr	r0, [pc, #48]	; (800cf48 <prvInitialiseTaskLists+0x70>)
 800cf18:	f7fe fbdf 	bl	800b6da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cf1c:	480b      	ldr	r0, [pc, #44]	; (800cf4c <prvInitialiseTaskLists+0x74>)
 800cf1e:	f7fe fbdc 	bl	800b6da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cf22:	4b0b      	ldr	r3, [pc, #44]	; (800cf50 <prvInitialiseTaskLists+0x78>)
 800cf24:	4a05      	ldr	r2, [pc, #20]	; (800cf3c <prvInitialiseTaskLists+0x64>)
 800cf26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cf28:	4b0a      	ldr	r3, [pc, #40]	; (800cf54 <prvInitialiseTaskLists+0x7c>)
 800cf2a:	4a05      	ldr	r2, [pc, #20]	; (800cf40 <prvInitialiseTaskLists+0x68>)
 800cf2c:	601a      	str	r2, [r3, #0]
}
 800cf2e:	bf00      	nop
 800cf30:	3708      	adds	r7, #8
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	20000288 	.word	0x20000288
 800cf3c:	20000314 	.word	0x20000314
 800cf40:	20000328 	.word	0x20000328
 800cf44:	20000344 	.word	0x20000344
 800cf48:	20000358 	.word	0x20000358
 800cf4c:	20000370 	.word	0x20000370
 800cf50:	2000033c 	.word	0x2000033c
 800cf54:	20000340 	.word	0x20000340

0800cf58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b082      	sub	sp, #8
 800cf5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf5e:	e019      	b.n	800cf94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cf60:	f000 fbc8 	bl	800d6f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf64:	4b10      	ldr	r3, [pc, #64]	; (800cfa8 <prvCheckTasksWaitingTermination+0x50>)
 800cf66:	68db      	ldr	r3, [r3, #12]
 800cf68:	68db      	ldr	r3, [r3, #12]
 800cf6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	3304      	adds	r3, #4
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7fe fc3c 	bl	800b7ee <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cf76:	4b0d      	ldr	r3, [pc, #52]	; (800cfac <prvCheckTasksWaitingTermination+0x54>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	3b01      	subs	r3, #1
 800cf7c:	4a0b      	ldr	r2, [pc, #44]	; (800cfac <prvCheckTasksWaitingTermination+0x54>)
 800cf7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cf80:	4b0b      	ldr	r3, [pc, #44]	; (800cfb0 <prvCheckTasksWaitingTermination+0x58>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	3b01      	subs	r3, #1
 800cf86:	4a0a      	ldr	r2, [pc, #40]	; (800cfb0 <prvCheckTasksWaitingTermination+0x58>)
 800cf88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cf8a:	f000 fbe3 	bl	800d754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f000 f810 	bl	800cfb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf94:	4b06      	ldr	r3, [pc, #24]	; (800cfb0 <prvCheckTasksWaitingTermination+0x58>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d1e1      	bne.n	800cf60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cf9c:	bf00      	nop
 800cf9e:	bf00      	nop
 800cfa0:	3708      	adds	r7, #8
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	20000358 	.word	0x20000358
 800cfac:	20000384 	.word	0x20000384
 800cfb0:	2000036c 	.word	0x2000036c

0800cfb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d108      	bne.n	800cfd8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f000 fd80 	bl	800dad0 <vPortFree>
				vPortFree( pxTCB );
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f000 fd7d 	bl	800dad0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cfd6:	e018      	b.n	800d00a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cfde:	2b01      	cmp	r3, #1
 800cfe0:	d103      	bne.n	800cfea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 fd74 	bl	800dad0 <vPortFree>
	}
 800cfe8:	e00f      	b.n	800d00a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cff0:	2b02      	cmp	r3, #2
 800cff2:	d00a      	beq.n	800d00a <prvDeleteTCB+0x56>
	__asm volatile
 800cff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff8:	f383 8811 	msr	BASEPRI, r3
 800cffc:	f3bf 8f6f 	isb	sy
 800d000:	f3bf 8f4f 	dsb	sy
 800d004:	60fb      	str	r3, [r7, #12]
}
 800d006:	bf00      	nop
 800d008:	e7fe      	b.n	800d008 <prvDeleteTCB+0x54>
	}
 800d00a:	bf00      	nop
 800d00c:	3710      	adds	r7, #16
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
	...

0800d014 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d01a:	4b0c      	ldr	r3, [pc, #48]	; (800d04c <prvResetNextTaskUnblockTime+0x38>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d104      	bne.n	800d02e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d024:	4b0a      	ldr	r3, [pc, #40]	; (800d050 <prvResetNextTaskUnblockTime+0x3c>)
 800d026:	f04f 32ff 	mov.w	r2, #4294967295
 800d02a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d02c:	e008      	b.n	800d040 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d02e:	4b07      	ldr	r3, [pc, #28]	; (800d04c <prvResetNextTaskUnblockTime+0x38>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	68db      	ldr	r3, [r3, #12]
 800d034:	68db      	ldr	r3, [r3, #12]
 800d036:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	685b      	ldr	r3, [r3, #4]
 800d03c:	4a04      	ldr	r2, [pc, #16]	; (800d050 <prvResetNextTaskUnblockTime+0x3c>)
 800d03e:	6013      	str	r3, [r2, #0]
}
 800d040:	bf00      	nop
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr
 800d04c:	2000033c 	.word	0x2000033c
 800d050:	200003a4 	.word	0x200003a4

0800d054 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d054:	b480      	push	{r7}
 800d056:	b083      	sub	sp, #12
 800d058:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d05a:	4b0b      	ldr	r3, [pc, #44]	; (800d088 <xTaskGetSchedulerState+0x34>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d102      	bne.n	800d068 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d062:	2301      	movs	r3, #1
 800d064:	607b      	str	r3, [r7, #4]
 800d066:	e008      	b.n	800d07a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d068:	4b08      	ldr	r3, [pc, #32]	; (800d08c <xTaskGetSchedulerState+0x38>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d102      	bne.n	800d076 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d070:	2302      	movs	r3, #2
 800d072:	607b      	str	r3, [r7, #4]
 800d074:	e001      	b.n	800d07a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d076:	2300      	movs	r3, #0
 800d078:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d07a:	687b      	ldr	r3, [r7, #4]
	}
 800d07c:	4618      	mov	r0, r3
 800d07e:	370c      	adds	r7, #12
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr
 800d088:	20000390 	.word	0x20000390
 800d08c:	200003ac 	.word	0x200003ac

0800d090 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d090:	b580      	push	{r7, lr}
 800d092:	b084      	sub	sp, #16
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d09c:	2300      	movs	r3, #0
 800d09e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d05e      	beq.n	800d164 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0aa:	4b31      	ldr	r3, [pc, #196]	; (800d170 <xTaskPriorityInherit+0xe0>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d24e      	bcs.n	800d152 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	699b      	ldr	r3, [r3, #24]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	db06      	blt.n	800d0ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0bc:	4b2c      	ldr	r3, [pc, #176]	; (800d170 <xTaskPriorityInherit+0xe0>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c2:	f1c3 0207 	rsb	r2, r3, #7
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	6959      	ldr	r1, [r3, #20]
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0d2:	4613      	mov	r3, r2
 800d0d4:	009b      	lsls	r3, r3, #2
 800d0d6:	4413      	add	r3, r2
 800d0d8:	009b      	lsls	r3, r3, #2
 800d0da:	4a26      	ldr	r2, [pc, #152]	; (800d174 <xTaskPriorityInherit+0xe4>)
 800d0dc:	4413      	add	r3, r2
 800d0de:	4299      	cmp	r1, r3
 800d0e0:	d12f      	bne.n	800d142 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	3304      	adds	r3, #4
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f7fe fb81 	bl	800b7ee <uxListRemove>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d10a      	bne.n	800d108 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	fa02 f303 	lsl.w	r3, r2, r3
 800d0fc:	43da      	mvns	r2, r3
 800d0fe:	4b1e      	ldr	r3, [pc, #120]	; (800d178 <xTaskPriorityInherit+0xe8>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	4013      	ands	r3, r2
 800d104:	4a1c      	ldr	r2, [pc, #112]	; (800d178 <xTaskPriorityInherit+0xe8>)
 800d106:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d108:	4b19      	ldr	r3, [pc, #100]	; (800d170 <xTaskPriorityInherit+0xe0>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d116:	2201      	movs	r2, #1
 800d118:	409a      	lsls	r2, r3
 800d11a:	4b17      	ldr	r3, [pc, #92]	; (800d178 <xTaskPriorityInherit+0xe8>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	4313      	orrs	r3, r2
 800d120:	4a15      	ldr	r2, [pc, #84]	; (800d178 <xTaskPriorityInherit+0xe8>)
 800d122:	6013      	str	r3, [r2, #0]
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d128:	4613      	mov	r3, r2
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	4413      	add	r3, r2
 800d12e:	009b      	lsls	r3, r3, #2
 800d130:	4a10      	ldr	r2, [pc, #64]	; (800d174 <xTaskPriorityInherit+0xe4>)
 800d132:	441a      	add	r2, r3
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	3304      	adds	r3, #4
 800d138:	4619      	mov	r1, r3
 800d13a:	4610      	mov	r0, r2
 800d13c:	f7fe fafa 	bl	800b734 <vListInsertEnd>
 800d140:	e004      	b.n	800d14c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d142:	4b0b      	ldr	r3, [pc, #44]	; (800d170 <xTaskPriorityInherit+0xe0>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d14c:	2301      	movs	r3, #1
 800d14e:	60fb      	str	r3, [r7, #12]
 800d150:	e008      	b.n	800d164 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d156:	4b06      	ldr	r3, [pc, #24]	; (800d170 <xTaskPriorityInherit+0xe0>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d201      	bcs.n	800d164 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d160:	2301      	movs	r3, #1
 800d162:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d164:	68fb      	ldr	r3, [r7, #12]
	}
 800d166:	4618      	mov	r0, r3
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	20000284 	.word	0x20000284
 800d174:	20000288 	.word	0x20000288
 800d178:	2000038c 	.word	0x2000038c

0800d17c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b086      	sub	sp, #24
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d188:	2300      	movs	r3, #0
 800d18a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d06e      	beq.n	800d270 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d192:	4b3a      	ldr	r3, [pc, #232]	; (800d27c <xTaskPriorityDisinherit+0x100>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	693a      	ldr	r2, [r7, #16]
 800d198:	429a      	cmp	r2, r3
 800d19a:	d00a      	beq.n	800d1b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a0:	f383 8811 	msr	BASEPRI, r3
 800d1a4:	f3bf 8f6f 	isb	sy
 800d1a8:	f3bf 8f4f 	dsb	sy
 800d1ac:	60fb      	str	r3, [r7, #12]
}
 800d1ae:	bf00      	nop
 800d1b0:	e7fe      	b.n	800d1b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d10a      	bne.n	800d1d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1be:	f383 8811 	msr	BASEPRI, r3
 800d1c2:	f3bf 8f6f 	isb	sy
 800d1c6:	f3bf 8f4f 	dsb	sy
 800d1ca:	60bb      	str	r3, [r7, #8]
}
 800d1cc:	bf00      	nop
 800d1ce:	e7fe      	b.n	800d1ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1d4:	1e5a      	subs	r2, r3, #1
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d044      	beq.n	800d270 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d140      	bne.n	800d270 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	3304      	adds	r3, #4
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7fe fafb 	bl	800b7ee <uxListRemove>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d115      	bne.n	800d22a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d202:	491f      	ldr	r1, [pc, #124]	; (800d280 <xTaskPriorityDisinherit+0x104>)
 800d204:	4613      	mov	r3, r2
 800d206:	009b      	lsls	r3, r3, #2
 800d208:	4413      	add	r3, r2
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	440b      	add	r3, r1
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d10a      	bne.n	800d22a <xTaskPriorityDisinherit+0xae>
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d218:	2201      	movs	r2, #1
 800d21a:	fa02 f303 	lsl.w	r3, r2, r3
 800d21e:	43da      	mvns	r2, r3
 800d220:	4b18      	ldr	r3, [pc, #96]	; (800d284 <xTaskPriorityDisinherit+0x108>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4013      	ands	r3, r2
 800d226:	4a17      	ldr	r2, [pc, #92]	; (800d284 <xTaskPriorityDisinherit+0x108>)
 800d228:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d236:	f1c3 0207 	rsb	r2, r3, #7
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d242:	2201      	movs	r2, #1
 800d244:	409a      	lsls	r2, r3
 800d246:	4b0f      	ldr	r3, [pc, #60]	; (800d284 <xTaskPriorityDisinherit+0x108>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	4313      	orrs	r3, r2
 800d24c:	4a0d      	ldr	r2, [pc, #52]	; (800d284 <xTaskPriorityDisinherit+0x108>)
 800d24e:	6013      	str	r3, [r2, #0]
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d254:	4613      	mov	r3, r2
 800d256:	009b      	lsls	r3, r3, #2
 800d258:	4413      	add	r3, r2
 800d25a:	009b      	lsls	r3, r3, #2
 800d25c:	4a08      	ldr	r2, [pc, #32]	; (800d280 <xTaskPriorityDisinherit+0x104>)
 800d25e:	441a      	add	r2, r3
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	3304      	adds	r3, #4
 800d264:	4619      	mov	r1, r3
 800d266:	4610      	mov	r0, r2
 800d268:	f7fe fa64 	bl	800b734 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d26c:	2301      	movs	r3, #1
 800d26e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d270:	697b      	ldr	r3, [r7, #20]
	}
 800d272:	4618      	mov	r0, r3
 800d274:	3718      	adds	r7, #24
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	20000284 	.word	0x20000284
 800d280:	20000288 	.word	0x20000288
 800d284:	2000038c 	.word	0x2000038c

0800d288 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b088      	sub	sp, #32
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d296:	2301      	movs	r3, #1
 800d298:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d077      	beq.n	800d390 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d2a0:	69bb      	ldr	r3, [r7, #24]
 800d2a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d10a      	bne.n	800d2be <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ac:	f383 8811 	msr	BASEPRI, r3
 800d2b0:	f3bf 8f6f 	isb	sy
 800d2b4:	f3bf 8f4f 	dsb	sy
 800d2b8:	60fb      	str	r3, [r7, #12]
}
 800d2ba:	bf00      	nop
 800d2bc:	e7fe      	b.n	800d2bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d2be:	69bb      	ldr	r3, [r7, #24]
 800d2c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2c2:	683a      	ldr	r2, [r7, #0]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d902      	bls.n	800d2ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	61fb      	str	r3, [r7, #28]
 800d2cc:	e002      	b.n	800d2d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d2d4:	69bb      	ldr	r3, [r7, #24]
 800d2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d8:	69fa      	ldr	r2, [r7, #28]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d058      	beq.n	800d390 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d2de:	69bb      	ldr	r3, [r7, #24]
 800d2e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2e2:	697a      	ldr	r2, [r7, #20]
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d153      	bne.n	800d390 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d2e8:	4b2b      	ldr	r3, [pc, #172]	; (800d398 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	69ba      	ldr	r2, [r7, #24]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d10a      	bne.n	800d308 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f6:	f383 8811 	msr	BASEPRI, r3
 800d2fa:	f3bf 8f6f 	isb	sy
 800d2fe:	f3bf 8f4f 	dsb	sy
 800d302:	60bb      	str	r3, [r7, #8]
}
 800d304:	bf00      	nop
 800d306:	e7fe      	b.n	800d306 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d308:	69bb      	ldr	r3, [r7, #24]
 800d30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d30c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d30e:	69bb      	ldr	r3, [r7, #24]
 800d310:	69fa      	ldr	r2, [r7, #28]
 800d312:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d314:	69bb      	ldr	r3, [r7, #24]
 800d316:	699b      	ldr	r3, [r3, #24]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	db04      	blt.n	800d326 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d31c:	69fb      	ldr	r3, [r7, #28]
 800d31e:	f1c3 0207 	rsb	r2, r3, #7
 800d322:	69bb      	ldr	r3, [r7, #24]
 800d324:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d326:	69bb      	ldr	r3, [r7, #24]
 800d328:	6959      	ldr	r1, [r3, #20]
 800d32a:	693a      	ldr	r2, [r7, #16]
 800d32c:	4613      	mov	r3, r2
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	4413      	add	r3, r2
 800d332:	009b      	lsls	r3, r3, #2
 800d334:	4a19      	ldr	r2, [pc, #100]	; (800d39c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d336:	4413      	add	r3, r2
 800d338:	4299      	cmp	r1, r3
 800d33a:	d129      	bne.n	800d390 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d33c:	69bb      	ldr	r3, [r7, #24]
 800d33e:	3304      	adds	r3, #4
 800d340:	4618      	mov	r0, r3
 800d342:	f7fe fa54 	bl	800b7ee <uxListRemove>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d10a      	bne.n	800d362 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d34c:	69bb      	ldr	r3, [r7, #24]
 800d34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d350:	2201      	movs	r2, #1
 800d352:	fa02 f303 	lsl.w	r3, r2, r3
 800d356:	43da      	mvns	r2, r3
 800d358:	4b11      	ldr	r3, [pc, #68]	; (800d3a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4013      	ands	r3, r2
 800d35e:	4a10      	ldr	r2, [pc, #64]	; (800d3a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d360:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d362:	69bb      	ldr	r3, [r7, #24]
 800d364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d366:	2201      	movs	r2, #1
 800d368:	409a      	lsls	r2, r3
 800d36a:	4b0d      	ldr	r3, [pc, #52]	; (800d3a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	4313      	orrs	r3, r2
 800d370:	4a0b      	ldr	r2, [pc, #44]	; (800d3a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d372:	6013      	str	r3, [r2, #0]
 800d374:	69bb      	ldr	r3, [r7, #24]
 800d376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d378:	4613      	mov	r3, r2
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	4413      	add	r3, r2
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	4a06      	ldr	r2, [pc, #24]	; (800d39c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d382:	441a      	add	r2, r3
 800d384:	69bb      	ldr	r3, [r7, #24]
 800d386:	3304      	adds	r3, #4
 800d388:	4619      	mov	r1, r3
 800d38a:	4610      	mov	r0, r2
 800d38c:	f7fe f9d2 	bl	800b734 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d390:	bf00      	nop
 800d392:	3720      	adds	r7, #32
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}
 800d398:	20000284 	.word	0x20000284
 800d39c:	20000288 	.word	0x20000288
 800d3a0:	2000038c 	.word	0x2000038c

0800d3a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d3a4:	b480      	push	{r7}
 800d3a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d3a8:	4b07      	ldr	r3, [pc, #28]	; (800d3c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d004      	beq.n	800d3ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d3b0:	4b05      	ldr	r3, [pc, #20]	; (800d3c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d3b6:	3201      	adds	r2, #1
 800d3b8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d3ba:	4b03      	ldr	r3, [pc, #12]	; (800d3c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
	}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr
 800d3c8:	20000284 	.word	0x20000284

0800d3cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b084      	sub	sp, #16
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d3d6:	4b29      	ldr	r3, [pc, #164]	; (800d47c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3dc:	4b28      	ldr	r3, [pc, #160]	; (800d480 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	3304      	adds	r3, #4
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7fe fa03 	bl	800b7ee <uxListRemove>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d10b      	bne.n	800d406 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d3ee:	4b24      	ldr	r3, [pc, #144]	; (800d480 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	fa02 f303 	lsl.w	r3, r2, r3
 800d3fa:	43da      	mvns	r2, r3
 800d3fc:	4b21      	ldr	r3, [pc, #132]	; (800d484 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	4013      	ands	r3, r2
 800d402:	4a20      	ldr	r2, [pc, #128]	; (800d484 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d404:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d40c:	d10a      	bne.n	800d424 <prvAddCurrentTaskToDelayedList+0x58>
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d007      	beq.n	800d424 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d414:	4b1a      	ldr	r3, [pc, #104]	; (800d480 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	3304      	adds	r3, #4
 800d41a:	4619      	mov	r1, r3
 800d41c:	481a      	ldr	r0, [pc, #104]	; (800d488 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d41e:	f7fe f989 	bl	800b734 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d422:	e026      	b.n	800d472 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d424:	68fa      	ldr	r2, [r7, #12]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	4413      	add	r3, r2
 800d42a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d42c:	4b14      	ldr	r3, [pc, #80]	; (800d480 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	68ba      	ldr	r2, [r7, #8]
 800d432:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d434:	68ba      	ldr	r2, [r7, #8]
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	429a      	cmp	r2, r3
 800d43a:	d209      	bcs.n	800d450 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d43c:	4b13      	ldr	r3, [pc, #76]	; (800d48c <prvAddCurrentTaskToDelayedList+0xc0>)
 800d43e:	681a      	ldr	r2, [r3, #0]
 800d440:	4b0f      	ldr	r3, [pc, #60]	; (800d480 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	3304      	adds	r3, #4
 800d446:	4619      	mov	r1, r3
 800d448:	4610      	mov	r0, r2
 800d44a:	f7fe f997 	bl	800b77c <vListInsert>
}
 800d44e:	e010      	b.n	800d472 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d450:	4b0f      	ldr	r3, [pc, #60]	; (800d490 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	4b0a      	ldr	r3, [pc, #40]	; (800d480 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	3304      	adds	r3, #4
 800d45a:	4619      	mov	r1, r3
 800d45c:	4610      	mov	r0, r2
 800d45e:	f7fe f98d 	bl	800b77c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d462:	4b0c      	ldr	r3, [pc, #48]	; (800d494 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	68ba      	ldr	r2, [r7, #8]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d202      	bcs.n	800d472 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d46c:	4a09      	ldr	r2, [pc, #36]	; (800d494 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	6013      	str	r3, [r2, #0]
}
 800d472:	bf00      	nop
 800d474:	3710      	adds	r7, #16
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	20000388 	.word	0x20000388
 800d480:	20000284 	.word	0x20000284
 800d484:	2000038c 	.word	0x2000038c
 800d488:	20000370 	.word	0x20000370
 800d48c:	20000340 	.word	0x20000340
 800d490:	2000033c 	.word	0x2000033c
 800d494:	200003a4 	.word	0x200003a4

0800d498 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d498:	b480      	push	{r7}
 800d49a:	b085      	sub	sp, #20
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	60f8      	str	r0, [r7, #12]
 800d4a0:	60b9      	str	r1, [r7, #8]
 800d4a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	3b04      	subs	r3, #4
 800d4a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d4b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	3b04      	subs	r3, #4
 800d4b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	f023 0201 	bic.w	r2, r3, #1
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	3b04      	subs	r3, #4
 800d4c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d4c8:	4a0c      	ldr	r2, [pc, #48]	; (800d4fc <pxPortInitialiseStack+0x64>)
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	3b14      	subs	r3, #20
 800d4d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	3b04      	subs	r3, #4
 800d4de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	f06f 0202 	mvn.w	r2, #2
 800d4e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	3b20      	subs	r3, #32
 800d4ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3714      	adds	r7, #20
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr
 800d4fc:	0800d501 	.word	0x0800d501

0800d500 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d500:	b480      	push	{r7}
 800d502:	b085      	sub	sp, #20
 800d504:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d506:	2300      	movs	r3, #0
 800d508:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d50a:	4b12      	ldr	r3, [pc, #72]	; (800d554 <prvTaskExitError+0x54>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d512:	d00a      	beq.n	800d52a <prvTaskExitError+0x2a>
	__asm volatile
 800d514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d518:	f383 8811 	msr	BASEPRI, r3
 800d51c:	f3bf 8f6f 	isb	sy
 800d520:	f3bf 8f4f 	dsb	sy
 800d524:	60fb      	str	r3, [r7, #12]
}
 800d526:	bf00      	nop
 800d528:	e7fe      	b.n	800d528 <prvTaskExitError+0x28>
	__asm volatile
 800d52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52e:	f383 8811 	msr	BASEPRI, r3
 800d532:	f3bf 8f6f 	isb	sy
 800d536:	f3bf 8f4f 	dsb	sy
 800d53a:	60bb      	str	r3, [r7, #8]
}
 800d53c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d53e:	bf00      	nop
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d0fc      	beq.n	800d540 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d546:	bf00      	nop
 800d548:	bf00      	nop
 800d54a:	3714      	adds	r7, #20
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr
 800d554:	20000010 	.word	0x20000010
	...

0800d560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d560:	4b07      	ldr	r3, [pc, #28]	; (800d580 <pxCurrentTCBConst2>)
 800d562:	6819      	ldr	r1, [r3, #0]
 800d564:	6808      	ldr	r0, [r1, #0]
 800d566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d56a:	f380 8809 	msr	PSP, r0
 800d56e:	f3bf 8f6f 	isb	sy
 800d572:	f04f 0000 	mov.w	r0, #0
 800d576:	f380 8811 	msr	BASEPRI, r0
 800d57a:	4770      	bx	lr
 800d57c:	f3af 8000 	nop.w

0800d580 <pxCurrentTCBConst2>:
 800d580:	20000284 	.word	0x20000284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d584:	bf00      	nop
 800d586:	bf00      	nop

0800d588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d588:	4808      	ldr	r0, [pc, #32]	; (800d5ac <prvPortStartFirstTask+0x24>)
 800d58a:	6800      	ldr	r0, [r0, #0]
 800d58c:	6800      	ldr	r0, [r0, #0]
 800d58e:	f380 8808 	msr	MSP, r0
 800d592:	f04f 0000 	mov.w	r0, #0
 800d596:	f380 8814 	msr	CONTROL, r0
 800d59a:	b662      	cpsie	i
 800d59c:	b661      	cpsie	f
 800d59e:	f3bf 8f4f 	dsb	sy
 800d5a2:	f3bf 8f6f 	isb	sy
 800d5a6:	df00      	svc	0
 800d5a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d5aa:	bf00      	nop
 800d5ac:	e000ed08 	.word	0xe000ed08

0800d5b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b086      	sub	sp, #24
 800d5b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d5b6:	4b46      	ldr	r3, [pc, #280]	; (800d6d0 <xPortStartScheduler+0x120>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	4a46      	ldr	r2, [pc, #280]	; (800d6d4 <xPortStartScheduler+0x124>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d10a      	bne.n	800d5d6 <xPortStartScheduler+0x26>
	__asm volatile
 800d5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c4:	f383 8811 	msr	BASEPRI, r3
 800d5c8:	f3bf 8f6f 	isb	sy
 800d5cc:	f3bf 8f4f 	dsb	sy
 800d5d0:	613b      	str	r3, [r7, #16]
}
 800d5d2:	bf00      	nop
 800d5d4:	e7fe      	b.n	800d5d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d5d6:	4b3e      	ldr	r3, [pc, #248]	; (800d6d0 <xPortStartScheduler+0x120>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4a3f      	ldr	r2, [pc, #252]	; (800d6d8 <xPortStartScheduler+0x128>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d10a      	bne.n	800d5f6 <xPortStartScheduler+0x46>
	__asm volatile
 800d5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e4:	f383 8811 	msr	BASEPRI, r3
 800d5e8:	f3bf 8f6f 	isb	sy
 800d5ec:	f3bf 8f4f 	dsb	sy
 800d5f0:	60fb      	str	r3, [r7, #12]
}
 800d5f2:	bf00      	nop
 800d5f4:	e7fe      	b.n	800d5f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d5f6:	4b39      	ldr	r3, [pc, #228]	; (800d6dc <xPortStartScheduler+0x12c>)
 800d5f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	b2db      	uxtb	r3, r3
 800d600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	22ff      	movs	r2, #255	; 0xff
 800d606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	b2db      	uxtb	r3, r3
 800d60e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d610:	78fb      	ldrb	r3, [r7, #3]
 800d612:	b2db      	uxtb	r3, r3
 800d614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d618:	b2da      	uxtb	r2, r3
 800d61a:	4b31      	ldr	r3, [pc, #196]	; (800d6e0 <xPortStartScheduler+0x130>)
 800d61c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d61e:	4b31      	ldr	r3, [pc, #196]	; (800d6e4 <xPortStartScheduler+0x134>)
 800d620:	2207      	movs	r2, #7
 800d622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d624:	e009      	b.n	800d63a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d626:	4b2f      	ldr	r3, [pc, #188]	; (800d6e4 <xPortStartScheduler+0x134>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	3b01      	subs	r3, #1
 800d62c:	4a2d      	ldr	r2, [pc, #180]	; (800d6e4 <xPortStartScheduler+0x134>)
 800d62e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d630:	78fb      	ldrb	r3, [r7, #3]
 800d632:	b2db      	uxtb	r3, r3
 800d634:	005b      	lsls	r3, r3, #1
 800d636:	b2db      	uxtb	r3, r3
 800d638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d63a:	78fb      	ldrb	r3, [r7, #3]
 800d63c:	b2db      	uxtb	r3, r3
 800d63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d642:	2b80      	cmp	r3, #128	; 0x80
 800d644:	d0ef      	beq.n	800d626 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d646:	4b27      	ldr	r3, [pc, #156]	; (800d6e4 <xPortStartScheduler+0x134>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f1c3 0307 	rsb	r3, r3, #7
 800d64e:	2b04      	cmp	r3, #4
 800d650:	d00a      	beq.n	800d668 <xPortStartScheduler+0xb8>
	__asm volatile
 800d652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d656:	f383 8811 	msr	BASEPRI, r3
 800d65a:	f3bf 8f6f 	isb	sy
 800d65e:	f3bf 8f4f 	dsb	sy
 800d662:	60bb      	str	r3, [r7, #8]
}
 800d664:	bf00      	nop
 800d666:	e7fe      	b.n	800d666 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d668:	4b1e      	ldr	r3, [pc, #120]	; (800d6e4 <xPortStartScheduler+0x134>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	021b      	lsls	r3, r3, #8
 800d66e:	4a1d      	ldr	r2, [pc, #116]	; (800d6e4 <xPortStartScheduler+0x134>)
 800d670:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d672:	4b1c      	ldr	r3, [pc, #112]	; (800d6e4 <xPortStartScheduler+0x134>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d67a:	4a1a      	ldr	r2, [pc, #104]	; (800d6e4 <xPortStartScheduler+0x134>)
 800d67c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	b2da      	uxtb	r2, r3
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d686:	4b18      	ldr	r3, [pc, #96]	; (800d6e8 <xPortStartScheduler+0x138>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4a17      	ldr	r2, [pc, #92]	; (800d6e8 <xPortStartScheduler+0x138>)
 800d68c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d690:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d692:	4b15      	ldr	r3, [pc, #84]	; (800d6e8 <xPortStartScheduler+0x138>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	4a14      	ldr	r2, [pc, #80]	; (800d6e8 <xPortStartScheduler+0x138>)
 800d698:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d69c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d69e:	f000 f8dd 	bl	800d85c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d6a2:	4b12      	ldr	r3, [pc, #72]	; (800d6ec <xPortStartScheduler+0x13c>)
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d6a8:	f000 f8fc 	bl	800d8a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d6ac:	4b10      	ldr	r3, [pc, #64]	; (800d6f0 <xPortStartScheduler+0x140>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4a0f      	ldr	r2, [pc, #60]	; (800d6f0 <xPortStartScheduler+0x140>)
 800d6b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d6b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d6b8:	f7ff ff66 	bl	800d588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d6bc:	f7ff fa8e 	bl	800cbdc <vTaskSwitchContext>
	prvTaskExitError();
 800d6c0:	f7ff ff1e 	bl	800d500 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d6c4:	2300      	movs	r3, #0
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3718      	adds	r7, #24
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	e000ed00 	.word	0xe000ed00
 800d6d4:	410fc271 	.word	0x410fc271
 800d6d8:	410fc270 	.word	0x410fc270
 800d6dc:	e000e400 	.word	0xe000e400
 800d6e0:	200003b0 	.word	0x200003b0
 800d6e4:	200003b4 	.word	0x200003b4
 800d6e8:	e000ed20 	.word	0xe000ed20
 800d6ec:	20000010 	.word	0x20000010
 800d6f0:	e000ef34 	.word	0xe000ef34

0800d6f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b083      	sub	sp, #12
 800d6f8:	af00      	add	r7, sp, #0
	__asm volatile
 800d6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6fe:	f383 8811 	msr	BASEPRI, r3
 800d702:	f3bf 8f6f 	isb	sy
 800d706:	f3bf 8f4f 	dsb	sy
 800d70a:	607b      	str	r3, [r7, #4]
}
 800d70c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d70e:	4b0f      	ldr	r3, [pc, #60]	; (800d74c <vPortEnterCritical+0x58>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	3301      	adds	r3, #1
 800d714:	4a0d      	ldr	r2, [pc, #52]	; (800d74c <vPortEnterCritical+0x58>)
 800d716:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d718:	4b0c      	ldr	r3, [pc, #48]	; (800d74c <vPortEnterCritical+0x58>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d10f      	bne.n	800d740 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d720:	4b0b      	ldr	r3, [pc, #44]	; (800d750 <vPortEnterCritical+0x5c>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	b2db      	uxtb	r3, r3
 800d726:	2b00      	cmp	r3, #0
 800d728:	d00a      	beq.n	800d740 <vPortEnterCritical+0x4c>
	__asm volatile
 800d72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d72e:	f383 8811 	msr	BASEPRI, r3
 800d732:	f3bf 8f6f 	isb	sy
 800d736:	f3bf 8f4f 	dsb	sy
 800d73a:	603b      	str	r3, [r7, #0]
}
 800d73c:	bf00      	nop
 800d73e:	e7fe      	b.n	800d73e <vPortEnterCritical+0x4a>
	}
}
 800d740:	bf00      	nop
 800d742:	370c      	adds	r7, #12
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr
 800d74c:	20000010 	.word	0x20000010
 800d750:	e000ed04 	.word	0xe000ed04

0800d754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d754:	b480      	push	{r7}
 800d756:	b083      	sub	sp, #12
 800d758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d75a:	4b12      	ldr	r3, [pc, #72]	; (800d7a4 <vPortExitCritical+0x50>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d10a      	bne.n	800d778 <vPortExitCritical+0x24>
	__asm volatile
 800d762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d766:	f383 8811 	msr	BASEPRI, r3
 800d76a:	f3bf 8f6f 	isb	sy
 800d76e:	f3bf 8f4f 	dsb	sy
 800d772:	607b      	str	r3, [r7, #4]
}
 800d774:	bf00      	nop
 800d776:	e7fe      	b.n	800d776 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d778:	4b0a      	ldr	r3, [pc, #40]	; (800d7a4 <vPortExitCritical+0x50>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	3b01      	subs	r3, #1
 800d77e:	4a09      	ldr	r2, [pc, #36]	; (800d7a4 <vPortExitCritical+0x50>)
 800d780:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d782:	4b08      	ldr	r3, [pc, #32]	; (800d7a4 <vPortExitCritical+0x50>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d105      	bne.n	800d796 <vPortExitCritical+0x42>
 800d78a:	2300      	movs	r3, #0
 800d78c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	f383 8811 	msr	BASEPRI, r3
}
 800d794:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d796:	bf00      	nop
 800d798:	370c      	adds	r7, #12
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr
 800d7a2:	bf00      	nop
 800d7a4:	20000010 	.word	0x20000010
	...

0800d7b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d7b0:	f3ef 8009 	mrs	r0, PSP
 800d7b4:	f3bf 8f6f 	isb	sy
 800d7b8:	4b15      	ldr	r3, [pc, #84]	; (800d810 <pxCurrentTCBConst>)
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	f01e 0f10 	tst.w	lr, #16
 800d7c0:	bf08      	it	eq
 800d7c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d7c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ca:	6010      	str	r0, [r2, #0]
 800d7cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d7d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d7d4:	f380 8811 	msr	BASEPRI, r0
 800d7d8:	f3bf 8f4f 	dsb	sy
 800d7dc:	f3bf 8f6f 	isb	sy
 800d7e0:	f7ff f9fc 	bl	800cbdc <vTaskSwitchContext>
 800d7e4:	f04f 0000 	mov.w	r0, #0
 800d7e8:	f380 8811 	msr	BASEPRI, r0
 800d7ec:	bc09      	pop	{r0, r3}
 800d7ee:	6819      	ldr	r1, [r3, #0]
 800d7f0:	6808      	ldr	r0, [r1, #0]
 800d7f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7f6:	f01e 0f10 	tst.w	lr, #16
 800d7fa:	bf08      	it	eq
 800d7fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d800:	f380 8809 	msr	PSP, r0
 800d804:	f3bf 8f6f 	isb	sy
 800d808:	4770      	bx	lr
 800d80a:	bf00      	nop
 800d80c:	f3af 8000 	nop.w

0800d810 <pxCurrentTCBConst>:
 800d810:	20000284 	.word	0x20000284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d814:	bf00      	nop
 800d816:	bf00      	nop

0800d818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b082      	sub	sp, #8
 800d81c:	af00      	add	r7, sp, #0
	__asm volatile
 800d81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d822:	f383 8811 	msr	BASEPRI, r3
 800d826:	f3bf 8f6f 	isb	sy
 800d82a:	f3bf 8f4f 	dsb	sy
 800d82e:	607b      	str	r3, [r7, #4]
}
 800d830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d832:	f7ff f91b 	bl	800ca6c <xTaskIncrementTick>
 800d836:	4603      	mov	r3, r0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d003      	beq.n	800d844 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d83c:	4b06      	ldr	r3, [pc, #24]	; (800d858 <SysTick_Handler+0x40>)
 800d83e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d842:	601a      	str	r2, [r3, #0]
 800d844:	2300      	movs	r3, #0
 800d846:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	f383 8811 	msr	BASEPRI, r3
}
 800d84e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d850:	bf00      	nop
 800d852:	3708      	adds	r7, #8
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}
 800d858:	e000ed04 	.word	0xe000ed04

0800d85c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d85c:	b480      	push	{r7}
 800d85e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d860:	4b0b      	ldr	r3, [pc, #44]	; (800d890 <vPortSetupTimerInterrupt+0x34>)
 800d862:	2200      	movs	r2, #0
 800d864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d866:	4b0b      	ldr	r3, [pc, #44]	; (800d894 <vPortSetupTimerInterrupt+0x38>)
 800d868:	2200      	movs	r2, #0
 800d86a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d86c:	4b0a      	ldr	r3, [pc, #40]	; (800d898 <vPortSetupTimerInterrupt+0x3c>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	4a0a      	ldr	r2, [pc, #40]	; (800d89c <vPortSetupTimerInterrupt+0x40>)
 800d872:	fba2 2303 	umull	r2, r3, r2, r3
 800d876:	099b      	lsrs	r3, r3, #6
 800d878:	4a09      	ldr	r2, [pc, #36]	; (800d8a0 <vPortSetupTimerInterrupt+0x44>)
 800d87a:	3b01      	subs	r3, #1
 800d87c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d87e:	4b04      	ldr	r3, [pc, #16]	; (800d890 <vPortSetupTimerInterrupt+0x34>)
 800d880:	2207      	movs	r2, #7
 800d882:	601a      	str	r2, [r3, #0]
}
 800d884:	bf00      	nop
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr
 800d88e:	bf00      	nop
 800d890:	e000e010 	.word	0xe000e010
 800d894:	e000e018 	.word	0xe000e018
 800d898:	20000000 	.word	0x20000000
 800d89c:	10624dd3 	.word	0x10624dd3
 800d8a0:	e000e014 	.word	0xe000e014

0800d8a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d8a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d8b4 <vPortEnableVFP+0x10>
 800d8a8:	6801      	ldr	r1, [r0, #0]
 800d8aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d8ae:	6001      	str	r1, [r0, #0]
 800d8b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d8b2:	bf00      	nop
 800d8b4:	e000ed88 	.word	0xe000ed88

0800d8b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d8be:	f3ef 8305 	mrs	r3, IPSR
 800d8c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2b0f      	cmp	r3, #15
 800d8c8:	d914      	bls.n	800d8f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d8ca:	4a17      	ldr	r2, [pc, #92]	; (800d928 <vPortValidateInterruptPriority+0x70>)
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	4413      	add	r3, r2
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d8d4:	4b15      	ldr	r3, [pc, #84]	; (800d92c <vPortValidateInterruptPriority+0x74>)
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	7afa      	ldrb	r2, [r7, #11]
 800d8da:	429a      	cmp	r2, r3
 800d8dc:	d20a      	bcs.n	800d8f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e2:	f383 8811 	msr	BASEPRI, r3
 800d8e6:	f3bf 8f6f 	isb	sy
 800d8ea:	f3bf 8f4f 	dsb	sy
 800d8ee:	607b      	str	r3, [r7, #4]
}
 800d8f0:	bf00      	nop
 800d8f2:	e7fe      	b.n	800d8f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d8f4:	4b0e      	ldr	r3, [pc, #56]	; (800d930 <vPortValidateInterruptPriority+0x78>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d8fc:	4b0d      	ldr	r3, [pc, #52]	; (800d934 <vPortValidateInterruptPriority+0x7c>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	429a      	cmp	r2, r3
 800d902:	d90a      	bls.n	800d91a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d908:	f383 8811 	msr	BASEPRI, r3
 800d90c:	f3bf 8f6f 	isb	sy
 800d910:	f3bf 8f4f 	dsb	sy
 800d914:	603b      	str	r3, [r7, #0]
}
 800d916:	bf00      	nop
 800d918:	e7fe      	b.n	800d918 <vPortValidateInterruptPriority+0x60>
	}
 800d91a:	bf00      	nop
 800d91c:	3714      	adds	r7, #20
 800d91e:	46bd      	mov	sp, r7
 800d920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d924:	4770      	bx	lr
 800d926:	bf00      	nop
 800d928:	e000e3f0 	.word	0xe000e3f0
 800d92c:	200003b0 	.word	0x200003b0
 800d930:	e000ed0c 	.word	0xe000ed0c
 800d934:	200003b4 	.word	0x200003b4

0800d938 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b08a      	sub	sp, #40	; 0x28
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d940:	2300      	movs	r3, #0
 800d942:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d944:	f7fe ffe8 	bl	800c918 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d948:	4b5b      	ldr	r3, [pc, #364]	; (800dab8 <pvPortMalloc+0x180>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d101      	bne.n	800d954 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d950:	f000 f920 	bl	800db94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d954:	4b59      	ldr	r3, [pc, #356]	; (800dabc <pvPortMalloc+0x184>)
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	4013      	ands	r3, r2
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	f040 8093 	bne.w	800da88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d01d      	beq.n	800d9a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d968:	2208      	movs	r2, #8
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	4413      	add	r3, r2
 800d96e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f003 0307 	and.w	r3, r3, #7
 800d976:	2b00      	cmp	r3, #0
 800d978:	d014      	beq.n	800d9a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f023 0307 	bic.w	r3, r3, #7
 800d980:	3308      	adds	r3, #8
 800d982:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f003 0307 	and.w	r3, r3, #7
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d00a      	beq.n	800d9a4 <pvPortMalloc+0x6c>
	__asm volatile
 800d98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d992:	f383 8811 	msr	BASEPRI, r3
 800d996:	f3bf 8f6f 	isb	sy
 800d99a:	f3bf 8f4f 	dsb	sy
 800d99e:	617b      	str	r3, [r7, #20]
}
 800d9a0:	bf00      	nop
 800d9a2:	e7fe      	b.n	800d9a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d06e      	beq.n	800da88 <pvPortMalloc+0x150>
 800d9aa:	4b45      	ldr	r3, [pc, #276]	; (800dac0 <pvPortMalloc+0x188>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	687a      	ldr	r2, [r7, #4]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d869      	bhi.n	800da88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d9b4:	4b43      	ldr	r3, [pc, #268]	; (800dac4 <pvPortMalloc+0x18c>)
 800d9b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d9b8:	4b42      	ldr	r3, [pc, #264]	; (800dac4 <pvPortMalloc+0x18c>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d9be:	e004      	b.n	800d9ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	687a      	ldr	r2, [r7, #4]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d903      	bls.n	800d9dc <pvPortMalloc+0xa4>
 800d9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d1f1      	bne.n	800d9c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d9dc:	4b36      	ldr	r3, [pc, #216]	; (800dab8 <pvPortMalloc+0x180>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d050      	beq.n	800da88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d9e6:	6a3b      	ldr	r3, [r7, #32]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	2208      	movs	r2, #8
 800d9ec:	4413      	add	r3, r2
 800d9ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f2:	681a      	ldr	r2, [r3, #0]
 800d9f4:	6a3b      	ldr	r3, [r7, #32]
 800d9f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fa:	685a      	ldr	r2, [r3, #4]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	1ad2      	subs	r2, r2, r3
 800da00:	2308      	movs	r3, #8
 800da02:	005b      	lsls	r3, r3, #1
 800da04:	429a      	cmp	r2, r3
 800da06:	d91f      	bls.n	800da48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800da08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	4413      	add	r3, r2
 800da0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da10:	69bb      	ldr	r3, [r7, #24]
 800da12:	f003 0307 	and.w	r3, r3, #7
 800da16:	2b00      	cmp	r3, #0
 800da18:	d00a      	beq.n	800da30 <pvPortMalloc+0xf8>
	__asm volatile
 800da1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da1e:	f383 8811 	msr	BASEPRI, r3
 800da22:	f3bf 8f6f 	isb	sy
 800da26:	f3bf 8f4f 	dsb	sy
 800da2a:	613b      	str	r3, [r7, #16]
}
 800da2c:	bf00      	nop
 800da2e:	e7fe      	b.n	800da2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800da30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da32:	685a      	ldr	r2, [r3, #4]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	1ad2      	subs	r2, r2, r3
 800da38:	69bb      	ldr	r3, [r7, #24]
 800da3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800da3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3e:	687a      	ldr	r2, [r7, #4]
 800da40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800da42:	69b8      	ldr	r0, [r7, #24]
 800da44:	f000 f908 	bl	800dc58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800da48:	4b1d      	ldr	r3, [pc, #116]	; (800dac0 <pvPortMalloc+0x188>)
 800da4a:	681a      	ldr	r2, [r3, #0]
 800da4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4e:	685b      	ldr	r3, [r3, #4]
 800da50:	1ad3      	subs	r3, r2, r3
 800da52:	4a1b      	ldr	r2, [pc, #108]	; (800dac0 <pvPortMalloc+0x188>)
 800da54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800da56:	4b1a      	ldr	r3, [pc, #104]	; (800dac0 <pvPortMalloc+0x188>)
 800da58:	681a      	ldr	r2, [r3, #0]
 800da5a:	4b1b      	ldr	r3, [pc, #108]	; (800dac8 <pvPortMalloc+0x190>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d203      	bcs.n	800da6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800da62:	4b17      	ldr	r3, [pc, #92]	; (800dac0 <pvPortMalloc+0x188>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4a18      	ldr	r2, [pc, #96]	; (800dac8 <pvPortMalloc+0x190>)
 800da68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800da6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6c:	685a      	ldr	r2, [r3, #4]
 800da6e:	4b13      	ldr	r3, [pc, #76]	; (800dabc <pvPortMalloc+0x184>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	431a      	orrs	r2, r3
 800da74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800da78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7a:	2200      	movs	r2, #0
 800da7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800da7e:	4b13      	ldr	r3, [pc, #76]	; (800dacc <pvPortMalloc+0x194>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	3301      	adds	r3, #1
 800da84:	4a11      	ldr	r2, [pc, #68]	; (800dacc <pvPortMalloc+0x194>)
 800da86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800da88:	f7fe ff54 	bl	800c934 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800da8c:	69fb      	ldr	r3, [r7, #28]
 800da8e:	f003 0307 	and.w	r3, r3, #7
 800da92:	2b00      	cmp	r3, #0
 800da94:	d00a      	beq.n	800daac <pvPortMalloc+0x174>
	__asm volatile
 800da96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9a:	f383 8811 	msr	BASEPRI, r3
 800da9e:	f3bf 8f6f 	isb	sy
 800daa2:	f3bf 8f4f 	dsb	sy
 800daa6:	60fb      	str	r3, [r7, #12]
}
 800daa8:	bf00      	nop
 800daaa:	e7fe      	b.n	800daaa <pvPortMalloc+0x172>
	return pvReturn;
 800daac:	69fb      	ldr	r3, [r7, #28]
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3728      	adds	r7, #40	; 0x28
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	bf00      	nop
 800dab8:	20003fc0 	.word	0x20003fc0
 800dabc:	20003fd4 	.word	0x20003fd4
 800dac0:	20003fc4 	.word	0x20003fc4
 800dac4:	20003fb8 	.word	0x20003fb8
 800dac8:	20003fc8 	.word	0x20003fc8
 800dacc:	20003fcc 	.word	0x20003fcc

0800dad0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b086      	sub	sp, #24
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d04d      	beq.n	800db7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dae2:	2308      	movs	r3, #8
 800dae4:	425b      	negs	r3, r3
 800dae6:	697a      	ldr	r2, [r7, #20]
 800dae8:	4413      	add	r3, r2
 800daea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	685a      	ldr	r2, [r3, #4]
 800daf4:	4b24      	ldr	r3, [pc, #144]	; (800db88 <vPortFree+0xb8>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4013      	ands	r3, r2
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d10a      	bne.n	800db14 <vPortFree+0x44>
	__asm volatile
 800dafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db02:	f383 8811 	msr	BASEPRI, r3
 800db06:	f3bf 8f6f 	isb	sy
 800db0a:	f3bf 8f4f 	dsb	sy
 800db0e:	60fb      	str	r3, [r7, #12]
}
 800db10:	bf00      	nop
 800db12:	e7fe      	b.n	800db12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d00a      	beq.n	800db32 <vPortFree+0x62>
	__asm volatile
 800db1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db20:	f383 8811 	msr	BASEPRI, r3
 800db24:	f3bf 8f6f 	isb	sy
 800db28:	f3bf 8f4f 	dsb	sy
 800db2c:	60bb      	str	r3, [r7, #8]
}
 800db2e:	bf00      	nop
 800db30:	e7fe      	b.n	800db30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	685a      	ldr	r2, [r3, #4]
 800db36:	4b14      	ldr	r3, [pc, #80]	; (800db88 <vPortFree+0xb8>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	4013      	ands	r3, r2
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d01e      	beq.n	800db7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d11a      	bne.n	800db7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	685a      	ldr	r2, [r3, #4]
 800db4c:	4b0e      	ldr	r3, [pc, #56]	; (800db88 <vPortFree+0xb8>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	43db      	mvns	r3, r3
 800db52:	401a      	ands	r2, r3
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800db58:	f7fe fede 	bl	800c918 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	685a      	ldr	r2, [r3, #4]
 800db60:	4b0a      	ldr	r3, [pc, #40]	; (800db8c <vPortFree+0xbc>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4413      	add	r3, r2
 800db66:	4a09      	ldr	r2, [pc, #36]	; (800db8c <vPortFree+0xbc>)
 800db68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800db6a:	6938      	ldr	r0, [r7, #16]
 800db6c:	f000 f874 	bl	800dc58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800db70:	4b07      	ldr	r3, [pc, #28]	; (800db90 <vPortFree+0xc0>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	3301      	adds	r3, #1
 800db76:	4a06      	ldr	r2, [pc, #24]	; (800db90 <vPortFree+0xc0>)
 800db78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800db7a:	f7fe fedb 	bl	800c934 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800db7e:	bf00      	nop
 800db80:	3718      	adds	r7, #24
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	20003fd4 	.word	0x20003fd4
 800db8c:	20003fc4 	.word	0x20003fc4
 800db90:	20003fd0 	.word	0x20003fd0

0800db94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800db94:	b480      	push	{r7}
 800db96:	b085      	sub	sp, #20
 800db98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800db9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800db9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dba0:	4b27      	ldr	r3, [pc, #156]	; (800dc40 <prvHeapInit+0xac>)
 800dba2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f003 0307 	and.w	r3, r3, #7
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00c      	beq.n	800dbc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	3307      	adds	r3, #7
 800dbb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f023 0307 	bic.w	r3, r3, #7
 800dbba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dbbc:	68ba      	ldr	r2, [r7, #8]
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	1ad3      	subs	r3, r2, r3
 800dbc2:	4a1f      	ldr	r2, [pc, #124]	; (800dc40 <prvHeapInit+0xac>)
 800dbc4:	4413      	add	r3, r2
 800dbc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dbcc:	4a1d      	ldr	r2, [pc, #116]	; (800dc44 <prvHeapInit+0xb0>)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dbd2:	4b1c      	ldr	r3, [pc, #112]	; (800dc44 <prvHeapInit+0xb0>)
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	68ba      	ldr	r2, [r7, #8]
 800dbdc:	4413      	add	r3, r2
 800dbde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dbe0:	2208      	movs	r2, #8
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	1a9b      	subs	r3, r3, r2
 800dbe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f023 0307 	bic.w	r3, r3, #7
 800dbee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	4a15      	ldr	r2, [pc, #84]	; (800dc48 <prvHeapInit+0xb4>)
 800dbf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dbf6:	4b14      	ldr	r3, [pc, #80]	; (800dc48 <prvHeapInit+0xb4>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dbfe:	4b12      	ldr	r3, [pc, #72]	; (800dc48 <prvHeapInit+0xb4>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	2200      	movs	r2, #0
 800dc04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	68fa      	ldr	r2, [r7, #12]
 800dc0e:	1ad2      	subs	r2, r2, r3
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dc14:	4b0c      	ldr	r3, [pc, #48]	; (800dc48 <prvHeapInit+0xb4>)
 800dc16:	681a      	ldr	r2, [r3, #0]
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	4a0a      	ldr	r2, [pc, #40]	; (800dc4c <prvHeapInit+0xb8>)
 800dc22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	4a09      	ldr	r2, [pc, #36]	; (800dc50 <prvHeapInit+0xbc>)
 800dc2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc2c:	4b09      	ldr	r3, [pc, #36]	; (800dc54 <prvHeapInit+0xc0>)
 800dc2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dc32:	601a      	str	r2, [r3, #0]
}
 800dc34:	bf00      	nop
 800dc36:	3714      	adds	r7, #20
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr
 800dc40:	200003b8 	.word	0x200003b8
 800dc44:	20003fb8 	.word	0x20003fb8
 800dc48:	20003fc0 	.word	0x20003fc0
 800dc4c:	20003fc8 	.word	0x20003fc8
 800dc50:	20003fc4 	.word	0x20003fc4
 800dc54:	20003fd4 	.word	0x20003fd4

0800dc58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b085      	sub	sp, #20
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dc60:	4b28      	ldr	r3, [pc, #160]	; (800dd04 <prvInsertBlockIntoFreeList+0xac>)
 800dc62:	60fb      	str	r3, [r7, #12]
 800dc64:	e002      	b.n	800dc6c <prvInsertBlockIntoFreeList+0x14>
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	60fb      	str	r3, [r7, #12]
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	687a      	ldr	r2, [r7, #4]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d8f7      	bhi.n	800dc66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	685b      	ldr	r3, [r3, #4]
 800dc7e:	68ba      	ldr	r2, [r7, #8]
 800dc80:	4413      	add	r3, r2
 800dc82:	687a      	ldr	r2, [r7, #4]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d108      	bne.n	800dc9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	685a      	ldr	r2, [r3, #4]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	685b      	ldr	r3, [r3, #4]
 800dc90:	441a      	add	r2, r3
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	68ba      	ldr	r2, [r7, #8]
 800dca4:	441a      	add	r2, r3
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d118      	bne.n	800dce0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	4b15      	ldr	r3, [pc, #84]	; (800dd08 <prvInsertBlockIntoFreeList+0xb0>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d00d      	beq.n	800dcd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	685a      	ldr	r2, [r3, #4]
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	441a      	add	r2, r3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	681a      	ldr	r2, [r3, #0]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	601a      	str	r2, [r3, #0]
 800dcd4:	e008      	b.n	800dce8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dcd6:	4b0c      	ldr	r3, [pc, #48]	; (800dd08 <prvInsertBlockIntoFreeList+0xb0>)
 800dcd8:	681a      	ldr	r2, [r3, #0]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	601a      	str	r2, [r3, #0]
 800dcde:	e003      	b.n	800dce8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681a      	ldr	r2, [r3, #0]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dce8:	68fa      	ldr	r2, [r7, #12]
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d002      	beq.n	800dcf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	687a      	ldr	r2, [r7, #4]
 800dcf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcf6:	bf00      	nop
 800dcf8:	3714      	adds	r7, #20
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr
 800dd02:	bf00      	nop
 800dd04:	20003fb8 	.word	0x20003fb8
 800dd08:	20003fc0 	.word	0x20003fc0

0800dd0c <__libc_init_array>:
 800dd0c:	b570      	push	{r4, r5, r6, lr}
 800dd0e:	4d0d      	ldr	r5, [pc, #52]	; (800dd44 <__libc_init_array+0x38>)
 800dd10:	4c0d      	ldr	r4, [pc, #52]	; (800dd48 <__libc_init_array+0x3c>)
 800dd12:	1b64      	subs	r4, r4, r5
 800dd14:	10a4      	asrs	r4, r4, #2
 800dd16:	2600      	movs	r6, #0
 800dd18:	42a6      	cmp	r6, r4
 800dd1a:	d109      	bne.n	800dd30 <__libc_init_array+0x24>
 800dd1c:	4d0b      	ldr	r5, [pc, #44]	; (800dd4c <__libc_init_array+0x40>)
 800dd1e:	4c0c      	ldr	r4, [pc, #48]	; (800dd50 <__libc_init_array+0x44>)
 800dd20:	f000 f82e 	bl	800dd80 <_init>
 800dd24:	1b64      	subs	r4, r4, r5
 800dd26:	10a4      	asrs	r4, r4, #2
 800dd28:	2600      	movs	r6, #0
 800dd2a:	42a6      	cmp	r6, r4
 800dd2c:	d105      	bne.n	800dd3a <__libc_init_array+0x2e>
 800dd2e:	bd70      	pop	{r4, r5, r6, pc}
 800dd30:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd34:	4798      	blx	r3
 800dd36:	3601      	adds	r6, #1
 800dd38:	e7ee      	b.n	800dd18 <__libc_init_array+0xc>
 800dd3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd3e:	4798      	blx	r3
 800dd40:	3601      	adds	r6, #1
 800dd42:	e7f2      	b.n	800dd2a <__libc_init_array+0x1e>
 800dd44:	0800de94 	.word	0x0800de94
 800dd48:	0800de94 	.word	0x0800de94
 800dd4c:	0800de94 	.word	0x0800de94
 800dd50:	0800de98 	.word	0x0800de98

0800dd54 <memcpy>:
 800dd54:	440a      	add	r2, r1
 800dd56:	4291      	cmp	r1, r2
 800dd58:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd5c:	d100      	bne.n	800dd60 <memcpy+0xc>
 800dd5e:	4770      	bx	lr
 800dd60:	b510      	push	{r4, lr}
 800dd62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd6a:	4291      	cmp	r1, r2
 800dd6c:	d1f9      	bne.n	800dd62 <memcpy+0xe>
 800dd6e:	bd10      	pop	{r4, pc}

0800dd70 <memset>:
 800dd70:	4402      	add	r2, r0
 800dd72:	4603      	mov	r3, r0
 800dd74:	4293      	cmp	r3, r2
 800dd76:	d100      	bne.n	800dd7a <memset+0xa>
 800dd78:	4770      	bx	lr
 800dd7a:	f803 1b01 	strb.w	r1, [r3], #1
 800dd7e:	e7f9      	b.n	800dd74 <memset+0x4>

0800dd80 <_init>:
 800dd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd82:	bf00      	nop
 800dd84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd86:	bc08      	pop	{r3}
 800dd88:	469e      	mov	lr, r3
 800dd8a:	4770      	bx	lr

0800dd8c <_fini>:
 800dd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd8e:	bf00      	nop
 800dd90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd92:	bc08      	pop	{r3}
 800dd94:	469e      	mov	lr, r3
 800dd96:	4770      	bx	lr
