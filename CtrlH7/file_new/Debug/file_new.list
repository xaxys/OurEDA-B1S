
file_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cff8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800d298  0800d298  0001d298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d388  0800d388  0001d388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d390  0800d390  0001d390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d394  0800d394  0001d394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  0800d398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000047fc  20000014  0800d3ac  00020014  2**2
                  ALLOC
  8 .RAM_D1       000000f0  24000000  0800d3ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 ._user_heap_stack 00000600  20004810  20004810  00034810  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002c2f0  00000000  00000000  0003011e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004a73  00000000  00000000  0005c40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001770  00000000  00000000  00060e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000015f8  00000000  00000000  000625f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039a77  00000000  00000000  00063bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001d9b8  00000000  00000000  0009d667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016ce97  00000000  00000000  000bb01f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00227eb6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000061b8  00000000  00000000  00227f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000014 	.word	0x20000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d280 	.word	0x0800d280

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000018 	.word	0x20000018
 80002dc:	0800d280 	.word	0x0800d280

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <CaptureDownData>:
__attribute__((section(".RAM_D1")))                                        u8 UpDataSend[Up_UART_TXLen] =
{ 0 };

//捕获上位向下位发送的数据
DownDataDef CaptureDownData(void)
{
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b090      	sub	sp, #64	; 0x40
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	DownDataDef CaptureData;

	CaptureData.StraightNum = ((DownDataReceive[1] << 8) | DownDataReceive[2]);
 80005e0:	4b4c      	ldr	r3, [pc, #304]	; (8000714 <CaptureDownData+0x13c>)
 80005e2:	785b      	ldrb	r3, [r3, #1]
 80005e4:	021b      	lsls	r3, r3, #8
 80005e6:	b21a      	sxth	r2, r3
 80005e8:	4b4a      	ldr	r3, [pc, #296]	; (8000714 <CaptureDownData+0x13c>)
 80005ea:	789b      	ldrb	r3, [r3, #2]
 80005ec:	b21b      	sxth	r3, r3
 80005ee:	4313      	orrs	r3, r2
 80005f0:	b21b      	sxth	r3, r3
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	81bb      	strh	r3, [r7, #12]
	CaptureData.RotateNum = ((DownDataReceive[3] << 8) | DownDataReceive[4]);
 80005f6:	4b47      	ldr	r3, [pc, #284]	; (8000714 <CaptureDownData+0x13c>)
 80005f8:	78db      	ldrb	r3, [r3, #3]
 80005fa:	021b      	lsls	r3, r3, #8
 80005fc:	b21a      	sxth	r2, r3
 80005fe:	4b45      	ldr	r3, [pc, #276]	; (8000714 <CaptureDownData+0x13c>)
 8000600:	791b      	ldrb	r3, [r3, #4]
 8000602:	b21b      	sxth	r3, r3
 8000604:	4313      	orrs	r3, r2
 8000606:	b21b      	sxth	r3, r3
 8000608:	b29b      	uxth	r3, r3
 800060a:	81fb      	strh	r3, [r7, #14]
	CaptureData.VerticalNum = ((DownDataReceive[5] << 8) | DownDataReceive[6]);
 800060c:	4b41      	ldr	r3, [pc, #260]	; (8000714 <CaptureDownData+0x13c>)
 800060e:	795b      	ldrb	r3, [r3, #5]
 8000610:	021b      	lsls	r3, r3, #8
 8000612:	b21a      	sxth	r2, r3
 8000614:	4b3f      	ldr	r3, [pc, #252]	; (8000714 <CaptureDownData+0x13c>)
 8000616:	799b      	ldrb	r3, [r3, #6]
 8000618:	b21b      	sxth	r3, r3
 800061a:	4313      	orrs	r3, r2
 800061c:	b21b      	sxth	r3, r3
 800061e:	b29b      	uxth	r3, r3
 8000620:	823b      	strh	r3, [r7, #16]
	CaptureData.LightPWM = ((DownDataReceive[7] << 8) | DownDataReceive[8]);
 8000622:	4b3c      	ldr	r3, [pc, #240]	; (8000714 <CaptureDownData+0x13c>)
 8000624:	79db      	ldrb	r3, [r3, #7]
 8000626:	021b      	lsls	r3, r3, #8
 8000628:	4a3a      	ldr	r2, [pc, #232]	; (8000714 <CaptureDownData+0x13c>)
 800062a:	7a12      	ldrb	r2, [r2, #8]
 800062c:	4313      	orrs	r3, r2
 800062e:	617b      	str	r3, [r7, #20]
	CaptureData.THPWM = ((DownDataReceive[9] << 8) | DownDataReceive[10]);
 8000630:	4b38      	ldr	r3, [pc, #224]	; (8000714 <CaptureDownData+0x13c>)
 8000632:	7a5b      	ldrb	r3, [r3, #9]
 8000634:	021b      	lsls	r3, r3, #8
 8000636:	4a37      	ldr	r2, [pc, #220]	; (8000714 <CaptureDownData+0x13c>)
 8000638:	7a92      	ldrb	r2, [r2, #10]
 800063a:	4313      	orrs	r3, r2
 800063c:	61bb      	str	r3, [r7, #24]
	CaptureData.TranspPWM = ((DownDataReceive[11] << 8) | DownDataReceive[12]);
 800063e:	4b35      	ldr	r3, [pc, #212]	; (8000714 <CaptureDownData+0x13c>)
 8000640:	7adb      	ldrb	r3, [r3, #11]
 8000642:	021b      	lsls	r3, r3, #8
 8000644:	4a33      	ldr	r2, [pc, #204]	; (8000714 <CaptureDownData+0x13c>)
 8000646:	7b12      	ldrb	r2, [r2, #12]
 8000648:	4313      	orrs	r3, r2
 800064a:	61fb      	str	r3, [r7, #28]
	CaptureData.ArmPWM[0] = ((DownDataReceive[13] << 8) | DownDataReceive[14]);
 800064c:	4b31      	ldr	r3, [pc, #196]	; (8000714 <CaptureDownData+0x13c>)
 800064e:	7b5b      	ldrb	r3, [r3, #13]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	4a30      	ldr	r2, [pc, #192]	; (8000714 <CaptureDownData+0x13c>)
 8000654:	7b92      	ldrb	r2, [r2, #14]
 8000656:	4313      	orrs	r3, r2
 8000658:	623b      	str	r3, [r7, #32]
	CaptureData.ArmPWM[1] = ((DownDataReceive[15] << 8) | DownDataReceive[16]);
 800065a:	4b2e      	ldr	r3, [pc, #184]	; (8000714 <CaptureDownData+0x13c>)
 800065c:	7bdb      	ldrb	r3, [r3, #15]
 800065e:	021b      	lsls	r3, r3, #8
 8000660:	4a2c      	ldr	r2, [pc, #176]	; (8000714 <CaptureDownData+0x13c>)
 8000662:	7c12      	ldrb	r2, [r2, #16]
 8000664:	4313      	orrs	r3, r2
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
	CaptureData.ArmPWM[2] = ((DownDataReceive[17] << 8) | DownDataReceive[18]);
 8000668:	4b2a      	ldr	r3, [pc, #168]	; (8000714 <CaptureDownData+0x13c>)
 800066a:	7c5b      	ldrb	r3, [r3, #17]
 800066c:	021b      	lsls	r3, r3, #8
 800066e:	4a29      	ldr	r2, [pc, #164]	; (8000714 <CaptureDownData+0x13c>)
 8000670:	7c92      	ldrb	r2, [r2, #18]
 8000672:	4313      	orrs	r3, r2
 8000674:	62bb      	str	r3, [r7, #40]	; 0x28
	CaptureData.ArmPWM[3] = ((DownDataReceive[19] << 8) | DownDataReceive[20]);
 8000676:	4b27      	ldr	r3, [pc, #156]	; (8000714 <CaptureDownData+0x13c>)
 8000678:	7cdb      	ldrb	r3, [r3, #19]
 800067a:	021b      	lsls	r3, r3, #8
 800067c:	4a25      	ldr	r2, [pc, #148]	; (8000714 <CaptureDownData+0x13c>)
 800067e:	7d12      	ldrb	r2, [r2, #20]
 8000680:	4313      	orrs	r3, r2
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
	CaptureData.ArmPWM[4] = ((DownDataReceive[21] << 8) | DownDataReceive[22]);
 8000684:	4b23      	ldr	r3, [pc, #140]	; (8000714 <CaptureDownData+0x13c>)
 8000686:	7d5b      	ldrb	r3, [r3, #21]
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	4a22      	ldr	r2, [pc, #136]	; (8000714 <CaptureDownData+0x13c>)
 800068c:	7d92      	ldrb	r2, [r2, #22]
 800068e:	4313      	orrs	r3, r2
 8000690:	633b      	str	r3, [r7, #48]	; 0x30
	CaptureData.ArmPWM[5] = ((DownDataReceive[23] << 8) | DownDataReceive[24]);
 8000692:	4b20      	ldr	r3, [pc, #128]	; (8000714 <CaptureDownData+0x13c>)
 8000694:	7ddb      	ldrb	r3, [r3, #23]
 8000696:	021b      	lsls	r3, r3, #8
 8000698:	4a1e      	ldr	r2, [pc, #120]	; (8000714 <CaptureDownData+0x13c>)
 800069a:	7e12      	ldrb	r2, [r2, #24]
 800069c:	4313      	orrs	r3, r2
 800069e:	637b      	str	r3, [r7, #52]	; 0x34
	CaptureData.ResPWM = ((DownDataReceive[25] << 8) | DownDataReceive[26]);
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <CaptureDownData+0x13c>)
 80006a2:	7e5b      	ldrb	r3, [r3, #25]
 80006a4:	021b      	lsls	r3, r3, #8
 80006a6:	4a1b      	ldr	r2, [pc, #108]	; (8000714 <CaptureDownData+0x13c>)
 80006a8:	7e92      	ldrb	r2, [r2, #26]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
	CaptureData.Mode = (DownDataReceive[27] & 0b0001);
 80006ae:	4b19      	ldr	r3, [pc, #100]	; (8000714 <CaptureDownData+0x13c>)
 80006b0:	7edb      	ldrb	r3, [r3, #27]
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	CaptureData.Relay = (DownDataReceive[27] & 0b1000);
 80006bc:	4b15      	ldr	r3, [pc, #84]	; (8000714 <CaptureDownData+0x13c>)
 80006be:	7edb      	ldrb	r3, [r3, #27]
 80006c0:	f003 0308 	and.w	r3, r3, #8
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	CaptureData.IdTest = IdTest(DownDataReceive, 0);
 80006ca:	2100      	movs	r1, #0
 80006cc:	4811      	ldr	r0, [pc, #68]	; (8000714 <CaptureDownData+0x13c>)
 80006ce:	f000 fc01 	bl	8000ed4 <IdTest>
 80006d2:	4603      	mov	r3, r0
 80006d4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	__HAL_UART_ENABLE_IT(&Up_UART, UART_IT_IDLE);
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <CaptureDownData+0x140>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <CaptureDownData+0x140>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f042 0210 	orr.w	r2, r2, #16
 80006e6:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Up_UART, DownDataReceive, Up_UART_RXLen);
 80006e8:	221e      	movs	r2, #30
 80006ea:	490a      	ldr	r1, [pc, #40]	; (8000714 <CaptureDownData+0x13c>)
 80006ec:	480a      	ldr	r0, [pc, #40]	; (8000718 <CaptureDownData+0x140>)
 80006ee:	f008 fd67 	bl	80091c0 <HAL_UART_Receive_DMA>

	return CaptureData;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	461d      	mov	r5, r3
 80006f6:	f107 040c 	add.w	r4, r7, #12
 80006fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000704:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000706:	6823      	ldr	r3, [r4, #0]
 8000708:	602b      	str	r3, [r5, #0]
}
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	3740      	adds	r7, #64	; 0x40
 800070e:	46bd      	mov	sp, r7
 8000710:	bdb0      	pop	{r4, r5, r7, pc}
 8000712:	bf00      	nop
 8000714:	24000000 	.word	0x24000000
 8000718:	20004430 	.word	0x20004430

0800071c <SendDownData>:

//向下位发送数据
void SendDownData(DownDataDef SendData)
{
 800071c:	b084      	sub	sp, #16
 800071e:	b580      	push	{r7, lr}
 8000720:	af00      	add	r7, sp, #0
 8000722:	f107 0c08 	add.w	ip, r7, #8
 8000726:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	DownDataSend[27] = (SendData.Mode | SendData.Relay);
//	DownDataSend[28] = XorCaculate(DownDataSend, 28);
//	DownDataSend[29] = 0x21;

	/* 下面是唯一指定正确答案 */
	DownDataSend[0] = 0x25;
 800072a:	4b4c      	ldr	r3, [pc, #304]	; (800085c <SendDownData+0x140>)
 800072c:	2225      	movs	r2, #37	; 0x25
 800072e:	701a      	strb	r2, [r3, #0]
	DownDataSend[1] = SendData.StraightNum >> 8;
 8000730:	893b      	ldrh	r3, [r7, #8]
 8000732:	0a1b      	lsrs	r3, r3, #8
 8000734:	b29b      	uxth	r3, r3
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b48      	ldr	r3, [pc, #288]	; (800085c <SendDownData+0x140>)
 800073a:	705a      	strb	r2, [r3, #1]
	DownDataSend[2] = SendData.StraightNum;
 800073c:	893b      	ldrh	r3, [r7, #8]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b46      	ldr	r3, [pc, #280]	; (800085c <SendDownData+0x140>)
 8000742:	709a      	strb	r2, [r3, #2]
	DownDataSend[3] = SendData.RotateNum >> 8;
 8000744:	897b      	ldrh	r3, [r7, #10]
 8000746:	0a1b      	lsrs	r3, r3, #8
 8000748:	b29b      	uxth	r3, r3
 800074a:	b2da      	uxtb	r2, r3
 800074c:	4b43      	ldr	r3, [pc, #268]	; (800085c <SendDownData+0x140>)
 800074e:	70da      	strb	r2, [r3, #3]
	DownDataSend[4] = SendData.RotateNum;
 8000750:	897b      	ldrh	r3, [r7, #10]
 8000752:	b2da      	uxtb	r2, r3
 8000754:	4b41      	ldr	r3, [pc, #260]	; (800085c <SendDownData+0x140>)
 8000756:	711a      	strb	r2, [r3, #4]
	DownDataSend[5] = SendData.VerticalNum >> 8;
 8000758:	89bb      	ldrh	r3, [r7, #12]
 800075a:	0a1b      	lsrs	r3, r3, #8
 800075c:	b29b      	uxth	r3, r3
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b3e      	ldr	r3, [pc, #248]	; (800085c <SendDownData+0x140>)
 8000762:	715a      	strb	r2, [r3, #5]
	DownDataSend[6] = SendData.VerticalNum;
 8000764:	89bb      	ldrh	r3, [r7, #12]
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b3c      	ldr	r3, [pc, #240]	; (800085c <SendDownData+0x140>)
 800076a:	719a      	strb	r2, [r3, #6]
	DownDataSend[7] = SendData.LightPWM >> 8;
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	0a1b      	lsrs	r3, r3, #8
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b3a      	ldr	r3, [pc, #232]	; (800085c <SendDownData+0x140>)
 8000774:	71da      	strb	r2, [r3, #7]
	DownDataSend[8] = SendData.LightPWM;
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b38      	ldr	r3, [pc, #224]	; (800085c <SendDownData+0x140>)
 800077c:	721a      	strb	r2, [r3, #8]
	DownDataSend[9] = SendData.THPWM >> 8;
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	0a1b      	lsrs	r3, r3, #8
 8000782:	b2da      	uxtb	r2, r3
 8000784:	4b35      	ldr	r3, [pc, #212]	; (800085c <SendDownData+0x140>)
 8000786:	725a      	strb	r2, [r3, #9]
	DownDataSend[10] = SendData.THPWM;
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b33      	ldr	r3, [pc, #204]	; (800085c <SendDownData+0x140>)
 800078e:	729a      	strb	r2, [r3, #10]
	DownDataSend[11] = SendData.TranspPWM >> 8;
 8000790:	69bb      	ldr	r3, [r7, #24]
 8000792:	0a1b      	lsrs	r3, r3, #8
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b31      	ldr	r3, [pc, #196]	; (800085c <SendDownData+0x140>)
 8000798:	72da      	strb	r2, [r3, #11]
	DownDataSend[12] = SendData.TranspPWM;
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b2f      	ldr	r3, [pc, #188]	; (800085c <SendDownData+0x140>)
 80007a0:	731a      	strb	r2, [r3, #12]
	DownDataSend[13] = SendData.ArmPWM[0] >> 8;
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b2c      	ldr	r3, [pc, #176]	; (800085c <SendDownData+0x140>)
 80007aa:	735a      	strb	r2, [r3, #13]
	DownDataSend[14] = SendData.ArmPWM[0];
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b2a      	ldr	r3, [pc, #168]	; (800085c <SendDownData+0x140>)
 80007b2:	739a      	strb	r2, [r3, #14]
	DownDataSend[15] = SendData.ArmPWM[1] >> 8;
 80007b4:	6a3b      	ldr	r3, [r7, #32]
 80007b6:	0a1b      	lsrs	r3, r3, #8
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b28      	ldr	r3, [pc, #160]	; (800085c <SendDownData+0x140>)
 80007bc:	73da      	strb	r2, [r3, #15]
	DownDataSend[16] = SendData.ArmPWM[1];
 80007be:	6a3b      	ldr	r3, [r7, #32]
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b26      	ldr	r3, [pc, #152]	; (800085c <SendDownData+0x140>)
 80007c4:	741a      	strb	r2, [r3, #16]
	DownDataSend[17] = SendData.ArmPWM[2] >> 8;
 80007c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c8:	0a1b      	lsrs	r3, r3, #8
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b23      	ldr	r3, [pc, #140]	; (800085c <SendDownData+0x140>)
 80007ce:	745a      	strb	r2, [r3, #17]
	DownDataSend[18] = SendData.ArmPWM[2];
 80007d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b21      	ldr	r3, [pc, #132]	; (800085c <SendDownData+0x140>)
 80007d6:	749a      	strb	r2, [r3, #18]
	DownDataSend[19] = SendData.ArmPWM[3] >> 8;
 80007d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007da:	0a1b      	lsrs	r3, r3, #8
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4b1f      	ldr	r3, [pc, #124]	; (800085c <SendDownData+0x140>)
 80007e0:	74da      	strb	r2, [r3, #19]
	DownDataSend[20] = SendData.ArmPWM[3];
 80007e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4b1d      	ldr	r3, [pc, #116]	; (800085c <SendDownData+0x140>)
 80007e8:	751a      	strb	r2, [r3, #20]
	DownDataSend[21] = SendData.ArmPWM[4] >> 8;
 80007ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ec:	0a1b      	lsrs	r3, r3, #8
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b1a      	ldr	r3, [pc, #104]	; (800085c <SendDownData+0x140>)
 80007f2:	755a      	strb	r2, [r3, #21]
	DownDataSend[22] = SendData.ArmPWM[4];
 80007f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <SendDownData+0x140>)
 80007fa:	759a      	strb	r2, [r3, #22]
	DownDataSend[23] = SendData.ArmPWM[5] >> 8;
 80007fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007fe:	0a1b      	lsrs	r3, r3, #8
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <SendDownData+0x140>)
 8000804:	75da      	strb	r2, [r3, #23]
	DownDataSend[24] = SendData.ArmPWM[5];
 8000806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <SendDownData+0x140>)
 800080c:	761a      	strb	r2, [r3, #24]
	DownDataSend[25] = SendData.ResPWM >> 8;
 800080e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000810:	0a1b      	lsrs	r3, r3, #8
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <SendDownData+0x140>)
 8000816:	765a      	strb	r2, [r3, #25]
	DownDataSend[26] = SendData.ResPWM;
 8000818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800081a:	b2da      	uxtb	r2, r3
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <SendDownData+0x140>)
 800081e:	769a      	strb	r2, [r3, #26]
	DownDataSend[27] = (SendData.Mode | SendData.Relay);
 8000820:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000824:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000828:	4313      	orrs	r3, r2
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b0b      	ldr	r3, [pc, #44]	; (800085c <SendDownData+0x140>)
 800082e:	76da      	strb	r2, [r3, #27]
	DownDataSend[28] = XorCaculate(DownDataSend, 28);
 8000830:	211c      	movs	r1, #28
 8000832:	480a      	ldr	r0, [pc, #40]	; (800085c <SendDownData+0x140>)
 8000834:	f000 fb76 	bl	8000f24 <XorCaculate>
 8000838:	4603      	mov	r3, r0
 800083a:	461a      	mov	r2, r3
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <SendDownData+0x140>)
 800083e:	771a      	strb	r2, [r3, #28]
	DownDataSend[29] = 0x21;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <SendDownData+0x140>)
 8000842:	2221      	movs	r2, #33	; 0x21
 8000844:	775a      	strb	r2, [r3, #29]
	HAL_UART_Transmit_DMA(&Down_UART, DownDataSend, Down_UART_TXLEN);
 8000846:	221e      	movs	r2, #30
 8000848:	4904      	ldr	r1, [pc, #16]	; (800085c <SendDownData+0x140>)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <SendDownData+0x144>)
 800084c:	f008 fc38 	bl	80090c0 <HAL_UART_Transmit_DMA>
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000858:	b004      	add	sp, #16
 800085a:	4770      	bx	lr
 800085c:	24000020 	.word	0x24000020
 8000860:	2000454c 	.word	0x2000454c

08000864 <CaptureUpData>:

//捕获下位向上位发送的数据
UpDataDef CaptureUpData(void)
{
 8000864:	b5b0      	push	{r4, r5, r7, lr}
 8000866:	b08c      	sub	sp, #48	; 0x30
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	UpDataDef CaptureData;
	CaptureData.CabinNum = (UpDataReceive[1] & 0b0001); //0总控制仓，1PWM控制仓
 800086c:	4b7a      	ldr	r3, [pc, #488]	; (8000a58 <CaptureUpData+0x1f4>)
 800086e:	785b      	ldrb	r3, [r3, #1]
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	b2db      	uxtb	r3, r3
 8000876:	723b      	strb	r3, [r7, #8]
	CaptureData.WaterDetect = (UpDataReceive[1] & 0b0110); //2控水；4电水
 8000878:	4b77      	ldr	r3, [pc, #476]	; (8000a58 <CaptureUpData+0x1f4>)
 800087a:	785b      	ldrb	r3, [r3, #1]
 800087c:	f003 0306 	and.w	r3, r3, #6
 8000880:	b2db      	uxtb	r3, r3
 8000882:	727b      	strb	r3, [r7, #9]
	CaptureData.CabinTemperature = ((UpDataReceive[3] << 8) | UpDataReceive[2]);
 8000884:	4b74      	ldr	r3, [pc, #464]	; (8000a58 <CaptureUpData+0x1f4>)
 8000886:	78db      	ldrb	r3, [r3, #3]
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	b21a      	sxth	r2, r3
 800088c:	4b72      	ldr	r3, [pc, #456]	; (8000a58 <CaptureUpData+0x1f4>)
 800088e:	789b      	ldrb	r3, [r3, #2]
 8000890:	b21b      	sxth	r3, r3
 8000892:	4313      	orrs	r3, r2
 8000894:	b21b      	sxth	r3, r3
 8000896:	b29b      	uxth	r3, r3
 8000898:	817b      	strh	r3, [r7, #10]
	CaptureData.CabinBaro = ((UpDataReceive[7] << 24) | (UpDataReceive[6] << 16)
 800089a:	4b6f      	ldr	r3, [pc, #444]	; (8000a58 <CaptureUpData+0x1f4>)
 800089c:	79db      	ldrb	r3, [r3, #7]
 800089e:	061a      	lsls	r2, r3, #24
 80008a0:	4b6d      	ldr	r3, [pc, #436]	; (8000a58 <CaptureUpData+0x1f4>)
 80008a2:	799b      	ldrb	r3, [r3, #6]
 80008a4:	041b      	lsls	r3, r3, #16
 80008a6:	431a      	orrs	r2, r3
			| (UpDataReceive[5] << 8) | UpDataReceive[4]);
 80008a8:	4b6b      	ldr	r3, [pc, #428]	; (8000a58 <CaptureUpData+0x1f4>)
 80008aa:	795b      	ldrb	r3, [r3, #5]
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	4313      	orrs	r3, r2
 80008b0:	4a69      	ldr	r2, [pc, #420]	; (8000a58 <CaptureUpData+0x1f4>)
 80008b2:	7912      	ldrb	r2, [r2, #4]
 80008b4:	4313      	orrs	r3, r2
	CaptureData.CabinBaro = ((UpDataReceive[7] << 24) | (UpDataReceive[6] << 16)
 80008b6:	60fb      	str	r3, [r7, #12]
	CaptureData.CabinHum = ((UpDataReceive[9] << 8) | UpDataReceive[8]);
 80008b8:	4b67      	ldr	r3, [pc, #412]	; (8000a58 <CaptureUpData+0x1f4>)
 80008ba:	7a5b      	ldrb	r3, [r3, #9]
 80008bc:	021b      	lsls	r3, r3, #8
 80008be:	b21a      	sxth	r2, r3
 80008c0:	4b65      	ldr	r3, [pc, #404]	; (8000a58 <CaptureUpData+0x1f4>)
 80008c2:	7a1b      	ldrb	r3, [r3, #8]
 80008c4:	b21b      	sxth	r3, r3
 80008c6:	4313      	orrs	r3, r2
 80008c8:	b21b      	sxth	r3, r3
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	823b      	strh	r3, [r7, #16]
	CaptureData.AccNum[0] = ((UpDataReceive[11] << 8) | UpDataReceive[10]);
 80008ce:	4b62      	ldr	r3, [pc, #392]	; (8000a58 <CaptureUpData+0x1f4>)
 80008d0:	7adb      	ldrb	r3, [r3, #11]
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	b21a      	sxth	r2, r3
 80008d6:	4b60      	ldr	r3, [pc, #384]	; (8000a58 <CaptureUpData+0x1f4>)
 80008d8:	7a9b      	ldrb	r3, [r3, #10]
 80008da:	b21b      	sxth	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b21b      	sxth	r3, r3
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	827b      	strh	r3, [r7, #18]
	CaptureData.AccNum[1] = ((UpDataReceive[13] << 8) | UpDataReceive[12]);
 80008e4:	4b5c      	ldr	r3, [pc, #368]	; (8000a58 <CaptureUpData+0x1f4>)
 80008e6:	7b5b      	ldrb	r3, [r3, #13]
 80008e8:	021b      	lsls	r3, r3, #8
 80008ea:	b21a      	sxth	r2, r3
 80008ec:	4b5a      	ldr	r3, [pc, #360]	; (8000a58 <CaptureUpData+0x1f4>)
 80008ee:	7b1b      	ldrb	r3, [r3, #12]
 80008f0:	b21b      	sxth	r3, r3
 80008f2:	4313      	orrs	r3, r2
 80008f4:	b21b      	sxth	r3, r3
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	82bb      	strh	r3, [r7, #20]
	CaptureData.AccNum[2] = ((UpDataReceive[15] << 8) | UpDataReceive[14]);
 80008fa:	4b57      	ldr	r3, [pc, #348]	; (8000a58 <CaptureUpData+0x1f4>)
 80008fc:	7bdb      	ldrb	r3, [r3, #15]
 80008fe:	021b      	lsls	r3, r3, #8
 8000900:	b21a      	sxth	r2, r3
 8000902:	4b55      	ldr	r3, [pc, #340]	; (8000a58 <CaptureUpData+0x1f4>)
 8000904:	7b9b      	ldrb	r3, [r3, #14]
 8000906:	b21b      	sxth	r3, r3
 8000908:	4313      	orrs	r3, r2
 800090a:	b21b      	sxth	r3, r3
 800090c:	b29b      	uxth	r3, r3
 800090e:	82fb      	strh	r3, [r7, #22]
	CaptureData.RotNum[0] = ((UpDataReceive[17] << 8) | UpDataReceive[16]);
 8000910:	4b51      	ldr	r3, [pc, #324]	; (8000a58 <CaptureUpData+0x1f4>)
 8000912:	7c5b      	ldrb	r3, [r3, #17]
 8000914:	021b      	lsls	r3, r3, #8
 8000916:	b21a      	sxth	r2, r3
 8000918:	4b4f      	ldr	r3, [pc, #316]	; (8000a58 <CaptureUpData+0x1f4>)
 800091a:	7c1b      	ldrb	r3, [r3, #16]
 800091c:	b21b      	sxth	r3, r3
 800091e:	4313      	orrs	r3, r2
 8000920:	b21b      	sxth	r3, r3
 8000922:	b29b      	uxth	r3, r3
 8000924:	833b      	strh	r3, [r7, #24]
	CaptureData.RotNum[1] = ((UpDataReceive[19] << 8) | UpDataReceive[18]);
 8000926:	4b4c      	ldr	r3, [pc, #304]	; (8000a58 <CaptureUpData+0x1f4>)
 8000928:	7cdb      	ldrb	r3, [r3, #19]
 800092a:	021b      	lsls	r3, r3, #8
 800092c:	b21a      	sxth	r2, r3
 800092e:	4b4a      	ldr	r3, [pc, #296]	; (8000a58 <CaptureUpData+0x1f4>)
 8000930:	7c9b      	ldrb	r3, [r3, #18]
 8000932:	b21b      	sxth	r3, r3
 8000934:	4313      	orrs	r3, r2
 8000936:	b21b      	sxth	r3, r3
 8000938:	b29b      	uxth	r3, r3
 800093a:	837b      	strh	r3, [r7, #26]
	CaptureData.RotNum[2] = ((UpDataReceive[21] << 8) | UpDataReceive[20]);
 800093c:	4b46      	ldr	r3, [pc, #280]	; (8000a58 <CaptureUpData+0x1f4>)
 800093e:	7d5b      	ldrb	r3, [r3, #21]
 8000940:	021b      	lsls	r3, r3, #8
 8000942:	b21a      	sxth	r2, r3
 8000944:	4b44      	ldr	r3, [pc, #272]	; (8000a58 <CaptureUpData+0x1f4>)
 8000946:	7d1b      	ldrb	r3, [r3, #20]
 8000948:	b21b      	sxth	r3, r3
 800094a:	4313      	orrs	r3, r2
 800094c:	b21b      	sxth	r3, r3
 800094e:	b29b      	uxth	r3, r3
 8000950:	83bb      	strh	r3, [r7, #28]
	CaptureData.EulNum[0] = ((UpDataReceive[23] << 8) | UpDataReceive[22]);
 8000952:	4b41      	ldr	r3, [pc, #260]	; (8000a58 <CaptureUpData+0x1f4>)
 8000954:	7ddb      	ldrb	r3, [r3, #23]
 8000956:	021b      	lsls	r3, r3, #8
 8000958:	b21a      	sxth	r2, r3
 800095a:	4b3f      	ldr	r3, [pc, #252]	; (8000a58 <CaptureUpData+0x1f4>)
 800095c:	7d9b      	ldrb	r3, [r3, #22]
 800095e:	b21b      	sxth	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b21b      	sxth	r3, r3
 8000964:	b29b      	uxth	r3, r3
 8000966:	83fb      	strh	r3, [r7, #30]
	CaptureData.EulNum[1] = ((UpDataReceive[25] << 8) | UpDataReceive[24]);
 8000968:	4b3b      	ldr	r3, [pc, #236]	; (8000a58 <CaptureUpData+0x1f4>)
 800096a:	7e5b      	ldrb	r3, [r3, #25]
 800096c:	021b      	lsls	r3, r3, #8
 800096e:	b21a      	sxth	r2, r3
 8000970:	4b39      	ldr	r3, [pc, #228]	; (8000a58 <CaptureUpData+0x1f4>)
 8000972:	7e1b      	ldrb	r3, [r3, #24]
 8000974:	b21b      	sxth	r3, r3
 8000976:	4313      	orrs	r3, r2
 8000978:	b21b      	sxth	r3, r3
 800097a:	b29b      	uxth	r3, r3
 800097c:	843b      	strh	r3, [r7, #32]
	CaptureData.EulNum[2] = ((UpDataReceive[27] << 8) | UpDataReceive[26]);
 800097e:	4b36      	ldr	r3, [pc, #216]	; (8000a58 <CaptureUpData+0x1f4>)
 8000980:	7edb      	ldrb	r3, [r3, #27]
 8000982:	021b      	lsls	r3, r3, #8
 8000984:	b21a      	sxth	r2, r3
 8000986:	4b34      	ldr	r3, [pc, #208]	; (8000a58 <CaptureUpData+0x1f4>)
 8000988:	7e9b      	ldrb	r3, [r3, #26]
 800098a:	b21b      	sxth	r3, r3
 800098c:	4313      	orrs	r3, r2
 800098e:	b21b      	sxth	r3, r3
 8000990:	b29b      	uxth	r3, r3
 8000992:	847b      	strh	r3, [r7, #34]	; 0x22
	CaptureData.MagNum[0] = ((UpDataReceive[29] << 8) | UpDataReceive[28]);
 8000994:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <CaptureUpData+0x1f4>)
 8000996:	7f5b      	ldrb	r3, [r3, #29]
 8000998:	021b      	lsls	r3, r3, #8
 800099a:	b21a      	sxth	r2, r3
 800099c:	4b2e      	ldr	r3, [pc, #184]	; (8000a58 <CaptureUpData+0x1f4>)
 800099e:	7f1b      	ldrb	r3, [r3, #28]
 80009a0:	b21b      	sxth	r3, r3
 80009a2:	4313      	orrs	r3, r2
 80009a4:	b21b      	sxth	r3, r3
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	84bb      	strh	r3, [r7, #36]	; 0x24
	CaptureData.MagNum[1] = ((UpDataReceive[31] << 8) | UpDataReceive[30]);
 80009aa:	4b2b      	ldr	r3, [pc, #172]	; (8000a58 <CaptureUpData+0x1f4>)
 80009ac:	7fdb      	ldrb	r3, [r3, #31]
 80009ae:	021b      	lsls	r3, r3, #8
 80009b0:	b21a      	sxth	r2, r3
 80009b2:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <CaptureUpData+0x1f4>)
 80009b4:	7f9b      	ldrb	r3, [r3, #30]
 80009b6:	b21b      	sxth	r3, r3
 80009b8:	4313      	orrs	r3, r2
 80009ba:	b21b      	sxth	r3, r3
 80009bc:	b29b      	uxth	r3, r3
 80009be:	84fb      	strh	r3, [r7, #38]	; 0x26
	CaptureData.MagNum[2] = ((UpDataReceive[33] << 8) | UpDataReceive[32]);
 80009c0:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <CaptureUpData+0x1f4>)
 80009c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009c6:	021b      	lsls	r3, r3, #8
 80009c8:	b21a      	sxth	r2, r3
 80009ca:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <CaptureUpData+0x1f4>)
 80009cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009d0:	b21b      	sxth	r3, r3
 80009d2:	4313      	orrs	r3, r2
 80009d4:	b21b      	sxth	r3, r3
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	853b      	strh	r3, [r7, #40]	; 0x28
	CaptureData.WaterTemperature =
			((UpDataReceive[35] << 8) | UpDataReceive[34]);
 80009da:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <CaptureUpData+0x1f4>)
 80009dc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80009e0:	021b      	lsls	r3, r3, #8
 80009e2:	b21a      	sxth	r2, r3
 80009e4:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <CaptureUpData+0x1f4>)
 80009e6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	4313      	orrs	r3, r2
 80009ee:	b21b      	sxth	r3, r3
 80009f0:	b29b      	uxth	r3, r3
	CaptureData.WaterTemperature =
 80009f2:	857b      	strh	r3, [r7, #42]	; 0x2a
	CaptureData.WaterDepth = ((UpDataReceive[37] << 8) | UpDataReceive[36]);
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <CaptureUpData+0x1f4>)
 80009f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80009fa:	021b      	lsls	r3, r3, #8
 80009fc:	b21a      	sxth	r2, r3
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <CaptureUpData+0x1f4>)
 8000a00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a04:	b21b      	sxth	r3, r3
 8000a06:	4313      	orrs	r3, r2
 8000a08:	b21b      	sxth	r3, r3
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	CaptureData.IdTest = IdTest(UpDataReceive, 1);
 8000a0e:	2101      	movs	r1, #1
 8000a10:	4811      	ldr	r0, [pc, #68]	; (8000a58 <CaptureUpData+0x1f4>)
 8000a12:	f000 fa5f 	bl	8000ed4 <IdTest>
 8000a16:	4603      	mov	r3, r0
 8000a18:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	__HAL_UART_ENABLE_IT(&Down_UART, UART_IT_IDLE);
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <CaptureUpData+0x1f8>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <CaptureUpData+0x1f8>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f042 0210 	orr.w	r2, r2, #16
 8000a2a:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Down_UART, DownDataReceive, Down_UART_RXLen);
 8000a2c:	2229      	movs	r2, #41	; 0x29
 8000a2e:	490c      	ldr	r1, [pc, #48]	; (8000a60 <CaptureUpData+0x1fc>)
 8000a30:	480a      	ldr	r0, [pc, #40]	; (8000a5c <CaptureUpData+0x1f8>)
 8000a32:	f008 fbc5 	bl	80091c0 <HAL_UART_Receive_DMA>
	return CaptureData;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	461d      	mov	r5, r3
 8000a3a:	f107 0408 	add.w	r4, r7, #8
 8000a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a4a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	3730      	adds	r7, #48	; 0x30
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bdb0      	pop	{r4, r5, r7, pc}
 8000a56:	bf00      	nop
 8000a58:	24000040 	.word	0x24000040
 8000a5c:	2000454c 	.word	0x2000454c
 8000a60:	24000000 	.word	0x24000000

08000a64 <SendUpData>:

//向上位机发送数据
void SendUpData(UpDataDef SendData)
{
 8000a64:	b084      	sub	sp, #16
 8000a66:	b580      	push	{r7, lr}
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	f107 0c08 	add.w	ip, r7, #8
 8000a6e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	UpDataSend[0] = 0x25;
 8000a72:	4b6f      	ldr	r3, [pc, #444]	; (8000c30 <SendUpData+0x1cc>)
 8000a74:	2225      	movs	r2, #37	; 0x25
 8000a76:	701a      	strb	r2, [r3, #0]
	UpDataSend[1] = (SendData.CabinNum | SendData.WaterDetect);
 8000a78:	7a3a      	ldrb	r2, [r7, #8]
 8000a7a:	7a7b      	ldrb	r3, [r7, #9]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	4b6b      	ldr	r3, [pc, #428]	; (8000c30 <SendUpData+0x1cc>)
 8000a82:	705a      	strb	r2, [r3, #1]
	UpDataSend[2] = SendData.CabinTemperature;
 8000a84:	897b      	ldrh	r3, [r7, #10]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b69      	ldr	r3, [pc, #420]	; (8000c30 <SendUpData+0x1cc>)
 8000a8a:	709a      	strb	r2, [r3, #2]
	UpDataSend[3] = SendData.CabinTemperature >> 8;
 8000a8c:	897b      	ldrh	r3, [r7, #10]
 8000a8e:	0a1b      	lsrs	r3, r3, #8
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b66      	ldr	r3, [pc, #408]	; (8000c30 <SendUpData+0x1cc>)
 8000a96:	70da      	strb	r2, [r3, #3]
	UpDataSend[4] = SendData.CabinBaro;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b64      	ldr	r3, [pc, #400]	; (8000c30 <SendUpData+0x1cc>)
 8000a9e:	711a      	strb	r2, [r3, #4]
	UpDataSend[5] = SendData.CabinBaro >> 8;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	0a1b      	lsrs	r3, r3, #8
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4b62      	ldr	r3, [pc, #392]	; (8000c30 <SendUpData+0x1cc>)
 8000aa8:	715a      	strb	r2, [r3, #5]
	UpDataSend[6] = SendData.CabinBaro >> 16;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	0c1b      	lsrs	r3, r3, #16
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b5f      	ldr	r3, [pc, #380]	; (8000c30 <SendUpData+0x1cc>)
 8000ab2:	719a      	strb	r2, [r3, #6]
	UpDataSend[7] = SendData.CabinBaro >> 24;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	0e1b      	lsrs	r3, r3, #24
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4b5d      	ldr	r3, [pc, #372]	; (8000c30 <SendUpData+0x1cc>)
 8000abc:	71da      	strb	r2, [r3, #7]
	UpDataSend[8] = SendData.CabinHum;
 8000abe:	8a3b      	ldrh	r3, [r7, #16]
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4b5b      	ldr	r3, [pc, #364]	; (8000c30 <SendUpData+0x1cc>)
 8000ac4:	721a      	strb	r2, [r3, #8]
	UpDataSend[9] = SendData.CabinHum >> 8;
 8000ac6:	8a3b      	ldrh	r3, [r7, #16]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4b58      	ldr	r3, [pc, #352]	; (8000c30 <SendUpData+0x1cc>)
 8000ad0:	725a      	strb	r2, [r3, #9]
	UpDataSend[10] = SendData.AccNum[0];
 8000ad2:	8a7b      	ldrh	r3, [r7, #18]
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b56      	ldr	r3, [pc, #344]	; (8000c30 <SendUpData+0x1cc>)
 8000ad8:	729a      	strb	r2, [r3, #10]
	UpDataSend[11] = SendData.AccNum[0] >> 8;
 8000ada:	8a7b      	ldrh	r3, [r7, #18]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4b53      	ldr	r3, [pc, #332]	; (8000c30 <SendUpData+0x1cc>)
 8000ae4:	72da      	strb	r2, [r3, #11]
	UpDataSend[12] = SendData.AccNum[1];
 8000ae6:	8abb      	ldrh	r3, [r7, #20]
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4b51      	ldr	r3, [pc, #324]	; (8000c30 <SendUpData+0x1cc>)
 8000aec:	731a      	strb	r2, [r3, #12]
	UpDataSend[13] = SendData.AccNum[1] >> 8;
 8000aee:	8abb      	ldrh	r3, [r7, #20]
 8000af0:	0a1b      	lsrs	r3, r3, #8
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b4e      	ldr	r3, [pc, #312]	; (8000c30 <SendUpData+0x1cc>)
 8000af8:	735a      	strb	r2, [r3, #13]
	UpDataSend[14] = SendData.AccNum[2];
 8000afa:	8afb      	ldrh	r3, [r7, #22]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4b4c      	ldr	r3, [pc, #304]	; (8000c30 <SendUpData+0x1cc>)
 8000b00:	739a      	strb	r2, [r3, #14]
	UpDataSend[15] = SendData.AccNum[2] >> 8;
 8000b02:	8afb      	ldrh	r3, [r7, #22]
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4b49      	ldr	r3, [pc, #292]	; (8000c30 <SendUpData+0x1cc>)
 8000b0c:	73da      	strb	r2, [r3, #15]
	UpDataSend[16] = SendData.RotNum[0];
 8000b0e:	8b3b      	ldrh	r3, [r7, #24]
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4b47      	ldr	r3, [pc, #284]	; (8000c30 <SendUpData+0x1cc>)
 8000b14:	741a      	strb	r2, [r3, #16]
	UpDataSend[17] = SendData.RotNum[0] >> 8;
 8000b16:	8b3b      	ldrh	r3, [r7, #24]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4b44      	ldr	r3, [pc, #272]	; (8000c30 <SendUpData+0x1cc>)
 8000b20:	745a      	strb	r2, [r3, #17]
	UpDataSend[18] = SendData.RotNum[1];
 8000b22:	8b7b      	ldrh	r3, [r7, #26]
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4b42      	ldr	r3, [pc, #264]	; (8000c30 <SendUpData+0x1cc>)
 8000b28:	749a      	strb	r2, [r3, #18]
	UpDataSend[19] = SendData.RotNum[1] >> 8;
 8000b2a:	8b7b      	ldrh	r3, [r7, #26]
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4b3f      	ldr	r3, [pc, #252]	; (8000c30 <SendUpData+0x1cc>)
 8000b34:	74da      	strb	r2, [r3, #19]
	UpDataSend[20] = SendData.RotNum[2];
 8000b36:	8bbb      	ldrh	r3, [r7, #28]
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4b3d      	ldr	r3, [pc, #244]	; (8000c30 <SendUpData+0x1cc>)
 8000b3c:	751a      	strb	r2, [r3, #20]
	UpDataSend[21] = SendData.RotNum[2] >> 8;
 8000b3e:	8bbb      	ldrh	r3, [r7, #28]
 8000b40:	0a1b      	lsrs	r3, r3, #8
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4b3a      	ldr	r3, [pc, #232]	; (8000c30 <SendUpData+0x1cc>)
 8000b48:	755a      	strb	r2, [r3, #21]
	UpDataSend[22] = SendData.EulNum[0];
 8000b4a:	8bfb      	ldrh	r3, [r7, #30]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4b38      	ldr	r3, [pc, #224]	; (8000c30 <SendUpData+0x1cc>)
 8000b50:	759a      	strb	r2, [r3, #22]
	UpDataSend[23] = SendData.EulNum[0] >> 8;
 8000b52:	8bfb      	ldrh	r3, [r7, #30]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4b35      	ldr	r3, [pc, #212]	; (8000c30 <SendUpData+0x1cc>)
 8000b5c:	75da      	strb	r2, [r3, #23]
	UpDataSend[24] = SendData.EulNum[1];
 8000b5e:	8c3b      	ldrh	r3, [r7, #32]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4b33      	ldr	r3, [pc, #204]	; (8000c30 <SendUpData+0x1cc>)
 8000b64:	761a      	strb	r2, [r3, #24]
	UpDataSend[25] = SendData.EulNum[1] >> 8;
 8000b66:	8c3b      	ldrh	r3, [r7, #32]
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4b30      	ldr	r3, [pc, #192]	; (8000c30 <SendUpData+0x1cc>)
 8000b70:	765a      	strb	r2, [r3, #25]
	UpDataSend[26] = SendData.EulNum[2];
 8000b72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4b2e      	ldr	r3, [pc, #184]	; (8000c30 <SendUpData+0x1cc>)
 8000b78:	769a      	strb	r2, [r3, #26]
	UpDataSend[27] = SendData.EulNum[2] >> 8;
 8000b7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000b7c:	0a1b      	lsrs	r3, r3, #8
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4b2b      	ldr	r3, [pc, #172]	; (8000c30 <SendUpData+0x1cc>)
 8000b84:	76da      	strb	r2, [r3, #27]
	UpDataSend[28] = SendData.MagNum[0];
 8000b86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4b29      	ldr	r3, [pc, #164]	; (8000c30 <SendUpData+0x1cc>)
 8000b8c:	771a      	strb	r2, [r3, #28]
	UpDataSend[29] = SendData.MagNum[0] >> 8;
 8000b8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4b26      	ldr	r3, [pc, #152]	; (8000c30 <SendUpData+0x1cc>)
 8000b98:	775a      	strb	r2, [r3, #29]
	UpDataSend[30] = SendData.MagNum[1];
 8000b9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <SendUpData+0x1cc>)
 8000ba0:	779a      	strb	r2, [r3, #30]
	UpDataSend[31] = SendData.MagNum[1] >> 8;
 8000ba2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <SendUpData+0x1cc>)
 8000bac:	77da      	strb	r2, [r3, #31]
	UpDataSend[32] = SendData.MagNum[2];
 8000bae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <SendUpData+0x1cc>)
 8000bb4:	f883 2020 	strb.w	r2, [r3, #32]
	UpDataSend[33] = SendData.MagNum[2] >> 8;
 8000bb8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bba:	0a1b      	lsrs	r3, r3, #8
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <SendUpData+0x1cc>)
 8000bc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	UpDataSend[34] = SendData.WaterTemperature;
 8000bc6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <SendUpData+0x1cc>)
 8000bcc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	UpDataSend[35] = SendData.WaterTemperature >> 8;
 8000bd0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000bd2:	0a1b      	lsrs	r3, r3, #8
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <SendUpData+0x1cc>)
 8000bda:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	UpDataSend[36] = SendData.WaterDepth;
 8000bde:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <SendUpData+0x1cc>)
 8000be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	UpDataSend[37] = SendData.WaterDepth >> 8;
 8000be8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000bea:	0a1b      	lsrs	r3, r3, #8
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <SendUpData+0x1cc>)
 8000bf2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UpDataSend[38] = XorCaculate(UpDataSend, 38);
 8000bf6:	2126      	movs	r1, #38	; 0x26
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <SendUpData+0x1cc>)
 8000bfa:	f000 f993 	bl	8000f24 <XorCaculate>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <SendUpData+0x1cc>)
 8000c04:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	UpDataSend[39] = 0xff;
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <SendUpData+0x1cc>)
 8000c0a:	22ff      	movs	r2, #255	; 0xff
 8000c0c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	UpDataSend[40] = 0xff;
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <SendUpData+0x1cc>)
 8000c12:	22ff      	movs	r2, #255	; 0xff
 8000c14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	HAL_UART_Transmit_DMA(&Up_UART, UpDataSend, Up_UART_TXLen);
 8000c18:	2229      	movs	r2, #41	; 0x29
 8000c1a:	4905      	ldr	r1, [pc, #20]	; (8000c30 <SendUpData+0x1cc>)
 8000c1c:	4805      	ldr	r0, [pc, #20]	; (8000c34 <SendUpData+0x1d0>)
 8000c1e:	f008 fa4f 	bl	80090c0 <HAL_UART_Transmit_DMA>
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c2a:	b004      	add	sp, #16
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	2400006c 	.word	0x2400006c
 8000c34:	20004430 	.word	0x20004430

08000c38 <SpecialMovePID>:
	return ThrusterTemp;
}

//PID算法运行
u16 SpecialMovePID(u8 ModeType, u16 SetValue, u16 ActualValue)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
 8000c42:	460b      	mov	r3, r1
 8000c44:	80bb      	strh	r3, [r7, #4]
 8000c46:	4613      	mov	r3, r2
 8000c48:	807b      	strh	r3, [r7, #2]
//累计积分位置
	static float LocSum;
//数据清空标志位
	static u8 PIDData = 0;

	if (ModeType == 4)
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2b04      	cmp	r3, #4
 8000c4e:	f040 808e 	bne.w	8000d6e <SpecialMovePID+0x136>
	{
		PIDData = 0;
 8000c52:	4b98      	ldr	r3, [pc, #608]	; (8000eb4 <SpecialMovePID+0x27c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
		u16 PIDLoc;
		Ek = (float) (SetValue - ActualValue);
 8000c58:	88ba      	ldrh	r2, [r7, #4]
 8000c5a:	887b      	ldrh	r3, [r7, #2]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	ee07 3a90 	vmov	s15, r3
 8000c62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c66:	4b94      	ldr	r3, [pc, #592]	; (8000eb8 <SpecialMovePID+0x280>)
 8000c68:	edc3 7a00 	vstr	s15, [r3]
		LocSum += Ek;
 8000c6c:	4b93      	ldr	r3, [pc, #588]	; (8000ebc <SpecialMovePID+0x284>)
 8000c6e:	ed93 7a00 	vldr	s14, [r3]
 8000c72:	4b91      	ldr	r3, [pc, #580]	; (8000eb8 <SpecialMovePID+0x280>)
 8000c74:	edd3 7a00 	vldr	s15, [r3]
 8000c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c7c:	4b8f      	ldr	r3, [pc, #572]	; (8000ebc <SpecialMovePID+0x284>)
 8000c7e:	edc3 7a00 	vstr	s15, [r3]
		PIDLoc =
				(u16) (1500
						+ range(
 8000c82:	4b8d      	ldr	r3, [pc, #564]	; (8000eb8 <SpecialMovePID+0x280>)
 8000c84:	edd3 7a00 	vldr	s15, [r3]
 8000c88:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8000ec0 <SpecialMovePID+0x288>
 8000c8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c90:	4b8a      	ldr	r3, [pc, #552]	; (8000ebc <SpecialMovePID+0x284>)
 8000c92:	edd3 7a00 	vldr	s15, [r3]
 8000c96:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000c9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c9e:	4b89      	ldr	r3, [pc, #548]	; (8000ec4 <SpecialMovePID+0x28c>)
 8000ca0:	edd3 6a00 	vldr	s13, [r3]
 8000ca4:	4b84      	ldr	r3, [pc, #528]	; (8000eb8 <SpecialMovePID+0x280>)
 8000ca6:	edd3 7a00 	vldr	s15, [r3]
 8000caa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000cae:	eddf 6a86 	vldr	s13, [pc, #536]	; 8000ec8 <SpecialMovePID+0x290>
 8000cb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cbe:	ee17 3a90 	vmov	r3, s15
 8000cc2:	b21b      	sxth	r3, r3
				(u16) (1500
 8000cc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cc8:	da4c      	bge.n	8000d64 <SpecialMovePID+0x12c>
						+ range(
 8000cca:	4b7b      	ldr	r3, [pc, #492]	; (8000eb8 <SpecialMovePID+0x280>)
 8000ccc:	edd3 7a00 	vldr	s15, [r3]
 8000cd0:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8000ec0 <SpecialMovePID+0x288>
 8000cd4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cd8:	4b78      	ldr	r3, [pc, #480]	; (8000ebc <SpecialMovePID+0x284>)
 8000cda:	edd3 7a00 	vldr	s15, [r3]
 8000cde:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000ce2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ce6:	4b77      	ldr	r3, [pc, #476]	; (8000ec4 <SpecialMovePID+0x28c>)
 8000ce8:	edd3 6a00 	vldr	s13, [r3]
 8000cec:	4b72      	ldr	r3, [pc, #456]	; (8000eb8 <SpecialMovePID+0x280>)
 8000cee:	edd3 7a00 	vldr	s15, [r3]
 8000cf2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000cf6:	eddf 6a74 	vldr	s13, [pc, #464]	; 8000ec8 <SpecialMovePID+0x290>
 8000cfa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d06:	ee17 3a90 	vmov	r3, s15
 8000d0a:	b21b      	sxth	r3, r3
 8000d0c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8000d10:	dd25      	ble.n	8000d5e <SpecialMovePID+0x126>
 8000d12:	4b69      	ldr	r3, [pc, #420]	; (8000eb8 <SpecialMovePID+0x280>)
 8000d14:	edd3 7a00 	vldr	s15, [r3]
 8000d18:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8000ec0 <SpecialMovePID+0x288>
 8000d1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d20:	4b66      	ldr	r3, [pc, #408]	; (8000ebc <SpecialMovePID+0x284>)
 8000d22:	edd3 7a00 	vldr	s15, [r3]
 8000d26:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d2e:	4b65      	ldr	r3, [pc, #404]	; (8000ec4 <SpecialMovePID+0x28c>)
 8000d30:	edd3 6a00 	vldr	s13, [r3]
 8000d34:	4b60      	ldr	r3, [pc, #384]	; (8000eb8 <SpecialMovePID+0x280>)
 8000d36:	edd3 7a00 	vldr	s15, [r3]
 8000d3a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000d3e:	eddf 6a62 	vldr	s13, [pc, #392]	; 8000ec8 <SpecialMovePID+0x290>
 8000d42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d4e:	ee17 3a90 	vmov	r3, s15
 8000d52:	b21b      	sxth	r3, r3
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	e004      	b.n	8000d68 <SpecialMovePID+0x130>
 8000d5e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d62:	e001      	b.n	8000d68 <SpecialMovePID+0x130>
				(u16) (1500
 8000d64:	f640 13c4 	movw	r3, #2500	; 0x9c4
		PIDLoc =
 8000d68:	81bb      	strh	r3, [r7, #12]
								(int16_t)(PID_D_Kp * Ek + (PID_D_Ki * LocSum) + PID_D_Kd * (Ek1 - Ek)),
								-1000, 1000));
		return PIDLoc;
 8000d6a:	89bb      	ldrh	r3, [r7, #12]
 8000d6c:	e09b      	b.n	8000ea6 <SpecialMovePID+0x26e>
	}
	else if (ModeType == 2)
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	f040 8088 	bne.w	8000e86 <SpecialMovePID+0x24e>
	{
		PIDData = 0;
 8000d76:	4b4f      	ldr	r3, [pc, #316]	; (8000eb4 <SpecialMovePID+0x27c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
		u16 PIDLoc;
		Ek = (float) (SetValue - ActualValue);
 8000d7c:	88ba      	ldrh	r2, [r7, #4]
 8000d7e:	887b      	ldrh	r3, [r7, #2]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	ee07 3a90 	vmov	s15, r3
 8000d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d8a:	4b4b      	ldr	r3, [pc, #300]	; (8000eb8 <SpecialMovePID+0x280>)
 8000d8c:	edc3 7a00 	vstr	s15, [r3]
		LocSum += Ek;
 8000d90:	4b4a      	ldr	r3, [pc, #296]	; (8000ebc <SpecialMovePID+0x284>)
 8000d92:	ed93 7a00 	vldr	s14, [r3]
 8000d96:	4b48      	ldr	r3, [pc, #288]	; (8000eb8 <SpecialMovePID+0x280>)
 8000d98:	edd3 7a00 	vldr	s15, [r3]
 8000d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da0:	4b46      	ldr	r3, [pc, #280]	; (8000ebc <SpecialMovePID+0x284>)
 8000da2:	edc3 7a00 	vstr	s15, [r3]
		PIDLoc =
				(u16) (1500
						+ range(
 8000da6:	4b44      	ldr	r3, [pc, #272]	; (8000eb8 <SpecialMovePID+0x280>)
 8000da8:	edd3 7a00 	vldr	s15, [r3]
 8000dac:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000ecc <SpecialMovePID+0x294>
 8000db0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000db4:	4b41      	ldr	r3, [pc, #260]	; (8000ebc <SpecialMovePID+0x284>)
 8000db6:	edd3 7a00 	vldr	s15, [r3]
 8000dba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dbe:	4b41      	ldr	r3, [pc, #260]	; (8000ec4 <SpecialMovePID+0x28c>)
 8000dc0:	edd3 6a00 	vldr	s13, [r3]
 8000dc4:	4b3c      	ldr	r3, [pc, #240]	; (8000eb8 <SpecialMovePID+0x280>)
 8000dc6:	edd3 7a00 	vldr	s15, [r3]
 8000dca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000dce:	eddf 6a40 	vldr	s13, [pc, #256]	; 8000ed0 <SpecialMovePID+0x298>
 8000dd2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dde:	ee17 3a90 	vmov	r3, s15
 8000de2:	b21b      	sxth	r3, r3
				(u16) (1500
 8000de4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000de8:	da48      	bge.n	8000e7c <SpecialMovePID+0x244>
						+ range(
 8000dea:	4b33      	ldr	r3, [pc, #204]	; (8000eb8 <SpecialMovePID+0x280>)
 8000dec:	edd3 7a00 	vldr	s15, [r3]
 8000df0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000ecc <SpecialMovePID+0x294>
 8000df4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000df8:	4b30      	ldr	r3, [pc, #192]	; (8000ebc <SpecialMovePID+0x284>)
 8000dfa:	edd3 7a00 	vldr	s15, [r3]
 8000dfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e02:	4b30      	ldr	r3, [pc, #192]	; (8000ec4 <SpecialMovePID+0x28c>)
 8000e04:	edd3 6a00 	vldr	s13, [r3]
 8000e08:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <SpecialMovePID+0x280>)
 8000e0a:	edd3 7a00 	vldr	s15, [r3]
 8000e0e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e12:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8000ed0 <SpecialMovePID+0x298>
 8000e16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000e1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e22:	ee17 3a90 	vmov	r3, s15
 8000e26:	b21b      	sxth	r3, r3
 8000e28:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8000e2c:	dd23      	ble.n	8000e76 <SpecialMovePID+0x23e>
 8000e2e:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <SpecialMovePID+0x280>)
 8000e30:	edd3 7a00 	vldr	s15, [r3]
 8000e34:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000ecc <SpecialMovePID+0x294>
 8000e38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e3c:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <SpecialMovePID+0x284>)
 8000e3e:	edd3 7a00 	vldr	s15, [r3]
 8000e42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e46:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <SpecialMovePID+0x28c>)
 8000e48:	edd3 6a00 	vldr	s13, [r3]
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <SpecialMovePID+0x280>)
 8000e4e:	edd3 7a00 	vldr	s15, [r3]
 8000e52:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e56:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000ed0 <SpecialMovePID+0x298>
 8000e5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000e5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e66:	ee17 3a90 	vmov	r3, s15
 8000e6a:	b21b      	sxth	r3, r3
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	e004      	b.n	8000e80 <SpecialMovePID+0x248>
 8000e76:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e7a:	e001      	b.n	8000e80 <SpecialMovePID+0x248>
				(u16) (1500
 8000e7c:	f640 13c4 	movw	r3, #2500	; 0x9c4
		PIDLoc =
 8000e80:	81fb      	strh	r3, [r7, #14]
								(int16_t)(PID_O_Kp * Ek + (PID_O_Ki * LocSum) + PID_O_Kd * (Ek1 - Ek)),
								-1000, 1000));
		return PIDLoc;
 8000e82:	89fb      	ldrh	r3, [r7, #14]
 8000e84:	e00f      	b.n	8000ea6 <SpecialMovePID+0x26e>
	}
	else
	{
		if (!PIDData)
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <SpecialMovePID+0x27c>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10a      	bne.n	8000ea4 <SpecialMovePID+0x26c>
		{
			PIDData = 1;
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <SpecialMovePID+0x27c>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	701a      	strb	r2, [r3, #0]
			Ek = 0;
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <SpecialMovePID+0x280>)
 8000e96:	f04f 0200 	mov.w	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
			LocSum = 0;
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <SpecialMovePID+0x284>)
 8000e9e:	f04f 0200 	mov.w	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
		}
		return 0;
 8000ea4:	2300      	movs	r3, #0
	}

}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000030 	.word	0x20000030
 8000eb8:	20000034 	.word	0x20000034
 8000ebc:	20000038 	.word	0x20000038
 8000ec0:	43480000 	.word	0x43480000
 8000ec4:	2000003c 	.word	0x2000003c
 8000ec8:	43960000 	.word	0x43960000
 8000ecc:	42c80000 	.word	0x42c80000
 8000ed0:	43160000 	.word	0x43160000

08000ed4 <IdTest>:

//异或运算位检查，其中Format上传格式为1下传格式为0，正确为1错误为0
static u8 IdTest(u8 *String, u8 Format)
{
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	70fb      	strb	r3, [r7, #3]
	if (Format) //上传数据格式
 8000ee0:	78fb      	ldrb	r3, [r7, #3]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d00d      	beq.n	8000f02 <IdTest+0x2e>
	{
		if (*(String + 38) == XorCaculate(String, 38))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3326      	adds	r3, #38	; 0x26
 8000eea:	781c      	ldrb	r4, [r3, #0]
 8000eec:	2126      	movs	r1, #38	; 0x26
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f818 	bl	8000f24 <XorCaculate>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	429c      	cmp	r4, r3
 8000ef8:	d101      	bne.n	8000efe <IdTest+0x2a>
		{
			return 1;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00e      	b.n	8000f1c <IdTest+0x48>
		}
		else
		{
			return 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e00c      	b.n	8000f1c <IdTest+0x48>
		}
	}
	else //下传指令格式
	{
		if (*(String + 28) == XorCaculate(String, 28))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	331c      	adds	r3, #28
 8000f06:	781c      	ldrb	r4, [r3, #0]
 8000f08:	211c      	movs	r1, #28
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 f80a 	bl	8000f24 <XorCaculate>
 8000f10:	4603      	mov	r3, r0
 8000f12:	429c      	cmp	r4, r3
 8000f14:	d101      	bne.n	8000f1a <IdTest+0x46>
		{
			return 1;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <IdTest+0x48>
		}
		else
		{
			return 0;
 8000f1a:	2300      	movs	r3, #0
		}
	}
	return 1;
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd90      	pop	{r4, r7, pc}

08000f24 <XorCaculate>:

//异或运算位计算
static u8 XorCaculate(u8 *CacString, u8 CacStringSize)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	70fb      	strb	r3, [r7, #3]
	u8 CacResult = CacString[0];
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	73fb      	strb	r3, [r7, #15]
	for (u8 i = 0; i < CacStringSize; ++i)
 8000f36:	2300      	movs	r3, #0
 8000f38:	73bb      	strb	r3, [r7, #14]
 8000f3a:	e009      	b.n	8000f50 <XorCaculate+0x2c>
	{
		CacResult ^= CacString[i];
 8000f3c:	7bbb      	ldrb	r3, [r7, #14]
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	781a      	ldrb	r2, [r3, #0]
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	4053      	eors	r3, r2
 8000f48:	73fb      	strb	r3, [r7, #15]
	for (u8 i = 0; i < CacStringSize; ++i)
 8000f4a:	7bbb      	ldrb	r3, [r7, #14]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	73bb      	strb	r3, [r7, #14]
 8000f50:	7bba      	ldrb	r2, [r7, #14]
 8000f52:	78fb      	ldrb	r3, [r7, #3]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d3f1      	bcc.n	8000f3c <XorCaculate+0x18>
	}
	return CacResult;
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <InitGY39>:
{ 0 };
__attribute__((section(".RAM_D1")))   u8 DeepReceive[Deep_UART_RXLen] =
{ 0 };

void InitGY39(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	GY39Send[0] = 0xa5;
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <InitGY39+0x24>)
 8000f6e:	22a5      	movs	r2, #165	; 0xa5
 8000f70:	701a      	strb	r2, [r3, #0]
	GY39Send[1] = 0x82;
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <InitGY39+0x24>)
 8000f74:	2282      	movs	r2, #130	; 0x82
 8000f76:	705a      	strb	r2, [r3, #1]
	GY39Send[2] = 0x27;
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <InitGY39+0x24>)
 8000f7a:	2227      	movs	r2, #39	; 0x27
 8000f7c:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit_DMA(&GY39_UART, GY39Send, GY39_UART_TXLen);
 8000f7e:	2203      	movs	r2, #3
 8000f80:	4902      	ldr	r1, [pc, #8]	; (8000f8c <InitGY39+0x24>)
 8000f82:	4803      	ldr	r0, [pc, #12]	; (8000f90 <InitGY39+0x28>)
 8000f84:	f008 f89c 	bl	80090c0 <HAL_UART_Transmit_DMA>
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	240000d4 	.word	0x240000d4
 8000f90:	20004678 	.word	0x20004678

08000f94 <ReceiveGY39>:

GY39Data ReceiveGY39(void)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	GY39Data RevGY39;
	RevGY39.Temperature = ((GY39Receive[3] << 8) | GY39Receive[2]);
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <ReceiveGY39+0x84>)
 8000f9e:	78db      	ldrb	r3, [r3, #3]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <ReceiveGY39+0x84>)
 8000fa6:	789b      	ldrb	r3, [r3, #2]
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	4313      	orrs	r3, r2
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	81bb      	strh	r3, [r7, #12]
	RevGY39.Baro = ((GY39Receive[7] << 24) | (GY39Receive[6] << 16)
 8000fb2:	4b19      	ldr	r3, [pc, #100]	; (8001018 <ReceiveGY39+0x84>)
 8000fb4:	79db      	ldrb	r3, [r3, #7]
 8000fb6:	061a      	lsls	r2, r3, #24
 8000fb8:	4b17      	ldr	r3, [pc, #92]	; (8001018 <ReceiveGY39+0x84>)
 8000fba:	799b      	ldrb	r3, [r3, #6]
 8000fbc:	041b      	lsls	r3, r3, #16
 8000fbe:	431a      	orrs	r2, r3
			| (GY39Receive[5] << 8) | GY39Receive[4]);
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <ReceiveGY39+0x84>)
 8000fc2:	795b      	ldrb	r3, [r3, #5]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	4a13      	ldr	r2, [pc, #76]	; (8001018 <ReceiveGY39+0x84>)
 8000fca:	7912      	ldrb	r2, [r2, #4]
 8000fcc:	4313      	orrs	r3, r2
	RevGY39.Baro = ((GY39Receive[7] << 24) | (GY39Receive[6] << 16)
 8000fce:	613b      	str	r3, [r7, #16]
	RevGY39.Hum = ((GY39Receive[9] << 8) | GY39Receive[8]);
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <ReceiveGY39+0x84>)
 8000fd2:	7a5b      	ldrb	r3, [r3, #9]
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <ReceiveGY39+0x84>)
 8000fda:	7a1b      	ldrb	r3, [r3, #8]
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	82bb      	strh	r3, [r7, #20]
	__HAL_UART_ENABLE_IT(&GY39_UART, UART_IT_IDLE);
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <ReceiveGY39+0x88>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <ReceiveGY39+0x88>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f042 0210 	orr.w	r2, r2, #16
 8000ff4:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&GY39_UART, GY39Receive, GY39_UART_RXLen);
 8000ff6:	2212      	movs	r2, #18
 8000ff8:	4907      	ldr	r1, [pc, #28]	; (8001018 <ReceiveGY39+0x84>)
 8000ffa:	4808      	ldr	r0, [pc, #32]	; (800101c <ReceiveGY39+0x88>)
 8000ffc:	f008 f8e0 	bl	80091c0 <HAL_UART_Receive_DMA>
	return RevGY39;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	461c      	mov	r4, r3
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800100c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	371c      	adds	r7, #28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd90      	pop	{r4, r7, pc}
 8001018:	240000d8 	.word	0x240000d8
 800101c:	20004678 	.word	0x20004678

08001020 <ReceiveWT931>:

WT931Data ReceiveWT931(void)
{
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	WT931Data RevWT931;
	RevWT931.AccNum[0] = ((WT931Receive[3] << 8) | WT931Receive[2]);
 8001028:	4b53      	ldr	r3, [pc, #332]	; (8001178 <ReceiveWT931+0x158>)
 800102a:	78db      	ldrb	r3, [r3, #3]
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	b21a      	sxth	r2, r3
 8001030:	4b51      	ldr	r3, [pc, #324]	; (8001178 <ReceiveWT931+0x158>)
 8001032:	789b      	ldrb	r3, [r3, #2]
 8001034:	b21b      	sxth	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b21b      	sxth	r3, r3
 800103a:	b29b      	uxth	r3, r3
 800103c:	813b      	strh	r3, [r7, #8]
	RevWT931.AccNum[1] = ((WT931Receive[5] << 8) | WT931Receive[4]);
 800103e:	4b4e      	ldr	r3, [pc, #312]	; (8001178 <ReceiveWT931+0x158>)
 8001040:	795b      	ldrb	r3, [r3, #5]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b21a      	sxth	r2, r3
 8001046:	4b4c      	ldr	r3, [pc, #304]	; (8001178 <ReceiveWT931+0x158>)
 8001048:	791b      	ldrb	r3, [r3, #4]
 800104a:	b21b      	sxth	r3, r3
 800104c:	4313      	orrs	r3, r2
 800104e:	b21b      	sxth	r3, r3
 8001050:	b29b      	uxth	r3, r3
 8001052:	817b      	strh	r3, [r7, #10]
	RevWT931.AccNum[2] = ((WT931Receive[7] << 8) | WT931Receive[6]);
 8001054:	4b48      	ldr	r3, [pc, #288]	; (8001178 <ReceiveWT931+0x158>)
 8001056:	79db      	ldrb	r3, [r3, #7]
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	b21a      	sxth	r2, r3
 800105c:	4b46      	ldr	r3, [pc, #280]	; (8001178 <ReceiveWT931+0x158>)
 800105e:	799b      	ldrb	r3, [r3, #6]
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21b      	sxth	r3, r3
 8001066:	b29b      	uxth	r3, r3
 8001068:	81bb      	strh	r3, [r7, #12]
	RevWT931.RotNum[0] = ((WT931Receive[14] << 8) | WT931Receive[13]);
 800106a:	4b43      	ldr	r3, [pc, #268]	; (8001178 <ReceiveWT931+0x158>)
 800106c:	7b9b      	ldrb	r3, [r3, #14]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b21a      	sxth	r2, r3
 8001072:	4b41      	ldr	r3, [pc, #260]	; (8001178 <ReceiveWT931+0x158>)
 8001074:	7b5b      	ldrb	r3, [r3, #13]
 8001076:	b21b      	sxth	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	b21b      	sxth	r3, r3
 800107c:	b29b      	uxth	r3, r3
 800107e:	81fb      	strh	r3, [r7, #14]
	RevWT931.RotNum[1] = ((WT931Receive[16] << 8) | WT931Receive[15]);
 8001080:	4b3d      	ldr	r3, [pc, #244]	; (8001178 <ReceiveWT931+0x158>)
 8001082:	7c1b      	ldrb	r3, [r3, #16]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	b21a      	sxth	r2, r3
 8001088:	4b3b      	ldr	r3, [pc, #236]	; (8001178 <ReceiveWT931+0x158>)
 800108a:	7bdb      	ldrb	r3, [r3, #15]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21b      	sxth	r3, r3
 8001092:	b29b      	uxth	r3, r3
 8001094:	823b      	strh	r3, [r7, #16]
	RevWT931.RotNum[2] = ((WT931Receive[18] << 8) | WT931Receive[17]);
 8001096:	4b38      	ldr	r3, [pc, #224]	; (8001178 <ReceiveWT931+0x158>)
 8001098:	7c9b      	ldrb	r3, [r3, #18]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	b21a      	sxth	r2, r3
 800109e:	4b36      	ldr	r3, [pc, #216]	; (8001178 <ReceiveWT931+0x158>)
 80010a0:	7c5b      	ldrb	r3, [r3, #17]
 80010a2:	b21b      	sxth	r3, r3
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	827b      	strh	r3, [r7, #18]
	RevWT931.EulNum[0] = ((WT931Receive[25] << 8) | WT931Receive[24]);
 80010ac:	4b32      	ldr	r3, [pc, #200]	; (8001178 <ReceiveWT931+0x158>)
 80010ae:	7e5b      	ldrb	r3, [r3, #25]
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	b21a      	sxth	r2, r3
 80010b4:	4b30      	ldr	r3, [pc, #192]	; (8001178 <ReceiveWT931+0x158>)
 80010b6:	7e1b      	ldrb	r3, [r3, #24]
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b21b      	sxth	r3, r3
 80010be:	b29b      	uxth	r3, r3
 80010c0:	82bb      	strh	r3, [r7, #20]
	RevWT931.EulNum[1] = ((WT931Receive[27] << 8) | WT931Receive[26]);
 80010c2:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <ReceiveWT931+0x158>)
 80010c4:	7edb      	ldrb	r3, [r3, #27]
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	4b2b      	ldr	r3, [pc, #172]	; (8001178 <ReceiveWT931+0x158>)
 80010cc:	7e9b      	ldrb	r3, [r3, #26]
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	82fb      	strh	r3, [r7, #22]
	RevWT931.EulNum[2] = ((WT931Receive[29] << 8) | WT931Receive[28]);
 80010d8:	4b27      	ldr	r3, [pc, #156]	; (8001178 <ReceiveWT931+0x158>)
 80010da:	7f5b      	ldrb	r3, [r3, #29]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b21a      	sxth	r2, r3
 80010e0:	4b25      	ldr	r3, [pc, #148]	; (8001178 <ReceiveWT931+0x158>)
 80010e2:	7f1b      	ldrb	r3, [r3, #28]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	833b      	strh	r3, [r7, #24]
	RevWT931.MagNum[0] = ((WT931Receive[36] << 8) | WT931Receive[35]);
 80010ee:	4b22      	ldr	r3, [pc, #136]	; (8001178 <ReceiveWT931+0x158>)
 80010f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <ReceiveWT931+0x158>)
 80010fa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80010fe:	b21b      	sxth	r3, r3
 8001100:	4313      	orrs	r3, r2
 8001102:	b21b      	sxth	r3, r3
 8001104:	b29b      	uxth	r3, r3
 8001106:	837b      	strh	r3, [r7, #26]
	RevWT931.MagNum[1] = ((WT931Receive[38] << 8) | WT931Receive[37]);
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <ReceiveWT931+0x158>)
 800110a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	b21a      	sxth	r2, r3
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <ReceiveWT931+0x158>)
 8001114:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001118:	b21b      	sxth	r3, r3
 800111a:	4313      	orrs	r3, r2
 800111c:	b21b      	sxth	r3, r3
 800111e:	b29b      	uxth	r3, r3
 8001120:	83bb      	strh	r3, [r7, #28]
	RevWT931.MagNum[2] = ((WT931Receive[40] << 8) | WT931Receive[39]);
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <ReceiveWT931+0x158>)
 8001124:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001128:	021b      	lsls	r3, r3, #8
 800112a:	b21a      	sxth	r2, r3
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <ReceiveWT931+0x158>)
 800112e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001132:	b21b      	sxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b21b      	sxth	r3, r3
 8001138:	b29b      	uxth	r3, r3
 800113a:	83fb      	strh	r3, [r7, #30]
	__HAL_UART_ENABLE_IT(&WT931_UART, UART_IT_IDLE);
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <ReceiveWT931+0x15c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <ReceiveWT931+0x15c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0210 	orr.w	r2, r2, #16
 800114a:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&WT931_UART, WT931Receive, WT931_UART_RXLen);
 800114c:	223c      	movs	r2, #60	; 0x3c
 800114e:	490a      	ldr	r1, [pc, #40]	; (8001178 <ReceiveWT931+0x158>)
 8001150:	480a      	ldr	r0, [pc, #40]	; (800117c <ReceiveWT931+0x15c>)
 8001152:	f008 f835 	bl	80091c0 <HAL_UART_Receive_DMA>
	return RevWT931;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	461d      	mov	r5, r3
 800115a:	f107 0408 	add.w	r4, r7, #8
 800115e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001160:	6028      	str	r0, [r5, #0]
 8001162:	6069      	str	r1, [r5, #4]
 8001164:	60aa      	str	r2, [r5, #8]
 8001166:	60eb      	str	r3, [r5, #12]
 8001168:	cc03      	ldmia	r4!, {r0, r1}
 800116a:	6128      	str	r0, [r5, #16]
 800116c:	6169      	str	r1, [r5, #20]
}
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	3720      	adds	r7, #32
 8001172:	46bd      	mov	sp, r7
 8001174:	bdb0      	pop	{r4, r5, r7, pc}
 8001176:	bf00      	nop
 8001178:	24000098 	.word	0x24000098
 800117c:	20004168 	.word	0x20004168

08001180 <ReceiveDeep>:

DeepData ReceiveDeep(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	DeepData RevDeep;
	RevDeep.WaterDepth = ((DeepReceive[1] << 8) | DeepReceive[0]);
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <ReceiveDeep+0x68>)
 8001188:	785b      	ldrb	r3, [r3, #1]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	b21a      	sxth	r2, r3
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <ReceiveDeep+0x68>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	b21b      	sxth	r3, r3
 8001194:	4313      	orrs	r3, r2
 8001196:	b21b      	sxth	r3, r3
 8001198:	b29b      	uxth	r3, r3
 800119a:	807b      	strh	r3, [r7, #2]
	RevDeep.WaterTemperature = ((DeepReceive[3] << 8) | DeepReceive[2]);
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <ReceiveDeep+0x68>)
 800119e:	78db      	ldrb	r3, [r3, #3]
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <ReceiveDeep+0x68>)
 80011a6:	789b      	ldrb	r3, [r3, #2]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	803b      	strh	r3, [r7, #0]
	__HAL_UART_ENABLE_IT(&Deep_UART, UART_IT_IDLE);
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <ReceiveDeep+0x6c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <ReceiveDeep+0x6c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f042 0210 	orr.w	r2, r2, #16
 80011c0:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Deep_UART, DeepReceive, Deep_UART_RXLen);
 80011c2:	2204      	movs	r2, #4
 80011c4:	4908      	ldr	r1, [pc, #32]	; (80011e8 <ReceiveDeep+0x68>)
 80011c6:	4809      	ldr	r0, [pc, #36]	; (80011ec <ReceiveDeep+0x6c>)
 80011c8:	f007 fffa 	bl	80091c0 <HAL_UART_Receive_DMA>
	return RevDeep;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	2300      	movs	r3, #0
 80011d2:	88ba      	ldrh	r2, [r7, #4]
 80011d4:	f362 030f 	bfi	r3, r2, #0, #16
 80011d8:	88fa      	ldrh	r2, [r7, #6]
 80011da:	f362 431f 	bfi	r3, r2, #16, #16
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	240000ec 	.word	0x240000ec
 80011ec:	200045e0 	.word	0x200045e0

080011f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4a07      	ldr	r2, [pc, #28]	; (800121c <vApplicationGetIdleTaskMemory+0x2c>)
 8001200:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	4a06      	ldr	r2, [pc, #24]	; (8001220 <vApplicationGetIdleTaskMemory+0x30>)
 8001206:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2280      	movs	r2, #128	; 0x80
 800120c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800120e:	bf00      	nop
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000040 	.word	0x20000040
 8001220:	20000094 	.word	0x20000094

08001224 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001224:	b5b0      	push	{r4, r5, r7, lr}
 8001226:	b0b2      	sub	sp, #200	; 0xc8
 8001228:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800122a:	f001 fef7 	bl	800301c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800122e:	f000 f93f 	bl	80014b0 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001232:	f000 f9c3 	bl	80015bc <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001236:	f000 fbf7 	bl	8001a28 <MX_GPIO_Init>
	MX_DMA_Init();
 800123a:	f000 fb85 	bl	8001948 <MX_DMA_Init>
	MX_IWDG1_Init();
 800123e:	f000 f9e9 	bl	8001614 <MX_IWDG1_Init>
	MX_USART1_UART_Init();
 8001242:	f000 fa9d 	bl	8001780 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001246:	f000 fae7 	bl	8001818 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800124a:	f000 fb31 	bl	80018b0 <MX_USART3_UART_Init>
	MX_UART4_Init();
 800124e:	f000 f9ff 	bl	8001650 <MX_UART4_Init>
	MX_UART8_Init();
 8001252:	f000 fa49 	bl	80016e8 <MX_UART8_Init>
	/* USER CODE BEGIN 2 */
	HAL_IWDG_Refresh(&hiwdg1);
 8001256:	4881      	ldr	r0, [pc, #516]	; (800145c <main+0x238>)
 8001258:	f005 f886 	bl	8006368 <HAL_IWDG_Refresh>
	//初始化下位机

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	2110      	movs	r1, #16
 8001260:	487f      	ldr	r0, [pc, #508]	; (8001460 <main+0x23c>)
 8001262:	f005 f819 	bl	8006298 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8001266:	2201      	movs	r2, #1
 8001268:	2110      	movs	r1, #16
 800126a:	487d      	ldr	r0, [pc, #500]	; (8001460 <main+0x23c>)
 800126c:	f005 f814 	bl	8006298 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	2110      	movs	r1, #16
 8001274:	487a      	ldr	r0, [pc, #488]	; (8001460 <main+0x23c>)
 8001276:	f005 f80f 	bl	8006298 <HAL_GPIO_WritePin>
	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of UptoBaseDataRWFlag */
	osMutexDef(UptoBaseDataRWFlag);
 800127a:	2300      	movs	r3, #0
 800127c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001280:	2300      	movs	r3, #0
 8001282:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	UptoBaseDataRWFlagHandle = osMutexCreate(osMutex(UptoBaseDataRWFlag));
 8001286:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800128a:	4618      	mov	r0, r3
 800128c:	f009 fd7f 	bl	800ad8e <osMutexCreate>
 8001290:	4603      	mov	r3, r0
 8001292:	4a74      	ldr	r2, [pc, #464]	; (8001464 <main+0x240>)
 8001294:	6013      	str	r3, [r2, #0]

	/* definition and creation of BasetoUpDataRWFlag */
	osMutexDef(BasetoUpDataRWFlag);
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	BasetoUpDataRWFlagHandle = osMutexCreate(osMutex(BasetoUpDataRWFlag));
 80012a2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80012a6:	4618      	mov	r0, r3
 80012a8:	f009 fd71 	bl	800ad8e <osMutexCreate>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4a6e      	ldr	r2, [pc, #440]	; (8001468 <main+0x244>)
 80012b0:	6013      	str	r3, [r2, #0]

	/* definition and creation of WT931SensorDataRWFlag */
	osMutexDef(WT931SensorDataRWFlag);
 80012b2:	2300      	movs	r3, #0
 80012b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	WT931SensorDataRWFlagHandle = osMutexCreate(osMutex(WT931SensorDataRWFlag));
 80012be:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f009 fd63 	bl	800ad8e <osMutexCreate>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4a68      	ldr	r2, [pc, #416]	; (800146c <main+0x248>)
 80012cc:	6013      	str	r3, [r2, #0]

	/* definition and creation of GY39SensorDataRWFlag */
	osMutexDef(GY39SensorDataRWFlag);
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GY39SensorDataRWFlagHandle = osMutexCreate(osMutex(GY39SensorDataRWFlag));
 80012da:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80012de:	4618      	mov	r0, r3
 80012e0:	f009 fd55 	bl	800ad8e <osMutexCreate>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a62      	ldr	r2, [pc, #392]	; (8001470 <main+0x24c>)
 80012e8:	6013      	str	r3, [r2, #0]

	/* definition and creation of DeepSensorDataRWFlag */
	osMutexDef(DeepSensorDataRWFlag);
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	DeepSensorDataRWFlagHandle = osMutexCreate(osMutex(DeepSensorDataRWFlag));
 80012f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f009 fd47 	bl	800ad8e <osMutexCreate>
 8001300:	4603      	mov	r3, r0
 8001302:	4a5c      	ldr	r2, [pc, #368]	; (8001474 <main+0x250>)
 8001304:	6013      	str	r3, [r2, #0]

	/* definition and creation of BaseControlEnableFlag */
	osMutexDef(BaseControlEnableFlag);
 8001306:	2300      	movs	r3, #0
 8001308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	BaseControlEnableFlagHandle = osMutexCreate(osMutex(BaseControlEnableFlag));
 8001312:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001316:	4618      	mov	r0, r3
 8001318:	f009 fd39 	bl	800ad8e <osMutexCreate>
 800131c:	4603      	mov	r3, r0
 800131e:	4a56      	ldr	r2, [pc, #344]	; (8001478 <main+0x254>)
 8001320:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_MUTEX */
	HAL_IWDG_Refresh(&hiwdg1);
 8001322:	484e      	ldr	r0, [pc, #312]	; (800145c <main+0x238>)
 8001324:	f005 f820 	bl	8006368 <HAL_IWDG_Refresh>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of UptoBaseTransFinish */
	osSemaphoreDef(UptoBaseTransFinish);
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800132e:	2300      	movs	r3, #0
 8001330:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	UptoBaseTransFinishHandle = osSemaphoreCreate(
 8001334:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001338:	2101      	movs	r1, #1
 800133a:	4618      	mov	r0, r3
 800133c:	f009 fd3f 	bl	800adbe <osSemaphoreCreate>
 8001340:	4603      	mov	r3, r0
 8001342:	4a4e      	ldr	r2, [pc, #312]	; (800147c <main+0x258>)
 8001344:	6013      	str	r3, [r2, #0]
			osSemaphore(UptoBaseTransFinish), 1);

	/* definition and creation of WT931TransFinish */
	osSemaphoreDef(WT931TransFinish);
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	WT931TransFinishHandle = osSemaphoreCreate(osSemaphore(WT931TransFinish),
 8001352:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001356:	2101      	movs	r1, #1
 8001358:	4618      	mov	r0, r3
 800135a:	f009 fd30 	bl	800adbe <osSemaphoreCreate>
 800135e:	4603      	mov	r3, r0
 8001360:	4a47      	ldr	r2, [pc, #284]	; (8001480 <main+0x25c>)
 8001362:	6013      	str	r3, [r2, #0]
			1);

	/* definition and creation of GY39TransFinish */
	osSemaphoreDef(GY39TransFinish);
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800136a:	2300      	movs	r3, #0
 800136c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	GY39TransFinishHandle = osSemaphoreCreate(osSemaphore(GY39TransFinish), 1);
 8001370:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001374:	2101      	movs	r1, #1
 8001376:	4618      	mov	r0, r3
 8001378:	f009 fd21 	bl	800adbe <osSemaphoreCreate>
 800137c:	4603      	mov	r3, r0
 800137e:	4a41      	ldr	r2, [pc, #260]	; (8001484 <main+0x260>)
 8001380:	6013      	str	r3, [r2, #0]

	/* definition and creation of BasetoUpTransFinishHandle */
	osSemaphoreDef(BasetoUpTransFinishHandle);
 8001382:	2300      	movs	r3, #0
 8001384:	67bb      	str	r3, [r7, #120]	; 0x78
 8001386:	2300      	movs	r3, #0
 8001388:	67fb      	str	r3, [r7, #124]	; 0x7c
	BasetoUpTransFinishHandleHandle = osSemaphoreCreate(
 800138a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800138e:	2101      	movs	r1, #1
 8001390:	4618      	mov	r0, r3
 8001392:	f009 fd14 	bl	800adbe <osSemaphoreCreate>
 8001396:	4603      	mov	r3, r0
 8001398:	4a3b      	ldr	r2, [pc, #236]	; (8001488 <main+0x264>)
 800139a:	6013      	str	r3, [r2, #0]
			osSemaphore(BasetoUpTransFinishHandle), 1);

	/* definition and creation of DeepTransFinishHandle */
	osSemaphoreDef(DeepTransFinishHandle);
 800139c:	2300      	movs	r3, #0
 800139e:	673b      	str	r3, [r7, #112]	; 0x70
 80013a0:	2300      	movs	r3, #0
 80013a2:	677b      	str	r3, [r7, #116]	; 0x74
	DeepTransFinishHandleHandle = osSemaphoreCreate(
 80013a4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013a8:	2101      	movs	r1, #1
 80013aa:	4618      	mov	r0, r3
 80013ac:	f009 fd07 	bl	800adbe <osSemaphoreCreate>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4a36      	ldr	r2, [pc, #216]	; (800148c <main+0x268>)
 80013b4:	6013      	str	r3, [r2, #0]
			osSemaphore(DeepTransFinishHandle), 1);

	/* USER CODE BEGIN RTOS_SEMAPHORES */
	HAL_IWDG_Refresh(&hiwdg1);
 80013b6:	4829      	ldr	r0, [pc, #164]	; (800145c <main+0x238>)
 80013b8:	f004 ffd6 	bl	8006368 <HAL_IWDG_Refresh>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of CtrlTask */
	osThreadDef(CtrlTask, CtrlTaskF, osPriorityNormal, 0, 128);
 80013bc:	4b34      	ldr	r3, [pc, #208]	; (8001490 <main+0x26c>)
 80013be:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80013c2:	461d      	mov	r5, r3
 80013c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CtrlTaskHandle = osThreadCreate(osThread(CtrlTask), NULL);
 80013d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f009 fc79 	bl	800acce <osThreadCreate>
 80013dc:	4603      	mov	r3, r0
 80013de:	4a2d      	ldr	r2, [pc, #180]	; (8001494 <main+0x270>)
 80013e0:	6013      	str	r3, [r2, #0]

	/* definition and creation of SensorTask */
	osThreadDef(SensorTask, SensorTaskF, osPriorityNormal, 0, 128);
 80013e2:	4b2d      	ldr	r3, [pc, #180]	; (8001498 <main+0x274>)
 80013e4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80013e8:	461d      	mov	r5, r3
 80013ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	SensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 80013f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f009 fc66 	bl	800acce <osThreadCreate>
 8001402:	4603      	mov	r3, r0
 8001404:	4a25      	ldr	r2, [pc, #148]	; (800149c <main+0x278>)
 8001406:	6013      	str	r3, [r2, #0]

	/* definition and creation of UptoBaseTask */
	osThreadDef(UptoBaseTask, UtBF, osPriorityNormal, 0, 128);
 8001408:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <main+0x27c>)
 800140a:	f107 041c 	add.w	r4, r7, #28
 800140e:	461d      	mov	r5, r3
 8001410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001414:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001418:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	UptoBaseTaskHandle = osThreadCreate(osThread(UptoBaseTask), NULL);
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f009 fc53 	bl	800acce <osThreadCreate>
 8001428:	4603      	mov	r3, r0
 800142a:	4a1e      	ldr	r2, [pc, #120]	; (80014a4 <main+0x280>)
 800142c:	6013      	str	r3, [r2, #0]

	/* definition and creation of BasetoUpTask */
	osThreadDef(BasetoUpTask, BtUF, osPriorityNormal, 0, 128);
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <main+0x284>)
 8001430:	463c      	mov	r4, r7
 8001432:	461d      	mov	r5, r3
 8001434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001438:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800143c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	BasetoUpTaskHandle = osThreadCreate(osThread(BasetoUpTask), NULL);
 8001440:	463b      	mov	r3, r7
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f009 fc42 	bl	800acce <osThreadCreate>
 800144a:	4603      	mov	r3, r0
 800144c:	4a17      	ldr	r2, [pc, #92]	; (80014ac <main+0x288>)
 800144e:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	HAL_IWDG_Refresh(&hiwdg1);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <main+0x238>)
 8001452:	f004 ff89 	bl	8006368 <HAL_IWDG_Refresh>
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8001456:	f009 fc33 	bl	800acc0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800145a:	e7fe      	b.n	800145a <main+0x236>
 800145c:	200040e0 	.word	0x200040e0
 8001460:	58021000 	.word	0x58021000
 8001464:	200044c0 	.word	0x200044c0
 8001468:	20004708 	.word	0x20004708
 800146c:	200042c4 	.word	0x200042c4
 8001470:	2000422c 	.word	0x2000422c
 8001474:	200041f8 	.word	0x200041f8
 8001478:	20004248 	.word	0x20004248
 800147c:	20003fe8 	.word	0x20003fe8
 8001480:	20004788 	.word	0x20004788
 8001484:	200041fc 	.word	0x200041fc
 8001488:	20004548 	.word	0x20004548
 800148c:	2000470c 	.word	0x2000470c
 8001490:	0800d2d0 	.word	0x0800d2d0
 8001494:	20004200 	.word	0x20004200
 8001498:	0800d2ec 	.word	0x0800d2ec
 800149c:	20003fec 	.word	0x20003fec
 80014a0:	0800d308 	.word	0x0800d308
 80014a4:	20004670 	.word	0x20004670
 80014a8:	0800d324 	.word	0x0800d324
 80014ac:	20004674 	.word	0x20004674

080014b0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b09c      	sub	sp, #112	; 0x70
 80014b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80014b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ba:	224c      	movs	r2, #76	; 0x4c
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f00b fed6 	bl	800d270 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2220      	movs	r2, #32
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f00b fed0 	bl	800d270 <memset>
	{ 0 };

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014d0:	2002      	movs	r0, #2
 80014d2:	f004 ff59 	bl	8006388 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d6:	2300      	movs	r3, #0
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	4b35      	ldr	r3, [pc, #212]	; (80015b0 <SystemClock_Config+0x100>)
 80014dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014de:	4a34      	ldr	r2, [pc, #208]	; (80015b0 <SystemClock_Config+0x100>)
 80014e0:	f023 0301 	bic.w	r3, r3, #1
 80014e4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80014e6:	4b32      	ldr	r3, [pc, #200]	; (80015b0 <SystemClock_Config+0x100>)
 80014e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	4b30      	ldr	r3, [pc, #192]	; (80015b4 <SystemClock_Config+0x104>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a2f      	ldr	r2, [pc, #188]	; (80015b4 <SystemClock_Config+0x104>)
 80014f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <SystemClock_Config+0x104>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001504:	603b      	str	r3, [r7, #0]
 8001506:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8001508:	bf00      	nop
 800150a:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <SystemClock_Config+0x104>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001516:	d1f8      	bne.n	800150a <SystemClock_Config+0x5a>
	{
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001518:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <SystemClock_Config+0x108>)
 800151a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151c:	f023 0303 	bic.w	r3, r3, #3
 8001520:	4a25      	ldr	r2, [pc, #148]	; (80015b8 <SystemClock_Config+0x108>)
 8001522:	f043 0302 	orr.w	r3, r3, #2
 8001526:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8001528:	2309      	movs	r3, #9
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800152c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001532:	2301      	movs	r3, #1
 8001534:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001536:	2302      	movs	r3, #2
 8001538:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800153a:	2302      	movs	r3, #2
 800153c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 800153e:	2305      	movs	r3, #5
 8001540:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 160;
 8001542:	23a0      	movs	r3, #160	; 0xa0
 8001544:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8001546:	2302      	movs	r3, #2
 8001548:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800154a:	2302      	movs	r3, #2
 800154c:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 800154e:	2302      	movs	r3, #2
 8001550:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001552:	2308      	movs	r3, #8
 8001554:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001556:	2300      	movs	r3, #0
 8001558:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001562:	4618      	mov	r0, r3
 8001564:	f004 ff4a 	bl	80063fc <HAL_RCC_OscConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 800156e:	f000 fd23 	bl	8001fb8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001572:	233f      	movs	r3, #63	; 0x3f
 8001574:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001576:	2303      	movs	r3, #3
 8001578:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800157e:	2308      	movs	r3, #8
 8001580:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001582:	2340      	movs	r3, #64	; 0x40
 8001584:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001586:	2340      	movs	r3, #64	; 0x40
 8001588:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800158a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800158e:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001590:	2340      	movs	r3, #64	; 0x40
 8001592:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	2102      	movs	r1, #2
 8001598:	4618      	mov	r0, r3
 800159a:	f005 fb3f 	bl	8006c1c <HAL_RCC_ClockConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0xf8>
	{
		Error_Handler();
 80015a4:	f000 fd08 	bl	8001fb8 <Error_Handler>
	}
}
 80015a8:	bf00      	nop
 80015aa:	3770      	adds	r7, #112	; 0x70
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	58000400 	.word	0x58000400
 80015b4:	58024800 	.word	0x58024800
 80015b8:	58024400 	.word	0x58024400

080015bc <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b0b0      	sub	sp, #192	; 0xc0
 80015c0:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	22bc      	movs	r2, #188	; 0xbc
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f00b fe51 	bl	800d270 <memset>
	{ 0 };

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8
 80015ce:	2303      	movs	r3, #3
 80015d0:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_UART4 | RCC_PERIPHCLK_USART2
			| RCC_PERIPHCLK_USART3;
	PeriphClkInitStruct.PLL3.PLL3M = 25;
 80015d2:	2319      	movs	r3, #25
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLL3.PLL3N = 192;
 80015d6:	23c0      	movs	r3, #192	; 0xc0
 80015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLL3.PLL3P = 2;
 80015da:	2302      	movs	r3, #2
 80015dc:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80015de:	2302      	movs	r3, #2
 80015e0:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.PLL3.PLL3R = 2;
 80015e2:	2302      	movs	r3, #2
 80015e4:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInitStruct.Usart234578ClockSelection =
 80015f2:	2302      	movs	r3, #2
 80015f4:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_USART234578CLKSOURCE_PLL3;
	PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 80015f6:	2310      	movs	r3, #16
 80015f8:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	4618      	mov	r0, r3
 80015fe:	f005 fedb 	bl	80073b8 <HAL_RCCEx_PeriphCLKConfig>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <PeriphCommonClock_Config+0x50>
	{
		Error_Handler();
 8001608:	f000 fcd6 	bl	8001fb8 <Error_Handler>
	}
}
 800160c:	bf00      	nop
 800160e:	37c0      	adds	r7, #192	; 0xc0
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <MX_IWDG1_Init>:
 * @brief IWDG1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG1_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	/* USER CODE END IWDG1_Init 0 */

	/* USER CODE BEGIN IWDG1_Init 1 */

	/* USER CODE END IWDG1_Init 1 */
	hiwdg1.Instance = IWDG1;
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <MX_IWDG1_Init+0x34>)
 800161a:	4a0c      	ldr	r2, [pc, #48]	; (800164c <MX_IWDG1_Init+0x38>)
 800161c:	601a      	str	r2, [r3, #0]
	hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <MX_IWDG1_Init+0x34>)
 8001620:	2200      	movs	r2, #0
 8001622:	605a      	str	r2, [r3, #4]
	hiwdg1.Init.Window = 4095;
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <MX_IWDG1_Init+0x34>)
 8001626:	f640 72ff 	movw	r2, #4095	; 0xfff
 800162a:	60da      	str	r2, [r3, #12]
	hiwdg1.Init.Reload = 4095;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <MX_IWDG1_Init+0x34>)
 800162e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001632:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8001634:	4804      	ldr	r0, [pc, #16]	; (8001648 <MX_IWDG1_Init+0x34>)
 8001636:	f004 fe48 	bl	80062ca <HAL_IWDG_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_IWDG1_Init+0x30>
	{
		Error_Handler();
 8001640:	f000 fcba 	bl	8001fb8 <Error_Handler>
	}
	/* USER CODE BEGIN IWDG1_Init 2 */

	/* USER CODE END IWDG1_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200040e0 	.word	0x200040e0
 800164c:	58004800 	.word	0x58004800

08001650 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001654:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <MX_UART4_Init+0x90>)
 8001656:	4a23      	ldr	r2, [pc, #140]	; (80016e4 <MX_UART4_Init+0x94>)
 8001658:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 921600;
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <MX_UART4_Init+0x90>)
 800165c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001660:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001662:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <MX_UART4_Init+0x90>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001668:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <MX_UART4_Init+0x90>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <MX_UART4_Init+0x90>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001674:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <MX_UART4_Init+0x90>)
 8001676:	220c      	movs	r2, #12
 8001678:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167a:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <MX_UART4_Init+0x90>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001680:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <MX_UART4_Init+0x90>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <MX_UART4_Init+0x90>)
 8001688:	2200      	movs	r2, #0
 800168a:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <MX_UART4_Init+0x90>)
 800168e:	2200      	movs	r2, #0
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001692:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <MX_UART4_Init+0x90>)
 8001694:	2200      	movs	r2, #0
 8001696:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8001698:	4811      	ldr	r0, [pc, #68]	; (80016e0 <MX_UART4_Init+0x90>)
 800169a:	f007 fcc1 	bl	8009020 <HAL_UART_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_UART4_Init+0x58>
	{
		Error_Handler();
 80016a4:	f000 fc88 	bl	8001fb8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 80016a8:	2100      	movs	r1, #0
 80016aa:	480d      	ldr	r0, [pc, #52]	; (80016e0 <MX_UART4_Init+0x90>)
 80016ac:	f009 fa26 	bl	800aafc <HAL_UARTEx_SetTxFifoThreshold>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_UART4_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 80016b6:	f000 fc7f 	bl	8001fb8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 80016ba:	2100      	movs	r1, #0
 80016bc:	4808      	ldr	r0, [pc, #32]	; (80016e0 <MX_UART4_Init+0x90>)
 80016be:	f009 fa5b 	bl	800ab78 <HAL_UARTEx_SetRxFifoThreshold>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_UART4_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 80016c8:	f000 fc76 	bl	8001fb8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80016cc:	4804      	ldr	r0, [pc, #16]	; (80016e0 <MX_UART4_Init+0x90>)
 80016ce:	f009 f9dc 	bl	800aa8a <HAL_UARTEx_DisableFifoMode>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_UART4_Init+0x8c>
	{
		Error_Handler();
 80016d8:	f000 fc6e 	bl	8001fb8 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200045e0 	.word	0x200045e0
 80016e4:	40004c00 	.word	0x40004c00

080016e8 <MX_UART8_Init>:
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 80016ec:	4b22      	ldr	r3, [pc, #136]	; (8001778 <MX_UART8_Init+0x90>)
 80016ee:	4a23      	ldr	r2, [pc, #140]	; (800177c <MX_UART8_Init+0x94>)
 80016f0:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 80016f2:	4b21      	ldr	r3, [pc, #132]	; (8001778 <MX_UART8_Init+0x90>)
 80016f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016f8:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80016fa:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <MX_UART8_Init+0x90>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <MX_UART8_Init+0x90>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 8001706:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <MX_UART8_Init+0x90>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <MX_UART8_Init+0x90>)
 800170e:	220c      	movs	r2, #12
 8001710:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <MX_UART8_Init+0x90>)
 8001714:	2200      	movs	r2, #0
 8001716:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001718:	4b17      	ldr	r3, [pc, #92]	; (8001778 <MX_UART8_Init+0x90>)
 800171a:	2200      	movs	r2, #0
 800171c:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <MX_UART8_Init+0x90>)
 8001720:	2200      	movs	r2, #0
 8001722:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <MX_UART8_Init+0x90>)
 8001726:	2200      	movs	r2, #0
 8001728:	625a      	str	r2, [r3, #36]	; 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <MX_UART8_Init+0x90>)
 800172c:	2200      	movs	r2, #0
 800172e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart8) != HAL_OK)
 8001730:	4811      	ldr	r0, [pc, #68]	; (8001778 <MX_UART8_Init+0x90>)
 8001732:	f007 fc75 	bl	8009020 <HAL_UART_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_UART8_Init+0x58>
	{
		Error_Handler();
 800173c:	f000 fc3c 	bl	8001fb8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8)
 8001740:	2100      	movs	r1, #0
 8001742:	480d      	ldr	r0, [pc, #52]	; (8001778 <MX_UART8_Init+0x90>)
 8001744:	f009 f9da 	bl	800aafc <HAL_UARTEx_SetTxFifoThreshold>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_UART8_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 800174e:	f000 fc33 	bl	8001fb8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8)
 8001752:	2100      	movs	r1, #0
 8001754:	4808      	ldr	r0, [pc, #32]	; (8001778 <MX_UART8_Init+0x90>)
 8001756:	f009 fa0f 	bl	800ab78 <HAL_UARTEx_SetRxFifoThreshold>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_UART8_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001760:	f000 fc2a 	bl	8001fb8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001764:	4804      	ldr	r0, [pc, #16]	; (8001778 <MX_UART8_Init+0x90>)
 8001766:	f009 f990 	bl	800aa8a <HAL_UARTEx_DisableFifoMode>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_UART8_Init+0x8c>
	{
		Error_Handler();
 8001770:	f000 fc22 	bl	8001fb8 <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	2000454c 	.word	0x2000454c
 800177c:	40007c00 	.word	0x40007c00

08001780 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <MX_USART1_UART_Init+0x90>)
 8001786:	4a23      	ldr	r2, [pc, #140]	; (8001814 <MX_USART1_UART_Init+0x94>)
 8001788:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 921600;
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <MX_USART1_UART_Init+0x90>)
 800178c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001790:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001792:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <MX_USART1_UART_Init+0x90>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <MX_USART1_UART_Init+0x90>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800179e:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <MX_USART1_UART_Init+0x90>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80017a4:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <MX_USART1_UART_Init+0x90>)
 80017a6:	220c      	movs	r2, #12
 80017a8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017aa:	4b19      	ldr	r3, [pc, #100]	; (8001810 <MX_USART1_UART_Init+0x90>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <MX_USART1_UART_Init+0x90>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <MX_USART1_UART_Init+0x90>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_USART1_UART_Init+0x90>)
 80017be:	2200      	movs	r2, #0
 80017c0:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <MX_USART1_UART_Init+0x90>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80017c8:	4811      	ldr	r0, [pc, #68]	; (8001810 <MX_USART1_UART_Init+0x90>)
 80017ca:	f007 fc29 	bl	8009020 <HAL_UART_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 80017d4:	f000 fbf0 	bl	8001fb8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 80017d8:	2100      	movs	r1, #0
 80017da:	480d      	ldr	r0, [pc, #52]	; (8001810 <MX_USART1_UART_Init+0x90>)
 80017dc:	f009 f98e 	bl	800aafc <HAL_UARTEx_SetTxFifoThreshold>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_USART1_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 80017e6:	f000 fbe7 	bl	8001fb8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 80017ea:	2100      	movs	r1, #0
 80017ec:	4808      	ldr	r0, [pc, #32]	; (8001810 <MX_USART1_UART_Init+0x90>)
 80017ee:	f009 f9c3 	bl	800ab78 <HAL_UARTEx_SetRxFifoThreshold>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_USART1_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 80017f8:	f000 fbde 	bl	8001fb8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017fc:	4804      	ldr	r0, [pc, #16]	; (8001810 <MX_USART1_UART_Init+0x90>)
 80017fe:	f009 f944 	bl	800aa8a <HAL_UARTEx_DisableFifoMode>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 8001808:	f000 fbd6 	bl	8001fb8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20004430 	.word	0x20004430
 8001814:	40011000 	.word	0x40011000

08001818 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800181c:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <MX_USART2_UART_Init+0x90>)
 800181e:	4a23      	ldr	r2, [pc, #140]	; (80018ac <MX_USART2_UART_Init+0x94>)
 8001820:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <MX_USART2_UART_Init+0x90>)
 8001824:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001828:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800182a:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <MX_USART2_UART_Init+0x90>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001830:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <MX_USART2_UART_Init+0x90>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001836:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <MX_USART2_UART_Init+0x90>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800183c:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <MX_USART2_UART_Init+0x90>)
 800183e:	220c      	movs	r2, #12
 8001840:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001842:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <MX_USART2_UART_Init+0x90>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001848:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <MX_USART2_UART_Init+0x90>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800184e:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <MX_USART2_UART_Init+0x90>)
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <MX_USART2_UART_Init+0x90>)
 8001856:	2200      	movs	r2, #0
 8001858:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <MX_USART2_UART_Init+0x90>)
 800185c:	2200      	movs	r2, #0
 800185e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001860:	4811      	ldr	r0, [pc, #68]	; (80018a8 <MX_USART2_UART_Init+0x90>)
 8001862:	f007 fbdd 	bl	8009020 <HAL_UART_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 800186c:	f000 fba4 	bl	8001fb8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8001870:	2100      	movs	r1, #0
 8001872:	480d      	ldr	r0, [pc, #52]	; (80018a8 <MX_USART2_UART_Init+0x90>)
 8001874:	f009 f942 	bl	800aafc <HAL_UARTEx_SetTxFifoThreshold>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 800187e:	f000 fb9b 	bl	8001fb8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8001882:	2100      	movs	r1, #0
 8001884:	4808      	ldr	r0, [pc, #32]	; (80018a8 <MX_USART2_UART_Init+0x90>)
 8001886:	f009 f977 	bl	800ab78 <HAL_UARTEx_SetRxFifoThreshold>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001890:	f000 fb92 	bl	8001fb8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <MX_USART2_UART_Init+0x90>)
 8001896:	f009 f8f8 	bl	800aa8a <HAL_UARTEx_DisableFifoMode>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 80018a0:	f000 fb8a 	bl	8001fb8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20004678 	.word	0x20004678
 80018ac:	40004400 	.word	0x40004400

080018b0 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80018b4:	4b22      	ldr	r3, [pc, #136]	; (8001940 <MX_USART3_UART_Init+0x90>)
 80018b6:	4a23      	ldr	r2, [pc, #140]	; (8001944 <MX_USART3_UART_Init+0x94>)
 80018b8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 921600;
 80018ba:	4b21      	ldr	r3, [pc, #132]	; (8001940 <MX_USART3_UART_Init+0x90>)
 80018bc:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80018c0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018c2:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <MX_USART3_UART_Init+0x90>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80018c8:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <MX_USART3_UART_Init+0x90>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80018ce:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <MX_USART3_UART_Init+0x90>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <MX_USART3_UART_Init+0x90>)
 80018d6:	220c      	movs	r2, #12
 80018d8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018da:	4b19      	ldr	r3, [pc, #100]	; (8001940 <MX_USART3_UART_Init+0x90>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <MX_USART3_UART_Init+0x90>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018e6:	4b16      	ldr	r3, [pc, #88]	; (8001940 <MX_USART3_UART_Init+0x90>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018ec:	4b14      	ldr	r3, [pc, #80]	; (8001940 <MX_USART3_UART_Init+0x90>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f2:	4b13      	ldr	r3, [pc, #76]	; (8001940 <MX_USART3_UART_Init+0x90>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80018f8:	4811      	ldr	r0, [pc, #68]	; (8001940 <MX_USART3_UART_Init+0x90>)
 80018fa:	f007 fb91 	bl	8009020 <HAL_UART_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 8001904:	f000 fb58 	bl	8001fb8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8001908:	2100      	movs	r1, #0
 800190a:	480d      	ldr	r0, [pc, #52]	; (8001940 <MX_USART3_UART_Init+0x90>)
 800190c:	f009 f8f6 	bl	800aafc <HAL_UARTEx_SetTxFifoThreshold>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_USART3_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 8001916:	f000 fb4f 	bl	8001fb8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 800191a:	2100      	movs	r1, #0
 800191c:	4808      	ldr	r0, [pc, #32]	; (8001940 <MX_USART3_UART_Init+0x90>)
 800191e:	f009 f92b 	bl	800ab78 <HAL_UARTEx_SetRxFifoThreshold>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_USART3_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001928:	f000 fb46 	bl	8001fb8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800192c:	4804      	ldr	r0, [pc, #16]	; (8001940 <MX_USART3_UART_Init+0x90>)
 800192e:	f009 f8ac 	bl	800aa8a <HAL_UARTEx_DisableFifoMode>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 8001938:	f000 fb3e 	bl	8001fb8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20004168 	.word	0x20004168
 8001944:	40004800 	.word	0x40004800

08001948 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800194e:	4b35      	ldr	r3, [pc, #212]	; (8001a24 <MX_DMA_Init+0xdc>)
 8001950:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001954:	4a33      	ldr	r2, [pc, #204]	; (8001a24 <MX_DMA_Init+0xdc>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800195e:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <MX_DMA_Init+0xdc>)
 8001960:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 800196c:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <MX_DMA_Init+0xdc>)
 800196e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001972:	4a2c      	ldr	r2, [pc, #176]	; (8001a24 <MX_DMA_Init+0xdc>)
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800197c:	4b29      	ldr	r3, [pc, #164]	; (8001a24 <MX_DMA_Init+0xdc>)
 800197e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2105      	movs	r1, #5
 800198e:	200b      	movs	r0, #11
 8001990:	f001 fc64 	bl	800325c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001994:	200b      	movs	r0, #11
 8001996:	f001 fc7b 	bl	8003290 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2105      	movs	r1, #5
 800199e:	200c      	movs	r0, #12
 80019a0:	f001 fc5c 	bl	800325c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80019a4:	200c      	movs	r0, #12
 80019a6:	f001 fc73 	bl	8003290 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2105      	movs	r1, #5
 80019ae:	200d      	movs	r0, #13
 80019b0:	f001 fc54 	bl	800325c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80019b4:	200d      	movs	r0, #13
 80019b6:	f001 fc6b 	bl	8003290 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2105      	movs	r1, #5
 80019be:	200e      	movs	r0, #14
 80019c0:	f001 fc4c 	bl	800325c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80019c4:	200e      	movs	r0, #14
 80019c6:	f001 fc63 	bl	8003290 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2105      	movs	r1, #5
 80019ce:	2010      	movs	r0, #16
 80019d0:	f001 fc44 	bl	800325c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80019d4:	2010      	movs	r0, #16
 80019d6:	f001 fc5b 	bl	8003290 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	2105      	movs	r1, #5
 80019de:	2011      	movs	r0, #17
 80019e0:	f001 fc3c 	bl	800325c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80019e4:	2011      	movs	r0, #17
 80019e6:	f001 fc53 	bl	8003290 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2105      	movs	r1, #5
 80019ee:	202f      	movs	r0, #47	; 0x2f
 80019f0:	f001 fc34 	bl	800325c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80019f4:	202f      	movs	r0, #47	; 0x2f
 80019f6:	f001 fc4b 	bl	8003290 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2105      	movs	r1, #5
 80019fe:	2038      	movs	r0, #56	; 0x38
 8001a00:	f001 fc2c 	bl	800325c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a04:	2038      	movs	r0, #56	; 0x38
 8001a06:	f001 fc43 	bl	8003290 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2105      	movs	r1, #5
 8001a0e:	2039      	movs	r0, #57	; 0x39
 8001a10:	f001 fc24 	bl	800325c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001a14:	2039      	movs	r0, #57	; 0x39
 8001a16:	f001 fc3b 	bl	8003290 <HAL_NVIC_EnableIRQ>

}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	58024400 	.word	0x58024400

08001a28 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001a3e:	4b3f      	ldr	r3, [pc, #252]	; (8001b3c <MX_GPIO_Init+0x114>)
 8001a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a44:	4a3d      	ldr	r2, [pc, #244]	; (8001b3c <MX_GPIO_Init+0x114>)
 8001a46:	f043 0310 	orr.w	r3, r3, #16
 8001a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a4e:	4b3b      	ldr	r3, [pc, #236]	; (8001b3c <MX_GPIO_Init+0x114>)
 8001a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a54:	f003 0310 	and.w	r3, r3, #16
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5c:	4b37      	ldr	r3, [pc, #220]	; (8001b3c <MX_GPIO_Init+0x114>)
 8001a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a62:	4a36      	ldr	r2, [pc, #216]	; (8001b3c <MX_GPIO_Init+0x114>)
 8001a64:	f043 0304 	orr.w	r3, r3, #4
 8001a68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a6c:	4b33      	ldr	r3, [pc, #204]	; (8001b3c <MX_GPIO_Init+0x114>)
 8001a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001a7a:	4b30      	ldr	r3, [pc, #192]	; (8001b3c <MX_GPIO_Init+0x114>)
 8001a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a80:	4a2e      	ldr	r2, [pc, #184]	; (8001b3c <MX_GPIO_Init+0x114>)
 8001a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a8a:	4b2c      	ldr	r3, [pc, #176]	; (8001b3c <MX_GPIO_Init+0x114>)
 8001a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a98:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <MX_GPIO_Init+0x114>)
 8001a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9e:	4a27      	ldr	r2, [pc, #156]	; (8001b3c <MX_GPIO_Init+0x114>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa8:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <MX_GPIO_Init+0x114>)
 8001aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab6:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <MX_GPIO_Init+0x114>)
 8001ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001abc:	4a1f      	ldr	r2, [pc, #124]	; (8001b3c <MX_GPIO_Init+0x114>)
 8001abe:	f043 0302 	orr.w	r3, r3, #2
 8001ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <MX_GPIO_Init+0x114>)
 8001ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2110      	movs	r1, #16
 8001ad8:	4819      	ldr	r0, [pc, #100]	; (8001b40 <MX_GPIO_Init+0x118>)
 8001ada:	f004 fbdd 	bl	8006298 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ade:	2310      	movs	r3, #16
 8001ae0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	4812      	ldr	r0, [pc, #72]	; (8001b40 <MX_GPIO_Init+0x118>)
 8001af6:	f004 fa1f 	bl	8005f38 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001afa:	2340      	movs	r3, #64	; 0x40
 8001afc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	480c      	ldr	r0, [pc, #48]	; (8001b40 <MX_GPIO_Init+0x118>)
 8001b0e:	f004 fa13 	bl	8005f38 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b16:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b20:	2302      	movs	r3, #2
 8001b22:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b24:	2301      	movs	r3, #1
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <MX_GPIO_Init+0x11c>)
 8001b30:	f004 fa02 	bl	8005f38 <HAL_GPIO_Init>

}
 8001b34:	bf00      	nop
 8001b36:	3728      	adds	r7, #40	; 0x28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	58024400 	.word	0x58024400
 8001b40:	58021000 	.word	0x58021000
 8001b44:	58020000 	.word	0x58020000

08001b48 <CtrlTaskF>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_CtrlTaskF */
void CtrlTaskF(void const *argument)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for (;;)
	{
		/* 该任务作为空任务 */
		HAL_IWDG_Refresh(&hiwdg1);
 8001b50:	4801      	ldr	r0, [pc, #4]	; (8001b58 <CtrlTaskF+0x10>)
 8001b52:	f004 fc09 	bl	8006368 <HAL_IWDG_Refresh>
 8001b56:	e7fb      	b.n	8001b50 <CtrlTaskF+0x8>
 8001b58:	200040e0 	.word	0x200040e0

08001b5c <SensorTaskF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SensorTaskF */
void SensorTaskF(void const *argument)
{
 8001b5c:	b5b0      	push	{r4, r5, r7, lr}
 8001b5e:	b08c      	sub	sp, #48	; 0x30
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	62f8      	str	r0, [r7, #44]	; 0x2c
	/* USER CODE BEGIN SensorTaskF */
	InitGY39();
 8001b64:	f7ff fa00 	bl	8000f68 <InitGY39>
	ReceiveDeep();
 8001b68:	f7ff fb0a 	bl	8001180 <ReceiveDeep>
	ReceiveGY39();
 8001b6c:	f107 0318 	add.w	r3, r7, #24
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fa0f 	bl	8000f94 <ReceiveGY39>
	ReceiveWT931();
 8001b76:	463b      	mov	r3, r7
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fa51 	bl	8001020 <ReceiveWT931>
	osDelay(200);
 8001b7e:	20c8      	movs	r0, #200	; 0xc8
 8001b80:	f009 f8f1 	bl	800ad66 <osDelay>
	DeepSensorData = ReceiveDeep();
 8001b84:	f7ff fafc 	bl	8001180 <ReceiveDeep>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	4b59      	ldr	r3, [pc, #356]	; (8001cf0 <SensorTaskF+0x194>)
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	8019      	strh	r1, [r3, #0]
 8001b90:	f3c2 420f 	ubfx	r2, r2, #16, #16
 8001b94:	805a      	strh	r2, [r3, #2]
	GY39SensorData = ReceiveGY39();
 8001b96:	4c57      	ldr	r4, [pc, #348]	; (8001cf4 <SensorTaskF+0x198>)
 8001b98:	463b      	mov	r3, r7
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff f9fa 	bl	8000f94 <ReceiveGY39>
 8001ba0:	463b      	mov	r3, r7
 8001ba2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ba6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	WT931SensorData = ReceiveWT931();
 8001baa:	4c53      	ldr	r4, [pc, #332]	; (8001cf8 <SensorTaskF+0x19c>)
 8001bac:	463b      	mov	r3, r7
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fa36 	bl	8001020 <ReceiveWT931>
 8001bb4:	4622      	mov	r2, r4
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	6859      	ldr	r1, [r3, #4]
 8001bbc:	689d      	ldr	r5, [r3, #8]
 8001bbe:	68dc      	ldr	r4, [r3, #12]
 8001bc0:	6010      	str	r0, [r2, #0]
 8001bc2:	6051      	str	r1, [r2, #4]
 8001bc4:	6095      	str	r5, [r2, #8]
 8001bc6:	60d4      	str	r4, [r2, #12]
 8001bc8:	6918      	ldr	r0, [r3, #16]
 8001bca:	6959      	ldr	r1, [r3, #20]
 8001bcc:	6110      	str	r0, [r2, #16]
 8001bce:	6151      	str	r1, [r2, #20]
	xSemaphoreGive(DeepSensorDataRWFlagHandle);
 8001bd0:	4b4a      	ldr	r3, [pc, #296]	; (8001cfc <SensorTaskF+0x1a0>)
 8001bd2:	6818      	ldr	r0, [r3, #0]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	f009 fb5d 	bl	800b298 <xQueueGenericSend>
	xSemaphoreGive(GY39SensorDataRWFlagHandle);
 8001bde:	4b48      	ldr	r3, [pc, #288]	; (8001d00 <SensorTaskF+0x1a4>)
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	2300      	movs	r3, #0
 8001be4:	2200      	movs	r2, #0
 8001be6:	2100      	movs	r1, #0
 8001be8:	f009 fb56 	bl	800b298 <xQueueGenericSend>
	xSemaphoreGive(WT931SensorDataRWFlagHandle);
 8001bec:	4b45      	ldr	r3, [pc, #276]	; (8001d04 <SensorTaskF+0x1a8>)
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	f009 fb4f 	bl	800b298 <xQueueGenericSend>
	/* Infinite loop */
	for (;;)
	{
		//收取深度数据
		if (xSemaphoreTake(DeepTransFinishHandleHandle,portMAX_DELAY) == pdTRUE)
 8001bfa:	4b43      	ldr	r3, [pc, #268]	; (8001d08 <SensorTaskF+0x1ac>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f04f 31ff 	mov.w	r1, #4294967295
 8001c02:	4618      	mov	r0, r3
 8001c04:	f009 fcd4 	bl	800b5b0 <xQueueSemaphoreTake>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d119      	bne.n	8001c42 <SensorTaskF+0xe6>
		{
			if (xSemaphoreTake(DeepSensorDataRWFlagHandle,
 8001c0e:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <SensorTaskF+0x1a0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f04f 31ff 	mov.w	r1, #4294967295
 8001c16:	4618      	mov	r0, r3
 8001c18:	f009 fcca 	bl	800b5b0 <xQueueSemaphoreTake>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d10f      	bne.n	8001c42 <SensorTaskF+0xe6>
					portMAX_DELAY) == pdTRUE)
			{
				DeepSensorData = ReceiveDeep();
 8001c22:	f7ff faad 	bl	8001180 <ReceiveDeep>
 8001c26:	4602      	mov	r2, r0
 8001c28:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <SensorTaskF+0x194>)
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	8019      	strh	r1, [r3, #0]
 8001c2e:	f3c2 420f 	ubfx	r2, r2, #16, #16
 8001c32:	805a      	strh	r2, [r3, #2]
				xSemaphoreGive(DeepSensorDataRWFlagHandle);
 8001c34:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <SensorTaskF+0x1a0>)
 8001c36:	6818      	ldr	r0, [r3, #0]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	f009 fb2b 	bl	800b298 <xQueueGenericSend>
			}
		}
		//收取九轴数据
		if (xSemaphoreTake(WT931TransFinishHandle,portMAX_DELAY) == pdTRUE)
 8001c42:	4b32      	ldr	r3, [pc, #200]	; (8001d0c <SensorTaskF+0x1b0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f04f 31ff 	mov.w	r1, #4294967295
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f009 fcb0 	bl	800b5b0 <xQueueSemaphoreTake>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d123      	bne.n	8001c9e <SensorTaskF+0x142>
		{
			if (xSemaphoreTake(WT931SensorDataRWFlagHandle,
 8001c56:	4b2b      	ldr	r3, [pc, #172]	; (8001d04 <SensorTaskF+0x1a8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f04f 31ff 	mov.w	r1, #4294967295
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f009 fca6 	bl	800b5b0 <xQueueSemaphoreTake>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d119      	bne.n	8001c9e <SensorTaskF+0x142>
					portMAX_DELAY) == pdTRUE)
			{
				WT931SensorData = ReceiveWT931();
 8001c6a:	4c23      	ldr	r4, [pc, #140]	; (8001cf8 <SensorTaskF+0x19c>)
 8001c6c:	463b      	mov	r3, r7
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff f9d6 	bl	8001020 <ReceiveWT931>
 8001c74:	4622      	mov	r2, r4
 8001c76:	463b      	mov	r3, r7
 8001c78:	6818      	ldr	r0, [r3, #0]
 8001c7a:	6859      	ldr	r1, [r3, #4]
 8001c7c:	689d      	ldr	r5, [r3, #8]
 8001c7e:	68dc      	ldr	r4, [r3, #12]
 8001c80:	6010      	str	r0, [r2, #0]
 8001c82:	6051      	str	r1, [r2, #4]
 8001c84:	6095      	str	r5, [r2, #8]
 8001c86:	60d4      	str	r4, [r2, #12]
 8001c88:	6918      	ldr	r0, [r3, #16]
 8001c8a:	6959      	ldr	r1, [r3, #20]
 8001c8c:	6110      	str	r0, [r2, #16]
 8001c8e:	6151      	str	r1, [r2, #20]
				xSemaphoreGive(WT931SensorDataRWFlagHandle);
 8001c90:	4b1c      	ldr	r3, [pc, #112]	; (8001d04 <SensorTaskF+0x1a8>)
 8001c92:	6818      	ldr	r0, [r3, #0]
 8001c94:	2300      	movs	r3, #0
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	f009 fafd 	bl	800b298 <xQueueGenericSend>
			}
		}
		//收取温湿度数�?
		if (xSemaphoreTake(GY39TransFinishHandle,portMAX_DELAY) == pdTRUE)
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <SensorTaskF+0x1b4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f009 fc82 	bl	800b5b0 <xQueueSemaphoreTake>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d11a      	bne.n	8001ce8 <SensorTaskF+0x18c>
		{
			if (xSemaphoreTake(GY39SensorDataRWFlagHandle,
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <SensorTaskF+0x1a4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f04f 31ff 	mov.w	r1, #4294967295
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f009 fc78 	bl	800b5b0 <xQueueSemaphoreTake>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d110      	bne.n	8001ce8 <SensorTaskF+0x18c>
					portMAX_DELAY) == pdTRUE)
			{
				GY39SensorData = ReceiveGY39();
 8001cc6:	4c0b      	ldr	r4, [pc, #44]	; (8001cf4 <SensorTaskF+0x198>)
 8001cc8:	463b      	mov	r3, r7
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff f962 	bl	8000f94 <ReceiveGY39>
 8001cd0:	463b      	mov	r3, r7
 8001cd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001cd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				xSemaphoreGive(GY39SensorDataRWFlagHandle);
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <SensorTaskF+0x1a4>)
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	f009 fad8 	bl	800b298 <xQueueGenericSend>
			}
		}
		HAL_IWDG_Refresh(&hiwdg1);
 8001ce8:	480a      	ldr	r0, [pc, #40]	; (8001d14 <SensorTaskF+0x1b8>)
 8001cea:	f004 fb3d 	bl	8006368 <HAL_IWDG_Refresh>
		if (xSemaphoreTake(DeepTransFinishHandleHandle,portMAX_DELAY) == pdTRUE)
 8001cee:	e784      	b.n	8001bfa <SensorTaskF+0x9e>
 8001cf0:	200045dc 	.word	0x200045dc
 8001cf4:	200044c4 	.word	0x200044c4
 8001cf8:	20004230 	.word	0x20004230
 8001cfc:	200041f8 	.word	0x200041f8
 8001d00:	2000422c 	.word	0x2000422c
 8001d04:	200042c4 	.word	0x200042c4
 8001d08:	2000470c 	.word	0x2000470c
 8001d0c:	20004788 	.word	0x20004788
 8001d10:	200041fc 	.word	0x200041fc
 8001d14:	200040e0 	.word	0x200040e0

08001d18 <UtBF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UtBF */
void UtBF(void const *argument)
{
 8001d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1a:	b0a7      	sub	sp, #156	; 0x9c
 8001d1c:	af0a      	add	r7, sp, #40	; 0x28
 8001d1e:	6678      	str	r0, [r7, #100]	; 0x64
	/* USER CODE BEGIN UtBF */
	u8 DIPFlag = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	u16 DIPStartNum = 0; //PID定向定深预期�??????
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	CaptureUpData();
 8001d2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fd97 	bl	8000864 <CaptureUpData>
	CaptureDownData();
 8001d36:	463b      	mov	r3, r7
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fc4d 	bl	80005d8 <CaptureDownData>
	osDelay(200);
 8001d3e:	20c8      	movs	r0, #200	; 0xc8
 8001d40:	f009 f811 	bl	800ad66 <osDelay>
	//打开串口接收
	BasetoUpData = CaptureUpData();
 8001d44:	4c56      	ldr	r4, [pc, #344]	; (8001ea0 <UtBF+0x188>)
 8001d46:	463b      	mov	r3, r7
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fd8b 	bl	8000864 <CaptureUpData>
 8001d4e:	4625      	mov	r5, r4
 8001d50:	463c      	mov	r4, r7
 8001d52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d5e:	e885 0003 	stmia.w	r5, {r0, r1}
	UptoBaseData = CaptureDownData();
 8001d62:	4c50      	ldr	r4, [pc, #320]	; (8001ea4 <UtBF+0x18c>)
 8001d64:	463b      	mov	r3, r7
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fc36 	bl	80005d8 <CaptureDownData>
 8001d6c:	4625      	mov	r5, r4
 8001d6e:	463c      	mov	r4, r7
 8001d70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d7c:	6823      	ldr	r3, [r4, #0]
 8001d7e:	602b      	str	r3, [r5, #0]
	xSemaphoreGive(BasetoUpDataRWFlagHandle);
 8001d80:	4b49      	ldr	r3, [pc, #292]	; (8001ea8 <UtBF+0x190>)
 8001d82:	6818      	ldr	r0, [r3, #0]
 8001d84:	2300      	movs	r3, #0
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	f009 fa85 	bl	800b298 <xQueueGenericSend>
	xSemaphoreGive(UptoBaseDataRWFlagHandle);
 8001d8e:	4b47      	ldr	r3, [pc, #284]	; (8001eac <UtBF+0x194>)
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	2300      	movs	r3, #0
 8001d94:	2200      	movs	r2, #0
 8001d96:	2100      	movs	r1, #0
 8001d98:	f009 fa7e 	bl	800b298 <xQueueGenericSend>

	/* Infinite loop */
	for (;;)
	{
		//根据控制位判断是否执行自主定向定�?
		if (UptoBaseData.Mode == 0b0010) // Mode & 0b0111 == 0b0010,使用定向模式
 8001d9c:	4b41      	ldr	r3, [pc, #260]	; (8001ea4 <UtBF+0x18c>)
 8001d9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d113      	bne.n	8001dce <UtBF+0xb6>
		{
			if (DIPFlag == 0)
 8001da6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d106      	bne.n	8001dbc <UtBF+0xa4>
			{
				DIPFlag = 1;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				DIPStartNum = WT931SensorData.EulNum[2];
 8001db4:	4b3e      	ldr	r3, [pc, #248]	; (8001eb0 <UtBF+0x198>)
 8001db6:	8a1b      	ldrh	r3, [r3, #16]
 8001db8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			}
			SpecialMovePID(2, DIPStartNum, WT931SensorData.EulNum[2]); //PID定向
 8001dbc:	4b3c      	ldr	r3, [pc, #240]	; (8001eb0 <UtBF+0x198>)
 8001dbe:	8a1a      	ldrh	r2, [r3, #16]
 8001dc0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	2002      	movs	r0, #2
 8001dc8:	f7fe ff36 	bl	8000c38 <SpecialMovePID>
 8001dcc:	e01b      	b.n	8001e06 <UtBF+0xee>
		}
		else if (UptoBaseData.Mode == 0b0100) // Mode & 0b0111 == 0b100,使用定深模式
 8001dce:	4b35      	ldr	r3, [pc, #212]	; (8001ea4 <UtBF+0x18c>)
 8001dd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d113      	bne.n	8001e00 <UtBF+0xe8>
		{
			if (DIPFlag == 0)
 8001dd8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d106      	bne.n	8001dee <UtBF+0xd6>
			{
				DIPFlag = 1;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				DIPStartNum = DeepSensorData.WaterDepth;
 8001de6:	4b33      	ldr	r3, [pc, #204]	; (8001eb4 <UtBF+0x19c>)
 8001de8:	885b      	ldrh	r3, [r3, #2]
 8001dea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			}
			SpecialMovePID(4, DIPStartNum, DeepSensorData.WaterDepth); //PID定深
 8001dee:	4b31      	ldr	r3, [pc, #196]	; (8001eb4 <UtBF+0x19c>)
 8001df0:	885a      	ldrh	r2, [r3, #2]
 8001df2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001df6:	4619      	mov	r1, r3
 8001df8:	2004      	movs	r0, #4
 8001dfa:	f7fe ff1d 	bl	8000c38 <SpecialMovePID>
 8001dfe:	e002      	b.n	8001e06 <UtBF+0xee>
		}
		else
		{
			DIPFlag = 0; //不开启定向定�?
 8001e00:	2300      	movs	r3, #0
 8001e02:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		}

		//收取上位机指令
		if (xSemaphoreTake(UptoBaseTransFinishHandle,portMAX_DELAY) == pdTRUE)
 8001e06:	4b2c      	ldr	r3, [pc, #176]	; (8001eb8 <UtBF+0x1a0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f009 fbce 	bl	800b5b0 <xQueueSemaphoreTake>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d11f      	bne.n	8001e5a <UtBF+0x142>
		{
			if (xSemaphoreTake(UptoBaseDataRWFlagHandle,
 8001e1a:	4b24      	ldr	r3, [pc, #144]	; (8001eac <UtBF+0x194>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e22:	4618      	mov	r0, r3
 8001e24:	f009 fbc4 	bl	800b5b0 <xQueueSemaphoreTake>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d115      	bne.n	8001e5a <UtBF+0x142>
					portMAX_DELAY) == pdTRUE)
			{
				UptoBaseData = CaptureDownData();
 8001e2e:	4c1d      	ldr	r4, [pc, #116]	; (8001ea4 <UtBF+0x18c>)
 8001e30:	463b      	mov	r3, r7
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fbd0 	bl	80005d8 <CaptureDownData>
 8001e38:	4625      	mov	r5, r4
 8001e3a:	463c      	mov	r4, r7
 8001e3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e48:	6823      	ldr	r3, [r4, #0]
 8001e4a:	602b      	str	r3, [r5, #0]
				xSemaphoreGive(UptoBaseDataRWFlagHandle);
 8001e4c:	4b17      	ldr	r3, [pc, #92]	; (8001eac <UtBF+0x194>)
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	2300      	movs	r3, #0
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	f009 fa1f 	bl	800b298 <xQueueGenericSend>
			}
		}

		//下传指令
		if (xSemaphoreTake(BasetoUpDataRWFlagHandle,
 8001e5a:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <UtBF+0x190>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e62:	4618      	mov	r0, r3
 8001e64:	f009 fba4 	bl	800b5b0 <xQueueSemaphoreTake>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d114      	bne.n	8001e98 <UtBF+0x180>
				portMAX_DELAY) == pdTRUE)
		{
			SendDownData(UptoBaseData);
 8001e6e:	4e0d      	ldr	r6, [pc, #52]	; (8001ea4 <UtBF+0x18c>)
 8001e70:	466d      	mov	r5, sp
 8001e72:	f106 0410 	add.w	r4, r6, #16
 8001e76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7e:	6823      	ldr	r3, [r4, #0]
 8001e80:	602b      	str	r3, [r5, #0]
 8001e82:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001e86:	f7fe fc49 	bl	800071c <SendDownData>
			xSemaphoreGive(BasetoUpDataRWFlagHandle);
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <UtBF+0x190>)
 8001e8c:	6818      	ldr	r0, [r3, #0]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	2200      	movs	r2, #0
 8001e92:	2100      	movs	r1, #0
 8001e94:	f009 fa00 	bl	800b298 <xQueueGenericSend>
		}

		HAL_IWDG_Refresh(&hiwdg1);
 8001e98:	4808      	ldr	r0, [pc, #32]	; (8001ebc <UtBF+0x1a4>)
 8001e9a:	f004 fa65 	bl	8006368 <HAL_IWDG_Refresh>
		if (UptoBaseData.Mode == 0b0010) // Mode & 0b0111 == 0b0010,使用定向模式
 8001e9e:	e77d      	b.n	8001d9c <UtBF+0x84>
 8001ea0:	20004204 	.word	0x20004204
 8001ea4:	2000478c 	.word	0x2000478c
 8001ea8:	20004708 	.word	0x20004708
 8001eac:	200044c0 	.word	0x200044c0
 8001eb0:	20004230 	.word	0x20004230
 8001eb4:	200045dc 	.word	0x200045dc
 8001eb8:	20003fe8 	.word	0x20003fe8
 8001ebc:	200040e0 	.word	0x200040e0

08001ec0 <BtUF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_BtUF */
void BtUF(void const *argument)
{
 8001ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec2:	b095      	sub	sp, #84	; 0x54
 8001ec4:	af06      	add	r7, sp, #24
 8001ec6:	62f8      	str	r0, [r7, #44]	; 0x2c
	/* USER CODE BEGIN BtUF */
//	xSemaphoreGive(BaseControlEnableFlagHandle);
	//用于指示当前传输数据是哪个仓位的标志
	//置为1的时候表示推进器控制�??????
	//置为0的时候表示主控仓
	u8 SensorCarbin = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	/* Infinite loop */
	for (;;)
	{
		if (SensorCarbin % 2 == 1) //发�?�推进器控制仓数�?
 8001ece:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d048      	beq.n	8001f6e <BtUF+0xae>
		{
			//接收下位仓回传的数据
			if (xSemaphoreTake(BasetoUpTransFinishHandleHandle,
 8001edc:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <BtUF+0xc0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f009 fb63 	bl	800b5b0 <xQueueSemaphoreTake>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d13e      	bne.n	8001f6e <BtUF+0xae>
					portMAX_DELAY) == pdTRUE)
			{
				if (xSemaphoreTake(BasetoUpDataRWFlagHandle,
 8001ef0:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <BtUF+0xc4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f009 fb59 	bl	800b5b0 <xQueueSemaphoreTake>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d134      	bne.n	8001f6e <BtUF+0xae>
						portMAX_DELAY) == pdTRUE)
				{
					BasetoUpData = CaptureUpData();
 8001f04:	4c20      	ldr	r4, [pc, #128]	; (8001f88 <BtUF+0xc8>)
 8001f06:	463b      	mov	r3, r7
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fcab 	bl	8000864 <CaptureUpData>
 8001f0e:	4625      	mov	r5, r4
 8001f10:	463c      	mov	r4, r7
 8001f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f1e:	e885 0003 	stmia.w	r5, {r0, r1}
					//上传数据
					if (xSemaphoreTake(UptoBaseDataRWFlagHandle,
 8001f22:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <BtUF+0xcc>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f04f 31ff 	mov.w	r1, #4294967295
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f009 fb40 	bl	800b5b0 <xQueueSemaphoreTake>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d114      	bne.n	8001f60 <BtUF+0xa0>
							portMAX_DELAY) == pdTRUE)
					{
						SendUpData(BasetoUpData);
 8001f36:	4e14      	ldr	r6, [pc, #80]	; (8001f88 <BtUF+0xc8>)
 8001f38:	466d      	mov	r5, sp
 8001f3a:	f106 0410 	add.w	r4, r6, #16
 8001f3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f46:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f4a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001f4e:	f7fe fd89 	bl	8000a64 <SendUpData>
						xSemaphoreGive(UptoBaseDataRWFlagHandle);
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <BtUF+0xcc>)
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	2300      	movs	r3, #0
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	f009 f99c 	bl	800b298 <xQueueGenericSend>
					}
					xSemaphoreGive(BasetoUpDataRWFlagHandle);
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <BtUF+0xc4>)
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	2300      	movs	r3, #0
 8001f66:	2200      	movs	r2, #0
 8001f68:	2100      	movs	r1, #0
 8001f6a:	f009 f995 	bl	800b298 <xQueueGenericSend>
//			{
//				SendUpData(BasetoUpData);
//				xSemaphoreGive(UptoBaseDataRWFlagHandle);
//			}
		}
		SensorCarbin++;
 8001f6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f72:	3301      	adds	r3, #1
 8001f74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		HAL_IWDG_Refresh(&hiwdg1);
 8001f78:	4805      	ldr	r0, [pc, #20]	; (8001f90 <BtUF+0xd0>)
 8001f7a:	f004 f9f5 	bl	8006368 <HAL_IWDG_Refresh>
		if (SensorCarbin % 2 == 1) //发�?�推进器控制仓数�?
 8001f7e:	e7a6      	b.n	8001ece <BtUF+0xe>
 8001f80:	20004548 	.word	0x20004548
 8001f84:	20004708 	.word	0x20004708
 8001f88:	20004204 	.word	0x20004204
 8001f8c:	200044c0 	.word	0x200044c0
 8001f90:	200040e0 	.word	0x200040e0

08001f94 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d101      	bne.n	8001faa <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8001fa6:	f001 f875 	bl	8003094 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40001000 	.word	0x40001000

08001fb8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fbc:	b672      	cpsid	i
}
 8001fbe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <Error_Handler+0x8>
	...

08001fc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fca:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <HAL_MspInit+0x38>)
 8001fcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fd0:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <HAL_MspInit+0x38>)
 8001fd2:	f043 0302 	orr.w	r3, r3, #2
 8001fd6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <HAL_MspInit+0x38>)
 8001fdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	607b      	str	r3, [r7, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	210f      	movs	r1, #15
 8001fec:	f06f 0001 	mvn.w	r0, #1
 8001ff0:	f001 f934 	bl	800325c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	58024400 	.word	0x58024400

08002000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b092      	sub	sp, #72	; 0x48
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a95      	ldr	r2, [pc, #596]	; (8002274 <HAL_UART_MspInit+0x274>)
 800201e:	4293      	cmp	r3, r2
 8002020:	f040 8091 	bne.w	8002146 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002024:	4b94      	ldr	r3, [pc, #592]	; (8002278 <HAL_UART_MspInit+0x278>)
 8002026:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800202a:	4a93      	ldr	r2, [pc, #588]	; (8002278 <HAL_UART_MspInit+0x278>)
 800202c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002030:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002034:	4b90      	ldr	r3, [pc, #576]	; (8002278 <HAL_UART_MspInit+0x278>)
 8002036:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800203a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800203e:	633b      	str	r3, [r7, #48]	; 0x30
 8002040:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002042:	4b8d      	ldr	r3, [pc, #564]	; (8002278 <HAL_UART_MspInit+0x278>)
 8002044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002048:	4a8b      	ldr	r2, [pc, #556]	; (8002278 <HAL_UART_MspInit+0x278>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002052:	4b89      	ldr	r3, [pc, #548]	; (8002278 <HAL_UART_MspInit+0x278>)
 8002054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800205e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002060:	2303      	movs	r3, #3
 8002062:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206c:	2300      	movs	r3, #0
 800206e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002070:	2308      	movs	r3, #8
 8002072:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002074:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002078:	4619      	mov	r1, r3
 800207a:	4880      	ldr	r0, [pc, #512]	; (800227c <HAL_UART_MspInit+0x27c>)
 800207c:	f003 ff5c 	bl	8005f38 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream5;
 8002080:	4b7f      	ldr	r3, [pc, #508]	; (8002280 <HAL_UART_MspInit+0x280>)
 8002082:	4a80      	ldr	r2, [pc, #512]	; (8002284 <HAL_UART_MspInit+0x284>)
 8002084:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002086:	4b7e      	ldr	r3, [pc, #504]	; (8002280 <HAL_UART_MspInit+0x280>)
 8002088:	223f      	movs	r2, #63	; 0x3f
 800208a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800208c:	4b7c      	ldr	r3, [pc, #496]	; (8002280 <HAL_UART_MspInit+0x280>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002092:	4b7b      	ldr	r3, [pc, #492]	; (8002280 <HAL_UART_MspInit+0x280>)
 8002094:	2200      	movs	r2, #0
 8002096:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002098:	4b79      	ldr	r3, [pc, #484]	; (8002280 <HAL_UART_MspInit+0x280>)
 800209a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800209e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020a0:	4b77      	ldr	r3, [pc, #476]	; (8002280 <HAL_UART_MspInit+0x280>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020a6:	4b76      	ldr	r3, [pc, #472]	; (8002280 <HAL_UART_MspInit+0x280>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80020ac:	4b74      	ldr	r3, [pc, #464]	; (8002280 <HAL_UART_MspInit+0x280>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020b2:	4b73      	ldr	r3, [pc, #460]	; (8002280 <HAL_UART_MspInit+0x280>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020b8:	4b71      	ldr	r3, [pc, #452]	; (8002280 <HAL_UART_MspInit+0x280>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80020be:	4870      	ldr	r0, [pc, #448]	; (8002280 <HAL_UART_MspInit+0x280>)
 80020c0:	f001 f8f4 	bl	80032ac <HAL_DMA_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80020ca:	f7ff ff75 	bl	8001fb8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a6b      	ldr	r2, [pc, #428]	; (8002280 <HAL_UART_MspInit+0x280>)
 80020d2:	67da      	str	r2, [r3, #124]	; 0x7c
 80020d4:	4a6a      	ldr	r2, [pc, #424]	; (8002280 <HAL_UART_MspInit+0x280>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream6;
 80020da:	4b6b      	ldr	r3, [pc, #428]	; (8002288 <HAL_UART_MspInit+0x288>)
 80020dc:	4a6b      	ldr	r2, [pc, #428]	; (800228c <HAL_UART_MspInit+0x28c>)
 80020de:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80020e0:	4b69      	ldr	r3, [pc, #420]	; (8002288 <HAL_UART_MspInit+0x288>)
 80020e2:	2240      	movs	r2, #64	; 0x40
 80020e4:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020e6:	4b68      	ldr	r3, [pc, #416]	; (8002288 <HAL_UART_MspInit+0x288>)
 80020e8:	2240      	movs	r2, #64	; 0x40
 80020ea:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ec:	4b66      	ldr	r3, [pc, #408]	; (8002288 <HAL_UART_MspInit+0x288>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020f2:	4b65      	ldr	r3, [pc, #404]	; (8002288 <HAL_UART_MspInit+0x288>)
 80020f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f8:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020fa:	4b63      	ldr	r3, [pc, #396]	; (8002288 <HAL_UART_MspInit+0x288>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002100:	4b61      	ldr	r3, [pc, #388]	; (8002288 <HAL_UART_MspInit+0x288>)
 8002102:	2200      	movs	r2, #0
 8002104:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002106:	4b60      	ldr	r3, [pc, #384]	; (8002288 <HAL_UART_MspInit+0x288>)
 8002108:	2200      	movs	r2, #0
 800210a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800210c:	4b5e      	ldr	r3, [pc, #376]	; (8002288 <HAL_UART_MspInit+0x288>)
 800210e:	2200      	movs	r2, #0
 8002110:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002112:	4b5d      	ldr	r3, [pc, #372]	; (8002288 <HAL_UART_MspInit+0x288>)
 8002114:	2200      	movs	r2, #0
 8002116:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002118:	485b      	ldr	r0, [pc, #364]	; (8002288 <HAL_UART_MspInit+0x288>)
 800211a:	f001 f8c7 	bl	80032ac <HAL_DMA_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002124:	f7ff ff48 	bl	8001fb8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a57      	ldr	r2, [pc, #348]	; (8002288 <HAL_UART_MspInit+0x288>)
 800212c:	679a      	str	r2, [r3, #120]	; 0x78
 800212e:	4a56      	ldr	r2, [pc, #344]	; (8002288 <HAL_UART_MspInit+0x288>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002134:	2200      	movs	r2, #0
 8002136:	2105      	movs	r1, #5
 8002138:	2034      	movs	r0, #52	; 0x34
 800213a:	f001 f88f 	bl	800325c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800213e:	2034      	movs	r0, #52	; 0x34
 8002140:	f001 f8a6 	bl	8003290 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002144:	e263      	b.n	800260e <HAL_UART_MspInit+0x60e>
  else if(huart->Instance==UART8)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a51      	ldr	r2, [pc, #324]	; (8002290 <HAL_UART_MspInit+0x290>)
 800214c:	4293      	cmp	r3, r2
 800214e:	f040 80ab 	bne.w	80022a8 <HAL_UART_MspInit+0x2a8>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002152:	4b49      	ldr	r3, [pc, #292]	; (8002278 <HAL_UART_MspInit+0x278>)
 8002154:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002158:	4a47      	ldr	r2, [pc, #284]	; (8002278 <HAL_UART_MspInit+0x278>)
 800215a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800215e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002162:	4b45      	ldr	r3, [pc, #276]	; (8002278 <HAL_UART_MspInit+0x278>)
 8002164:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002168:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800216c:	62bb      	str	r3, [r7, #40]	; 0x28
 800216e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002170:	4b41      	ldr	r3, [pc, #260]	; (8002278 <HAL_UART_MspInit+0x278>)
 8002172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002176:	4a40      	ldr	r2, [pc, #256]	; (8002278 <HAL_UART_MspInit+0x278>)
 8002178:	f043 0310 	orr.w	r3, r3, #16
 800217c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002180:	4b3d      	ldr	r3, [pc, #244]	; (8002278 <HAL_UART_MspInit+0x278>)
 8002182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800218e:	2303      	movs	r3, #3
 8002190:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219a:	2300      	movs	r3, #0
 800219c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800219e:	2308      	movs	r3, #8
 80021a0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021a6:	4619      	mov	r1, r3
 80021a8:	483a      	ldr	r0, [pc, #232]	; (8002294 <HAL_UART_MspInit+0x294>)
 80021aa:	f003 fec5 	bl	8005f38 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream7;
 80021ae:	4b3a      	ldr	r3, [pc, #232]	; (8002298 <HAL_UART_MspInit+0x298>)
 80021b0:	4a3a      	ldr	r2, [pc, #232]	; (800229c <HAL_UART_MspInit+0x29c>)
 80021b2:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 80021b4:	4b38      	ldr	r3, [pc, #224]	; (8002298 <HAL_UART_MspInit+0x298>)
 80021b6:	2251      	movs	r2, #81	; 0x51
 80021b8:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021ba:	4b37      	ldr	r3, [pc, #220]	; (8002298 <HAL_UART_MspInit+0x298>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021c0:	4b35      	ldr	r3, [pc, #212]	; (8002298 <HAL_UART_MspInit+0x298>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021c6:	4b34      	ldr	r3, [pc, #208]	; (8002298 <HAL_UART_MspInit+0x298>)
 80021c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021cc:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021ce:	4b32      	ldr	r3, [pc, #200]	; (8002298 <HAL_UART_MspInit+0x298>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021d4:	4b30      	ldr	r3, [pc, #192]	; (8002298 <HAL_UART_MspInit+0x298>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 80021da:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <HAL_UART_MspInit+0x298>)
 80021dc:	2200      	movs	r2, #0
 80021de:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021e0:	4b2d      	ldr	r3, [pc, #180]	; (8002298 <HAL_UART_MspInit+0x298>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021e6:	4b2c      	ldr	r3, [pc, #176]	; (8002298 <HAL_UART_MspInit+0x298>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80021ec:	482a      	ldr	r0, [pc, #168]	; (8002298 <HAL_UART_MspInit+0x298>)
 80021ee:	f001 f85d 	bl	80032ac <HAL_DMA_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 80021f8:	f7ff fede 	bl	8001fb8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a26      	ldr	r2, [pc, #152]	; (8002298 <HAL_UART_MspInit+0x298>)
 8002200:	67da      	str	r2, [r3, #124]	; 0x7c
 8002202:	4a25      	ldr	r2, [pc, #148]	; (8002298 <HAL_UART_MspInit+0x298>)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart8_tx.Instance = DMA2_Stream0;
 8002208:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <HAL_UART_MspInit+0x2a0>)
 800220a:	4a26      	ldr	r2, [pc, #152]	; (80022a4 <HAL_UART_MspInit+0x2a4>)
 800220c:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 800220e:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <HAL_UART_MspInit+0x2a0>)
 8002210:	2252      	movs	r2, #82	; 0x52
 8002212:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002214:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <HAL_UART_MspInit+0x2a0>)
 8002216:	2240      	movs	r2, #64	; 0x40
 8002218:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800221a:	4b21      	ldr	r3, [pc, #132]	; (80022a0 <HAL_UART_MspInit+0x2a0>)
 800221c:	2200      	movs	r2, #0
 800221e:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002220:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <HAL_UART_MspInit+0x2a0>)
 8002222:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002226:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002228:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <HAL_UART_MspInit+0x2a0>)
 800222a:	2200      	movs	r2, #0
 800222c:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800222e:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <HAL_UART_MspInit+0x2a0>)
 8002230:	2200      	movs	r2, #0
 8002232:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8002234:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <HAL_UART_MspInit+0x2a0>)
 8002236:	2200      	movs	r2, #0
 8002238:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 800223a:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_UART_MspInit+0x2a0>)
 800223c:	2200      	movs	r2, #0
 800223e:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002240:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <HAL_UART_MspInit+0x2a0>)
 8002242:	2200      	movs	r2, #0
 8002244:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8002246:	4816      	ldr	r0, [pc, #88]	; (80022a0 <HAL_UART_MspInit+0x2a0>)
 8002248:	f001 f830 	bl	80032ac <HAL_DMA_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_UART_MspInit+0x256>
      Error_Handler();
 8002252:	f7ff feb1 	bl	8001fb8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a11      	ldr	r2, [pc, #68]	; (80022a0 <HAL_UART_MspInit+0x2a0>)
 800225a:	679a      	str	r2, [r3, #120]	; 0x78
 800225c:	4a10      	ldr	r2, [pc, #64]	; (80022a0 <HAL_UART_MspInit+0x2a0>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	2105      	movs	r1, #5
 8002266:	2053      	movs	r0, #83	; 0x53
 8002268:	f000 fff8 	bl	800325c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800226c:	2053      	movs	r0, #83	; 0x53
 800226e:	f001 f80f 	bl	8003290 <HAL_NVIC_EnableIRQ>
}
 8002272:	e1cc      	b.n	800260e <HAL_UART_MspInit+0x60e>
 8002274:	40004c00 	.word	0x40004c00
 8002278:	58024400 	.word	0x58024400
 800227c:	58020000 	.word	0x58020000
 8002280:	20003ff0 	.word	0x20003ff0
 8002284:	40020088 	.word	0x40020088
 8002288:	20004710 	.word	0x20004710
 800228c:	400200a0 	.word	0x400200a0
 8002290:	40007c00 	.word	0x40007c00
 8002294:	58021000 	.word	0x58021000
 8002298:	200043b8 	.word	0x200043b8
 800229c:	400200b8 	.word	0x400200b8
 80022a0:	200044d0 	.word	0x200044d0
 80022a4:	40020410 	.word	0x40020410
  else if(huart->Instance==USART1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a96      	ldr	r2, [pc, #600]	; (8002508 <HAL_UART_MspInit+0x508>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	f040 8092 	bne.w	80023d8 <HAL_UART_MspInit+0x3d8>
    __HAL_RCC_USART1_CLK_ENABLE();
 80022b4:	4b95      	ldr	r3, [pc, #596]	; (800250c <HAL_UART_MspInit+0x50c>)
 80022b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022ba:	4a94      	ldr	r2, [pc, #592]	; (800250c <HAL_UART_MspInit+0x50c>)
 80022bc:	f043 0310 	orr.w	r3, r3, #16
 80022c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022c4:	4b91      	ldr	r3, [pc, #580]	; (800250c <HAL_UART_MspInit+0x50c>)
 80022c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	623b      	str	r3, [r7, #32]
 80022d0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d2:	4b8e      	ldr	r3, [pc, #568]	; (800250c <HAL_UART_MspInit+0x50c>)
 80022d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d8:	4a8c      	ldr	r2, [pc, #560]	; (800250c <HAL_UART_MspInit+0x50c>)
 80022da:	f043 0302 	orr.w	r3, r3, #2
 80022de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022e2:	4b8a      	ldr	r3, [pc, #552]	; (800250c <HAL_UART_MspInit+0x50c>)
 80022e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80022f0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80022f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	2300      	movs	r3, #0
 8002300:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002302:	2304      	movs	r3, #4
 8002304:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002306:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800230a:	4619      	mov	r1, r3
 800230c:	4880      	ldr	r0, [pc, #512]	; (8002510 <HAL_UART_MspInit+0x510>)
 800230e:	f003 fe13 	bl	8005f38 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8002312:	4b80      	ldr	r3, [pc, #512]	; (8002514 <HAL_UART_MspInit+0x514>)
 8002314:	4a80      	ldr	r2, [pc, #512]	; (8002518 <HAL_UART_MspInit+0x518>)
 8002316:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002318:	4b7e      	ldr	r3, [pc, #504]	; (8002514 <HAL_UART_MspInit+0x514>)
 800231a:	2229      	movs	r2, #41	; 0x29
 800231c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800231e:	4b7d      	ldr	r3, [pc, #500]	; (8002514 <HAL_UART_MspInit+0x514>)
 8002320:	2200      	movs	r2, #0
 8002322:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002324:	4b7b      	ldr	r3, [pc, #492]	; (8002514 <HAL_UART_MspInit+0x514>)
 8002326:	2200      	movs	r2, #0
 8002328:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800232a:	4b7a      	ldr	r3, [pc, #488]	; (8002514 <HAL_UART_MspInit+0x514>)
 800232c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002330:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002332:	4b78      	ldr	r3, [pc, #480]	; (8002514 <HAL_UART_MspInit+0x514>)
 8002334:	2200      	movs	r2, #0
 8002336:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002338:	4b76      	ldr	r3, [pc, #472]	; (8002514 <HAL_UART_MspInit+0x514>)
 800233a:	2200      	movs	r2, #0
 800233c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800233e:	4b75      	ldr	r3, [pc, #468]	; (8002514 <HAL_UART_MspInit+0x514>)
 8002340:	2200      	movs	r2, #0
 8002342:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002344:	4b73      	ldr	r3, [pc, #460]	; (8002514 <HAL_UART_MspInit+0x514>)
 8002346:	2200      	movs	r2, #0
 8002348:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800234a:	4b72      	ldr	r3, [pc, #456]	; (8002514 <HAL_UART_MspInit+0x514>)
 800234c:	2200      	movs	r2, #0
 800234e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002350:	4870      	ldr	r0, [pc, #448]	; (8002514 <HAL_UART_MspInit+0x514>)
 8002352:	f000 ffab 	bl	80032ac <HAL_DMA_Init>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_UART_MspInit+0x360>
      Error_Handler();
 800235c:	f7ff fe2c 	bl	8001fb8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a6c      	ldr	r2, [pc, #432]	; (8002514 <HAL_UART_MspInit+0x514>)
 8002364:	67da      	str	r2, [r3, #124]	; 0x7c
 8002366:	4a6b      	ldr	r2, [pc, #428]	; (8002514 <HAL_UART_MspInit+0x514>)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA1_Stream1;
 800236c:	4b6b      	ldr	r3, [pc, #428]	; (800251c <HAL_UART_MspInit+0x51c>)
 800236e:	4a6c      	ldr	r2, [pc, #432]	; (8002520 <HAL_UART_MspInit+0x520>)
 8002370:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002372:	4b6a      	ldr	r3, [pc, #424]	; (800251c <HAL_UART_MspInit+0x51c>)
 8002374:	222a      	movs	r2, #42	; 0x2a
 8002376:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002378:	4b68      	ldr	r3, [pc, #416]	; (800251c <HAL_UART_MspInit+0x51c>)
 800237a:	2240      	movs	r2, #64	; 0x40
 800237c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800237e:	4b67      	ldr	r3, [pc, #412]	; (800251c <HAL_UART_MspInit+0x51c>)
 8002380:	2200      	movs	r2, #0
 8002382:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002384:	4b65      	ldr	r3, [pc, #404]	; (800251c <HAL_UART_MspInit+0x51c>)
 8002386:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800238a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800238c:	4b63      	ldr	r3, [pc, #396]	; (800251c <HAL_UART_MspInit+0x51c>)
 800238e:	2200      	movs	r2, #0
 8002390:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002392:	4b62      	ldr	r3, [pc, #392]	; (800251c <HAL_UART_MspInit+0x51c>)
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002398:	4b60      	ldr	r3, [pc, #384]	; (800251c <HAL_UART_MspInit+0x51c>)
 800239a:	2200      	movs	r2, #0
 800239c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800239e:	4b5f      	ldr	r3, [pc, #380]	; (800251c <HAL_UART_MspInit+0x51c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023a4:	4b5d      	ldr	r3, [pc, #372]	; (800251c <HAL_UART_MspInit+0x51c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80023aa:	485c      	ldr	r0, [pc, #368]	; (800251c <HAL_UART_MspInit+0x51c>)
 80023ac:	f000 ff7e 	bl	80032ac <HAL_DMA_Init>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_UART_MspInit+0x3ba>
      Error_Handler();
 80023b6:	f7ff fdff 	bl	8001fb8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a57      	ldr	r2, [pc, #348]	; (800251c <HAL_UART_MspInit+0x51c>)
 80023be:	679a      	str	r2, [r3, #120]	; 0x78
 80023c0:	4a56      	ldr	r2, [pc, #344]	; (800251c <HAL_UART_MspInit+0x51c>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2105      	movs	r1, #5
 80023ca:	2025      	movs	r0, #37	; 0x25
 80023cc:	f000 ff46 	bl	800325c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023d0:	2025      	movs	r0, #37	; 0x25
 80023d2:	f000 ff5d 	bl	8003290 <HAL_NVIC_EnableIRQ>
}
 80023d6:	e11a      	b.n	800260e <HAL_UART_MspInit+0x60e>
  else if(huart->Instance==USART2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a51      	ldr	r2, [pc, #324]	; (8002524 <HAL_UART_MspInit+0x524>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	f040 80ac 	bne.w	800253c <HAL_UART_MspInit+0x53c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023e4:	4b49      	ldr	r3, [pc, #292]	; (800250c <HAL_UART_MspInit+0x50c>)
 80023e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023ea:	4a48      	ldr	r2, [pc, #288]	; (800250c <HAL_UART_MspInit+0x50c>)
 80023ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023f4:	4b45      	ldr	r3, [pc, #276]	; (800250c <HAL_UART_MspInit+0x50c>)
 80023f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	61bb      	str	r3, [r7, #24]
 8002400:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002402:	4b42      	ldr	r3, [pc, #264]	; (800250c <HAL_UART_MspInit+0x50c>)
 8002404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002408:	4a40      	ldr	r2, [pc, #256]	; (800250c <HAL_UART_MspInit+0x50c>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002412:	4b3e      	ldr	r3, [pc, #248]	; (800250c <HAL_UART_MspInit+0x50c>)
 8002414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002420:	230c      	movs	r3, #12
 8002422:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002424:	2302      	movs	r3, #2
 8002426:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242c:	2300      	movs	r3, #0
 800242e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002430:	2307      	movs	r3, #7
 8002432:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002434:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002438:	4619      	mov	r1, r3
 800243a:	483b      	ldr	r0, [pc, #236]	; (8002528 <HAL_UART_MspInit+0x528>)
 800243c:	f003 fd7c 	bl	8005f38 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream2;
 8002440:	4b3a      	ldr	r3, [pc, #232]	; (800252c <HAL_UART_MspInit+0x52c>)
 8002442:	4a3b      	ldr	r2, [pc, #236]	; (8002530 <HAL_UART_MspInit+0x530>)
 8002444:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002446:	4b39      	ldr	r3, [pc, #228]	; (800252c <HAL_UART_MspInit+0x52c>)
 8002448:	222b      	movs	r2, #43	; 0x2b
 800244a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800244c:	4b37      	ldr	r3, [pc, #220]	; (800252c <HAL_UART_MspInit+0x52c>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002452:	4b36      	ldr	r3, [pc, #216]	; (800252c <HAL_UART_MspInit+0x52c>)
 8002454:	2200      	movs	r2, #0
 8002456:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002458:	4b34      	ldr	r3, [pc, #208]	; (800252c <HAL_UART_MspInit+0x52c>)
 800245a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800245e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002460:	4b32      	ldr	r3, [pc, #200]	; (800252c <HAL_UART_MspInit+0x52c>)
 8002462:	2200      	movs	r2, #0
 8002464:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002466:	4b31      	ldr	r3, [pc, #196]	; (800252c <HAL_UART_MspInit+0x52c>)
 8002468:	2200      	movs	r2, #0
 800246a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800246c:	4b2f      	ldr	r3, [pc, #188]	; (800252c <HAL_UART_MspInit+0x52c>)
 800246e:	2200      	movs	r2, #0
 8002470:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002472:	4b2e      	ldr	r3, [pc, #184]	; (800252c <HAL_UART_MspInit+0x52c>)
 8002474:	2200      	movs	r2, #0
 8002476:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002478:	4b2c      	ldr	r3, [pc, #176]	; (800252c <HAL_UART_MspInit+0x52c>)
 800247a:	2200      	movs	r2, #0
 800247c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800247e:	482b      	ldr	r0, [pc, #172]	; (800252c <HAL_UART_MspInit+0x52c>)
 8002480:	f000 ff14 	bl	80032ac <HAL_DMA_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_UART_MspInit+0x48e>
      Error_Handler();
 800248a:	f7ff fd95 	bl	8001fb8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a26      	ldr	r2, [pc, #152]	; (800252c <HAL_UART_MspInit+0x52c>)
 8002492:	67da      	str	r2, [r3, #124]	; 0x7c
 8002494:	4a25      	ldr	r2, [pc, #148]	; (800252c <HAL_UART_MspInit+0x52c>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA2_Stream1;
 800249a:	4b26      	ldr	r3, [pc, #152]	; (8002534 <HAL_UART_MspInit+0x534>)
 800249c:	4a26      	ldr	r2, [pc, #152]	; (8002538 <HAL_UART_MspInit+0x538>)
 800249e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80024a0:	4b24      	ldr	r3, [pc, #144]	; (8002534 <HAL_UART_MspInit+0x534>)
 80024a2:	222c      	movs	r2, #44	; 0x2c
 80024a4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024a6:	4b23      	ldr	r3, [pc, #140]	; (8002534 <HAL_UART_MspInit+0x534>)
 80024a8:	2240      	movs	r2, #64	; 0x40
 80024aa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ac:	4b21      	ldr	r3, [pc, #132]	; (8002534 <HAL_UART_MspInit+0x534>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024b2:	4b20      	ldr	r3, [pc, #128]	; (8002534 <HAL_UART_MspInit+0x534>)
 80024b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024ba:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <HAL_UART_MspInit+0x534>)
 80024bc:	2200      	movs	r2, #0
 80024be:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024c0:	4b1c      	ldr	r3, [pc, #112]	; (8002534 <HAL_UART_MspInit+0x534>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80024c6:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <HAL_UART_MspInit+0x534>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024cc:	4b19      	ldr	r3, [pc, #100]	; (8002534 <HAL_UART_MspInit+0x534>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024d2:	4b18      	ldr	r3, [pc, #96]	; (8002534 <HAL_UART_MspInit+0x534>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80024d8:	4816      	ldr	r0, [pc, #88]	; (8002534 <HAL_UART_MspInit+0x534>)
 80024da:	f000 fee7 	bl	80032ac <HAL_DMA_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_UART_MspInit+0x4e8>
      Error_Handler();
 80024e4:	f7ff fd68 	bl	8001fb8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a12      	ldr	r2, [pc, #72]	; (8002534 <HAL_UART_MspInit+0x534>)
 80024ec:	679a      	str	r2, [r3, #120]	; 0x78
 80024ee:	4a11      	ldr	r2, [pc, #68]	; (8002534 <HAL_UART_MspInit+0x534>)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80024f4:	2200      	movs	r2, #0
 80024f6:	2105      	movs	r1, #5
 80024f8:	2026      	movs	r0, #38	; 0x26
 80024fa:	f000 feaf 	bl	800325c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024fe:	2026      	movs	r0, #38	; 0x26
 8002500:	f000 fec6 	bl	8003290 <HAL_NVIC_EnableIRQ>
}
 8002504:	e083      	b.n	800260e <HAL_UART_MspInit+0x60e>
 8002506:	bf00      	nop
 8002508:	40011000 	.word	0x40011000
 800250c:	58024400 	.word	0x58024400
 8002510:	58020400 	.word	0x58020400
 8002514:	200042c8 	.word	0x200042c8
 8002518:	40020010 	.word	0x40020010
 800251c:	2000424c 	.word	0x2000424c
 8002520:	40020028 	.word	0x40020028
 8002524:	40004400 	.word	0x40004400
 8002528:	58020000 	.word	0x58020000
 800252c:	20004068 	.word	0x20004068
 8002530:	40020040 	.word	0x40020040
 8002534:	20004340 	.word	0x20004340
 8002538:	40020428 	.word	0x40020428
  else if(huart->Instance==USART3)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a35      	ldr	r2, [pc, #212]	; (8002618 <HAL_UART_MspInit+0x618>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d163      	bne.n	800260e <HAL_UART_MspInit+0x60e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002546:	4b35      	ldr	r3, [pc, #212]	; (800261c <HAL_UART_MspInit+0x61c>)
 8002548:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800254c:	4a33      	ldr	r2, [pc, #204]	; (800261c <HAL_UART_MspInit+0x61c>)
 800254e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002552:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002556:	4b31      	ldr	r3, [pc, #196]	; (800261c <HAL_UART_MspInit+0x61c>)
 8002558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800255c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002564:	4b2d      	ldr	r3, [pc, #180]	; (800261c <HAL_UART_MspInit+0x61c>)
 8002566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800256a:	4a2c      	ldr	r2, [pc, #176]	; (800261c <HAL_UART_MspInit+0x61c>)
 800256c:	f043 0302 	orr.w	r3, r3, #2
 8002570:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002574:	4b29      	ldr	r3, [pc, #164]	; (800261c <HAL_UART_MspInit+0x61c>)
 8002576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002582:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002586:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002588:	2302      	movs	r3, #2
 800258a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002590:	2300      	movs	r3, #0
 8002592:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002594:	2307      	movs	r3, #7
 8002596:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002598:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800259c:	4619      	mov	r1, r3
 800259e:	4820      	ldr	r0, [pc, #128]	; (8002620 <HAL_UART_MspInit+0x620>)
 80025a0:	f003 fcca 	bl	8005f38 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream3;
 80025a4:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <HAL_UART_MspInit+0x624>)
 80025a6:	4a20      	ldr	r2, [pc, #128]	; (8002628 <HAL_UART_MspInit+0x628>)
 80025a8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80025aa:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <HAL_UART_MspInit+0x624>)
 80025ac:	222d      	movs	r2, #45	; 0x2d
 80025ae:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025b0:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <HAL_UART_MspInit+0x624>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b6:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <HAL_UART_MspInit+0x624>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025bc:	4b19      	ldr	r3, [pc, #100]	; (8002624 <HAL_UART_MspInit+0x624>)
 80025be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025c2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025c4:	4b17      	ldr	r3, [pc, #92]	; (8002624 <HAL_UART_MspInit+0x624>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ca:	4b16      	ldr	r3, [pc, #88]	; (8002624 <HAL_UART_MspInit+0x624>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80025d0:	4b14      	ldr	r3, [pc, #80]	; (8002624 <HAL_UART_MspInit+0x624>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025d6:	4b13      	ldr	r3, [pc, #76]	; (8002624 <HAL_UART_MspInit+0x624>)
 80025d8:	2200      	movs	r2, #0
 80025da:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025dc:	4b11      	ldr	r3, [pc, #68]	; (8002624 <HAL_UART_MspInit+0x624>)
 80025de:	2200      	movs	r2, #0
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80025e2:	4810      	ldr	r0, [pc, #64]	; (8002624 <HAL_UART_MspInit+0x624>)
 80025e4:	f000 fe62 	bl	80032ac <HAL_DMA_Init>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_UART_MspInit+0x5f2>
      Error_Handler();
 80025ee:	f7ff fce3 	bl	8001fb8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a0b      	ldr	r2, [pc, #44]	; (8002624 <HAL_UART_MspInit+0x624>)
 80025f6:	67da      	str	r2, [r3, #124]	; 0x7c
 80025f8:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <HAL_UART_MspInit+0x624>)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	2105      	movs	r1, #5
 8002602:	2027      	movs	r0, #39	; 0x27
 8002604:	f000 fe2a 	bl	800325c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002608:	2027      	movs	r0, #39	; 0x27
 800260a:	f000 fe41 	bl	8003290 <HAL_NVIC_EnableIRQ>
}
 800260e:	bf00      	nop
 8002610:	3748      	adds	r7, #72	; 0x48
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40004800 	.word	0x40004800
 800261c:	58024400 	.word	0x58024400
 8002620:	58020400 	.word	0x58020400
 8002624:	200040f0 	.word	0x200040f0
 8002628:	40020058 	.word	0x40020058

0800262c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b090      	sub	sp, #64	; 0x40
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b0f      	cmp	r3, #15
 8002638:	d827      	bhi.n	800268a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800263a:	2200      	movs	r2, #0
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	2036      	movs	r0, #54	; 0x36
 8002640:	f000 fe0c 	bl	800325c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002644:	2036      	movs	r0, #54	; 0x36
 8002646:	f000 fe23 	bl	8003290 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800264a:	4a29      	ldr	r2, [pc, #164]	; (80026f0 <HAL_InitTick+0xc4>)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002650:	4b28      	ldr	r3, [pc, #160]	; (80026f4 <HAL_InitTick+0xc8>)
 8002652:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002656:	4a27      	ldr	r2, [pc, #156]	; (80026f4 <HAL_InitTick+0xc8>)
 8002658:	f043 0310 	orr.w	r3, r3, #16
 800265c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002660:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <HAL_InitTick+0xc8>)
 8002662:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800266e:	f107 0210 	add.w	r2, r7, #16
 8002672:	f107 0314 	add.w	r3, r7, #20
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f004 fe5b 	bl	8007334 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800267e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002680:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002684:	2b00      	cmp	r3, #0
 8002686:	d106      	bne.n	8002696 <HAL_InitTick+0x6a>
 8002688:	e001      	b.n	800268e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e02b      	b.n	80026e6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800268e:	f004 fe25 	bl	80072dc <HAL_RCC_GetPCLK1Freq>
 8002692:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002694:	e004      	b.n	80026a0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002696:	f004 fe21 	bl	80072dc <HAL_RCC_GetPCLK1Freq>
 800269a:	4603      	mov	r3, r0
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026a2:	4a15      	ldr	r2, [pc, #84]	; (80026f8 <HAL_InitTick+0xcc>)
 80026a4:	fba2 2303 	umull	r2, r3, r2, r3
 80026a8:	0c9b      	lsrs	r3, r3, #18
 80026aa:	3b01      	subs	r3, #1
 80026ac:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80026ae:	4b13      	ldr	r3, [pc, #76]	; (80026fc <HAL_InitTick+0xd0>)
 80026b0:	4a13      	ldr	r2, [pc, #76]	; (8002700 <HAL_InitTick+0xd4>)
 80026b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80026b4:	4b11      	ldr	r3, [pc, #68]	; (80026fc <HAL_InitTick+0xd0>)
 80026b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026ba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80026bc:	4a0f      	ldr	r2, [pc, #60]	; (80026fc <HAL_InitTick+0xd0>)
 80026be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <HAL_InitTick+0xd0>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <HAL_InitTick+0xd0>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80026ce:	480b      	ldr	r0, [pc, #44]	; (80026fc <HAL_InitTick+0xd0>)
 80026d0:	f006 f9d4 	bl	8008a7c <HAL_TIM_Base_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d104      	bne.n	80026e4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80026da:	4808      	ldr	r0, [pc, #32]	; (80026fc <HAL_InitTick+0xd0>)
 80026dc:	f006 fa30 	bl	8008b40 <HAL_TIM_Base_Start_IT>
 80026e0:	4603      	mov	r3, r0
 80026e2:	e000      	b.n	80026e6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3740      	adds	r7, #64	; 0x40
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000008 	.word	0x20000008
 80026f4:	58024400 	.word	0x58024400
 80026f8:	431bde83 	.word	0x431bde83
 80026fc:	200047c0 	.word	0x200047c0
 8002700:	40001000 	.word	0x40001000

08002704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8002708:	e7fe      	b.n	8002708 <NMI_Handler+0x4>

0800270a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800270e:	e7fe      	b.n	800270e <HardFault_Handler+0x4>

08002710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002714:	e7fe      	b.n	8002714 <MemManage_Handler+0x4>

08002716 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800271a:	e7fe      	b.n	800271a <BusFault_Handler+0x4>

0800271c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002720:	e7fe      	b.n	8002720 <UsageFault_Handler+0x4>

08002722 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002722:	b480      	push	{r7}
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002734:	4802      	ldr	r0, [pc, #8]	; (8002740 <DMA1_Stream0_IRQHandler+0x10>)
 8002736:	f002 f8e1 	bl	80048fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	200042c8 	.word	0x200042c8

08002744 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002748:	4802      	ldr	r0, [pc, #8]	; (8002754 <DMA1_Stream1_IRQHandler+0x10>)
 800274a:	f002 f8d7 	bl	80048fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	2000424c 	.word	0x2000424c

08002758 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800275c:	4802      	ldr	r0, [pc, #8]	; (8002768 <DMA1_Stream2_IRQHandler+0x10>)
 800275e:	f002 f8cd 	bl	80048fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20004068 	.word	0x20004068

0800276c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002770:	4802      	ldr	r0, [pc, #8]	; (800277c <DMA1_Stream3_IRQHandler+0x10>)
 8002772:	f002 f8c3 	bl	80048fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200040f0 	.word	0x200040f0

08002780 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002784:	4802      	ldr	r0, [pc, #8]	; (8002790 <DMA1_Stream5_IRQHandler+0x10>)
 8002786:	f002 f8b9 	bl	80048fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20003ff0 	.word	0x20003ff0

08002794 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002798:	4802      	ldr	r0, [pc, #8]	; (80027a4 <DMA1_Stream6_IRQHandler+0x10>)
 800279a:	f002 f8af 	bl	80048fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20004710 	.word	0x20004710

080027a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp_flag = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE);
 80027b2:	4b40      	ldr	r3, [pc, #256]	; (80028b4 <USART1_IRQHandler+0x10c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2b10      	cmp	r3, #16
 80027be:	bf0c      	ite	eq
 80027c0:	2301      	moveq	r3, #1
 80027c2:	2300      	movne	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d06b      	beq.n	80028a6 <USART1_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80027ce:	4b39      	ldr	r3, [pc, #228]	; (80028b4 <USART1_IRQHandler+0x10c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2210      	movs	r2, #16
 80027d4:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart1);
 80027d6:	4837      	ldr	r0, [pc, #220]	; (80028b4 <USART1_IRQHandler+0x10c>)
 80027d8:	f006 fd38 	bl	800924c <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 80027dc:	4b36      	ldr	r3, [pc, #216]	; (80028b8 <USART1_IRQHandler+0x110>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a36      	ldr	r2, [pc, #216]	; (80028bc <USART1_IRQHandler+0x114>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d04a      	beq.n	800287c <USART1_IRQHandler+0xd4>
 80027e6:	4b34      	ldr	r3, [pc, #208]	; (80028b8 <USART1_IRQHandler+0x110>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a35      	ldr	r2, [pc, #212]	; (80028c0 <USART1_IRQHandler+0x118>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d045      	beq.n	800287c <USART1_IRQHandler+0xd4>
 80027f0:	4b31      	ldr	r3, [pc, #196]	; (80028b8 <USART1_IRQHandler+0x110>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a33      	ldr	r2, [pc, #204]	; (80028c4 <USART1_IRQHandler+0x11c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d040      	beq.n	800287c <USART1_IRQHandler+0xd4>
 80027fa:	4b2f      	ldr	r3, [pc, #188]	; (80028b8 <USART1_IRQHandler+0x110>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a32      	ldr	r2, [pc, #200]	; (80028c8 <USART1_IRQHandler+0x120>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d03b      	beq.n	800287c <USART1_IRQHandler+0xd4>
 8002804:	4b2c      	ldr	r3, [pc, #176]	; (80028b8 <USART1_IRQHandler+0x110>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a30      	ldr	r2, [pc, #192]	; (80028cc <USART1_IRQHandler+0x124>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d036      	beq.n	800287c <USART1_IRQHandler+0xd4>
 800280e:	4b2a      	ldr	r3, [pc, #168]	; (80028b8 <USART1_IRQHandler+0x110>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a2f      	ldr	r2, [pc, #188]	; (80028d0 <USART1_IRQHandler+0x128>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d031      	beq.n	800287c <USART1_IRQHandler+0xd4>
 8002818:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <USART1_IRQHandler+0x110>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a2d      	ldr	r2, [pc, #180]	; (80028d4 <USART1_IRQHandler+0x12c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d02c      	beq.n	800287c <USART1_IRQHandler+0xd4>
 8002822:	4b25      	ldr	r3, [pc, #148]	; (80028b8 <USART1_IRQHandler+0x110>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a2c      	ldr	r2, [pc, #176]	; (80028d8 <USART1_IRQHandler+0x130>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d027      	beq.n	800287c <USART1_IRQHandler+0xd4>
 800282c:	4b22      	ldr	r3, [pc, #136]	; (80028b8 <USART1_IRQHandler+0x110>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a2a      	ldr	r2, [pc, #168]	; (80028dc <USART1_IRQHandler+0x134>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d022      	beq.n	800287c <USART1_IRQHandler+0xd4>
 8002836:	4b20      	ldr	r3, [pc, #128]	; (80028b8 <USART1_IRQHandler+0x110>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a29      	ldr	r2, [pc, #164]	; (80028e0 <USART1_IRQHandler+0x138>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d01d      	beq.n	800287c <USART1_IRQHandler+0xd4>
 8002840:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <USART1_IRQHandler+0x110>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a27      	ldr	r2, [pc, #156]	; (80028e4 <USART1_IRQHandler+0x13c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d018      	beq.n	800287c <USART1_IRQHandler+0xd4>
 800284a:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <USART1_IRQHandler+0x110>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a26      	ldr	r2, [pc, #152]	; (80028e8 <USART1_IRQHandler+0x140>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d013      	beq.n	800287c <USART1_IRQHandler+0xd4>
 8002854:	4b18      	ldr	r3, [pc, #96]	; (80028b8 <USART1_IRQHandler+0x110>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a24      	ldr	r2, [pc, #144]	; (80028ec <USART1_IRQHandler+0x144>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00e      	beq.n	800287c <USART1_IRQHandler+0xd4>
 800285e:	4b16      	ldr	r3, [pc, #88]	; (80028b8 <USART1_IRQHandler+0x110>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a23      	ldr	r2, [pc, #140]	; (80028f0 <USART1_IRQHandler+0x148>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d009      	beq.n	800287c <USART1_IRQHandler+0xd4>
 8002868:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <USART1_IRQHandler+0x110>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a21      	ldr	r2, [pc, #132]	; (80028f4 <USART1_IRQHandler+0x14c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d004      	beq.n	800287c <USART1_IRQHandler+0xd4>
 8002872:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <USART1_IRQHandler+0x110>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a20      	ldr	r2, [pc, #128]	; (80028f8 <USART1_IRQHandler+0x150>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d103      	bne.n	8002884 <USART1_IRQHandler+0xdc>
 800287c:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <USART1_IRQHandler+0x110>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	e002      	b.n	800288a <USART1_IRQHandler+0xe2>
 8002884:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <USART1_IRQHandler+0x110>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <USART1_IRQHandler+0x10c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <USART1_IRQHandler+0x10c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0210 	bic.w	r2, r2, #16
 8002898:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(UptoBaseTransFinishHandle, pdFALSE);
 800289a:	4b18      	ldr	r3, [pc, #96]	; (80028fc <USART1_IRQHandler+0x154>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2100      	movs	r1, #0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f008 fdf7 	bl	800b494 <xQueueGiveFromISR>
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028a6:	4803      	ldr	r0, [pc, #12]	; (80028b4 <USART1_IRQHandler+0x10c>)
 80028a8:	f006 fd40 	bl	800932c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20004430 	.word	0x20004430
 80028b8:	200042c8 	.word	0x200042c8
 80028bc:	40020010 	.word	0x40020010
 80028c0:	40020028 	.word	0x40020028
 80028c4:	40020040 	.word	0x40020040
 80028c8:	40020058 	.word	0x40020058
 80028cc:	40020070 	.word	0x40020070
 80028d0:	40020088 	.word	0x40020088
 80028d4:	400200a0 	.word	0x400200a0
 80028d8:	400200b8 	.word	0x400200b8
 80028dc:	40020410 	.word	0x40020410
 80028e0:	40020428 	.word	0x40020428
 80028e4:	40020440 	.word	0x40020440
 80028e8:	40020458 	.word	0x40020458
 80028ec:	40020470 	.word	0x40020470
 80028f0:	40020488 	.word	0x40020488
 80028f4:	400204a0 	.word	0x400204a0
 80028f8:	400204b8 	.word	0x400204b8
 80028fc:	20003fe8 	.word	0x20003fe8

08002900 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE);
 800290a:	4b40      	ldr	r3, [pc, #256]	; (8002a0c <USART2_IRQHandler+0x10c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b10      	cmp	r3, #16
 8002916:	bf0c      	ite	eq
 8002918:	2301      	moveq	r3, #1
 800291a:	2300      	movne	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d06b      	beq.n	80029fe <USART2_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8002926:	4b39      	ldr	r3, [pc, #228]	; (8002a0c <USART2_IRQHandler+0x10c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2210      	movs	r2, #16
 800292c:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart2);
 800292e:	4837      	ldr	r0, [pc, #220]	; (8002a0c <USART2_IRQHandler+0x10c>)
 8002930:	f006 fc8c 	bl	800924c <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8002934:	4b36      	ldr	r3, [pc, #216]	; (8002a10 <USART2_IRQHandler+0x110>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a36      	ldr	r2, [pc, #216]	; (8002a14 <USART2_IRQHandler+0x114>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d04a      	beq.n	80029d4 <USART2_IRQHandler+0xd4>
 800293e:	4b34      	ldr	r3, [pc, #208]	; (8002a10 <USART2_IRQHandler+0x110>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a35      	ldr	r2, [pc, #212]	; (8002a18 <USART2_IRQHandler+0x118>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d045      	beq.n	80029d4 <USART2_IRQHandler+0xd4>
 8002948:	4b31      	ldr	r3, [pc, #196]	; (8002a10 <USART2_IRQHandler+0x110>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a33      	ldr	r2, [pc, #204]	; (8002a1c <USART2_IRQHandler+0x11c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d040      	beq.n	80029d4 <USART2_IRQHandler+0xd4>
 8002952:	4b2f      	ldr	r3, [pc, #188]	; (8002a10 <USART2_IRQHandler+0x110>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a32      	ldr	r2, [pc, #200]	; (8002a20 <USART2_IRQHandler+0x120>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d03b      	beq.n	80029d4 <USART2_IRQHandler+0xd4>
 800295c:	4b2c      	ldr	r3, [pc, #176]	; (8002a10 <USART2_IRQHandler+0x110>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a30      	ldr	r2, [pc, #192]	; (8002a24 <USART2_IRQHandler+0x124>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d036      	beq.n	80029d4 <USART2_IRQHandler+0xd4>
 8002966:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <USART2_IRQHandler+0x110>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a2f      	ldr	r2, [pc, #188]	; (8002a28 <USART2_IRQHandler+0x128>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d031      	beq.n	80029d4 <USART2_IRQHandler+0xd4>
 8002970:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <USART2_IRQHandler+0x110>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a2d      	ldr	r2, [pc, #180]	; (8002a2c <USART2_IRQHandler+0x12c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d02c      	beq.n	80029d4 <USART2_IRQHandler+0xd4>
 800297a:	4b25      	ldr	r3, [pc, #148]	; (8002a10 <USART2_IRQHandler+0x110>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a2c      	ldr	r2, [pc, #176]	; (8002a30 <USART2_IRQHandler+0x130>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d027      	beq.n	80029d4 <USART2_IRQHandler+0xd4>
 8002984:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <USART2_IRQHandler+0x110>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a2a      	ldr	r2, [pc, #168]	; (8002a34 <USART2_IRQHandler+0x134>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d022      	beq.n	80029d4 <USART2_IRQHandler+0xd4>
 800298e:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <USART2_IRQHandler+0x110>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a29      	ldr	r2, [pc, #164]	; (8002a38 <USART2_IRQHandler+0x138>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d01d      	beq.n	80029d4 <USART2_IRQHandler+0xd4>
 8002998:	4b1d      	ldr	r3, [pc, #116]	; (8002a10 <USART2_IRQHandler+0x110>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a27      	ldr	r2, [pc, #156]	; (8002a3c <USART2_IRQHandler+0x13c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d018      	beq.n	80029d4 <USART2_IRQHandler+0xd4>
 80029a2:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <USART2_IRQHandler+0x110>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a26      	ldr	r2, [pc, #152]	; (8002a40 <USART2_IRQHandler+0x140>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d013      	beq.n	80029d4 <USART2_IRQHandler+0xd4>
 80029ac:	4b18      	ldr	r3, [pc, #96]	; (8002a10 <USART2_IRQHandler+0x110>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a24      	ldr	r2, [pc, #144]	; (8002a44 <USART2_IRQHandler+0x144>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00e      	beq.n	80029d4 <USART2_IRQHandler+0xd4>
 80029b6:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <USART2_IRQHandler+0x110>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a23      	ldr	r2, [pc, #140]	; (8002a48 <USART2_IRQHandler+0x148>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d009      	beq.n	80029d4 <USART2_IRQHandler+0xd4>
 80029c0:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <USART2_IRQHandler+0x110>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a21      	ldr	r2, [pc, #132]	; (8002a4c <USART2_IRQHandler+0x14c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d004      	beq.n	80029d4 <USART2_IRQHandler+0xd4>
 80029ca:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <USART2_IRQHandler+0x110>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a20      	ldr	r2, [pc, #128]	; (8002a50 <USART2_IRQHandler+0x150>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d103      	bne.n	80029dc <USART2_IRQHandler+0xdc>
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <USART2_IRQHandler+0x110>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	e002      	b.n	80029e2 <USART2_IRQHandler+0xe2>
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <USART2_IRQHandler+0x110>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_IDLE);
 80029e2:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <USART2_IRQHandler+0x10c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <USART2_IRQHandler+0x10c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0210 	bic.w	r2, r2, #16
 80029f0:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(GY39TransFinishHandle, pdFALSE);
 80029f2:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <USART2_IRQHandler+0x154>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2100      	movs	r1, #0
 80029f8:	4618      	mov	r0, r3
 80029fa:	f008 fd4b 	bl	800b494 <xQueueGiveFromISR>
	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029fe:	4803      	ldr	r0, [pc, #12]	; (8002a0c <USART2_IRQHandler+0x10c>)
 8002a00:	f006 fc94 	bl	800932c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20004678 	.word	0x20004678
 8002a10:	20004068 	.word	0x20004068
 8002a14:	40020010 	.word	0x40020010
 8002a18:	40020028 	.word	0x40020028
 8002a1c:	40020040 	.word	0x40020040
 8002a20:	40020058 	.word	0x40020058
 8002a24:	40020070 	.word	0x40020070
 8002a28:	40020088 	.word	0x40020088
 8002a2c:	400200a0 	.word	0x400200a0
 8002a30:	400200b8 	.word	0x400200b8
 8002a34:	40020410 	.word	0x40020410
 8002a38:	40020428 	.word	0x40020428
 8002a3c:	40020440 	.word	0x40020440
 8002a40:	40020458 	.word	0x40020458
 8002a44:	40020470 	.word	0x40020470
 8002a48:	40020488 	.word	0x40020488
 8002a4c:	400204a0 	.word	0x400204a0
 8002a50:	400204b8 	.word	0x400204b8
 8002a54:	200041fc 	.word	0x200041fc

08002a58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE);
 8002a62:	4b40      	ldr	r3, [pc, #256]	; (8002b64 <USART3_IRQHandler+0x10c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	f003 0310 	and.w	r3, r3, #16
 8002a6c:	2b10      	cmp	r3, #16
 8002a6e:	bf0c      	ite	eq
 8002a70:	2301      	moveq	r3, #1
 8002a72:	2300      	movne	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d06b      	beq.n	8002b56 <USART3_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8002a7e:	4b39      	ldr	r3, [pc, #228]	; (8002b64 <USART3_IRQHandler+0x10c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2210      	movs	r2, #16
 8002a84:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart3);
 8002a86:	4837      	ldr	r0, [pc, #220]	; (8002b64 <USART3_IRQHandler+0x10c>)
 8002a88:	f006 fbe0 	bl	800924c <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 8002a8c:	4b36      	ldr	r3, [pc, #216]	; (8002b68 <USART3_IRQHandler+0x110>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a36      	ldr	r2, [pc, #216]	; (8002b6c <USART3_IRQHandler+0x114>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d04a      	beq.n	8002b2c <USART3_IRQHandler+0xd4>
 8002a96:	4b34      	ldr	r3, [pc, #208]	; (8002b68 <USART3_IRQHandler+0x110>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a35      	ldr	r2, [pc, #212]	; (8002b70 <USART3_IRQHandler+0x118>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d045      	beq.n	8002b2c <USART3_IRQHandler+0xd4>
 8002aa0:	4b31      	ldr	r3, [pc, #196]	; (8002b68 <USART3_IRQHandler+0x110>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a33      	ldr	r2, [pc, #204]	; (8002b74 <USART3_IRQHandler+0x11c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d040      	beq.n	8002b2c <USART3_IRQHandler+0xd4>
 8002aaa:	4b2f      	ldr	r3, [pc, #188]	; (8002b68 <USART3_IRQHandler+0x110>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a32      	ldr	r2, [pc, #200]	; (8002b78 <USART3_IRQHandler+0x120>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d03b      	beq.n	8002b2c <USART3_IRQHandler+0xd4>
 8002ab4:	4b2c      	ldr	r3, [pc, #176]	; (8002b68 <USART3_IRQHandler+0x110>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a30      	ldr	r2, [pc, #192]	; (8002b7c <USART3_IRQHandler+0x124>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d036      	beq.n	8002b2c <USART3_IRQHandler+0xd4>
 8002abe:	4b2a      	ldr	r3, [pc, #168]	; (8002b68 <USART3_IRQHandler+0x110>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a2f      	ldr	r2, [pc, #188]	; (8002b80 <USART3_IRQHandler+0x128>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d031      	beq.n	8002b2c <USART3_IRQHandler+0xd4>
 8002ac8:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <USART3_IRQHandler+0x110>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a2d      	ldr	r2, [pc, #180]	; (8002b84 <USART3_IRQHandler+0x12c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d02c      	beq.n	8002b2c <USART3_IRQHandler+0xd4>
 8002ad2:	4b25      	ldr	r3, [pc, #148]	; (8002b68 <USART3_IRQHandler+0x110>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a2c      	ldr	r2, [pc, #176]	; (8002b88 <USART3_IRQHandler+0x130>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d027      	beq.n	8002b2c <USART3_IRQHandler+0xd4>
 8002adc:	4b22      	ldr	r3, [pc, #136]	; (8002b68 <USART3_IRQHandler+0x110>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a2a      	ldr	r2, [pc, #168]	; (8002b8c <USART3_IRQHandler+0x134>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d022      	beq.n	8002b2c <USART3_IRQHandler+0xd4>
 8002ae6:	4b20      	ldr	r3, [pc, #128]	; (8002b68 <USART3_IRQHandler+0x110>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a29      	ldr	r2, [pc, #164]	; (8002b90 <USART3_IRQHandler+0x138>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d01d      	beq.n	8002b2c <USART3_IRQHandler+0xd4>
 8002af0:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <USART3_IRQHandler+0x110>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a27      	ldr	r2, [pc, #156]	; (8002b94 <USART3_IRQHandler+0x13c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d018      	beq.n	8002b2c <USART3_IRQHandler+0xd4>
 8002afa:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <USART3_IRQHandler+0x110>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a26      	ldr	r2, [pc, #152]	; (8002b98 <USART3_IRQHandler+0x140>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d013      	beq.n	8002b2c <USART3_IRQHandler+0xd4>
 8002b04:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <USART3_IRQHandler+0x110>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a24      	ldr	r2, [pc, #144]	; (8002b9c <USART3_IRQHandler+0x144>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00e      	beq.n	8002b2c <USART3_IRQHandler+0xd4>
 8002b0e:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <USART3_IRQHandler+0x110>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a23      	ldr	r2, [pc, #140]	; (8002ba0 <USART3_IRQHandler+0x148>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d009      	beq.n	8002b2c <USART3_IRQHandler+0xd4>
 8002b18:	4b13      	ldr	r3, [pc, #76]	; (8002b68 <USART3_IRQHandler+0x110>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a21      	ldr	r2, [pc, #132]	; (8002ba4 <USART3_IRQHandler+0x14c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d004      	beq.n	8002b2c <USART3_IRQHandler+0xd4>
 8002b22:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <USART3_IRQHandler+0x110>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a20      	ldr	r2, [pc, #128]	; (8002ba8 <USART3_IRQHandler+0x150>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d103      	bne.n	8002b34 <USART3_IRQHandler+0xdc>
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <USART3_IRQHandler+0x110>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	e002      	b.n	8002b3a <USART3_IRQHandler+0xe2>
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <USART3_IRQHandler+0x110>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart3, UART_IT_IDLE);
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <USART3_IRQHandler+0x10c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <USART3_IRQHandler+0x10c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0210 	bic.w	r2, r2, #16
 8002b48:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(WT931TransFinishHandle, pdFALSE);
 8002b4a:	4b18      	ldr	r3, [pc, #96]	; (8002bac <USART3_IRQHandler+0x154>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2100      	movs	r1, #0
 8002b50:	4618      	mov	r0, r3
 8002b52:	f008 fc9f 	bl	800b494 <xQueueGiveFromISR>
	}
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b56:	4803      	ldr	r0, [pc, #12]	; (8002b64 <USART3_IRQHandler+0x10c>)
 8002b58:	f006 fbe8 	bl	800932c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20004168 	.word	0x20004168
 8002b68:	200040f0 	.word	0x200040f0
 8002b6c:	40020010 	.word	0x40020010
 8002b70:	40020028 	.word	0x40020028
 8002b74:	40020040 	.word	0x40020040
 8002b78:	40020058 	.word	0x40020058
 8002b7c:	40020070 	.word	0x40020070
 8002b80:	40020088 	.word	0x40020088
 8002b84:	400200a0 	.word	0x400200a0
 8002b88:	400200b8 	.word	0x400200b8
 8002b8c:	40020410 	.word	0x40020410
 8002b90:	40020428 	.word	0x40020428
 8002b94:	40020440 	.word	0x40020440
 8002b98:	40020458 	.word	0x40020458
 8002b9c:	40020470 	.word	0x40020470
 8002ba0:	40020488 	.word	0x40020488
 8002ba4:	400204a0 	.word	0x400204a0
 8002ba8:	400204b8 	.word	0x400204b8
 8002bac:	20004788 	.word	0x20004788

08002bb0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8002bb4:	4802      	ldr	r0, [pc, #8]	; (8002bc0 <DMA1_Stream7_IRQHandler+0x10>)
 8002bb6:	f001 fea1 	bl	80048fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	200043b8 	.word	0x200043b8

08002bc4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE);
 8002bce:	4b40      	ldr	r3, [pc, #256]	; (8002cd0 <UART4_IRQHandler+0x10c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	2b10      	cmp	r3, #16
 8002bda:	bf0c      	ite	eq
 8002bdc:	2301      	moveq	r3, #1
 8002bde:	2300      	movne	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d06b      	beq.n	8002cc2 <UART4_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 8002bea:	4b39      	ldr	r3, [pc, #228]	; (8002cd0 <UART4_IRQHandler+0x10c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2210      	movs	r2, #16
 8002bf0:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart4);
 8002bf2:	4837      	ldr	r0, [pc, #220]	; (8002cd0 <UART4_IRQHandler+0x10c>)
 8002bf4:	f006 fb2a 	bl	800924c <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart4_rx);
 8002bf8:	4b36      	ldr	r3, [pc, #216]	; (8002cd4 <UART4_IRQHandler+0x110>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a36      	ldr	r2, [pc, #216]	; (8002cd8 <UART4_IRQHandler+0x114>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d04a      	beq.n	8002c98 <UART4_IRQHandler+0xd4>
 8002c02:	4b34      	ldr	r3, [pc, #208]	; (8002cd4 <UART4_IRQHandler+0x110>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a35      	ldr	r2, [pc, #212]	; (8002cdc <UART4_IRQHandler+0x118>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d045      	beq.n	8002c98 <UART4_IRQHandler+0xd4>
 8002c0c:	4b31      	ldr	r3, [pc, #196]	; (8002cd4 <UART4_IRQHandler+0x110>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a33      	ldr	r2, [pc, #204]	; (8002ce0 <UART4_IRQHandler+0x11c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d040      	beq.n	8002c98 <UART4_IRQHandler+0xd4>
 8002c16:	4b2f      	ldr	r3, [pc, #188]	; (8002cd4 <UART4_IRQHandler+0x110>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a32      	ldr	r2, [pc, #200]	; (8002ce4 <UART4_IRQHandler+0x120>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d03b      	beq.n	8002c98 <UART4_IRQHandler+0xd4>
 8002c20:	4b2c      	ldr	r3, [pc, #176]	; (8002cd4 <UART4_IRQHandler+0x110>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a30      	ldr	r2, [pc, #192]	; (8002ce8 <UART4_IRQHandler+0x124>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d036      	beq.n	8002c98 <UART4_IRQHandler+0xd4>
 8002c2a:	4b2a      	ldr	r3, [pc, #168]	; (8002cd4 <UART4_IRQHandler+0x110>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a2f      	ldr	r2, [pc, #188]	; (8002cec <UART4_IRQHandler+0x128>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d031      	beq.n	8002c98 <UART4_IRQHandler+0xd4>
 8002c34:	4b27      	ldr	r3, [pc, #156]	; (8002cd4 <UART4_IRQHandler+0x110>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a2d      	ldr	r2, [pc, #180]	; (8002cf0 <UART4_IRQHandler+0x12c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d02c      	beq.n	8002c98 <UART4_IRQHandler+0xd4>
 8002c3e:	4b25      	ldr	r3, [pc, #148]	; (8002cd4 <UART4_IRQHandler+0x110>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a2c      	ldr	r2, [pc, #176]	; (8002cf4 <UART4_IRQHandler+0x130>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d027      	beq.n	8002c98 <UART4_IRQHandler+0xd4>
 8002c48:	4b22      	ldr	r3, [pc, #136]	; (8002cd4 <UART4_IRQHandler+0x110>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a2a      	ldr	r2, [pc, #168]	; (8002cf8 <UART4_IRQHandler+0x134>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d022      	beq.n	8002c98 <UART4_IRQHandler+0xd4>
 8002c52:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <UART4_IRQHandler+0x110>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a29      	ldr	r2, [pc, #164]	; (8002cfc <UART4_IRQHandler+0x138>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d01d      	beq.n	8002c98 <UART4_IRQHandler+0xd4>
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <UART4_IRQHandler+0x110>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a27      	ldr	r2, [pc, #156]	; (8002d00 <UART4_IRQHandler+0x13c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d018      	beq.n	8002c98 <UART4_IRQHandler+0xd4>
 8002c66:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <UART4_IRQHandler+0x110>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a26      	ldr	r2, [pc, #152]	; (8002d04 <UART4_IRQHandler+0x140>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d013      	beq.n	8002c98 <UART4_IRQHandler+0xd4>
 8002c70:	4b18      	ldr	r3, [pc, #96]	; (8002cd4 <UART4_IRQHandler+0x110>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a24      	ldr	r2, [pc, #144]	; (8002d08 <UART4_IRQHandler+0x144>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d00e      	beq.n	8002c98 <UART4_IRQHandler+0xd4>
 8002c7a:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <UART4_IRQHandler+0x110>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a23      	ldr	r2, [pc, #140]	; (8002d0c <UART4_IRQHandler+0x148>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d009      	beq.n	8002c98 <UART4_IRQHandler+0xd4>
 8002c84:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <UART4_IRQHandler+0x110>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a21      	ldr	r2, [pc, #132]	; (8002d10 <UART4_IRQHandler+0x14c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d004      	beq.n	8002c98 <UART4_IRQHandler+0xd4>
 8002c8e:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <UART4_IRQHandler+0x110>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a20      	ldr	r2, [pc, #128]	; (8002d14 <UART4_IRQHandler+0x150>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d103      	bne.n	8002ca0 <UART4_IRQHandler+0xdc>
 8002c98:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <UART4_IRQHandler+0x110>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	e002      	b.n	8002ca6 <UART4_IRQHandler+0xe2>
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <UART4_IRQHandler+0x110>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart4, UART_IT_IDLE);
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <UART4_IRQHandler+0x10c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <UART4_IRQHandler+0x10c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0210 	bic.w	r2, r2, #16
 8002cb4:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(DeepTransFinishHandleHandle, pdFALSE);
 8002cb6:	4b18      	ldr	r3, [pc, #96]	; (8002d18 <UART4_IRQHandler+0x154>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2100      	movs	r1, #0
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f008 fbe9 	bl	800b494 <xQueueGiveFromISR>
	}
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002cc2:	4803      	ldr	r0, [pc, #12]	; (8002cd0 <UART4_IRQHandler+0x10c>)
 8002cc4:	f006 fb32 	bl	800932c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002cc8:	bf00      	nop
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	200045e0 	.word	0x200045e0
 8002cd4:	20003ff0 	.word	0x20003ff0
 8002cd8:	40020010 	.word	0x40020010
 8002cdc:	40020028 	.word	0x40020028
 8002ce0:	40020040 	.word	0x40020040
 8002ce4:	40020058 	.word	0x40020058
 8002ce8:	40020070 	.word	0x40020070
 8002cec:	40020088 	.word	0x40020088
 8002cf0:	400200a0 	.word	0x400200a0
 8002cf4:	400200b8 	.word	0x400200b8
 8002cf8:	40020410 	.word	0x40020410
 8002cfc:	40020428 	.word	0x40020428
 8002d00:	40020440 	.word	0x40020440
 8002d04:	40020458 	.word	0x40020458
 8002d08:	40020470 	.word	0x40020470
 8002d0c:	40020488 	.word	0x40020488
 8002d10:	400204a0 	.word	0x400204a0
 8002d14:	400204b8 	.word	0x400204b8
 8002d18:	2000470c 	.word	0x2000470c

08002d1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d20:	4802      	ldr	r0, [pc, #8]	; (8002d2c <TIM6_DAC_IRQHandler+0x10>)
 8002d22:	f005 ff7d 	bl	8008c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	200047c0 	.word	0x200047c0

08002d30 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8002d34:	4802      	ldr	r0, [pc, #8]	; (8002d40 <DMA2_Stream0_IRQHandler+0x10>)
 8002d36:	f001 fde1 	bl	80048fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	200044d0 	.word	0x200044d0

08002d44 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002d48:	4802      	ldr	r0, [pc, #8]	; (8002d54 <DMA2_Stream1_IRQHandler+0x10>)
 8002d4a:	f001 fdd7 	bl	80048fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20004340 	.word	0x20004340

08002d58 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart8, UART_FLAG_IDLE);
 8002d62:	4b40      	ldr	r3, [pc, #256]	; (8002e64 <UART8_IRQHandler+0x10c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	2b10      	cmp	r3, #16
 8002d6e:	bf0c      	ite	eq
 8002d70:	2301      	moveq	r3, #1
 8002d72:	2300      	movne	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d06b      	beq.n	8002e56 <UART8_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart8);
 8002d7e:	4b39      	ldr	r3, [pc, #228]	; (8002e64 <UART8_IRQHandler+0x10c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2210      	movs	r2, #16
 8002d84:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart8);
 8002d86:	4837      	ldr	r0, [pc, #220]	; (8002e64 <UART8_IRQHandler+0x10c>)
 8002d88:	f006 fa60 	bl	800924c <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart8_rx);
 8002d8c:	4b36      	ldr	r3, [pc, #216]	; (8002e68 <UART8_IRQHandler+0x110>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a36      	ldr	r2, [pc, #216]	; (8002e6c <UART8_IRQHandler+0x114>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d04a      	beq.n	8002e2c <UART8_IRQHandler+0xd4>
 8002d96:	4b34      	ldr	r3, [pc, #208]	; (8002e68 <UART8_IRQHandler+0x110>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a35      	ldr	r2, [pc, #212]	; (8002e70 <UART8_IRQHandler+0x118>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d045      	beq.n	8002e2c <UART8_IRQHandler+0xd4>
 8002da0:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <UART8_IRQHandler+0x110>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a33      	ldr	r2, [pc, #204]	; (8002e74 <UART8_IRQHandler+0x11c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d040      	beq.n	8002e2c <UART8_IRQHandler+0xd4>
 8002daa:	4b2f      	ldr	r3, [pc, #188]	; (8002e68 <UART8_IRQHandler+0x110>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a32      	ldr	r2, [pc, #200]	; (8002e78 <UART8_IRQHandler+0x120>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d03b      	beq.n	8002e2c <UART8_IRQHandler+0xd4>
 8002db4:	4b2c      	ldr	r3, [pc, #176]	; (8002e68 <UART8_IRQHandler+0x110>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a30      	ldr	r2, [pc, #192]	; (8002e7c <UART8_IRQHandler+0x124>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d036      	beq.n	8002e2c <UART8_IRQHandler+0xd4>
 8002dbe:	4b2a      	ldr	r3, [pc, #168]	; (8002e68 <UART8_IRQHandler+0x110>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a2f      	ldr	r2, [pc, #188]	; (8002e80 <UART8_IRQHandler+0x128>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d031      	beq.n	8002e2c <UART8_IRQHandler+0xd4>
 8002dc8:	4b27      	ldr	r3, [pc, #156]	; (8002e68 <UART8_IRQHandler+0x110>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a2d      	ldr	r2, [pc, #180]	; (8002e84 <UART8_IRQHandler+0x12c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d02c      	beq.n	8002e2c <UART8_IRQHandler+0xd4>
 8002dd2:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <UART8_IRQHandler+0x110>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a2c      	ldr	r2, [pc, #176]	; (8002e88 <UART8_IRQHandler+0x130>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d027      	beq.n	8002e2c <UART8_IRQHandler+0xd4>
 8002ddc:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <UART8_IRQHandler+0x110>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a2a      	ldr	r2, [pc, #168]	; (8002e8c <UART8_IRQHandler+0x134>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d022      	beq.n	8002e2c <UART8_IRQHandler+0xd4>
 8002de6:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <UART8_IRQHandler+0x110>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a29      	ldr	r2, [pc, #164]	; (8002e90 <UART8_IRQHandler+0x138>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d01d      	beq.n	8002e2c <UART8_IRQHandler+0xd4>
 8002df0:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <UART8_IRQHandler+0x110>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a27      	ldr	r2, [pc, #156]	; (8002e94 <UART8_IRQHandler+0x13c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d018      	beq.n	8002e2c <UART8_IRQHandler+0xd4>
 8002dfa:	4b1b      	ldr	r3, [pc, #108]	; (8002e68 <UART8_IRQHandler+0x110>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a26      	ldr	r2, [pc, #152]	; (8002e98 <UART8_IRQHandler+0x140>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d013      	beq.n	8002e2c <UART8_IRQHandler+0xd4>
 8002e04:	4b18      	ldr	r3, [pc, #96]	; (8002e68 <UART8_IRQHandler+0x110>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a24      	ldr	r2, [pc, #144]	; (8002e9c <UART8_IRQHandler+0x144>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00e      	beq.n	8002e2c <UART8_IRQHandler+0xd4>
 8002e0e:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <UART8_IRQHandler+0x110>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a23      	ldr	r2, [pc, #140]	; (8002ea0 <UART8_IRQHandler+0x148>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d009      	beq.n	8002e2c <UART8_IRQHandler+0xd4>
 8002e18:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <UART8_IRQHandler+0x110>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a21      	ldr	r2, [pc, #132]	; (8002ea4 <UART8_IRQHandler+0x14c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d004      	beq.n	8002e2c <UART8_IRQHandler+0xd4>
 8002e22:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <UART8_IRQHandler+0x110>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a20      	ldr	r2, [pc, #128]	; (8002ea8 <UART8_IRQHandler+0x150>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d103      	bne.n	8002e34 <UART8_IRQHandler+0xdc>
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <UART8_IRQHandler+0x110>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	e002      	b.n	8002e3a <UART8_IRQHandler+0xe2>
 8002e34:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <UART8_IRQHandler+0x110>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart8, UART_IT_IDLE);
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <UART8_IRQHandler+0x10c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <UART8_IRQHandler+0x10c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0210 	bic.w	r2, r2, #16
 8002e48:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(BasetoUpTransFinishHandleHandle, pdFALSE);
 8002e4a:	4b18      	ldr	r3, [pc, #96]	; (8002eac <UART8_IRQHandler+0x154>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f008 fb1f 	bl	800b494 <xQueueGiveFromISR>
	}
  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8002e56:	4803      	ldr	r0, [pc, #12]	; (8002e64 <UART8_IRQHandler+0x10c>)
 8002e58:	f006 fa68 	bl	800932c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	2000454c 	.word	0x2000454c
 8002e68:	200043b8 	.word	0x200043b8
 8002e6c:	40020010 	.word	0x40020010
 8002e70:	40020028 	.word	0x40020028
 8002e74:	40020040 	.word	0x40020040
 8002e78:	40020058 	.word	0x40020058
 8002e7c:	40020070 	.word	0x40020070
 8002e80:	40020088 	.word	0x40020088
 8002e84:	400200a0 	.word	0x400200a0
 8002e88:	400200b8 	.word	0x400200b8
 8002e8c:	40020410 	.word	0x40020410
 8002e90:	40020428 	.word	0x40020428
 8002e94:	40020440 	.word	0x40020440
 8002e98:	40020458 	.word	0x40020458
 8002e9c:	40020470 	.word	0x40020470
 8002ea0:	40020488 	.word	0x40020488
 8002ea4:	400204a0 	.word	0x400204a0
 8002ea8:	400204b8 	.word	0x400204b8
 8002eac:	20004548 	.word	0x20004548

08002eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002eb4:	4b39      	ldr	r3, [pc, #228]	; (8002f9c <SystemInit+0xec>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eba:	4a38      	ldr	r2, [pc, #224]	; (8002f9c <SystemInit+0xec>)
 8002ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ec4:	4b36      	ldr	r3, [pc, #216]	; (8002fa0 <SystemInit+0xf0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	2b06      	cmp	r3, #6
 8002ece:	d807      	bhi.n	8002ee0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ed0:	4b33      	ldr	r3, [pc, #204]	; (8002fa0 <SystemInit+0xf0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f023 030f 	bic.w	r3, r3, #15
 8002ed8:	4a31      	ldr	r2, [pc, #196]	; (8002fa0 <SystemInit+0xf0>)
 8002eda:	f043 0307 	orr.w	r3, r3, #7
 8002ede:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002ee0:	4b30      	ldr	r3, [pc, #192]	; (8002fa4 <SystemInit+0xf4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a2f      	ldr	r2, [pc, #188]	; (8002fa4 <SystemInit+0xf4>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002eec:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <SystemInit+0xf4>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002ef2:	4b2c      	ldr	r3, [pc, #176]	; (8002fa4 <SystemInit+0xf4>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	492b      	ldr	r1, [pc, #172]	; (8002fa4 <SystemInit+0xf4>)
 8002ef8:	4b2b      	ldr	r3, [pc, #172]	; (8002fa8 <SystemInit+0xf8>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002efe:	4b28      	ldr	r3, [pc, #160]	; (8002fa0 <SystemInit+0xf0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f0a:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <SystemInit+0xf0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 030f 	bic.w	r3, r3, #15
 8002f12:	4a23      	ldr	r2, [pc, #140]	; (8002fa0 <SystemInit+0xf0>)
 8002f14:	f043 0307 	orr.w	r3, r3, #7
 8002f18:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002f1a:	4b22      	ldr	r3, [pc, #136]	; (8002fa4 <SystemInit+0xf4>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002f20:	4b20      	ldr	r3, [pc, #128]	; (8002fa4 <SystemInit+0xf4>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002f26:	4b1f      	ldr	r3, [pc, #124]	; (8002fa4 <SystemInit+0xf4>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002f2c:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <SystemInit+0xf4>)
 8002f2e:	4a1f      	ldr	r2, [pc, #124]	; (8002fac <SystemInit+0xfc>)
 8002f30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002f32:	4b1c      	ldr	r3, [pc, #112]	; (8002fa4 <SystemInit+0xf4>)
 8002f34:	4a1e      	ldr	r2, [pc, #120]	; (8002fb0 <SystemInit+0x100>)
 8002f36:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002f38:	4b1a      	ldr	r3, [pc, #104]	; (8002fa4 <SystemInit+0xf4>)
 8002f3a:	4a1e      	ldr	r2, [pc, #120]	; (8002fb4 <SystemInit+0x104>)
 8002f3c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002f3e:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <SystemInit+0xf4>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002f44:	4b17      	ldr	r3, [pc, #92]	; (8002fa4 <SystemInit+0xf4>)
 8002f46:	4a1b      	ldr	r2, [pc, #108]	; (8002fb4 <SystemInit+0x104>)
 8002f48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002f4a:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <SystemInit+0xf4>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002f50:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <SystemInit+0xf4>)
 8002f52:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <SystemInit+0x104>)
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002f56:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <SystemInit+0xf4>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f5c:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <SystemInit+0xf4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a10      	ldr	r2, [pc, #64]	; (8002fa4 <SystemInit+0xf4>)
 8002f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002f68:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <SystemInit+0xf4>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002f6e:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <SystemInit+0x108>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <SystemInit+0x10c>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f7a:	d202      	bcs.n	8002f82 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002f7c:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <SystemInit+0x110>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002f82:	4b10      	ldr	r3, [pc, #64]	; (8002fc4 <SystemInit+0x114>)
 8002f84:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002f88:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f8a:	4b04      	ldr	r3, [pc, #16]	; (8002f9c <SystemInit+0xec>)
 8002f8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f90:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002f92:	bf00      	nop
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	e000ed00 	.word	0xe000ed00
 8002fa0:	52002000 	.word	0x52002000
 8002fa4:	58024400 	.word	0x58024400
 8002fa8:	eaf6ed7f 	.word	0xeaf6ed7f
 8002fac:	02020200 	.word	0x02020200
 8002fb0:	01ff0000 	.word	0x01ff0000
 8002fb4:	01010280 	.word	0x01010280
 8002fb8:	5c001000 	.word	0x5c001000
 8002fbc:	ffff0000 	.word	0xffff0000
 8002fc0:	51008108 	.word	0x51008108
 8002fc4:	52004000 	.word	0x52004000

08002fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003000 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fcc:	f7ff ff70 	bl	8002eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fd0:	480c      	ldr	r0, [pc, #48]	; (8003004 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fd2:	490d      	ldr	r1, [pc, #52]	; (8003008 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fd4:	4a0d      	ldr	r2, [pc, #52]	; (800300c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fd8:	e002      	b.n	8002fe0 <LoopCopyDataInit>

08002fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fde:	3304      	adds	r3, #4

08002fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fe4:	d3f9      	bcc.n	8002fda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fe6:	4a0a      	ldr	r2, [pc, #40]	; (8003010 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fe8:	4c0a      	ldr	r4, [pc, #40]	; (8003014 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fec:	e001      	b.n	8002ff2 <LoopFillZerobss>

08002fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ff0:	3204      	adds	r2, #4

08002ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ff4:	d3fb      	bcc.n	8002fee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ff6:	f00a f909 	bl	800d20c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ffa:	f7fe f913 	bl	8001224 <main>
  bx  lr
 8002ffe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003000:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003008:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800300c:	0800d398 	.word	0x0800d398
  ldr r2, =_sbss
 8003010:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8003014:	20004810 	.word	0x20004810

08003018 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003018:	e7fe      	b.n	8003018 <ADC3_IRQHandler>
	...

0800301c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003022:	2003      	movs	r0, #3
 8003024:	f000 f90f 	bl	8003246 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003028:	f003 ffae 	bl	8006f88 <HAL_RCC_GetSysClockFreq>
 800302c:	4602      	mov	r2, r0
 800302e:	4b15      	ldr	r3, [pc, #84]	; (8003084 <HAL_Init+0x68>)
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	0a1b      	lsrs	r3, r3, #8
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	4913      	ldr	r1, [pc, #76]	; (8003088 <HAL_Init+0x6c>)
 800303a:	5ccb      	ldrb	r3, [r1, r3]
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
 8003044:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003046:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <HAL_Init+0x68>)
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	4a0e      	ldr	r2, [pc, #56]	; (8003088 <HAL_Init+0x6c>)
 8003050:	5cd3      	ldrb	r3, [r2, r3]
 8003052:	f003 031f 	and.w	r3, r3, #31
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
 800305c:	4a0b      	ldr	r2, [pc, #44]	; (800308c <HAL_Init+0x70>)
 800305e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003060:	4a0b      	ldr	r2, [pc, #44]	; (8003090 <HAL_Init+0x74>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003066:	2000      	movs	r0, #0
 8003068:	f7ff fae0 	bl	800262c <HAL_InitTick>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e002      	b.n	800307c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003076:	f7fe ffa5 	bl	8001fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	58024400 	.word	0x58024400
 8003088:	0800d348 	.word	0x0800d348
 800308c:	20000004 	.word	0x20000004
 8003090:	20000000 	.word	0x20000000

08003094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003098:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <HAL_IncTick+0x20>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <HAL_IncTick+0x24>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4413      	add	r3, r2
 80030a4:	4a04      	ldr	r2, [pc, #16]	; (80030b8 <HAL_IncTick+0x24>)
 80030a6:	6013      	str	r3, [r2, #0]
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	2000000c 	.word	0x2000000c
 80030b8:	2000480c 	.word	0x2000480c

080030bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return uwTick;
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <HAL_GetTick+0x14>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	2000480c 	.word	0x2000480c

080030d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80030d8:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <HAL_GetREVID+0x14>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	0c1b      	lsrs	r3, r3, #16
}
 80030de:	4618      	mov	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	5c001000 	.word	0x5c001000

080030ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <__NVIC_SetPriorityGrouping+0x40>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003108:	4013      	ands	r3, r2
 800310a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003114:	4b06      	ldr	r3, [pc, #24]	; (8003130 <__NVIC_SetPriorityGrouping+0x44>)
 8003116:	4313      	orrs	r3, r2
 8003118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800311a:	4a04      	ldr	r2, [pc, #16]	; (800312c <__NVIC_SetPriorityGrouping+0x40>)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	60d3      	str	r3, [r2, #12]
}
 8003120:	bf00      	nop
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	e000ed00 	.word	0xe000ed00
 8003130:	05fa0000 	.word	0x05fa0000

08003134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003138:	4b04      	ldr	r3, [pc, #16]	; (800314c <__NVIC_GetPriorityGrouping+0x18>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	0a1b      	lsrs	r3, r3, #8
 800313e:	f003 0307 	and.w	r3, r3, #7
}
 8003142:	4618      	mov	r0, r3
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800315a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800315e:	2b00      	cmp	r3, #0
 8003160:	db0b      	blt.n	800317a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	f003 021f 	and.w	r2, r3, #31
 8003168:	4907      	ldr	r1, [pc, #28]	; (8003188 <__NVIC_EnableIRQ+0x38>)
 800316a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	2001      	movs	r0, #1
 8003172:	fa00 f202 	lsl.w	r2, r0, r2
 8003176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	e000e100 	.word	0xe000e100

0800318c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	6039      	str	r1, [r7, #0]
 8003196:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003198:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800319c:	2b00      	cmp	r3, #0
 800319e:	db0a      	blt.n	80031b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	490c      	ldr	r1, [pc, #48]	; (80031d8 <__NVIC_SetPriority+0x4c>)
 80031a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031aa:	0112      	lsls	r2, r2, #4
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	440b      	add	r3, r1
 80031b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031b4:	e00a      	b.n	80031cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	4908      	ldr	r1, [pc, #32]	; (80031dc <__NVIC_SetPriority+0x50>)
 80031bc:	88fb      	ldrh	r3, [r7, #6]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	3b04      	subs	r3, #4
 80031c4:	0112      	lsls	r2, r2, #4
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	440b      	add	r3, r1
 80031ca:	761a      	strb	r2, [r3, #24]
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	e000e100 	.word	0xe000e100
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b089      	sub	sp, #36	; 0x24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f1c3 0307 	rsb	r3, r3, #7
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	bf28      	it	cs
 80031fe:	2304      	movcs	r3, #4
 8003200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3304      	adds	r3, #4
 8003206:	2b06      	cmp	r3, #6
 8003208:	d902      	bls.n	8003210 <NVIC_EncodePriority+0x30>
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	3b03      	subs	r3, #3
 800320e:	e000      	b.n	8003212 <NVIC_EncodePriority+0x32>
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003214:	f04f 32ff 	mov.w	r2, #4294967295
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43da      	mvns	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	401a      	ands	r2, r3
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003228:	f04f 31ff 	mov.w	r1, #4294967295
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	fa01 f303 	lsl.w	r3, r1, r3
 8003232:	43d9      	mvns	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003238:	4313      	orrs	r3, r2
         );
}
 800323a:	4618      	mov	r0, r3
 800323c:	3724      	adds	r7, #36	; 0x24
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff ff4c 	bl	80030ec <__NVIC_SetPriorityGrouping>
}
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
 8003268:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800326a:	f7ff ff63 	bl	8003134 <__NVIC_GetPriorityGrouping>
 800326e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	68b9      	ldr	r1, [r7, #8]
 8003274:	6978      	ldr	r0, [r7, #20]
 8003276:	f7ff ffb3 	bl	80031e0 <NVIC_EncodePriority>
 800327a:	4602      	mov	r2, r0
 800327c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003280:	4611      	mov	r1, r2
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff ff82 	bl	800318c <__NVIC_SetPriority>
}
 8003288:	bf00      	nop
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800329a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff ff56 	bl	8003150 <__NVIC_EnableIRQ>
}
 80032a4:	bf00      	nop
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80032b4:	f7ff ff02 	bl	80030bc <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e316      	b.n	80038f2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a66      	ldr	r2, [pc, #408]	; (8003464 <HAL_DMA_Init+0x1b8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d04a      	beq.n	8003364 <HAL_DMA_Init+0xb8>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a65      	ldr	r2, [pc, #404]	; (8003468 <HAL_DMA_Init+0x1bc>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d045      	beq.n	8003364 <HAL_DMA_Init+0xb8>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a63      	ldr	r2, [pc, #396]	; (800346c <HAL_DMA_Init+0x1c0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d040      	beq.n	8003364 <HAL_DMA_Init+0xb8>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a62      	ldr	r2, [pc, #392]	; (8003470 <HAL_DMA_Init+0x1c4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d03b      	beq.n	8003364 <HAL_DMA_Init+0xb8>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a60      	ldr	r2, [pc, #384]	; (8003474 <HAL_DMA_Init+0x1c8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d036      	beq.n	8003364 <HAL_DMA_Init+0xb8>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a5f      	ldr	r2, [pc, #380]	; (8003478 <HAL_DMA_Init+0x1cc>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d031      	beq.n	8003364 <HAL_DMA_Init+0xb8>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a5d      	ldr	r2, [pc, #372]	; (800347c <HAL_DMA_Init+0x1d0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d02c      	beq.n	8003364 <HAL_DMA_Init+0xb8>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a5c      	ldr	r2, [pc, #368]	; (8003480 <HAL_DMA_Init+0x1d4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d027      	beq.n	8003364 <HAL_DMA_Init+0xb8>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a5a      	ldr	r2, [pc, #360]	; (8003484 <HAL_DMA_Init+0x1d8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d022      	beq.n	8003364 <HAL_DMA_Init+0xb8>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a59      	ldr	r2, [pc, #356]	; (8003488 <HAL_DMA_Init+0x1dc>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d01d      	beq.n	8003364 <HAL_DMA_Init+0xb8>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a57      	ldr	r2, [pc, #348]	; (800348c <HAL_DMA_Init+0x1e0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d018      	beq.n	8003364 <HAL_DMA_Init+0xb8>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a56      	ldr	r2, [pc, #344]	; (8003490 <HAL_DMA_Init+0x1e4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d013      	beq.n	8003364 <HAL_DMA_Init+0xb8>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a54      	ldr	r2, [pc, #336]	; (8003494 <HAL_DMA_Init+0x1e8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00e      	beq.n	8003364 <HAL_DMA_Init+0xb8>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a53      	ldr	r2, [pc, #332]	; (8003498 <HAL_DMA_Init+0x1ec>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d009      	beq.n	8003364 <HAL_DMA_Init+0xb8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a51      	ldr	r2, [pc, #324]	; (800349c <HAL_DMA_Init+0x1f0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d004      	beq.n	8003364 <HAL_DMA_Init+0xb8>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a50      	ldr	r2, [pc, #320]	; (80034a0 <HAL_DMA_Init+0x1f4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d101      	bne.n	8003368 <HAL_DMA_Init+0xbc>
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <HAL_DMA_Init+0xbe>
 8003368:	2300      	movs	r3, #0
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 813b 	beq.w	80035e6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a37      	ldr	r2, [pc, #220]	; (8003464 <HAL_DMA_Init+0x1b8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d04a      	beq.n	8003420 <HAL_DMA_Init+0x174>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a36      	ldr	r2, [pc, #216]	; (8003468 <HAL_DMA_Init+0x1bc>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d045      	beq.n	8003420 <HAL_DMA_Init+0x174>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a34      	ldr	r2, [pc, #208]	; (800346c <HAL_DMA_Init+0x1c0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d040      	beq.n	8003420 <HAL_DMA_Init+0x174>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a33      	ldr	r2, [pc, #204]	; (8003470 <HAL_DMA_Init+0x1c4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d03b      	beq.n	8003420 <HAL_DMA_Init+0x174>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a31      	ldr	r2, [pc, #196]	; (8003474 <HAL_DMA_Init+0x1c8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d036      	beq.n	8003420 <HAL_DMA_Init+0x174>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a30      	ldr	r2, [pc, #192]	; (8003478 <HAL_DMA_Init+0x1cc>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d031      	beq.n	8003420 <HAL_DMA_Init+0x174>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a2e      	ldr	r2, [pc, #184]	; (800347c <HAL_DMA_Init+0x1d0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d02c      	beq.n	8003420 <HAL_DMA_Init+0x174>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a2d      	ldr	r2, [pc, #180]	; (8003480 <HAL_DMA_Init+0x1d4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d027      	beq.n	8003420 <HAL_DMA_Init+0x174>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a2b      	ldr	r2, [pc, #172]	; (8003484 <HAL_DMA_Init+0x1d8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d022      	beq.n	8003420 <HAL_DMA_Init+0x174>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a2a      	ldr	r2, [pc, #168]	; (8003488 <HAL_DMA_Init+0x1dc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d01d      	beq.n	8003420 <HAL_DMA_Init+0x174>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a28      	ldr	r2, [pc, #160]	; (800348c <HAL_DMA_Init+0x1e0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d018      	beq.n	8003420 <HAL_DMA_Init+0x174>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a27      	ldr	r2, [pc, #156]	; (8003490 <HAL_DMA_Init+0x1e4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d013      	beq.n	8003420 <HAL_DMA_Init+0x174>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a25      	ldr	r2, [pc, #148]	; (8003494 <HAL_DMA_Init+0x1e8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d00e      	beq.n	8003420 <HAL_DMA_Init+0x174>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a24      	ldr	r2, [pc, #144]	; (8003498 <HAL_DMA_Init+0x1ec>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d009      	beq.n	8003420 <HAL_DMA_Init+0x174>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a22      	ldr	r2, [pc, #136]	; (800349c <HAL_DMA_Init+0x1f0>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d004      	beq.n	8003420 <HAL_DMA_Init+0x174>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a21      	ldr	r2, [pc, #132]	; (80034a0 <HAL_DMA_Init+0x1f4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d108      	bne.n	8003432 <HAL_DMA_Init+0x186>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	e007      	b.n	8003442 <HAL_DMA_Init+0x196>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0201 	bic.w	r2, r2, #1
 8003440:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003442:	e02f      	b.n	80034a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003444:	f7ff fe3a 	bl	80030bc <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b05      	cmp	r3, #5
 8003450:	d928      	bls.n	80034a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2220      	movs	r2, #32
 8003456:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2203      	movs	r2, #3
 800345c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e246      	b.n	80038f2 <HAL_DMA_Init+0x646>
 8003464:	40020010 	.word	0x40020010
 8003468:	40020028 	.word	0x40020028
 800346c:	40020040 	.word	0x40020040
 8003470:	40020058 	.word	0x40020058
 8003474:	40020070 	.word	0x40020070
 8003478:	40020088 	.word	0x40020088
 800347c:	400200a0 	.word	0x400200a0
 8003480:	400200b8 	.word	0x400200b8
 8003484:	40020410 	.word	0x40020410
 8003488:	40020428 	.word	0x40020428
 800348c:	40020440 	.word	0x40020440
 8003490:	40020458 	.word	0x40020458
 8003494:	40020470 	.word	0x40020470
 8003498:	40020488 	.word	0x40020488
 800349c:	400204a0 	.word	0x400204a0
 80034a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1c8      	bne.n	8003444 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4b83      	ldr	r3, [pc, #524]	; (80036cc <HAL_DMA_Init+0x420>)
 80034be:	4013      	ands	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80034ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d107      	bne.n	8003508 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	4313      	orrs	r3, r2
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003508:	4b71      	ldr	r3, [pc, #452]	; (80036d0 <HAL_DMA_Init+0x424>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4b71      	ldr	r3, [pc, #452]	; (80036d4 <HAL_DMA_Init+0x428>)
 800350e:	4013      	ands	r3, r2
 8003510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003514:	d328      	bcc.n	8003568 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b28      	cmp	r3, #40	; 0x28
 800351c:	d903      	bls.n	8003526 <HAL_DMA_Init+0x27a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b2e      	cmp	r3, #46	; 0x2e
 8003524:	d917      	bls.n	8003556 <HAL_DMA_Init+0x2aa>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b3e      	cmp	r3, #62	; 0x3e
 800352c:	d903      	bls.n	8003536 <HAL_DMA_Init+0x28a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b42      	cmp	r3, #66	; 0x42
 8003534:	d90f      	bls.n	8003556 <HAL_DMA_Init+0x2aa>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b46      	cmp	r3, #70	; 0x46
 800353c:	d903      	bls.n	8003546 <HAL_DMA_Init+0x29a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b48      	cmp	r3, #72	; 0x48
 8003544:	d907      	bls.n	8003556 <HAL_DMA_Init+0x2aa>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b4e      	cmp	r3, #78	; 0x4e
 800354c:	d905      	bls.n	800355a <HAL_DMA_Init+0x2ae>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b52      	cmp	r3, #82	; 0x52
 8003554:	d801      	bhi.n	800355a <HAL_DMA_Init+0x2ae>
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <HAL_DMA_Init+0x2b0>
 800355a:	2300      	movs	r3, #0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003566:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f023 0307 	bic.w	r3, r3, #7
 800357e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	2b04      	cmp	r3, #4
 8003590:	d117      	bne.n	80035c2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00e      	beq.n	80035c2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f002 fb3d 	bl	8005c24 <DMA_CheckFifoParam>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2240      	movs	r2, #64	; 0x40
 80035b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e197      	b.n	80038f2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f002 fa78 	bl	8005ac0 <DMA_CalcBaseAndBitshift>
 80035d0:	4603      	mov	r3, r0
 80035d2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	223f      	movs	r2, #63	; 0x3f
 80035de:	409a      	lsls	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	609a      	str	r2, [r3, #8]
 80035e4:	e0cd      	b.n	8003782 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a3b      	ldr	r2, [pc, #236]	; (80036d8 <HAL_DMA_Init+0x42c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d022      	beq.n	8003636 <HAL_DMA_Init+0x38a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a39      	ldr	r2, [pc, #228]	; (80036dc <HAL_DMA_Init+0x430>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d01d      	beq.n	8003636 <HAL_DMA_Init+0x38a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a38      	ldr	r2, [pc, #224]	; (80036e0 <HAL_DMA_Init+0x434>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d018      	beq.n	8003636 <HAL_DMA_Init+0x38a>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a36      	ldr	r2, [pc, #216]	; (80036e4 <HAL_DMA_Init+0x438>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d013      	beq.n	8003636 <HAL_DMA_Init+0x38a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a35      	ldr	r2, [pc, #212]	; (80036e8 <HAL_DMA_Init+0x43c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d00e      	beq.n	8003636 <HAL_DMA_Init+0x38a>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a33      	ldr	r2, [pc, #204]	; (80036ec <HAL_DMA_Init+0x440>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d009      	beq.n	8003636 <HAL_DMA_Init+0x38a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a32      	ldr	r2, [pc, #200]	; (80036f0 <HAL_DMA_Init+0x444>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d004      	beq.n	8003636 <HAL_DMA_Init+0x38a>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a30      	ldr	r2, [pc, #192]	; (80036f4 <HAL_DMA_Init+0x448>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d101      	bne.n	800363a <HAL_DMA_Init+0x38e>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <HAL_DMA_Init+0x390>
 800363a:	2300      	movs	r3, #0
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8097 	beq.w	8003770 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a24      	ldr	r2, [pc, #144]	; (80036d8 <HAL_DMA_Init+0x42c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d021      	beq.n	8003690 <HAL_DMA_Init+0x3e4>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a22      	ldr	r2, [pc, #136]	; (80036dc <HAL_DMA_Init+0x430>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d01c      	beq.n	8003690 <HAL_DMA_Init+0x3e4>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a21      	ldr	r2, [pc, #132]	; (80036e0 <HAL_DMA_Init+0x434>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d017      	beq.n	8003690 <HAL_DMA_Init+0x3e4>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a1f      	ldr	r2, [pc, #124]	; (80036e4 <HAL_DMA_Init+0x438>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d012      	beq.n	8003690 <HAL_DMA_Init+0x3e4>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a1e      	ldr	r2, [pc, #120]	; (80036e8 <HAL_DMA_Init+0x43c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00d      	beq.n	8003690 <HAL_DMA_Init+0x3e4>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1c      	ldr	r2, [pc, #112]	; (80036ec <HAL_DMA_Init+0x440>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d008      	beq.n	8003690 <HAL_DMA_Init+0x3e4>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1b      	ldr	r2, [pc, #108]	; (80036f0 <HAL_DMA_Init+0x444>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d003      	beq.n	8003690 <HAL_DMA_Init+0x3e4>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a19      	ldr	r2, [pc, #100]	; (80036f4 <HAL_DMA_Init+0x448>)
 800368e:	4293      	cmp	r3, r2
 8003690:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2202      	movs	r2, #2
 800369e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <HAL_DMA_Init+0x44c>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	2b40      	cmp	r3, #64	; 0x40
 80036b8:	d020      	beq.n	80036fc <HAL_DMA_Init+0x450>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b80      	cmp	r3, #128	; 0x80
 80036c0:	d102      	bne.n	80036c8 <HAL_DMA_Init+0x41c>
 80036c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036c6:	e01a      	b.n	80036fe <HAL_DMA_Init+0x452>
 80036c8:	2300      	movs	r3, #0
 80036ca:	e018      	b.n	80036fe <HAL_DMA_Init+0x452>
 80036cc:	fe10803f 	.word	0xfe10803f
 80036d0:	5c001000 	.word	0x5c001000
 80036d4:	ffff0000 	.word	0xffff0000
 80036d8:	58025408 	.word	0x58025408
 80036dc:	5802541c 	.word	0x5802541c
 80036e0:	58025430 	.word	0x58025430
 80036e4:	58025444 	.word	0x58025444
 80036e8:	58025458 	.word	0x58025458
 80036ec:	5802546c 	.word	0x5802546c
 80036f0:	58025480 	.word	0x58025480
 80036f4:	58025494 	.word	0x58025494
 80036f8:	fffe000f 	.word	0xfffe000f
 80036fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	68d2      	ldr	r2, [r2, #12]
 8003702:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003704:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800370c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003714:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800371c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003724:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800372c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4313      	orrs	r3, r2
 8003732:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	4b6e      	ldr	r3, [pc, #440]	; (80038fc <HAL_DMA_Init+0x650>)
 8003744:	4413      	add	r3, r2
 8003746:	4a6e      	ldr	r2, [pc, #440]	; (8003900 <HAL_DMA_Init+0x654>)
 8003748:	fba2 2303 	umull	r2, r3, r2, r3
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	009a      	lsls	r2, r3, #2
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f002 f9b3 	bl	8005ac0 <DMA_CalcBaseAndBitshift>
 800375a:	4603      	mov	r3, r0
 800375c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003762:	f003 031f 	and.w	r3, r3, #31
 8003766:	2201      	movs	r2, #1
 8003768:	409a      	lsls	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	e008      	b.n	8003782 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2240      	movs	r2, #64	; 0x40
 8003774:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2203      	movs	r2, #3
 800377a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e0b7      	b.n	80038f2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a5f      	ldr	r2, [pc, #380]	; (8003904 <HAL_DMA_Init+0x658>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d072      	beq.n	8003872 <HAL_DMA_Init+0x5c6>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a5d      	ldr	r2, [pc, #372]	; (8003908 <HAL_DMA_Init+0x65c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d06d      	beq.n	8003872 <HAL_DMA_Init+0x5c6>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a5c      	ldr	r2, [pc, #368]	; (800390c <HAL_DMA_Init+0x660>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d068      	beq.n	8003872 <HAL_DMA_Init+0x5c6>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a5a      	ldr	r2, [pc, #360]	; (8003910 <HAL_DMA_Init+0x664>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d063      	beq.n	8003872 <HAL_DMA_Init+0x5c6>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a59      	ldr	r2, [pc, #356]	; (8003914 <HAL_DMA_Init+0x668>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d05e      	beq.n	8003872 <HAL_DMA_Init+0x5c6>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a57      	ldr	r2, [pc, #348]	; (8003918 <HAL_DMA_Init+0x66c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d059      	beq.n	8003872 <HAL_DMA_Init+0x5c6>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a56      	ldr	r2, [pc, #344]	; (800391c <HAL_DMA_Init+0x670>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d054      	beq.n	8003872 <HAL_DMA_Init+0x5c6>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a54      	ldr	r2, [pc, #336]	; (8003920 <HAL_DMA_Init+0x674>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d04f      	beq.n	8003872 <HAL_DMA_Init+0x5c6>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a53      	ldr	r2, [pc, #332]	; (8003924 <HAL_DMA_Init+0x678>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d04a      	beq.n	8003872 <HAL_DMA_Init+0x5c6>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a51      	ldr	r2, [pc, #324]	; (8003928 <HAL_DMA_Init+0x67c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d045      	beq.n	8003872 <HAL_DMA_Init+0x5c6>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a50      	ldr	r2, [pc, #320]	; (800392c <HAL_DMA_Init+0x680>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d040      	beq.n	8003872 <HAL_DMA_Init+0x5c6>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a4e      	ldr	r2, [pc, #312]	; (8003930 <HAL_DMA_Init+0x684>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d03b      	beq.n	8003872 <HAL_DMA_Init+0x5c6>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a4d      	ldr	r2, [pc, #308]	; (8003934 <HAL_DMA_Init+0x688>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d036      	beq.n	8003872 <HAL_DMA_Init+0x5c6>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a4b      	ldr	r2, [pc, #300]	; (8003938 <HAL_DMA_Init+0x68c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d031      	beq.n	8003872 <HAL_DMA_Init+0x5c6>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a4a      	ldr	r2, [pc, #296]	; (800393c <HAL_DMA_Init+0x690>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d02c      	beq.n	8003872 <HAL_DMA_Init+0x5c6>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a48      	ldr	r2, [pc, #288]	; (8003940 <HAL_DMA_Init+0x694>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d027      	beq.n	8003872 <HAL_DMA_Init+0x5c6>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a47      	ldr	r2, [pc, #284]	; (8003944 <HAL_DMA_Init+0x698>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d022      	beq.n	8003872 <HAL_DMA_Init+0x5c6>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a45      	ldr	r2, [pc, #276]	; (8003948 <HAL_DMA_Init+0x69c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d01d      	beq.n	8003872 <HAL_DMA_Init+0x5c6>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a44      	ldr	r2, [pc, #272]	; (800394c <HAL_DMA_Init+0x6a0>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d018      	beq.n	8003872 <HAL_DMA_Init+0x5c6>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a42      	ldr	r2, [pc, #264]	; (8003950 <HAL_DMA_Init+0x6a4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d013      	beq.n	8003872 <HAL_DMA_Init+0x5c6>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a41      	ldr	r2, [pc, #260]	; (8003954 <HAL_DMA_Init+0x6a8>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d00e      	beq.n	8003872 <HAL_DMA_Init+0x5c6>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a3f      	ldr	r2, [pc, #252]	; (8003958 <HAL_DMA_Init+0x6ac>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d009      	beq.n	8003872 <HAL_DMA_Init+0x5c6>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a3e      	ldr	r2, [pc, #248]	; (800395c <HAL_DMA_Init+0x6b0>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d004      	beq.n	8003872 <HAL_DMA_Init+0x5c6>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a3c      	ldr	r2, [pc, #240]	; (8003960 <HAL_DMA_Init+0x6b4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d101      	bne.n	8003876 <HAL_DMA_Init+0x5ca>
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <HAL_DMA_Init+0x5cc>
 8003876:	2300      	movs	r3, #0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d032      	beq.n	80038e2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f002 fa4d 	bl	8005d1c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	2b80      	cmp	r3, #128	; 0x80
 8003888:	d102      	bne.n	8003890 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80038a4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d010      	beq.n	80038d0 <HAL_DMA_Init+0x624>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d80c      	bhi.n	80038d0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f002 faca 	bl	8005e50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038cc:	605a      	str	r2, [r3, #4]
 80038ce:	e008      	b.n	80038e2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	a7fdabf8 	.word	0xa7fdabf8
 8003900:	cccccccd 	.word	0xcccccccd
 8003904:	40020010 	.word	0x40020010
 8003908:	40020028 	.word	0x40020028
 800390c:	40020040 	.word	0x40020040
 8003910:	40020058 	.word	0x40020058
 8003914:	40020070 	.word	0x40020070
 8003918:	40020088 	.word	0x40020088
 800391c:	400200a0 	.word	0x400200a0
 8003920:	400200b8 	.word	0x400200b8
 8003924:	40020410 	.word	0x40020410
 8003928:	40020428 	.word	0x40020428
 800392c:	40020440 	.word	0x40020440
 8003930:	40020458 	.word	0x40020458
 8003934:	40020470 	.word	0x40020470
 8003938:	40020488 	.word	0x40020488
 800393c:	400204a0 	.word	0x400204a0
 8003940:	400204b8 	.word	0x400204b8
 8003944:	58025408 	.word	0x58025408
 8003948:	5802541c 	.word	0x5802541c
 800394c:	58025430 	.word	0x58025430
 8003950:	58025444 	.word	0x58025444
 8003954:	58025458 	.word	0x58025458
 8003958:	5802546c 	.word	0x5802546c
 800395c:	58025480 	.word	0x58025480
 8003960:	58025494 	.word	0x58025494

08003964 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e226      	b.n	8003dce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <HAL_DMA_Start_IT+0x2a>
 800398a:	2302      	movs	r3, #2
 800398c:	e21f      	b.n	8003dce <HAL_DMA_Start_IT+0x46a>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b01      	cmp	r3, #1
 80039a0:	f040 820a 	bne.w	8003db8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a68      	ldr	r2, [pc, #416]	; (8003b58 <HAL_DMA_Start_IT+0x1f4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d04a      	beq.n	8003a52 <HAL_DMA_Start_IT+0xee>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a66      	ldr	r2, [pc, #408]	; (8003b5c <HAL_DMA_Start_IT+0x1f8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d045      	beq.n	8003a52 <HAL_DMA_Start_IT+0xee>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a65      	ldr	r2, [pc, #404]	; (8003b60 <HAL_DMA_Start_IT+0x1fc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d040      	beq.n	8003a52 <HAL_DMA_Start_IT+0xee>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a63      	ldr	r2, [pc, #396]	; (8003b64 <HAL_DMA_Start_IT+0x200>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d03b      	beq.n	8003a52 <HAL_DMA_Start_IT+0xee>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a62      	ldr	r2, [pc, #392]	; (8003b68 <HAL_DMA_Start_IT+0x204>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d036      	beq.n	8003a52 <HAL_DMA_Start_IT+0xee>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a60      	ldr	r2, [pc, #384]	; (8003b6c <HAL_DMA_Start_IT+0x208>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d031      	beq.n	8003a52 <HAL_DMA_Start_IT+0xee>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a5f      	ldr	r2, [pc, #380]	; (8003b70 <HAL_DMA_Start_IT+0x20c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d02c      	beq.n	8003a52 <HAL_DMA_Start_IT+0xee>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a5d      	ldr	r2, [pc, #372]	; (8003b74 <HAL_DMA_Start_IT+0x210>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d027      	beq.n	8003a52 <HAL_DMA_Start_IT+0xee>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a5c      	ldr	r2, [pc, #368]	; (8003b78 <HAL_DMA_Start_IT+0x214>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d022      	beq.n	8003a52 <HAL_DMA_Start_IT+0xee>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a5a      	ldr	r2, [pc, #360]	; (8003b7c <HAL_DMA_Start_IT+0x218>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d01d      	beq.n	8003a52 <HAL_DMA_Start_IT+0xee>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a59      	ldr	r2, [pc, #356]	; (8003b80 <HAL_DMA_Start_IT+0x21c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d018      	beq.n	8003a52 <HAL_DMA_Start_IT+0xee>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a57      	ldr	r2, [pc, #348]	; (8003b84 <HAL_DMA_Start_IT+0x220>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d013      	beq.n	8003a52 <HAL_DMA_Start_IT+0xee>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a56      	ldr	r2, [pc, #344]	; (8003b88 <HAL_DMA_Start_IT+0x224>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00e      	beq.n	8003a52 <HAL_DMA_Start_IT+0xee>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a54      	ldr	r2, [pc, #336]	; (8003b8c <HAL_DMA_Start_IT+0x228>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d009      	beq.n	8003a52 <HAL_DMA_Start_IT+0xee>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a53      	ldr	r2, [pc, #332]	; (8003b90 <HAL_DMA_Start_IT+0x22c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d004      	beq.n	8003a52 <HAL_DMA_Start_IT+0xee>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a51      	ldr	r2, [pc, #324]	; (8003b94 <HAL_DMA_Start_IT+0x230>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d108      	bne.n	8003a64 <HAL_DMA_Start_IT+0x100>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0201 	bic.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	e007      	b.n	8003a74 <HAL_DMA_Start_IT+0x110>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f001 fe74 	bl	8005768 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a34      	ldr	r2, [pc, #208]	; (8003b58 <HAL_DMA_Start_IT+0x1f4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d04a      	beq.n	8003b20 <HAL_DMA_Start_IT+0x1bc>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a33      	ldr	r2, [pc, #204]	; (8003b5c <HAL_DMA_Start_IT+0x1f8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d045      	beq.n	8003b20 <HAL_DMA_Start_IT+0x1bc>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a31      	ldr	r2, [pc, #196]	; (8003b60 <HAL_DMA_Start_IT+0x1fc>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d040      	beq.n	8003b20 <HAL_DMA_Start_IT+0x1bc>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a30      	ldr	r2, [pc, #192]	; (8003b64 <HAL_DMA_Start_IT+0x200>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d03b      	beq.n	8003b20 <HAL_DMA_Start_IT+0x1bc>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a2e      	ldr	r2, [pc, #184]	; (8003b68 <HAL_DMA_Start_IT+0x204>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d036      	beq.n	8003b20 <HAL_DMA_Start_IT+0x1bc>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a2d      	ldr	r2, [pc, #180]	; (8003b6c <HAL_DMA_Start_IT+0x208>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d031      	beq.n	8003b20 <HAL_DMA_Start_IT+0x1bc>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a2b      	ldr	r2, [pc, #172]	; (8003b70 <HAL_DMA_Start_IT+0x20c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d02c      	beq.n	8003b20 <HAL_DMA_Start_IT+0x1bc>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a2a      	ldr	r2, [pc, #168]	; (8003b74 <HAL_DMA_Start_IT+0x210>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d027      	beq.n	8003b20 <HAL_DMA_Start_IT+0x1bc>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a28      	ldr	r2, [pc, #160]	; (8003b78 <HAL_DMA_Start_IT+0x214>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d022      	beq.n	8003b20 <HAL_DMA_Start_IT+0x1bc>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a27      	ldr	r2, [pc, #156]	; (8003b7c <HAL_DMA_Start_IT+0x218>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d01d      	beq.n	8003b20 <HAL_DMA_Start_IT+0x1bc>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a25      	ldr	r2, [pc, #148]	; (8003b80 <HAL_DMA_Start_IT+0x21c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d018      	beq.n	8003b20 <HAL_DMA_Start_IT+0x1bc>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a24      	ldr	r2, [pc, #144]	; (8003b84 <HAL_DMA_Start_IT+0x220>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d013      	beq.n	8003b20 <HAL_DMA_Start_IT+0x1bc>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a22      	ldr	r2, [pc, #136]	; (8003b88 <HAL_DMA_Start_IT+0x224>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00e      	beq.n	8003b20 <HAL_DMA_Start_IT+0x1bc>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a21      	ldr	r2, [pc, #132]	; (8003b8c <HAL_DMA_Start_IT+0x228>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d009      	beq.n	8003b20 <HAL_DMA_Start_IT+0x1bc>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a1f      	ldr	r2, [pc, #124]	; (8003b90 <HAL_DMA_Start_IT+0x22c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d004      	beq.n	8003b20 <HAL_DMA_Start_IT+0x1bc>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a1e      	ldr	r2, [pc, #120]	; (8003b94 <HAL_DMA_Start_IT+0x230>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d101      	bne.n	8003b24 <HAL_DMA_Start_IT+0x1c0>
 8003b20:	2301      	movs	r3, #1
 8003b22:	e000      	b.n	8003b26 <HAL_DMA_Start_IT+0x1c2>
 8003b24:	2300      	movs	r3, #0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d036      	beq.n	8003b98 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f023 021e 	bic.w	r2, r3, #30
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f042 0216 	orr.w	r2, r2, #22
 8003b3c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d03e      	beq.n	8003bc4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0208 	orr.w	r2, r2, #8
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	e035      	b.n	8003bc4 <HAL_DMA_Start_IT+0x260>
 8003b58:	40020010 	.word	0x40020010
 8003b5c:	40020028 	.word	0x40020028
 8003b60:	40020040 	.word	0x40020040
 8003b64:	40020058 	.word	0x40020058
 8003b68:	40020070 	.word	0x40020070
 8003b6c:	40020088 	.word	0x40020088
 8003b70:	400200a0 	.word	0x400200a0
 8003b74:	400200b8 	.word	0x400200b8
 8003b78:	40020410 	.word	0x40020410
 8003b7c:	40020428 	.word	0x40020428
 8003b80:	40020440 	.word	0x40020440
 8003b84:	40020458 	.word	0x40020458
 8003b88:	40020470 	.word	0x40020470
 8003b8c:	40020488 	.word	0x40020488
 8003b90:	400204a0 	.word	0x400204a0
 8003b94:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f023 020e 	bic.w	r2, r3, #14
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 020a 	orr.w	r2, r2, #10
 8003baa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d007      	beq.n	8003bc4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0204 	orr.w	r2, r2, #4
 8003bc2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a83      	ldr	r2, [pc, #524]	; (8003dd8 <HAL_DMA_Start_IT+0x474>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d072      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x350>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a82      	ldr	r2, [pc, #520]	; (8003ddc <HAL_DMA_Start_IT+0x478>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d06d      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x350>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a80      	ldr	r2, [pc, #512]	; (8003de0 <HAL_DMA_Start_IT+0x47c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d068      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x350>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a7f      	ldr	r2, [pc, #508]	; (8003de4 <HAL_DMA_Start_IT+0x480>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d063      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x350>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a7d      	ldr	r2, [pc, #500]	; (8003de8 <HAL_DMA_Start_IT+0x484>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d05e      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x350>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a7c      	ldr	r2, [pc, #496]	; (8003dec <HAL_DMA_Start_IT+0x488>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d059      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x350>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a7a      	ldr	r2, [pc, #488]	; (8003df0 <HAL_DMA_Start_IT+0x48c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d054      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x350>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a79      	ldr	r2, [pc, #484]	; (8003df4 <HAL_DMA_Start_IT+0x490>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d04f      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x350>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a77      	ldr	r2, [pc, #476]	; (8003df8 <HAL_DMA_Start_IT+0x494>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d04a      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x350>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a76      	ldr	r2, [pc, #472]	; (8003dfc <HAL_DMA_Start_IT+0x498>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d045      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x350>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a74      	ldr	r2, [pc, #464]	; (8003e00 <HAL_DMA_Start_IT+0x49c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d040      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x350>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a73      	ldr	r2, [pc, #460]	; (8003e04 <HAL_DMA_Start_IT+0x4a0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d03b      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x350>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a71      	ldr	r2, [pc, #452]	; (8003e08 <HAL_DMA_Start_IT+0x4a4>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d036      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x350>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a70      	ldr	r2, [pc, #448]	; (8003e0c <HAL_DMA_Start_IT+0x4a8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d031      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x350>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a6e      	ldr	r2, [pc, #440]	; (8003e10 <HAL_DMA_Start_IT+0x4ac>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d02c      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x350>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a6d      	ldr	r2, [pc, #436]	; (8003e14 <HAL_DMA_Start_IT+0x4b0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d027      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x350>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a6b      	ldr	r2, [pc, #428]	; (8003e18 <HAL_DMA_Start_IT+0x4b4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d022      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x350>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a6a      	ldr	r2, [pc, #424]	; (8003e1c <HAL_DMA_Start_IT+0x4b8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d01d      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x350>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a68      	ldr	r2, [pc, #416]	; (8003e20 <HAL_DMA_Start_IT+0x4bc>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d018      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x350>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a67      	ldr	r2, [pc, #412]	; (8003e24 <HAL_DMA_Start_IT+0x4c0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d013      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x350>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a65      	ldr	r2, [pc, #404]	; (8003e28 <HAL_DMA_Start_IT+0x4c4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00e      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x350>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a64      	ldr	r2, [pc, #400]	; (8003e2c <HAL_DMA_Start_IT+0x4c8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d009      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x350>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a62      	ldr	r2, [pc, #392]	; (8003e30 <HAL_DMA_Start_IT+0x4cc>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d004      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x350>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a61      	ldr	r2, [pc, #388]	; (8003e34 <HAL_DMA_Start_IT+0x4d0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d101      	bne.n	8003cb8 <HAL_DMA_Start_IT+0x354>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e000      	b.n	8003cba <HAL_DMA_Start_IT+0x356>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d01a      	beq.n	8003cf4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d007      	beq.n	8003cdc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cda:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d007      	beq.n	8003cf4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cf2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a37      	ldr	r2, [pc, #220]	; (8003dd8 <HAL_DMA_Start_IT+0x474>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d04a      	beq.n	8003d94 <HAL_DMA_Start_IT+0x430>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a36      	ldr	r2, [pc, #216]	; (8003ddc <HAL_DMA_Start_IT+0x478>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d045      	beq.n	8003d94 <HAL_DMA_Start_IT+0x430>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a34      	ldr	r2, [pc, #208]	; (8003de0 <HAL_DMA_Start_IT+0x47c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d040      	beq.n	8003d94 <HAL_DMA_Start_IT+0x430>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a33      	ldr	r2, [pc, #204]	; (8003de4 <HAL_DMA_Start_IT+0x480>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d03b      	beq.n	8003d94 <HAL_DMA_Start_IT+0x430>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a31      	ldr	r2, [pc, #196]	; (8003de8 <HAL_DMA_Start_IT+0x484>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d036      	beq.n	8003d94 <HAL_DMA_Start_IT+0x430>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a30      	ldr	r2, [pc, #192]	; (8003dec <HAL_DMA_Start_IT+0x488>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d031      	beq.n	8003d94 <HAL_DMA_Start_IT+0x430>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a2e      	ldr	r2, [pc, #184]	; (8003df0 <HAL_DMA_Start_IT+0x48c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d02c      	beq.n	8003d94 <HAL_DMA_Start_IT+0x430>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a2d      	ldr	r2, [pc, #180]	; (8003df4 <HAL_DMA_Start_IT+0x490>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d027      	beq.n	8003d94 <HAL_DMA_Start_IT+0x430>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a2b      	ldr	r2, [pc, #172]	; (8003df8 <HAL_DMA_Start_IT+0x494>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d022      	beq.n	8003d94 <HAL_DMA_Start_IT+0x430>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a2a      	ldr	r2, [pc, #168]	; (8003dfc <HAL_DMA_Start_IT+0x498>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d01d      	beq.n	8003d94 <HAL_DMA_Start_IT+0x430>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a28      	ldr	r2, [pc, #160]	; (8003e00 <HAL_DMA_Start_IT+0x49c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d018      	beq.n	8003d94 <HAL_DMA_Start_IT+0x430>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a27      	ldr	r2, [pc, #156]	; (8003e04 <HAL_DMA_Start_IT+0x4a0>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d013      	beq.n	8003d94 <HAL_DMA_Start_IT+0x430>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a25      	ldr	r2, [pc, #148]	; (8003e08 <HAL_DMA_Start_IT+0x4a4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00e      	beq.n	8003d94 <HAL_DMA_Start_IT+0x430>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a24      	ldr	r2, [pc, #144]	; (8003e0c <HAL_DMA_Start_IT+0x4a8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d009      	beq.n	8003d94 <HAL_DMA_Start_IT+0x430>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a22      	ldr	r2, [pc, #136]	; (8003e10 <HAL_DMA_Start_IT+0x4ac>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d004      	beq.n	8003d94 <HAL_DMA_Start_IT+0x430>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a21      	ldr	r2, [pc, #132]	; (8003e14 <HAL_DMA_Start_IT+0x4b0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d108      	bne.n	8003da6 <HAL_DMA_Start_IT+0x442>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0201 	orr.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	e012      	b.n	8003dcc <HAL_DMA_Start_IT+0x468>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f042 0201 	orr.w	r2, r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e009      	b.n	8003dcc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dc6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40020010 	.word	0x40020010
 8003ddc:	40020028 	.word	0x40020028
 8003de0:	40020040 	.word	0x40020040
 8003de4:	40020058 	.word	0x40020058
 8003de8:	40020070 	.word	0x40020070
 8003dec:	40020088 	.word	0x40020088
 8003df0:	400200a0 	.word	0x400200a0
 8003df4:	400200b8 	.word	0x400200b8
 8003df8:	40020410 	.word	0x40020410
 8003dfc:	40020428 	.word	0x40020428
 8003e00:	40020440 	.word	0x40020440
 8003e04:	40020458 	.word	0x40020458
 8003e08:	40020470 	.word	0x40020470
 8003e0c:	40020488 	.word	0x40020488
 8003e10:	400204a0 	.word	0x400204a0
 8003e14:	400204b8 	.word	0x400204b8
 8003e18:	58025408 	.word	0x58025408
 8003e1c:	5802541c 	.word	0x5802541c
 8003e20:	58025430 	.word	0x58025430
 8003e24:	58025444 	.word	0x58025444
 8003e28:	58025458 	.word	0x58025458
 8003e2c:	5802546c 	.word	0x5802546c
 8003e30:	58025480 	.word	0x58025480
 8003e34:	58025494 	.word	0x58025494

08003e38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003e40:	f7ff f93c 	bl	80030bc <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e2dc      	b.n	800440a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d008      	beq.n	8003e6e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2280      	movs	r2, #128	; 0x80
 8003e60:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e2cd      	b.n	800440a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a76      	ldr	r2, [pc, #472]	; (800404c <HAL_DMA_Abort+0x214>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d04a      	beq.n	8003f0e <HAL_DMA_Abort+0xd6>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a74      	ldr	r2, [pc, #464]	; (8004050 <HAL_DMA_Abort+0x218>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d045      	beq.n	8003f0e <HAL_DMA_Abort+0xd6>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a73      	ldr	r2, [pc, #460]	; (8004054 <HAL_DMA_Abort+0x21c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d040      	beq.n	8003f0e <HAL_DMA_Abort+0xd6>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a71      	ldr	r2, [pc, #452]	; (8004058 <HAL_DMA_Abort+0x220>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d03b      	beq.n	8003f0e <HAL_DMA_Abort+0xd6>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a70      	ldr	r2, [pc, #448]	; (800405c <HAL_DMA_Abort+0x224>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d036      	beq.n	8003f0e <HAL_DMA_Abort+0xd6>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a6e      	ldr	r2, [pc, #440]	; (8004060 <HAL_DMA_Abort+0x228>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d031      	beq.n	8003f0e <HAL_DMA_Abort+0xd6>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a6d      	ldr	r2, [pc, #436]	; (8004064 <HAL_DMA_Abort+0x22c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d02c      	beq.n	8003f0e <HAL_DMA_Abort+0xd6>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a6b      	ldr	r2, [pc, #428]	; (8004068 <HAL_DMA_Abort+0x230>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d027      	beq.n	8003f0e <HAL_DMA_Abort+0xd6>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a6a      	ldr	r2, [pc, #424]	; (800406c <HAL_DMA_Abort+0x234>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d022      	beq.n	8003f0e <HAL_DMA_Abort+0xd6>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a68      	ldr	r2, [pc, #416]	; (8004070 <HAL_DMA_Abort+0x238>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d01d      	beq.n	8003f0e <HAL_DMA_Abort+0xd6>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a67      	ldr	r2, [pc, #412]	; (8004074 <HAL_DMA_Abort+0x23c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d018      	beq.n	8003f0e <HAL_DMA_Abort+0xd6>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a65      	ldr	r2, [pc, #404]	; (8004078 <HAL_DMA_Abort+0x240>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d013      	beq.n	8003f0e <HAL_DMA_Abort+0xd6>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a64      	ldr	r2, [pc, #400]	; (800407c <HAL_DMA_Abort+0x244>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d00e      	beq.n	8003f0e <HAL_DMA_Abort+0xd6>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a62      	ldr	r2, [pc, #392]	; (8004080 <HAL_DMA_Abort+0x248>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d009      	beq.n	8003f0e <HAL_DMA_Abort+0xd6>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a61      	ldr	r2, [pc, #388]	; (8004084 <HAL_DMA_Abort+0x24c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d004      	beq.n	8003f0e <HAL_DMA_Abort+0xd6>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a5f      	ldr	r2, [pc, #380]	; (8004088 <HAL_DMA_Abort+0x250>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d101      	bne.n	8003f12 <HAL_DMA_Abort+0xda>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <HAL_DMA_Abort+0xdc>
 8003f12:	2300      	movs	r3, #0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d013      	beq.n	8003f40 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 021e 	bic.w	r2, r2, #30
 8003f26:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	695a      	ldr	r2, [r3, #20]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f36:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	617b      	str	r3, [r7, #20]
 8003f3e:	e00a      	b.n	8003f56 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 020e 	bic.w	r2, r2, #14
 8003f4e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a3c      	ldr	r2, [pc, #240]	; (800404c <HAL_DMA_Abort+0x214>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d072      	beq.n	8004046 <HAL_DMA_Abort+0x20e>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a3a      	ldr	r2, [pc, #232]	; (8004050 <HAL_DMA_Abort+0x218>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d06d      	beq.n	8004046 <HAL_DMA_Abort+0x20e>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a39      	ldr	r2, [pc, #228]	; (8004054 <HAL_DMA_Abort+0x21c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d068      	beq.n	8004046 <HAL_DMA_Abort+0x20e>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a37      	ldr	r2, [pc, #220]	; (8004058 <HAL_DMA_Abort+0x220>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d063      	beq.n	8004046 <HAL_DMA_Abort+0x20e>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a36      	ldr	r2, [pc, #216]	; (800405c <HAL_DMA_Abort+0x224>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d05e      	beq.n	8004046 <HAL_DMA_Abort+0x20e>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a34      	ldr	r2, [pc, #208]	; (8004060 <HAL_DMA_Abort+0x228>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d059      	beq.n	8004046 <HAL_DMA_Abort+0x20e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a33      	ldr	r2, [pc, #204]	; (8004064 <HAL_DMA_Abort+0x22c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d054      	beq.n	8004046 <HAL_DMA_Abort+0x20e>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a31      	ldr	r2, [pc, #196]	; (8004068 <HAL_DMA_Abort+0x230>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d04f      	beq.n	8004046 <HAL_DMA_Abort+0x20e>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a30      	ldr	r2, [pc, #192]	; (800406c <HAL_DMA_Abort+0x234>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d04a      	beq.n	8004046 <HAL_DMA_Abort+0x20e>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a2e      	ldr	r2, [pc, #184]	; (8004070 <HAL_DMA_Abort+0x238>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d045      	beq.n	8004046 <HAL_DMA_Abort+0x20e>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a2d      	ldr	r2, [pc, #180]	; (8004074 <HAL_DMA_Abort+0x23c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d040      	beq.n	8004046 <HAL_DMA_Abort+0x20e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a2b      	ldr	r2, [pc, #172]	; (8004078 <HAL_DMA_Abort+0x240>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d03b      	beq.n	8004046 <HAL_DMA_Abort+0x20e>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a2a      	ldr	r2, [pc, #168]	; (800407c <HAL_DMA_Abort+0x244>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d036      	beq.n	8004046 <HAL_DMA_Abort+0x20e>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a28      	ldr	r2, [pc, #160]	; (8004080 <HAL_DMA_Abort+0x248>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d031      	beq.n	8004046 <HAL_DMA_Abort+0x20e>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a27      	ldr	r2, [pc, #156]	; (8004084 <HAL_DMA_Abort+0x24c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d02c      	beq.n	8004046 <HAL_DMA_Abort+0x20e>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a25      	ldr	r2, [pc, #148]	; (8004088 <HAL_DMA_Abort+0x250>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d027      	beq.n	8004046 <HAL_DMA_Abort+0x20e>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a24      	ldr	r2, [pc, #144]	; (800408c <HAL_DMA_Abort+0x254>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d022      	beq.n	8004046 <HAL_DMA_Abort+0x20e>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a22      	ldr	r2, [pc, #136]	; (8004090 <HAL_DMA_Abort+0x258>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d01d      	beq.n	8004046 <HAL_DMA_Abort+0x20e>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a21      	ldr	r2, [pc, #132]	; (8004094 <HAL_DMA_Abort+0x25c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d018      	beq.n	8004046 <HAL_DMA_Abort+0x20e>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a1f      	ldr	r2, [pc, #124]	; (8004098 <HAL_DMA_Abort+0x260>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d013      	beq.n	8004046 <HAL_DMA_Abort+0x20e>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a1e      	ldr	r2, [pc, #120]	; (800409c <HAL_DMA_Abort+0x264>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00e      	beq.n	8004046 <HAL_DMA_Abort+0x20e>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a1c      	ldr	r2, [pc, #112]	; (80040a0 <HAL_DMA_Abort+0x268>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d009      	beq.n	8004046 <HAL_DMA_Abort+0x20e>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a1b      	ldr	r2, [pc, #108]	; (80040a4 <HAL_DMA_Abort+0x26c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d004      	beq.n	8004046 <HAL_DMA_Abort+0x20e>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a19      	ldr	r2, [pc, #100]	; (80040a8 <HAL_DMA_Abort+0x270>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d132      	bne.n	80040ac <HAL_DMA_Abort+0x274>
 8004046:	2301      	movs	r3, #1
 8004048:	e031      	b.n	80040ae <HAL_DMA_Abort+0x276>
 800404a:	bf00      	nop
 800404c:	40020010 	.word	0x40020010
 8004050:	40020028 	.word	0x40020028
 8004054:	40020040 	.word	0x40020040
 8004058:	40020058 	.word	0x40020058
 800405c:	40020070 	.word	0x40020070
 8004060:	40020088 	.word	0x40020088
 8004064:	400200a0 	.word	0x400200a0
 8004068:	400200b8 	.word	0x400200b8
 800406c:	40020410 	.word	0x40020410
 8004070:	40020428 	.word	0x40020428
 8004074:	40020440 	.word	0x40020440
 8004078:	40020458 	.word	0x40020458
 800407c:	40020470 	.word	0x40020470
 8004080:	40020488 	.word	0x40020488
 8004084:	400204a0 	.word	0x400204a0
 8004088:	400204b8 	.word	0x400204b8
 800408c:	58025408 	.word	0x58025408
 8004090:	5802541c 	.word	0x5802541c
 8004094:	58025430 	.word	0x58025430
 8004098:	58025444 	.word	0x58025444
 800409c:	58025458 	.word	0x58025458
 80040a0:	5802546c 	.word	0x5802546c
 80040a4:	58025480 	.word	0x58025480
 80040a8:	58025494 	.word	0x58025494
 80040ac:	2300      	movs	r3, #0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d007      	beq.n	80040c2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a6d      	ldr	r2, [pc, #436]	; (800427c <HAL_DMA_Abort+0x444>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d04a      	beq.n	8004162 <HAL_DMA_Abort+0x32a>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a6b      	ldr	r2, [pc, #428]	; (8004280 <HAL_DMA_Abort+0x448>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d045      	beq.n	8004162 <HAL_DMA_Abort+0x32a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a6a      	ldr	r2, [pc, #424]	; (8004284 <HAL_DMA_Abort+0x44c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d040      	beq.n	8004162 <HAL_DMA_Abort+0x32a>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a68      	ldr	r2, [pc, #416]	; (8004288 <HAL_DMA_Abort+0x450>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d03b      	beq.n	8004162 <HAL_DMA_Abort+0x32a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a67      	ldr	r2, [pc, #412]	; (800428c <HAL_DMA_Abort+0x454>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d036      	beq.n	8004162 <HAL_DMA_Abort+0x32a>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a65      	ldr	r2, [pc, #404]	; (8004290 <HAL_DMA_Abort+0x458>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d031      	beq.n	8004162 <HAL_DMA_Abort+0x32a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a64      	ldr	r2, [pc, #400]	; (8004294 <HAL_DMA_Abort+0x45c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d02c      	beq.n	8004162 <HAL_DMA_Abort+0x32a>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a62      	ldr	r2, [pc, #392]	; (8004298 <HAL_DMA_Abort+0x460>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d027      	beq.n	8004162 <HAL_DMA_Abort+0x32a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a61      	ldr	r2, [pc, #388]	; (800429c <HAL_DMA_Abort+0x464>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d022      	beq.n	8004162 <HAL_DMA_Abort+0x32a>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a5f      	ldr	r2, [pc, #380]	; (80042a0 <HAL_DMA_Abort+0x468>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d01d      	beq.n	8004162 <HAL_DMA_Abort+0x32a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a5e      	ldr	r2, [pc, #376]	; (80042a4 <HAL_DMA_Abort+0x46c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d018      	beq.n	8004162 <HAL_DMA_Abort+0x32a>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a5c      	ldr	r2, [pc, #368]	; (80042a8 <HAL_DMA_Abort+0x470>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d013      	beq.n	8004162 <HAL_DMA_Abort+0x32a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a5b      	ldr	r2, [pc, #364]	; (80042ac <HAL_DMA_Abort+0x474>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00e      	beq.n	8004162 <HAL_DMA_Abort+0x32a>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a59      	ldr	r2, [pc, #356]	; (80042b0 <HAL_DMA_Abort+0x478>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d009      	beq.n	8004162 <HAL_DMA_Abort+0x32a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a58      	ldr	r2, [pc, #352]	; (80042b4 <HAL_DMA_Abort+0x47c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d004      	beq.n	8004162 <HAL_DMA_Abort+0x32a>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a56      	ldr	r2, [pc, #344]	; (80042b8 <HAL_DMA_Abort+0x480>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d108      	bne.n	8004174 <HAL_DMA_Abort+0x33c>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0201 	bic.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	e007      	b.n	8004184 <HAL_DMA_Abort+0x34c>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0201 	bic.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004184:	e013      	b.n	80041ae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004186:	f7fe ff99 	bl	80030bc <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b05      	cmp	r3, #5
 8004192:	d90c      	bls.n	80041ae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2220      	movs	r2, #32
 8004198:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2203      	movs	r2, #3
 80041a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e12d      	b.n	800440a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e5      	bne.n	8004186 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a2f      	ldr	r2, [pc, #188]	; (800427c <HAL_DMA_Abort+0x444>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d04a      	beq.n	800425a <HAL_DMA_Abort+0x422>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a2d      	ldr	r2, [pc, #180]	; (8004280 <HAL_DMA_Abort+0x448>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d045      	beq.n	800425a <HAL_DMA_Abort+0x422>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a2c      	ldr	r2, [pc, #176]	; (8004284 <HAL_DMA_Abort+0x44c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d040      	beq.n	800425a <HAL_DMA_Abort+0x422>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a2a      	ldr	r2, [pc, #168]	; (8004288 <HAL_DMA_Abort+0x450>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d03b      	beq.n	800425a <HAL_DMA_Abort+0x422>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a29      	ldr	r2, [pc, #164]	; (800428c <HAL_DMA_Abort+0x454>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d036      	beq.n	800425a <HAL_DMA_Abort+0x422>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a27      	ldr	r2, [pc, #156]	; (8004290 <HAL_DMA_Abort+0x458>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d031      	beq.n	800425a <HAL_DMA_Abort+0x422>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a26      	ldr	r2, [pc, #152]	; (8004294 <HAL_DMA_Abort+0x45c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d02c      	beq.n	800425a <HAL_DMA_Abort+0x422>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a24      	ldr	r2, [pc, #144]	; (8004298 <HAL_DMA_Abort+0x460>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d027      	beq.n	800425a <HAL_DMA_Abort+0x422>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a23      	ldr	r2, [pc, #140]	; (800429c <HAL_DMA_Abort+0x464>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d022      	beq.n	800425a <HAL_DMA_Abort+0x422>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a21      	ldr	r2, [pc, #132]	; (80042a0 <HAL_DMA_Abort+0x468>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d01d      	beq.n	800425a <HAL_DMA_Abort+0x422>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a20      	ldr	r2, [pc, #128]	; (80042a4 <HAL_DMA_Abort+0x46c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d018      	beq.n	800425a <HAL_DMA_Abort+0x422>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a1e      	ldr	r2, [pc, #120]	; (80042a8 <HAL_DMA_Abort+0x470>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d013      	beq.n	800425a <HAL_DMA_Abort+0x422>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a1d      	ldr	r2, [pc, #116]	; (80042ac <HAL_DMA_Abort+0x474>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00e      	beq.n	800425a <HAL_DMA_Abort+0x422>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a1b      	ldr	r2, [pc, #108]	; (80042b0 <HAL_DMA_Abort+0x478>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d009      	beq.n	800425a <HAL_DMA_Abort+0x422>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a1a      	ldr	r2, [pc, #104]	; (80042b4 <HAL_DMA_Abort+0x47c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d004      	beq.n	800425a <HAL_DMA_Abort+0x422>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a18      	ldr	r2, [pc, #96]	; (80042b8 <HAL_DMA_Abort+0x480>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d101      	bne.n	800425e <HAL_DMA_Abort+0x426>
 800425a:	2301      	movs	r3, #1
 800425c:	e000      	b.n	8004260 <HAL_DMA_Abort+0x428>
 800425e:	2300      	movs	r3, #0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d02b      	beq.n	80042bc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004268:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	223f      	movs	r2, #63	; 0x3f
 8004274:	409a      	lsls	r2, r3
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	609a      	str	r2, [r3, #8]
 800427a:	e02a      	b.n	80042d2 <HAL_DMA_Abort+0x49a>
 800427c:	40020010 	.word	0x40020010
 8004280:	40020028 	.word	0x40020028
 8004284:	40020040 	.word	0x40020040
 8004288:	40020058 	.word	0x40020058
 800428c:	40020070 	.word	0x40020070
 8004290:	40020088 	.word	0x40020088
 8004294:	400200a0 	.word	0x400200a0
 8004298:	400200b8 	.word	0x400200b8
 800429c:	40020410 	.word	0x40020410
 80042a0:	40020428 	.word	0x40020428
 80042a4:	40020440 	.word	0x40020440
 80042a8:	40020458 	.word	0x40020458
 80042ac:	40020470 	.word	0x40020470
 80042b0:	40020488 	.word	0x40020488
 80042b4:	400204a0 	.word	0x400204a0
 80042b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c6:	f003 031f 	and.w	r3, r3, #31
 80042ca:	2201      	movs	r2, #1
 80042cc:	409a      	lsls	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a4f      	ldr	r2, [pc, #316]	; (8004414 <HAL_DMA_Abort+0x5dc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d072      	beq.n	80043c2 <HAL_DMA_Abort+0x58a>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a4d      	ldr	r2, [pc, #308]	; (8004418 <HAL_DMA_Abort+0x5e0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d06d      	beq.n	80043c2 <HAL_DMA_Abort+0x58a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a4c      	ldr	r2, [pc, #304]	; (800441c <HAL_DMA_Abort+0x5e4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d068      	beq.n	80043c2 <HAL_DMA_Abort+0x58a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a4a      	ldr	r2, [pc, #296]	; (8004420 <HAL_DMA_Abort+0x5e8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d063      	beq.n	80043c2 <HAL_DMA_Abort+0x58a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a49      	ldr	r2, [pc, #292]	; (8004424 <HAL_DMA_Abort+0x5ec>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d05e      	beq.n	80043c2 <HAL_DMA_Abort+0x58a>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a47      	ldr	r2, [pc, #284]	; (8004428 <HAL_DMA_Abort+0x5f0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d059      	beq.n	80043c2 <HAL_DMA_Abort+0x58a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a46      	ldr	r2, [pc, #280]	; (800442c <HAL_DMA_Abort+0x5f4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d054      	beq.n	80043c2 <HAL_DMA_Abort+0x58a>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a44      	ldr	r2, [pc, #272]	; (8004430 <HAL_DMA_Abort+0x5f8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d04f      	beq.n	80043c2 <HAL_DMA_Abort+0x58a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a43      	ldr	r2, [pc, #268]	; (8004434 <HAL_DMA_Abort+0x5fc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d04a      	beq.n	80043c2 <HAL_DMA_Abort+0x58a>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a41      	ldr	r2, [pc, #260]	; (8004438 <HAL_DMA_Abort+0x600>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d045      	beq.n	80043c2 <HAL_DMA_Abort+0x58a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a40      	ldr	r2, [pc, #256]	; (800443c <HAL_DMA_Abort+0x604>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d040      	beq.n	80043c2 <HAL_DMA_Abort+0x58a>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a3e      	ldr	r2, [pc, #248]	; (8004440 <HAL_DMA_Abort+0x608>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d03b      	beq.n	80043c2 <HAL_DMA_Abort+0x58a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a3d      	ldr	r2, [pc, #244]	; (8004444 <HAL_DMA_Abort+0x60c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d036      	beq.n	80043c2 <HAL_DMA_Abort+0x58a>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a3b      	ldr	r2, [pc, #236]	; (8004448 <HAL_DMA_Abort+0x610>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d031      	beq.n	80043c2 <HAL_DMA_Abort+0x58a>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a3a      	ldr	r2, [pc, #232]	; (800444c <HAL_DMA_Abort+0x614>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d02c      	beq.n	80043c2 <HAL_DMA_Abort+0x58a>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a38      	ldr	r2, [pc, #224]	; (8004450 <HAL_DMA_Abort+0x618>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d027      	beq.n	80043c2 <HAL_DMA_Abort+0x58a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a37      	ldr	r2, [pc, #220]	; (8004454 <HAL_DMA_Abort+0x61c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d022      	beq.n	80043c2 <HAL_DMA_Abort+0x58a>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a35      	ldr	r2, [pc, #212]	; (8004458 <HAL_DMA_Abort+0x620>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d01d      	beq.n	80043c2 <HAL_DMA_Abort+0x58a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a34      	ldr	r2, [pc, #208]	; (800445c <HAL_DMA_Abort+0x624>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d018      	beq.n	80043c2 <HAL_DMA_Abort+0x58a>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a32      	ldr	r2, [pc, #200]	; (8004460 <HAL_DMA_Abort+0x628>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d013      	beq.n	80043c2 <HAL_DMA_Abort+0x58a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a31      	ldr	r2, [pc, #196]	; (8004464 <HAL_DMA_Abort+0x62c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00e      	beq.n	80043c2 <HAL_DMA_Abort+0x58a>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a2f      	ldr	r2, [pc, #188]	; (8004468 <HAL_DMA_Abort+0x630>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d009      	beq.n	80043c2 <HAL_DMA_Abort+0x58a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a2e      	ldr	r2, [pc, #184]	; (800446c <HAL_DMA_Abort+0x634>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d004      	beq.n	80043c2 <HAL_DMA_Abort+0x58a>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a2c      	ldr	r2, [pc, #176]	; (8004470 <HAL_DMA_Abort+0x638>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d101      	bne.n	80043c6 <HAL_DMA_Abort+0x58e>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <HAL_DMA_Abort+0x590>
 80043c6:	2300      	movs	r3, #0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d015      	beq.n	80043f8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80043d4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00c      	beq.n	80043f8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043ec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80043f6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40020010 	.word	0x40020010
 8004418:	40020028 	.word	0x40020028
 800441c:	40020040 	.word	0x40020040
 8004420:	40020058 	.word	0x40020058
 8004424:	40020070 	.word	0x40020070
 8004428:	40020088 	.word	0x40020088
 800442c:	400200a0 	.word	0x400200a0
 8004430:	400200b8 	.word	0x400200b8
 8004434:	40020410 	.word	0x40020410
 8004438:	40020428 	.word	0x40020428
 800443c:	40020440 	.word	0x40020440
 8004440:	40020458 	.word	0x40020458
 8004444:	40020470 	.word	0x40020470
 8004448:	40020488 	.word	0x40020488
 800444c:	400204a0 	.word	0x400204a0
 8004450:	400204b8 	.word	0x400204b8
 8004454:	58025408 	.word	0x58025408
 8004458:	5802541c 	.word	0x5802541c
 800445c:	58025430 	.word	0x58025430
 8004460:	58025444 	.word	0x58025444
 8004464:	58025458 	.word	0x58025458
 8004468:	5802546c 	.word	0x5802546c
 800446c:	58025480 	.word	0x58025480
 8004470:	58025494 	.word	0x58025494

08004474 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e205      	b.n	8004892 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d004      	beq.n	800449c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2280      	movs	r2, #128	; 0x80
 8004496:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e1fa      	b.n	8004892 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a8c      	ldr	r2, [pc, #560]	; (80046d4 <HAL_DMA_Abort_IT+0x260>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d04a      	beq.n	800453c <HAL_DMA_Abort_IT+0xc8>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a8b      	ldr	r2, [pc, #556]	; (80046d8 <HAL_DMA_Abort_IT+0x264>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d045      	beq.n	800453c <HAL_DMA_Abort_IT+0xc8>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a89      	ldr	r2, [pc, #548]	; (80046dc <HAL_DMA_Abort_IT+0x268>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d040      	beq.n	800453c <HAL_DMA_Abort_IT+0xc8>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a88      	ldr	r2, [pc, #544]	; (80046e0 <HAL_DMA_Abort_IT+0x26c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d03b      	beq.n	800453c <HAL_DMA_Abort_IT+0xc8>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a86      	ldr	r2, [pc, #536]	; (80046e4 <HAL_DMA_Abort_IT+0x270>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d036      	beq.n	800453c <HAL_DMA_Abort_IT+0xc8>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a85      	ldr	r2, [pc, #532]	; (80046e8 <HAL_DMA_Abort_IT+0x274>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d031      	beq.n	800453c <HAL_DMA_Abort_IT+0xc8>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a83      	ldr	r2, [pc, #524]	; (80046ec <HAL_DMA_Abort_IT+0x278>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d02c      	beq.n	800453c <HAL_DMA_Abort_IT+0xc8>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a82      	ldr	r2, [pc, #520]	; (80046f0 <HAL_DMA_Abort_IT+0x27c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d027      	beq.n	800453c <HAL_DMA_Abort_IT+0xc8>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a80      	ldr	r2, [pc, #512]	; (80046f4 <HAL_DMA_Abort_IT+0x280>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d022      	beq.n	800453c <HAL_DMA_Abort_IT+0xc8>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a7f      	ldr	r2, [pc, #508]	; (80046f8 <HAL_DMA_Abort_IT+0x284>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d01d      	beq.n	800453c <HAL_DMA_Abort_IT+0xc8>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a7d      	ldr	r2, [pc, #500]	; (80046fc <HAL_DMA_Abort_IT+0x288>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d018      	beq.n	800453c <HAL_DMA_Abort_IT+0xc8>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a7c      	ldr	r2, [pc, #496]	; (8004700 <HAL_DMA_Abort_IT+0x28c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d013      	beq.n	800453c <HAL_DMA_Abort_IT+0xc8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a7a      	ldr	r2, [pc, #488]	; (8004704 <HAL_DMA_Abort_IT+0x290>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d00e      	beq.n	800453c <HAL_DMA_Abort_IT+0xc8>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a79      	ldr	r2, [pc, #484]	; (8004708 <HAL_DMA_Abort_IT+0x294>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d009      	beq.n	800453c <HAL_DMA_Abort_IT+0xc8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a77      	ldr	r2, [pc, #476]	; (800470c <HAL_DMA_Abort_IT+0x298>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d004      	beq.n	800453c <HAL_DMA_Abort_IT+0xc8>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a76      	ldr	r2, [pc, #472]	; (8004710 <HAL_DMA_Abort_IT+0x29c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d101      	bne.n	8004540 <HAL_DMA_Abort_IT+0xcc>
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <HAL_DMA_Abort_IT+0xce>
 8004540:	2300      	movs	r3, #0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d065      	beq.n	8004612 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2204      	movs	r2, #4
 800454a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a60      	ldr	r2, [pc, #384]	; (80046d4 <HAL_DMA_Abort_IT+0x260>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d04a      	beq.n	80045ee <HAL_DMA_Abort_IT+0x17a>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a5e      	ldr	r2, [pc, #376]	; (80046d8 <HAL_DMA_Abort_IT+0x264>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d045      	beq.n	80045ee <HAL_DMA_Abort_IT+0x17a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a5d      	ldr	r2, [pc, #372]	; (80046dc <HAL_DMA_Abort_IT+0x268>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d040      	beq.n	80045ee <HAL_DMA_Abort_IT+0x17a>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a5b      	ldr	r2, [pc, #364]	; (80046e0 <HAL_DMA_Abort_IT+0x26c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d03b      	beq.n	80045ee <HAL_DMA_Abort_IT+0x17a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a5a      	ldr	r2, [pc, #360]	; (80046e4 <HAL_DMA_Abort_IT+0x270>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d036      	beq.n	80045ee <HAL_DMA_Abort_IT+0x17a>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a58      	ldr	r2, [pc, #352]	; (80046e8 <HAL_DMA_Abort_IT+0x274>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d031      	beq.n	80045ee <HAL_DMA_Abort_IT+0x17a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a57      	ldr	r2, [pc, #348]	; (80046ec <HAL_DMA_Abort_IT+0x278>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d02c      	beq.n	80045ee <HAL_DMA_Abort_IT+0x17a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a55      	ldr	r2, [pc, #340]	; (80046f0 <HAL_DMA_Abort_IT+0x27c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d027      	beq.n	80045ee <HAL_DMA_Abort_IT+0x17a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a54      	ldr	r2, [pc, #336]	; (80046f4 <HAL_DMA_Abort_IT+0x280>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d022      	beq.n	80045ee <HAL_DMA_Abort_IT+0x17a>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a52      	ldr	r2, [pc, #328]	; (80046f8 <HAL_DMA_Abort_IT+0x284>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d01d      	beq.n	80045ee <HAL_DMA_Abort_IT+0x17a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a51      	ldr	r2, [pc, #324]	; (80046fc <HAL_DMA_Abort_IT+0x288>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d018      	beq.n	80045ee <HAL_DMA_Abort_IT+0x17a>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a4f      	ldr	r2, [pc, #316]	; (8004700 <HAL_DMA_Abort_IT+0x28c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d013      	beq.n	80045ee <HAL_DMA_Abort_IT+0x17a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a4e      	ldr	r2, [pc, #312]	; (8004704 <HAL_DMA_Abort_IT+0x290>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d00e      	beq.n	80045ee <HAL_DMA_Abort_IT+0x17a>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a4c      	ldr	r2, [pc, #304]	; (8004708 <HAL_DMA_Abort_IT+0x294>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d009      	beq.n	80045ee <HAL_DMA_Abort_IT+0x17a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a4b      	ldr	r2, [pc, #300]	; (800470c <HAL_DMA_Abort_IT+0x298>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d004      	beq.n	80045ee <HAL_DMA_Abort_IT+0x17a>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a49      	ldr	r2, [pc, #292]	; (8004710 <HAL_DMA_Abort_IT+0x29c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d108      	bne.n	8004600 <HAL_DMA_Abort_IT+0x18c>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0201 	bic.w	r2, r2, #1
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	e147      	b.n	8004890 <HAL_DMA_Abort_IT+0x41c>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0201 	bic.w	r2, r2, #1
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	e13e      	b.n	8004890 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 020e 	bic.w	r2, r2, #14
 8004620:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a2b      	ldr	r2, [pc, #172]	; (80046d4 <HAL_DMA_Abort_IT+0x260>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d04a      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x24e>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a29      	ldr	r2, [pc, #164]	; (80046d8 <HAL_DMA_Abort_IT+0x264>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d045      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x24e>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a28      	ldr	r2, [pc, #160]	; (80046dc <HAL_DMA_Abort_IT+0x268>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d040      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x24e>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a26      	ldr	r2, [pc, #152]	; (80046e0 <HAL_DMA_Abort_IT+0x26c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d03b      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x24e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a25      	ldr	r2, [pc, #148]	; (80046e4 <HAL_DMA_Abort_IT+0x270>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d036      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x24e>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a23      	ldr	r2, [pc, #140]	; (80046e8 <HAL_DMA_Abort_IT+0x274>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d031      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x24e>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a22      	ldr	r2, [pc, #136]	; (80046ec <HAL_DMA_Abort_IT+0x278>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d02c      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x24e>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a20      	ldr	r2, [pc, #128]	; (80046f0 <HAL_DMA_Abort_IT+0x27c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d027      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x24e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a1f      	ldr	r2, [pc, #124]	; (80046f4 <HAL_DMA_Abort_IT+0x280>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d022      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x24e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a1d      	ldr	r2, [pc, #116]	; (80046f8 <HAL_DMA_Abort_IT+0x284>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d01d      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x24e>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a1c      	ldr	r2, [pc, #112]	; (80046fc <HAL_DMA_Abort_IT+0x288>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d018      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x24e>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a1a      	ldr	r2, [pc, #104]	; (8004700 <HAL_DMA_Abort_IT+0x28c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d013      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x24e>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a19      	ldr	r2, [pc, #100]	; (8004704 <HAL_DMA_Abort_IT+0x290>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00e      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x24e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a17      	ldr	r2, [pc, #92]	; (8004708 <HAL_DMA_Abort_IT+0x294>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d009      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x24e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a16      	ldr	r2, [pc, #88]	; (800470c <HAL_DMA_Abort_IT+0x298>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d004      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x24e>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a14      	ldr	r2, [pc, #80]	; (8004710 <HAL_DMA_Abort_IT+0x29c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d128      	bne.n	8004714 <HAL_DMA_Abort_IT+0x2a0>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0201 	bic.w	r2, r2, #1
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	e027      	b.n	8004724 <HAL_DMA_Abort_IT+0x2b0>
 80046d4:	40020010 	.word	0x40020010
 80046d8:	40020028 	.word	0x40020028
 80046dc:	40020040 	.word	0x40020040
 80046e0:	40020058 	.word	0x40020058
 80046e4:	40020070 	.word	0x40020070
 80046e8:	40020088 	.word	0x40020088
 80046ec:	400200a0 	.word	0x400200a0
 80046f0:	400200b8 	.word	0x400200b8
 80046f4:	40020410 	.word	0x40020410
 80046f8:	40020428 	.word	0x40020428
 80046fc:	40020440 	.word	0x40020440
 8004700:	40020458 	.word	0x40020458
 8004704:	40020470 	.word	0x40020470
 8004708:	40020488 	.word	0x40020488
 800470c:	400204a0 	.word	0x400204a0
 8004710:	400204b8 	.word	0x400204b8
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0201 	bic.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a5c      	ldr	r2, [pc, #368]	; (800489c <HAL_DMA_Abort_IT+0x428>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d072      	beq.n	8004814 <HAL_DMA_Abort_IT+0x3a0>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a5b      	ldr	r2, [pc, #364]	; (80048a0 <HAL_DMA_Abort_IT+0x42c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d06d      	beq.n	8004814 <HAL_DMA_Abort_IT+0x3a0>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a59      	ldr	r2, [pc, #356]	; (80048a4 <HAL_DMA_Abort_IT+0x430>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d068      	beq.n	8004814 <HAL_DMA_Abort_IT+0x3a0>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a58      	ldr	r2, [pc, #352]	; (80048a8 <HAL_DMA_Abort_IT+0x434>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d063      	beq.n	8004814 <HAL_DMA_Abort_IT+0x3a0>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a56      	ldr	r2, [pc, #344]	; (80048ac <HAL_DMA_Abort_IT+0x438>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d05e      	beq.n	8004814 <HAL_DMA_Abort_IT+0x3a0>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a55      	ldr	r2, [pc, #340]	; (80048b0 <HAL_DMA_Abort_IT+0x43c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d059      	beq.n	8004814 <HAL_DMA_Abort_IT+0x3a0>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a53      	ldr	r2, [pc, #332]	; (80048b4 <HAL_DMA_Abort_IT+0x440>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d054      	beq.n	8004814 <HAL_DMA_Abort_IT+0x3a0>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a52      	ldr	r2, [pc, #328]	; (80048b8 <HAL_DMA_Abort_IT+0x444>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d04f      	beq.n	8004814 <HAL_DMA_Abort_IT+0x3a0>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a50      	ldr	r2, [pc, #320]	; (80048bc <HAL_DMA_Abort_IT+0x448>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d04a      	beq.n	8004814 <HAL_DMA_Abort_IT+0x3a0>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a4f      	ldr	r2, [pc, #316]	; (80048c0 <HAL_DMA_Abort_IT+0x44c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d045      	beq.n	8004814 <HAL_DMA_Abort_IT+0x3a0>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a4d      	ldr	r2, [pc, #308]	; (80048c4 <HAL_DMA_Abort_IT+0x450>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d040      	beq.n	8004814 <HAL_DMA_Abort_IT+0x3a0>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a4c      	ldr	r2, [pc, #304]	; (80048c8 <HAL_DMA_Abort_IT+0x454>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d03b      	beq.n	8004814 <HAL_DMA_Abort_IT+0x3a0>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a4a      	ldr	r2, [pc, #296]	; (80048cc <HAL_DMA_Abort_IT+0x458>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d036      	beq.n	8004814 <HAL_DMA_Abort_IT+0x3a0>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a49      	ldr	r2, [pc, #292]	; (80048d0 <HAL_DMA_Abort_IT+0x45c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d031      	beq.n	8004814 <HAL_DMA_Abort_IT+0x3a0>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a47      	ldr	r2, [pc, #284]	; (80048d4 <HAL_DMA_Abort_IT+0x460>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d02c      	beq.n	8004814 <HAL_DMA_Abort_IT+0x3a0>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a46      	ldr	r2, [pc, #280]	; (80048d8 <HAL_DMA_Abort_IT+0x464>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d027      	beq.n	8004814 <HAL_DMA_Abort_IT+0x3a0>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a44      	ldr	r2, [pc, #272]	; (80048dc <HAL_DMA_Abort_IT+0x468>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d022      	beq.n	8004814 <HAL_DMA_Abort_IT+0x3a0>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a43      	ldr	r2, [pc, #268]	; (80048e0 <HAL_DMA_Abort_IT+0x46c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d01d      	beq.n	8004814 <HAL_DMA_Abort_IT+0x3a0>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a41      	ldr	r2, [pc, #260]	; (80048e4 <HAL_DMA_Abort_IT+0x470>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d018      	beq.n	8004814 <HAL_DMA_Abort_IT+0x3a0>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a40      	ldr	r2, [pc, #256]	; (80048e8 <HAL_DMA_Abort_IT+0x474>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d013      	beq.n	8004814 <HAL_DMA_Abort_IT+0x3a0>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a3e      	ldr	r2, [pc, #248]	; (80048ec <HAL_DMA_Abort_IT+0x478>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00e      	beq.n	8004814 <HAL_DMA_Abort_IT+0x3a0>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a3d      	ldr	r2, [pc, #244]	; (80048f0 <HAL_DMA_Abort_IT+0x47c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d009      	beq.n	8004814 <HAL_DMA_Abort_IT+0x3a0>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a3b      	ldr	r2, [pc, #236]	; (80048f4 <HAL_DMA_Abort_IT+0x480>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d004      	beq.n	8004814 <HAL_DMA_Abort_IT+0x3a0>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a3a      	ldr	r2, [pc, #232]	; (80048f8 <HAL_DMA_Abort_IT+0x484>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d101      	bne.n	8004818 <HAL_DMA_Abort_IT+0x3a4>
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <HAL_DMA_Abort_IT+0x3a6>
 8004818:	2300      	movs	r3, #0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d028      	beq.n	8004870 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004828:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800482c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004832:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	2201      	movs	r2, #1
 800483e:	409a      	lsls	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800484c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00c      	beq.n	8004870 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004860:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004864:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800486e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40020010 	.word	0x40020010
 80048a0:	40020028 	.word	0x40020028
 80048a4:	40020040 	.word	0x40020040
 80048a8:	40020058 	.word	0x40020058
 80048ac:	40020070 	.word	0x40020070
 80048b0:	40020088 	.word	0x40020088
 80048b4:	400200a0 	.word	0x400200a0
 80048b8:	400200b8 	.word	0x400200b8
 80048bc:	40020410 	.word	0x40020410
 80048c0:	40020428 	.word	0x40020428
 80048c4:	40020440 	.word	0x40020440
 80048c8:	40020458 	.word	0x40020458
 80048cc:	40020470 	.word	0x40020470
 80048d0:	40020488 	.word	0x40020488
 80048d4:	400204a0 	.word	0x400204a0
 80048d8:	400204b8 	.word	0x400204b8
 80048dc:	58025408 	.word	0x58025408
 80048e0:	5802541c 	.word	0x5802541c
 80048e4:	58025430 	.word	0x58025430
 80048e8:	58025444 	.word	0x58025444
 80048ec:	58025458 	.word	0x58025458
 80048f0:	5802546c 	.word	0x5802546c
 80048f4:	58025480 	.word	0x58025480
 80048f8:	58025494 	.word	0x58025494

080048fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08a      	sub	sp, #40	; 0x28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004908:	4b67      	ldr	r3, [pc, #412]	; (8004aa8 <HAL_DMA_IRQHandler+0x1ac>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a67      	ldr	r2, [pc, #412]	; (8004aac <HAL_DMA_IRQHandler+0x1b0>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	0a9b      	lsrs	r3, r3, #10
 8004914:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004920:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a5f      	ldr	r2, [pc, #380]	; (8004ab0 <HAL_DMA_IRQHandler+0x1b4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d04a      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a5d      	ldr	r2, [pc, #372]	; (8004ab4 <HAL_DMA_IRQHandler+0x1b8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d045      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a5c      	ldr	r2, [pc, #368]	; (8004ab8 <HAL_DMA_IRQHandler+0x1bc>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d040      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a5a      	ldr	r2, [pc, #360]	; (8004abc <HAL_DMA_IRQHandler+0x1c0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d03b      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a59      	ldr	r2, [pc, #356]	; (8004ac0 <HAL_DMA_IRQHandler+0x1c4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d036      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a57      	ldr	r2, [pc, #348]	; (8004ac4 <HAL_DMA_IRQHandler+0x1c8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d031      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a56      	ldr	r2, [pc, #344]	; (8004ac8 <HAL_DMA_IRQHandler+0x1cc>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d02c      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a54      	ldr	r2, [pc, #336]	; (8004acc <HAL_DMA_IRQHandler+0x1d0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d027      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a53      	ldr	r2, [pc, #332]	; (8004ad0 <HAL_DMA_IRQHandler+0x1d4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d022      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a51      	ldr	r2, [pc, #324]	; (8004ad4 <HAL_DMA_IRQHandler+0x1d8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d01d      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a50      	ldr	r2, [pc, #320]	; (8004ad8 <HAL_DMA_IRQHandler+0x1dc>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d018      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a4e      	ldr	r2, [pc, #312]	; (8004adc <HAL_DMA_IRQHandler+0x1e0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d013      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a4d      	ldr	r2, [pc, #308]	; (8004ae0 <HAL_DMA_IRQHandler+0x1e4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00e      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a4b      	ldr	r2, [pc, #300]	; (8004ae4 <HAL_DMA_IRQHandler+0x1e8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d009      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a4a      	ldr	r2, [pc, #296]	; (8004ae8 <HAL_DMA_IRQHandler+0x1ec>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d004      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a48      	ldr	r2, [pc, #288]	; (8004aec <HAL_DMA_IRQHandler+0x1f0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d101      	bne.n	80049d2 <HAL_DMA_IRQHandler+0xd6>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <HAL_DMA_IRQHandler+0xd8>
 80049d2:	2300      	movs	r3, #0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 842b 	beq.w	8005230 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049de:	f003 031f 	and.w	r3, r3, #31
 80049e2:	2208      	movs	r2, #8
 80049e4:	409a      	lsls	r2, r3
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	4013      	ands	r3, r2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 80a2 	beq.w	8004b34 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a2e      	ldr	r2, [pc, #184]	; (8004ab0 <HAL_DMA_IRQHandler+0x1b4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d04a      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a2d      	ldr	r2, [pc, #180]	; (8004ab4 <HAL_DMA_IRQHandler+0x1b8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d045      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a2b      	ldr	r2, [pc, #172]	; (8004ab8 <HAL_DMA_IRQHandler+0x1bc>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d040      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a2a      	ldr	r2, [pc, #168]	; (8004abc <HAL_DMA_IRQHandler+0x1c0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d03b      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a28      	ldr	r2, [pc, #160]	; (8004ac0 <HAL_DMA_IRQHandler+0x1c4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d036      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a27      	ldr	r2, [pc, #156]	; (8004ac4 <HAL_DMA_IRQHandler+0x1c8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d031      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a25      	ldr	r2, [pc, #148]	; (8004ac8 <HAL_DMA_IRQHandler+0x1cc>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d02c      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a24      	ldr	r2, [pc, #144]	; (8004acc <HAL_DMA_IRQHandler+0x1d0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d027      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a22      	ldr	r2, [pc, #136]	; (8004ad0 <HAL_DMA_IRQHandler+0x1d4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d022      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a21      	ldr	r2, [pc, #132]	; (8004ad4 <HAL_DMA_IRQHandler+0x1d8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d01d      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a1f      	ldr	r2, [pc, #124]	; (8004ad8 <HAL_DMA_IRQHandler+0x1dc>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d018      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a1e      	ldr	r2, [pc, #120]	; (8004adc <HAL_DMA_IRQHandler+0x1e0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d013      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a1c      	ldr	r2, [pc, #112]	; (8004ae0 <HAL_DMA_IRQHandler+0x1e4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00e      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a1b      	ldr	r2, [pc, #108]	; (8004ae4 <HAL_DMA_IRQHandler+0x1e8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d009      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a19      	ldr	r2, [pc, #100]	; (8004ae8 <HAL_DMA_IRQHandler+0x1ec>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d004      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a18      	ldr	r2, [pc, #96]	; (8004aec <HAL_DMA_IRQHandler+0x1f0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d12f      	bne.n	8004af0 <HAL_DMA_IRQHandler+0x1f4>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bf14      	ite	ne
 8004a9e:	2301      	movne	r3, #1
 8004aa0:	2300      	moveq	r3, #0
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	e02e      	b.n	8004b04 <HAL_DMA_IRQHandler+0x208>
 8004aa6:	bf00      	nop
 8004aa8:	20000000 	.word	0x20000000
 8004aac:	1b4e81b5 	.word	0x1b4e81b5
 8004ab0:	40020010 	.word	0x40020010
 8004ab4:	40020028 	.word	0x40020028
 8004ab8:	40020040 	.word	0x40020040
 8004abc:	40020058 	.word	0x40020058
 8004ac0:	40020070 	.word	0x40020070
 8004ac4:	40020088 	.word	0x40020088
 8004ac8:	400200a0 	.word	0x400200a0
 8004acc:	400200b8 	.word	0x400200b8
 8004ad0:	40020410 	.word	0x40020410
 8004ad4:	40020428 	.word	0x40020428
 8004ad8:	40020440 	.word	0x40020440
 8004adc:	40020458 	.word	0x40020458
 8004ae0:	40020470 	.word	0x40020470
 8004ae4:	40020488 	.word	0x40020488
 8004ae8:	400204a0 	.word	0x400204a0
 8004aec:	400204b8 	.word	0x400204b8
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	bf14      	ite	ne
 8004afe:	2301      	movne	r3, #1
 8004b00:	2300      	moveq	r3, #0
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d015      	beq.n	8004b34 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0204 	bic.w	r2, r2, #4
 8004b16:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b1c:	f003 031f 	and.w	r3, r3, #31
 8004b20:	2208      	movs	r2, #8
 8004b22:	409a      	lsls	r2, r3
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2c:	f043 0201 	orr.w	r2, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b38:	f003 031f 	and.w	r3, r3, #31
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d06e      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a69      	ldr	r2, [pc, #420]	; (8004cf4 <HAL_DMA_IRQHandler+0x3f8>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d04a      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a67      	ldr	r2, [pc, #412]	; (8004cf8 <HAL_DMA_IRQHandler+0x3fc>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d045      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a66      	ldr	r2, [pc, #408]	; (8004cfc <HAL_DMA_IRQHandler+0x400>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d040      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a64      	ldr	r2, [pc, #400]	; (8004d00 <HAL_DMA_IRQHandler+0x404>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d03b      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a63      	ldr	r2, [pc, #396]	; (8004d04 <HAL_DMA_IRQHandler+0x408>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d036      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a61      	ldr	r2, [pc, #388]	; (8004d08 <HAL_DMA_IRQHandler+0x40c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d031      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a60      	ldr	r2, [pc, #384]	; (8004d0c <HAL_DMA_IRQHandler+0x410>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d02c      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a5e      	ldr	r2, [pc, #376]	; (8004d10 <HAL_DMA_IRQHandler+0x414>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d027      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a5d      	ldr	r2, [pc, #372]	; (8004d14 <HAL_DMA_IRQHandler+0x418>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d022      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a5b      	ldr	r2, [pc, #364]	; (8004d18 <HAL_DMA_IRQHandler+0x41c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d01d      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a5a      	ldr	r2, [pc, #360]	; (8004d1c <HAL_DMA_IRQHandler+0x420>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d018      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a58      	ldr	r2, [pc, #352]	; (8004d20 <HAL_DMA_IRQHandler+0x424>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d013      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a57      	ldr	r2, [pc, #348]	; (8004d24 <HAL_DMA_IRQHandler+0x428>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00e      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a55      	ldr	r2, [pc, #340]	; (8004d28 <HAL_DMA_IRQHandler+0x42c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d009      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a54      	ldr	r2, [pc, #336]	; (8004d2c <HAL_DMA_IRQHandler+0x430>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d004      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a52      	ldr	r2, [pc, #328]	; (8004d30 <HAL_DMA_IRQHandler+0x434>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d10a      	bne.n	8004c00 <HAL_DMA_IRQHandler+0x304>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	bf14      	ite	ne
 8004bf8:	2301      	movne	r3, #1
 8004bfa:	2300      	moveq	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	e003      	b.n	8004c08 <HAL_DMA_IRQHandler+0x30c>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2300      	movs	r3, #0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00d      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c10:	f003 031f 	and.w	r3, r3, #31
 8004c14:	2201      	movs	r2, #1
 8004c16:	409a      	lsls	r2, r3
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c20:	f043 0202 	orr.w	r2, r3, #2
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2c:	f003 031f 	and.w	r3, r3, #31
 8004c30:	2204      	movs	r2, #4
 8004c32:	409a      	lsls	r2, r3
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	4013      	ands	r3, r2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 808f 	beq.w	8004d5c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a2c      	ldr	r2, [pc, #176]	; (8004cf4 <HAL_DMA_IRQHandler+0x3f8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d04a      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a2a      	ldr	r2, [pc, #168]	; (8004cf8 <HAL_DMA_IRQHandler+0x3fc>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d045      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a29      	ldr	r2, [pc, #164]	; (8004cfc <HAL_DMA_IRQHandler+0x400>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d040      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a27      	ldr	r2, [pc, #156]	; (8004d00 <HAL_DMA_IRQHandler+0x404>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d03b      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a26      	ldr	r2, [pc, #152]	; (8004d04 <HAL_DMA_IRQHandler+0x408>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d036      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a24      	ldr	r2, [pc, #144]	; (8004d08 <HAL_DMA_IRQHandler+0x40c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d031      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a23      	ldr	r2, [pc, #140]	; (8004d0c <HAL_DMA_IRQHandler+0x410>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d02c      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a21      	ldr	r2, [pc, #132]	; (8004d10 <HAL_DMA_IRQHandler+0x414>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d027      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a20      	ldr	r2, [pc, #128]	; (8004d14 <HAL_DMA_IRQHandler+0x418>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d022      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1e      	ldr	r2, [pc, #120]	; (8004d18 <HAL_DMA_IRQHandler+0x41c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d01d      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a1d      	ldr	r2, [pc, #116]	; (8004d1c <HAL_DMA_IRQHandler+0x420>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d018      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1b      	ldr	r2, [pc, #108]	; (8004d20 <HAL_DMA_IRQHandler+0x424>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a1a      	ldr	r2, [pc, #104]	; (8004d24 <HAL_DMA_IRQHandler+0x428>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00e      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a18      	ldr	r2, [pc, #96]	; (8004d28 <HAL_DMA_IRQHandler+0x42c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d009      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a17      	ldr	r2, [pc, #92]	; (8004d2c <HAL_DMA_IRQHandler+0x430>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d004      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a15      	ldr	r2, [pc, #84]	; (8004d30 <HAL_DMA_IRQHandler+0x434>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d12a      	bne.n	8004d34 <HAL_DMA_IRQHandler+0x438>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	bf14      	ite	ne
 8004cec:	2301      	movne	r3, #1
 8004cee:	2300      	moveq	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	e023      	b.n	8004d3c <HAL_DMA_IRQHandler+0x440>
 8004cf4:	40020010 	.word	0x40020010
 8004cf8:	40020028 	.word	0x40020028
 8004cfc:	40020040 	.word	0x40020040
 8004d00:	40020058 	.word	0x40020058
 8004d04:	40020070 	.word	0x40020070
 8004d08:	40020088 	.word	0x40020088
 8004d0c:	400200a0 	.word	0x400200a0
 8004d10:	400200b8 	.word	0x400200b8
 8004d14:	40020410 	.word	0x40020410
 8004d18:	40020428 	.word	0x40020428
 8004d1c:	40020440 	.word	0x40020440
 8004d20:	40020458 	.word	0x40020458
 8004d24:	40020470 	.word	0x40020470
 8004d28:	40020488 	.word	0x40020488
 8004d2c:	400204a0 	.word	0x400204a0
 8004d30:	400204b8 	.word	0x400204b8
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00d      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d44:	f003 031f 	and.w	r3, r3, #31
 8004d48:	2204      	movs	r2, #4
 8004d4a:	409a      	lsls	r2, r3
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d54:	f043 0204 	orr.w	r2, r3, #4
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d60:	f003 031f 	and.w	r3, r3, #31
 8004d64:	2210      	movs	r2, #16
 8004d66:	409a      	lsls	r2, r3
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 80a6 	beq.w	8004ebe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a85      	ldr	r2, [pc, #532]	; (8004f8c <HAL_DMA_IRQHandler+0x690>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d04a      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a83      	ldr	r2, [pc, #524]	; (8004f90 <HAL_DMA_IRQHandler+0x694>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d045      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a82      	ldr	r2, [pc, #520]	; (8004f94 <HAL_DMA_IRQHandler+0x698>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d040      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a80      	ldr	r2, [pc, #512]	; (8004f98 <HAL_DMA_IRQHandler+0x69c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d03b      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a7f      	ldr	r2, [pc, #508]	; (8004f9c <HAL_DMA_IRQHandler+0x6a0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d036      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a7d      	ldr	r2, [pc, #500]	; (8004fa0 <HAL_DMA_IRQHandler+0x6a4>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d031      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a7c      	ldr	r2, [pc, #496]	; (8004fa4 <HAL_DMA_IRQHandler+0x6a8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d02c      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a7a      	ldr	r2, [pc, #488]	; (8004fa8 <HAL_DMA_IRQHandler+0x6ac>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d027      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a79      	ldr	r2, [pc, #484]	; (8004fac <HAL_DMA_IRQHandler+0x6b0>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d022      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a77      	ldr	r2, [pc, #476]	; (8004fb0 <HAL_DMA_IRQHandler+0x6b4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d01d      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a76      	ldr	r2, [pc, #472]	; (8004fb4 <HAL_DMA_IRQHandler+0x6b8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d018      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a74      	ldr	r2, [pc, #464]	; (8004fb8 <HAL_DMA_IRQHandler+0x6bc>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d013      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a73      	ldr	r2, [pc, #460]	; (8004fbc <HAL_DMA_IRQHandler+0x6c0>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00e      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a71      	ldr	r2, [pc, #452]	; (8004fc0 <HAL_DMA_IRQHandler+0x6c4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d009      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a70      	ldr	r2, [pc, #448]	; (8004fc4 <HAL_DMA_IRQHandler+0x6c8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d004      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a6e      	ldr	r2, [pc, #440]	; (8004fc8 <HAL_DMA_IRQHandler+0x6cc>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d10a      	bne.n	8004e28 <HAL_DMA_IRQHandler+0x52c>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0308 	and.w	r3, r3, #8
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	bf14      	ite	ne
 8004e20:	2301      	movne	r3, #1
 8004e22:	2300      	moveq	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	e009      	b.n	8004e3c <HAL_DMA_IRQHandler+0x540>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0304 	and.w	r3, r3, #4
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	bf14      	ite	ne
 8004e36:	2301      	movne	r3, #1
 8004e38:	2300      	moveq	r3, #0
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d03e      	beq.n	8004ebe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e44:	f003 031f 	and.w	r3, r3, #31
 8004e48:	2210      	movs	r2, #16
 8004e4a:	409a      	lsls	r2, r3
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d018      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d108      	bne.n	8004e7e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d024      	beq.n	8004ebe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	4798      	blx	r3
 8004e7c:	e01f      	b.n	8004ebe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d01b      	beq.n	8004ebe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	4798      	blx	r3
 8004e8e:	e016      	b.n	8004ebe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d107      	bne.n	8004eae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0208 	bic.w	r2, r2, #8
 8004eac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec2:	f003 031f 	and.w	r3, r3, #31
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	409a      	lsls	r2, r3
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 8110 	beq.w	80050f4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a2c      	ldr	r2, [pc, #176]	; (8004f8c <HAL_DMA_IRQHandler+0x690>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d04a      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a2b      	ldr	r2, [pc, #172]	; (8004f90 <HAL_DMA_IRQHandler+0x694>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d045      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a29      	ldr	r2, [pc, #164]	; (8004f94 <HAL_DMA_IRQHandler+0x698>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d040      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a28      	ldr	r2, [pc, #160]	; (8004f98 <HAL_DMA_IRQHandler+0x69c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d03b      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a26      	ldr	r2, [pc, #152]	; (8004f9c <HAL_DMA_IRQHandler+0x6a0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d036      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a25      	ldr	r2, [pc, #148]	; (8004fa0 <HAL_DMA_IRQHandler+0x6a4>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d031      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a23      	ldr	r2, [pc, #140]	; (8004fa4 <HAL_DMA_IRQHandler+0x6a8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d02c      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a22      	ldr	r2, [pc, #136]	; (8004fa8 <HAL_DMA_IRQHandler+0x6ac>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d027      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a20      	ldr	r2, [pc, #128]	; (8004fac <HAL_DMA_IRQHandler+0x6b0>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d022      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a1f      	ldr	r2, [pc, #124]	; (8004fb0 <HAL_DMA_IRQHandler+0x6b4>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d01d      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a1d      	ldr	r2, [pc, #116]	; (8004fb4 <HAL_DMA_IRQHandler+0x6b8>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d018      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a1c      	ldr	r2, [pc, #112]	; (8004fb8 <HAL_DMA_IRQHandler+0x6bc>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d013      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a1a      	ldr	r2, [pc, #104]	; (8004fbc <HAL_DMA_IRQHandler+0x6c0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00e      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a19      	ldr	r2, [pc, #100]	; (8004fc0 <HAL_DMA_IRQHandler+0x6c4>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d009      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a17      	ldr	r2, [pc, #92]	; (8004fc4 <HAL_DMA_IRQHandler+0x6c8>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d004      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a16      	ldr	r2, [pc, #88]	; (8004fc8 <HAL_DMA_IRQHandler+0x6cc>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d12b      	bne.n	8004fcc <HAL_DMA_IRQHandler+0x6d0>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0310 	and.w	r3, r3, #16
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	bf14      	ite	ne
 8004f82:	2301      	movne	r3, #1
 8004f84:	2300      	moveq	r3, #0
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	e02a      	b.n	8004fe0 <HAL_DMA_IRQHandler+0x6e4>
 8004f8a:	bf00      	nop
 8004f8c:	40020010 	.word	0x40020010
 8004f90:	40020028 	.word	0x40020028
 8004f94:	40020040 	.word	0x40020040
 8004f98:	40020058 	.word	0x40020058
 8004f9c:	40020070 	.word	0x40020070
 8004fa0:	40020088 	.word	0x40020088
 8004fa4:	400200a0 	.word	0x400200a0
 8004fa8:	400200b8 	.word	0x400200b8
 8004fac:	40020410 	.word	0x40020410
 8004fb0:	40020428 	.word	0x40020428
 8004fb4:	40020440 	.word	0x40020440
 8004fb8:	40020458 	.word	0x40020458
 8004fbc:	40020470 	.word	0x40020470
 8004fc0:	40020488 	.word	0x40020488
 8004fc4:	400204a0 	.word	0x400204a0
 8004fc8:	400204b8 	.word	0x400204b8
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	bf14      	ite	ne
 8004fda:	2301      	movne	r3, #1
 8004fdc:	2300      	moveq	r3, #0
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 8087 	beq.w	80050f4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fea:	f003 031f 	and.w	r3, r3, #31
 8004fee:	2220      	movs	r2, #32
 8004ff0:	409a      	lsls	r2, r3
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d139      	bne.n	8005076 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0216 	bic.w	r2, r2, #22
 8005010:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	695a      	ldr	r2, [r3, #20]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005020:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	d103      	bne.n	8005032 <HAL_DMA_IRQHandler+0x736>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800502e:	2b00      	cmp	r3, #0
 8005030:	d007      	beq.n	8005042 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0208 	bic.w	r2, r2, #8
 8005040:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005046:	f003 031f 	and.w	r3, r3, #31
 800504a:	223f      	movs	r2, #63	; 0x3f
 800504c:	409a      	lsls	r2, r3
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 834a 	beq.w	8005700 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	4798      	blx	r3
          }
          return;
 8005074:	e344      	b.n	8005700 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d018      	beq.n	80050b6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d108      	bne.n	80050a4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005096:	2b00      	cmp	r3, #0
 8005098:	d02c      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	4798      	blx	r3
 80050a2:	e027      	b.n	80050f4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d023      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	4798      	blx	r3
 80050b4:	e01e      	b.n	80050f4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10f      	bne.n	80050e4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0210 	bic.w	r2, r2, #16
 80050d2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 8306 	beq.w	800570a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 8088 	beq.w	800521c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2204      	movs	r2, #4
 8005110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a7a      	ldr	r2, [pc, #488]	; (8005304 <HAL_DMA_IRQHandler+0xa08>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d04a      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a79      	ldr	r2, [pc, #484]	; (8005308 <HAL_DMA_IRQHandler+0xa0c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d045      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a77      	ldr	r2, [pc, #476]	; (800530c <HAL_DMA_IRQHandler+0xa10>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d040      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a76      	ldr	r2, [pc, #472]	; (8005310 <HAL_DMA_IRQHandler+0xa14>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d03b      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a74      	ldr	r2, [pc, #464]	; (8005314 <HAL_DMA_IRQHandler+0xa18>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d036      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a73      	ldr	r2, [pc, #460]	; (8005318 <HAL_DMA_IRQHandler+0xa1c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d031      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a71      	ldr	r2, [pc, #452]	; (800531c <HAL_DMA_IRQHandler+0xa20>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d02c      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a70      	ldr	r2, [pc, #448]	; (8005320 <HAL_DMA_IRQHandler+0xa24>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d027      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a6e      	ldr	r2, [pc, #440]	; (8005324 <HAL_DMA_IRQHandler+0xa28>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d022      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a6d      	ldr	r2, [pc, #436]	; (8005328 <HAL_DMA_IRQHandler+0xa2c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d01d      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a6b      	ldr	r2, [pc, #428]	; (800532c <HAL_DMA_IRQHandler+0xa30>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d018      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a6a      	ldr	r2, [pc, #424]	; (8005330 <HAL_DMA_IRQHandler+0xa34>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d013      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a68      	ldr	r2, [pc, #416]	; (8005334 <HAL_DMA_IRQHandler+0xa38>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00e      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a67      	ldr	r2, [pc, #412]	; (8005338 <HAL_DMA_IRQHandler+0xa3c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d009      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a65      	ldr	r2, [pc, #404]	; (800533c <HAL_DMA_IRQHandler+0xa40>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d004      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a64      	ldr	r2, [pc, #400]	; (8005340 <HAL_DMA_IRQHandler+0xa44>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d108      	bne.n	80051c6 <HAL_DMA_IRQHandler+0x8ca>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0201 	bic.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	e007      	b.n	80051d6 <HAL_DMA_IRQHandler+0x8da>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 0201 	bic.w	r2, r2, #1
 80051d4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	3301      	adds	r3, #1
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051de:	429a      	cmp	r2, r3
 80051e0:	d307      	bcc.n	80051f2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1f2      	bne.n	80051d6 <HAL_DMA_IRQHandler+0x8da>
 80051f0:	e000      	b.n	80051f4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80051f2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d004      	beq.n	8005214 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2203      	movs	r2, #3
 800520e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005212:	e003      	b.n	800521c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 8272 	beq.w	800570a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	4798      	blx	r3
 800522e:	e26c      	b.n	800570a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a43      	ldr	r2, [pc, #268]	; (8005344 <HAL_DMA_IRQHandler+0xa48>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d022      	beq.n	8005280 <HAL_DMA_IRQHandler+0x984>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a42      	ldr	r2, [pc, #264]	; (8005348 <HAL_DMA_IRQHandler+0xa4c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d01d      	beq.n	8005280 <HAL_DMA_IRQHandler+0x984>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a40      	ldr	r2, [pc, #256]	; (800534c <HAL_DMA_IRQHandler+0xa50>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d018      	beq.n	8005280 <HAL_DMA_IRQHandler+0x984>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a3f      	ldr	r2, [pc, #252]	; (8005350 <HAL_DMA_IRQHandler+0xa54>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d013      	beq.n	8005280 <HAL_DMA_IRQHandler+0x984>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a3d      	ldr	r2, [pc, #244]	; (8005354 <HAL_DMA_IRQHandler+0xa58>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00e      	beq.n	8005280 <HAL_DMA_IRQHandler+0x984>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a3c      	ldr	r2, [pc, #240]	; (8005358 <HAL_DMA_IRQHandler+0xa5c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d009      	beq.n	8005280 <HAL_DMA_IRQHandler+0x984>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a3a      	ldr	r2, [pc, #232]	; (800535c <HAL_DMA_IRQHandler+0xa60>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d004      	beq.n	8005280 <HAL_DMA_IRQHandler+0x984>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a39      	ldr	r2, [pc, #228]	; (8005360 <HAL_DMA_IRQHandler+0xa64>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d101      	bne.n	8005284 <HAL_DMA_IRQHandler+0x988>
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <HAL_DMA_IRQHandler+0x98a>
 8005284:	2300      	movs	r3, #0
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 823f 	beq.w	800570a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005298:	f003 031f 	and.w	r3, r3, #31
 800529c:	2204      	movs	r2, #4
 800529e:	409a      	lsls	r2, r3
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	4013      	ands	r3, r2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 80cd 	beq.w	8005444 <HAL_DMA_IRQHandler+0xb48>
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 80c7 	beq.w	8005444 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ba:	f003 031f 	and.w	r3, r3, #31
 80052be:	2204      	movs	r2, #4
 80052c0:	409a      	lsls	r2, r3
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d049      	beq.n	8005364 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d109      	bne.n	80052ee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 8210 	beq.w	8005704 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052ec:	e20a      	b.n	8005704 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 8206 	beq.w	8005704 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005300:	e200      	b.n	8005704 <HAL_DMA_IRQHandler+0xe08>
 8005302:	bf00      	nop
 8005304:	40020010 	.word	0x40020010
 8005308:	40020028 	.word	0x40020028
 800530c:	40020040 	.word	0x40020040
 8005310:	40020058 	.word	0x40020058
 8005314:	40020070 	.word	0x40020070
 8005318:	40020088 	.word	0x40020088
 800531c:	400200a0 	.word	0x400200a0
 8005320:	400200b8 	.word	0x400200b8
 8005324:	40020410 	.word	0x40020410
 8005328:	40020428 	.word	0x40020428
 800532c:	40020440 	.word	0x40020440
 8005330:	40020458 	.word	0x40020458
 8005334:	40020470 	.word	0x40020470
 8005338:	40020488 	.word	0x40020488
 800533c:	400204a0 	.word	0x400204a0
 8005340:	400204b8 	.word	0x400204b8
 8005344:	58025408 	.word	0x58025408
 8005348:	5802541c 	.word	0x5802541c
 800534c:	58025430 	.word	0x58025430
 8005350:	58025444 	.word	0x58025444
 8005354:	58025458 	.word	0x58025458
 8005358:	5802546c 	.word	0x5802546c
 800535c:	58025480 	.word	0x58025480
 8005360:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b00      	cmp	r3, #0
 800536c:	d160      	bne.n	8005430 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a8c      	ldr	r2, [pc, #560]	; (80055a4 <HAL_DMA_IRQHandler+0xca8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d04a      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a8a      	ldr	r2, [pc, #552]	; (80055a8 <HAL_DMA_IRQHandler+0xcac>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d045      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a89      	ldr	r2, [pc, #548]	; (80055ac <HAL_DMA_IRQHandler+0xcb0>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d040      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a87      	ldr	r2, [pc, #540]	; (80055b0 <HAL_DMA_IRQHandler+0xcb4>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d03b      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a86      	ldr	r2, [pc, #536]	; (80055b4 <HAL_DMA_IRQHandler+0xcb8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d036      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a84      	ldr	r2, [pc, #528]	; (80055b8 <HAL_DMA_IRQHandler+0xcbc>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d031      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a83      	ldr	r2, [pc, #524]	; (80055bc <HAL_DMA_IRQHandler+0xcc0>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d02c      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a81      	ldr	r2, [pc, #516]	; (80055c0 <HAL_DMA_IRQHandler+0xcc4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d027      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a80      	ldr	r2, [pc, #512]	; (80055c4 <HAL_DMA_IRQHandler+0xcc8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d022      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a7e      	ldr	r2, [pc, #504]	; (80055c8 <HAL_DMA_IRQHandler+0xccc>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d01d      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a7d      	ldr	r2, [pc, #500]	; (80055cc <HAL_DMA_IRQHandler+0xcd0>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d018      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a7b      	ldr	r2, [pc, #492]	; (80055d0 <HAL_DMA_IRQHandler+0xcd4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d013      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a7a      	ldr	r2, [pc, #488]	; (80055d4 <HAL_DMA_IRQHandler+0xcd8>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00e      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a78      	ldr	r2, [pc, #480]	; (80055d8 <HAL_DMA_IRQHandler+0xcdc>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d009      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a77      	ldr	r2, [pc, #476]	; (80055dc <HAL_DMA_IRQHandler+0xce0>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d004      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a75      	ldr	r2, [pc, #468]	; (80055e0 <HAL_DMA_IRQHandler+0xce4>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d108      	bne.n	8005420 <HAL_DMA_IRQHandler+0xb24>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0208 	bic.w	r2, r2, #8
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	e007      	b.n	8005430 <HAL_DMA_IRQHandler+0xb34>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0204 	bic.w	r2, r2, #4
 800542e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 8165 	beq.w	8005704 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005442:	e15f      	b.n	8005704 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005448:	f003 031f 	and.w	r3, r3, #31
 800544c:	2202      	movs	r2, #2
 800544e:	409a      	lsls	r2, r3
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	4013      	ands	r3, r2
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 80c5 	beq.w	80055e4 <HAL_DMA_IRQHandler+0xce8>
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 80bf 	beq.w	80055e4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546a:	f003 031f 	and.w	r3, r3, #31
 800546e:	2202      	movs	r2, #2
 8005470:	409a      	lsls	r2, r3
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d018      	beq.n	80054b2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d109      	bne.n	800549e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 813a 	beq.w	8005708 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800549c:	e134      	b.n	8005708 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 8130 	beq.w	8005708 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054b0:	e12a      	b.n	8005708 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f003 0320 	and.w	r3, r3, #32
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d168      	bne.n	800558e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a38      	ldr	r2, [pc, #224]	; (80055a4 <HAL_DMA_IRQHandler+0xca8>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d04a      	beq.n	800555c <HAL_DMA_IRQHandler+0xc60>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a37      	ldr	r2, [pc, #220]	; (80055a8 <HAL_DMA_IRQHandler+0xcac>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d045      	beq.n	800555c <HAL_DMA_IRQHandler+0xc60>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a35      	ldr	r2, [pc, #212]	; (80055ac <HAL_DMA_IRQHandler+0xcb0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d040      	beq.n	800555c <HAL_DMA_IRQHandler+0xc60>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a34      	ldr	r2, [pc, #208]	; (80055b0 <HAL_DMA_IRQHandler+0xcb4>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d03b      	beq.n	800555c <HAL_DMA_IRQHandler+0xc60>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a32      	ldr	r2, [pc, #200]	; (80055b4 <HAL_DMA_IRQHandler+0xcb8>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d036      	beq.n	800555c <HAL_DMA_IRQHandler+0xc60>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a31      	ldr	r2, [pc, #196]	; (80055b8 <HAL_DMA_IRQHandler+0xcbc>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d031      	beq.n	800555c <HAL_DMA_IRQHandler+0xc60>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a2f      	ldr	r2, [pc, #188]	; (80055bc <HAL_DMA_IRQHandler+0xcc0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d02c      	beq.n	800555c <HAL_DMA_IRQHandler+0xc60>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a2e      	ldr	r2, [pc, #184]	; (80055c0 <HAL_DMA_IRQHandler+0xcc4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d027      	beq.n	800555c <HAL_DMA_IRQHandler+0xc60>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a2c      	ldr	r2, [pc, #176]	; (80055c4 <HAL_DMA_IRQHandler+0xcc8>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d022      	beq.n	800555c <HAL_DMA_IRQHandler+0xc60>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a2b      	ldr	r2, [pc, #172]	; (80055c8 <HAL_DMA_IRQHandler+0xccc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d01d      	beq.n	800555c <HAL_DMA_IRQHandler+0xc60>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a29      	ldr	r2, [pc, #164]	; (80055cc <HAL_DMA_IRQHandler+0xcd0>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d018      	beq.n	800555c <HAL_DMA_IRQHandler+0xc60>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a28      	ldr	r2, [pc, #160]	; (80055d0 <HAL_DMA_IRQHandler+0xcd4>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d013      	beq.n	800555c <HAL_DMA_IRQHandler+0xc60>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a26      	ldr	r2, [pc, #152]	; (80055d4 <HAL_DMA_IRQHandler+0xcd8>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d00e      	beq.n	800555c <HAL_DMA_IRQHandler+0xc60>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a25      	ldr	r2, [pc, #148]	; (80055d8 <HAL_DMA_IRQHandler+0xcdc>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d009      	beq.n	800555c <HAL_DMA_IRQHandler+0xc60>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a23      	ldr	r2, [pc, #140]	; (80055dc <HAL_DMA_IRQHandler+0xce0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d004      	beq.n	800555c <HAL_DMA_IRQHandler+0xc60>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a22      	ldr	r2, [pc, #136]	; (80055e0 <HAL_DMA_IRQHandler+0xce4>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d108      	bne.n	800556e <HAL_DMA_IRQHandler+0xc72>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0214 	bic.w	r2, r2, #20
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	e007      	b.n	800557e <HAL_DMA_IRQHandler+0xc82>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 020a 	bic.w	r2, r2, #10
 800557c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 80b8 	beq.w	8005708 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055a0:	e0b2      	b.n	8005708 <HAL_DMA_IRQHandler+0xe0c>
 80055a2:	bf00      	nop
 80055a4:	40020010 	.word	0x40020010
 80055a8:	40020028 	.word	0x40020028
 80055ac:	40020040 	.word	0x40020040
 80055b0:	40020058 	.word	0x40020058
 80055b4:	40020070 	.word	0x40020070
 80055b8:	40020088 	.word	0x40020088
 80055bc:	400200a0 	.word	0x400200a0
 80055c0:	400200b8 	.word	0x400200b8
 80055c4:	40020410 	.word	0x40020410
 80055c8:	40020428 	.word	0x40020428
 80055cc:	40020440 	.word	0x40020440
 80055d0:	40020458 	.word	0x40020458
 80055d4:	40020470 	.word	0x40020470
 80055d8:	40020488 	.word	0x40020488
 80055dc:	400204a0 	.word	0x400204a0
 80055e0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e8:	f003 031f 	and.w	r3, r3, #31
 80055ec:	2208      	movs	r2, #8
 80055ee:	409a      	lsls	r2, r3
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	4013      	ands	r3, r2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 8088 	beq.w	800570a <HAL_DMA_IRQHandler+0xe0e>
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f003 0308 	and.w	r3, r3, #8
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 8082 	beq.w	800570a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a41      	ldr	r2, [pc, #260]	; (8005710 <HAL_DMA_IRQHandler+0xe14>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d04a      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a3f      	ldr	r2, [pc, #252]	; (8005714 <HAL_DMA_IRQHandler+0xe18>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d045      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a3e      	ldr	r2, [pc, #248]	; (8005718 <HAL_DMA_IRQHandler+0xe1c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d040      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a3c      	ldr	r2, [pc, #240]	; (800571c <HAL_DMA_IRQHandler+0xe20>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d03b      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a3b      	ldr	r2, [pc, #236]	; (8005720 <HAL_DMA_IRQHandler+0xe24>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d036      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a39      	ldr	r2, [pc, #228]	; (8005724 <HAL_DMA_IRQHandler+0xe28>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d031      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a38      	ldr	r2, [pc, #224]	; (8005728 <HAL_DMA_IRQHandler+0xe2c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d02c      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a36      	ldr	r2, [pc, #216]	; (800572c <HAL_DMA_IRQHandler+0xe30>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d027      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a35      	ldr	r2, [pc, #212]	; (8005730 <HAL_DMA_IRQHandler+0xe34>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d022      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a33      	ldr	r2, [pc, #204]	; (8005734 <HAL_DMA_IRQHandler+0xe38>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d01d      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a32      	ldr	r2, [pc, #200]	; (8005738 <HAL_DMA_IRQHandler+0xe3c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d018      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a30      	ldr	r2, [pc, #192]	; (800573c <HAL_DMA_IRQHandler+0xe40>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d013      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a2f      	ldr	r2, [pc, #188]	; (8005740 <HAL_DMA_IRQHandler+0xe44>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00e      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a2d      	ldr	r2, [pc, #180]	; (8005744 <HAL_DMA_IRQHandler+0xe48>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d009      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a2c      	ldr	r2, [pc, #176]	; (8005748 <HAL_DMA_IRQHandler+0xe4c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d004      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a2a      	ldr	r2, [pc, #168]	; (800574c <HAL_DMA_IRQHandler+0xe50>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d108      	bne.n	80056b8 <HAL_DMA_IRQHandler+0xdbc>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 021c 	bic.w	r2, r2, #28
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	e007      	b.n	80056c8 <HAL_DMA_IRQHandler+0xdcc>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 020e 	bic.w	r2, r2, #14
 80056c6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056cc:	f003 031f 	and.w	r3, r3, #31
 80056d0:	2201      	movs	r2, #1
 80056d2:	409a      	lsls	r2, r3
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d009      	beq.n	800570a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	4798      	blx	r3
 80056fe:	e004      	b.n	800570a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005700:	bf00      	nop
 8005702:	e002      	b.n	800570a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005704:	bf00      	nop
 8005706:	e000      	b.n	800570a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005708:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800570a:	3728      	adds	r7, #40	; 0x28
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	40020010 	.word	0x40020010
 8005714:	40020028 	.word	0x40020028
 8005718:	40020040 	.word	0x40020040
 800571c:	40020058 	.word	0x40020058
 8005720:	40020070 	.word	0x40020070
 8005724:	40020088 	.word	0x40020088
 8005728:	400200a0 	.word	0x400200a0
 800572c:	400200b8 	.word	0x400200b8
 8005730:	40020410 	.word	0x40020410
 8005734:	40020428 	.word	0x40020428
 8005738:	40020440 	.word	0x40020440
 800573c:	40020458 	.word	0x40020458
 8005740:	40020470 	.word	0x40020470
 8005744:	40020488 	.word	0x40020488
 8005748:	400204a0 	.word	0x400204a0
 800574c:	400204b8 	.word	0x400204b8

08005750 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800575c:	4618      	mov	r0, r3
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800577a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005780:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a84      	ldr	r2, [pc, #528]	; (8005998 <DMA_SetConfig+0x230>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d072      	beq.n	8005872 <DMA_SetConfig+0x10a>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a82      	ldr	r2, [pc, #520]	; (800599c <DMA_SetConfig+0x234>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d06d      	beq.n	8005872 <DMA_SetConfig+0x10a>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a81      	ldr	r2, [pc, #516]	; (80059a0 <DMA_SetConfig+0x238>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d068      	beq.n	8005872 <DMA_SetConfig+0x10a>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a7f      	ldr	r2, [pc, #508]	; (80059a4 <DMA_SetConfig+0x23c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d063      	beq.n	8005872 <DMA_SetConfig+0x10a>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a7e      	ldr	r2, [pc, #504]	; (80059a8 <DMA_SetConfig+0x240>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d05e      	beq.n	8005872 <DMA_SetConfig+0x10a>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a7c      	ldr	r2, [pc, #496]	; (80059ac <DMA_SetConfig+0x244>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d059      	beq.n	8005872 <DMA_SetConfig+0x10a>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a7b      	ldr	r2, [pc, #492]	; (80059b0 <DMA_SetConfig+0x248>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d054      	beq.n	8005872 <DMA_SetConfig+0x10a>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a79      	ldr	r2, [pc, #484]	; (80059b4 <DMA_SetConfig+0x24c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d04f      	beq.n	8005872 <DMA_SetConfig+0x10a>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a78      	ldr	r2, [pc, #480]	; (80059b8 <DMA_SetConfig+0x250>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d04a      	beq.n	8005872 <DMA_SetConfig+0x10a>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a76      	ldr	r2, [pc, #472]	; (80059bc <DMA_SetConfig+0x254>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d045      	beq.n	8005872 <DMA_SetConfig+0x10a>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a75      	ldr	r2, [pc, #468]	; (80059c0 <DMA_SetConfig+0x258>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d040      	beq.n	8005872 <DMA_SetConfig+0x10a>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a73      	ldr	r2, [pc, #460]	; (80059c4 <DMA_SetConfig+0x25c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d03b      	beq.n	8005872 <DMA_SetConfig+0x10a>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a72      	ldr	r2, [pc, #456]	; (80059c8 <DMA_SetConfig+0x260>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d036      	beq.n	8005872 <DMA_SetConfig+0x10a>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a70      	ldr	r2, [pc, #448]	; (80059cc <DMA_SetConfig+0x264>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d031      	beq.n	8005872 <DMA_SetConfig+0x10a>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a6f      	ldr	r2, [pc, #444]	; (80059d0 <DMA_SetConfig+0x268>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d02c      	beq.n	8005872 <DMA_SetConfig+0x10a>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a6d      	ldr	r2, [pc, #436]	; (80059d4 <DMA_SetConfig+0x26c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d027      	beq.n	8005872 <DMA_SetConfig+0x10a>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a6c      	ldr	r2, [pc, #432]	; (80059d8 <DMA_SetConfig+0x270>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d022      	beq.n	8005872 <DMA_SetConfig+0x10a>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a6a      	ldr	r2, [pc, #424]	; (80059dc <DMA_SetConfig+0x274>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d01d      	beq.n	8005872 <DMA_SetConfig+0x10a>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a69      	ldr	r2, [pc, #420]	; (80059e0 <DMA_SetConfig+0x278>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d018      	beq.n	8005872 <DMA_SetConfig+0x10a>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a67      	ldr	r2, [pc, #412]	; (80059e4 <DMA_SetConfig+0x27c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d013      	beq.n	8005872 <DMA_SetConfig+0x10a>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a66      	ldr	r2, [pc, #408]	; (80059e8 <DMA_SetConfig+0x280>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d00e      	beq.n	8005872 <DMA_SetConfig+0x10a>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a64      	ldr	r2, [pc, #400]	; (80059ec <DMA_SetConfig+0x284>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d009      	beq.n	8005872 <DMA_SetConfig+0x10a>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a63      	ldr	r2, [pc, #396]	; (80059f0 <DMA_SetConfig+0x288>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d004      	beq.n	8005872 <DMA_SetConfig+0x10a>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a61      	ldr	r2, [pc, #388]	; (80059f4 <DMA_SetConfig+0x28c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d101      	bne.n	8005876 <DMA_SetConfig+0x10e>
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <DMA_SetConfig+0x110>
 8005876:	2300      	movs	r3, #0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00d      	beq.n	8005898 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005884:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800588a:	2b00      	cmp	r3, #0
 800588c:	d004      	beq.n	8005898 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005896:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a3e      	ldr	r2, [pc, #248]	; (8005998 <DMA_SetConfig+0x230>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d04a      	beq.n	8005938 <DMA_SetConfig+0x1d0>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a3d      	ldr	r2, [pc, #244]	; (800599c <DMA_SetConfig+0x234>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d045      	beq.n	8005938 <DMA_SetConfig+0x1d0>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a3b      	ldr	r2, [pc, #236]	; (80059a0 <DMA_SetConfig+0x238>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d040      	beq.n	8005938 <DMA_SetConfig+0x1d0>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a3a      	ldr	r2, [pc, #232]	; (80059a4 <DMA_SetConfig+0x23c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d03b      	beq.n	8005938 <DMA_SetConfig+0x1d0>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a38      	ldr	r2, [pc, #224]	; (80059a8 <DMA_SetConfig+0x240>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d036      	beq.n	8005938 <DMA_SetConfig+0x1d0>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a37      	ldr	r2, [pc, #220]	; (80059ac <DMA_SetConfig+0x244>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d031      	beq.n	8005938 <DMA_SetConfig+0x1d0>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a35      	ldr	r2, [pc, #212]	; (80059b0 <DMA_SetConfig+0x248>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d02c      	beq.n	8005938 <DMA_SetConfig+0x1d0>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a34      	ldr	r2, [pc, #208]	; (80059b4 <DMA_SetConfig+0x24c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d027      	beq.n	8005938 <DMA_SetConfig+0x1d0>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a32      	ldr	r2, [pc, #200]	; (80059b8 <DMA_SetConfig+0x250>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d022      	beq.n	8005938 <DMA_SetConfig+0x1d0>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a31      	ldr	r2, [pc, #196]	; (80059bc <DMA_SetConfig+0x254>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d01d      	beq.n	8005938 <DMA_SetConfig+0x1d0>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a2f      	ldr	r2, [pc, #188]	; (80059c0 <DMA_SetConfig+0x258>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d018      	beq.n	8005938 <DMA_SetConfig+0x1d0>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a2e      	ldr	r2, [pc, #184]	; (80059c4 <DMA_SetConfig+0x25c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d013      	beq.n	8005938 <DMA_SetConfig+0x1d0>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a2c      	ldr	r2, [pc, #176]	; (80059c8 <DMA_SetConfig+0x260>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d00e      	beq.n	8005938 <DMA_SetConfig+0x1d0>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a2b      	ldr	r2, [pc, #172]	; (80059cc <DMA_SetConfig+0x264>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d009      	beq.n	8005938 <DMA_SetConfig+0x1d0>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a29      	ldr	r2, [pc, #164]	; (80059d0 <DMA_SetConfig+0x268>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d004      	beq.n	8005938 <DMA_SetConfig+0x1d0>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a28      	ldr	r2, [pc, #160]	; (80059d4 <DMA_SetConfig+0x26c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d101      	bne.n	800593c <DMA_SetConfig+0x1d4>
 8005938:	2301      	movs	r3, #1
 800593a:	e000      	b.n	800593e <DMA_SetConfig+0x1d6>
 800593c:	2300      	movs	r3, #0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d05a      	beq.n	80059f8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005946:	f003 031f 	and.w	r3, r3, #31
 800594a:	223f      	movs	r2, #63	; 0x3f
 800594c:	409a      	lsls	r2, r3
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005960:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	2b40      	cmp	r3, #64	; 0x40
 8005970:	d108      	bne.n	8005984 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005982:	e087      	b.n	8005a94 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	60da      	str	r2, [r3, #12]
}
 8005994:	e07e      	b.n	8005a94 <DMA_SetConfig+0x32c>
 8005996:	bf00      	nop
 8005998:	40020010 	.word	0x40020010
 800599c:	40020028 	.word	0x40020028
 80059a0:	40020040 	.word	0x40020040
 80059a4:	40020058 	.word	0x40020058
 80059a8:	40020070 	.word	0x40020070
 80059ac:	40020088 	.word	0x40020088
 80059b0:	400200a0 	.word	0x400200a0
 80059b4:	400200b8 	.word	0x400200b8
 80059b8:	40020410 	.word	0x40020410
 80059bc:	40020428 	.word	0x40020428
 80059c0:	40020440 	.word	0x40020440
 80059c4:	40020458 	.word	0x40020458
 80059c8:	40020470 	.word	0x40020470
 80059cc:	40020488 	.word	0x40020488
 80059d0:	400204a0 	.word	0x400204a0
 80059d4:	400204b8 	.word	0x400204b8
 80059d8:	58025408 	.word	0x58025408
 80059dc:	5802541c 	.word	0x5802541c
 80059e0:	58025430 	.word	0x58025430
 80059e4:	58025444 	.word	0x58025444
 80059e8:	58025458 	.word	0x58025458
 80059ec:	5802546c 	.word	0x5802546c
 80059f0:	58025480 	.word	0x58025480
 80059f4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a28      	ldr	r2, [pc, #160]	; (8005aa0 <DMA_SetConfig+0x338>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d022      	beq.n	8005a48 <DMA_SetConfig+0x2e0>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a27      	ldr	r2, [pc, #156]	; (8005aa4 <DMA_SetConfig+0x33c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d01d      	beq.n	8005a48 <DMA_SetConfig+0x2e0>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a25      	ldr	r2, [pc, #148]	; (8005aa8 <DMA_SetConfig+0x340>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d018      	beq.n	8005a48 <DMA_SetConfig+0x2e0>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a24      	ldr	r2, [pc, #144]	; (8005aac <DMA_SetConfig+0x344>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d013      	beq.n	8005a48 <DMA_SetConfig+0x2e0>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a22      	ldr	r2, [pc, #136]	; (8005ab0 <DMA_SetConfig+0x348>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00e      	beq.n	8005a48 <DMA_SetConfig+0x2e0>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a21      	ldr	r2, [pc, #132]	; (8005ab4 <DMA_SetConfig+0x34c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d009      	beq.n	8005a48 <DMA_SetConfig+0x2e0>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a1f      	ldr	r2, [pc, #124]	; (8005ab8 <DMA_SetConfig+0x350>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d004      	beq.n	8005a48 <DMA_SetConfig+0x2e0>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a1e      	ldr	r2, [pc, #120]	; (8005abc <DMA_SetConfig+0x354>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d101      	bne.n	8005a4c <DMA_SetConfig+0x2e4>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e000      	b.n	8005a4e <DMA_SetConfig+0x2e6>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d020      	beq.n	8005a94 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a56:	f003 031f 	and.w	r3, r3, #31
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	409a      	lsls	r2, r3
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	2b40      	cmp	r3, #64	; 0x40
 8005a70:	d108      	bne.n	8005a84 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	60da      	str	r2, [r3, #12]
}
 8005a82:	e007      	b.n	8005a94 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	60da      	str	r2, [r3, #12]
}
 8005a94:	bf00      	nop
 8005a96:	371c      	adds	r7, #28
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	58025408 	.word	0x58025408
 8005aa4:	5802541c 	.word	0x5802541c
 8005aa8:	58025430 	.word	0x58025430
 8005aac:	58025444 	.word	0x58025444
 8005ab0:	58025458 	.word	0x58025458
 8005ab4:	5802546c 	.word	0x5802546c
 8005ab8:	58025480 	.word	0x58025480
 8005abc:	58025494 	.word	0x58025494

08005ac0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a42      	ldr	r2, [pc, #264]	; (8005bd8 <DMA_CalcBaseAndBitshift+0x118>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d04a      	beq.n	8005b68 <DMA_CalcBaseAndBitshift+0xa8>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a41      	ldr	r2, [pc, #260]	; (8005bdc <DMA_CalcBaseAndBitshift+0x11c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d045      	beq.n	8005b68 <DMA_CalcBaseAndBitshift+0xa8>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a3f      	ldr	r2, [pc, #252]	; (8005be0 <DMA_CalcBaseAndBitshift+0x120>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d040      	beq.n	8005b68 <DMA_CalcBaseAndBitshift+0xa8>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a3e      	ldr	r2, [pc, #248]	; (8005be4 <DMA_CalcBaseAndBitshift+0x124>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d03b      	beq.n	8005b68 <DMA_CalcBaseAndBitshift+0xa8>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a3c      	ldr	r2, [pc, #240]	; (8005be8 <DMA_CalcBaseAndBitshift+0x128>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d036      	beq.n	8005b68 <DMA_CalcBaseAndBitshift+0xa8>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a3b      	ldr	r2, [pc, #236]	; (8005bec <DMA_CalcBaseAndBitshift+0x12c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d031      	beq.n	8005b68 <DMA_CalcBaseAndBitshift+0xa8>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a39      	ldr	r2, [pc, #228]	; (8005bf0 <DMA_CalcBaseAndBitshift+0x130>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d02c      	beq.n	8005b68 <DMA_CalcBaseAndBitshift+0xa8>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a38      	ldr	r2, [pc, #224]	; (8005bf4 <DMA_CalcBaseAndBitshift+0x134>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d027      	beq.n	8005b68 <DMA_CalcBaseAndBitshift+0xa8>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a36      	ldr	r2, [pc, #216]	; (8005bf8 <DMA_CalcBaseAndBitshift+0x138>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d022      	beq.n	8005b68 <DMA_CalcBaseAndBitshift+0xa8>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a35      	ldr	r2, [pc, #212]	; (8005bfc <DMA_CalcBaseAndBitshift+0x13c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d01d      	beq.n	8005b68 <DMA_CalcBaseAndBitshift+0xa8>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a33      	ldr	r2, [pc, #204]	; (8005c00 <DMA_CalcBaseAndBitshift+0x140>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d018      	beq.n	8005b68 <DMA_CalcBaseAndBitshift+0xa8>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a32      	ldr	r2, [pc, #200]	; (8005c04 <DMA_CalcBaseAndBitshift+0x144>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d013      	beq.n	8005b68 <DMA_CalcBaseAndBitshift+0xa8>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a30      	ldr	r2, [pc, #192]	; (8005c08 <DMA_CalcBaseAndBitshift+0x148>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00e      	beq.n	8005b68 <DMA_CalcBaseAndBitshift+0xa8>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a2f      	ldr	r2, [pc, #188]	; (8005c0c <DMA_CalcBaseAndBitshift+0x14c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d009      	beq.n	8005b68 <DMA_CalcBaseAndBitshift+0xa8>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a2d      	ldr	r2, [pc, #180]	; (8005c10 <DMA_CalcBaseAndBitshift+0x150>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d004      	beq.n	8005b68 <DMA_CalcBaseAndBitshift+0xa8>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a2c      	ldr	r2, [pc, #176]	; (8005c14 <DMA_CalcBaseAndBitshift+0x154>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d101      	bne.n	8005b6c <DMA_CalcBaseAndBitshift+0xac>
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e000      	b.n	8005b6e <DMA_CalcBaseAndBitshift+0xae>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d024      	beq.n	8005bbc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	3b10      	subs	r3, #16
 8005b7a:	4a27      	ldr	r2, [pc, #156]	; (8005c18 <DMA_CalcBaseAndBitshift+0x158>)
 8005b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b80:	091b      	lsrs	r3, r3, #4
 8005b82:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	4a24      	ldr	r2, [pc, #144]	; (8005c1c <DMA_CalcBaseAndBitshift+0x15c>)
 8005b8c:	5cd3      	ldrb	r3, [r2, r3]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2b03      	cmp	r3, #3
 8005b98:	d908      	bls.n	8005bac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	4b1f      	ldr	r3, [pc, #124]	; (8005c20 <DMA_CalcBaseAndBitshift+0x160>)
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	1d1a      	adds	r2, r3, #4
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	659a      	str	r2, [r3, #88]	; 0x58
 8005baa:	e00d      	b.n	8005bc8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	4b1b      	ldr	r3, [pc, #108]	; (8005c20 <DMA_CalcBaseAndBitshift+0x160>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6593      	str	r3, [r2, #88]	; 0x58
 8005bba:	e005      	b.n	8005bc8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	40020010 	.word	0x40020010
 8005bdc:	40020028 	.word	0x40020028
 8005be0:	40020040 	.word	0x40020040
 8005be4:	40020058 	.word	0x40020058
 8005be8:	40020070 	.word	0x40020070
 8005bec:	40020088 	.word	0x40020088
 8005bf0:	400200a0 	.word	0x400200a0
 8005bf4:	400200b8 	.word	0x400200b8
 8005bf8:	40020410 	.word	0x40020410
 8005bfc:	40020428 	.word	0x40020428
 8005c00:	40020440 	.word	0x40020440
 8005c04:	40020458 	.word	0x40020458
 8005c08:	40020470 	.word	0x40020470
 8005c0c:	40020488 	.word	0x40020488
 8005c10:	400204a0 	.word	0x400204a0
 8005c14:	400204b8 	.word	0x400204b8
 8005c18:	aaaaaaab 	.word	0xaaaaaaab
 8005c1c:	0800d358 	.word	0x0800d358
 8005c20:	fffffc00 	.word	0xfffffc00

08005c24 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d120      	bne.n	8005c7a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3c:	2b03      	cmp	r3, #3
 8005c3e:	d858      	bhi.n	8005cf2 <DMA_CheckFifoParam+0xce>
 8005c40:	a201      	add	r2, pc, #4	; (adr r2, 8005c48 <DMA_CheckFifoParam+0x24>)
 8005c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c46:	bf00      	nop
 8005c48:	08005c59 	.word	0x08005c59
 8005c4c:	08005c6b 	.word	0x08005c6b
 8005c50:	08005c59 	.word	0x08005c59
 8005c54:	08005cf3 	.word	0x08005cf3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d048      	beq.n	8005cf6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c68:	e045      	b.n	8005cf6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c72:	d142      	bne.n	8005cfa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c78:	e03f      	b.n	8005cfa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c82:	d123      	bne.n	8005ccc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	d838      	bhi.n	8005cfe <DMA_CheckFifoParam+0xda>
 8005c8c:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <DMA_CheckFifoParam+0x70>)
 8005c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c92:	bf00      	nop
 8005c94:	08005ca5 	.word	0x08005ca5
 8005c98:	08005cab 	.word	0x08005cab
 8005c9c:	08005ca5 	.word	0x08005ca5
 8005ca0:	08005cbd 	.word	0x08005cbd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	73fb      	strb	r3, [r7, #15]
        break;
 8005ca8:	e030      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d025      	beq.n	8005d02 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cba:	e022      	b.n	8005d02 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005cc4:	d11f      	bne.n	8005d06 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cca:	e01c      	b.n	8005d06 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d902      	bls.n	8005cda <DMA_CheckFifoParam+0xb6>
 8005cd4:	2b03      	cmp	r3, #3
 8005cd6:	d003      	beq.n	8005ce0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005cd8:	e018      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	73fb      	strb	r3, [r7, #15]
        break;
 8005cde:	e015      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00e      	beq.n	8005d0a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	73fb      	strb	r3, [r7, #15]
    break;
 8005cf0:	e00b      	b.n	8005d0a <DMA_CheckFifoParam+0xe6>
        break;
 8005cf2:	bf00      	nop
 8005cf4:	e00a      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
        break;
 8005cf6:	bf00      	nop
 8005cf8:	e008      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
        break;
 8005cfa:	bf00      	nop
 8005cfc:	e006      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
        break;
 8005cfe:	bf00      	nop
 8005d00:	e004      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
        break;
 8005d02:	bf00      	nop
 8005d04:	e002      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
        break;
 8005d06:	bf00      	nop
 8005d08:	e000      	b.n	8005d0c <DMA_CheckFifoParam+0xe8>
    break;
 8005d0a:	bf00      	nop
    }
  }

  return status;
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop

08005d1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a38      	ldr	r2, [pc, #224]	; (8005e10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d022      	beq.n	8005d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a36      	ldr	r2, [pc, #216]	; (8005e14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d01d      	beq.n	8005d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a35      	ldr	r2, [pc, #212]	; (8005e18 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d018      	beq.n	8005d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a33      	ldr	r2, [pc, #204]	; (8005e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d013      	beq.n	8005d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a32      	ldr	r2, [pc, #200]	; (8005e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d00e      	beq.n	8005d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a30      	ldr	r2, [pc, #192]	; (8005e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d009      	beq.n	8005d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a2f      	ldr	r2, [pc, #188]	; (8005e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d004      	beq.n	8005d7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a2d      	ldr	r2, [pc, #180]	; (8005e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d101      	bne.n	8005d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e000      	b.n	8005d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d01a      	beq.n	8005dba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	3b08      	subs	r3, #8
 8005d8c:	4a28      	ldr	r2, [pc, #160]	; (8005e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d92:	091b      	lsrs	r3, r3, #4
 8005d94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	4b26      	ldr	r3, [pc, #152]	; (8005e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005d9a:	4413      	add	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	461a      	mov	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a24      	ldr	r2, [pc, #144]	; (8005e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005da8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f003 031f 	and.w	r3, r3, #31
 8005db0:	2201      	movs	r2, #1
 8005db2:	409a      	lsls	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005db8:	e024      	b.n	8005e04 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	3b10      	subs	r3, #16
 8005dc2:	4a1e      	ldr	r2, [pc, #120]	; (8005e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc8:	091b      	lsrs	r3, r3, #4
 8005dca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	4a1c      	ldr	r2, [pc, #112]	; (8005e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d806      	bhi.n	8005de2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	4a1b      	ldr	r2, [pc, #108]	; (8005e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d902      	bls.n	8005de2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3308      	adds	r3, #8
 8005de0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	4b18      	ldr	r3, [pc, #96]	; (8005e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	461a      	mov	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a16      	ldr	r2, [pc, #88]	; (8005e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005df4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f003 031f 	and.w	r3, r3, #31
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	409a      	lsls	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005e04:	bf00      	nop
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	58025408 	.word	0x58025408
 8005e14:	5802541c 	.word	0x5802541c
 8005e18:	58025430 	.word	0x58025430
 8005e1c:	58025444 	.word	0x58025444
 8005e20:	58025458 	.word	0x58025458
 8005e24:	5802546c 	.word	0x5802546c
 8005e28:	58025480 	.word	0x58025480
 8005e2c:	58025494 	.word	0x58025494
 8005e30:	cccccccd 	.word	0xcccccccd
 8005e34:	16009600 	.word	0x16009600
 8005e38:	58025880 	.word	0x58025880
 8005e3c:	aaaaaaab 	.word	0xaaaaaaab
 8005e40:	400204b8 	.word	0x400204b8
 8005e44:	4002040f 	.word	0x4002040f
 8005e48:	10008200 	.word	0x10008200
 8005e4c:	40020880 	.word	0x40020880

08005e50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d04a      	beq.n	8005efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d847      	bhi.n	8005efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a25      	ldr	r2, [pc, #148]	; (8005f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d022      	beq.n	8005ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a24      	ldr	r2, [pc, #144]	; (8005f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d01d      	beq.n	8005ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a22      	ldr	r2, [pc, #136]	; (8005f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d018      	beq.n	8005ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a21      	ldr	r2, [pc, #132]	; (8005f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d013      	beq.n	8005ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a1f      	ldr	r2, [pc, #124]	; (8005f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d00e      	beq.n	8005ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a1e      	ldr	r2, [pc, #120]	; (8005f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d009      	beq.n	8005ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a1c      	ldr	r2, [pc, #112]	; (8005f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d004      	beq.n	8005ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a1b      	ldr	r2, [pc, #108]	; (8005f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d101      	bne.n	8005ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e000      	b.n	8005ec2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00a      	beq.n	8005edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	4b17      	ldr	r3, [pc, #92]	; (8005f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005eca:	4413      	add	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	461a      	mov	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a15      	ldr	r2, [pc, #84]	; (8005f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005ed8:	671a      	str	r2, [r3, #112]	; 0x70
 8005eda:	e009      	b.n	8005ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	4b14      	ldr	r3, [pc, #80]	; (8005f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005ee0:	4413      	add	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a11      	ldr	r2, [pc, #68]	; (8005f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005eee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	409a      	lsls	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005efc:	bf00      	nop
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	58025408 	.word	0x58025408
 8005f0c:	5802541c 	.word	0x5802541c
 8005f10:	58025430 	.word	0x58025430
 8005f14:	58025444 	.word	0x58025444
 8005f18:	58025458 	.word	0x58025458
 8005f1c:	5802546c 	.word	0x5802546c
 8005f20:	58025480 	.word	0x58025480
 8005f24:	58025494 	.word	0x58025494
 8005f28:	1600963f 	.word	0x1600963f
 8005f2c:	58025940 	.word	0x58025940
 8005f30:	1000823f 	.word	0x1000823f
 8005f34:	40020940 	.word	0x40020940

08005f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b089      	sub	sp, #36	; 0x24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005f46:	4b89      	ldr	r3, [pc, #548]	; (800616c <HAL_GPIO_Init+0x234>)
 8005f48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f4a:	e194      	b.n	8006276 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	2101      	movs	r1, #1
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	fa01 f303 	lsl.w	r3, r1, r3
 8005f58:	4013      	ands	r3, r2
 8005f5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 8186 	beq.w	8006270 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d00b      	beq.n	8005f84 <HAL_GPIO_Init+0x4c>
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d007      	beq.n	8005f84 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005f78:	2b11      	cmp	r3, #17
 8005f7a:	d003      	beq.n	8005f84 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	2b12      	cmp	r3, #18
 8005f82:	d130      	bne.n	8005fe6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	2203      	movs	r2, #3
 8005f90:	fa02 f303 	lsl.w	r3, r2, r3
 8005f94:	43db      	mvns	r3, r3
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	68da      	ldr	r2, [r3, #12]
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005fba:	2201      	movs	r2, #1
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc2:	43db      	mvns	r3, r3
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	091b      	lsrs	r3, r3, #4
 8005fd0:	f003 0201 	and.w	r2, r3, #1
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	2203      	movs	r2, #3
 8005ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff6:	43db      	mvns	r3, r3
 8005ff8:	69ba      	ldr	r2, [r7, #24]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	689a      	ldr	r2, [r3, #8]
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	fa02 f303 	lsl.w	r3, r2, r3
 800600a:	69ba      	ldr	r2, [r7, #24]
 800600c:	4313      	orrs	r3, r2
 800600e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	2b02      	cmp	r3, #2
 800601c:	d003      	beq.n	8006026 <HAL_GPIO_Init+0xee>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	2b12      	cmp	r3, #18
 8006024:	d123      	bne.n	800606e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	08da      	lsrs	r2, r3, #3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3208      	adds	r2, #8
 800602e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	f003 0307 	and.w	r3, r3, #7
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	220f      	movs	r2, #15
 800603e:	fa02 f303 	lsl.w	r3, r2, r3
 8006042:	43db      	mvns	r3, r3
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	4013      	ands	r3, r2
 8006048:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	691a      	ldr	r2, [r3, #16]
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	fa02 f303 	lsl.w	r3, r2, r3
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	4313      	orrs	r3, r2
 800605e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	08da      	lsrs	r2, r3, #3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	3208      	adds	r2, #8
 8006068:	69b9      	ldr	r1, [r7, #24]
 800606a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	2203      	movs	r2, #3
 800607a:	fa02 f303 	lsl.w	r3, r2, r3
 800607e:	43db      	mvns	r3, r3
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	4013      	ands	r3, r2
 8006084:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f003 0203 	and.w	r2, r3, #3
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	fa02 f303 	lsl.w	r3, r2, r3
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	4313      	orrs	r3, r2
 800609a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 80e0 	beq.w	8006270 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060b0:	4b2f      	ldr	r3, [pc, #188]	; (8006170 <HAL_GPIO_Init+0x238>)
 80060b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80060b6:	4a2e      	ldr	r2, [pc, #184]	; (8006170 <HAL_GPIO_Init+0x238>)
 80060b8:	f043 0302 	orr.w	r3, r3, #2
 80060bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80060c0:	4b2b      	ldr	r3, [pc, #172]	; (8006170 <HAL_GPIO_Init+0x238>)
 80060c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80060ce:	4a29      	ldr	r2, [pc, #164]	; (8006174 <HAL_GPIO_Init+0x23c>)
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	089b      	lsrs	r3, r3, #2
 80060d4:	3302      	adds	r3, #2
 80060d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	f003 0303 	and.w	r3, r3, #3
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	220f      	movs	r2, #15
 80060e6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ea:	43db      	mvns	r3, r3
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	4013      	ands	r3, r2
 80060f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a20      	ldr	r2, [pc, #128]	; (8006178 <HAL_GPIO_Init+0x240>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d052      	beq.n	80061a0 <HAL_GPIO_Init+0x268>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a1f      	ldr	r2, [pc, #124]	; (800617c <HAL_GPIO_Init+0x244>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d031      	beq.n	8006166 <HAL_GPIO_Init+0x22e>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a1e      	ldr	r2, [pc, #120]	; (8006180 <HAL_GPIO_Init+0x248>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d02b      	beq.n	8006162 <HAL_GPIO_Init+0x22a>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a1d      	ldr	r2, [pc, #116]	; (8006184 <HAL_GPIO_Init+0x24c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d025      	beq.n	800615e <HAL_GPIO_Init+0x226>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a1c      	ldr	r2, [pc, #112]	; (8006188 <HAL_GPIO_Init+0x250>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d01f      	beq.n	800615a <HAL_GPIO_Init+0x222>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a1b      	ldr	r2, [pc, #108]	; (800618c <HAL_GPIO_Init+0x254>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d019      	beq.n	8006156 <HAL_GPIO_Init+0x21e>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a1a      	ldr	r2, [pc, #104]	; (8006190 <HAL_GPIO_Init+0x258>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d013      	beq.n	8006152 <HAL_GPIO_Init+0x21a>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a19      	ldr	r2, [pc, #100]	; (8006194 <HAL_GPIO_Init+0x25c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d00d      	beq.n	800614e <HAL_GPIO_Init+0x216>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a18      	ldr	r2, [pc, #96]	; (8006198 <HAL_GPIO_Init+0x260>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d007      	beq.n	800614a <HAL_GPIO_Init+0x212>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a17      	ldr	r2, [pc, #92]	; (800619c <HAL_GPIO_Init+0x264>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d101      	bne.n	8006146 <HAL_GPIO_Init+0x20e>
 8006142:	2309      	movs	r3, #9
 8006144:	e02d      	b.n	80061a2 <HAL_GPIO_Init+0x26a>
 8006146:	230a      	movs	r3, #10
 8006148:	e02b      	b.n	80061a2 <HAL_GPIO_Init+0x26a>
 800614a:	2308      	movs	r3, #8
 800614c:	e029      	b.n	80061a2 <HAL_GPIO_Init+0x26a>
 800614e:	2307      	movs	r3, #7
 8006150:	e027      	b.n	80061a2 <HAL_GPIO_Init+0x26a>
 8006152:	2306      	movs	r3, #6
 8006154:	e025      	b.n	80061a2 <HAL_GPIO_Init+0x26a>
 8006156:	2305      	movs	r3, #5
 8006158:	e023      	b.n	80061a2 <HAL_GPIO_Init+0x26a>
 800615a:	2304      	movs	r3, #4
 800615c:	e021      	b.n	80061a2 <HAL_GPIO_Init+0x26a>
 800615e:	2303      	movs	r3, #3
 8006160:	e01f      	b.n	80061a2 <HAL_GPIO_Init+0x26a>
 8006162:	2302      	movs	r3, #2
 8006164:	e01d      	b.n	80061a2 <HAL_GPIO_Init+0x26a>
 8006166:	2301      	movs	r3, #1
 8006168:	e01b      	b.n	80061a2 <HAL_GPIO_Init+0x26a>
 800616a:	bf00      	nop
 800616c:	58000080 	.word	0x58000080
 8006170:	58024400 	.word	0x58024400
 8006174:	58000400 	.word	0x58000400
 8006178:	58020000 	.word	0x58020000
 800617c:	58020400 	.word	0x58020400
 8006180:	58020800 	.word	0x58020800
 8006184:	58020c00 	.word	0x58020c00
 8006188:	58021000 	.word	0x58021000
 800618c:	58021400 	.word	0x58021400
 8006190:	58021800 	.word	0x58021800
 8006194:	58021c00 	.word	0x58021c00
 8006198:	58022000 	.word	0x58022000
 800619c:	58022400 	.word	0x58022400
 80061a0:	2300      	movs	r3, #0
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	f002 0203 	and.w	r2, r2, #3
 80061a8:	0092      	lsls	r2, r2, #2
 80061aa:	4093      	lsls	r3, r2
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061b2:	4938      	ldr	r1, [pc, #224]	; (8006294 <HAL_GPIO_Init+0x35c>)
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	089b      	lsrs	r3, r3, #2
 80061b8:	3302      	adds	r3, #2
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	43db      	mvns	r3, r3
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	4013      	ands	r3, r2
 80061ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	43db      	mvns	r3, r3
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	4013      	ands	r3, r2
 80061f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	4313      	orrs	r3, r2
 800620c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	43db      	mvns	r3, r3
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	4013      	ands	r3, r2
 8006224:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800623a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	43db      	mvns	r3, r3
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	4013      	ands	r3, r2
 8006252:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d003      	beq.n	8006268 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	4313      	orrs	r3, r2
 8006266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006268:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	3301      	adds	r3, #1
 8006274:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	fa22 f303 	lsr.w	r3, r2, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	f47f ae63 	bne.w	8005f4c <HAL_GPIO_Init+0x14>
  }
}
 8006286:	bf00      	nop
 8006288:	bf00      	nop
 800628a:	3724      	adds	r7, #36	; 0x24
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	58000400 	.word	0x58000400

08006298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	460b      	mov	r3, r1
 80062a2:	807b      	strh	r3, [r7, #2]
 80062a4:	4613      	mov	r3, r2
 80062a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80062a8:	787b      	ldrb	r3, [r7, #1]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062ae:	887a      	ldrh	r2, [r7, #2]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80062b4:	e003      	b.n	80062be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80062b6:	887b      	ldrh	r3, [r7, #2]
 80062b8:	041a      	lsls	r2, r3, #16
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	619a      	str	r2, [r3, #24]
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e041      	b.n	8006360 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80062e4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f245 5255 	movw	r2, #21845	; 0x5555
 80062ee:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6852      	ldr	r2, [r2, #4]
 80062f8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	6892      	ldr	r2, [r2, #8]
 8006302:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006304:	f7fc feda 	bl	80030bc <HAL_GetTick>
 8006308:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800630a:	e00f      	b.n	800632c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800630c:	f7fc fed6 	bl	80030bc <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b30      	cmp	r3, #48	; 0x30
 8006318:	d908      	bls.n	800632c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f003 0307 	and.w	r3, r3, #7
 8006324:	2b00      	cmp	r3, #0
 8006326:	d001      	beq.n	800632c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e019      	b.n	8006360 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1e8      	bne.n	800630c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	691a      	ldr	r2, [r3, #16]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	429a      	cmp	r2, r3
 8006346:	d005      	beq.n	8006354 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	68d2      	ldr	r2, [r2, #12]
 8006350:	611a      	str	r2, [r3, #16]
 8006352:	e004      	b.n	800635e <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800635c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006378:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006390:	4b19      	ldr	r3, [pc, #100]	; (80063f8 <HAL_PWREx_ConfigSupply+0x70>)
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b04      	cmp	r3, #4
 800639a:	d00a      	beq.n	80063b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800639c:	4b16      	ldr	r3, [pc, #88]	; (80063f8 <HAL_PWREx_ConfigSupply+0x70>)
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	f003 0307 	and.w	r3, r3, #7
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d001      	beq.n	80063ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e01f      	b.n	80063ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	e01d      	b.n	80063ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80063b2:	4b11      	ldr	r3, [pc, #68]	; (80063f8 <HAL_PWREx_ConfigSupply+0x70>)
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f023 0207 	bic.w	r2, r3, #7
 80063ba:	490f      	ldr	r1, [pc, #60]	; (80063f8 <HAL_PWREx_ConfigSupply+0x70>)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80063c2:	f7fc fe7b 	bl	80030bc <HAL_GetTick>
 80063c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063c8:	e009      	b.n	80063de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80063ca:	f7fc fe77 	bl	80030bc <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063d8:	d901      	bls.n	80063de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e007      	b.n	80063ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063de:	4b06      	ldr	r3, [pc, #24]	; (80063f8 <HAL_PWREx_ConfigSupply+0x70>)
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ea:	d1ee      	bne.n	80063ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	58024800 	.word	0x58024800

080063fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b08c      	sub	sp, #48	; 0x30
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e3ff      	b.n	8006c0e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	f000 8087 	beq.w	800652a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800641c:	4b99      	ldr	r3, [pc, #612]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006424:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006426:	4b97      	ldr	r3, [pc, #604]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 8006428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800642c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642e:	2b10      	cmp	r3, #16
 8006430:	d007      	beq.n	8006442 <HAL_RCC_OscConfig+0x46>
 8006432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006434:	2b18      	cmp	r3, #24
 8006436:	d110      	bne.n	800645a <HAL_RCC_OscConfig+0x5e>
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	f003 0303 	and.w	r3, r3, #3
 800643e:	2b02      	cmp	r3, #2
 8006440:	d10b      	bne.n	800645a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006442:	4b90      	ldr	r3, [pc, #576]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d06c      	beq.n	8006528 <HAL_RCC_OscConfig+0x12c>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d168      	bne.n	8006528 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e3d9      	b.n	8006c0e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006462:	d106      	bne.n	8006472 <HAL_RCC_OscConfig+0x76>
 8006464:	4b87      	ldr	r3, [pc, #540]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a86      	ldr	r2, [pc, #536]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 800646a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	e02e      	b.n	80064d0 <HAL_RCC_OscConfig+0xd4>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10c      	bne.n	8006494 <HAL_RCC_OscConfig+0x98>
 800647a:	4b82      	ldr	r3, [pc, #520]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a81      	ldr	r2, [pc, #516]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 8006480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006484:	6013      	str	r3, [r2, #0]
 8006486:	4b7f      	ldr	r3, [pc, #508]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a7e      	ldr	r2, [pc, #504]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 800648c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	e01d      	b.n	80064d0 <HAL_RCC_OscConfig+0xd4>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800649c:	d10c      	bne.n	80064b8 <HAL_RCC_OscConfig+0xbc>
 800649e:	4b79      	ldr	r3, [pc, #484]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a78      	ldr	r2, [pc, #480]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 80064a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	4b76      	ldr	r3, [pc, #472]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a75      	ldr	r2, [pc, #468]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 80064b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	e00b      	b.n	80064d0 <HAL_RCC_OscConfig+0xd4>
 80064b8:	4b72      	ldr	r3, [pc, #456]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a71      	ldr	r2, [pc, #452]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 80064be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064c2:	6013      	str	r3, [r2, #0]
 80064c4:	4b6f      	ldr	r3, [pc, #444]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a6e      	ldr	r2, [pc, #440]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 80064ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d013      	beq.n	8006500 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d8:	f7fc fdf0 	bl	80030bc <HAL_GetTick>
 80064dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064de:	e008      	b.n	80064f2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064e0:	f7fc fdec 	bl	80030bc <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	2b64      	cmp	r3, #100	; 0x64
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e38d      	b.n	8006c0e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064f2:	4b64      	ldr	r3, [pc, #400]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d0f0      	beq.n	80064e0 <HAL_RCC_OscConfig+0xe4>
 80064fe:	e014      	b.n	800652a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006500:	f7fc fddc 	bl	80030bc <HAL_GetTick>
 8006504:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006506:	e008      	b.n	800651a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006508:	f7fc fdd8 	bl	80030bc <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b64      	cmp	r3, #100	; 0x64
 8006514:	d901      	bls.n	800651a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e379      	b.n	8006c0e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800651a:	4b5a      	ldr	r3, [pc, #360]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1f0      	bne.n	8006508 <HAL_RCC_OscConfig+0x10c>
 8006526:	e000      	b.n	800652a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 80ae 	beq.w	8006694 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006538:	4b52      	ldr	r3, [pc, #328]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006540:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006542:	4b50      	ldr	r3, [pc, #320]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 8006544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006546:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d007      	beq.n	800655e <HAL_RCC_OscConfig+0x162>
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	2b18      	cmp	r3, #24
 8006552:	d13a      	bne.n	80065ca <HAL_RCC_OscConfig+0x1ce>
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	f003 0303 	and.w	r3, r3, #3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d135      	bne.n	80065ca <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800655e:	4b49      	ldr	r3, [pc, #292]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	2b00      	cmp	r3, #0
 8006568:	d005      	beq.n	8006576 <HAL_RCC_OscConfig+0x17a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e34b      	b.n	8006c0e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006576:	f7fc fdad 	bl	80030d4 <HAL_GetREVID>
 800657a:	4603      	mov	r3, r0
 800657c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006580:	4293      	cmp	r3, r2
 8006582:	d817      	bhi.n	80065b4 <HAL_RCC_OscConfig+0x1b8>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	2b40      	cmp	r3, #64	; 0x40
 800658a:	d108      	bne.n	800659e <HAL_RCC_OscConfig+0x1a2>
 800658c:	4b3d      	ldr	r3, [pc, #244]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006594:	4a3b      	ldr	r2, [pc, #236]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 8006596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800659a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800659c:	e07a      	b.n	8006694 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800659e:	4b39      	ldr	r3, [pc, #228]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	031b      	lsls	r3, r3, #12
 80065ac:	4935      	ldr	r1, [pc, #212]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065b2:	e06f      	b.n	8006694 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065b4:	4b33      	ldr	r3, [pc, #204]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	061b      	lsls	r3, r3, #24
 80065c2:	4930      	ldr	r1, [pc, #192]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065c8:	e064      	b.n	8006694 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d045      	beq.n	800665e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80065d2:	4b2c      	ldr	r3, [pc, #176]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f023 0219 	bic.w	r2, r3, #25
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	4929      	ldr	r1, [pc, #164]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e4:	f7fc fd6a 	bl	80030bc <HAL_GetTick>
 80065e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065ea:	e008      	b.n	80065fe <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065ec:	f7fc fd66 	bl	80030bc <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d901      	bls.n	80065fe <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e307      	b.n	8006c0e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065fe:	4b21      	ldr	r3, [pc, #132]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0304 	and.w	r3, r3, #4
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0f0      	beq.n	80065ec <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800660a:	f7fc fd63 	bl	80030d4 <HAL_GetREVID>
 800660e:	4603      	mov	r3, r0
 8006610:	f241 0203 	movw	r2, #4099	; 0x1003
 8006614:	4293      	cmp	r3, r2
 8006616:	d817      	bhi.n	8006648 <HAL_RCC_OscConfig+0x24c>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	2b40      	cmp	r3, #64	; 0x40
 800661e:	d108      	bne.n	8006632 <HAL_RCC_OscConfig+0x236>
 8006620:	4b18      	ldr	r3, [pc, #96]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006628:	4a16      	ldr	r2, [pc, #88]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 800662a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800662e:	6053      	str	r3, [r2, #4]
 8006630:	e030      	b.n	8006694 <HAL_RCC_OscConfig+0x298>
 8006632:	4b14      	ldr	r3, [pc, #80]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	031b      	lsls	r3, r3, #12
 8006640:	4910      	ldr	r1, [pc, #64]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 8006642:	4313      	orrs	r3, r2
 8006644:	604b      	str	r3, [r1, #4]
 8006646:	e025      	b.n	8006694 <HAL_RCC_OscConfig+0x298>
 8006648:	4b0e      	ldr	r3, [pc, #56]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	061b      	lsls	r3, r3, #24
 8006656:	490b      	ldr	r1, [pc, #44]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 8006658:	4313      	orrs	r3, r2
 800665a:	604b      	str	r3, [r1, #4]
 800665c:	e01a      	b.n	8006694 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800665e:	4b09      	ldr	r3, [pc, #36]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a08      	ldr	r2, [pc, #32]	; (8006684 <HAL_RCC_OscConfig+0x288>)
 8006664:	f023 0301 	bic.w	r3, r3, #1
 8006668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800666a:	f7fc fd27 	bl	80030bc <HAL_GetTick>
 800666e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006670:	e00a      	b.n	8006688 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006672:	f7fc fd23 	bl	80030bc <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	2b02      	cmp	r3, #2
 800667e:	d903      	bls.n	8006688 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e2c4      	b.n	8006c0e <HAL_RCC_OscConfig+0x812>
 8006684:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006688:	4ba4      	ldr	r3, [pc, #656]	; (800691c <HAL_RCC_OscConfig+0x520>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0304 	and.w	r3, r3, #4
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1ee      	bne.n	8006672 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0310 	and.w	r3, r3, #16
 800669c:	2b00      	cmp	r3, #0
 800669e:	f000 80a9 	beq.w	80067f4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066a2:	4b9e      	ldr	r3, [pc, #632]	; (800691c <HAL_RCC_OscConfig+0x520>)
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066aa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066ac:	4b9b      	ldr	r3, [pc, #620]	; (800691c <HAL_RCC_OscConfig+0x520>)
 80066ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	2b08      	cmp	r3, #8
 80066b6:	d007      	beq.n	80066c8 <HAL_RCC_OscConfig+0x2cc>
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	2b18      	cmp	r3, #24
 80066bc:	d13a      	bne.n	8006734 <HAL_RCC_OscConfig+0x338>
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f003 0303 	and.w	r3, r3, #3
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d135      	bne.n	8006734 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066c8:	4b94      	ldr	r3, [pc, #592]	; (800691c <HAL_RCC_OscConfig+0x520>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d005      	beq.n	80066e0 <HAL_RCC_OscConfig+0x2e4>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	2b80      	cmp	r3, #128	; 0x80
 80066da:	d001      	beq.n	80066e0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e296      	b.n	8006c0e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066e0:	f7fc fcf8 	bl	80030d4 <HAL_GetREVID>
 80066e4:	4603      	mov	r3, r0
 80066e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d817      	bhi.n	800671e <HAL_RCC_OscConfig+0x322>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d108      	bne.n	8006708 <HAL_RCC_OscConfig+0x30c>
 80066f6:	4b89      	ldr	r3, [pc, #548]	; (800691c <HAL_RCC_OscConfig+0x520>)
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80066fe:	4a87      	ldr	r2, [pc, #540]	; (800691c <HAL_RCC_OscConfig+0x520>)
 8006700:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006704:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006706:	e075      	b.n	80067f4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006708:	4b84      	ldr	r3, [pc, #528]	; (800691c <HAL_RCC_OscConfig+0x520>)
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	069b      	lsls	r3, r3, #26
 8006716:	4981      	ldr	r1, [pc, #516]	; (800691c <HAL_RCC_OscConfig+0x520>)
 8006718:	4313      	orrs	r3, r2
 800671a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800671c:	e06a      	b.n	80067f4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800671e:	4b7f      	ldr	r3, [pc, #508]	; (800691c <HAL_RCC_OscConfig+0x520>)
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	061b      	lsls	r3, r3, #24
 800672c:	497b      	ldr	r1, [pc, #492]	; (800691c <HAL_RCC_OscConfig+0x520>)
 800672e:	4313      	orrs	r3, r2
 8006730:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006732:	e05f      	b.n	80067f4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d042      	beq.n	80067c2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800673c:	4b77      	ldr	r3, [pc, #476]	; (800691c <HAL_RCC_OscConfig+0x520>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a76      	ldr	r2, [pc, #472]	; (800691c <HAL_RCC_OscConfig+0x520>)
 8006742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006748:	f7fc fcb8 	bl	80030bc <HAL_GetTick>
 800674c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800674e:	e008      	b.n	8006762 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006750:	f7fc fcb4 	bl	80030bc <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b02      	cmp	r3, #2
 800675c:	d901      	bls.n	8006762 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e255      	b.n	8006c0e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006762:	4b6e      	ldr	r3, [pc, #440]	; (800691c <HAL_RCC_OscConfig+0x520>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676a:	2b00      	cmp	r3, #0
 800676c:	d0f0      	beq.n	8006750 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800676e:	f7fc fcb1 	bl	80030d4 <HAL_GetREVID>
 8006772:	4603      	mov	r3, r0
 8006774:	f241 0203 	movw	r2, #4099	; 0x1003
 8006778:	4293      	cmp	r3, r2
 800677a:	d817      	bhi.n	80067ac <HAL_RCC_OscConfig+0x3b0>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	2b20      	cmp	r3, #32
 8006782:	d108      	bne.n	8006796 <HAL_RCC_OscConfig+0x39a>
 8006784:	4b65      	ldr	r3, [pc, #404]	; (800691c <HAL_RCC_OscConfig+0x520>)
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800678c:	4a63      	ldr	r2, [pc, #396]	; (800691c <HAL_RCC_OscConfig+0x520>)
 800678e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006792:	6053      	str	r3, [r2, #4]
 8006794:	e02e      	b.n	80067f4 <HAL_RCC_OscConfig+0x3f8>
 8006796:	4b61      	ldr	r3, [pc, #388]	; (800691c <HAL_RCC_OscConfig+0x520>)
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	069b      	lsls	r3, r3, #26
 80067a4:	495d      	ldr	r1, [pc, #372]	; (800691c <HAL_RCC_OscConfig+0x520>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	604b      	str	r3, [r1, #4]
 80067aa:	e023      	b.n	80067f4 <HAL_RCC_OscConfig+0x3f8>
 80067ac:	4b5b      	ldr	r3, [pc, #364]	; (800691c <HAL_RCC_OscConfig+0x520>)
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	061b      	lsls	r3, r3, #24
 80067ba:	4958      	ldr	r1, [pc, #352]	; (800691c <HAL_RCC_OscConfig+0x520>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	60cb      	str	r3, [r1, #12]
 80067c0:	e018      	b.n	80067f4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80067c2:	4b56      	ldr	r3, [pc, #344]	; (800691c <HAL_RCC_OscConfig+0x520>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a55      	ldr	r2, [pc, #340]	; (800691c <HAL_RCC_OscConfig+0x520>)
 80067c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ce:	f7fc fc75 	bl	80030bc <HAL_GetTick>
 80067d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067d4:	e008      	b.n	80067e8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80067d6:	f7fc fc71 	bl	80030bc <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d901      	bls.n	80067e8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e212      	b.n	8006c0e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067e8:	4b4c      	ldr	r3, [pc, #304]	; (800691c <HAL_RCC_OscConfig+0x520>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1f0      	bne.n	80067d6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0308 	and.w	r3, r3, #8
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d036      	beq.n	800686e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d019      	beq.n	800683c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006808:	4b44      	ldr	r3, [pc, #272]	; (800691c <HAL_RCC_OscConfig+0x520>)
 800680a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800680c:	4a43      	ldr	r2, [pc, #268]	; (800691c <HAL_RCC_OscConfig+0x520>)
 800680e:	f043 0301 	orr.w	r3, r3, #1
 8006812:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006814:	f7fc fc52 	bl	80030bc <HAL_GetTick>
 8006818:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800681a:	e008      	b.n	800682e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800681c:	f7fc fc4e 	bl	80030bc <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b02      	cmp	r3, #2
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e1ef      	b.n	8006c0e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800682e:	4b3b      	ldr	r3, [pc, #236]	; (800691c <HAL_RCC_OscConfig+0x520>)
 8006830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0f0      	beq.n	800681c <HAL_RCC_OscConfig+0x420>
 800683a:	e018      	b.n	800686e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800683c:	4b37      	ldr	r3, [pc, #220]	; (800691c <HAL_RCC_OscConfig+0x520>)
 800683e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006840:	4a36      	ldr	r2, [pc, #216]	; (800691c <HAL_RCC_OscConfig+0x520>)
 8006842:	f023 0301 	bic.w	r3, r3, #1
 8006846:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006848:	f7fc fc38 	bl	80030bc <HAL_GetTick>
 800684c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800684e:	e008      	b.n	8006862 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006850:	f7fc fc34 	bl	80030bc <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b02      	cmp	r3, #2
 800685c:	d901      	bls.n	8006862 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e1d5      	b.n	8006c0e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006862:	4b2e      	ldr	r3, [pc, #184]	; (800691c <HAL_RCC_OscConfig+0x520>)
 8006864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1f0      	bne.n	8006850 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0320 	and.w	r3, r3, #32
 8006876:	2b00      	cmp	r3, #0
 8006878:	d036      	beq.n	80068e8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d019      	beq.n	80068b6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006882:	4b26      	ldr	r3, [pc, #152]	; (800691c <HAL_RCC_OscConfig+0x520>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a25      	ldr	r2, [pc, #148]	; (800691c <HAL_RCC_OscConfig+0x520>)
 8006888:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800688c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800688e:	f7fc fc15 	bl	80030bc <HAL_GetTick>
 8006892:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006894:	e008      	b.n	80068a8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006896:	f7fc fc11 	bl	80030bc <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d901      	bls.n	80068a8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e1b2      	b.n	8006c0e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068a8:	4b1c      	ldr	r3, [pc, #112]	; (800691c <HAL_RCC_OscConfig+0x520>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d0f0      	beq.n	8006896 <HAL_RCC_OscConfig+0x49a>
 80068b4:	e018      	b.n	80068e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068b6:	4b19      	ldr	r3, [pc, #100]	; (800691c <HAL_RCC_OscConfig+0x520>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a18      	ldr	r2, [pc, #96]	; (800691c <HAL_RCC_OscConfig+0x520>)
 80068bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068c2:	f7fc fbfb 	bl	80030bc <HAL_GetTick>
 80068c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068c8:	e008      	b.n	80068dc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80068ca:	f7fc fbf7 	bl	80030bc <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d901      	bls.n	80068dc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e198      	b.n	8006c0e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068dc:	4b0f      	ldr	r3, [pc, #60]	; (800691c <HAL_RCC_OscConfig+0x520>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1f0      	bne.n	80068ca <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0304 	and.w	r3, r3, #4
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 8085 	beq.w	8006a00 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80068f6:	4b0a      	ldr	r3, [pc, #40]	; (8006920 <HAL_RCC_OscConfig+0x524>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a09      	ldr	r2, [pc, #36]	; (8006920 <HAL_RCC_OscConfig+0x524>)
 80068fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006900:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006902:	f7fc fbdb 	bl	80030bc <HAL_GetTick>
 8006906:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006908:	e00c      	b.n	8006924 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800690a:	f7fc fbd7 	bl	80030bc <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b64      	cmp	r3, #100	; 0x64
 8006916:	d905      	bls.n	8006924 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e178      	b.n	8006c0e <HAL_RCC_OscConfig+0x812>
 800691c:	58024400 	.word	0x58024400
 8006920:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006924:	4b96      	ldr	r3, [pc, #600]	; (8006b80 <HAL_RCC_OscConfig+0x784>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800692c:	2b00      	cmp	r3, #0
 800692e:	d0ec      	beq.n	800690a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d106      	bne.n	8006946 <HAL_RCC_OscConfig+0x54a>
 8006938:	4b92      	ldr	r3, [pc, #584]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 800693a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693c:	4a91      	ldr	r2, [pc, #580]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 800693e:	f043 0301 	orr.w	r3, r3, #1
 8006942:	6713      	str	r3, [r2, #112]	; 0x70
 8006944:	e02d      	b.n	80069a2 <HAL_RCC_OscConfig+0x5a6>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10c      	bne.n	8006968 <HAL_RCC_OscConfig+0x56c>
 800694e:	4b8d      	ldr	r3, [pc, #564]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006952:	4a8c      	ldr	r2, [pc, #560]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006954:	f023 0301 	bic.w	r3, r3, #1
 8006958:	6713      	str	r3, [r2, #112]	; 0x70
 800695a:	4b8a      	ldr	r3, [pc, #552]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 800695c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695e:	4a89      	ldr	r2, [pc, #548]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006960:	f023 0304 	bic.w	r3, r3, #4
 8006964:	6713      	str	r3, [r2, #112]	; 0x70
 8006966:	e01c      	b.n	80069a2 <HAL_RCC_OscConfig+0x5a6>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	2b05      	cmp	r3, #5
 800696e:	d10c      	bne.n	800698a <HAL_RCC_OscConfig+0x58e>
 8006970:	4b84      	ldr	r3, [pc, #528]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006974:	4a83      	ldr	r2, [pc, #524]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006976:	f043 0304 	orr.w	r3, r3, #4
 800697a:	6713      	str	r3, [r2, #112]	; 0x70
 800697c:	4b81      	ldr	r3, [pc, #516]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 800697e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006980:	4a80      	ldr	r2, [pc, #512]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006982:	f043 0301 	orr.w	r3, r3, #1
 8006986:	6713      	str	r3, [r2, #112]	; 0x70
 8006988:	e00b      	b.n	80069a2 <HAL_RCC_OscConfig+0x5a6>
 800698a:	4b7e      	ldr	r3, [pc, #504]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 800698c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698e:	4a7d      	ldr	r2, [pc, #500]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006990:	f023 0301 	bic.w	r3, r3, #1
 8006994:	6713      	str	r3, [r2, #112]	; 0x70
 8006996:	4b7b      	ldr	r3, [pc, #492]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699a:	4a7a      	ldr	r2, [pc, #488]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 800699c:	f023 0304 	bic.w	r3, r3, #4
 80069a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d015      	beq.n	80069d6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069aa:	f7fc fb87 	bl	80030bc <HAL_GetTick>
 80069ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069b0:	e00a      	b.n	80069c8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069b2:	f7fc fb83 	bl	80030bc <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d901      	bls.n	80069c8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e122      	b.n	8006c0e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069c8:	4b6e      	ldr	r3, [pc, #440]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 80069ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d0ee      	beq.n	80069b2 <HAL_RCC_OscConfig+0x5b6>
 80069d4:	e014      	b.n	8006a00 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d6:	f7fc fb71 	bl	80030bc <HAL_GetTick>
 80069da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069dc:	e00a      	b.n	80069f4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069de:	f7fc fb6d 	bl	80030bc <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d901      	bls.n	80069f4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e10c      	b.n	8006c0e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069f4:	4b63      	ldr	r3, [pc, #396]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 80069f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f8:	f003 0302 	and.w	r3, r3, #2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1ee      	bne.n	80069de <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 8101 	beq.w	8006c0c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006a0a:	4b5e      	ldr	r3, [pc, #376]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a12:	2b18      	cmp	r3, #24
 8006a14:	f000 80bc 	beq.w	8006b90 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	f040 8095 	bne.w	8006b4c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a22:	4b58      	ldr	r3, [pc, #352]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a57      	ldr	r2, [pc, #348]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006a28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a2e:	f7fc fb45 	bl	80030bc <HAL_GetTick>
 8006a32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a34:	e008      	b.n	8006a48 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a36:	f7fc fb41 	bl	80030bc <HAL_GetTick>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d901      	bls.n	8006a48 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e0e2      	b.n	8006c0e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a48:	4b4e      	ldr	r3, [pc, #312]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1f0      	bne.n	8006a36 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a54:	4b4b      	ldr	r3, [pc, #300]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006a56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a58:	4b4b      	ldr	r3, [pc, #300]	; (8006b88 <HAL_RCC_OscConfig+0x78c>)
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a64:	0112      	lsls	r2, r2, #4
 8006a66:	430a      	orrs	r2, r1
 8006a68:	4946      	ldr	r1, [pc, #280]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	628b      	str	r3, [r1, #40]	; 0x28
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a72:	3b01      	subs	r3, #1
 8006a74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	025b      	lsls	r3, r3, #9
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	431a      	orrs	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	041b      	lsls	r3, r3, #16
 8006a8c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a90:	431a      	orrs	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a96:	3b01      	subs	r3, #1
 8006a98:	061b      	lsls	r3, r3, #24
 8006a9a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a9e:	4939      	ldr	r1, [pc, #228]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006aa4:	4b37      	ldr	r3, [pc, #220]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	4a36      	ldr	r2, [pc, #216]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006aaa:	f023 0301 	bic.w	r3, r3, #1
 8006aae:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006ab0:	4b34      	ldr	r3, [pc, #208]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ab4:	4b35      	ldr	r3, [pc, #212]	; (8006b8c <HAL_RCC_OscConfig+0x790>)
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006abc:	00d2      	lsls	r2, r2, #3
 8006abe:	4931      	ldr	r1, [pc, #196]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006ac4:	4b2f      	ldr	r3, [pc, #188]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac8:	f023 020c 	bic.w	r2, r3, #12
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad0:	492c      	ldr	r1, [pc, #176]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006ad6:	4b2b      	ldr	r3, [pc, #172]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ada:	f023 0202 	bic.w	r2, r3, #2
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae2:	4928      	ldr	r1, [pc, #160]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006ae8:	4b26      	ldr	r3, [pc, #152]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aec:	4a25      	ldr	r2, [pc, #148]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006af2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006af4:	4b23      	ldr	r3, [pc, #140]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af8:	4a22      	ldr	r2, [pc, #136]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006afe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006b00:	4b20      	ldr	r3, [pc, #128]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b04:	4a1f      	ldr	r2, [pc, #124]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006b06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006b0c:	4b1d      	ldr	r3, [pc, #116]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b10:	4a1c      	ldr	r2, [pc, #112]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006b12:	f043 0301 	orr.w	r3, r3, #1
 8006b16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b18:	4b1a      	ldr	r3, [pc, #104]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a19      	ldr	r2, [pc, #100]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b24:	f7fc faca 	bl	80030bc <HAL_GetTick>
 8006b28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b2a:	e008      	b.n	8006b3e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b2c:	f7fc fac6 	bl	80030bc <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e067      	b.n	8006c0e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b3e:	4b11      	ldr	r3, [pc, #68]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d0f0      	beq.n	8006b2c <HAL_RCC_OscConfig+0x730>
 8006b4a:	e05f      	b.n	8006c0c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b4c:	4b0d      	ldr	r3, [pc, #52]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a0c      	ldr	r2, [pc, #48]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006b52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b58:	f7fc fab0 	bl	80030bc <HAL_GetTick>
 8006b5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b5e:	e008      	b.n	8006b72 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b60:	f7fc faac 	bl	80030bc <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e04d      	b.n	8006c0e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b72:	4b04      	ldr	r3, [pc, #16]	; (8006b84 <HAL_RCC_OscConfig+0x788>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1f0      	bne.n	8006b60 <HAL_RCC_OscConfig+0x764>
 8006b7e:	e045      	b.n	8006c0c <HAL_RCC_OscConfig+0x810>
 8006b80:	58024800 	.word	0x58024800
 8006b84:	58024400 	.word	0x58024400
 8006b88:	fffffc0c 	.word	0xfffffc0c
 8006b8c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b90:	4b21      	ldr	r3, [pc, #132]	; (8006c18 <HAL_RCC_OscConfig+0x81c>)
 8006b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b94:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006b96:	4b20      	ldr	r3, [pc, #128]	; (8006c18 <HAL_RCC_OscConfig+0x81c>)
 8006b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d031      	beq.n	8006c08 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f003 0203 	and.w	r2, r3, #3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d12a      	bne.n	8006c08 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	091b      	lsrs	r3, r3, #4
 8006bb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d122      	bne.n	8006c08 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bcc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d11a      	bne.n	8006c08 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	0a5b      	lsrs	r3, r3, #9
 8006bd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bde:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d111      	bne.n	8006c08 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	0c1b      	lsrs	r3, r3, #16
 8006be8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d108      	bne.n	8006c08 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	0e1b      	lsrs	r3, r3, #24
 8006bfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c02:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d001      	beq.n	8006c0c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e000      	b.n	8006c0e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3730      	adds	r7, #48	; 0x30
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	58024400 	.word	0x58024400

08006c1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e19c      	b.n	8006f6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c30:	4b8a      	ldr	r3, [pc, #552]	; (8006e5c <HAL_RCC_ClockConfig+0x240>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 030f 	and.w	r3, r3, #15
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d910      	bls.n	8006c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c3e:	4b87      	ldr	r3, [pc, #540]	; (8006e5c <HAL_RCC_ClockConfig+0x240>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f023 020f 	bic.w	r2, r3, #15
 8006c46:	4985      	ldr	r1, [pc, #532]	; (8006e5c <HAL_RCC_ClockConfig+0x240>)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c4e:	4b83      	ldr	r3, [pc, #524]	; (8006e5c <HAL_RCC_ClockConfig+0x240>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 030f 	and.w	r3, r3, #15
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d001      	beq.n	8006c60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e184      	b.n	8006f6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0304 	and.w	r3, r3, #4
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d010      	beq.n	8006c8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	691a      	ldr	r2, [r3, #16]
 8006c70:	4b7b      	ldr	r3, [pc, #492]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d908      	bls.n	8006c8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c7c:	4b78      	ldr	r3, [pc, #480]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	4975      	ldr	r1, [pc, #468]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0308 	and.w	r3, r3, #8
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d010      	beq.n	8006cbc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	695a      	ldr	r2, [r3, #20]
 8006c9e:	4b70      	ldr	r3, [pc, #448]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d908      	bls.n	8006cbc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006caa:	4b6d      	ldr	r3, [pc, #436]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	496a      	ldr	r1, [pc, #424]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0310 	and.w	r3, r3, #16
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d010      	beq.n	8006cea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	699a      	ldr	r2, [r3, #24]
 8006ccc:	4b64      	ldr	r3, [pc, #400]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d908      	bls.n	8006cea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006cd8:	4b61      	ldr	r3, [pc, #388]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	495e      	ldr	r1, [pc, #376]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d010      	beq.n	8006d18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	69da      	ldr	r2, [r3, #28]
 8006cfa:	4b59      	ldr	r3, [pc, #356]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d908      	bls.n	8006d18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006d06:	4b56      	ldr	r3, [pc, #344]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	4953      	ldr	r1, [pc, #332]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d010      	beq.n	8006d46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68da      	ldr	r2, [r3, #12]
 8006d28:	4b4d      	ldr	r3, [pc, #308]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	f003 030f 	and.w	r3, r3, #15
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d908      	bls.n	8006d46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d34:	4b4a      	ldr	r3, [pc, #296]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	f023 020f 	bic.w	r2, r3, #15
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	4947      	ldr	r1, [pc, #284]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d055      	beq.n	8006dfe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d52:	4b43      	ldr	r3, [pc, #268]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	4940      	ldr	r1, [pc, #256]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d107      	bne.n	8006d7c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d6c:	4b3c      	ldr	r3, [pc, #240]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d121      	bne.n	8006dbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e0f6      	b.n	8006f6a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d107      	bne.n	8006d94 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d84:	4b36      	ldr	r3, [pc, #216]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d115      	bne.n	8006dbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e0ea      	b.n	8006f6a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d107      	bne.n	8006dac <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d9c:	4b30      	ldr	r3, [pc, #192]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d109      	bne.n	8006dbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e0de      	b.n	8006f6a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006dac:	4b2c      	ldr	r3, [pc, #176]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0304 	and.w	r3, r3, #4
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e0d6      	b.n	8006f6a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006dbc:	4b28      	ldr	r3, [pc, #160]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	f023 0207 	bic.w	r2, r3, #7
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	4925      	ldr	r1, [pc, #148]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dce:	f7fc f975 	bl	80030bc <HAL_GetTick>
 8006dd2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dd4:	e00a      	b.n	8006dec <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dd6:	f7fc f971 	bl	80030bc <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d901      	bls.n	8006dec <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e0be      	b.n	8006f6a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dec:	4b1c      	ldr	r3, [pc, #112]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	00db      	lsls	r3, r3, #3
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d1eb      	bne.n	8006dd6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0302 	and.w	r3, r3, #2
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d010      	beq.n	8006e2c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	4b14      	ldr	r3, [pc, #80]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	f003 030f 	and.w	r3, r3, #15
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d208      	bcs.n	8006e2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e1a:	4b11      	ldr	r3, [pc, #68]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	f023 020f 	bic.w	r2, r3, #15
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	490e      	ldr	r1, [pc, #56]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e2c:	4b0b      	ldr	r3, [pc, #44]	; (8006e5c <HAL_RCC_ClockConfig+0x240>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 030f 	and.w	r3, r3, #15
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d214      	bcs.n	8006e64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e3a:	4b08      	ldr	r3, [pc, #32]	; (8006e5c <HAL_RCC_ClockConfig+0x240>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f023 020f 	bic.w	r2, r3, #15
 8006e42:	4906      	ldr	r1, [pc, #24]	; (8006e5c <HAL_RCC_ClockConfig+0x240>)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e4a:	4b04      	ldr	r3, [pc, #16]	; (8006e5c <HAL_RCC_ClockConfig+0x240>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 030f 	and.w	r3, r3, #15
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d005      	beq.n	8006e64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e086      	b.n	8006f6a <HAL_RCC_ClockConfig+0x34e>
 8006e5c:	52002000 	.word	0x52002000
 8006e60:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0304 	and.w	r3, r3, #4
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d010      	beq.n	8006e92 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	691a      	ldr	r2, [r3, #16]
 8006e74:	4b3f      	ldr	r3, [pc, #252]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d208      	bcs.n	8006e92 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e80:	4b3c      	ldr	r3, [pc, #240]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	4939      	ldr	r1, [pc, #228]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0308 	and.w	r3, r3, #8
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d010      	beq.n	8006ec0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	695a      	ldr	r2, [r3, #20]
 8006ea2:	4b34      	ldr	r3, [pc, #208]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d208      	bcs.n	8006ec0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006eae:	4b31      	ldr	r3, [pc, #196]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	492e      	ldr	r1, [pc, #184]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0310 	and.w	r3, r3, #16
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d010      	beq.n	8006eee <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	699a      	ldr	r2, [r3, #24]
 8006ed0:	4b28      	ldr	r3, [pc, #160]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d208      	bcs.n	8006eee <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006edc:	4b25      	ldr	r3, [pc, #148]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006ede:	69db      	ldr	r3, [r3, #28]
 8006ee0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	4922      	ldr	r1, [pc, #136]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0320 	and.w	r3, r3, #32
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d010      	beq.n	8006f1c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	69da      	ldr	r2, [r3, #28]
 8006efe:	4b1d      	ldr	r3, [pc, #116]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d208      	bcs.n	8006f1c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006f0a:	4b1a      	ldr	r3, [pc, #104]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	69db      	ldr	r3, [r3, #28]
 8006f16:	4917      	ldr	r1, [pc, #92]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f1c:	f000 f834 	bl	8006f88 <HAL_RCC_GetSysClockFreq>
 8006f20:	4602      	mov	r2, r0
 8006f22:	4b14      	ldr	r3, [pc, #80]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	0a1b      	lsrs	r3, r3, #8
 8006f28:	f003 030f 	and.w	r3, r3, #15
 8006f2c:	4912      	ldr	r1, [pc, #72]	; (8006f78 <HAL_RCC_ClockConfig+0x35c>)
 8006f2e:	5ccb      	ldrb	r3, [r1, r3]
 8006f30:	f003 031f 	and.w	r3, r3, #31
 8006f34:	fa22 f303 	lsr.w	r3, r2, r3
 8006f38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f3a:	4b0e      	ldr	r3, [pc, #56]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	f003 030f 	and.w	r3, r3, #15
 8006f42:	4a0d      	ldr	r2, [pc, #52]	; (8006f78 <HAL_RCC_ClockConfig+0x35c>)
 8006f44:	5cd3      	ldrb	r3, [r2, r3]
 8006f46:	f003 031f 	and.w	r3, r3, #31
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f50:	4a0a      	ldr	r2, [pc, #40]	; (8006f7c <HAL_RCC_ClockConfig+0x360>)
 8006f52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f54:	4a0a      	ldr	r2, [pc, #40]	; (8006f80 <HAL_RCC_ClockConfig+0x364>)
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006f5a:	4b0a      	ldr	r3, [pc, #40]	; (8006f84 <HAL_RCC_ClockConfig+0x368>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fb fb64 	bl	800262c <HAL_InitTick>
 8006f64:	4603      	mov	r3, r0
 8006f66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3718      	adds	r7, #24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	58024400 	.word	0x58024400
 8006f78:	0800d348 	.word	0x0800d348
 8006f7c:	20000004 	.word	0x20000004
 8006f80:	20000000 	.word	0x20000000
 8006f84:	20000008 	.word	0x20000008

08006f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b089      	sub	sp, #36	; 0x24
 8006f8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f8e:	4bb3      	ldr	r3, [pc, #716]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f96:	2b18      	cmp	r3, #24
 8006f98:	f200 8155 	bhi.w	8007246 <HAL_RCC_GetSysClockFreq+0x2be>
 8006f9c:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa2:	bf00      	nop
 8006fa4:	08007009 	.word	0x08007009
 8006fa8:	08007247 	.word	0x08007247
 8006fac:	08007247 	.word	0x08007247
 8006fb0:	08007247 	.word	0x08007247
 8006fb4:	08007247 	.word	0x08007247
 8006fb8:	08007247 	.word	0x08007247
 8006fbc:	08007247 	.word	0x08007247
 8006fc0:	08007247 	.word	0x08007247
 8006fc4:	0800702f 	.word	0x0800702f
 8006fc8:	08007247 	.word	0x08007247
 8006fcc:	08007247 	.word	0x08007247
 8006fd0:	08007247 	.word	0x08007247
 8006fd4:	08007247 	.word	0x08007247
 8006fd8:	08007247 	.word	0x08007247
 8006fdc:	08007247 	.word	0x08007247
 8006fe0:	08007247 	.word	0x08007247
 8006fe4:	08007035 	.word	0x08007035
 8006fe8:	08007247 	.word	0x08007247
 8006fec:	08007247 	.word	0x08007247
 8006ff0:	08007247 	.word	0x08007247
 8006ff4:	08007247 	.word	0x08007247
 8006ff8:	08007247 	.word	0x08007247
 8006ffc:	08007247 	.word	0x08007247
 8007000:	08007247 	.word	0x08007247
 8007004:	0800703b 	.word	0x0800703b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007008:	4b94      	ldr	r3, [pc, #592]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0320 	and.w	r3, r3, #32
 8007010:	2b00      	cmp	r3, #0
 8007012:	d009      	beq.n	8007028 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007014:	4b91      	ldr	r3, [pc, #580]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	08db      	lsrs	r3, r3, #3
 800701a:	f003 0303 	and.w	r3, r3, #3
 800701e:	4a90      	ldr	r2, [pc, #576]	; (8007260 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007020:	fa22 f303 	lsr.w	r3, r2, r3
 8007024:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007026:	e111      	b.n	800724c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007028:	4b8d      	ldr	r3, [pc, #564]	; (8007260 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800702a:	61bb      	str	r3, [r7, #24]
    break;
 800702c:	e10e      	b.n	800724c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800702e:	4b8d      	ldr	r3, [pc, #564]	; (8007264 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007030:	61bb      	str	r3, [r7, #24]
    break;
 8007032:	e10b      	b.n	800724c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007034:	4b8c      	ldr	r3, [pc, #560]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007036:	61bb      	str	r3, [r7, #24]
    break;
 8007038:	e108      	b.n	800724c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800703a:	4b88      	ldr	r3, [pc, #544]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800703c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703e:	f003 0303 	and.w	r3, r3, #3
 8007042:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007044:	4b85      	ldr	r3, [pc, #532]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007048:	091b      	lsrs	r3, r3, #4
 800704a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800704e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007050:	4b82      	ldr	r3, [pc, #520]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800705a:	4b80      	ldr	r3, [pc, #512]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800705c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705e:	08db      	lsrs	r3, r3, #3
 8007060:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	fb02 f303 	mul.w	r3, r2, r3
 800706a:	ee07 3a90 	vmov	s15, r3
 800706e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007072:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 80e1 	beq.w	8007240 <HAL_RCC_GetSysClockFreq+0x2b8>
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	2b02      	cmp	r3, #2
 8007082:	f000 8083 	beq.w	800718c <HAL_RCC_GetSysClockFreq+0x204>
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	2b02      	cmp	r3, #2
 800708a:	f200 80a1 	bhi.w	80071d0 <HAL_RCC_GetSysClockFreq+0x248>
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d003      	beq.n	800709c <HAL_RCC_GetSysClockFreq+0x114>
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d056      	beq.n	8007148 <HAL_RCC_GetSysClockFreq+0x1c0>
 800709a:	e099      	b.n	80071d0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800709c:	4b6f      	ldr	r3, [pc, #444]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0320 	and.w	r3, r3, #32
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d02d      	beq.n	8007104 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070a8:	4b6c      	ldr	r3, [pc, #432]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	08db      	lsrs	r3, r3, #3
 80070ae:	f003 0303 	and.w	r3, r3, #3
 80070b2:	4a6b      	ldr	r2, [pc, #428]	; (8007260 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070b4:	fa22 f303 	lsr.w	r3, r2, r3
 80070b8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	ee07 3a90 	vmov	s15, r3
 80070c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	ee07 3a90 	vmov	s15, r3
 80070ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070d2:	4b62      	ldr	r3, [pc, #392]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80070e6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800726c <HAL_RCC_GetSysClockFreq+0x2e4>
 80070ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007102:	e087      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	ee07 3a90 	vmov	s15, r3
 800710a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800710e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007270 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007116:	4b51      	ldr	r3, [pc, #324]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800711e:	ee07 3a90 	vmov	s15, r3
 8007122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007126:	ed97 6a02 	vldr	s12, [r7, #8]
 800712a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800726c <HAL_RCC_GetSysClockFreq+0x2e4>
 800712e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800713a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800713e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007142:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007146:	e065      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007152:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007274 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800715a:	4b40      	ldr	r3, [pc, #256]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800715c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007162:	ee07 3a90 	vmov	s15, r3
 8007166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800716a:	ed97 6a02 	vldr	s12, [r7, #8]
 800716e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800726c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800717a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800717e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007186:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800718a:	e043      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007196:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007278 <HAL_RCC_GetSysClockFreq+0x2f0>
 800719a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800719e:	4b2f      	ldr	r3, [pc, #188]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80071b2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800726c <HAL_RCC_GetSysClockFreq+0x2e4>
 80071b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071ce:	e021      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	ee07 3a90 	vmov	s15, r3
 80071d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071da:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007274 <HAL_RCC_GetSysClockFreq+0x2ec>
 80071de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e2:	4b1e      	ldr	r3, [pc, #120]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80071f6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800726c <HAL_RCC_GetSysClockFreq+0x2e4>
 80071fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800720a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007212:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007214:	4b11      	ldr	r3, [pc, #68]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007218:	0a5b      	lsrs	r3, r3, #9
 800721a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800721e:	3301      	adds	r3, #1
 8007220:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	ee07 3a90 	vmov	s15, r3
 8007228:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800722c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007238:	ee17 3a90 	vmov	r3, s15
 800723c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800723e:	e005      	b.n	800724c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	61bb      	str	r3, [r7, #24]
    break;
 8007244:	e002      	b.n	800724c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007246:	4b07      	ldr	r3, [pc, #28]	; (8007264 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007248:	61bb      	str	r3, [r7, #24]
    break;
 800724a:	bf00      	nop
  }

  return sysclockfreq;
 800724c:	69bb      	ldr	r3, [r7, #24]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3724      	adds	r7, #36	; 0x24
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	58024400 	.word	0x58024400
 8007260:	03d09000 	.word	0x03d09000
 8007264:	003d0900 	.word	0x003d0900
 8007268:	017d7840 	.word	0x017d7840
 800726c:	46000000 	.word	0x46000000
 8007270:	4c742400 	.word	0x4c742400
 8007274:	4a742400 	.word	0x4a742400
 8007278:	4bbebc20 	.word	0x4bbebc20

0800727c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007282:	f7ff fe81 	bl	8006f88 <HAL_RCC_GetSysClockFreq>
 8007286:	4602      	mov	r2, r0
 8007288:	4b10      	ldr	r3, [pc, #64]	; (80072cc <HAL_RCC_GetHCLKFreq+0x50>)
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	0a1b      	lsrs	r3, r3, #8
 800728e:	f003 030f 	and.w	r3, r3, #15
 8007292:	490f      	ldr	r1, [pc, #60]	; (80072d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007294:	5ccb      	ldrb	r3, [r1, r3]
 8007296:	f003 031f 	and.w	r3, r3, #31
 800729a:	fa22 f303 	lsr.w	r3, r2, r3
 800729e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072a0:	4b0a      	ldr	r3, [pc, #40]	; (80072cc <HAL_RCC_GetHCLKFreq+0x50>)
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	f003 030f 	and.w	r3, r3, #15
 80072a8:	4a09      	ldr	r2, [pc, #36]	; (80072d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80072aa:	5cd3      	ldrb	r3, [r2, r3]
 80072ac:	f003 031f 	and.w	r3, r3, #31
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	fa22 f303 	lsr.w	r3, r2, r3
 80072b6:	4a07      	ldr	r2, [pc, #28]	; (80072d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80072b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072ba:	4a07      	ldr	r2, [pc, #28]	; (80072d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80072c0:	4b04      	ldr	r3, [pc, #16]	; (80072d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80072c2:	681b      	ldr	r3, [r3, #0]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	58024400 	.word	0x58024400
 80072d0:	0800d348 	.word	0x0800d348
 80072d4:	20000004 	.word	0x20000004
 80072d8:	20000000 	.word	0x20000000

080072dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80072e0:	f7ff ffcc 	bl	800727c <HAL_RCC_GetHCLKFreq>
 80072e4:	4602      	mov	r2, r0
 80072e6:	4b06      	ldr	r3, [pc, #24]	; (8007300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	091b      	lsrs	r3, r3, #4
 80072ec:	f003 0307 	and.w	r3, r3, #7
 80072f0:	4904      	ldr	r1, [pc, #16]	; (8007304 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072f2:	5ccb      	ldrb	r3, [r1, r3]
 80072f4:	f003 031f 	and.w	r3, r3, #31
 80072f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	58024400 	.word	0x58024400
 8007304:	0800d348 	.word	0x0800d348

08007308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800730c:	f7ff ffb6 	bl	800727c <HAL_RCC_GetHCLKFreq>
 8007310:	4602      	mov	r2, r0
 8007312:	4b06      	ldr	r3, [pc, #24]	; (800732c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	0a1b      	lsrs	r3, r3, #8
 8007318:	f003 0307 	and.w	r3, r3, #7
 800731c:	4904      	ldr	r1, [pc, #16]	; (8007330 <HAL_RCC_GetPCLK2Freq+0x28>)
 800731e:	5ccb      	ldrb	r3, [r1, r3]
 8007320:	f003 031f 	and.w	r3, r3, #31
 8007324:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007328:	4618      	mov	r0, r3
 800732a:	bd80      	pop	{r7, pc}
 800732c:	58024400 	.word	0x58024400
 8007330:	0800d348 	.word	0x0800d348

08007334 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	223f      	movs	r2, #63	; 0x3f
 8007342:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007344:	4b1a      	ldr	r3, [pc, #104]	; (80073b0 <HAL_RCC_GetClockConfig+0x7c>)
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	f003 0207 	and.w	r2, r3, #7
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007350:	4b17      	ldr	r3, [pc, #92]	; (80073b0 <HAL_RCC_GetClockConfig+0x7c>)
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800735c:	4b14      	ldr	r3, [pc, #80]	; (80073b0 <HAL_RCC_GetClockConfig+0x7c>)
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	f003 020f 	and.w	r2, r3, #15
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007368:	4b11      	ldr	r3, [pc, #68]	; (80073b0 <HAL_RCC_GetClockConfig+0x7c>)
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007374:	4b0e      	ldr	r3, [pc, #56]	; (80073b0 <HAL_RCC_GetClockConfig+0x7c>)
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007380:	4b0b      	ldr	r3, [pc, #44]	; (80073b0 <HAL_RCC_GetClockConfig+0x7c>)
 8007382:	69db      	ldr	r3, [r3, #28]
 8007384:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800738c:	4b08      	ldr	r3, [pc, #32]	; (80073b0 <HAL_RCC_GetClockConfig+0x7c>)
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007398:	4b06      	ldr	r3, [pc, #24]	; (80073b4 <HAL_RCC_GetClockConfig+0x80>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 020f 	and.w	r2, r3, #15
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	601a      	str	r2, [r3, #0]
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	58024400 	.word	0x58024400
 80073b4:	52002000 	.word	0x52002000

080073b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073c0:	2300      	movs	r3, #0
 80073c2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073c4:	2300      	movs	r3, #0
 80073c6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d03f      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073dc:	d02a      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80073de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073e2:	d824      	bhi.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80073e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073e8:	d018      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80073ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073ee:	d81e      	bhi.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80073f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073f8:	d007      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80073fa:	e018      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073fc:	4bab      	ldr	r3, [pc, #684]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007400:	4aaa      	ldr	r2, [pc, #680]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007406:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007408:	e015      	b.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	3304      	adds	r3, #4
 800740e:	2102      	movs	r1, #2
 8007410:	4618      	mov	r0, r3
 8007412:	f001 f9cf 	bl	80087b4 <RCCEx_PLL2_Config>
 8007416:	4603      	mov	r3, r0
 8007418:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800741a:	e00c      	b.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	3324      	adds	r3, #36	; 0x24
 8007420:	2102      	movs	r1, #2
 8007422:	4618      	mov	r0, r3
 8007424:	f001 fa78 	bl	8008918 <RCCEx_PLL3_Config>
 8007428:	4603      	mov	r3, r0
 800742a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800742c:	e003      	b.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	75fb      	strb	r3, [r7, #23]
      break;
 8007432:	e000      	b.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007434:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007436:	7dfb      	ldrb	r3, [r7, #23]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d109      	bne.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800743c:	4b9b      	ldr	r3, [pc, #620]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800743e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007440:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007448:	4998      	ldr	r1, [pc, #608]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800744a:	4313      	orrs	r3, r2
 800744c:	650b      	str	r3, [r1, #80]	; 0x50
 800744e:	e001      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007450:	7dfb      	ldrb	r3, [r7, #23]
 8007452:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800745c:	2b00      	cmp	r3, #0
 800745e:	d03d      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007464:	2b04      	cmp	r3, #4
 8007466:	d826      	bhi.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007468:	a201      	add	r2, pc, #4	; (adr r2, 8007470 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800746a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746e:	bf00      	nop
 8007470:	08007485 	.word	0x08007485
 8007474:	08007493 	.word	0x08007493
 8007478:	080074a5 	.word	0x080074a5
 800747c:	080074bd 	.word	0x080074bd
 8007480:	080074bd 	.word	0x080074bd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007484:	4b89      	ldr	r3, [pc, #548]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007488:	4a88      	ldr	r2, [pc, #544]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800748a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800748e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007490:	e015      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	3304      	adds	r3, #4
 8007496:	2100      	movs	r1, #0
 8007498:	4618      	mov	r0, r3
 800749a:	f001 f98b 	bl	80087b4 <RCCEx_PLL2_Config>
 800749e:	4603      	mov	r3, r0
 80074a0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074a2:	e00c      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	3324      	adds	r3, #36	; 0x24
 80074a8:	2100      	movs	r1, #0
 80074aa:	4618      	mov	r0, r3
 80074ac:	f001 fa34 	bl	8008918 <RCCEx_PLL3_Config>
 80074b0:	4603      	mov	r3, r0
 80074b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074b4:	e003      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	75fb      	strb	r3, [r7, #23]
      break;
 80074ba:	e000      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80074bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074be:	7dfb      	ldrb	r3, [r7, #23]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d109      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074c4:	4b79      	ldr	r3, [pc, #484]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074c8:	f023 0207 	bic.w	r2, r3, #7
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d0:	4976      	ldr	r1, [pc, #472]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	650b      	str	r3, [r1, #80]	; 0x50
 80074d6:	e001      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d8:	7dfb      	ldrb	r3, [r7, #23]
 80074da:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d042      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074f0:	d02b      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80074f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074f6:	d825      	bhi.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80074f8:	2bc0      	cmp	r3, #192	; 0xc0
 80074fa:	d028      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80074fc:	2bc0      	cmp	r3, #192	; 0xc0
 80074fe:	d821      	bhi.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007500:	2b80      	cmp	r3, #128	; 0x80
 8007502:	d016      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007504:	2b80      	cmp	r3, #128	; 0x80
 8007506:	d81d      	bhi.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800750c:	2b40      	cmp	r3, #64	; 0x40
 800750e:	d007      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007510:	e018      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007512:	4b66      	ldr	r3, [pc, #408]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007516:	4a65      	ldr	r2, [pc, #404]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800751c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800751e:	e017      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3304      	adds	r3, #4
 8007524:	2100      	movs	r1, #0
 8007526:	4618      	mov	r0, r3
 8007528:	f001 f944 	bl	80087b4 <RCCEx_PLL2_Config>
 800752c:	4603      	mov	r3, r0
 800752e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007530:	e00e      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	3324      	adds	r3, #36	; 0x24
 8007536:	2100      	movs	r1, #0
 8007538:	4618      	mov	r0, r3
 800753a:	f001 f9ed 	bl	8008918 <RCCEx_PLL3_Config>
 800753e:	4603      	mov	r3, r0
 8007540:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007542:	e005      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	75fb      	strb	r3, [r7, #23]
      break;
 8007548:	e002      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800754a:	bf00      	nop
 800754c:	e000      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800754e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007550:	7dfb      	ldrb	r3, [r7, #23]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d109      	bne.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007556:	4b55      	ldr	r3, [pc, #340]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800755a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007562:	4952      	ldr	r1, [pc, #328]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007564:	4313      	orrs	r3, r2
 8007566:	650b      	str	r3, [r1, #80]	; 0x50
 8007568:	e001      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800756a:	7dfb      	ldrb	r3, [r7, #23]
 800756c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007576:	2b00      	cmp	r3, #0
 8007578:	d049      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007580:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007584:	d030      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007586:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800758a:	d82a      	bhi.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800758c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007590:	d02c      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007592:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007596:	d824      	bhi.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007598:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800759c:	d018      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800759e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075a2:	d81e      	bhi.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d003      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80075a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075ac:	d007      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x206>
 80075ae:	e018      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075b0:	4b3e      	ldr	r3, [pc, #248]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b4:	4a3d      	ldr	r2, [pc, #244]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075bc:	e017      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	3304      	adds	r3, #4
 80075c2:	2100      	movs	r1, #0
 80075c4:	4618      	mov	r0, r3
 80075c6:	f001 f8f5 	bl	80087b4 <RCCEx_PLL2_Config>
 80075ca:	4603      	mov	r3, r0
 80075cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80075ce:	e00e      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3324      	adds	r3, #36	; 0x24
 80075d4:	2100      	movs	r1, #0
 80075d6:	4618      	mov	r0, r3
 80075d8:	f001 f99e 	bl	8008918 <RCCEx_PLL3_Config>
 80075dc:	4603      	mov	r3, r0
 80075de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075e0:	e005      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	75fb      	strb	r3, [r7, #23]
      break;
 80075e6:	e002      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80075e8:	bf00      	nop
 80075ea:	e000      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80075ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075ee:	7dfb      	ldrb	r3, [r7, #23]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10a      	bne.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80075f4:	4b2d      	ldr	r3, [pc, #180]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007602:	492a      	ldr	r1, [pc, #168]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007604:	4313      	orrs	r3, r2
 8007606:	658b      	str	r3, [r1, #88]	; 0x58
 8007608:	e001      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800760a:	7dfb      	ldrb	r3, [r7, #23]
 800760c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007616:	2b00      	cmp	r3, #0
 8007618:	d04c      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007620:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007624:	d030      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007626:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800762a:	d82a      	bhi.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800762c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007630:	d02c      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007632:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007636:	d824      	bhi.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007638:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800763c:	d018      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800763e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007642:	d81e      	bhi.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007644:	2b00      	cmp	r3, #0
 8007646:	d003      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800764c:	d007      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800764e:	e018      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007650:	4b16      	ldr	r3, [pc, #88]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007654:	4a15      	ldr	r2, [pc, #84]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800765a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800765c:	e017      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	3304      	adds	r3, #4
 8007662:	2100      	movs	r1, #0
 8007664:	4618      	mov	r0, r3
 8007666:	f001 f8a5 	bl	80087b4 <RCCEx_PLL2_Config>
 800766a:	4603      	mov	r3, r0
 800766c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800766e:	e00e      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	3324      	adds	r3, #36	; 0x24
 8007674:	2100      	movs	r1, #0
 8007676:	4618      	mov	r0, r3
 8007678:	f001 f94e 	bl	8008918 <RCCEx_PLL3_Config>
 800767c:	4603      	mov	r3, r0
 800767e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007680:	e005      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	75fb      	strb	r3, [r7, #23]
      break;
 8007686:	e002      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007688:	bf00      	nop
 800768a:	e000      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800768c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800768e:	7dfb      	ldrb	r3, [r7, #23]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10d      	bne.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007694:	4b05      	ldr	r3, [pc, #20]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007698:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80076a2:	4902      	ldr	r1, [pc, #8]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076a4:	4313      	orrs	r3, r2
 80076a6:	658b      	str	r3, [r1, #88]	; 0x58
 80076a8:	e004      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80076aa:	bf00      	nop
 80076ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076b0:	7dfb      	ldrb	r3, [r7, #23]
 80076b2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d032      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076c4:	2b30      	cmp	r3, #48	; 0x30
 80076c6:	d01c      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80076c8:	2b30      	cmp	r3, #48	; 0x30
 80076ca:	d817      	bhi.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x344>
 80076cc:	2b20      	cmp	r3, #32
 80076ce:	d00c      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x332>
 80076d0:	2b20      	cmp	r3, #32
 80076d2:	d813      	bhi.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x344>
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d016      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80076d8:	2b10      	cmp	r3, #16
 80076da:	d10f      	bne.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076dc:	4baf      	ldr	r3, [pc, #700]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80076de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e0:	4aae      	ldr	r2, [pc, #696]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80076e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80076e8:	e00e      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	3304      	adds	r3, #4
 80076ee:	2102      	movs	r1, #2
 80076f0:	4618      	mov	r0, r3
 80076f2:	f001 f85f 	bl	80087b4 <RCCEx_PLL2_Config>
 80076f6:	4603      	mov	r3, r0
 80076f8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80076fa:	e005      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007700:	e002      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007702:	bf00      	nop
 8007704:	e000      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007706:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007708:	7dfb      	ldrb	r3, [r7, #23]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d109      	bne.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800770e:	4ba3      	ldr	r3, [pc, #652]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007712:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800771a:	49a0      	ldr	r1, [pc, #640]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800771c:	4313      	orrs	r3, r2
 800771e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007720:	e001      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007722:	7dfb      	ldrb	r3, [r7, #23]
 8007724:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d047      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007736:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800773a:	d030      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800773c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007740:	d82a      	bhi.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007742:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007746:	d02c      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007748:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800774c:	d824      	bhi.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800774e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007752:	d018      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007758:	d81e      	bhi.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800775a:	2b00      	cmp	r3, #0
 800775c:	d003      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800775e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007762:	d007      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007764:	e018      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007766:	4b8d      	ldr	r3, [pc, #564]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776a:	4a8c      	ldr	r2, [pc, #560]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800776c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007770:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007772:	e017      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	3304      	adds	r3, #4
 8007778:	2100      	movs	r1, #0
 800777a:	4618      	mov	r0, r3
 800777c:	f001 f81a 	bl	80087b4 <RCCEx_PLL2_Config>
 8007780:	4603      	mov	r3, r0
 8007782:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007784:	e00e      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	3324      	adds	r3, #36	; 0x24
 800778a:	2100      	movs	r1, #0
 800778c:	4618      	mov	r0, r3
 800778e:	f001 f8c3 	bl	8008918 <RCCEx_PLL3_Config>
 8007792:	4603      	mov	r3, r0
 8007794:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007796:	e005      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	75fb      	strb	r3, [r7, #23]
      break;
 800779c:	e002      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800779e:	bf00      	nop
 80077a0:	e000      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80077a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077a4:	7dfb      	ldrb	r3, [r7, #23]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d109      	bne.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80077aa:	4b7c      	ldr	r3, [pc, #496]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80077ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ae:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b6:	4979      	ldr	r1, [pc, #484]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80077b8:	4313      	orrs	r3, r2
 80077ba:	650b      	str	r3, [r1, #80]	; 0x50
 80077bc:	e001      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077be:	7dfb      	ldrb	r3, [r7, #23]
 80077c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d049      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077d6:	d02e      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80077d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077dc:	d828      	bhi.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80077de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077e2:	d02a      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x482>
 80077e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077e8:	d822      	bhi.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80077ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077ee:	d026      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x486>
 80077f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077f4:	d81c      	bhi.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80077f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077fa:	d010      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x466>
 80077fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007800:	d816      	bhi.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007802:	2b00      	cmp	r3, #0
 8007804:	d01d      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800780a:	d111      	bne.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	3304      	adds	r3, #4
 8007810:	2101      	movs	r1, #1
 8007812:	4618      	mov	r0, r3
 8007814:	f000 ffce 	bl	80087b4 <RCCEx_PLL2_Config>
 8007818:	4603      	mov	r3, r0
 800781a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800781c:	e012      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	3324      	adds	r3, #36	; 0x24
 8007822:	2101      	movs	r1, #1
 8007824:	4618      	mov	r0, r3
 8007826:	f001 f877 	bl	8008918 <RCCEx_PLL3_Config>
 800782a:	4603      	mov	r3, r0
 800782c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800782e:	e009      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	75fb      	strb	r3, [r7, #23]
      break;
 8007834:	e006      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007836:	bf00      	nop
 8007838:	e004      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800783a:	bf00      	nop
 800783c:	e002      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800783e:	bf00      	nop
 8007840:	e000      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007842:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007844:	7dfb      	ldrb	r3, [r7, #23]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d109      	bne.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800784a:	4b54      	ldr	r3, [pc, #336]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800784c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800784e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007856:	4951      	ldr	r1, [pc, #324]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007858:	4313      	orrs	r3, r2
 800785a:	650b      	str	r3, [r1, #80]	; 0x50
 800785c:	e001      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800785e:	7dfb      	ldrb	r3, [r7, #23]
 8007860:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d04b      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007874:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007878:	d02e      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800787a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800787e:	d828      	bhi.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007884:	d02a      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800788a:	d822      	bhi.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800788c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007890:	d026      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007892:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007896:	d81c      	bhi.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800789c:	d010      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800789e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078a2:	d816      	bhi.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d01d      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80078a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078ac:	d111      	bne.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	3304      	adds	r3, #4
 80078b2:	2101      	movs	r1, #1
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 ff7d 	bl	80087b4 <RCCEx_PLL2_Config>
 80078ba:	4603      	mov	r3, r0
 80078bc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80078be:	e012      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3324      	adds	r3, #36	; 0x24
 80078c4:	2101      	movs	r1, #1
 80078c6:	4618      	mov	r0, r3
 80078c8:	f001 f826 	bl	8008918 <RCCEx_PLL3_Config>
 80078cc:	4603      	mov	r3, r0
 80078ce:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80078d0:	e009      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	75fb      	strb	r3, [r7, #23]
      break;
 80078d6:	e006      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80078d8:	bf00      	nop
 80078da:	e004      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80078dc:	bf00      	nop
 80078de:	e002      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80078e0:	bf00      	nop
 80078e2:	e000      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80078e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078e6:	7dfb      	ldrb	r3, [r7, #23]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10a      	bne.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80078ec:	4b2b      	ldr	r3, [pc, #172]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80078ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80078fa:	4928      	ldr	r1, [pc, #160]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	658b      	str	r3, [r1, #88]	; 0x58
 8007900:	e001      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007902:	7dfb      	ldrb	r3, [r7, #23]
 8007904:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d02f      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007916:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800791a:	d00e      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800791c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007920:	d814      	bhi.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007922:	2b00      	cmp	r3, #0
 8007924:	d015      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007926:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800792a:	d10f      	bne.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800792c:	4b1b      	ldr	r3, [pc, #108]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007930:	4a1a      	ldr	r2, [pc, #104]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007936:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007938:	e00c      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3304      	adds	r3, #4
 800793e:	2101      	movs	r1, #1
 8007940:	4618      	mov	r0, r3
 8007942:	f000 ff37 	bl	80087b4 <RCCEx_PLL2_Config>
 8007946:	4603      	mov	r3, r0
 8007948:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800794a:	e003      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	75fb      	strb	r3, [r7, #23]
      break;
 8007950:	e000      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007952:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007954:	7dfb      	ldrb	r3, [r7, #23]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d109      	bne.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800795a:	4b10      	ldr	r3, [pc, #64]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800795c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800795e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007966:	490d      	ldr	r1, [pc, #52]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007968:	4313      	orrs	r3, r2
 800796a:	650b      	str	r3, [r1, #80]	; 0x50
 800796c:	e001      	b.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800796e:	7dfb      	ldrb	r3, [r7, #23]
 8007970:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d033      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007982:	2b03      	cmp	r3, #3
 8007984:	d81c      	bhi.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007986:	a201      	add	r2, pc, #4	; (adr r2, 800798c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798c:	080079c7 	.word	0x080079c7
 8007990:	080079a1 	.word	0x080079a1
 8007994:	080079af 	.word	0x080079af
 8007998:	080079c7 	.word	0x080079c7
 800799c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079a0:	4bb8      	ldr	r3, [pc, #736]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a4:	4ab7      	ldr	r2, [pc, #732]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80079ac:	e00c      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	3304      	adds	r3, #4
 80079b2:	2102      	movs	r1, #2
 80079b4:	4618      	mov	r0, r3
 80079b6:	f000 fefd 	bl	80087b4 <RCCEx_PLL2_Config>
 80079ba:	4603      	mov	r3, r0
 80079bc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80079be:	e003      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	75fb      	strb	r3, [r7, #23]
      break;
 80079c4:	e000      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80079c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079c8:	7dfb      	ldrb	r3, [r7, #23]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d109      	bne.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80079ce:	4bad      	ldr	r3, [pc, #692]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079d2:	f023 0203 	bic.w	r2, r3, #3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079da:	49aa      	ldr	r1, [pc, #680]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	64cb      	str	r3, [r1, #76]	; 0x4c
 80079e0:	e001      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
 80079e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 8086 	beq.w	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079f4:	4ba4      	ldr	r3, [pc, #656]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4aa3      	ldr	r2, [pc, #652]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80079fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a00:	f7fb fb5c 	bl	80030bc <HAL_GetTick>
 8007a04:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a06:	e009      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a08:	f7fb fb58 	bl	80030bc <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	2b64      	cmp	r3, #100	; 0x64
 8007a14:	d902      	bls.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	75fb      	strb	r3, [r7, #23]
        break;
 8007a1a:	e005      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a1c:	4b9a      	ldr	r3, [pc, #616]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d0ef      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007a28:	7dfb      	ldrb	r3, [r7, #23]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d166      	bne.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007a2e:	4b95      	ldr	r3, [pc, #596]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a38:	4053      	eors	r3, r2
 8007a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d013      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a42:	4b90      	ldr	r3, [pc, #576]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a4a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a4c:	4b8d      	ldr	r3, [pc, #564]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a50:	4a8c      	ldr	r2, [pc, #560]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a56:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a58:	4b8a      	ldr	r3, [pc, #552]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a5c:	4a89      	ldr	r2, [pc, #548]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a62:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007a64:	4a87      	ldr	r2, [pc, #540]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a74:	d115      	bne.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a76:	f7fb fb21 	bl	80030bc <HAL_GetTick>
 8007a7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a7c:	e00b      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a7e:	f7fb fb1d 	bl	80030bc <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d902      	bls.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	75fb      	strb	r3, [r7, #23]
            break;
 8007a94:	e005      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a96:	4b7b      	ldr	r3, [pc, #492]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d0ed      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007aa2:	7dfb      	ldrb	r3, [r7, #23]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d126      	bne.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ab6:	d10d      	bne.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007ab8:	4b72      	ldr	r3, [pc, #456]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ac6:	0919      	lsrs	r1, r3, #4
 8007ac8:	4b70      	ldr	r3, [pc, #448]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007aca:	400b      	ands	r3, r1
 8007acc:	496d      	ldr	r1, [pc, #436]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	610b      	str	r3, [r1, #16]
 8007ad2:	e005      	b.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007ad4:	4b6b      	ldr	r3, [pc, #428]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	4a6a      	ldr	r2, [pc, #424]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ada:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007ade:	6113      	str	r3, [r2, #16]
 8007ae0:	4b68      	ldr	r3, [pc, #416]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ae2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007aee:	4965      	ldr	r1, [pc, #404]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	670b      	str	r3, [r1, #112]	; 0x70
 8007af4:	e004      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007af6:	7dfb      	ldrb	r3, [r7, #23]
 8007af8:	75bb      	strb	r3, [r7, #22]
 8007afa:	e001      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007afc:	7dfb      	ldrb	r3, [r7, #23]
 8007afe:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d07e      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b10:	2b28      	cmp	r3, #40	; 0x28
 8007b12:	d867      	bhi.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007b14:	a201      	add	r2, pc, #4	; (adr r2, 8007b1c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1a:	bf00      	nop
 8007b1c:	08007beb 	.word	0x08007beb
 8007b20:	08007be5 	.word	0x08007be5
 8007b24:	08007be5 	.word	0x08007be5
 8007b28:	08007be5 	.word	0x08007be5
 8007b2c:	08007be5 	.word	0x08007be5
 8007b30:	08007be5 	.word	0x08007be5
 8007b34:	08007be5 	.word	0x08007be5
 8007b38:	08007be5 	.word	0x08007be5
 8007b3c:	08007bc1 	.word	0x08007bc1
 8007b40:	08007be5 	.word	0x08007be5
 8007b44:	08007be5 	.word	0x08007be5
 8007b48:	08007be5 	.word	0x08007be5
 8007b4c:	08007be5 	.word	0x08007be5
 8007b50:	08007be5 	.word	0x08007be5
 8007b54:	08007be5 	.word	0x08007be5
 8007b58:	08007be5 	.word	0x08007be5
 8007b5c:	08007bd3 	.word	0x08007bd3
 8007b60:	08007be5 	.word	0x08007be5
 8007b64:	08007be5 	.word	0x08007be5
 8007b68:	08007be5 	.word	0x08007be5
 8007b6c:	08007be5 	.word	0x08007be5
 8007b70:	08007be5 	.word	0x08007be5
 8007b74:	08007be5 	.word	0x08007be5
 8007b78:	08007be5 	.word	0x08007be5
 8007b7c:	08007beb 	.word	0x08007beb
 8007b80:	08007be5 	.word	0x08007be5
 8007b84:	08007be5 	.word	0x08007be5
 8007b88:	08007be5 	.word	0x08007be5
 8007b8c:	08007be5 	.word	0x08007be5
 8007b90:	08007be5 	.word	0x08007be5
 8007b94:	08007be5 	.word	0x08007be5
 8007b98:	08007be5 	.word	0x08007be5
 8007b9c:	08007beb 	.word	0x08007beb
 8007ba0:	08007be5 	.word	0x08007be5
 8007ba4:	08007be5 	.word	0x08007be5
 8007ba8:	08007be5 	.word	0x08007be5
 8007bac:	08007be5 	.word	0x08007be5
 8007bb0:	08007be5 	.word	0x08007be5
 8007bb4:	08007be5 	.word	0x08007be5
 8007bb8:	08007be5 	.word	0x08007be5
 8007bbc:	08007beb 	.word	0x08007beb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 fdf4 	bl	80087b4 <RCCEx_PLL2_Config>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007bd0:	e00c      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	3324      	adds	r3, #36	; 0x24
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f000 fe9d 	bl	8008918 <RCCEx_PLL3_Config>
 8007bde:	4603      	mov	r3, r0
 8007be0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007be2:	e003      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	75fb      	strb	r3, [r7, #23]
      break;
 8007be8:	e000      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007bea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bec:	7dfb      	ldrb	r3, [r7, #23]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d109      	bne.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007bf2:	4b24      	ldr	r3, [pc, #144]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bfe:	4921      	ldr	r1, [pc, #132]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007c00:	4313      	orrs	r3, r2
 8007c02:	654b      	str	r3, [r1, #84]	; 0x54
 8007c04:	e001      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c06:	7dfb      	ldrb	r3, [r7, #23]
 8007c08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0302 	and.w	r3, r3, #2
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d03e      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c1a:	2b05      	cmp	r3, #5
 8007c1c:	d820      	bhi.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007c1e:	a201      	add	r2, pc, #4	; (adr r2, 8007c24 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c24:	08007c67 	.word	0x08007c67
 8007c28:	08007c3d 	.word	0x08007c3d
 8007c2c:	08007c4f 	.word	0x08007c4f
 8007c30:	08007c67 	.word	0x08007c67
 8007c34:	08007c67 	.word	0x08007c67
 8007c38:	08007c67 	.word	0x08007c67
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	3304      	adds	r3, #4
 8007c40:	2101      	movs	r1, #1
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 fdb6 	bl	80087b4 <RCCEx_PLL2_Config>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007c4c:	e00c      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	3324      	adds	r3, #36	; 0x24
 8007c52:	2101      	movs	r1, #1
 8007c54:	4618      	mov	r0, r3
 8007c56:	f000 fe5f 	bl	8008918 <RCCEx_PLL3_Config>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007c5e:	e003      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	75fb      	strb	r3, [r7, #23]
      break;
 8007c64:	e000      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007c66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d110      	bne.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007c6e:	4b05      	ldr	r3, [pc, #20]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c72:	f023 0207 	bic.w	r2, r3, #7
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c7a:	4902      	ldr	r1, [pc, #8]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	654b      	str	r3, [r1, #84]	; 0x54
 8007c80:	e008      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8007c82:	bf00      	nop
 8007c84:	58024400 	.word	0x58024400
 8007c88:	58024800 	.word	0x58024800
 8007c8c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c90:	7dfb      	ldrb	r3, [r7, #23]
 8007c92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0304 	and.w	r3, r3, #4
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d039      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca6:	2b05      	cmp	r3, #5
 8007ca8:	d820      	bhi.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007caa:	a201      	add	r2, pc, #4	; (adr r2, 8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb0:	08007cf3 	.word	0x08007cf3
 8007cb4:	08007cc9 	.word	0x08007cc9
 8007cb8:	08007cdb 	.word	0x08007cdb
 8007cbc:	08007cf3 	.word	0x08007cf3
 8007cc0:	08007cf3 	.word	0x08007cf3
 8007cc4:	08007cf3 	.word	0x08007cf3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	3304      	adds	r3, #4
 8007ccc:	2101      	movs	r1, #1
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f000 fd70 	bl	80087b4 <RCCEx_PLL2_Config>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007cd8:	e00c      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	3324      	adds	r3, #36	; 0x24
 8007cde:	2101      	movs	r1, #1
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 fe19 	bl	8008918 <RCCEx_PLL3_Config>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007cea:	e003      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	75fb      	strb	r3, [r7, #23]
      break;
 8007cf0:	e000      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007cf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cf4:	7dfb      	ldrb	r3, [r7, #23]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d10a      	bne.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cfa:	4bb7      	ldr	r3, [pc, #732]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cfe:	f023 0207 	bic.w	r2, r3, #7
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d08:	49b3      	ldr	r1, [pc, #716]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	658b      	str	r3, [r1, #88]	; 0x58
 8007d0e:	e001      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d10:	7dfb      	ldrb	r3, [r7, #23]
 8007d12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0320 	and.w	r3, r3, #32
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d04b      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d2a:	d02e      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007d2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d30:	d828      	bhi.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d36:	d02a      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d3c:	d822      	bhi.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007d3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d42:	d026      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007d44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d48:	d81c      	bhi.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d4e:	d010      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d54:	d816      	bhi.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d01d      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007d5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d5e:	d111      	bne.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	3304      	adds	r3, #4
 8007d64:	2100      	movs	r1, #0
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 fd24 	bl	80087b4 <RCCEx_PLL2_Config>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007d70:	e012      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	3324      	adds	r3, #36	; 0x24
 8007d76:	2102      	movs	r1, #2
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 fdcd 	bl	8008918 <RCCEx_PLL3_Config>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007d82:	e009      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	75fb      	strb	r3, [r7, #23]
      break;
 8007d88:	e006      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007d8a:	bf00      	nop
 8007d8c:	e004      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007d8e:	bf00      	nop
 8007d90:	e002      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007d92:	bf00      	nop
 8007d94:	e000      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007d96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d98:	7dfb      	ldrb	r3, [r7, #23]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10a      	bne.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d9e:	4b8e      	ldr	r3, [pc, #568]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dac:	498a      	ldr	r1, [pc, #552]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	654b      	str	r3, [r1, #84]	; 0x54
 8007db2:	e001      	b.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db4:	7dfb      	ldrb	r3, [r7, #23]
 8007db6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d04b      	beq.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007dca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007dce:	d02e      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007dd0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007dd4:	d828      	bhi.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dda:	d02a      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007de0:	d822      	bhi.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007de2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007de6:	d026      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007de8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dec:	d81c      	bhi.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007df2:	d010      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007df8:	d816      	bhi.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d01d      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e02:	d111      	bne.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3304      	adds	r3, #4
 8007e08:	2100      	movs	r1, #0
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 fcd2 	bl	80087b4 <RCCEx_PLL2_Config>
 8007e10:	4603      	mov	r3, r0
 8007e12:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007e14:	e012      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	3324      	adds	r3, #36	; 0x24
 8007e1a:	2102      	movs	r1, #2
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f000 fd7b 	bl	8008918 <RCCEx_PLL3_Config>
 8007e22:	4603      	mov	r3, r0
 8007e24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007e26:	e009      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e2c:	e006      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007e2e:	bf00      	nop
 8007e30:	e004      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007e32:	bf00      	nop
 8007e34:	e002      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007e36:	bf00      	nop
 8007e38:	e000      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007e3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e3c:	7dfb      	ldrb	r3, [r7, #23]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10a      	bne.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e42:	4b65      	ldr	r3, [pc, #404]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e46:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e50:	4961      	ldr	r1, [pc, #388]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	658b      	str	r3, [r1, #88]	; 0x58
 8007e56:	e001      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e58:	7dfb      	ldrb	r3, [r7, #23]
 8007e5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d04b      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e6e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007e72:	d02e      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007e74:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007e78:	d828      	bhi.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e7e:	d02a      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e84:	d822      	bhi.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007e86:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007e8a:	d026      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007e8c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007e90:	d81c      	bhi.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007e92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e96:	d010      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007e98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e9c:	d816      	bhi.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d01d      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ea6:	d111      	bne.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	2100      	movs	r1, #0
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 fc80 	bl	80087b4 <RCCEx_PLL2_Config>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007eb8:	e012      	b.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	3324      	adds	r3, #36	; 0x24
 8007ebe:	2102      	movs	r1, #2
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 fd29 	bl	8008918 <RCCEx_PLL3_Config>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007eca:	e009      	b.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	75fb      	strb	r3, [r7, #23]
      break;
 8007ed0:	e006      	b.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007ed2:	bf00      	nop
 8007ed4:	e004      	b.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007ed6:	bf00      	nop
 8007ed8:	e002      	b.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007eda:	bf00      	nop
 8007edc:	e000      	b.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007ede:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ee0:	7dfb      	ldrb	r3, [r7, #23]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10a      	bne.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007ee6:	4b3c      	ldr	r3, [pc, #240]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ef4:	4938      	ldr	r1, [pc, #224]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	658b      	str	r3, [r1, #88]	; 0x58
 8007efa:	e001      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007efc:	7dfb      	ldrb	r3, [r7, #23]
 8007efe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0308 	and.w	r3, r3, #8
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d01a      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f16:	d10a      	bne.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	3324      	adds	r3, #36	; 0x24
 8007f1c:	2102      	movs	r1, #2
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 fcfa 	bl	8008918 <RCCEx_PLL3_Config>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007f2e:	4b2a      	ldr	r3, [pc, #168]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f32:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f3c:	4926      	ldr	r1, [pc, #152]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 0310 	and.w	r3, r3, #16
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d01a      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f58:	d10a      	bne.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	3324      	adds	r3, #36	; 0x24
 8007f5e:	2102      	movs	r1, #2
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 fcd9 	bl	8008918 <RCCEx_PLL3_Config>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d001      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f70:	4b19      	ldr	r3, [pc, #100]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f7e:	4916      	ldr	r1, [pc, #88]	; (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007f80:	4313      	orrs	r3, r2
 8007f82:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d036      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007f96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f9a:	d01f      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007f9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fa0:	d817      	bhi.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d003      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007faa:	d009      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007fac:	e011      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	3304      	adds	r3, #4
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 fbfd 	bl	80087b4 <RCCEx_PLL2_Config>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007fbe:	e00e      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	3324      	adds	r3, #36	; 0x24
 8007fc4:	2102      	movs	r1, #2
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 fca6 	bl	8008918 <RCCEx_PLL3_Config>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007fd0:	e005      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	75fb      	strb	r3, [r7, #23]
      break;
 8007fd6:	e002      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007fd8:	58024400 	.word	0x58024400
      break;
 8007fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fde:	7dfb      	ldrb	r3, [r7, #23]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10a      	bne.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007fe4:	4b93      	ldr	r3, [pc, #588]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fe8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ff2:	4990      	ldr	r1, [pc, #576]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	658b      	str	r3, [r1, #88]	; 0x58
 8007ff8:	e001      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ffa:	7dfb      	ldrb	r3, [r7, #23]
 8007ffc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d033      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008010:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008014:	d01c      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008016:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800801a:	d816      	bhi.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800801c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008020:	d003      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008022:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008026:	d007      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008028:	e00f      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800802a:	4b82      	ldr	r3, [pc, #520]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800802c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802e:	4a81      	ldr	r2, [pc, #516]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008034:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008036:	e00c      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	3324      	adds	r3, #36	; 0x24
 800803c:	2101      	movs	r1, #1
 800803e:	4618      	mov	r0, r3
 8008040:	f000 fc6a 	bl	8008918 <RCCEx_PLL3_Config>
 8008044:	4603      	mov	r3, r0
 8008046:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008048:	e003      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	75fb      	strb	r3, [r7, #23]
      break;
 800804e:	e000      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008050:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008052:	7dfb      	ldrb	r3, [r7, #23]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10a      	bne.n	800806e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008058:	4b76      	ldr	r3, [pc, #472]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800805a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800805c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008066:	4973      	ldr	r1, [pc, #460]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008068:	4313      	orrs	r3, r2
 800806a:	654b      	str	r3, [r1, #84]	; 0x54
 800806c:	e001      	b.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800806e:	7dfb      	ldrb	r3, [r7, #23]
 8008070:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800807a:	2b00      	cmp	r3, #0
 800807c:	d029      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008082:	2b00      	cmp	r3, #0
 8008084:	d003      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800808a:	d007      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800808c:	e00f      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800808e:	4b69      	ldr	r3, [pc, #420]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008092:	4a68      	ldr	r2, [pc, #416]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008098:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800809a:	e00b      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	3304      	adds	r3, #4
 80080a0:	2102      	movs	r1, #2
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 fb86 	bl	80087b4 <RCCEx_PLL2_Config>
 80080a8:	4603      	mov	r3, r0
 80080aa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80080ac:	e002      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	75fb      	strb	r3, [r7, #23]
      break;
 80080b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080b4:	7dfb      	ldrb	r3, [r7, #23]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d109      	bne.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80080ba:	4b5e      	ldr	r3, [pc, #376]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080c6:	495b      	ldr	r1, [pc, #364]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80080cc:	e001      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ce:	7dfb      	ldrb	r3, [r7, #23]
 80080d0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00a      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	3324      	adds	r3, #36	; 0x24
 80080e2:	2102      	movs	r1, #2
 80080e4:	4618      	mov	r0, r3
 80080e6:	f000 fc17 	bl	8008918 <RCCEx_PLL3_Config>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d001      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d030      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008104:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008108:	d017      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800810a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800810e:	d811      	bhi.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008114:	d013      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800811a:	d80b      	bhi.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800811c:	2b00      	cmp	r3, #0
 800811e:	d010      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008124:	d106      	bne.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008126:	4b43      	ldr	r3, [pc, #268]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812a:	4a42      	ldr	r2, [pc, #264]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800812c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008130:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008132:	e007      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	75fb      	strb	r3, [r7, #23]
      break;
 8008138:	e004      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800813a:	bf00      	nop
 800813c:	e002      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800813e:	bf00      	nop
 8008140:	e000      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008142:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008144:	7dfb      	ldrb	r3, [r7, #23]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d109      	bne.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800814a:	4b3a      	ldr	r3, [pc, #232]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800814c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800814e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008156:	4937      	ldr	r1, [pc, #220]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008158:	4313      	orrs	r3, r2
 800815a:	654b      	str	r3, [r1, #84]	; 0x54
 800815c:	e001      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800815e:	7dfb      	ldrb	r3, [r7, #23]
 8008160:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800816a:	2b00      	cmp	r3, #0
 800816c:	d008      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800816e:	4b31      	ldr	r3, [pc, #196]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008172:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800817a:	492e      	ldr	r1, [pc, #184]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800817c:	4313      	orrs	r3, r2
 800817e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d009      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800818c:	4b29      	ldr	r3, [pc, #164]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800819a:	4926      	ldr	r1, [pc, #152]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800819c:	4313      	orrs	r3, r2
 800819e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d008      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80081ac:	4b21      	ldr	r3, [pc, #132]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081b8:	491e      	ldr	r1, [pc, #120]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00d      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80081ca:	4b1a      	ldr	r3, [pc, #104]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	4a19      	ldr	r2, [pc, #100]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80081d4:	6113      	str	r3, [r2, #16]
 80081d6:	4b17      	ldr	r3, [pc, #92]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081d8:	691a      	ldr	r2, [r3, #16]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80081e0:	4914      	ldr	r1, [pc, #80]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	da08      	bge.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80081ee:	4b11      	ldr	r3, [pc, #68]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081fa:	490e      	ldr	r1, [pc, #56]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081fc:	4313      	orrs	r3, r2
 80081fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d009      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800820c:	4b09      	ldr	r3, [pc, #36]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800820e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008210:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800821a:	4906      	ldr	r1, [pc, #24]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800821c:	4313      	orrs	r3, r2
 800821e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008220:	7dbb      	ldrb	r3, [r7, #22]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d101      	bne.n	800822a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	e000      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
}
 800822c:	4618      	mov	r0, r3
 800822e:	3718      	adds	r7, #24
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	58024400 	.word	0x58024400

08008238 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800823c:	f7ff f81e 	bl	800727c <HAL_RCC_GetHCLKFreq>
 8008240:	4602      	mov	r2, r0
 8008242:	4b06      	ldr	r3, [pc, #24]	; (800825c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	091b      	lsrs	r3, r3, #4
 8008248:	f003 0307 	and.w	r3, r3, #7
 800824c:	4904      	ldr	r1, [pc, #16]	; (8008260 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800824e:	5ccb      	ldrb	r3, [r1, r3]
 8008250:	f003 031f 	and.w	r3, r3, #31
 8008254:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008258:	4618      	mov	r0, r3
 800825a:	bd80      	pop	{r7, pc}
 800825c:	58024400 	.word	0x58024400
 8008260:	0800d348 	.word	0x0800d348

08008264 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008264:	b480      	push	{r7}
 8008266:	b089      	sub	sp, #36	; 0x24
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800826c:	4ba1      	ldr	r3, [pc, #644]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800826e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008270:	f003 0303 	and.w	r3, r3, #3
 8008274:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008276:	4b9f      	ldr	r3, [pc, #636]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827a:	0b1b      	lsrs	r3, r3, #12
 800827c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008280:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008282:	4b9c      	ldr	r3, [pc, #624]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008286:	091b      	lsrs	r3, r3, #4
 8008288:	f003 0301 	and.w	r3, r3, #1
 800828c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800828e:	4b99      	ldr	r3, [pc, #612]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008292:	08db      	lsrs	r3, r3, #3
 8008294:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	fb02 f303 	mul.w	r3, r2, r3
 800829e:	ee07 3a90 	vmov	s15, r3
 80082a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f000 8111 	beq.w	80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	f000 8083 	beq.w	80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	2b02      	cmp	r3, #2
 80082be:	f200 80a1 	bhi.w	8008404 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d003      	beq.n	80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d056      	beq.n	800837c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80082ce:	e099      	b.n	8008404 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082d0:	4b88      	ldr	r3, [pc, #544]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0320 	and.w	r3, r3, #32
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d02d      	beq.n	8008338 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082dc:	4b85      	ldr	r3, [pc, #532]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	08db      	lsrs	r3, r3, #3
 80082e2:	f003 0303 	and.w	r3, r3, #3
 80082e6:	4a84      	ldr	r2, [pc, #528]	; (80084f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80082e8:	fa22 f303 	lsr.w	r3, r2, r3
 80082ec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	ee07 3a90 	vmov	s15, r3
 80082f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	ee07 3a90 	vmov	s15, r3
 80082fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008306:	4b7b      	ldr	r3, [pc, #492]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800830e:	ee07 3a90 	vmov	s15, r3
 8008312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008316:	ed97 6a03 	vldr	s12, [r7, #12]
 800831a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80084fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800831e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800832a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800832e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008332:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008336:	e087      	b.n	8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	ee07 3a90 	vmov	s15, r3
 800833e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008342:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800834a:	4b6a      	ldr	r3, [pc, #424]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800834c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008352:	ee07 3a90 	vmov	s15, r3
 8008356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800835a:	ed97 6a03 	vldr	s12, [r7, #12]
 800835e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80084fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800836a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800836e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008376:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800837a:	e065      	b.n	8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	ee07 3a90 	vmov	s15, r3
 8008382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008386:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008504 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800838a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800838e:	4b59      	ldr	r3, [pc, #356]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008396:	ee07 3a90 	vmov	s15, r3
 800839a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800839e:	ed97 6a03 	vldr	s12, [r7, #12]
 80083a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80084fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083be:	e043      	b.n	8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	ee07 3a90 	vmov	s15, r3
 80083c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008508 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80083ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083d2:	4b48      	ldr	r3, [pc, #288]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083da:	ee07 3a90 	vmov	s15, r3
 80083de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80083e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80084fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008402:	e021      	b.n	8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	ee07 3a90 	vmov	s15, r3
 800840a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800840e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008504 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008416:	4b37      	ldr	r3, [pc, #220]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800841e:	ee07 3a90 	vmov	s15, r3
 8008422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008426:	ed97 6a03 	vldr	s12, [r7, #12]
 800842a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80084fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800842e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800843a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800843e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008442:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008446:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008448:	4b2a      	ldr	r3, [pc, #168]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800844a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844c:	0a5b      	lsrs	r3, r3, #9
 800844e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008452:	ee07 3a90 	vmov	s15, r3
 8008456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800845a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800845e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008462:	edd7 6a07 	vldr	s13, [r7, #28]
 8008466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800846a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800846e:	ee17 2a90 	vmov	r2, s15
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008476:	4b1f      	ldr	r3, [pc, #124]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847a:	0c1b      	lsrs	r3, r3, #16
 800847c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008480:	ee07 3a90 	vmov	s15, r3
 8008484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008488:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800848c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008490:	edd7 6a07 	vldr	s13, [r7, #28]
 8008494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800849c:	ee17 2a90 	vmov	r2, s15
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80084a4:	4b13      	ldr	r3, [pc, #76]	; (80084f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a8:	0e1b      	lsrs	r3, r3, #24
 80084aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ae:	ee07 3a90 	vmov	s15, r3
 80084b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084be:	edd7 6a07 	vldr	s13, [r7, #28]
 80084c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084ca:	ee17 2a90 	vmov	r2, s15
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80084d2:	e008      	b.n	80084e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	609a      	str	r2, [r3, #8]
}
 80084e6:	bf00      	nop
 80084e8:	3724      	adds	r7, #36	; 0x24
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	58024400 	.word	0x58024400
 80084f8:	03d09000 	.word	0x03d09000
 80084fc:	46000000 	.word	0x46000000
 8008500:	4c742400 	.word	0x4c742400
 8008504:	4a742400 	.word	0x4a742400
 8008508:	4bbebc20 	.word	0x4bbebc20

0800850c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800850c:	b480      	push	{r7}
 800850e:	b089      	sub	sp, #36	; 0x24
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008514:	4ba1      	ldr	r3, [pc, #644]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008518:	f003 0303 	and.w	r3, r3, #3
 800851c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800851e:	4b9f      	ldr	r3, [pc, #636]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008522:	0d1b      	lsrs	r3, r3, #20
 8008524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008528:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800852a:	4b9c      	ldr	r3, [pc, #624]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800852c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852e:	0a1b      	lsrs	r3, r3, #8
 8008530:	f003 0301 	and.w	r3, r3, #1
 8008534:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008536:	4b99      	ldr	r3, [pc, #612]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800853a:	08db      	lsrs	r3, r3, #3
 800853c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	fb02 f303 	mul.w	r3, r2, r3
 8008546:	ee07 3a90 	vmov	s15, r3
 800854a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800854e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 8111 	beq.w	800877c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	2b02      	cmp	r3, #2
 800855e:	f000 8083 	beq.w	8008668 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	2b02      	cmp	r3, #2
 8008566:	f200 80a1 	bhi.w	80086ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d003      	beq.n	8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d056      	beq.n	8008624 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008576:	e099      	b.n	80086ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008578:	4b88      	ldr	r3, [pc, #544]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0320 	and.w	r3, r3, #32
 8008580:	2b00      	cmp	r3, #0
 8008582:	d02d      	beq.n	80085e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008584:	4b85      	ldr	r3, [pc, #532]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	08db      	lsrs	r3, r3, #3
 800858a:	f003 0303 	and.w	r3, r3, #3
 800858e:	4a84      	ldr	r2, [pc, #528]	; (80087a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008590:	fa22 f303 	lsr.w	r3, r2, r3
 8008594:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	ee07 3a90 	vmov	s15, r3
 800859c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	ee07 3a90 	vmov	s15, r3
 80085a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ae:	4b7b      	ldr	r3, [pc, #492]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085b6:	ee07 3a90 	vmov	s15, r3
 80085ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085be:	ed97 6a03 	vldr	s12, [r7, #12]
 80085c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80087a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80085de:	e087      	b.n	80086f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	ee07 3a90 	vmov	s15, r3
 80085e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80085ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085f2:	4b6a      	ldr	r3, [pc, #424]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085fa:	ee07 3a90 	vmov	s15, r3
 80085fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008602:	ed97 6a03 	vldr	s12, [r7, #12]
 8008606:	eddf 5a67 	vldr	s11, [pc, #412]	; 80087a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800860a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800860e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800861a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800861e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008622:	e065      	b.n	80086f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	ee07 3a90 	vmov	s15, r3
 800862a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800862e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80087ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008636:	4b59      	ldr	r3, [pc, #356]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800863e:	ee07 3a90 	vmov	s15, r3
 8008642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008646:	ed97 6a03 	vldr	s12, [r7, #12]
 800864a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80087a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800864e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800865a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800865e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008662:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008666:	e043      	b.n	80086f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	ee07 3a90 	vmov	s15, r3
 800866e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008672:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80087b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800867a:	4b48      	ldr	r3, [pc, #288]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800867c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008682:	ee07 3a90 	vmov	s15, r3
 8008686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800868a:	ed97 6a03 	vldr	s12, [r7, #12]
 800868e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80087a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800869a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800869e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086aa:	e021      	b.n	80086f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	ee07 3a90 	vmov	s15, r3
 80086b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80087ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80086ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086be:	4b37      	ldr	r3, [pc, #220]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086c6:	ee07 3a90 	vmov	s15, r3
 80086ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80086d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80087a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80086f0:	4b2a      	ldr	r3, [pc, #168]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f4:	0a5b      	lsrs	r3, r3, #9
 80086f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086fa:	ee07 3a90 	vmov	s15, r3
 80086fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008706:	ee37 7a87 	vadd.f32	s14, s15, s14
 800870a:	edd7 6a07 	vldr	s13, [r7, #28]
 800870e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008716:	ee17 2a90 	vmov	r2, s15
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800871e:	4b1f      	ldr	r3, [pc, #124]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008722:	0c1b      	lsrs	r3, r3, #16
 8008724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008728:	ee07 3a90 	vmov	s15, r3
 800872c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008730:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008734:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008738:	edd7 6a07 	vldr	s13, [r7, #28]
 800873c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008744:	ee17 2a90 	vmov	r2, s15
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800874c:	4b13      	ldr	r3, [pc, #76]	; (800879c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800874e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008750:	0e1b      	lsrs	r3, r3, #24
 8008752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008756:	ee07 3a90 	vmov	s15, r3
 800875a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800875e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008766:	edd7 6a07 	vldr	s13, [r7, #28]
 800876a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800876e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008772:	ee17 2a90 	vmov	r2, s15
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800877a:	e008      	b.n	800878e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	609a      	str	r2, [r3, #8]
}
 800878e:	bf00      	nop
 8008790:	3724      	adds	r7, #36	; 0x24
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	58024400 	.word	0x58024400
 80087a0:	03d09000 	.word	0x03d09000
 80087a4:	46000000 	.word	0x46000000
 80087a8:	4c742400 	.word	0x4c742400
 80087ac:	4a742400 	.word	0x4a742400
 80087b0:	4bbebc20 	.word	0x4bbebc20

080087b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087be:	2300      	movs	r3, #0
 80087c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80087c2:	4b53      	ldr	r3, [pc, #332]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 80087c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c6:	f003 0303 	and.w	r3, r3, #3
 80087ca:	2b03      	cmp	r3, #3
 80087cc:	d101      	bne.n	80087d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e099      	b.n	8008906 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80087d2:	4b4f      	ldr	r3, [pc, #316]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a4e      	ldr	r2, [pc, #312]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 80087d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087de:	f7fa fc6d 	bl	80030bc <HAL_GetTick>
 80087e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087e4:	e008      	b.n	80087f8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80087e6:	f7fa fc69 	bl	80030bc <HAL_GetTick>
 80087ea:	4602      	mov	r2, r0
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d901      	bls.n	80087f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80087f4:	2303      	movs	r3, #3
 80087f6:	e086      	b.n	8008906 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087f8:	4b45      	ldr	r3, [pc, #276]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1f0      	bne.n	80087e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008804:	4b42      	ldr	r3, [pc, #264]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 8008806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008808:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	031b      	lsls	r3, r3, #12
 8008812:	493f      	ldr	r1, [pc, #252]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 8008814:	4313      	orrs	r3, r2
 8008816:	628b      	str	r3, [r1, #40]	; 0x28
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	3b01      	subs	r3, #1
 800881e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	3b01      	subs	r3, #1
 8008828:	025b      	lsls	r3, r3, #9
 800882a:	b29b      	uxth	r3, r3
 800882c:	431a      	orrs	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	3b01      	subs	r3, #1
 8008834:	041b      	lsls	r3, r3, #16
 8008836:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800883a:	431a      	orrs	r2, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	3b01      	subs	r3, #1
 8008842:	061b      	lsls	r3, r3, #24
 8008844:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008848:	4931      	ldr	r1, [pc, #196]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 800884a:	4313      	orrs	r3, r2
 800884c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800884e:	4b30      	ldr	r3, [pc, #192]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 8008850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008852:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	492d      	ldr	r1, [pc, #180]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 800885c:	4313      	orrs	r3, r2
 800885e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008860:	4b2b      	ldr	r3, [pc, #172]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 8008862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008864:	f023 0220 	bic.w	r2, r3, #32
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	699b      	ldr	r3, [r3, #24]
 800886c:	4928      	ldr	r1, [pc, #160]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 800886e:	4313      	orrs	r3, r2
 8008870:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008872:	4b27      	ldr	r3, [pc, #156]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 8008874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008876:	4a26      	ldr	r2, [pc, #152]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 8008878:	f023 0310 	bic.w	r3, r3, #16
 800887c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800887e:	4b24      	ldr	r3, [pc, #144]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 8008880:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008882:	4b24      	ldr	r3, [pc, #144]	; (8008914 <RCCEx_PLL2_Config+0x160>)
 8008884:	4013      	ands	r3, r2
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	69d2      	ldr	r2, [r2, #28]
 800888a:	00d2      	lsls	r2, r2, #3
 800888c:	4920      	ldr	r1, [pc, #128]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 800888e:	4313      	orrs	r3, r2
 8008890:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008892:	4b1f      	ldr	r3, [pc, #124]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 8008894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008896:	4a1e      	ldr	r2, [pc, #120]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 8008898:	f043 0310 	orr.w	r3, r3, #16
 800889c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d106      	bne.n	80088b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80088a4:	4b1a      	ldr	r3, [pc, #104]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 80088a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a8:	4a19      	ldr	r2, [pc, #100]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 80088aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80088b0:	e00f      	b.n	80088d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d106      	bne.n	80088c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80088b8:	4b15      	ldr	r3, [pc, #84]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 80088ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088bc:	4a14      	ldr	r2, [pc, #80]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 80088be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80088c4:	e005      	b.n	80088d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80088c6:	4b12      	ldr	r3, [pc, #72]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 80088c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ca:	4a11      	ldr	r2, [pc, #68]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 80088cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80088d2:	4b0f      	ldr	r3, [pc, #60]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a0e      	ldr	r2, [pc, #56]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 80088d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088de:	f7fa fbed 	bl	80030bc <HAL_GetTick>
 80088e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088e4:	e008      	b.n	80088f8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80088e6:	f7fa fbe9 	bl	80030bc <HAL_GetTick>
 80088ea:	4602      	mov	r2, r0
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	1ad3      	subs	r3, r2, r3
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d901      	bls.n	80088f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80088f4:	2303      	movs	r3, #3
 80088f6:	e006      	b.n	8008906 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088f8:	4b05      	ldr	r3, [pc, #20]	; (8008910 <RCCEx_PLL2_Config+0x15c>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008900:	2b00      	cmp	r3, #0
 8008902:	d0f0      	beq.n	80088e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008904:	7bfb      	ldrb	r3, [r7, #15]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	58024400 	.word	0x58024400
 8008914:	ffff0007 	.word	0xffff0007

08008918 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008926:	4b53      	ldr	r3, [pc, #332]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 8008928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892a:	f003 0303 	and.w	r3, r3, #3
 800892e:	2b03      	cmp	r3, #3
 8008930:	d101      	bne.n	8008936 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e099      	b.n	8008a6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008936:	4b4f      	ldr	r3, [pc, #316]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a4e      	ldr	r2, [pc, #312]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 800893c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008940:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008942:	f7fa fbbb 	bl	80030bc <HAL_GetTick>
 8008946:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008948:	e008      	b.n	800895c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800894a:	f7fa fbb7 	bl	80030bc <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	2b02      	cmp	r3, #2
 8008956:	d901      	bls.n	800895c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e086      	b.n	8008a6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800895c:	4b45      	ldr	r3, [pc, #276]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1f0      	bne.n	800894a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008968:	4b42      	ldr	r3, [pc, #264]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 800896a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	051b      	lsls	r3, r3, #20
 8008976:	493f      	ldr	r1, [pc, #252]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 8008978:	4313      	orrs	r3, r2
 800897a:	628b      	str	r3, [r1, #40]	; 0x28
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	3b01      	subs	r3, #1
 8008982:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	3b01      	subs	r3, #1
 800898c:	025b      	lsls	r3, r3, #9
 800898e:	b29b      	uxth	r3, r3
 8008990:	431a      	orrs	r2, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	3b01      	subs	r3, #1
 8008998:	041b      	lsls	r3, r3, #16
 800899a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800899e:	431a      	orrs	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	3b01      	subs	r3, #1
 80089a6:	061b      	lsls	r3, r3, #24
 80089a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80089ac:	4931      	ldr	r1, [pc, #196]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 80089ae:	4313      	orrs	r3, r2
 80089b0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80089b2:	4b30      	ldr	r3, [pc, #192]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 80089b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	492d      	ldr	r1, [pc, #180]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 80089c0:	4313      	orrs	r3, r2
 80089c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80089c4:	4b2b      	ldr	r3, [pc, #172]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 80089c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	699b      	ldr	r3, [r3, #24]
 80089d0:	4928      	ldr	r1, [pc, #160]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 80089d2:	4313      	orrs	r3, r2
 80089d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80089d6:	4b27      	ldr	r3, [pc, #156]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 80089d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089da:	4a26      	ldr	r2, [pc, #152]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 80089dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80089e2:	4b24      	ldr	r3, [pc, #144]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 80089e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089e6:	4b24      	ldr	r3, [pc, #144]	; (8008a78 <RCCEx_PLL3_Config+0x160>)
 80089e8:	4013      	ands	r3, r2
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	69d2      	ldr	r2, [r2, #28]
 80089ee:	00d2      	lsls	r2, r2, #3
 80089f0:	4920      	ldr	r1, [pc, #128]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 80089f2:	4313      	orrs	r3, r2
 80089f4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80089f6:	4b1f      	ldr	r3, [pc, #124]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 80089f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fa:	4a1e      	ldr	r2, [pc, #120]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 80089fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d106      	bne.n	8008a16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008a08:	4b1a      	ldr	r3, [pc, #104]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 8008a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0c:	4a19      	ldr	r2, [pc, #100]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 8008a0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008a12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a14:	e00f      	b.n	8008a36 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d106      	bne.n	8008a2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008a1c:	4b15      	ldr	r3, [pc, #84]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 8008a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a20:	4a14      	ldr	r2, [pc, #80]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 8008a22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a28:	e005      	b.n	8008a36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008a2a:	4b12      	ldr	r3, [pc, #72]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 8008a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2e:	4a11      	ldr	r2, [pc, #68]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 8008a30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008a36:	4b0f      	ldr	r3, [pc, #60]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a0e      	ldr	r2, [pc, #56]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 8008a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a42:	f7fa fb3b 	bl	80030bc <HAL_GetTick>
 8008a46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a48:	e008      	b.n	8008a5c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008a4a:	f7fa fb37 	bl	80030bc <HAL_GetTick>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d901      	bls.n	8008a5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e006      	b.n	8008a6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a5c:	4b05      	ldr	r3, [pc, #20]	; (8008a74 <RCCEx_PLL3_Config+0x15c>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d0f0      	beq.n	8008a4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	58024400 	.word	0x58024400
 8008a78:	ffff0007 	.word	0xffff0007

08008a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d101      	bne.n	8008a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e049      	b.n	8008b22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d106      	bne.n	8008aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f841 	bl	8008b2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2202      	movs	r2, #2
 8008aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	3304      	adds	r3, #4
 8008ab8:	4619      	mov	r1, r3
 8008aba:	4610      	mov	r0, r2
 8008abc:	f000 f9f8 	bl	8008eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	b083      	sub	sp, #12
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008b32:	bf00      	nop
 8008b34:	370c      	adds	r7, #12
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
	...

08008b40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d001      	beq.n	8008b58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e04f      	b.n	8008bf8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2202      	movs	r2, #2
 8008b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68da      	ldr	r2, [r3, #12]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f042 0201 	orr.w	r2, r2, #1
 8008b6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a23      	ldr	r2, [pc, #140]	; (8008c04 <HAL_TIM_Base_Start_IT+0xc4>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d01d      	beq.n	8008bb6 <HAL_TIM_Base_Start_IT+0x76>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b82:	d018      	beq.n	8008bb6 <HAL_TIM_Base_Start_IT+0x76>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a1f      	ldr	r2, [pc, #124]	; (8008c08 <HAL_TIM_Base_Start_IT+0xc8>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d013      	beq.n	8008bb6 <HAL_TIM_Base_Start_IT+0x76>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a1e      	ldr	r2, [pc, #120]	; (8008c0c <HAL_TIM_Base_Start_IT+0xcc>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d00e      	beq.n	8008bb6 <HAL_TIM_Base_Start_IT+0x76>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a1c      	ldr	r2, [pc, #112]	; (8008c10 <HAL_TIM_Base_Start_IT+0xd0>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d009      	beq.n	8008bb6 <HAL_TIM_Base_Start_IT+0x76>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a1b      	ldr	r2, [pc, #108]	; (8008c14 <HAL_TIM_Base_Start_IT+0xd4>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d004      	beq.n	8008bb6 <HAL_TIM_Base_Start_IT+0x76>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a19      	ldr	r2, [pc, #100]	; (8008c18 <HAL_TIM_Base_Start_IT+0xd8>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d115      	bne.n	8008be2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	689a      	ldr	r2, [r3, #8]
 8008bbc:	4b17      	ldr	r3, [pc, #92]	; (8008c1c <HAL_TIM_Base_Start_IT+0xdc>)
 8008bbe:	4013      	ands	r3, r2
 8008bc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2b06      	cmp	r3, #6
 8008bc6:	d015      	beq.n	8008bf4 <HAL_TIM_Base_Start_IT+0xb4>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bce:	d011      	beq.n	8008bf4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f042 0201 	orr.w	r2, r2, #1
 8008bde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008be0:	e008      	b.n	8008bf4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f042 0201 	orr.w	r2, r2, #1
 8008bf0:	601a      	str	r2, [r3, #0]
 8008bf2:	e000      	b.n	8008bf6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bf4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr
 8008c04:	40010000 	.word	0x40010000
 8008c08:	40000400 	.word	0x40000400
 8008c0c:	40000800 	.word	0x40000800
 8008c10:	40000c00 	.word	0x40000c00
 8008c14:	40010400 	.word	0x40010400
 8008c18:	40001800 	.word	0x40001800
 8008c1c:	00010007 	.word	0x00010007

08008c20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	f003 0302 	and.w	r3, r3, #2
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d122      	bne.n	8008c7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	f003 0302 	and.w	r3, r3, #2
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d11b      	bne.n	8008c7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f06f 0202 	mvn.w	r2, #2
 8008c4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2201      	movs	r2, #1
 8008c52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	f003 0303 	and.w	r3, r3, #3
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d003      	beq.n	8008c6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f905 	bl	8008e72 <HAL_TIM_IC_CaptureCallback>
 8008c68:	e005      	b.n	8008c76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f8f7 	bl	8008e5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f908 	bl	8008e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	f003 0304 	and.w	r3, r3, #4
 8008c86:	2b04      	cmp	r3, #4
 8008c88:	d122      	bne.n	8008cd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	f003 0304 	and.w	r3, r3, #4
 8008c94:	2b04      	cmp	r3, #4
 8008c96:	d11b      	bne.n	8008cd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f06f 0204 	mvn.w	r2, #4
 8008ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2202      	movs	r2, #2
 8008ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d003      	beq.n	8008cbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f8db 	bl	8008e72 <HAL_TIM_IC_CaptureCallback>
 8008cbc:	e005      	b.n	8008cca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 f8cd 	bl	8008e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f8de 	bl	8008e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	f003 0308 	and.w	r3, r3, #8
 8008cda:	2b08      	cmp	r3, #8
 8008cdc:	d122      	bne.n	8008d24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	f003 0308 	and.w	r3, r3, #8
 8008ce8:	2b08      	cmp	r3, #8
 8008cea:	d11b      	bne.n	8008d24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f06f 0208 	mvn.w	r2, #8
 8008cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2204      	movs	r2, #4
 8008cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	69db      	ldr	r3, [r3, #28]
 8008d02:	f003 0303 	and.w	r3, r3, #3
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d003      	beq.n	8008d12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f8b1 	bl	8008e72 <HAL_TIM_IC_CaptureCallback>
 8008d10:	e005      	b.n	8008d1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 f8a3 	bl	8008e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 f8b4 	bl	8008e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	f003 0310 	and.w	r3, r3, #16
 8008d2e:	2b10      	cmp	r3, #16
 8008d30:	d122      	bne.n	8008d78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	f003 0310 	and.w	r3, r3, #16
 8008d3c:	2b10      	cmp	r3, #16
 8008d3e:	d11b      	bne.n	8008d78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f06f 0210 	mvn.w	r2, #16
 8008d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2208      	movs	r2, #8
 8008d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	69db      	ldr	r3, [r3, #28]
 8008d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d003      	beq.n	8008d66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f887 	bl	8008e72 <HAL_TIM_IC_CaptureCallback>
 8008d64:	e005      	b.n	8008d72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f879 	bl	8008e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f88a 	bl	8008e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d10e      	bne.n	8008da4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	f003 0301 	and.w	r3, r3, #1
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d107      	bne.n	8008da4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f06f 0201 	mvn.w	r2, #1
 8008d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7f9 f8f8 	bl	8001f94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dae:	2b80      	cmp	r3, #128	; 0x80
 8008db0:	d10e      	bne.n	8008dd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dbc:	2b80      	cmp	r3, #128	; 0x80
 8008dbe:	d107      	bne.n	8008dd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f914 	bl	8008ff8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dde:	d10e      	bne.n	8008dfe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dea:	2b80      	cmp	r3, #128	; 0x80
 8008dec:	d107      	bne.n	8008dfe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f907 	bl	800900c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e08:	2b40      	cmp	r3, #64	; 0x40
 8008e0a:	d10e      	bne.n	8008e2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e16:	2b40      	cmp	r3, #64	; 0x40
 8008e18:	d107      	bne.n	8008e2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 f838 	bl	8008e9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	f003 0320 	and.w	r3, r3, #32
 8008e34:	2b20      	cmp	r3, #32
 8008e36:	d10e      	bne.n	8008e56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	f003 0320 	and.w	r3, r3, #32
 8008e42:	2b20      	cmp	r3, #32
 8008e44:	d107      	bne.n	8008e56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f06f 0220 	mvn.w	r2, #32
 8008e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f8c7 	bl	8008fe4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e56:	bf00      	nop
 8008e58:	3708      	adds	r7, #8
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e5e:	b480      	push	{r7}
 8008e60:	b083      	sub	sp, #12
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e66:	bf00      	nop
 8008e68:	370c      	adds	r7, #12
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e72:	b480      	push	{r7}
 8008e74:	b083      	sub	sp, #12
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e7a:	bf00      	nop
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr

08008e86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e86:	b480      	push	{r7}
 8008e88:	b083      	sub	sp, #12
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e8e:	bf00      	nop
 8008e90:	370c      	adds	r7, #12
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b083      	sub	sp, #12
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ea2:	bf00      	nop
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
	...

08008eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a40      	ldr	r2, [pc, #256]	; (8008fc4 <TIM_Base_SetConfig+0x114>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d013      	beq.n	8008ef0 <TIM_Base_SetConfig+0x40>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ece:	d00f      	beq.n	8008ef0 <TIM_Base_SetConfig+0x40>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4a3d      	ldr	r2, [pc, #244]	; (8008fc8 <TIM_Base_SetConfig+0x118>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d00b      	beq.n	8008ef0 <TIM_Base_SetConfig+0x40>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a3c      	ldr	r2, [pc, #240]	; (8008fcc <TIM_Base_SetConfig+0x11c>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d007      	beq.n	8008ef0 <TIM_Base_SetConfig+0x40>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a3b      	ldr	r2, [pc, #236]	; (8008fd0 <TIM_Base_SetConfig+0x120>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d003      	beq.n	8008ef0 <TIM_Base_SetConfig+0x40>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a3a      	ldr	r2, [pc, #232]	; (8008fd4 <TIM_Base_SetConfig+0x124>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d108      	bne.n	8008f02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a2f      	ldr	r2, [pc, #188]	; (8008fc4 <TIM_Base_SetConfig+0x114>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d01f      	beq.n	8008f4a <TIM_Base_SetConfig+0x9a>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f10:	d01b      	beq.n	8008f4a <TIM_Base_SetConfig+0x9a>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a2c      	ldr	r2, [pc, #176]	; (8008fc8 <TIM_Base_SetConfig+0x118>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d017      	beq.n	8008f4a <TIM_Base_SetConfig+0x9a>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a2b      	ldr	r2, [pc, #172]	; (8008fcc <TIM_Base_SetConfig+0x11c>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d013      	beq.n	8008f4a <TIM_Base_SetConfig+0x9a>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a2a      	ldr	r2, [pc, #168]	; (8008fd0 <TIM_Base_SetConfig+0x120>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d00f      	beq.n	8008f4a <TIM_Base_SetConfig+0x9a>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a29      	ldr	r2, [pc, #164]	; (8008fd4 <TIM_Base_SetConfig+0x124>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d00b      	beq.n	8008f4a <TIM_Base_SetConfig+0x9a>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a28      	ldr	r2, [pc, #160]	; (8008fd8 <TIM_Base_SetConfig+0x128>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d007      	beq.n	8008f4a <TIM_Base_SetConfig+0x9a>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a27      	ldr	r2, [pc, #156]	; (8008fdc <TIM_Base_SetConfig+0x12c>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d003      	beq.n	8008f4a <TIM_Base_SetConfig+0x9a>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a26      	ldr	r2, [pc, #152]	; (8008fe0 <TIM_Base_SetConfig+0x130>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d108      	bne.n	8008f5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	689a      	ldr	r2, [r3, #8]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a10      	ldr	r2, [pc, #64]	; (8008fc4 <TIM_Base_SetConfig+0x114>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d00f      	beq.n	8008fa8 <TIM_Base_SetConfig+0xf8>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a12      	ldr	r2, [pc, #72]	; (8008fd4 <TIM_Base_SetConfig+0x124>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d00b      	beq.n	8008fa8 <TIM_Base_SetConfig+0xf8>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a11      	ldr	r2, [pc, #68]	; (8008fd8 <TIM_Base_SetConfig+0x128>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d007      	beq.n	8008fa8 <TIM_Base_SetConfig+0xf8>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a10      	ldr	r2, [pc, #64]	; (8008fdc <TIM_Base_SetConfig+0x12c>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d003      	beq.n	8008fa8 <TIM_Base_SetConfig+0xf8>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a0f      	ldr	r2, [pc, #60]	; (8008fe0 <TIM_Base_SetConfig+0x130>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d103      	bne.n	8008fb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	691a      	ldr	r2, [r3, #16]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	615a      	str	r2, [r3, #20]
}
 8008fb6:	bf00      	nop
 8008fb8:	3714      	adds	r7, #20
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	40010000 	.word	0x40010000
 8008fc8:	40000400 	.word	0x40000400
 8008fcc:	40000800 	.word	0x40000800
 8008fd0:	40000c00 	.word	0x40000c00
 8008fd4:	40010400 	.word	0x40010400
 8008fd8:	40014000 	.word	0x40014000
 8008fdc:	40014400 	.word	0x40014400
 8008fe0:	40014800 	.word	0x40014800

08008fe4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009014:	bf00      	nop
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d101      	bne.n	8009032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e042      	b.n	80090b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009038:	2b00      	cmp	r3, #0
 800903a:	d106      	bne.n	800904a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7f8 ffdb 	bl	8002000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2224      	movs	r2, #36	; 0x24
 800904e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f022 0201 	bic.w	r2, r2, #1
 8009060:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fc5a 	bl	800991c <UART_SetConfig>
 8009068:	4603      	mov	r3, r0
 800906a:	2b01      	cmp	r3, #1
 800906c:	d101      	bne.n	8009072 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e022      	b.n	80090b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009076:	2b00      	cmp	r3, #0
 8009078:	d002      	beq.n	8009080 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f001 f9ae 	bl	800a3dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	685a      	ldr	r2, [r3, #4]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800908e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689a      	ldr	r2, [r3, #8]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800909e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f042 0201 	orr.w	r2, r2, #1
 80090ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f001 fa35 	bl	800a520 <UART_CheckIdleState>
 80090b6:	4603      	mov	r3, r0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3708      	adds	r7, #8
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	4613      	mov	r3, r2
 80090cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090d4:	2b20      	cmp	r3, #32
 80090d6:	d168      	bne.n	80091aa <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d002      	beq.n	80090e4 <HAL_UART_Transmit_DMA+0x24>
 80090de:	88fb      	ldrh	r3, [r7, #6]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d101      	bne.n	80090e8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e061      	b.n	80091ac <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d101      	bne.n	80090f6 <HAL_UART_Transmit_DMA+0x36>
 80090f2:	2302      	movs	r3, #2
 80090f4:	e05a      	b.n	80091ac <HAL_UART_Transmit_DMA+0xec>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2201      	movs	r2, #1
 80090fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	88fa      	ldrh	r2, [r7, #6]
 8009108:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	88fa      	ldrh	r2, [r7, #6]
 8009110:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2200      	movs	r2, #0
 8009118:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2221      	movs	r2, #33	; 0x21
 8009120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009128:	2b00      	cmp	r3, #0
 800912a:	d02c      	beq.n	8009186 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009130:	4a20      	ldr	r2, [pc, #128]	; (80091b4 <HAL_UART_Transmit_DMA+0xf4>)
 8009132:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009138:	4a1f      	ldr	r2, [pc, #124]	; (80091b8 <HAL_UART_Transmit_DMA+0xf8>)
 800913a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009140:	4a1e      	ldr	r2, [pc, #120]	; (80091bc <HAL_UART_Transmit_DMA+0xfc>)
 8009142:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009148:	2200      	movs	r2, #0
 800914a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009154:	4619      	mov	r1, r3
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	3328      	adds	r3, #40	; 0x28
 800915c:	461a      	mov	r2, r3
 800915e:	88fb      	ldrh	r3, [r7, #6]
 8009160:	f7fa fc00 	bl	8003964 <HAL_DMA_Start_IT>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00d      	beq.n	8009186 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2210      	movs	r2, #16
 800916e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2220      	movs	r2, #32
 800917e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e012      	b.n	80091ac <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2240      	movs	r2, #64	; 0x40
 800918c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	689a      	ldr	r2, [r3, #8]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80091a4:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80091a6:	2300      	movs	r3, #0
 80091a8:	e000      	b.n	80091ac <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 80091aa:	2302      	movs	r3, #2
  }
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3710      	adds	r7, #16
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	0800a835 	.word	0x0800a835
 80091b8:	0800a885 	.word	0x0800a885
 80091bc:	0800a96f 	.word	0x0800a96f

080091c0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	4613      	mov	r3, r2
 80091cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091d4:	2b20      	cmp	r3, #32
 80091d6:	d131      	bne.n	800923c <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d002      	beq.n	80091e4 <HAL_UART_Receive_DMA+0x24>
 80091de:	88fb      	ldrh	r3, [r7, #6]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d101      	bne.n	80091e8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	e02a      	b.n	800923e <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d101      	bne.n	80091f6 <HAL_UART_Receive_DMA+0x36>
 80091f2:	2302      	movs	r3, #2
 80091f4:	e023      	b.n	800923e <HAL_UART_Receive_DMA+0x7e>
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2201      	movs	r2, #1
 80091fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a0f      	ldr	r2, [pc, #60]	; (8009248 <HAL_UART_Receive_DMA+0x88>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d00e      	beq.n	800922c <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d007      	beq.n	800922c <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800922a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800922c:	88fb      	ldrh	r3, [r7, #6]
 800922e:	461a      	mov	r2, r3
 8009230:	68b9      	ldr	r1, [r7, #8]
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f001 fa40 	bl	800a6b8 <UART_Start_Receive_DMA>
 8009238:	4603      	mov	r3, r0
 800923a:	e000      	b.n	800923e <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800923c:	2302      	movs	r3, #2
  }
}
 800923e:	4618      	mov	r0, r3
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	58000c00 	.word	0x58000c00

0800924c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800925a:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009262:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800926e:	2b80      	cmp	r3, #128	; 0x80
 8009270:	d127      	bne.n	80092c2 <HAL_UART_DMAStop+0x76>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2b21      	cmp	r3, #33	; 0x21
 8009276:	d124      	bne.n	80092c2 <HAL_UART_DMAStop+0x76>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	689a      	ldr	r2, [r3, #8]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009286:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800928c:	2b00      	cmp	r3, #0
 800928e:	d015      	beq.n	80092bc <HAL_UART_DMAStop+0x70>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009294:	4618      	mov	r0, r3
 8009296:	f7fa fdcf 	bl	8003e38 <HAL_DMA_Abort>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00d      	beq.n	80092bc <HAL_UART_DMAStop+0x70>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7fc fa53 	bl	8005750 <HAL_DMA_GetError>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b20      	cmp	r3, #32
 80092ae:	d105      	bne.n	80092bc <HAL_UART_DMAStop+0x70>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2210      	movs	r2, #16
 80092b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 80092b8:	2303      	movs	r3, #3
 80092ba:	e032      	b.n	8009322 <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f001 fa69 	bl	800a794 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092cc:	2b40      	cmp	r3, #64	; 0x40
 80092ce:	d127      	bne.n	8009320 <HAL_UART_DMAStop+0xd4>
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	2b22      	cmp	r3, #34	; 0x22
 80092d4:	d124      	bne.n	8009320 <HAL_UART_DMAStop+0xd4>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	689a      	ldr	r2, [r3, #8]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092e4:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d015      	beq.n	800931a <HAL_UART_DMAStop+0xce>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7fa fda0 	bl	8003e38 <HAL_DMA_Abort>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00d      	beq.n	800931a <HAL_UART_DMAStop+0xce>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009302:	4618      	mov	r0, r3
 8009304:	f7fc fa24 	bl	8005750 <HAL_DMA_GetError>
 8009308:	4603      	mov	r3, r0
 800930a:	2b20      	cmp	r3, #32
 800930c:	d105      	bne.n	800931a <HAL_UART_DMAStop+0xce>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2210      	movs	r2, #16
 8009312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	e003      	b.n	8009322 <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f001 fa58 	bl	800a7d0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
	...

0800932c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b088      	sub	sp, #32
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	69db      	ldr	r3, [r3, #28]
 800933a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800934c:	69fa      	ldr	r2, [r7, #28]
 800934e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009352:	4013      	ands	r3, r2
 8009354:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d118      	bne.n	800938e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	f003 0320 	and.w	r3, r3, #32
 8009362:	2b00      	cmp	r3, #0
 8009364:	d013      	beq.n	800938e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	f003 0320 	and.w	r3, r3, #32
 800936c:	2b00      	cmp	r3, #0
 800936e:	d104      	bne.n	800937a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009376:	2b00      	cmp	r3, #0
 8009378:	d009      	beq.n	800938e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800937e:	2b00      	cmp	r3, #0
 8009380:	f000 8282 	beq.w	8009888 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	4798      	blx	r3
      }
      return;
 800938c:	e27c      	b.n	8009888 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	2b00      	cmp	r3, #0
 8009392:	f000 80ef 	beq.w	8009574 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009396:	697a      	ldr	r2, [r7, #20]
 8009398:	4b73      	ldr	r3, [pc, #460]	; (8009568 <HAL_UART_IRQHandler+0x23c>)
 800939a:	4013      	ands	r3, r2
 800939c:	2b00      	cmp	r3, #0
 800939e:	d105      	bne.n	80093ac <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80093a0:	69ba      	ldr	r2, [r7, #24]
 80093a2:	4b72      	ldr	r3, [pc, #456]	; (800956c <HAL_UART_IRQHandler+0x240>)
 80093a4:	4013      	ands	r3, r2
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f000 80e4 	beq.w	8009574 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d010      	beq.n	80093d8 <HAL_UART_IRQHandler+0xac>
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00b      	beq.n	80093d8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2201      	movs	r2, #1
 80093c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093ce:	f043 0201 	orr.w	r2, r3, #1
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	f003 0302 	and.w	r3, r3, #2
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d010      	beq.n	8009404 <HAL_UART_IRQHandler+0xd8>
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	f003 0301 	and.w	r3, r3, #1
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00b      	beq.n	8009404 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2202      	movs	r2, #2
 80093f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093fa:	f043 0204 	orr.w	r2, r3, #4
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	f003 0304 	and.w	r3, r3, #4
 800940a:	2b00      	cmp	r3, #0
 800940c:	d010      	beq.n	8009430 <HAL_UART_IRQHandler+0x104>
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f003 0301 	and.w	r3, r3, #1
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00b      	beq.n	8009430 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2204      	movs	r2, #4
 800941e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009426:	f043 0202 	orr.w	r2, r3, #2
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	f003 0308 	and.w	r3, r3, #8
 8009436:	2b00      	cmp	r3, #0
 8009438:	d015      	beq.n	8009466 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	f003 0320 	and.w	r3, r3, #32
 8009440:	2b00      	cmp	r3, #0
 8009442:	d104      	bne.n	800944e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009444:	697a      	ldr	r2, [r7, #20]
 8009446:	4b48      	ldr	r3, [pc, #288]	; (8009568 <HAL_UART_IRQHandler+0x23c>)
 8009448:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00b      	beq.n	8009466 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2208      	movs	r2, #8
 8009454:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800945c:	f043 0208 	orr.w	r2, r3, #8
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800946c:	2b00      	cmp	r3, #0
 800946e:	d011      	beq.n	8009494 <HAL_UART_IRQHandler+0x168>
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00c      	beq.n	8009494 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800948a:	f043 0220 	orr.w	r2, r3, #32
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800949a:	2b00      	cmp	r3, #0
 800949c:	f000 81f6 	beq.w	800988c <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	f003 0320 	and.w	r3, r3, #32
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d011      	beq.n	80094ce <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	f003 0320 	and.w	r3, r3, #32
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d104      	bne.n	80094be <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d007      	beq.n	80094ce <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d003      	beq.n	80094ce <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094d4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094e0:	2b40      	cmp	r3, #64	; 0x40
 80094e2:	d004      	beq.n	80094ee <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d031      	beq.n	8009552 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f001 f96e 	bl	800a7d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094fe:	2b40      	cmp	r3, #64	; 0x40
 8009500:	d123      	bne.n	800954a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	689a      	ldr	r2, [r3, #8]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009510:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009516:	2b00      	cmp	r3, #0
 8009518:	d013      	beq.n	8009542 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800951e:	4a14      	ldr	r2, [pc, #80]	; (8009570 <HAL_UART_IRQHandler+0x244>)
 8009520:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009526:	4618      	mov	r0, r3
 8009528:	f7fa ffa4 	bl	8004474 <HAL_DMA_Abort_IT>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d017      	beq.n	8009562 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800953c:	4610      	mov	r0, r2
 800953e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009540:	e00f      	b.n	8009562 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f9d4 	bl	80098f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009548:	e00b      	b.n	8009562 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f9d0 	bl	80098f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009550:	e007      	b.n	8009562 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f9cc 	bl	80098f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009560:	e194      	b.n	800988c <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009562:	bf00      	nop
    return;
 8009564:	e192      	b.n	800988c <HAL_UART_IRQHandler+0x560>
 8009566:	bf00      	nop
 8009568:	10000001 	.word	0x10000001
 800956c:	04000120 	.word	0x04000120
 8009570:	0800a9ef 	.word	0x0800a9ef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009578:	2b01      	cmp	r3, #1
 800957a:	f040 810f 	bne.w	800979c <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	f003 0310 	and.w	r3, r3, #16
 8009584:	2b00      	cmp	r3, #0
 8009586:	f000 8109 	beq.w	800979c <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	f003 0310 	and.w	r3, r3, #16
 8009590:	2b00      	cmp	r3, #0
 8009592:	f000 8103 	beq.w	800979c <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2210      	movs	r2, #16
 800959c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095a8:	2b40      	cmp	r3, #64	; 0x40
 80095aa:	f040 80bb 	bne.w	8009724 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a96      	ldr	r2, [pc, #600]	; (8009810 <HAL_UART_IRQHandler+0x4e4>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d059      	beq.n	800966e <HAL_UART_IRQHandler+0x342>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a94      	ldr	r2, [pc, #592]	; (8009814 <HAL_UART_IRQHandler+0x4e8>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d053      	beq.n	800966e <HAL_UART_IRQHandler+0x342>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a92      	ldr	r2, [pc, #584]	; (8009818 <HAL_UART_IRQHandler+0x4ec>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d04d      	beq.n	800966e <HAL_UART_IRQHandler+0x342>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a90      	ldr	r2, [pc, #576]	; (800981c <HAL_UART_IRQHandler+0x4f0>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d047      	beq.n	800966e <HAL_UART_IRQHandler+0x342>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a8e      	ldr	r2, [pc, #568]	; (8009820 <HAL_UART_IRQHandler+0x4f4>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d041      	beq.n	800966e <HAL_UART_IRQHandler+0x342>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a8c      	ldr	r2, [pc, #560]	; (8009824 <HAL_UART_IRQHandler+0x4f8>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d03b      	beq.n	800966e <HAL_UART_IRQHandler+0x342>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a8a      	ldr	r2, [pc, #552]	; (8009828 <HAL_UART_IRQHandler+0x4fc>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d035      	beq.n	800966e <HAL_UART_IRQHandler+0x342>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a88      	ldr	r2, [pc, #544]	; (800982c <HAL_UART_IRQHandler+0x500>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d02f      	beq.n	800966e <HAL_UART_IRQHandler+0x342>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a86      	ldr	r2, [pc, #536]	; (8009830 <HAL_UART_IRQHandler+0x504>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d029      	beq.n	800966e <HAL_UART_IRQHandler+0x342>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a84      	ldr	r2, [pc, #528]	; (8009834 <HAL_UART_IRQHandler+0x508>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d023      	beq.n	800966e <HAL_UART_IRQHandler+0x342>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a82      	ldr	r2, [pc, #520]	; (8009838 <HAL_UART_IRQHandler+0x50c>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d01d      	beq.n	800966e <HAL_UART_IRQHandler+0x342>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a80      	ldr	r2, [pc, #512]	; (800983c <HAL_UART_IRQHandler+0x510>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d017      	beq.n	800966e <HAL_UART_IRQHandler+0x342>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a7e      	ldr	r2, [pc, #504]	; (8009840 <HAL_UART_IRQHandler+0x514>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d011      	beq.n	800966e <HAL_UART_IRQHandler+0x342>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a7c      	ldr	r2, [pc, #496]	; (8009844 <HAL_UART_IRQHandler+0x518>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d00b      	beq.n	800966e <HAL_UART_IRQHandler+0x342>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a7a      	ldr	r2, [pc, #488]	; (8009848 <HAL_UART_IRQHandler+0x51c>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d005      	beq.n	800966e <HAL_UART_IRQHandler+0x342>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a78      	ldr	r2, [pc, #480]	; (800984c <HAL_UART_IRQHandler+0x520>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d105      	bne.n	800967a <HAL_UART_IRQHandler+0x34e>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	b29b      	uxth	r3, r3
 8009678:	e004      	b.n	8009684 <HAL_UART_IRQHandler+0x358>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	b29b      	uxth	r3, r3
 8009684:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8009686:	893b      	ldrh	r3, [r7, #8]
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 8101 	beq.w	8009890 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009694:	893a      	ldrh	r2, [r7, #8]
 8009696:	429a      	cmp	r2, r3
 8009698:	f080 80fa 	bcs.w	8009890 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	893a      	ldrh	r2, [r7, #8]
 80096a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096a8:	69db      	ldr	r3, [r3, #28]
 80096aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096ae:	d02b      	beq.n	8009708 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80096be:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	689a      	ldr	r2, [r3, #8]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f022 0201 	bic.w	r2, r2, #1
 80096ce:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	689a      	ldr	r2, [r3, #8]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096de:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2220      	movs	r2, #32
 80096e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f022 0210 	bic.w	r2, r2, #16
 80096fc:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009702:	4618      	mov	r0, r3
 8009704:	f7fa fb98 	bl	8003e38 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009714:	b29b      	uxth	r3, r3
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	b29b      	uxth	r3, r3
 800971a:	4619      	mov	r1, r3
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 f8f1 	bl	8009904 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009722:	e0b5      	b.n	8009890 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009730:	b29b      	uxth	r3, r3
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800973c:	b29b      	uxth	r3, r3
 800973e:	2b00      	cmp	r3, #0
 8009740:	f000 80a8 	beq.w	8009894 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8009744:	897b      	ldrh	r3, [r7, #10]
 8009746:	2b00      	cmp	r3, #0
 8009748:	f000 80a4 	beq.w	8009894 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800975a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	6899      	ldr	r1, [r3, #8]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	4b3a      	ldr	r3, [pc, #232]	; (8009850 <HAL_UART_IRQHandler+0x524>)
 8009768:	400b      	ands	r3, r1
 800976a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2220      	movs	r2, #32
 8009770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f022 0210 	bic.w	r2, r2, #16
 800978e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009790:	897b      	ldrh	r3, [r7, #10]
 8009792:	4619      	mov	r1, r3
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 f8b5 	bl	8009904 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800979a:	e07b      	b.n	8009894 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00d      	beq.n	80097c2 <HAL_UART_IRQHandler+0x496>
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d008      	beq.n	80097c2 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80097b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f001 f947 	bl	800aa4e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097c0:	e06b      	b.n	800989a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d012      	beq.n	80097f2 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d104      	bne.n	80097e0 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d008      	beq.n	80097f2 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d057      	beq.n	8009898 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	4798      	blx	r3
    }
    return;
 80097f0:	e052      	b.n	8009898 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d02b      	beq.n	8009854 <HAL_UART_IRQHandler+0x528>
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009802:	2b00      	cmp	r3, #0
 8009804:	d026      	beq.n	8009854 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f001 f907 	bl	800aa1a <UART_EndTransmit_IT>
    return;
 800980c:	e045      	b.n	800989a <HAL_UART_IRQHandler+0x56e>
 800980e:	bf00      	nop
 8009810:	40020010 	.word	0x40020010
 8009814:	40020028 	.word	0x40020028
 8009818:	40020040 	.word	0x40020040
 800981c:	40020058 	.word	0x40020058
 8009820:	40020070 	.word	0x40020070
 8009824:	40020088 	.word	0x40020088
 8009828:	400200a0 	.word	0x400200a0
 800982c:	400200b8 	.word	0x400200b8
 8009830:	40020410 	.word	0x40020410
 8009834:	40020428 	.word	0x40020428
 8009838:	40020440 	.word	0x40020440
 800983c:	40020458 	.word	0x40020458
 8009840:	40020470 	.word	0x40020470
 8009844:	40020488 	.word	0x40020488
 8009848:	400204a0 	.word	0x400204a0
 800984c:	400204b8 	.word	0x400204b8
 8009850:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d008      	beq.n	8009870 <HAL_UART_IRQHandler+0x544>
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d003      	beq.n	8009870 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f001 f904 	bl	800aa76 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800986e:	e014      	b.n	800989a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00f      	beq.n	800989a <HAL_UART_IRQHandler+0x56e>
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	2b00      	cmp	r3, #0
 800987e:	da0c      	bge.n	800989a <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f001 f8ee 	bl	800aa62 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009886:	e008      	b.n	800989a <HAL_UART_IRQHandler+0x56e>
      return;
 8009888:	bf00      	nop
 800988a:	e006      	b.n	800989a <HAL_UART_IRQHandler+0x56e>
    return;
 800988c:	bf00      	nop
 800988e:	e004      	b.n	800989a <HAL_UART_IRQHandler+0x56e>
      return;
 8009890:	bf00      	nop
 8009892:	e002      	b.n	800989a <HAL_UART_IRQHandler+0x56e>
      return;
 8009894:	bf00      	nop
 8009896:	e000      	b.n	800989a <HAL_UART_IRQHandler+0x56e>
    return;
 8009898:	bf00      	nop
  }
}
 800989a:	3720      	adds	r7, #32
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80098a8:	bf00      	nop
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80098bc:	bf00      	nop
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80098d0:	bf00      	nop
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80098e4:	bf00      	nop
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80098f8:	bf00      	nop
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	460b      	mov	r3, r1
 800990e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009910:	bf00      	nop
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800991c:	b5b0      	push	{r4, r5, r7, lr}
 800991e:	b08e      	sub	sp, #56	; 0x38
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009924:	2300      	movs	r3, #0
 8009926:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	689a      	ldr	r2, [r3, #8]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	431a      	orrs	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	695b      	ldr	r3, [r3, #20]
 8009938:	431a      	orrs	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	69db      	ldr	r3, [r3, #28]
 800993e:	4313      	orrs	r3, r2
 8009940:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	4bbf      	ldr	r3, [pc, #764]	; (8009c48 <UART_SetConfig+0x32c>)
 800994a:	4013      	ands	r3, r2
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	6812      	ldr	r2, [r2, #0]
 8009950:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009952:	430b      	orrs	r3, r1
 8009954:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	68da      	ldr	r2, [r3, #12]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	430a      	orrs	r2, r1
 800996a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	699b      	ldr	r3, [r3, #24]
 8009970:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4ab5      	ldr	r2, [pc, #724]	; (8009c4c <UART_SetConfig+0x330>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d004      	beq.n	8009986 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a1b      	ldr	r3, [r3, #32]
 8009980:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009982:	4313      	orrs	r3, r2
 8009984:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	689a      	ldr	r2, [r3, #8]
 800998c:	4bb0      	ldr	r3, [pc, #704]	; (8009c50 <UART_SetConfig+0x334>)
 800998e:	4013      	ands	r3, r2
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	6812      	ldr	r2, [r2, #0]
 8009994:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009996:	430b      	orrs	r3, r1
 8009998:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a0:	f023 010f 	bic.w	r1, r3, #15
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	430a      	orrs	r2, r1
 80099ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4aa7      	ldr	r2, [pc, #668]	; (8009c54 <UART_SetConfig+0x338>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d176      	bne.n	8009aa8 <UART_SetConfig+0x18c>
 80099ba:	4ba7      	ldr	r3, [pc, #668]	; (8009c58 <UART_SetConfig+0x33c>)
 80099bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099c2:	2b28      	cmp	r3, #40	; 0x28
 80099c4:	d86c      	bhi.n	8009aa0 <UART_SetConfig+0x184>
 80099c6:	a201      	add	r2, pc, #4	; (adr r2, 80099cc <UART_SetConfig+0xb0>)
 80099c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099cc:	08009a71 	.word	0x08009a71
 80099d0:	08009aa1 	.word	0x08009aa1
 80099d4:	08009aa1 	.word	0x08009aa1
 80099d8:	08009aa1 	.word	0x08009aa1
 80099dc:	08009aa1 	.word	0x08009aa1
 80099e0:	08009aa1 	.word	0x08009aa1
 80099e4:	08009aa1 	.word	0x08009aa1
 80099e8:	08009aa1 	.word	0x08009aa1
 80099ec:	08009a79 	.word	0x08009a79
 80099f0:	08009aa1 	.word	0x08009aa1
 80099f4:	08009aa1 	.word	0x08009aa1
 80099f8:	08009aa1 	.word	0x08009aa1
 80099fc:	08009aa1 	.word	0x08009aa1
 8009a00:	08009aa1 	.word	0x08009aa1
 8009a04:	08009aa1 	.word	0x08009aa1
 8009a08:	08009aa1 	.word	0x08009aa1
 8009a0c:	08009a81 	.word	0x08009a81
 8009a10:	08009aa1 	.word	0x08009aa1
 8009a14:	08009aa1 	.word	0x08009aa1
 8009a18:	08009aa1 	.word	0x08009aa1
 8009a1c:	08009aa1 	.word	0x08009aa1
 8009a20:	08009aa1 	.word	0x08009aa1
 8009a24:	08009aa1 	.word	0x08009aa1
 8009a28:	08009aa1 	.word	0x08009aa1
 8009a2c:	08009a89 	.word	0x08009a89
 8009a30:	08009aa1 	.word	0x08009aa1
 8009a34:	08009aa1 	.word	0x08009aa1
 8009a38:	08009aa1 	.word	0x08009aa1
 8009a3c:	08009aa1 	.word	0x08009aa1
 8009a40:	08009aa1 	.word	0x08009aa1
 8009a44:	08009aa1 	.word	0x08009aa1
 8009a48:	08009aa1 	.word	0x08009aa1
 8009a4c:	08009a91 	.word	0x08009a91
 8009a50:	08009aa1 	.word	0x08009aa1
 8009a54:	08009aa1 	.word	0x08009aa1
 8009a58:	08009aa1 	.word	0x08009aa1
 8009a5c:	08009aa1 	.word	0x08009aa1
 8009a60:	08009aa1 	.word	0x08009aa1
 8009a64:	08009aa1 	.word	0x08009aa1
 8009a68:	08009aa1 	.word	0x08009aa1
 8009a6c:	08009a99 	.word	0x08009a99
 8009a70:	2301      	movs	r3, #1
 8009a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a76:	e222      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009a78:	2304      	movs	r3, #4
 8009a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a7e:	e21e      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009a80:	2308      	movs	r3, #8
 8009a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a86:	e21a      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009a88:	2310      	movs	r3, #16
 8009a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a8e:	e216      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009a90:	2320      	movs	r3, #32
 8009a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a96:	e212      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009a98:	2340      	movs	r3, #64	; 0x40
 8009a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a9e:	e20e      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009aa0:	2380      	movs	r3, #128	; 0x80
 8009aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aa6:	e20a      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a6b      	ldr	r2, [pc, #428]	; (8009c5c <UART_SetConfig+0x340>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d130      	bne.n	8009b14 <UART_SetConfig+0x1f8>
 8009ab2:	4b69      	ldr	r3, [pc, #420]	; (8009c58 <UART_SetConfig+0x33c>)
 8009ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ab6:	f003 0307 	and.w	r3, r3, #7
 8009aba:	2b05      	cmp	r3, #5
 8009abc:	d826      	bhi.n	8009b0c <UART_SetConfig+0x1f0>
 8009abe:	a201      	add	r2, pc, #4	; (adr r2, 8009ac4 <UART_SetConfig+0x1a8>)
 8009ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac4:	08009add 	.word	0x08009add
 8009ac8:	08009ae5 	.word	0x08009ae5
 8009acc:	08009aed 	.word	0x08009aed
 8009ad0:	08009af5 	.word	0x08009af5
 8009ad4:	08009afd 	.word	0x08009afd
 8009ad8:	08009b05 	.word	0x08009b05
 8009adc:	2300      	movs	r3, #0
 8009ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ae2:	e1ec      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009ae4:	2304      	movs	r3, #4
 8009ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aea:	e1e8      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009aec:	2308      	movs	r3, #8
 8009aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009af2:	e1e4      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009af4:	2310      	movs	r3, #16
 8009af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009afa:	e1e0      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009afc:	2320      	movs	r3, #32
 8009afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b02:	e1dc      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009b04:	2340      	movs	r3, #64	; 0x40
 8009b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b0a:	e1d8      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009b0c:	2380      	movs	r3, #128	; 0x80
 8009b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b12:	e1d4      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a51      	ldr	r2, [pc, #324]	; (8009c60 <UART_SetConfig+0x344>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d130      	bne.n	8009b80 <UART_SetConfig+0x264>
 8009b1e:	4b4e      	ldr	r3, [pc, #312]	; (8009c58 <UART_SetConfig+0x33c>)
 8009b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b22:	f003 0307 	and.w	r3, r3, #7
 8009b26:	2b05      	cmp	r3, #5
 8009b28:	d826      	bhi.n	8009b78 <UART_SetConfig+0x25c>
 8009b2a:	a201      	add	r2, pc, #4	; (adr r2, 8009b30 <UART_SetConfig+0x214>)
 8009b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b30:	08009b49 	.word	0x08009b49
 8009b34:	08009b51 	.word	0x08009b51
 8009b38:	08009b59 	.word	0x08009b59
 8009b3c:	08009b61 	.word	0x08009b61
 8009b40:	08009b69 	.word	0x08009b69
 8009b44:	08009b71 	.word	0x08009b71
 8009b48:	2300      	movs	r3, #0
 8009b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b4e:	e1b6      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009b50:	2304      	movs	r3, #4
 8009b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b56:	e1b2      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009b58:	2308      	movs	r3, #8
 8009b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b5e:	e1ae      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009b60:	2310      	movs	r3, #16
 8009b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b66:	e1aa      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009b68:	2320      	movs	r3, #32
 8009b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b6e:	e1a6      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009b70:	2340      	movs	r3, #64	; 0x40
 8009b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b76:	e1a2      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009b78:	2380      	movs	r3, #128	; 0x80
 8009b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b7e:	e19e      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a37      	ldr	r2, [pc, #220]	; (8009c64 <UART_SetConfig+0x348>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d130      	bne.n	8009bec <UART_SetConfig+0x2d0>
 8009b8a:	4b33      	ldr	r3, [pc, #204]	; (8009c58 <UART_SetConfig+0x33c>)
 8009b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b8e:	f003 0307 	and.w	r3, r3, #7
 8009b92:	2b05      	cmp	r3, #5
 8009b94:	d826      	bhi.n	8009be4 <UART_SetConfig+0x2c8>
 8009b96:	a201      	add	r2, pc, #4	; (adr r2, 8009b9c <UART_SetConfig+0x280>)
 8009b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9c:	08009bb5 	.word	0x08009bb5
 8009ba0:	08009bbd 	.word	0x08009bbd
 8009ba4:	08009bc5 	.word	0x08009bc5
 8009ba8:	08009bcd 	.word	0x08009bcd
 8009bac:	08009bd5 	.word	0x08009bd5
 8009bb0:	08009bdd 	.word	0x08009bdd
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bba:	e180      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009bbc:	2304      	movs	r3, #4
 8009bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bc2:	e17c      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009bc4:	2308      	movs	r3, #8
 8009bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bca:	e178      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009bcc:	2310      	movs	r3, #16
 8009bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bd2:	e174      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009bd4:	2320      	movs	r3, #32
 8009bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bda:	e170      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009bdc:	2340      	movs	r3, #64	; 0x40
 8009bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009be2:	e16c      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009be4:	2380      	movs	r3, #128	; 0x80
 8009be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bea:	e168      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a1d      	ldr	r2, [pc, #116]	; (8009c68 <UART_SetConfig+0x34c>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d142      	bne.n	8009c7c <UART_SetConfig+0x360>
 8009bf6:	4b18      	ldr	r3, [pc, #96]	; (8009c58 <UART_SetConfig+0x33c>)
 8009bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bfa:	f003 0307 	and.w	r3, r3, #7
 8009bfe:	2b05      	cmp	r3, #5
 8009c00:	d838      	bhi.n	8009c74 <UART_SetConfig+0x358>
 8009c02:	a201      	add	r2, pc, #4	; (adr r2, 8009c08 <UART_SetConfig+0x2ec>)
 8009c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c08:	08009c21 	.word	0x08009c21
 8009c0c:	08009c29 	.word	0x08009c29
 8009c10:	08009c31 	.word	0x08009c31
 8009c14:	08009c39 	.word	0x08009c39
 8009c18:	08009c41 	.word	0x08009c41
 8009c1c:	08009c6d 	.word	0x08009c6d
 8009c20:	2300      	movs	r3, #0
 8009c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c26:	e14a      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009c28:	2304      	movs	r3, #4
 8009c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c2e:	e146      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009c30:	2308      	movs	r3, #8
 8009c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c36:	e142      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009c38:	2310      	movs	r3, #16
 8009c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c3e:	e13e      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009c40:	2320      	movs	r3, #32
 8009c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c46:	e13a      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009c48:	cfff69f3 	.word	0xcfff69f3
 8009c4c:	58000c00 	.word	0x58000c00
 8009c50:	11fff4ff 	.word	0x11fff4ff
 8009c54:	40011000 	.word	0x40011000
 8009c58:	58024400 	.word	0x58024400
 8009c5c:	40004400 	.word	0x40004400
 8009c60:	40004800 	.word	0x40004800
 8009c64:	40004c00 	.word	0x40004c00
 8009c68:	40005000 	.word	0x40005000
 8009c6c:	2340      	movs	r3, #64	; 0x40
 8009c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c72:	e124      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009c74:	2380      	movs	r3, #128	; 0x80
 8009c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c7a:	e120      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4acc      	ldr	r2, [pc, #816]	; (8009fb4 <UART_SetConfig+0x698>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d176      	bne.n	8009d74 <UART_SetConfig+0x458>
 8009c86:	4bcc      	ldr	r3, [pc, #816]	; (8009fb8 <UART_SetConfig+0x69c>)
 8009c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c8e:	2b28      	cmp	r3, #40	; 0x28
 8009c90:	d86c      	bhi.n	8009d6c <UART_SetConfig+0x450>
 8009c92:	a201      	add	r2, pc, #4	; (adr r2, 8009c98 <UART_SetConfig+0x37c>)
 8009c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c98:	08009d3d 	.word	0x08009d3d
 8009c9c:	08009d6d 	.word	0x08009d6d
 8009ca0:	08009d6d 	.word	0x08009d6d
 8009ca4:	08009d6d 	.word	0x08009d6d
 8009ca8:	08009d6d 	.word	0x08009d6d
 8009cac:	08009d6d 	.word	0x08009d6d
 8009cb0:	08009d6d 	.word	0x08009d6d
 8009cb4:	08009d6d 	.word	0x08009d6d
 8009cb8:	08009d45 	.word	0x08009d45
 8009cbc:	08009d6d 	.word	0x08009d6d
 8009cc0:	08009d6d 	.word	0x08009d6d
 8009cc4:	08009d6d 	.word	0x08009d6d
 8009cc8:	08009d6d 	.word	0x08009d6d
 8009ccc:	08009d6d 	.word	0x08009d6d
 8009cd0:	08009d6d 	.word	0x08009d6d
 8009cd4:	08009d6d 	.word	0x08009d6d
 8009cd8:	08009d4d 	.word	0x08009d4d
 8009cdc:	08009d6d 	.word	0x08009d6d
 8009ce0:	08009d6d 	.word	0x08009d6d
 8009ce4:	08009d6d 	.word	0x08009d6d
 8009ce8:	08009d6d 	.word	0x08009d6d
 8009cec:	08009d6d 	.word	0x08009d6d
 8009cf0:	08009d6d 	.word	0x08009d6d
 8009cf4:	08009d6d 	.word	0x08009d6d
 8009cf8:	08009d55 	.word	0x08009d55
 8009cfc:	08009d6d 	.word	0x08009d6d
 8009d00:	08009d6d 	.word	0x08009d6d
 8009d04:	08009d6d 	.word	0x08009d6d
 8009d08:	08009d6d 	.word	0x08009d6d
 8009d0c:	08009d6d 	.word	0x08009d6d
 8009d10:	08009d6d 	.word	0x08009d6d
 8009d14:	08009d6d 	.word	0x08009d6d
 8009d18:	08009d5d 	.word	0x08009d5d
 8009d1c:	08009d6d 	.word	0x08009d6d
 8009d20:	08009d6d 	.word	0x08009d6d
 8009d24:	08009d6d 	.word	0x08009d6d
 8009d28:	08009d6d 	.word	0x08009d6d
 8009d2c:	08009d6d 	.word	0x08009d6d
 8009d30:	08009d6d 	.word	0x08009d6d
 8009d34:	08009d6d 	.word	0x08009d6d
 8009d38:	08009d65 	.word	0x08009d65
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d42:	e0bc      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009d44:	2304      	movs	r3, #4
 8009d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d4a:	e0b8      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009d4c:	2308      	movs	r3, #8
 8009d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d52:	e0b4      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009d54:	2310      	movs	r3, #16
 8009d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d5a:	e0b0      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009d5c:	2320      	movs	r3, #32
 8009d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d62:	e0ac      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009d64:	2340      	movs	r3, #64	; 0x40
 8009d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d6a:	e0a8      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009d6c:	2380      	movs	r3, #128	; 0x80
 8009d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d72:	e0a4      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a90      	ldr	r2, [pc, #576]	; (8009fbc <UART_SetConfig+0x6a0>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d130      	bne.n	8009de0 <UART_SetConfig+0x4c4>
 8009d7e:	4b8e      	ldr	r3, [pc, #568]	; (8009fb8 <UART_SetConfig+0x69c>)
 8009d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d82:	f003 0307 	and.w	r3, r3, #7
 8009d86:	2b05      	cmp	r3, #5
 8009d88:	d826      	bhi.n	8009dd8 <UART_SetConfig+0x4bc>
 8009d8a:	a201      	add	r2, pc, #4	; (adr r2, 8009d90 <UART_SetConfig+0x474>)
 8009d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d90:	08009da9 	.word	0x08009da9
 8009d94:	08009db1 	.word	0x08009db1
 8009d98:	08009db9 	.word	0x08009db9
 8009d9c:	08009dc1 	.word	0x08009dc1
 8009da0:	08009dc9 	.word	0x08009dc9
 8009da4:	08009dd1 	.word	0x08009dd1
 8009da8:	2300      	movs	r3, #0
 8009daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dae:	e086      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009db0:	2304      	movs	r3, #4
 8009db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009db6:	e082      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009db8:	2308      	movs	r3, #8
 8009dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dbe:	e07e      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009dc0:	2310      	movs	r3, #16
 8009dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dc6:	e07a      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009dc8:	2320      	movs	r3, #32
 8009dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dce:	e076      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009dd0:	2340      	movs	r3, #64	; 0x40
 8009dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dd6:	e072      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009dd8:	2380      	movs	r3, #128	; 0x80
 8009dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dde:	e06e      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a76      	ldr	r2, [pc, #472]	; (8009fc0 <UART_SetConfig+0x6a4>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d130      	bne.n	8009e4c <UART_SetConfig+0x530>
 8009dea:	4b73      	ldr	r3, [pc, #460]	; (8009fb8 <UART_SetConfig+0x69c>)
 8009dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dee:	f003 0307 	and.w	r3, r3, #7
 8009df2:	2b05      	cmp	r3, #5
 8009df4:	d826      	bhi.n	8009e44 <UART_SetConfig+0x528>
 8009df6:	a201      	add	r2, pc, #4	; (adr r2, 8009dfc <UART_SetConfig+0x4e0>)
 8009df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfc:	08009e15 	.word	0x08009e15
 8009e00:	08009e1d 	.word	0x08009e1d
 8009e04:	08009e25 	.word	0x08009e25
 8009e08:	08009e2d 	.word	0x08009e2d
 8009e0c:	08009e35 	.word	0x08009e35
 8009e10:	08009e3d 	.word	0x08009e3d
 8009e14:	2300      	movs	r3, #0
 8009e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e1a:	e050      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009e1c:	2304      	movs	r3, #4
 8009e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e22:	e04c      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009e24:	2308      	movs	r3, #8
 8009e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e2a:	e048      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009e2c:	2310      	movs	r3, #16
 8009e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e32:	e044      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009e34:	2320      	movs	r3, #32
 8009e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e3a:	e040      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009e3c:	2340      	movs	r3, #64	; 0x40
 8009e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e42:	e03c      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009e44:	2380      	movs	r3, #128	; 0x80
 8009e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e4a:	e038      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a5c      	ldr	r2, [pc, #368]	; (8009fc4 <UART_SetConfig+0x6a8>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d130      	bne.n	8009eb8 <UART_SetConfig+0x59c>
 8009e56:	4b58      	ldr	r3, [pc, #352]	; (8009fb8 <UART_SetConfig+0x69c>)
 8009e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e5a:	f003 0307 	and.w	r3, r3, #7
 8009e5e:	2b05      	cmp	r3, #5
 8009e60:	d826      	bhi.n	8009eb0 <UART_SetConfig+0x594>
 8009e62:	a201      	add	r2, pc, #4	; (adr r2, 8009e68 <UART_SetConfig+0x54c>)
 8009e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e68:	08009e81 	.word	0x08009e81
 8009e6c:	08009e89 	.word	0x08009e89
 8009e70:	08009e91 	.word	0x08009e91
 8009e74:	08009e99 	.word	0x08009e99
 8009e78:	08009ea1 	.word	0x08009ea1
 8009e7c:	08009ea9 	.word	0x08009ea9
 8009e80:	2302      	movs	r3, #2
 8009e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e86:	e01a      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009e88:	2304      	movs	r3, #4
 8009e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e8e:	e016      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009e90:	2308      	movs	r3, #8
 8009e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e96:	e012      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009e98:	2310      	movs	r3, #16
 8009e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e9e:	e00e      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009ea0:	2320      	movs	r3, #32
 8009ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ea6:	e00a      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009ea8:	2340      	movs	r3, #64	; 0x40
 8009eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eae:	e006      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009eb0:	2380      	movs	r3, #128	; 0x80
 8009eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eb6:	e002      	b.n	8009ebe <UART_SetConfig+0x5a2>
 8009eb8:	2380      	movs	r3, #128	; 0x80
 8009eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a40      	ldr	r2, [pc, #256]	; (8009fc4 <UART_SetConfig+0x6a8>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	f040 80ef 	bne.w	800a0a8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009eca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ece:	2b20      	cmp	r3, #32
 8009ed0:	dc46      	bgt.n	8009f60 <UART_SetConfig+0x644>
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	f2c0 8081 	blt.w	8009fda <UART_SetConfig+0x6be>
 8009ed8:	3b02      	subs	r3, #2
 8009eda:	2b1e      	cmp	r3, #30
 8009edc:	d87d      	bhi.n	8009fda <UART_SetConfig+0x6be>
 8009ede:	a201      	add	r2, pc, #4	; (adr r2, 8009ee4 <UART_SetConfig+0x5c8>)
 8009ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee4:	08009f67 	.word	0x08009f67
 8009ee8:	08009fdb 	.word	0x08009fdb
 8009eec:	08009f6f 	.word	0x08009f6f
 8009ef0:	08009fdb 	.word	0x08009fdb
 8009ef4:	08009fdb 	.word	0x08009fdb
 8009ef8:	08009fdb 	.word	0x08009fdb
 8009efc:	08009f7f 	.word	0x08009f7f
 8009f00:	08009fdb 	.word	0x08009fdb
 8009f04:	08009fdb 	.word	0x08009fdb
 8009f08:	08009fdb 	.word	0x08009fdb
 8009f0c:	08009fdb 	.word	0x08009fdb
 8009f10:	08009fdb 	.word	0x08009fdb
 8009f14:	08009fdb 	.word	0x08009fdb
 8009f18:	08009fdb 	.word	0x08009fdb
 8009f1c:	08009f8f 	.word	0x08009f8f
 8009f20:	08009fdb 	.word	0x08009fdb
 8009f24:	08009fdb 	.word	0x08009fdb
 8009f28:	08009fdb 	.word	0x08009fdb
 8009f2c:	08009fdb 	.word	0x08009fdb
 8009f30:	08009fdb 	.word	0x08009fdb
 8009f34:	08009fdb 	.word	0x08009fdb
 8009f38:	08009fdb 	.word	0x08009fdb
 8009f3c:	08009fdb 	.word	0x08009fdb
 8009f40:	08009fdb 	.word	0x08009fdb
 8009f44:	08009fdb 	.word	0x08009fdb
 8009f48:	08009fdb 	.word	0x08009fdb
 8009f4c:	08009fdb 	.word	0x08009fdb
 8009f50:	08009fdb 	.word	0x08009fdb
 8009f54:	08009fdb 	.word	0x08009fdb
 8009f58:	08009fdb 	.word	0x08009fdb
 8009f5c:	08009fcd 	.word	0x08009fcd
 8009f60:	2b40      	cmp	r3, #64	; 0x40
 8009f62:	d036      	beq.n	8009fd2 <UART_SetConfig+0x6b6>
 8009f64:	e039      	b.n	8009fda <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009f66:	f7fe f967 	bl	8008238 <HAL_RCCEx_GetD3PCLK1Freq>
 8009f6a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009f6c:	e03b      	b.n	8009fe6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f6e:	f107 0314 	add.w	r3, r7, #20
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fe f976 	bl	8008264 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f7c:	e033      	b.n	8009fe6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f7e:	f107 0308 	add.w	r3, r7, #8
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7fe fac2 	bl	800850c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f8c:	e02b      	b.n	8009fe6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f8e:	4b0a      	ldr	r3, [pc, #40]	; (8009fb8 <UART_SetConfig+0x69c>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f003 0320 	and.w	r3, r3, #32
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d009      	beq.n	8009fae <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f9a:	4b07      	ldr	r3, [pc, #28]	; (8009fb8 <UART_SetConfig+0x69c>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	08db      	lsrs	r3, r3, #3
 8009fa0:	f003 0303 	and.w	r3, r3, #3
 8009fa4:	4a08      	ldr	r2, [pc, #32]	; (8009fc8 <UART_SetConfig+0x6ac>)
 8009fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8009faa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009fac:	e01b      	b.n	8009fe6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009fae:	4b06      	ldr	r3, [pc, #24]	; (8009fc8 <UART_SetConfig+0x6ac>)
 8009fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fb2:	e018      	b.n	8009fe6 <UART_SetConfig+0x6ca>
 8009fb4:	40011400 	.word	0x40011400
 8009fb8:	58024400 	.word	0x58024400
 8009fbc:	40007800 	.word	0x40007800
 8009fc0:	40007c00 	.word	0x40007c00
 8009fc4:	58000c00 	.word	0x58000c00
 8009fc8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009fcc:	4bc4      	ldr	r3, [pc, #784]	; (800a2e0 <UART_SetConfig+0x9c4>)
 8009fce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fd0:	e009      	b.n	8009fe6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fd8:	e005      	b.n	8009fe6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009fe4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f000 81da 	beq.w	800a3a2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff2:	4abc      	ldr	r2, [pc, #752]	; (800a2e4 <UART_SetConfig+0x9c8>)
 8009ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ffc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a000:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	685a      	ldr	r2, [r3, #4]
 800a006:	4613      	mov	r3, r2
 800a008:	005b      	lsls	r3, r3, #1
 800a00a:	4413      	add	r3, r2
 800a00c:	6a3a      	ldr	r2, [r7, #32]
 800a00e:	429a      	cmp	r2, r3
 800a010:	d305      	bcc.n	800a01e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a018:	6a3a      	ldr	r2, [r7, #32]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d903      	bls.n	800a026 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a024:	e1bd      	b.n	800a3a2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a028:	4618      	mov	r0, r3
 800a02a:	f04f 0100 	mov.w	r1, #0
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a032:	4aac      	ldr	r2, [pc, #688]	; (800a2e4 <UART_SetConfig+0x9c8>)
 800a034:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a038:	b29a      	uxth	r2, r3
 800a03a:	f04f 0300 	mov.w	r3, #0
 800a03e:	f7f6 f94f 	bl	80002e0 <__aeabi_uldivmod>
 800a042:	4602      	mov	r2, r0
 800a044:	460b      	mov	r3, r1
 800a046:	4610      	mov	r0, r2
 800a048:	4619      	mov	r1, r3
 800a04a:	f04f 0200 	mov.w	r2, #0
 800a04e:	f04f 0300 	mov.w	r3, #0
 800a052:	020b      	lsls	r3, r1, #8
 800a054:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a058:	0202      	lsls	r2, r0, #8
 800a05a:	6879      	ldr	r1, [r7, #4]
 800a05c:	6849      	ldr	r1, [r1, #4]
 800a05e:	0849      	lsrs	r1, r1, #1
 800a060:	4608      	mov	r0, r1
 800a062:	f04f 0100 	mov.w	r1, #0
 800a066:	1814      	adds	r4, r2, r0
 800a068:	eb43 0501 	adc.w	r5, r3, r1
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	461a      	mov	r2, r3
 800a072:	f04f 0300 	mov.w	r3, #0
 800a076:	4620      	mov	r0, r4
 800a078:	4629      	mov	r1, r5
 800a07a:	f7f6 f931 	bl	80002e0 <__aeabi_uldivmod>
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
 800a082:	4613      	mov	r3, r2
 800a084:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a08c:	d308      	bcc.n	800a0a0 <UART_SetConfig+0x784>
 800a08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a090:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a094:	d204      	bcs.n	800a0a0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a09c:	60da      	str	r2, [r3, #12]
 800a09e:	e180      	b.n	800a3a2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a0a6:	e17c      	b.n	800a3a2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	69db      	ldr	r3, [r3, #28]
 800a0ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0b0:	f040 80bf 	bne.w	800a232 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800a0b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a0b8:	2b20      	cmp	r3, #32
 800a0ba:	dc49      	bgt.n	800a150 <UART_SetConfig+0x834>
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	db7c      	blt.n	800a1ba <UART_SetConfig+0x89e>
 800a0c0:	2b20      	cmp	r3, #32
 800a0c2:	d87a      	bhi.n	800a1ba <UART_SetConfig+0x89e>
 800a0c4:	a201      	add	r2, pc, #4	; (adr r2, 800a0cc <UART_SetConfig+0x7b0>)
 800a0c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ca:	bf00      	nop
 800a0cc:	0800a157 	.word	0x0800a157
 800a0d0:	0800a15f 	.word	0x0800a15f
 800a0d4:	0800a1bb 	.word	0x0800a1bb
 800a0d8:	0800a1bb 	.word	0x0800a1bb
 800a0dc:	0800a167 	.word	0x0800a167
 800a0e0:	0800a1bb 	.word	0x0800a1bb
 800a0e4:	0800a1bb 	.word	0x0800a1bb
 800a0e8:	0800a1bb 	.word	0x0800a1bb
 800a0ec:	0800a177 	.word	0x0800a177
 800a0f0:	0800a1bb 	.word	0x0800a1bb
 800a0f4:	0800a1bb 	.word	0x0800a1bb
 800a0f8:	0800a1bb 	.word	0x0800a1bb
 800a0fc:	0800a1bb 	.word	0x0800a1bb
 800a100:	0800a1bb 	.word	0x0800a1bb
 800a104:	0800a1bb 	.word	0x0800a1bb
 800a108:	0800a1bb 	.word	0x0800a1bb
 800a10c:	0800a187 	.word	0x0800a187
 800a110:	0800a1bb 	.word	0x0800a1bb
 800a114:	0800a1bb 	.word	0x0800a1bb
 800a118:	0800a1bb 	.word	0x0800a1bb
 800a11c:	0800a1bb 	.word	0x0800a1bb
 800a120:	0800a1bb 	.word	0x0800a1bb
 800a124:	0800a1bb 	.word	0x0800a1bb
 800a128:	0800a1bb 	.word	0x0800a1bb
 800a12c:	0800a1bb 	.word	0x0800a1bb
 800a130:	0800a1bb 	.word	0x0800a1bb
 800a134:	0800a1bb 	.word	0x0800a1bb
 800a138:	0800a1bb 	.word	0x0800a1bb
 800a13c:	0800a1bb 	.word	0x0800a1bb
 800a140:	0800a1bb 	.word	0x0800a1bb
 800a144:	0800a1bb 	.word	0x0800a1bb
 800a148:	0800a1bb 	.word	0x0800a1bb
 800a14c:	0800a1ad 	.word	0x0800a1ad
 800a150:	2b40      	cmp	r3, #64	; 0x40
 800a152:	d02e      	beq.n	800a1b2 <UART_SetConfig+0x896>
 800a154:	e031      	b.n	800a1ba <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a156:	f7fd f8c1 	bl	80072dc <HAL_RCC_GetPCLK1Freq>
 800a15a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a15c:	e033      	b.n	800a1c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a15e:	f7fd f8d3 	bl	8007308 <HAL_RCC_GetPCLK2Freq>
 800a162:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a164:	e02f      	b.n	800a1c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a166:	f107 0314 	add.w	r3, r7, #20
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7fe f87a 	bl	8008264 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a174:	e027      	b.n	800a1c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a176:	f107 0308 	add.w	r3, r7, #8
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fe f9c6 	bl	800850c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a184:	e01f      	b.n	800a1c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a186:	4b58      	ldr	r3, [pc, #352]	; (800a2e8 <UART_SetConfig+0x9cc>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f003 0320 	and.w	r3, r3, #32
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d009      	beq.n	800a1a6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a192:	4b55      	ldr	r3, [pc, #340]	; (800a2e8 <UART_SetConfig+0x9cc>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	08db      	lsrs	r3, r3, #3
 800a198:	f003 0303 	and.w	r3, r3, #3
 800a19c:	4a53      	ldr	r2, [pc, #332]	; (800a2ec <UART_SetConfig+0x9d0>)
 800a19e:	fa22 f303 	lsr.w	r3, r2, r3
 800a1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a1a4:	e00f      	b.n	800a1c6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a1a6:	4b51      	ldr	r3, [pc, #324]	; (800a2ec <UART_SetConfig+0x9d0>)
 800a1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1aa:	e00c      	b.n	800a1c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a1ac:	4b4c      	ldr	r3, [pc, #304]	; (800a2e0 <UART_SetConfig+0x9c4>)
 800a1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1b0:	e009      	b.n	800a1c6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1b8:	e005      	b.n	800a1c6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a1c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	f000 80ea 	beq.w	800a3a2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d2:	4a44      	ldr	r2, [pc, #272]	; (800a2e4 <UART_SetConfig+0x9c8>)
 800a1d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1d8:	461a      	mov	r2, r3
 800a1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1e0:	005a      	lsls	r2, r3, #1
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	085b      	lsrs	r3, r3, #1
 800a1e8:	441a      	add	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f8:	2b0f      	cmp	r3, #15
 800a1fa:	d916      	bls.n	800a22a <UART_SetConfig+0x90e>
 800a1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a202:	d212      	bcs.n	800a22a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a206:	b29b      	uxth	r3, r3
 800a208:	f023 030f 	bic.w	r3, r3, #15
 800a20c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a210:	085b      	lsrs	r3, r3, #1
 800a212:	b29b      	uxth	r3, r3
 800a214:	f003 0307 	and.w	r3, r3, #7
 800a218:	b29a      	uxth	r2, r3
 800a21a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a21c:	4313      	orrs	r3, r2
 800a21e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a226:	60da      	str	r2, [r3, #12]
 800a228:	e0bb      	b.n	800a3a2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a230:	e0b7      	b.n	800a3a2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a232:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a236:	2b20      	cmp	r3, #32
 800a238:	dc4a      	bgt.n	800a2d0 <UART_SetConfig+0x9b4>
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	f2c0 8086 	blt.w	800a34c <UART_SetConfig+0xa30>
 800a240:	2b20      	cmp	r3, #32
 800a242:	f200 8083 	bhi.w	800a34c <UART_SetConfig+0xa30>
 800a246:	a201      	add	r2, pc, #4	; (adr r2, 800a24c <UART_SetConfig+0x930>)
 800a248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a24c:	0800a2d7 	.word	0x0800a2d7
 800a250:	0800a2f1 	.word	0x0800a2f1
 800a254:	0800a34d 	.word	0x0800a34d
 800a258:	0800a34d 	.word	0x0800a34d
 800a25c:	0800a2f9 	.word	0x0800a2f9
 800a260:	0800a34d 	.word	0x0800a34d
 800a264:	0800a34d 	.word	0x0800a34d
 800a268:	0800a34d 	.word	0x0800a34d
 800a26c:	0800a309 	.word	0x0800a309
 800a270:	0800a34d 	.word	0x0800a34d
 800a274:	0800a34d 	.word	0x0800a34d
 800a278:	0800a34d 	.word	0x0800a34d
 800a27c:	0800a34d 	.word	0x0800a34d
 800a280:	0800a34d 	.word	0x0800a34d
 800a284:	0800a34d 	.word	0x0800a34d
 800a288:	0800a34d 	.word	0x0800a34d
 800a28c:	0800a319 	.word	0x0800a319
 800a290:	0800a34d 	.word	0x0800a34d
 800a294:	0800a34d 	.word	0x0800a34d
 800a298:	0800a34d 	.word	0x0800a34d
 800a29c:	0800a34d 	.word	0x0800a34d
 800a2a0:	0800a34d 	.word	0x0800a34d
 800a2a4:	0800a34d 	.word	0x0800a34d
 800a2a8:	0800a34d 	.word	0x0800a34d
 800a2ac:	0800a34d 	.word	0x0800a34d
 800a2b0:	0800a34d 	.word	0x0800a34d
 800a2b4:	0800a34d 	.word	0x0800a34d
 800a2b8:	0800a34d 	.word	0x0800a34d
 800a2bc:	0800a34d 	.word	0x0800a34d
 800a2c0:	0800a34d 	.word	0x0800a34d
 800a2c4:	0800a34d 	.word	0x0800a34d
 800a2c8:	0800a34d 	.word	0x0800a34d
 800a2cc:	0800a33f 	.word	0x0800a33f
 800a2d0:	2b40      	cmp	r3, #64	; 0x40
 800a2d2:	d037      	beq.n	800a344 <UART_SetConfig+0xa28>
 800a2d4:	e03a      	b.n	800a34c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2d6:	f7fd f801 	bl	80072dc <HAL_RCC_GetPCLK1Freq>
 800a2da:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a2dc:	e03c      	b.n	800a358 <UART_SetConfig+0xa3c>
 800a2de:	bf00      	nop
 800a2e0:	003d0900 	.word	0x003d0900
 800a2e4:	0800d360 	.word	0x0800d360
 800a2e8:	58024400 	.word	0x58024400
 800a2ec:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2f0:	f7fd f80a 	bl	8007308 <HAL_RCC_GetPCLK2Freq>
 800a2f4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a2f6:	e02f      	b.n	800a358 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2f8:	f107 0314 	add.w	r3, r7, #20
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7fd ffb1 	bl	8008264 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a306:	e027      	b.n	800a358 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a308:	f107 0308 	add.w	r3, r7, #8
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7fe f8fd 	bl	800850c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a316:	e01f      	b.n	800a358 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a318:	4b2c      	ldr	r3, [pc, #176]	; (800a3cc <UART_SetConfig+0xab0>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f003 0320 	and.w	r3, r3, #32
 800a320:	2b00      	cmp	r3, #0
 800a322:	d009      	beq.n	800a338 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a324:	4b29      	ldr	r3, [pc, #164]	; (800a3cc <UART_SetConfig+0xab0>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	08db      	lsrs	r3, r3, #3
 800a32a:	f003 0303 	and.w	r3, r3, #3
 800a32e:	4a28      	ldr	r2, [pc, #160]	; (800a3d0 <UART_SetConfig+0xab4>)
 800a330:	fa22 f303 	lsr.w	r3, r2, r3
 800a334:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a336:	e00f      	b.n	800a358 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a338:	4b25      	ldr	r3, [pc, #148]	; (800a3d0 <UART_SetConfig+0xab4>)
 800a33a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a33c:	e00c      	b.n	800a358 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a33e:	4b25      	ldr	r3, [pc, #148]	; (800a3d4 <UART_SetConfig+0xab8>)
 800a340:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a342:	e009      	b.n	800a358 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a344:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a348:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a34a:	e005      	b.n	800a358 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a34c:	2300      	movs	r3, #0
 800a34e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a356:	bf00      	nop
    }

    if (pclk != 0U)
 800a358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d021      	beq.n	800a3a2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a362:	4a1d      	ldr	r2, [pc, #116]	; (800a3d8 <UART_SetConfig+0xabc>)
 800a364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a368:	461a      	mov	r2, r3
 800a36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36c:	fbb3 f2f2 	udiv	r2, r3, r2
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	085b      	lsrs	r3, r3, #1
 800a376:	441a      	add	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a380:	b29b      	uxth	r3, r3
 800a382:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a386:	2b0f      	cmp	r3, #15
 800a388:	d908      	bls.n	800a39c <UART_SetConfig+0xa80>
 800a38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a390:	d204      	bcs.n	800a39c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a398:	60da      	str	r2, [r3, #12]
 800a39a:	e002      	b.n	800a3a2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a3be:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3738      	adds	r7, #56	; 0x38
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bdb0      	pop	{r4, r5, r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	58024400 	.word	0x58024400
 800a3d0:	03d09000 	.word	0x03d09000
 800a3d4:	003d0900 	.word	0x003d0900
 800a3d8:	0800d360 	.word	0x0800d360

0800a3dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e8:	f003 0301 	and.w	r3, r3, #1
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00a      	beq.n	800a406 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	430a      	orrs	r2, r1
 800a404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a40a:	f003 0302 	and.w	r3, r3, #2
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d00a      	beq.n	800a428 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	430a      	orrs	r2, r1
 800a426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a42c:	f003 0304 	and.w	r3, r3, #4
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00a      	beq.n	800a44a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	430a      	orrs	r2, r1
 800a448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a44e:	f003 0308 	and.w	r3, r3, #8
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00a      	beq.n	800a46c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	430a      	orrs	r2, r1
 800a46a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a470:	f003 0310 	and.w	r3, r3, #16
 800a474:	2b00      	cmp	r3, #0
 800a476:	d00a      	beq.n	800a48e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	430a      	orrs	r2, r1
 800a48c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a492:	f003 0320 	and.w	r3, r3, #32
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00a      	beq.n	800a4b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	430a      	orrs	r2, r1
 800a4ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d01a      	beq.n	800a4f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4da:	d10a      	bne.n	800a4f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	430a      	orrs	r2, r1
 800a4f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00a      	beq.n	800a514 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	430a      	orrs	r2, r1
 800a512:	605a      	str	r2, [r3, #4]
  }
}
 800a514:	bf00      	nop
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af02      	add	r7, sp, #8
 800a526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a530:	f7f8 fdc4 	bl	80030bc <HAL_GetTick>
 800a534:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 0308 	and.w	r3, r3, #8
 800a540:	2b08      	cmp	r3, #8
 800a542:	d10e      	bne.n	800a562 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a544:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a548:	9300      	str	r3, [sp, #0]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2200      	movs	r2, #0
 800a54e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f82f 	bl	800a5b6 <UART_WaitOnFlagUntilTimeout>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d001      	beq.n	800a562 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a55e:	2303      	movs	r3, #3
 800a560:	e025      	b.n	800a5ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f003 0304 	and.w	r3, r3, #4
 800a56c:	2b04      	cmp	r3, #4
 800a56e:	d10e      	bne.n	800a58e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a570:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a574:	9300      	str	r3, [sp, #0]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2200      	movs	r2, #0
 800a57a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f819 	bl	800a5b6 <UART_WaitOnFlagUntilTimeout>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d001      	beq.n	800a58e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a58a:	2303      	movs	r3, #3
 800a58c:	e00f      	b.n	800a5ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2220      	movs	r2, #32
 800a592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2220      	movs	r2, #32
 800a59a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b084      	sub	sp, #16
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	60f8      	str	r0, [r7, #12]
 800a5be:	60b9      	str	r1, [r7, #8]
 800a5c0:	603b      	str	r3, [r7, #0]
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5c6:	e062      	b.n	800a68e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ce:	d05e      	beq.n	800a68e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5d0:	f7f8 fd74 	bl	80030bc <HAL_GetTick>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	69ba      	ldr	r2, [r7, #24]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d302      	bcc.n	800a5e6 <UART_WaitOnFlagUntilTimeout+0x30>
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d11d      	bne.n	800a622 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a5f4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	689a      	ldr	r2, [r3, #8]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f022 0201 	bic.w	r2, r2, #1
 800a604:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2220      	movs	r2, #32
 800a60a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2220      	movs	r2, #32
 800a612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2200      	movs	r2, #0
 800a61a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a61e:	2303      	movs	r3, #3
 800a620:	e045      	b.n	800a6ae <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f003 0304 	and.w	r3, r3, #4
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d02e      	beq.n	800a68e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	69db      	ldr	r3, [r3, #28]
 800a636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a63a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a63e:	d126      	bne.n	800a68e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a648:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a658:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	689a      	ldr	r2, [r3, #8]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f022 0201 	bic.w	r2, r2, #1
 800a668:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2220      	movs	r2, #32
 800a66e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2220      	movs	r2, #32
 800a676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2220      	movs	r2, #32
 800a67e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2200      	movs	r2, #0
 800a686:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a68a:	2303      	movs	r3, #3
 800a68c:	e00f      	b.n	800a6ae <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	69da      	ldr	r2, [r3, #28]
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	4013      	ands	r3, r2
 800a698:	68ba      	ldr	r2, [r7, #8]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	bf0c      	ite	eq
 800a69e:	2301      	moveq	r3, #1
 800a6a0:	2300      	movne	r3, #0
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	79fb      	ldrb	r3, [r7, #7]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d08d      	beq.n	800a5c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
	...

0800a6b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	68ba      	ldr	r2, [r7, #8]
 800a6ca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	88fa      	ldrh	r2, [r7, #6]
 800a6d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2222      	movs	r2, #34	; 0x22
 800a6e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d02c      	beq.n	800a746 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6f0:	4a25      	ldr	r2, [pc, #148]	; (800a788 <UART_Start_Receive_DMA+0xd0>)
 800a6f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6f8:	4a24      	ldr	r2, [pc, #144]	; (800a78c <UART_Start_Receive_DMA+0xd4>)
 800a6fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a700:	4a23      	ldr	r2, [pc, #140]	; (800a790 <UART_Start_Receive_DMA+0xd8>)
 800a702:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a708:	2200      	movs	r2, #0
 800a70a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	3324      	adds	r3, #36	; 0x24
 800a716:	4619      	mov	r1, r3
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a71c:	461a      	mov	r2, r3
 800a71e:	88fb      	ldrh	r3, [r7, #6]
 800a720:	f7f9 f920 	bl	8003964 <HAL_DMA_Start_IT>
 800a724:	4603      	mov	r3, r0
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00d      	beq.n	800a746 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2210      	movs	r2, #16
 800a72e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2220      	movs	r2, #32
 800a73e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	e01c      	b.n	800a780 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2200      	movs	r2, #0
 800a74a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a75c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	689a      	ldr	r2, [r3, #8]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f042 0201 	orr.w	r2, r2, #1
 800a76c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	689a      	ldr	r2, [r3, #8]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a77c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	3710      	adds	r7, #16
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	0800a8a1 	.word	0x0800a8a1
 800a78c:	0800a937 	.word	0x0800a937
 800a790:	0800a96f 	.word	0x0800a96f

0800a794 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a7aa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	689a      	ldr	r2, [r3, #8]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800a7ba:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2220      	movs	r2, #32
 800a7c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a7c4:	bf00      	nop
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a7e6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	6899      	ldr	r1, [r3, #8]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	4b0f      	ldr	r3, [pc, #60]	; (800a830 <UART_EndRxTransfer+0x60>)
 800a7f4:	400b      	ands	r3, r1
 800a7f6:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d107      	bne.n	800a810 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f022 0210 	bic.w	r2, r2, #16
 800a80e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2220      	movs	r2, #32
 800a814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2200      	movs	r2, #0
 800a822:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a824:	bf00      	nop
 800a826:	370c      	adds	r7, #12
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr
 800a830:	effffffe 	.word	0xeffffffe

0800a834 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a840:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	69db      	ldr	r3, [r3, #28]
 800a846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a84a:	d014      	beq.n	800a876 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2200      	movs	r2, #0
 800a850:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	689a      	ldr	r2, [r3, #8]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a862:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a872:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a874:	e002      	b.n	800a87c <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f7ff f812 	bl	80098a0 <HAL_UART_TxCpltCallback>
}
 800a87c:	bf00      	nop
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a890:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f7ff f80e 	bl	80098b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a898:	bf00      	nop
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ac:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	69db      	ldr	r3, [r3, #28]
 800a8b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8b6:	d02b      	beq.n	800a910 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a8ce:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	689a      	ldr	r2, [r3, #8]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f022 0201 	bic.w	r2, r2, #1
 800a8de:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	689a      	ldr	r2, [r3, #8]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8ee:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2220      	movs	r2, #32
 800a8f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d107      	bne.n	800a910 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f022 0210 	bic.w	r2, r2, #16
 800a90e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a914:	2b01      	cmp	r3, #1
 800a916:	d107      	bne.n	800a928 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a91e:	4619      	mov	r1, r3
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f7fe ffef 	bl	8009904 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a926:	e002      	b.n	800a92e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f7fe ffcd 	bl	80098c8 <HAL_UART_RxCpltCallback>
}
 800a92e:	bf00      	nop
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b084      	sub	sp, #16
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a942:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d109      	bne.n	800a960 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a952:	085b      	lsrs	r3, r3, #1
 800a954:	b29b      	uxth	r3, r3
 800a956:	4619      	mov	r1, r3
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f7fe ffd3 	bl	8009904 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a95e:	e002      	b.n	800a966 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f7fe ffbb 	bl	80098dc <HAL_UART_RxHalfCpltCallback>
}
 800a966:	bf00      	nop
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b086      	sub	sp, #24
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a97a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a982:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a98a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	689b      	ldr	r3, [r3, #8]
 800a992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a996:	2b80      	cmp	r3, #128	; 0x80
 800a998:	d109      	bne.n	800a9ae <UART_DMAError+0x40>
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	2b21      	cmp	r3, #33	; 0x21
 800a99e:	d106      	bne.n	800a9ae <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a9a8:	6978      	ldr	r0, [r7, #20]
 800a9aa:	f7ff fef3 	bl	800a794 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	689b      	ldr	r3, [r3, #8]
 800a9b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9b8:	2b40      	cmp	r3, #64	; 0x40
 800a9ba:	d109      	bne.n	800a9d0 <UART_DMAError+0x62>
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2b22      	cmp	r3, #34	; 0x22
 800a9c0:	d106      	bne.n	800a9d0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a9ca:	6978      	ldr	r0, [r7, #20]
 800a9cc:	f7ff ff00 	bl	800a7d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9d6:	f043 0210 	orr.w	r2, r3, #16
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a9e0:	6978      	ldr	r0, [r7, #20]
 800a9e2:	f7fe ff85 	bl	80098f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9e6:	bf00      	nop
 800a9e8:	3718      	adds	r7, #24
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b084      	sub	sp, #16
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2200      	movs	r2, #0
 800aa08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f7fe ff6f 	bl	80098f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa12:	bf00      	nop
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b082      	sub	sp, #8
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa30:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2220      	movs	r2, #32
 800aa36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f7fe ff2d 	bl	80098a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa46:	bf00      	nop
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aa4e:	b480      	push	{r7}
 800aa50:	b083      	sub	sp, #12
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aa56:	bf00      	nop
 800aa58:	370c      	adds	r7, #12
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr

0800aa62 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aa62:	b480      	push	{r7}
 800aa64:	b083      	sub	sp, #12
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aa6a:	bf00      	nop
 800aa6c:	370c      	adds	r7, #12
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr

0800aa76 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aa76:	b480      	push	{r7}
 800aa78:	b083      	sub	sp, #12
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aa7e:	bf00      	nop
 800aa80:	370c      	adds	r7, #12
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr

0800aa8a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aa8a:	b480      	push	{r7}
 800aa8c:	b085      	sub	sp, #20
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d101      	bne.n	800aaa0 <HAL_UARTEx_DisableFifoMode+0x16>
 800aa9c:	2302      	movs	r3, #2
 800aa9e:	e027      	b.n	800aaf0 <HAL_UARTEx_DisableFifoMode+0x66>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2224      	movs	r2, #36	; 0x24
 800aaac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f022 0201 	bic.w	r2, r2, #1
 800aac6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aace:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2220      	movs	r2, #32
 800aae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aaee:	2300      	movs	r3, #0
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3714      	adds	r7, #20
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d101      	bne.n	800ab14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ab10:	2302      	movs	r3, #2
 800ab12:	e02d      	b.n	800ab70 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2224      	movs	r2, #36	; 0x24
 800ab20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f022 0201 	bic.w	r2, r2, #1
 800ab3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	683a      	ldr	r2, [r7, #0]
 800ab4c:	430a      	orrs	r2, r1
 800ab4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f84f 	bl	800abf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	68fa      	ldr	r2, [r7, #12]
 800ab5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2220      	movs	r2, #32
 800ab62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ab6e:	2300      	movs	r3, #0
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3710      	adds	r7, #16
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d101      	bne.n	800ab90 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ab8c:	2302      	movs	r3, #2
 800ab8e:	e02d      	b.n	800abec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2201      	movs	r2, #1
 800ab94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2224      	movs	r2, #36	; 0x24
 800ab9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f022 0201 	bic.w	r2, r2, #1
 800abb6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	683a      	ldr	r2, [r7, #0]
 800abc8:	430a      	orrs	r2, r1
 800abca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 f811 	bl	800abf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2220      	movs	r2, #32
 800abde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800abea:	2300      	movs	r3, #0
}
 800abec:	4618      	mov	r0, r3
 800abee:	3710      	adds	r7, #16
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b085      	sub	sp, #20
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d108      	bne.n	800ac16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2201      	movs	r2, #1
 800ac08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ac14:	e031      	b.n	800ac7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ac16:	2310      	movs	r3, #16
 800ac18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ac1a:	2310      	movs	r3, #16
 800ac1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	0e5b      	lsrs	r3, r3, #25
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	f003 0307 	and.w	r3, r3, #7
 800ac2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	0f5b      	lsrs	r3, r3, #29
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	f003 0307 	and.w	r3, r3, #7
 800ac3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac3e:	7bbb      	ldrb	r3, [r7, #14]
 800ac40:	7b3a      	ldrb	r2, [r7, #12]
 800ac42:	4911      	ldr	r1, [pc, #68]	; (800ac88 <UARTEx_SetNbDataToProcess+0x94>)
 800ac44:	5c8a      	ldrb	r2, [r1, r2]
 800ac46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac4a:	7b3a      	ldrb	r2, [r7, #12]
 800ac4c:	490f      	ldr	r1, [pc, #60]	; (800ac8c <UARTEx_SetNbDataToProcess+0x98>)
 800ac4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac50:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac54:	b29a      	uxth	r2, r3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac5c:	7bfb      	ldrb	r3, [r7, #15]
 800ac5e:	7b7a      	ldrb	r2, [r7, #13]
 800ac60:	4909      	ldr	r1, [pc, #36]	; (800ac88 <UARTEx_SetNbDataToProcess+0x94>)
 800ac62:	5c8a      	ldrb	r2, [r1, r2]
 800ac64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac68:	7b7a      	ldrb	r2, [r7, #13]
 800ac6a:	4908      	ldr	r1, [pc, #32]	; (800ac8c <UARTEx_SetNbDataToProcess+0x98>)
 800ac6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac6e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac72:	b29a      	uxth	r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ac7a:	bf00      	nop
 800ac7c:	3714      	adds	r7, #20
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	0800d378 	.word	0x0800d378
 800ac8c:	0800d380 	.word	0x0800d380

0800ac90 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b085      	sub	sp, #20
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	4603      	mov	r3, r0
 800ac98:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ac9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aca2:	2b84      	cmp	r3, #132	; 0x84
 800aca4:	d005      	beq.n	800acb2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800aca6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	4413      	add	r3, r2
 800acae:	3303      	adds	r3, #3
 800acb0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800acb2:	68fb      	ldr	r3, [r7, #12]
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3714      	adds	r7, #20
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800acc4:	f001 f84a 	bl	800bd5c <vTaskStartScheduler>
  
  return osOK;
 800acc8:	2300      	movs	r3, #0
}
 800acca:	4618      	mov	r0, r3
 800accc:	bd80      	pop	{r7, pc}

0800acce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800acce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acd0:	b089      	sub	sp, #36	; 0x24
 800acd2:	af04      	add	r7, sp, #16
 800acd4:	6078      	str	r0, [r7, #4]
 800acd6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	695b      	ldr	r3, [r3, #20]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d020      	beq.n	800ad22 <osThreadCreate+0x54>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	699b      	ldr	r3, [r3, #24]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d01c      	beq.n	800ad22 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	685c      	ldr	r4, [r3, #4]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681d      	ldr	r5, [r3, #0]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	691e      	ldr	r6, [r3, #16]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7ff ffc8 	bl	800ac90 <makeFreeRtosPriority>
 800ad00:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	695b      	ldr	r3, [r3, #20]
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ad0a:	9202      	str	r2, [sp, #8]
 800ad0c:	9301      	str	r3, [sp, #4]
 800ad0e:	9100      	str	r1, [sp, #0]
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	4632      	mov	r2, r6
 800ad14:	4629      	mov	r1, r5
 800ad16:	4620      	mov	r0, r4
 800ad18:	f000 fe58 	bl	800b9cc <xTaskCreateStatic>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	60fb      	str	r3, [r7, #12]
 800ad20:	e01c      	b.n	800ad5c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	685c      	ldr	r4, [r3, #4]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ad2e:	b29e      	uxth	r6, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7ff ffaa 	bl	800ac90 <makeFreeRtosPriority>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	f107 030c 	add.w	r3, r7, #12
 800ad42:	9301      	str	r3, [sp, #4]
 800ad44:	9200      	str	r2, [sp, #0]
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	4632      	mov	r2, r6
 800ad4a:	4629      	mov	r1, r5
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	f000 fe9a 	bl	800ba86 <xTaskCreate>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d001      	beq.n	800ad5c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	e000      	b.n	800ad5e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3714      	adds	r7, #20
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad66 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b084      	sub	sp, #16
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d001      	beq.n	800ad7c <osDelay+0x16>
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	e000      	b.n	800ad7e <osDelay+0x18>
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f000 ffb8 	bl	800bcf4 <vTaskDelay>
  
  return osOK;
 800ad84:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b082      	sub	sp, #8
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d007      	beq.n	800adae <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	4619      	mov	r1, r3
 800ada4:	2001      	movs	r0, #1
 800ada6:	f000 fa5c 	bl	800b262 <xQueueCreateMutexStatic>
 800adaa:	4603      	mov	r3, r0
 800adac:	e003      	b.n	800adb6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800adae:	2001      	movs	r0, #1
 800adb0:	f000 fa3f 	bl	800b232 <xQueueCreateMutex>
 800adb4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3708      	adds	r7, #8
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b086      	sub	sp, #24
 800adc2:	af02      	add	r7, sp, #8
 800adc4:	6078      	str	r0, [r7, #4]
 800adc6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d00f      	beq.n	800adf0 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	2b01      	cmp	r3, #1
 800add4:	d10a      	bne.n	800adec <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	2203      	movs	r2, #3
 800addc:	9200      	str	r2, [sp, #0]
 800adde:	2200      	movs	r2, #0
 800ade0:	2100      	movs	r1, #0
 800ade2:	2001      	movs	r0, #1
 800ade4:	f000 f93a 	bl	800b05c <xQueueGenericCreateStatic>
 800ade8:	4603      	mov	r3, r0
 800adea:	e016      	b.n	800ae1a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800adec:	2300      	movs	r3, #0
 800adee:	e014      	b.n	800ae1a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d110      	bne.n	800ae18 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800adf6:	2203      	movs	r2, #3
 800adf8:	2100      	movs	r1, #0
 800adfa:	2001      	movs	r0, #1
 800adfc:	f000 f9a6 	bl	800b14c <xQueueGenericCreate>
 800ae00:	60f8      	str	r0, [r7, #12]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d005      	beq.n	800ae14 <osSemaphoreCreate+0x56>
 800ae08:	2300      	movs	r3, #0
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	2100      	movs	r1, #0
 800ae0e:	68f8      	ldr	r0, [r7, #12]
 800ae10:	f000 fa42 	bl	800b298 <xQueueGenericSend>
      return sema;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	e000      	b.n	800ae1a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800ae18:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}

0800ae22 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ae22:	b480      	push	{r7}
 800ae24:	b083      	sub	sp, #12
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f103 0208 	add.w	r2, r3, #8
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f04f 32ff 	mov.w	r2, #4294967295
 800ae3a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f103 0208 	add.w	r2, r3, #8
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f103 0208 	add.w	r2, r3, #8
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ae56:	bf00      	nop
 800ae58:	370c      	adds	r7, #12
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ae62:	b480      	push	{r7}
 800ae64:	b083      	sub	sp, #12
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ae70:	bf00      	nop
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr

0800ae7c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b085      	sub	sp, #20
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	68fa      	ldr	r2, [r7, #12]
 800ae90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	689a      	ldr	r2, [r3, #8]
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	683a      	ldr	r2, [r7, #0]
 800aea0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	683a      	ldr	r2, [r7, #0]
 800aea6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	1c5a      	adds	r2, r3, #1
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	601a      	str	r2, [r3, #0]
}
 800aeb8:	bf00      	nop
 800aeba:	3714      	adds	r7, #20
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeda:	d103      	bne.n	800aee4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	691b      	ldr	r3, [r3, #16]
 800aee0:	60fb      	str	r3, [r7, #12]
 800aee2:	e00c      	b.n	800aefe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	3308      	adds	r3, #8
 800aee8:	60fb      	str	r3, [r7, #12]
 800aeea:	e002      	b.n	800aef2 <vListInsert+0x2e>
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	60fb      	str	r3, [r7, #12]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	68ba      	ldr	r2, [r7, #8]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d2f6      	bcs.n	800aeec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	685a      	ldr	r2, [r3, #4]
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	683a      	ldr	r2, [r7, #0]
 800af0c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	683a      	ldr	r2, [r7, #0]
 800af18:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	1c5a      	adds	r2, r3, #1
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	601a      	str	r2, [r3, #0]
}
 800af2a:	bf00      	nop
 800af2c:	3714      	adds	r7, #20
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr

0800af36 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800af36:	b480      	push	{r7}
 800af38:	b085      	sub	sp, #20
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	687a      	ldr	r2, [r7, #4]
 800af4a:	6892      	ldr	r2, [r2, #8]
 800af4c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	6852      	ldr	r2, [r2, #4]
 800af56:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d103      	bne.n	800af6a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	689a      	ldr	r2, [r3, #8]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	1e5a      	subs	r2, r3, #1
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3714      	adds	r7, #20
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr
	...

0800af8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d10a      	bne.n	800afb6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800afa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa4:	f383 8811 	msr	BASEPRI, r3
 800afa8:	f3bf 8f6f 	isb	sy
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800afb2:	bf00      	nop
 800afb4:	e7fe      	b.n	800afb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800afb6:	f001 fe1d 	bl	800cbf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afc2:	68f9      	ldr	r1, [r7, #12]
 800afc4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800afc6:	fb01 f303 	mul.w	r3, r1, r3
 800afca:	441a      	add	r2, r3
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2200      	movs	r2, #0
 800afd4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afe6:	3b01      	subs	r3, #1
 800afe8:	68f9      	ldr	r1, [r7, #12]
 800afea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800afec:	fb01 f303 	mul.w	r3, r1, r3
 800aff0:	441a      	add	r2, r3
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	22ff      	movs	r2, #255	; 0xff
 800affa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	22ff      	movs	r2, #255	; 0xff
 800b002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d114      	bne.n	800b036 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	691b      	ldr	r3, [r3, #16]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d01a      	beq.n	800b04a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	3310      	adds	r3, #16
 800b018:	4618      	mov	r0, r3
 800b01a:	f001 f8e1 	bl	800c1e0 <xTaskRemoveFromEventList>
 800b01e:	4603      	mov	r3, r0
 800b020:	2b00      	cmp	r3, #0
 800b022:	d012      	beq.n	800b04a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b024:	4b0c      	ldr	r3, [pc, #48]	; (800b058 <xQueueGenericReset+0xcc>)
 800b026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b02a:	601a      	str	r2, [r3, #0]
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	f3bf 8f6f 	isb	sy
 800b034:	e009      	b.n	800b04a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	3310      	adds	r3, #16
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7ff fef1 	bl	800ae22 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	3324      	adds	r3, #36	; 0x24
 800b044:	4618      	mov	r0, r3
 800b046:	f7ff feec 	bl	800ae22 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b04a:	f001 fe03 	bl	800cc54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b04e:	2301      	movs	r3, #1
}
 800b050:	4618      	mov	r0, r3
 800b052:	3710      	adds	r7, #16
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	e000ed04 	.word	0xe000ed04

0800b05c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b08e      	sub	sp, #56	; 0x38
 800b060:	af02      	add	r7, sp, #8
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]
 800b068:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d10a      	bne.n	800b086 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b074:	f383 8811 	msr	BASEPRI, r3
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b082:	bf00      	nop
 800b084:	e7fe      	b.n	800b084 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d10a      	bne.n	800b0a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b090:	f383 8811 	msr	BASEPRI, r3
 800b094:	f3bf 8f6f 	isb	sy
 800b098:	f3bf 8f4f 	dsb	sy
 800b09c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b09e:	bf00      	nop
 800b0a0:	e7fe      	b.n	800b0a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d002      	beq.n	800b0ae <xQueueGenericCreateStatic+0x52>
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d001      	beq.n	800b0b2 <xQueueGenericCreateStatic+0x56>
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e000      	b.n	800b0b4 <xQueueGenericCreateStatic+0x58>
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d10a      	bne.n	800b0ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0bc:	f383 8811 	msr	BASEPRI, r3
 800b0c0:	f3bf 8f6f 	isb	sy
 800b0c4:	f3bf 8f4f 	dsb	sy
 800b0c8:	623b      	str	r3, [r7, #32]
}
 800b0ca:	bf00      	nop
 800b0cc:	e7fe      	b.n	800b0cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d102      	bne.n	800b0da <xQueueGenericCreateStatic+0x7e>
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d101      	bne.n	800b0de <xQueueGenericCreateStatic+0x82>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e000      	b.n	800b0e0 <xQueueGenericCreateStatic+0x84>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10a      	bne.n	800b0fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e8:	f383 8811 	msr	BASEPRI, r3
 800b0ec:	f3bf 8f6f 	isb	sy
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	61fb      	str	r3, [r7, #28]
}
 800b0f6:	bf00      	nop
 800b0f8:	e7fe      	b.n	800b0f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b0fa:	2348      	movs	r3, #72	; 0x48
 800b0fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	2b48      	cmp	r3, #72	; 0x48
 800b102:	d00a      	beq.n	800b11a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b108:	f383 8811 	msr	BASEPRI, r3
 800b10c:	f3bf 8f6f 	isb	sy
 800b110:	f3bf 8f4f 	dsb	sy
 800b114:	61bb      	str	r3, [r7, #24]
}
 800b116:	bf00      	nop
 800b118:	e7fe      	b.n	800b118 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b11a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b122:	2b00      	cmp	r3, #0
 800b124:	d00d      	beq.n	800b142 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b128:	2201      	movs	r2, #1
 800b12a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b12e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b134:	9300      	str	r3, [sp, #0]
 800b136:	4613      	mov	r3, r2
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	68b9      	ldr	r1, [r7, #8]
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f000 f83f 	bl	800b1c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b144:	4618      	mov	r0, r3
 800b146:	3730      	adds	r7, #48	; 0x30
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b08a      	sub	sp, #40	; 0x28
 800b150:	af02      	add	r7, sp, #8
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	60b9      	str	r1, [r7, #8]
 800b156:	4613      	mov	r3, r2
 800b158:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d10a      	bne.n	800b176 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b164:	f383 8811 	msr	BASEPRI, r3
 800b168:	f3bf 8f6f 	isb	sy
 800b16c:	f3bf 8f4f 	dsb	sy
 800b170:	613b      	str	r3, [r7, #16]
}
 800b172:	bf00      	nop
 800b174:	e7fe      	b.n	800b174 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	68ba      	ldr	r2, [r7, #8]
 800b17a:	fb02 f303 	mul.w	r3, r2, r3
 800b17e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	3348      	adds	r3, #72	; 0x48
 800b184:	4618      	mov	r0, r3
 800b186:	f001 fe57 	bl	800ce38 <pvPortMalloc>
 800b18a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b18c:	69bb      	ldr	r3, [r7, #24]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d011      	beq.n	800b1b6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b192:	69bb      	ldr	r3, [r7, #24]
 800b194:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	3348      	adds	r3, #72	; 0x48
 800b19a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b1a4:	79fa      	ldrb	r2, [r7, #7]
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	9300      	str	r3, [sp, #0]
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	697a      	ldr	r2, [r7, #20]
 800b1ae:	68b9      	ldr	r1, [r7, #8]
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f000 f805 	bl	800b1c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b1b6:	69bb      	ldr	r3, [r7, #24]
	}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3720      	adds	r7, #32
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607a      	str	r2, [r7, #4]
 800b1cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d103      	bne.n	800b1dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b1d4:	69bb      	ldr	r3, [r7, #24]
 800b1d6:	69ba      	ldr	r2, [r7, #24]
 800b1d8:	601a      	str	r2, [r3, #0]
 800b1da:	e002      	b.n	800b1e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b1dc:	69bb      	ldr	r3, [r7, #24]
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	68fa      	ldr	r2, [r7, #12]
 800b1e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b1e8:	69bb      	ldr	r3, [r7, #24]
 800b1ea:	68ba      	ldr	r2, [r7, #8]
 800b1ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b1ee:	2101      	movs	r1, #1
 800b1f0:	69b8      	ldr	r0, [r7, #24]
 800b1f2:	f7ff fecb 	bl	800af8c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b1f6:	bf00      	nop
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b082      	sub	sp, #8
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d00e      	beq.n	800b22a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2200      	movs	r2, #0
 800b21c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b21e:	2300      	movs	r3, #0
 800b220:	2200      	movs	r2, #0
 800b222:	2100      	movs	r1, #0
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 f837 	bl	800b298 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b22a:	bf00      	nop
 800b22c:	3708      	adds	r7, #8
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}

0800b232 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b232:	b580      	push	{r7, lr}
 800b234:	b086      	sub	sp, #24
 800b236:	af00      	add	r7, sp, #0
 800b238:	4603      	mov	r3, r0
 800b23a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b23c:	2301      	movs	r3, #1
 800b23e:	617b      	str	r3, [r7, #20]
 800b240:	2300      	movs	r3, #0
 800b242:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b244:	79fb      	ldrb	r3, [r7, #7]
 800b246:	461a      	mov	r2, r3
 800b248:	6939      	ldr	r1, [r7, #16]
 800b24a:	6978      	ldr	r0, [r7, #20]
 800b24c:	f7ff ff7e 	bl	800b14c <xQueueGenericCreate>
 800b250:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b252:	68f8      	ldr	r0, [r7, #12]
 800b254:	f7ff ffd3 	bl	800b1fe <prvInitialiseMutex>

		return xNewQueue;
 800b258:	68fb      	ldr	r3, [r7, #12]
	}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3718      	adds	r7, #24
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b262:	b580      	push	{r7, lr}
 800b264:	b088      	sub	sp, #32
 800b266:	af02      	add	r7, sp, #8
 800b268:	4603      	mov	r3, r0
 800b26a:	6039      	str	r1, [r7, #0]
 800b26c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b26e:	2301      	movs	r3, #1
 800b270:	617b      	str	r3, [r7, #20]
 800b272:	2300      	movs	r3, #0
 800b274:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b276:	79fb      	ldrb	r3, [r7, #7]
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	2200      	movs	r2, #0
 800b27e:	6939      	ldr	r1, [r7, #16]
 800b280:	6978      	ldr	r0, [r7, #20]
 800b282:	f7ff feeb 	bl	800b05c <xQueueGenericCreateStatic>
 800b286:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f7ff ffb8 	bl	800b1fe <prvInitialiseMutex>

		return xNewQueue;
 800b28e:	68fb      	ldr	r3, [r7, #12]
	}
 800b290:	4618      	mov	r0, r3
 800b292:	3718      	adds	r7, #24
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b08e      	sub	sp, #56	; 0x38
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	607a      	str	r2, [r7, #4]
 800b2a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d10a      	bne.n	800b2ca <xQueueGenericSend+0x32>
	__asm volatile
 800b2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b8:	f383 8811 	msr	BASEPRI, r3
 800b2bc:	f3bf 8f6f 	isb	sy
 800b2c0:	f3bf 8f4f 	dsb	sy
 800b2c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b2c6:	bf00      	nop
 800b2c8:	e7fe      	b.n	800b2c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d103      	bne.n	800b2d8 <xQueueGenericSend+0x40>
 800b2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d101      	bne.n	800b2dc <xQueueGenericSend+0x44>
 800b2d8:	2301      	movs	r3, #1
 800b2da:	e000      	b.n	800b2de <xQueueGenericSend+0x46>
 800b2dc:	2300      	movs	r3, #0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d10a      	bne.n	800b2f8 <xQueueGenericSend+0x60>
	__asm volatile
 800b2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e6:	f383 8811 	msr	BASEPRI, r3
 800b2ea:	f3bf 8f6f 	isb	sy
 800b2ee:	f3bf 8f4f 	dsb	sy
 800b2f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b2f4:	bf00      	nop
 800b2f6:	e7fe      	b.n	800b2f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	d103      	bne.n	800b306 <xQueueGenericSend+0x6e>
 800b2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b302:	2b01      	cmp	r3, #1
 800b304:	d101      	bne.n	800b30a <xQueueGenericSend+0x72>
 800b306:	2301      	movs	r3, #1
 800b308:	e000      	b.n	800b30c <xQueueGenericSend+0x74>
 800b30a:	2300      	movs	r3, #0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d10a      	bne.n	800b326 <xQueueGenericSend+0x8e>
	__asm volatile
 800b310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b314:	f383 8811 	msr	BASEPRI, r3
 800b318:	f3bf 8f6f 	isb	sy
 800b31c:	f3bf 8f4f 	dsb	sy
 800b320:	623b      	str	r3, [r7, #32]
}
 800b322:	bf00      	nop
 800b324:	e7fe      	b.n	800b324 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b326:	f001 f917 	bl	800c558 <xTaskGetSchedulerState>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d102      	bne.n	800b336 <xQueueGenericSend+0x9e>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d101      	bne.n	800b33a <xQueueGenericSend+0xa2>
 800b336:	2301      	movs	r3, #1
 800b338:	e000      	b.n	800b33c <xQueueGenericSend+0xa4>
 800b33a:	2300      	movs	r3, #0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d10a      	bne.n	800b356 <xQueueGenericSend+0xbe>
	__asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	61fb      	str	r3, [r7, #28]
}
 800b352:	bf00      	nop
 800b354:	e7fe      	b.n	800b354 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b356:	f001 fc4d 	bl	800cbf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b362:	429a      	cmp	r2, r3
 800b364:	d302      	bcc.n	800b36c <xQueueGenericSend+0xd4>
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	2b02      	cmp	r3, #2
 800b36a:	d129      	bne.n	800b3c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b36c:	683a      	ldr	r2, [r7, #0]
 800b36e:	68b9      	ldr	r1, [r7, #8]
 800b370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b372:	f000 fa41 	bl	800b7f8 <prvCopyDataToQueue>
 800b376:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d010      	beq.n	800b3a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b382:	3324      	adds	r3, #36	; 0x24
 800b384:	4618      	mov	r0, r3
 800b386:	f000 ff2b 	bl	800c1e0 <xTaskRemoveFromEventList>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d013      	beq.n	800b3b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b390:	4b3f      	ldr	r3, [pc, #252]	; (800b490 <xQueueGenericSend+0x1f8>)
 800b392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b396:	601a      	str	r2, [r3, #0]
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	e00a      	b.n	800b3b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d007      	beq.n	800b3b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b3a8:	4b39      	ldr	r3, [pc, #228]	; (800b490 <xQueueGenericSend+0x1f8>)
 800b3aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3ae:	601a      	str	r2, [r3, #0]
 800b3b0:	f3bf 8f4f 	dsb	sy
 800b3b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b3b8:	f001 fc4c 	bl	800cc54 <vPortExitCritical>
				return pdPASS;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e063      	b.n	800b488 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d103      	bne.n	800b3ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b3c6:	f001 fc45 	bl	800cc54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	e05c      	b.n	800b488 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b3ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d106      	bne.n	800b3e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b3d4:	f107 0314 	add.w	r3, r7, #20
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f000 ff63 	bl	800c2a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b3e2:	f001 fc37 	bl	800cc54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3e6:	f000 fd19 	bl	800be1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3ea:	f001 fc03 	bl	800cbf4 <vPortEnterCritical>
 800b3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3f4:	b25b      	sxtb	r3, r3
 800b3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3fa:	d103      	bne.n	800b404 <xQueueGenericSend+0x16c>
 800b3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fe:	2200      	movs	r2, #0
 800b400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b406:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b40a:	b25b      	sxtb	r3, r3
 800b40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b410:	d103      	bne.n	800b41a <xQueueGenericSend+0x182>
 800b412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b414:	2200      	movs	r2, #0
 800b416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b41a:	f001 fc1b 	bl	800cc54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b41e:	1d3a      	adds	r2, r7, #4
 800b420:	f107 0314 	add.w	r3, r7, #20
 800b424:	4611      	mov	r1, r2
 800b426:	4618      	mov	r0, r3
 800b428:	f000 ff52 	bl	800c2d0 <xTaskCheckForTimeOut>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d124      	bne.n	800b47c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b432:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b434:	f000 fab2 	bl	800b99c <prvIsQueueFull>
 800b438:	4603      	mov	r3, r0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d018      	beq.n	800b470 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b440:	3310      	adds	r3, #16
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	4611      	mov	r1, r2
 800b446:	4618      	mov	r0, r3
 800b448:	f000 fea6 	bl	800c198 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b44c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b44e:	f000 fa3d 	bl	800b8cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b452:	f000 fcf1 	bl	800be38 <xTaskResumeAll>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	f47f af7c 	bne.w	800b356 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b45e:	4b0c      	ldr	r3, [pc, #48]	; (800b490 <xQueueGenericSend+0x1f8>)
 800b460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b464:	601a      	str	r2, [r3, #0]
 800b466:	f3bf 8f4f 	dsb	sy
 800b46a:	f3bf 8f6f 	isb	sy
 800b46e:	e772      	b.n	800b356 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b472:	f000 fa2b 	bl	800b8cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b476:	f000 fcdf 	bl	800be38 <xTaskResumeAll>
 800b47a:	e76c      	b.n	800b356 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b47c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b47e:	f000 fa25 	bl	800b8cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b482:	f000 fcd9 	bl	800be38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b486:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3738      	adds	r7, #56	; 0x38
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	e000ed04 	.word	0xe000ed04

0800b494 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b08e      	sub	sp, #56	; 0x38
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d10a      	bne.n	800b4be <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ac:	f383 8811 	msr	BASEPRI, r3
 800b4b0:	f3bf 8f6f 	isb	sy
 800b4b4:	f3bf 8f4f 	dsb	sy
 800b4b8:	623b      	str	r3, [r7, #32]
}
 800b4ba:	bf00      	nop
 800b4bc:	e7fe      	b.n	800b4bc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d00a      	beq.n	800b4dc <xQueueGiveFromISR+0x48>
	__asm volatile
 800b4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ca:	f383 8811 	msr	BASEPRI, r3
 800b4ce:	f3bf 8f6f 	isb	sy
 800b4d2:	f3bf 8f4f 	dsb	sy
 800b4d6:	61fb      	str	r3, [r7, #28]
}
 800b4d8:	bf00      	nop
 800b4da:	e7fe      	b.n	800b4da <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d103      	bne.n	800b4ec <xQueueGiveFromISR+0x58>
 800b4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d101      	bne.n	800b4f0 <xQueueGiveFromISR+0x5c>
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	e000      	b.n	800b4f2 <xQueueGiveFromISR+0x5e>
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d10a      	bne.n	800b50c <xQueueGiveFromISR+0x78>
	__asm volatile
 800b4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fa:	f383 8811 	msr	BASEPRI, r3
 800b4fe:	f3bf 8f6f 	isb	sy
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	61bb      	str	r3, [r7, #24]
}
 800b508:	bf00      	nop
 800b50a:	e7fe      	b.n	800b50a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b50c:	f001 fc54 	bl	800cdb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b510:	f3ef 8211 	mrs	r2, BASEPRI
 800b514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b518:	f383 8811 	msr	BASEPRI, r3
 800b51c:	f3bf 8f6f 	isb	sy
 800b520:	f3bf 8f4f 	dsb	sy
 800b524:	617a      	str	r2, [r7, #20]
 800b526:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b528:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b52a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b530:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b538:	429a      	cmp	r2, r3
 800b53a:	d22b      	bcs.n	800b594 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b548:	1c5a      	adds	r2, r3, #1
 800b54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b54e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b556:	d112      	bne.n	800b57e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d016      	beq.n	800b58e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b562:	3324      	adds	r3, #36	; 0x24
 800b564:	4618      	mov	r0, r3
 800b566:	f000 fe3b 	bl	800c1e0 <xTaskRemoveFromEventList>
 800b56a:	4603      	mov	r3, r0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00e      	beq.n	800b58e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d00b      	beq.n	800b58e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	2201      	movs	r2, #1
 800b57a:	601a      	str	r2, [r3, #0]
 800b57c:	e007      	b.n	800b58e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b57e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b582:	3301      	adds	r3, #1
 800b584:	b2db      	uxtb	r3, r3
 800b586:	b25a      	sxtb	r2, r3
 800b588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b58e:	2301      	movs	r3, #1
 800b590:	637b      	str	r3, [r7, #52]	; 0x34
 800b592:	e001      	b.n	800b598 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b594:	2300      	movs	r3, #0
 800b596:	637b      	str	r3, [r7, #52]	; 0x34
 800b598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b59a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b5a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3738      	adds	r7, #56	; 0x38
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
	...

0800b5b0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b08e      	sub	sp, #56	; 0x38
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d10a      	bne.n	800b5e2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d0:	f383 8811 	msr	BASEPRI, r3
 800b5d4:	f3bf 8f6f 	isb	sy
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	623b      	str	r3, [r7, #32]
}
 800b5de:	bf00      	nop
 800b5e0:	e7fe      	b.n	800b5e0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d00a      	beq.n	800b600 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ee:	f383 8811 	msr	BASEPRI, r3
 800b5f2:	f3bf 8f6f 	isb	sy
 800b5f6:	f3bf 8f4f 	dsb	sy
 800b5fa:	61fb      	str	r3, [r7, #28]
}
 800b5fc:	bf00      	nop
 800b5fe:	e7fe      	b.n	800b5fe <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b600:	f000 ffaa 	bl	800c558 <xTaskGetSchedulerState>
 800b604:	4603      	mov	r3, r0
 800b606:	2b00      	cmp	r3, #0
 800b608:	d102      	bne.n	800b610 <xQueueSemaphoreTake+0x60>
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d101      	bne.n	800b614 <xQueueSemaphoreTake+0x64>
 800b610:	2301      	movs	r3, #1
 800b612:	e000      	b.n	800b616 <xQueueSemaphoreTake+0x66>
 800b614:	2300      	movs	r3, #0
 800b616:	2b00      	cmp	r3, #0
 800b618:	d10a      	bne.n	800b630 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61e:	f383 8811 	msr	BASEPRI, r3
 800b622:	f3bf 8f6f 	isb	sy
 800b626:	f3bf 8f4f 	dsb	sy
 800b62a:	61bb      	str	r3, [r7, #24]
}
 800b62c:	bf00      	nop
 800b62e:	e7fe      	b.n	800b62e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b630:	f001 fae0 	bl	800cbf4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b638:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d024      	beq.n	800b68a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b642:	1e5a      	subs	r2, r3, #1
 800b644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b646:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d104      	bne.n	800b65a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b650:	f001 f92a 	bl	800c8a8 <pvTaskIncrementMutexHeldCount>
 800b654:	4602      	mov	r2, r0
 800b656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b658:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65c:	691b      	ldr	r3, [r3, #16]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d00f      	beq.n	800b682 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b664:	3310      	adds	r3, #16
 800b666:	4618      	mov	r0, r3
 800b668:	f000 fdba 	bl	800c1e0 <xTaskRemoveFromEventList>
 800b66c:	4603      	mov	r3, r0
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d007      	beq.n	800b682 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b672:	4b54      	ldr	r3, [pc, #336]	; (800b7c4 <xQueueSemaphoreTake+0x214>)
 800b674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b678:	601a      	str	r2, [r3, #0]
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b682:	f001 fae7 	bl	800cc54 <vPortExitCritical>
				return pdPASS;
 800b686:	2301      	movs	r3, #1
 800b688:	e097      	b.n	800b7ba <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d111      	bne.n	800b6b4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00a      	beq.n	800b6ac <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69a:	f383 8811 	msr	BASEPRI, r3
 800b69e:	f3bf 8f6f 	isb	sy
 800b6a2:	f3bf 8f4f 	dsb	sy
 800b6a6:	617b      	str	r3, [r7, #20]
}
 800b6a8:	bf00      	nop
 800b6aa:	e7fe      	b.n	800b6aa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b6ac:	f001 fad2 	bl	800cc54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	e082      	b.n	800b7ba <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d106      	bne.n	800b6c8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6ba:	f107 030c 	add.w	r3, r7, #12
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f000 fdf0 	bl	800c2a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6c8:	f001 fac4 	bl	800cc54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6cc:	f000 fba6 	bl	800be1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6d0:	f001 fa90 	bl	800cbf4 <vPortEnterCritical>
 800b6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6da:	b25b      	sxtb	r3, r3
 800b6dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6e0:	d103      	bne.n	800b6ea <xQueueSemaphoreTake+0x13a>
 800b6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6f0:	b25b      	sxtb	r3, r3
 800b6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f6:	d103      	bne.n	800b700 <xQueueSemaphoreTake+0x150>
 800b6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b700:	f001 faa8 	bl	800cc54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b704:	463a      	mov	r2, r7
 800b706:	f107 030c 	add.w	r3, r7, #12
 800b70a:	4611      	mov	r1, r2
 800b70c:	4618      	mov	r0, r3
 800b70e:	f000 fddf 	bl	800c2d0 <xTaskCheckForTimeOut>
 800b712:	4603      	mov	r3, r0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d132      	bne.n	800b77e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b718:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b71a:	f000 f929 	bl	800b970 <prvIsQueueEmpty>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b00      	cmp	r3, #0
 800b722:	d026      	beq.n	800b772 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d109      	bne.n	800b740 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b72c:	f001 fa62 	bl	800cbf4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b732:	689b      	ldr	r3, [r3, #8]
 800b734:	4618      	mov	r0, r3
 800b736:	f000 ff2d 	bl	800c594 <xTaskPriorityInherit>
 800b73a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b73c:	f001 fa8a 	bl	800cc54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b742:	3324      	adds	r3, #36	; 0x24
 800b744:	683a      	ldr	r2, [r7, #0]
 800b746:	4611      	mov	r1, r2
 800b748:	4618      	mov	r0, r3
 800b74a:	f000 fd25 	bl	800c198 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b74e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b750:	f000 f8bc 	bl	800b8cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b754:	f000 fb70 	bl	800be38 <xTaskResumeAll>
 800b758:	4603      	mov	r3, r0
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	f47f af68 	bne.w	800b630 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b760:	4b18      	ldr	r3, [pc, #96]	; (800b7c4 <xQueueSemaphoreTake+0x214>)
 800b762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b766:	601a      	str	r2, [r3, #0]
 800b768:	f3bf 8f4f 	dsb	sy
 800b76c:	f3bf 8f6f 	isb	sy
 800b770:	e75e      	b.n	800b630 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b772:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b774:	f000 f8aa 	bl	800b8cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b778:	f000 fb5e 	bl	800be38 <xTaskResumeAll>
 800b77c:	e758      	b.n	800b630 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b77e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b780:	f000 f8a4 	bl	800b8cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b784:	f000 fb58 	bl	800be38 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b788:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b78a:	f000 f8f1 	bl	800b970 <prvIsQueueEmpty>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	f43f af4d 	beq.w	800b630 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d00d      	beq.n	800b7b8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b79c:	f001 fa2a 	bl	800cbf4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b7a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b7a2:	f000 f811 	bl	800b7c8 <prvGetDisinheritPriorityAfterTimeout>
 800b7a6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7aa:	689b      	ldr	r3, [r3, #8]
 800b7ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f000 ffec 	bl	800c78c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b7b4:	f001 fa4e 	bl	800cc54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b7b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3738      	adds	r7, #56	; 0x38
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	e000ed04 	.word	0xe000ed04

0800b7c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b085      	sub	sp, #20
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d006      	beq.n	800b7e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f1c3 0307 	rsb	r3, r3, #7
 800b7e2:	60fb      	str	r3, [r7, #12]
 800b7e4:	e001      	b.n	800b7ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
	}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3714      	adds	r7, #20
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr

0800b7f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b086      	sub	sp, #24
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b804:	2300      	movs	r3, #0
 800b806:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b80c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b812:	2b00      	cmp	r3, #0
 800b814:	d10d      	bne.n	800b832 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d14d      	bne.n	800b8ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	689b      	ldr	r3, [r3, #8]
 800b822:	4618      	mov	r0, r3
 800b824:	f000 ff2c 	bl	800c680 <xTaskPriorityDisinherit>
 800b828:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2200      	movs	r2, #0
 800b82e:	609a      	str	r2, [r3, #8]
 800b830:	e043      	b.n	800b8ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d119      	bne.n	800b86c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	6858      	ldr	r0, [r3, #4]
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b840:	461a      	mov	r2, r3
 800b842:	68b9      	ldr	r1, [r7, #8]
 800b844:	f001 fd06 	bl	800d254 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	685a      	ldr	r2, [r3, #4]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b850:	441a      	add	r2, r3
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	685a      	ldr	r2, [r3, #4]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	689b      	ldr	r3, [r3, #8]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d32b      	bcc.n	800b8ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	605a      	str	r2, [r3, #4]
 800b86a:	e026      	b.n	800b8ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	68d8      	ldr	r0, [r3, #12]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b874:	461a      	mov	r2, r3
 800b876:	68b9      	ldr	r1, [r7, #8]
 800b878:	f001 fcec 	bl	800d254 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	68da      	ldr	r2, [r3, #12]
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b884:	425b      	negs	r3, r3
 800b886:	441a      	add	r2, r3
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	68da      	ldr	r2, [r3, #12]
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	429a      	cmp	r2, r3
 800b896:	d207      	bcs.n	800b8a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	689a      	ldr	r2, [r3, #8]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a0:	425b      	negs	r3, r3
 800b8a2:	441a      	add	r2, r3
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2b02      	cmp	r3, #2
 800b8ac:	d105      	bne.n	800b8ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d002      	beq.n	800b8ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	3b01      	subs	r3, #1
 800b8b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	1c5a      	adds	r2, r3, #1
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b8c2:	697b      	ldr	r3, [r7, #20]
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3718      	adds	r7, #24
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b8d4:	f001 f98e 	bl	800cbf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b8e0:	e011      	b.n	800b906 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d012      	beq.n	800b910 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	3324      	adds	r3, #36	; 0x24
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f000 fc76 	bl	800c1e0 <xTaskRemoveFromEventList>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d001      	beq.n	800b8fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b8fa:	f000 fd4b 	bl	800c394 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b8fe:	7bfb      	ldrb	r3, [r7, #15]
 800b900:	3b01      	subs	r3, #1
 800b902:	b2db      	uxtb	r3, r3
 800b904:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	dce9      	bgt.n	800b8e2 <prvUnlockQueue+0x16>
 800b90e:	e000      	b.n	800b912 <prvUnlockQueue+0x46>
					break;
 800b910:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	22ff      	movs	r2, #255	; 0xff
 800b916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b91a:	f001 f99b 	bl	800cc54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b91e:	f001 f969 	bl	800cbf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b928:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b92a:	e011      	b.n	800b950 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	691b      	ldr	r3, [r3, #16]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d012      	beq.n	800b95a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	3310      	adds	r3, #16
 800b938:	4618      	mov	r0, r3
 800b93a:	f000 fc51 	bl	800c1e0 <xTaskRemoveFromEventList>
 800b93e:	4603      	mov	r3, r0
 800b940:	2b00      	cmp	r3, #0
 800b942:	d001      	beq.n	800b948 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b944:	f000 fd26 	bl	800c394 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b948:	7bbb      	ldrb	r3, [r7, #14]
 800b94a:	3b01      	subs	r3, #1
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b950:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b954:	2b00      	cmp	r3, #0
 800b956:	dce9      	bgt.n	800b92c <prvUnlockQueue+0x60>
 800b958:	e000      	b.n	800b95c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b95a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	22ff      	movs	r2, #255	; 0xff
 800b960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b964:	f001 f976 	bl	800cc54 <vPortExitCritical>
}
 800b968:	bf00      	nop
 800b96a:	3710      	adds	r7, #16
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b978:	f001 f93c 	bl	800cbf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b980:	2b00      	cmp	r3, #0
 800b982:	d102      	bne.n	800b98a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b984:	2301      	movs	r3, #1
 800b986:	60fb      	str	r3, [r7, #12]
 800b988:	e001      	b.n	800b98e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b98a:	2300      	movs	r3, #0
 800b98c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b98e:	f001 f961 	bl	800cc54 <vPortExitCritical>

	return xReturn;
 800b992:	68fb      	ldr	r3, [r7, #12]
}
 800b994:	4618      	mov	r0, r3
 800b996:	3710      	adds	r7, #16
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b084      	sub	sp, #16
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b9a4:	f001 f926 	bl	800cbf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d102      	bne.n	800b9ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	60fb      	str	r3, [r7, #12]
 800b9b8:	e001      	b.n	800b9be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b9be:	f001 f949 	bl	800cc54 <vPortExitCritical>

	return xReturn;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3710      	adds	r7, #16
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b08e      	sub	sp, #56	; 0x38
 800b9d0:	af04      	add	r7, sp, #16
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	607a      	str	r2, [r7, #4]
 800b9d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b9da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d10a      	bne.n	800b9f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e4:	f383 8811 	msr	BASEPRI, r3
 800b9e8:	f3bf 8f6f 	isb	sy
 800b9ec:	f3bf 8f4f 	dsb	sy
 800b9f0:	623b      	str	r3, [r7, #32]
}
 800b9f2:	bf00      	nop
 800b9f4:	e7fe      	b.n	800b9f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10a      	bne.n	800ba12 <xTaskCreateStatic+0x46>
	__asm volatile
 800b9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba00:	f383 8811 	msr	BASEPRI, r3
 800ba04:	f3bf 8f6f 	isb	sy
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	61fb      	str	r3, [r7, #28]
}
 800ba0e:	bf00      	nop
 800ba10:	e7fe      	b.n	800ba10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ba12:	2354      	movs	r3, #84	; 0x54
 800ba14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	2b54      	cmp	r3, #84	; 0x54
 800ba1a:	d00a      	beq.n	800ba32 <xTaskCreateStatic+0x66>
	__asm volatile
 800ba1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba20:	f383 8811 	msr	BASEPRI, r3
 800ba24:	f3bf 8f6f 	isb	sy
 800ba28:	f3bf 8f4f 	dsb	sy
 800ba2c:	61bb      	str	r3, [r7, #24]
}
 800ba2e:	bf00      	nop
 800ba30:	e7fe      	b.n	800ba30 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ba32:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ba34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d01e      	beq.n	800ba78 <xTaskCreateStatic+0xac>
 800ba3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d01b      	beq.n	800ba78 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ba44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4c:	2202      	movs	r2, #2
 800ba4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ba52:	2300      	movs	r3, #0
 800ba54:	9303      	str	r3, [sp, #12]
 800ba56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba58:	9302      	str	r3, [sp, #8]
 800ba5a:	f107 0314 	add.w	r3, r7, #20
 800ba5e:	9301      	str	r3, [sp, #4]
 800ba60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba62:	9300      	str	r3, [sp, #0]
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	68b9      	ldr	r1, [r7, #8]
 800ba6a:	68f8      	ldr	r0, [r7, #12]
 800ba6c:	f000 f850 	bl	800bb10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba72:	f000 f8d5 	bl	800bc20 <prvAddNewTaskToReadyList>
 800ba76:	e001      	b.n	800ba7c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ba7c:	697b      	ldr	r3, [r7, #20]
	}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3728      	adds	r7, #40	; 0x28
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}

0800ba86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ba86:	b580      	push	{r7, lr}
 800ba88:	b08c      	sub	sp, #48	; 0x30
 800ba8a:	af04      	add	r7, sp, #16
 800ba8c:	60f8      	str	r0, [r7, #12]
 800ba8e:	60b9      	str	r1, [r7, #8]
 800ba90:	603b      	str	r3, [r7, #0]
 800ba92:	4613      	mov	r3, r2
 800ba94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ba96:	88fb      	ldrh	r3, [r7, #6]
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f001 f9cc 	bl	800ce38 <pvPortMalloc>
 800baa0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d00e      	beq.n	800bac6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800baa8:	2054      	movs	r0, #84	; 0x54
 800baaa:	f001 f9c5 	bl	800ce38 <pvPortMalloc>
 800baae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bab0:	69fb      	ldr	r3, [r7, #28]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d003      	beq.n	800babe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bab6:	69fb      	ldr	r3, [r7, #28]
 800bab8:	697a      	ldr	r2, [r7, #20]
 800baba:	631a      	str	r2, [r3, #48]	; 0x30
 800babc:	e005      	b.n	800baca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800babe:	6978      	ldr	r0, [r7, #20]
 800bac0:	f001 fa86 	bl	800cfd0 <vPortFree>
 800bac4:	e001      	b.n	800baca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bac6:	2300      	movs	r3, #0
 800bac8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800baca:	69fb      	ldr	r3, [r7, #28]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d017      	beq.n	800bb00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bad0:	69fb      	ldr	r3, [r7, #28]
 800bad2:	2200      	movs	r2, #0
 800bad4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bad8:	88fa      	ldrh	r2, [r7, #6]
 800bada:	2300      	movs	r3, #0
 800badc:	9303      	str	r3, [sp, #12]
 800bade:	69fb      	ldr	r3, [r7, #28]
 800bae0:	9302      	str	r3, [sp, #8]
 800bae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae4:	9301      	str	r3, [sp, #4]
 800bae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	68b9      	ldr	r1, [r7, #8]
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	f000 f80e 	bl	800bb10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800baf4:	69f8      	ldr	r0, [r7, #28]
 800baf6:	f000 f893 	bl	800bc20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bafa:	2301      	movs	r3, #1
 800bafc:	61bb      	str	r3, [r7, #24]
 800bafe:	e002      	b.n	800bb06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bb00:	f04f 33ff 	mov.w	r3, #4294967295
 800bb04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bb06:	69bb      	ldr	r3, [r7, #24]
	}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3720      	adds	r7, #32
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b088      	sub	sp, #32
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	607a      	str	r2, [r7, #4]
 800bb1c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb22:	6879      	ldr	r1, [r7, #4]
 800bb24:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800bb28:	440b      	add	r3, r1
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	4413      	add	r3, r2
 800bb2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	f023 0307 	bic.w	r3, r3, #7
 800bb36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bb38:	69bb      	ldr	r3, [r7, #24]
 800bb3a:	f003 0307 	and.w	r3, r3, #7
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d00a      	beq.n	800bb58 <prvInitialiseNewTask+0x48>
	__asm volatile
 800bb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb46:	f383 8811 	msr	BASEPRI, r3
 800bb4a:	f3bf 8f6f 	isb	sy
 800bb4e:	f3bf 8f4f 	dsb	sy
 800bb52:	617b      	str	r3, [r7, #20]
}
 800bb54:	bf00      	nop
 800bb56:	e7fe      	b.n	800bb56 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d01f      	beq.n	800bb9e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bb5e:	2300      	movs	r3, #0
 800bb60:	61fb      	str	r3, [r7, #28]
 800bb62:	e012      	b.n	800bb8a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bb64:	68ba      	ldr	r2, [r7, #8]
 800bb66:	69fb      	ldr	r3, [r7, #28]
 800bb68:	4413      	add	r3, r2
 800bb6a:	7819      	ldrb	r1, [r3, #0]
 800bb6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb6e:	69fb      	ldr	r3, [r7, #28]
 800bb70:	4413      	add	r3, r2
 800bb72:	3334      	adds	r3, #52	; 0x34
 800bb74:	460a      	mov	r2, r1
 800bb76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bb78:	68ba      	ldr	r2, [r7, #8]
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	4413      	add	r3, r2
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d006      	beq.n	800bb92 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	3301      	adds	r3, #1
 800bb88:	61fb      	str	r3, [r7, #28]
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	2b0f      	cmp	r3, #15
 800bb8e:	d9e9      	bls.n	800bb64 <prvInitialiseNewTask+0x54>
 800bb90:	e000      	b.n	800bb94 <prvInitialiseNewTask+0x84>
			{
				break;
 800bb92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb96:	2200      	movs	r2, #0
 800bb98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bb9c:	e003      	b.n	800bba6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba0:	2200      	movs	r2, #0
 800bba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba8:	2b06      	cmp	r3, #6
 800bbaa:	d901      	bls.n	800bbb0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bbac:	2306      	movs	r3, #6
 800bbae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbb4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800bbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc4:	3304      	adds	r3, #4
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7ff f94b 	bl	800ae62 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbce:	3318      	adds	r3, #24
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7ff f946 	bl	800ae62 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbde:	f1c3 0207 	rsb	r2, r3, #7
 800bbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbee:	2200      	movs	r2, #0
 800bbf0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bbfa:	683a      	ldr	r2, [r7, #0]
 800bbfc:	68f9      	ldr	r1, [r7, #12]
 800bbfe:	69b8      	ldr	r0, [r7, #24]
 800bc00:	f000 fecc 	bl	800c99c <pxPortInitialiseStack>
 800bc04:	4602      	mov	r2, r0
 800bc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d002      	beq.n	800bc16 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc16:	bf00      	nop
 800bc18:	3720      	adds	r7, #32
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
	...

0800bc20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bc28:	f000 ffe4 	bl	800cbf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bc2c:	4b2a      	ldr	r3, [pc, #168]	; (800bcd8 <prvAddNewTaskToReadyList+0xb8>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	3301      	adds	r3, #1
 800bc32:	4a29      	ldr	r2, [pc, #164]	; (800bcd8 <prvAddNewTaskToReadyList+0xb8>)
 800bc34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bc36:	4b29      	ldr	r3, [pc, #164]	; (800bcdc <prvAddNewTaskToReadyList+0xbc>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d109      	bne.n	800bc52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bc3e:	4a27      	ldr	r2, [pc, #156]	; (800bcdc <prvAddNewTaskToReadyList+0xbc>)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bc44:	4b24      	ldr	r3, [pc, #144]	; (800bcd8 <prvAddNewTaskToReadyList+0xb8>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2b01      	cmp	r3, #1
 800bc4a:	d110      	bne.n	800bc6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bc4c:	f000 fbc6 	bl	800c3dc <prvInitialiseTaskLists>
 800bc50:	e00d      	b.n	800bc6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bc52:	4b23      	ldr	r3, [pc, #140]	; (800bce0 <prvAddNewTaskToReadyList+0xc0>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d109      	bne.n	800bc6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bc5a:	4b20      	ldr	r3, [pc, #128]	; (800bcdc <prvAddNewTaskToReadyList+0xbc>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d802      	bhi.n	800bc6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bc68:	4a1c      	ldr	r2, [pc, #112]	; (800bcdc <prvAddNewTaskToReadyList+0xbc>)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bc6e:	4b1d      	ldr	r3, [pc, #116]	; (800bce4 <prvAddNewTaskToReadyList+0xc4>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	3301      	adds	r3, #1
 800bc74:	4a1b      	ldr	r2, [pc, #108]	; (800bce4 <prvAddNewTaskToReadyList+0xc4>)
 800bc76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	409a      	lsls	r2, r3
 800bc80:	4b19      	ldr	r3, [pc, #100]	; (800bce8 <prvAddNewTaskToReadyList+0xc8>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4313      	orrs	r3, r2
 800bc86:	4a18      	ldr	r2, [pc, #96]	; (800bce8 <prvAddNewTaskToReadyList+0xc8>)
 800bc88:	6013      	str	r3, [r2, #0]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc8e:	4613      	mov	r3, r2
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	4413      	add	r3, r2
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	4a15      	ldr	r2, [pc, #84]	; (800bcec <prvAddNewTaskToReadyList+0xcc>)
 800bc98:	441a      	add	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	3304      	adds	r3, #4
 800bc9e:	4619      	mov	r1, r3
 800bca0:	4610      	mov	r0, r2
 800bca2:	f7ff f8eb 	bl	800ae7c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bca6:	f000 ffd5 	bl	800cc54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bcaa:	4b0d      	ldr	r3, [pc, #52]	; (800bce0 <prvAddNewTaskToReadyList+0xc0>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d00e      	beq.n	800bcd0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bcb2:	4b0a      	ldr	r3, [pc, #40]	; (800bcdc <prvAddNewTaskToReadyList+0xbc>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d207      	bcs.n	800bcd0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bcc0:	4b0b      	ldr	r3, [pc, #44]	; (800bcf0 <prvAddNewTaskToReadyList+0xd0>)
 800bcc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcc6:	601a      	str	r2, [r3, #0]
 800bcc8:	f3bf 8f4f 	dsb	sy
 800bccc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bcd0:	bf00      	nop
 800bcd2:	3708      	adds	r7, #8
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	20000394 	.word	0x20000394
 800bcdc:	20000294 	.word	0x20000294
 800bce0:	200003a0 	.word	0x200003a0
 800bce4:	200003b0 	.word	0x200003b0
 800bce8:	2000039c 	.word	0x2000039c
 800bcec:	20000298 	.word	0x20000298
 800bcf0:	e000ed04 	.word	0xe000ed04

0800bcf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d017      	beq.n	800bd36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bd06:	4b13      	ldr	r3, [pc, #76]	; (800bd54 <vTaskDelay+0x60>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d00a      	beq.n	800bd24 <vTaskDelay+0x30>
	__asm volatile
 800bd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd12:	f383 8811 	msr	BASEPRI, r3
 800bd16:	f3bf 8f6f 	isb	sy
 800bd1a:	f3bf 8f4f 	dsb	sy
 800bd1e:	60bb      	str	r3, [r7, #8]
}
 800bd20:	bf00      	nop
 800bd22:	e7fe      	b.n	800bd22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bd24:	f000 f87a 	bl	800be1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bd28:	2100      	movs	r1, #0
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 fdd0 	bl	800c8d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bd30:	f000 f882 	bl	800be38 <xTaskResumeAll>
 800bd34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d107      	bne.n	800bd4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bd3c:	4b06      	ldr	r3, [pc, #24]	; (800bd58 <vTaskDelay+0x64>)
 800bd3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd42:	601a      	str	r2, [r3, #0]
 800bd44:	f3bf 8f4f 	dsb	sy
 800bd48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bd4c:	bf00      	nop
 800bd4e:	3710      	adds	r7, #16
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}
 800bd54:	200003bc 	.word	0x200003bc
 800bd58:	e000ed04 	.word	0xe000ed04

0800bd5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b08a      	sub	sp, #40	; 0x28
 800bd60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bd62:	2300      	movs	r3, #0
 800bd64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bd66:	2300      	movs	r3, #0
 800bd68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bd6a:	463a      	mov	r2, r7
 800bd6c:	1d39      	adds	r1, r7, #4
 800bd6e:	f107 0308 	add.w	r3, r7, #8
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7f5 fa3c 	bl	80011f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bd78:	6839      	ldr	r1, [r7, #0]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	68ba      	ldr	r2, [r7, #8]
 800bd7e:	9202      	str	r2, [sp, #8]
 800bd80:	9301      	str	r3, [sp, #4]
 800bd82:	2300      	movs	r3, #0
 800bd84:	9300      	str	r3, [sp, #0]
 800bd86:	2300      	movs	r3, #0
 800bd88:	460a      	mov	r2, r1
 800bd8a:	491e      	ldr	r1, [pc, #120]	; (800be04 <vTaskStartScheduler+0xa8>)
 800bd8c:	481e      	ldr	r0, [pc, #120]	; (800be08 <vTaskStartScheduler+0xac>)
 800bd8e:	f7ff fe1d 	bl	800b9cc <xTaskCreateStatic>
 800bd92:	4603      	mov	r3, r0
 800bd94:	4a1d      	ldr	r2, [pc, #116]	; (800be0c <vTaskStartScheduler+0xb0>)
 800bd96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bd98:	4b1c      	ldr	r3, [pc, #112]	; (800be0c <vTaskStartScheduler+0xb0>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d002      	beq.n	800bda6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bda0:	2301      	movs	r3, #1
 800bda2:	617b      	str	r3, [r7, #20]
 800bda4:	e001      	b.n	800bdaa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bda6:	2300      	movs	r3, #0
 800bda8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d116      	bne.n	800bdde <vTaskStartScheduler+0x82>
	__asm volatile
 800bdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb4:	f383 8811 	msr	BASEPRI, r3
 800bdb8:	f3bf 8f6f 	isb	sy
 800bdbc:	f3bf 8f4f 	dsb	sy
 800bdc0:	613b      	str	r3, [r7, #16]
}
 800bdc2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bdc4:	4b12      	ldr	r3, [pc, #72]	; (800be10 <vTaskStartScheduler+0xb4>)
 800bdc6:	f04f 32ff 	mov.w	r2, #4294967295
 800bdca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bdcc:	4b11      	ldr	r3, [pc, #68]	; (800be14 <vTaskStartScheduler+0xb8>)
 800bdce:	2201      	movs	r2, #1
 800bdd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bdd2:	4b11      	ldr	r3, [pc, #68]	; (800be18 <vTaskStartScheduler+0xbc>)
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bdd8:	f000 fe6a 	bl	800cab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bddc:	e00e      	b.n	800bdfc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde4:	d10a      	bne.n	800bdfc <vTaskStartScheduler+0xa0>
	__asm volatile
 800bde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdea:	f383 8811 	msr	BASEPRI, r3
 800bdee:	f3bf 8f6f 	isb	sy
 800bdf2:	f3bf 8f4f 	dsb	sy
 800bdf6:	60fb      	str	r3, [r7, #12]
}
 800bdf8:	bf00      	nop
 800bdfa:	e7fe      	b.n	800bdfa <vTaskStartScheduler+0x9e>
}
 800bdfc:	bf00      	nop
 800bdfe:	3718      	adds	r7, #24
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}
 800be04:	0800d340 	.word	0x0800d340
 800be08:	0800c3ad 	.word	0x0800c3ad
 800be0c:	200003b8 	.word	0x200003b8
 800be10:	200003b4 	.word	0x200003b4
 800be14:	200003a0 	.word	0x200003a0
 800be18:	20000398 	.word	0x20000398

0800be1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800be1c:	b480      	push	{r7}
 800be1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800be20:	4b04      	ldr	r3, [pc, #16]	; (800be34 <vTaskSuspendAll+0x18>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	3301      	adds	r3, #1
 800be26:	4a03      	ldr	r2, [pc, #12]	; (800be34 <vTaskSuspendAll+0x18>)
 800be28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800be2a:	bf00      	nop
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr
 800be34:	200003bc 	.word	0x200003bc

0800be38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800be3e:	2300      	movs	r3, #0
 800be40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800be42:	2300      	movs	r3, #0
 800be44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800be46:	4b41      	ldr	r3, [pc, #260]	; (800bf4c <xTaskResumeAll+0x114>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d10a      	bne.n	800be64 <xTaskResumeAll+0x2c>
	__asm volatile
 800be4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be52:	f383 8811 	msr	BASEPRI, r3
 800be56:	f3bf 8f6f 	isb	sy
 800be5a:	f3bf 8f4f 	dsb	sy
 800be5e:	603b      	str	r3, [r7, #0]
}
 800be60:	bf00      	nop
 800be62:	e7fe      	b.n	800be62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800be64:	f000 fec6 	bl	800cbf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800be68:	4b38      	ldr	r3, [pc, #224]	; (800bf4c <xTaskResumeAll+0x114>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	3b01      	subs	r3, #1
 800be6e:	4a37      	ldr	r2, [pc, #220]	; (800bf4c <xTaskResumeAll+0x114>)
 800be70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be72:	4b36      	ldr	r3, [pc, #216]	; (800bf4c <xTaskResumeAll+0x114>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d161      	bne.n	800bf3e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800be7a:	4b35      	ldr	r3, [pc, #212]	; (800bf50 <xTaskResumeAll+0x118>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d05d      	beq.n	800bf3e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be82:	e02e      	b.n	800bee2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be84:	4b33      	ldr	r3, [pc, #204]	; (800bf54 <xTaskResumeAll+0x11c>)
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	68db      	ldr	r3, [r3, #12]
 800be8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	3318      	adds	r3, #24
 800be90:	4618      	mov	r0, r3
 800be92:	f7ff f850 	bl	800af36 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	3304      	adds	r3, #4
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7ff f84b 	bl	800af36 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea4:	2201      	movs	r2, #1
 800bea6:	409a      	lsls	r2, r3
 800bea8:	4b2b      	ldr	r3, [pc, #172]	; (800bf58 <xTaskResumeAll+0x120>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	4313      	orrs	r3, r2
 800beae:	4a2a      	ldr	r2, [pc, #168]	; (800bf58 <xTaskResumeAll+0x120>)
 800beb0:	6013      	str	r3, [r2, #0]
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beb6:	4613      	mov	r3, r2
 800beb8:	009b      	lsls	r3, r3, #2
 800beba:	4413      	add	r3, r2
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	4a27      	ldr	r2, [pc, #156]	; (800bf5c <xTaskResumeAll+0x124>)
 800bec0:	441a      	add	r2, r3
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	3304      	adds	r3, #4
 800bec6:	4619      	mov	r1, r3
 800bec8:	4610      	mov	r0, r2
 800beca:	f7fe ffd7 	bl	800ae7c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bed2:	4b23      	ldr	r3, [pc, #140]	; (800bf60 <xTaskResumeAll+0x128>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed8:	429a      	cmp	r2, r3
 800beda:	d302      	bcc.n	800bee2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bedc:	4b21      	ldr	r3, [pc, #132]	; (800bf64 <xTaskResumeAll+0x12c>)
 800bede:	2201      	movs	r2, #1
 800bee0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bee2:	4b1c      	ldr	r3, [pc, #112]	; (800bf54 <xTaskResumeAll+0x11c>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d1cc      	bne.n	800be84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d001      	beq.n	800bef4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bef0:	f000 fb12 	bl	800c518 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bef4:	4b1c      	ldr	r3, [pc, #112]	; (800bf68 <xTaskResumeAll+0x130>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d010      	beq.n	800bf22 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bf00:	f000 f836 	bl	800bf70 <xTaskIncrementTick>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d002      	beq.n	800bf10 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bf0a:	4b16      	ldr	r3, [pc, #88]	; (800bf64 <xTaskResumeAll+0x12c>)
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	3b01      	subs	r3, #1
 800bf14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d1f1      	bne.n	800bf00 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800bf1c:	4b12      	ldr	r3, [pc, #72]	; (800bf68 <xTaskResumeAll+0x130>)
 800bf1e:	2200      	movs	r2, #0
 800bf20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bf22:	4b10      	ldr	r3, [pc, #64]	; (800bf64 <xTaskResumeAll+0x12c>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d009      	beq.n	800bf3e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bf2e:	4b0f      	ldr	r3, [pc, #60]	; (800bf6c <xTaskResumeAll+0x134>)
 800bf30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf34:	601a      	str	r2, [r3, #0]
 800bf36:	f3bf 8f4f 	dsb	sy
 800bf3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf3e:	f000 fe89 	bl	800cc54 <vPortExitCritical>

	return xAlreadyYielded;
 800bf42:	68bb      	ldr	r3, [r7, #8]
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3710      	adds	r7, #16
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	200003bc 	.word	0x200003bc
 800bf50:	20000394 	.word	0x20000394
 800bf54:	20000354 	.word	0x20000354
 800bf58:	2000039c 	.word	0x2000039c
 800bf5c:	20000298 	.word	0x20000298
 800bf60:	20000294 	.word	0x20000294
 800bf64:	200003a8 	.word	0x200003a8
 800bf68:	200003a4 	.word	0x200003a4
 800bf6c:	e000ed04 	.word	0xe000ed04

0800bf70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b086      	sub	sp, #24
 800bf74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bf76:	2300      	movs	r3, #0
 800bf78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf7a:	4b4e      	ldr	r3, [pc, #312]	; (800c0b4 <xTaskIncrementTick+0x144>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	f040 808e 	bne.w	800c0a0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bf84:	4b4c      	ldr	r3, [pc, #304]	; (800c0b8 <xTaskIncrementTick+0x148>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	3301      	adds	r3, #1
 800bf8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bf8c:	4a4a      	ldr	r2, [pc, #296]	; (800c0b8 <xTaskIncrementTick+0x148>)
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d120      	bne.n	800bfda <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bf98:	4b48      	ldr	r3, [pc, #288]	; (800c0bc <xTaskIncrementTick+0x14c>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d00a      	beq.n	800bfb8 <xTaskIncrementTick+0x48>
	__asm volatile
 800bfa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa6:	f383 8811 	msr	BASEPRI, r3
 800bfaa:	f3bf 8f6f 	isb	sy
 800bfae:	f3bf 8f4f 	dsb	sy
 800bfb2:	603b      	str	r3, [r7, #0]
}
 800bfb4:	bf00      	nop
 800bfb6:	e7fe      	b.n	800bfb6 <xTaskIncrementTick+0x46>
 800bfb8:	4b40      	ldr	r3, [pc, #256]	; (800c0bc <xTaskIncrementTick+0x14c>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	60fb      	str	r3, [r7, #12]
 800bfbe:	4b40      	ldr	r3, [pc, #256]	; (800c0c0 <xTaskIncrementTick+0x150>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4a3e      	ldr	r2, [pc, #248]	; (800c0bc <xTaskIncrementTick+0x14c>)
 800bfc4:	6013      	str	r3, [r2, #0]
 800bfc6:	4a3e      	ldr	r2, [pc, #248]	; (800c0c0 <xTaskIncrementTick+0x150>)
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6013      	str	r3, [r2, #0]
 800bfcc:	4b3d      	ldr	r3, [pc, #244]	; (800c0c4 <xTaskIncrementTick+0x154>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	4a3c      	ldr	r2, [pc, #240]	; (800c0c4 <xTaskIncrementTick+0x154>)
 800bfd4:	6013      	str	r3, [r2, #0]
 800bfd6:	f000 fa9f 	bl	800c518 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bfda:	4b3b      	ldr	r3, [pc, #236]	; (800c0c8 <xTaskIncrementTick+0x158>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	693a      	ldr	r2, [r7, #16]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d348      	bcc.n	800c076 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfe4:	4b35      	ldr	r3, [pc, #212]	; (800c0bc <xTaskIncrementTick+0x14c>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d104      	bne.n	800bff8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfee:	4b36      	ldr	r3, [pc, #216]	; (800c0c8 <xTaskIncrementTick+0x158>)
 800bff0:	f04f 32ff 	mov.w	r2, #4294967295
 800bff4:	601a      	str	r2, [r3, #0]
					break;
 800bff6:	e03e      	b.n	800c076 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bff8:	4b30      	ldr	r3, [pc, #192]	; (800c0bc <xTaskIncrementTick+0x14c>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	68db      	ldr	r3, [r3, #12]
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c008:	693a      	ldr	r2, [r7, #16]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d203      	bcs.n	800c018 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c010:	4a2d      	ldr	r2, [pc, #180]	; (800c0c8 <xTaskIncrementTick+0x158>)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c016:	e02e      	b.n	800c076 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	3304      	adds	r3, #4
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7fe ff8a 	bl	800af36 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c026:	2b00      	cmp	r3, #0
 800c028:	d004      	beq.n	800c034 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	3318      	adds	r3, #24
 800c02e:	4618      	mov	r0, r3
 800c030:	f7fe ff81 	bl	800af36 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c038:	2201      	movs	r2, #1
 800c03a:	409a      	lsls	r2, r3
 800c03c:	4b23      	ldr	r3, [pc, #140]	; (800c0cc <xTaskIncrementTick+0x15c>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4313      	orrs	r3, r2
 800c042:	4a22      	ldr	r2, [pc, #136]	; (800c0cc <xTaskIncrementTick+0x15c>)
 800c044:	6013      	str	r3, [r2, #0]
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c04a:	4613      	mov	r3, r2
 800c04c:	009b      	lsls	r3, r3, #2
 800c04e:	4413      	add	r3, r2
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	4a1f      	ldr	r2, [pc, #124]	; (800c0d0 <xTaskIncrementTick+0x160>)
 800c054:	441a      	add	r2, r3
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	3304      	adds	r3, #4
 800c05a:	4619      	mov	r1, r3
 800c05c:	4610      	mov	r0, r2
 800c05e:	f7fe ff0d 	bl	800ae7c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c066:	4b1b      	ldr	r3, [pc, #108]	; (800c0d4 <xTaskIncrementTick+0x164>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d3b9      	bcc.n	800bfe4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c070:	2301      	movs	r3, #1
 800c072:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c074:	e7b6      	b.n	800bfe4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c076:	4b17      	ldr	r3, [pc, #92]	; (800c0d4 <xTaskIncrementTick+0x164>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c07c:	4914      	ldr	r1, [pc, #80]	; (800c0d0 <xTaskIncrementTick+0x160>)
 800c07e:	4613      	mov	r3, r2
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	4413      	add	r3, r2
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	440b      	add	r3, r1
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	d901      	bls.n	800c092 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c08e:	2301      	movs	r3, #1
 800c090:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c092:	4b11      	ldr	r3, [pc, #68]	; (800c0d8 <xTaskIncrementTick+0x168>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d007      	beq.n	800c0aa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c09a:	2301      	movs	r3, #1
 800c09c:	617b      	str	r3, [r7, #20]
 800c09e:	e004      	b.n	800c0aa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c0a0:	4b0e      	ldr	r3, [pc, #56]	; (800c0dc <xTaskIncrementTick+0x16c>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	4a0d      	ldr	r2, [pc, #52]	; (800c0dc <xTaskIncrementTick+0x16c>)
 800c0a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c0aa:	697b      	ldr	r3, [r7, #20]
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3718      	adds	r7, #24
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	200003bc 	.word	0x200003bc
 800c0b8:	20000398 	.word	0x20000398
 800c0bc:	2000034c 	.word	0x2000034c
 800c0c0:	20000350 	.word	0x20000350
 800c0c4:	200003ac 	.word	0x200003ac
 800c0c8:	200003b4 	.word	0x200003b4
 800c0cc:	2000039c 	.word	0x2000039c
 800c0d0:	20000298 	.word	0x20000298
 800c0d4:	20000294 	.word	0x20000294
 800c0d8:	200003a8 	.word	0x200003a8
 800c0dc:	200003a4 	.word	0x200003a4

0800c0e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b087      	sub	sp, #28
 800c0e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c0e6:	4b27      	ldr	r3, [pc, #156]	; (800c184 <vTaskSwitchContext+0xa4>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d003      	beq.n	800c0f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c0ee:	4b26      	ldr	r3, [pc, #152]	; (800c188 <vTaskSwitchContext+0xa8>)
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c0f4:	e03f      	b.n	800c176 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800c0f6:	4b24      	ldr	r3, [pc, #144]	; (800c188 <vTaskSwitchContext+0xa8>)
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0fc:	4b23      	ldr	r3, [pc, #140]	; (800c18c <vTaskSwitchContext+0xac>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	fab3 f383 	clz	r3, r3
 800c108:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c10a:	7afb      	ldrb	r3, [r7, #11]
 800c10c:	f1c3 031f 	rsb	r3, r3, #31
 800c110:	617b      	str	r3, [r7, #20]
 800c112:	491f      	ldr	r1, [pc, #124]	; (800c190 <vTaskSwitchContext+0xb0>)
 800c114:	697a      	ldr	r2, [r7, #20]
 800c116:	4613      	mov	r3, r2
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	4413      	add	r3, r2
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	440b      	add	r3, r1
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d10a      	bne.n	800c13c <vTaskSwitchContext+0x5c>
	__asm volatile
 800c126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12a:	f383 8811 	msr	BASEPRI, r3
 800c12e:	f3bf 8f6f 	isb	sy
 800c132:	f3bf 8f4f 	dsb	sy
 800c136:	607b      	str	r3, [r7, #4]
}
 800c138:	bf00      	nop
 800c13a:	e7fe      	b.n	800c13a <vTaskSwitchContext+0x5a>
 800c13c:	697a      	ldr	r2, [r7, #20]
 800c13e:	4613      	mov	r3, r2
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	4413      	add	r3, r2
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	4a12      	ldr	r2, [pc, #72]	; (800c190 <vTaskSwitchContext+0xb0>)
 800c148:	4413      	add	r3, r2
 800c14a:	613b      	str	r3, [r7, #16]
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	685a      	ldr	r2, [r3, #4]
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	605a      	str	r2, [r3, #4]
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	685a      	ldr	r2, [r3, #4]
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	3308      	adds	r3, #8
 800c15e:	429a      	cmp	r2, r3
 800c160:	d104      	bne.n	800c16c <vTaskSwitchContext+0x8c>
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	685b      	ldr	r3, [r3, #4]
 800c166:	685a      	ldr	r2, [r3, #4]
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	605a      	str	r2, [r3, #4]
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	4a08      	ldr	r2, [pc, #32]	; (800c194 <vTaskSwitchContext+0xb4>)
 800c174:	6013      	str	r3, [r2, #0]
}
 800c176:	bf00      	nop
 800c178:	371c      	adds	r7, #28
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	200003bc 	.word	0x200003bc
 800c188:	200003a8 	.word	0x200003a8
 800c18c:	2000039c 	.word	0x2000039c
 800c190:	20000298 	.word	0x20000298
 800c194:	20000294 	.word	0x20000294

0800c198 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d10a      	bne.n	800c1be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ac:	f383 8811 	msr	BASEPRI, r3
 800c1b0:	f3bf 8f6f 	isb	sy
 800c1b4:	f3bf 8f4f 	dsb	sy
 800c1b8:	60fb      	str	r3, [r7, #12]
}
 800c1ba:	bf00      	nop
 800c1bc:	e7fe      	b.n	800c1bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c1be:	4b07      	ldr	r3, [pc, #28]	; (800c1dc <vTaskPlaceOnEventList+0x44>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	3318      	adds	r3, #24
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f7fe fe7c 	bl	800aec4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c1cc:	2101      	movs	r1, #1
 800c1ce:	6838      	ldr	r0, [r7, #0]
 800c1d0:	f000 fb7e 	bl	800c8d0 <prvAddCurrentTaskToDelayedList>
}
 800c1d4:	bf00      	nop
 800c1d6:	3710      	adds	r7, #16
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}
 800c1dc:	20000294 	.word	0x20000294

0800c1e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b086      	sub	sp, #24
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d10a      	bne.n	800c20c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fa:	f383 8811 	msr	BASEPRI, r3
 800c1fe:	f3bf 8f6f 	isb	sy
 800c202:	f3bf 8f4f 	dsb	sy
 800c206:	60fb      	str	r3, [r7, #12]
}
 800c208:	bf00      	nop
 800c20a:	e7fe      	b.n	800c20a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	3318      	adds	r3, #24
 800c210:	4618      	mov	r0, r3
 800c212:	f7fe fe90 	bl	800af36 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c216:	4b1d      	ldr	r3, [pc, #116]	; (800c28c <xTaskRemoveFromEventList+0xac>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d11c      	bne.n	800c258 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	3304      	adds	r3, #4
 800c222:	4618      	mov	r0, r3
 800c224:	f7fe fe87 	bl	800af36 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c22c:	2201      	movs	r2, #1
 800c22e:	409a      	lsls	r2, r3
 800c230:	4b17      	ldr	r3, [pc, #92]	; (800c290 <xTaskRemoveFromEventList+0xb0>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4313      	orrs	r3, r2
 800c236:	4a16      	ldr	r2, [pc, #88]	; (800c290 <xTaskRemoveFromEventList+0xb0>)
 800c238:	6013      	str	r3, [r2, #0]
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c23e:	4613      	mov	r3, r2
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	4413      	add	r3, r2
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	4a13      	ldr	r2, [pc, #76]	; (800c294 <xTaskRemoveFromEventList+0xb4>)
 800c248:	441a      	add	r2, r3
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	3304      	adds	r3, #4
 800c24e:	4619      	mov	r1, r3
 800c250:	4610      	mov	r0, r2
 800c252:	f7fe fe13 	bl	800ae7c <vListInsertEnd>
 800c256:	e005      	b.n	800c264 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	3318      	adds	r3, #24
 800c25c:	4619      	mov	r1, r3
 800c25e:	480e      	ldr	r0, [pc, #56]	; (800c298 <xTaskRemoveFromEventList+0xb8>)
 800c260:	f7fe fe0c 	bl	800ae7c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c268:	4b0c      	ldr	r3, [pc, #48]	; (800c29c <xTaskRemoveFromEventList+0xbc>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c26e:	429a      	cmp	r2, r3
 800c270:	d905      	bls.n	800c27e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c272:	2301      	movs	r3, #1
 800c274:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c276:	4b0a      	ldr	r3, [pc, #40]	; (800c2a0 <xTaskRemoveFromEventList+0xc0>)
 800c278:	2201      	movs	r2, #1
 800c27a:	601a      	str	r2, [r3, #0]
 800c27c:	e001      	b.n	800c282 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c27e:	2300      	movs	r3, #0
 800c280:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c282:	697b      	ldr	r3, [r7, #20]
}
 800c284:	4618      	mov	r0, r3
 800c286:	3718      	adds	r7, #24
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	200003bc 	.word	0x200003bc
 800c290:	2000039c 	.word	0x2000039c
 800c294:	20000298 	.word	0x20000298
 800c298:	20000354 	.word	0x20000354
 800c29c:	20000294 	.word	0x20000294
 800c2a0:	200003a8 	.word	0x200003a8

0800c2a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c2ac:	4b06      	ldr	r3, [pc, #24]	; (800c2c8 <vTaskInternalSetTimeOutState+0x24>)
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c2b4:	4b05      	ldr	r3, [pc, #20]	; (800c2cc <vTaskInternalSetTimeOutState+0x28>)
 800c2b6:	681a      	ldr	r2, [r3, #0]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	605a      	str	r2, [r3, #4]
}
 800c2bc:	bf00      	nop
 800c2be:	370c      	adds	r7, #12
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr
 800c2c8:	200003ac 	.word	0x200003ac
 800c2cc:	20000398 	.word	0x20000398

0800c2d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b088      	sub	sp, #32
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d10a      	bne.n	800c2f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e4:	f383 8811 	msr	BASEPRI, r3
 800c2e8:	f3bf 8f6f 	isb	sy
 800c2ec:	f3bf 8f4f 	dsb	sy
 800c2f0:	613b      	str	r3, [r7, #16]
}
 800c2f2:	bf00      	nop
 800c2f4:	e7fe      	b.n	800c2f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d10a      	bne.n	800c312 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c300:	f383 8811 	msr	BASEPRI, r3
 800c304:	f3bf 8f6f 	isb	sy
 800c308:	f3bf 8f4f 	dsb	sy
 800c30c:	60fb      	str	r3, [r7, #12]
}
 800c30e:	bf00      	nop
 800c310:	e7fe      	b.n	800c310 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c312:	f000 fc6f 	bl	800cbf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c316:	4b1d      	ldr	r3, [pc, #116]	; (800c38c <xTaskCheckForTimeOut+0xbc>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	69ba      	ldr	r2, [r7, #24]
 800c322:	1ad3      	subs	r3, r2, r3
 800c324:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c32e:	d102      	bne.n	800c336 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c330:	2300      	movs	r3, #0
 800c332:	61fb      	str	r3, [r7, #28]
 800c334:	e023      	b.n	800c37e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681a      	ldr	r2, [r3, #0]
 800c33a:	4b15      	ldr	r3, [pc, #84]	; (800c390 <xTaskCheckForTimeOut+0xc0>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d007      	beq.n	800c352 <xTaskCheckForTimeOut+0x82>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	69ba      	ldr	r2, [r7, #24]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d302      	bcc.n	800c352 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c34c:	2301      	movs	r3, #1
 800c34e:	61fb      	str	r3, [r7, #28]
 800c350:	e015      	b.n	800c37e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	697a      	ldr	r2, [r7, #20]
 800c358:	429a      	cmp	r2, r3
 800c35a:	d20b      	bcs.n	800c374 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	1ad2      	subs	r2, r2, r3
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f7ff ff9b 	bl	800c2a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c36e:	2300      	movs	r3, #0
 800c370:	61fb      	str	r3, [r7, #28]
 800c372:	e004      	b.n	800c37e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	2200      	movs	r2, #0
 800c378:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c37a:	2301      	movs	r3, #1
 800c37c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c37e:	f000 fc69 	bl	800cc54 <vPortExitCritical>

	return xReturn;
 800c382:	69fb      	ldr	r3, [r7, #28]
}
 800c384:	4618      	mov	r0, r3
 800c386:	3720      	adds	r7, #32
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}
 800c38c:	20000398 	.word	0x20000398
 800c390:	200003ac 	.word	0x200003ac

0800c394 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c394:	b480      	push	{r7}
 800c396:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c398:	4b03      	ldr	r3, [pc, #12]	; (800c3a8 <vTaskMissedYield+0x14>)
 800c39a:	2201      	movs	r2, #1
 800c39c:	601a      	str	r2, [r3, #0]
}
 800c39e:	bf00      	nop
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr
 800c3a8:	200003a8 	.word	0x200003a8

0800c3ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b082      	sub	sp, #8
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c3b4:	f000 f852 	bl	800c45c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c3b8:	4b06      	ldr	r3, [pc, #24]	; (800c3d4 <prvIdleTask+0x28>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d9f9      	bls.n	800c3b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c3c0:	4b05      	ldr	r3, [pc, #20]	; (800c3d8 <prvIdleTask+0x2c>)
 800c3c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3c6:	601a      	str	r2, [r3, #0]
 800c3c8:	f3bf 8f4f 	dsb	sy
 800c3cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c3d0:	e7f0      	b.n	800c3b4 <prvIdleTask+0x8>
 800c3d2:	bf00      	nop
 800c3d4:	20000298 	.word	0x20000298
 800c3d8:	e000ed04 	.word	0xe000ed04

0800c3dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	607b      	str	r3, [r7, #4]
 800c3e6:	e00c      	b.n	800c402 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	4613      	mov	r3, r2
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	4413      	add	r3, r2
 800c3f0:	009b      	lsls	r3, r3, #2
 800c3f2:	4a12      	ldr	r2, [pc, #72]	; (800c43c <prvInitialiseTaskLists+0x60>)
 800c3f4:	4413      	add	r3, r2
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7fe fd13 	bl	800ae22 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	3301      	adds	r3, #1
 800c400:	607b      	str	r3, [r7, #4]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2b06      	cmp	r3, #6
 800c406:	d9ef      	bls.n	800c3e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c408:	480d      	ldr	r0, [pc, #52]	; (800c440 <prvInitialiseTaskLists+0x64>)
 800c40a:	f7fe fd0a 	bl	800ae22 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c40e:	480d      	ldr	r0, [pc, #52]	; (800c444 <prvInitialiseTaskLists+0x68>)
 800c410:	f7fe fd07 	bl	800ae22 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c414:	480c      	ldr	r0, [pc, #48]	; (800c448 <prvInitialiseTaskLists+0x6c>)
 800c416:	f7fe fd04 	bl	800ae22 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c41a:	480c      	ldr	r0, [pc, #48]	; (800c44c <prvInitialiseTaskLists+0x70>)
 800c41c:	f7fe fd01 	bl	800ae22 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c420:	480b      	ldr	r0, [pc, #44]	; (800c450 <prvInitialiseTaskLists+0x74>)
 800c422:	f7fe fcfe 	bl	800ae22 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c426:	4b0b      	ldr	r3, [pc, #44]	; (800c454 <prvInitialiseTaskLists+0x78>)
 800c428:	4a05      	ldr	r2, [pc, #20]	; (800c440 <prvInitialiseTaskLists+0x64>)
 800c42a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c42c:	4b0a      	ldr	r3, [pc, #40]	; (800c458 <prvInitialiseTaskLists+0x7c>)
 800c42e:	4a05      	ldr	r2, [pc, #20]	; (800c444 <prvInitialiseTaskLists+0x68>)
 800c430:	601a      	str	r2, [r3, #0]
}
 800c432:	bf00      	nop
 800c434:	3708      	adds	r7, #8
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
 800c43a:	bf00      	nop
 800c43c:	20000298 	.word	0x20000298
 800c440:	20000324 	.word	0x20000324
 800c444:	20000338 	.word	0x20000338
 800c448:	20000354 	.word	0x20000354
 800c44c:	20000368 	.word	0x20000368
 800c450:	20000380 	.word	0x20000380
 800c454:	2000034c 	.word	0x2000034c
 800c458:	20000350 	.word	0x20000350

0800c45c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c462:	e019      	b.n	800c498 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c464:	f000 fbc6 	bl	800cbf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c468:	4b10      	ldr	r3, [pc, #64]	; (800c4ac <prvCheckTasksWaitingTermination+0x50>)
 800c46a:	68db      	ldr	r3, [r3, #12]
 800c46c:	68db      	ldr	r3, [r3, #12]
 800c46e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	3304      	adds	r3, #4
 800c474:	4618      	mov	r0, r3
 800c476:	f7fe fd5e 	bl	800af36 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c47a:	4b0d      	ldr	r3, [pc, #52]	; (800c4b0 <prvCheckTasksWaitingTermination+0x54>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	3b01      	subs	r3, #1
 800c480:	4a0b      	ldr	r2, [pc, #44]	; (800c4b0 <prvCheckTasksWaitingTermination+0x54>)
 800c482:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c484:	4b0b      	ldr	r3, [pc, #44]	; (800c4b4 <prvCheckTasksWaitingTermination+0x58>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	3b01      	subs	r3, #1
 800c48a:	4a0a      	ldr	r2, [pc, #40]	; (800c4b4 <prvCheckTasksWaitingTermination+0x58>)
 800c48c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c48e:	f000 fbe1 	bl	800cc54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 f810 	bl	800c4b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c498:	4b06      	ldr	r3, [pc, #24]	; (800c4b4 <prvCheckTasksWaitingTermination+0x58>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d1e1      	bne.n	800c464 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c4a0:	bf00      	nop
 800c4a2:	bf00      	nop
 800c4a4:	3708      	adds	r7, #8
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	20000368 	.word	0x20000368
 800c4b0:	20000394 	.word	0x20000394
 800c4b4:	2000037c 	.word	0x2000037c

0800c4b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d108      	bne.n	800c4dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f000 fd7e 	bl	800cfd0 <vPortFree>
				vPortFree( pxTCB );
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f000 fd7b 	bl	800cfd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c4da:	e018      	b.n	800c50e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c4e2:	2b01      	cmp	r3, #1
 800c4e4:	d103      	bne.n	800c4ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f000 fd72 	bl	800cfd0 <vPortFree>
	}
 800c4ec:	e00f      	b.n	800c50e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c4f4:	2b02      	cmp	r3, #2
 800c4f6:	d00a      	beq.n	800c50e <prvDeleteTCB+0x56>
	__asm volatile
 800c4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fc:	f383 8811 	msr	BASEPRI, r3
 800c500:	f3bf 8f6f 	isb	sy
 800c504:	f3bf 8f4f 	dsb	sy
 800c508:	60fb      	str	r3, [r7, #12]
}
 800c50a:	bf00      	nop
 800c50c:	e7fe      	b.n	800c50c <prvDeleteTCB+0x54>
	}
 800c50e:	bf00      	nop
 800c510:	3710      	adds	r7, #16
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
	...

0800c518 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c518:	b480      	push	{r7}
 800c51a:	b083      	sub	sp, #12
 800c51c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c51e:	4b0c      	ldr	r3, [pc, #48]	; (800c550 <prvResetNextTaskUnblockTime+0x38>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d104      	bne.n	800c532 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c528:	4b0a      	ldr	r3, [pc, #40]	; (800c554 <prvResetNextTaskUnblockTime+0x3c>)
 800c52a:	f04f 32ff 	mov.w	r2, #4294967295
 800c52e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c530:	e008      	b.n	800c544 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c532:	4b07      	ldr	r3, [pc, #28]	; (800c550 <prvResetNextTaskUnblockTime+0x38>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	68db      	ldr	r3, [r3, #12]
 800c53a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	685b      	ldr	r3, [r3, #4]
 800c540:	4a04      	ldr	r2, [pc, #16]	; (800c554 <prvResetNextTaskUnblockTime+0x3c>)
 800c542:	6013      	str	r3, [r2, #0]
}
 800c544:	bf00      	nop
 800c546:	370c      	adds	r7, #12
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr
 800c550:	2000034c 	.word	0x2000034c
 800c554:	200003b4 	.word	0x200003b4

0800c558 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c55e:	4b0b      	ldr	r3, [pc, #44]	; (800c58c <xTaskGetSchedulerState+0x34>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d102      	bne.n	800c56c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c566:	2301      	movs	r3, #1
 800c568:	607b      	str	r3, [r7, #4]
 800c56a:	e008      	b.n	800c57e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c56c:	4b08      	ldr	r3, [pc, #32]	; (800c590 <xTaskGetSchedulerState+0x38>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d102      	bne.n	800c57a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c574:	2302      	movs	r3, #2
 800c576:	607b      	str	r3, [r7, #4]
 800c578:	e001      	b.n	800c57e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c57a:	2300      	movs	r3, #0
 800c57c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c57e:	687b      	ldr	r3, [r7, #4]
	}
 800c580:	4618      	mov	r0, r3
 800c582:	370c      	adds	r7, #12
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr
 800c58c:	200003a0 	.word	0x200003a0
 800c590:	200003bc 	.word	0x200003bc

0800c594 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d05e      	beq.n	800c668 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ae:	4b31      	ldr	r3, [pc, #196]	; (800c674 <xTaskPriorityInherit+0xe0>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d24e      	bcs.n	800c656 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	699b      	ldr	r3, [r3, #24]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	db06      	blt.n	800c5ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5c0:	4b2c      	ldr	r3, [pc, #176]	; (800c674 <xTaskPriorityInherit+0xe0>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5c6:	f1c3 0207 	rsb	r2, r3, #7
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	6959      	ldr	r1, [r3, #20]
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5d6:	4613      	mov	r3, r2
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	4413      	add	r3, r2
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	4a26      	ldr	r2, [pc, #152]	; (800c678 <xTaskPriorityInherit+0xe4>)
 800c5e0:	4413      	add	r3, r2
 800c5e2:	4299      	cmp	r1, r3
 800c5e4:	d12f      	bne.n	800c646 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	3304      	adds	r3, #4
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fe fca3 	bl	800af36 <uxListRemove>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d10a      	bne.n	800c60c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	fa02 f303 	lsl.w	r3, r2, r3
 800c600:	43da      	mvns	r2, r3
 800c602:	4b1e      	ldr	r3, [pc, #120]	; (800c67c <xTaskPriorityInherit+0xe8>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4013      	ands	r3, r2
 800c608:	4a1c      	ldr	r2, [pc, #112]	; (800c67c <xTaskPriorityInherit+0xe8>)
 800c60a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c60c:	4b19      	ldr	r3, [pc, #100]	; (800c674 <xTaskPriorityInherit+0xe0>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c61a:	2201      	movs	r2, #1
 800c61c:	409a      	lsls	r2, r3
 800c61e:	4b17      	ldr	r3, [pc, #92]	; (800c67c <xTaskPriorityInherit+0xe8>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4313      	orrs	r3, r2
 800c624:	4a15      	ldr	r2, [pc, #84]	; (800c67c <xTaskPriorityInherit+0xe8>)
 800c626:	6013      	str	r3, [r2, #0]
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c62c:	4613      	mov	r3, r2
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	4413      	add	r3, r2
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	4a10      	ldr	r2, [pc, #64]	; (800c678 <xTaskPriorityInherit+0xe4>)
 800c636:	441a      	add	r2, r3
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	3304      	adds	r3, #4
 800c63c:	4619      	mov	r1, r3
 800c63e:	4610      	mov	r0, r2
 800c640:	f7fe fc1c 	bl	800ae7c <vListInsertEnd>
 800c644:	e004      	b.n	800c650 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c646:	4b0b      	ldr	r3, [pc, #44]	; (800c674 <xTaskPriorityInherit+0xe0>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c650:	2301      	movs	r3, #1
 800c652:	60fb      	str	r3, [r7, #12]
 800c654:	e008      	b.n	800c668 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c65a:	4b06      	ldr	r3, [pc, #24]	; (800c674 <xTaskPriorityInherit+0xe0>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c660:	429a      	cmp	r2, r3
 800c662:	d201      	bcs.n	800c668 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c664:	2301      	movs	r3, #1
 800c666:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c668:	68fb      	ldr	r3, [r7, #12]
	}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3710      	adds	r7, #16
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	20000294 	.word	0x20000294
 800c678:	20000298 	.word	0x20000298
 800c67c:	2000039c 	.word	0x2000039c

0800c680 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c680:	b580      	push	{r7, lr}
 800c682:	b086      	sub	sp, #24
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c68c:	2300      	movs	r3, #0
 800c68e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d06e      	beq.n	800c774 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c696:	4b3a      	ldr	r3, [pc, #232]	; (800c780 <xTaskPriorityDisinherit+0x100>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	693a      	ldr	r2, [r7, #16]
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d00a      	beq.n	800c6b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a4:	f383 8811 	msr	BASEPRI, r3
 800c6a8:	f3bf 8f6f 	isb	sy
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	60fb      	str	r3, [r7, #12]
}
 800c6b2:	bf00      	nop
 800c6b4:	e7fe      	b.n	800c6b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d10a      	bne.n	800c6d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	60bb      	str	r3, [r7, #8]
}
 800c6d0:	bf00      	nop
 800c6d2:	e7fe      	b.n	800c6d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6d8:	1e5a      	subs	r2, r3, #1
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d044      	beq.n	800c774 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d140      	bne.n	800c774 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	3304      	adds	r3, #4
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f7fe fc1d 	bl	800af36 <uxListRemove>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d115      	bne.n	800c72e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c706:	491f      	ldr	r1, [pc, #124]	; (800c784 <xTaskPriorityDisinherit+0x104>)
 800c708:	4613      	mov	r3, r2
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	4413      	add	r3, r2
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	440b      	add	r3, r1
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d10a      	bne.n	800c72e <xTaskPriorityDisinherit+0xae>
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c71c:	2201      	movs	r2, #1
 800c71e:	fa02 f303 	lsl.w	r3, r2, r3
 800c722:	43da      	mvns	r2, r3
 800c724:	4b18      	ldr	r3, [pc, #96]	; (800c788 <xTaskPriorityDisinherit+0x108>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4013      	ands	r3, r2
 800c72a:	4a17      	ldr	r2, [pc, #92]	; (800c788 <xTaskPriorityDisinherit+0x108>)
 800c72c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c73a:	f1c3 0207 	rsb	r2, r3, #7
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c746:	2201      	movs	r2, #1
 800c748:	409a      	lsls	r2, r3
 800c74a:	4b0f      	ldr	r3, [pc, #60]	; (800c788 <xTaskPriorityDisinherit+0x108>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4313      	orrs	r3, r2
 800c750:	4a0d      	ldr	r2, [pc, #52]	; (800c788 <xTaskPriorityDisinherit+0x108>)
 800c752:	6013      	str	r3, [r2, #0]
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c758:	4613      	mov	r3, r2
 800c75a:	009b      	lsls	r3, r3, #2
 800c75c:	4413      	add	r3, r2
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	4a08      	ldr	r2, [pc, #32]	; (800c784 <xTaskPriorityDisinherit+0x104>)
 800c762:	441a      	add	r2, r3
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	3304      	adds	r3, #4
 800c768:	4619      	mov	r1, r3
 800c76a:	4610      	mov	r0, r2
 800c76c:	f7fe fb86 	bl	800ae7c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c770:	2301      	movs	r3, #1
 800c772:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c774:	697b      	ldr	r3, [r7, #20]
	}
 800c776:	4618      	mov	r0, r3
 800c778:	3718      	adds	r7, #24
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	bf00      	nop
 800c780:	20000294 	.word	0x20000294
 800c784:	20000298 	.word	0x20000298
 800c788:	2000039c 	.word	0x2000039c

0800c78c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b088      	sub	sp, #32
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c79a:	2301      	movs	r3, #1
 800c79c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d077      	beq.n	800c894 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c7a4:	69bb      	ldr	r3, [r7, #24]
 800c7a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d10a      	bne.n	800c7c2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b0:	f383 8811 	msr	BASEPRI, r3
 800c7b4:	f3bf 8f6f 	isb	sy
 800c7b8:	f3bf 8f4f 	dsb	sy
 800c7bc:	60fb      	str	r3, [r7, #12]
}
 800c7be:	bf00      	nop
 800c7c0:	e7fe      	b.n	800c7c0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c7c2:	69bb      	ldr	r3, [r7, #24]
 800c7c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7c6:	683a      	ldr	r2, [r7, #0]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d902      	bls.n	800c7d2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	61fb      	str	r3, [r7, #28]
 800c7d0:	e002      	b.n	800c7d8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7d6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c7d8:	69bb      	ldr	r3, [r7, #24]
 800c7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7dc:	69fa      	ldr	r2, [r7, #28]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d058      	beq.n	800c894 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c7e2:	69bb      	ldr	r3, [r7, #24]
 800c7e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7e6:	697a      	ldr	r2, [r7, #20]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d153      	bne.n	800c894 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c7ec:	4b2b      	ldr	r3, [pc, #172]	; (800c89c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	69ba      	ldr	r2, [r7, #24]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d10a      	bne.n	800c80c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fa:	f383 8811 	msr	BASEPRI, r3
 800c7fe:	f3bf 8f6f 	isb	sy
 800c802:	f3bf 8f4f 	dsb	sy
 800c806:	60bb      	str	r3, [r7, #8]
}
 800c808:	bf00      	nop
 800c80a:	e7fe      	b.n	800c80a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c80c:	69bb      	ldr	r3, [r7, #24]
 800c80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c810:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c812:	69bb      	ldr	r3, [r7, #24]
 800c814:	69fa      	ldr	r2, [r7, #28]
 800c816:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c818:	69bb      	ldr	r3, [r7, #24]
 800c81a:	699b      	ldr	r3, [r3, #24]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	db04      	blt.n	800c82a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c820:	69fb      	ldr	r3, [r7, #28]
 800c822:	f1c3 0207 	rsb	r2, r3, #7
 800c826:	69bb      	ldr	r3, [r7, #24]
 800c828:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c82a:	69bb      	ldr	r3, [r7, #24]
 800c82c:	6959      	ldr	r1, [r3, #20]
 800c82e:	693a      	ldr	r2, [r7, #16]
 800c830:	4613      	mov	r3, r2
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	4413      	add	r3, r2
 800c836:	009b      	lsls	r3, r3, #2
 800c838:	4a19      	ldr	r2, [pc, #100]	; (800c8a0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c83a:	4413      	add	r3, r2
 800c83c:	4299      	cmp	r1, r3
 800c83e:	d129      	bne.n	800c894 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c840:	69bb      	ldr	r3, [r7, #24]
 800c842:	3304      	adds	r3, #4
 800c844:	4618      	mov	r0, r3
 800c846:	f7fe fb76 	bl	800af36 <uxListRemove>
 800c84a:	4603      	mov	r3, r0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d10a      	bne.n	800c866 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c850:	69bb      	ldr	r3, [r7, #24]
 800c852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c854:	2201      	movs	r2, #1
 800c856:	fa02 f303 	lsl.w	r3, r2, r3
 800c85a:	43da      	mvns	r2, r3
 800c85c:	4b11      	ldr	r3, [pc, #68]	; (800c8a4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4013      	ands	r3, r2
 800c862:	4a10      	ldr	r2, [pc, #64]	; (800c8a4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c864:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c86a:	2201      	movs	r2, #1
 800c86c:	409a      	lsls	r2, r3
 800c86e:	4b0d      	ldr	r3, [pc, #52]	; (800c8a4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	4313      	orrs	r3, r2
 800c874:	4a0b      	ldr	r2, [pc, #44]	; (800c8a4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c876:	6013      	str	r3, [r2, #0]
 800c878:	69bb      	ldr	r3, [r7, #24]
 800c87a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c87c:	4613      	mov	r3, r2
 800c87e:	009b      	lsls	r3, r3, #2
 800c880:	4413      	add	r3, r2
 800c882:	009b      	lsls	r3, r3, #2
 800c884:	4a06      	ldr	r2, [pc, #24]	; (800c8a0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c886:	441a      	add	r2, r3
 800c888:	69bb      	ldr	r3, [r7, #24]
 800c88a:	3304      	adds	r3, #4
 800c88c:	4619      	mov	r1, r3
 800c88e:	4610      	mov	r0, r2
 800c890:	f7fe faf4 	bl	800ae7c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c894:	bf00      	nop
 800c896:	3720      	adds	r7, #32
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}
 800c89c:	20000294 	.word	0x20000294
 800c8a0:	20000298 	.word	0x20000298
 800c8a4:	2000039c 	.word	0x2000039c

0800c8a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c8a8:	b480      	push	{r7}
 800c8aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c8ac:	4b07      	ldr	r3, [pc, #28]	; (800c8cc <pvTaskIncrementMutexHeldCount+0x24>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d004      	beq.n	800c8be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c8b4:	4b05      	ldr	r3, [pc, #20]	; (800c8cc <pvTaskIncrementMutexHeldCount+0x24>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c8ba:	3201      	adds	r2, #1
 800c8bc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c8be:	4b03      	ldr	r3, [pc, #12]	; (800c8cc <pvTaskIncrementMutexHeldCount+0x24>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
	}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr
 800c8cc:	20000294 	.word	0x20000294

0800c8d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c8da:	4b29      	ldr	r3, [pc, #164]	; (800c980 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8e0:	4b28      	ldr	r3, [pc, #160]	; (800c984 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	3304      	adds	r3, #4
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7fe fb25 	bl	800af36 <uxListRemove>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d10b      	bne.n	800c90a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c8f2:	4b24      	ldr	r3, [pc, #144]	; (800c984 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	fa02 f303 	lsl.w	r3, r2, r3
 800c8fe:	43da      	mvns	r2, r3
 800c900:	4b21      	ldr	r3, [pc, #132]	; (800c988 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	4013      	ands	r3, r2
 800c906:	4a20      	ldr	r2, [pc, #128]	; (800c988 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c908:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c910:	d10a      	bne.n	800c928 <prvAddCurrentTaskToDelayedList+0x58>
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d007      	beq.n	800c928 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c918:	4b1a      	ldr	r3, [pc, #104]	; (800c984 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	3304      	adds	r3, #4
 800c91e:	4619      	mov	r1, r3
 800c920:	481a      	ldr	r0, [pc, #104]	; (800c98c <prvAddCurrentTaskToDelayedList+0xbc>)
 800c922:	f7fe faab 	bl	800ae7c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c926:	e026      	b.n	800c976 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c928:	68fa      	ldr	r2, [r7, #12]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	4413      	add	r3, r2
 800c92e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c930:	4b14      	ldr	r3, [pc, #80]	; (800c984 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	68ba      	ldr	r2, [r7, #8]
 800c936:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c938:	68ba      	ldr	r2, [r7, #8]
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d209      	bcs.n	800c954 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c940:	4b13      	ldr	r3, [pc, #76]	; (800c990 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c942:	681a      	ldr	r2, [r3, #0]
 800c944:	4b0f      	ldr	r3, [pc, #60]	; (800c984 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	3304      	adds	r3, #4
 800c94a:	4619      	mov	r1, r3
 800c94c:	4610      	mov	r0, r2
 800c94e:	f7fe fab9 	bl	800aec4 <vListInsert>
}
 800c952:	e010      	b.n	800c976 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c954:	4b0f      	ldr	r3, [pc, #60]	; (800c994 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	4b0a      	ldr	r3, [pc, #40]	; (800c984 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	3304      	adds	r3, #4
 800c95e:	4619      	mov	r1, r3
 800c960:	4610      	mov	r0, r2
 800c962:	f7fe faaf 	bl	800aec4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c966:	4b0c      	ldr	r3, [pc, #48]	; (800c998 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	68ba      	ldr	r2, [r7, #8]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d202      	bcs.n	800c976 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c970:	4a09      	ldr	r2, [pc, #36]	; (800c998 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	6013      	str	r3, [r2, #0]
}
 800c976:	bf00      	nop
 800c978:	3710      	adds	r7, #16
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	20000398 	.word	0x20000398
 800c984:	20000294 	.word	0x20000294
 800c988:	2000039c 	.word	0x2000039c
 800c98c:	20000380 	.word	0x20000380
 800c990:	20000350 	.word	0x20000350
 800c994:	2000034c 	.word	0x2000034c
 800c998:	200003b4 	.word	0x200003b4

0800c99c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c99c:	b480      	push	{r7}
 800c99e:	b085      	sub	sp, #20
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	60f8      	str	r0, [r7, #12]
 800c9a4:	60b9      	str	r1, [r7, #8]
 800c9a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	3b04      	subs	r3, #4
 800c9ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c9b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	3b04      	subs	r3, #4
 800c9ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	f023 0201 	bic.w	r2, r3, #1
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	3b04      	subs	r3, #4
 800c9ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c9cc:	4a0c      	ldr	r2, [pc, #48]	; (800ca00 <pxPortInitialiseStack+0x64>)
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	3b14      	subs	r3, #20
 800c9d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	3b04      	subs	r3, #4
 800c9e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	f06f 0202 	mvn.w	r2, #2
 800c9ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	3b20      	subs	r3, #32
 800c9f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3714      	adds	r7, #20
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr
 800ca00:	0800ca05 	.word	0x0800ca05

0800ca04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ca04:	b480      	push	{r7}
 800ca06:	b085      	sub	sp, #20
 800ca08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ca0e:	4b12      	ldr	r3, [pc, #72]	; (800ca58 <prvTaskExitError+0x54>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca16:	d00a      	beq.n	800ca2e <prvTaskExitError+0x2a>
	__asm volatile
 800ca18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1c:	f383 8811 	msr	BASEPRI, r3
 800ca20:	f3bf 8f6f 	isb	sy
 800ca24:	f3bf 8f4f 	dsb	sy
 800ca28:	60fb      	str	r3, [r7, #12]
}
 800ca2a:	bf00      	nop
 800ca2c:	e7fe      	b.n	800ca2c <prvTaskExitError+0x28>
	__asm volatile
 800ca2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca32:	f383 8811 	msr	BASEPRI, r3
 800ca36:	f3bf 8f6f 	isb	sy
 800ca3a:	f3bf 8f4f 	dsb	sy
 800ca3e:	60bb      	str	r3, [r7, #8]
}
 800ca40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ca42:	bf00      	nop
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d0fc      	beq.n	800ca44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ca4a:	bf00      	nop
 800ca4c:	bf00      	nop
 800ca4e:	3714      	adds	r7, #20
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr
 800ca58:	20000010 	.word	0x20000010
 800ca5c:	00000000 	.word	0x00000000

0800ca60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ca60:	4b07      	ldr	r3, [pc, #28]	; (800ca80 <pxCurrentTCBConst2>)
 800ca62:	6819      	ldr	r1, [r3, #0]
 800ca64:	6808      	ldr	r0, [r1, #0]
 800ca66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca6a:	f380 8809 	msr	PSP, r0
 800ca6e:	f3bf 8f6f 	isb	sy
 800ca72:	f04f 0000 	mov.w	r0, #0
 800ca76:	f380 8811 	msr	BASEPRI, r0
 800ca7a:	4770      	bx	lr
 800ca7c:	f3af 8000 	nop.w

0800ca80 <pxCurrentTCBConst2>:
 800ca80:	20000294 	.word	0x20000294
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ca84:	bf00      	nop
 800ca86:	bf00      	nop

0800ca88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ca88:	4808      	ldr	r0, [pc, #32]	; (800caac <prvPortStartFirstTask+0x24>)
 800ca8a:	6800      	ldr	r0, [r0, #0]
 800ca8c:	6800      	ldr	r0, [r0, #0]
 800ca8e:	f380 8808 	msr	MSP, r0
 800ca92:	f04f 0000 	mov.w	r0, #0
 800ca96:	f380 8814 	msr	CONTROL, r0
 800ca9a:	b662      	cpsie	i
 800ca9c:	b661      	cpsie	f
 800ca9e:	f3bf 8f4f 	dsb	sy
 800caa2:	f3bf 8f6f 	isb	sy
 800caa6:	df00      	svc	0
 800caa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800caaa:	bf00      	nop
 800caac:	e000ed08 	.word	0xe000ed08

0800cab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b086      	sub	sp, #24
 800cab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cab6:	4b46      	ldr	r3, [pc, #280]	; (800cbd0 <xPortStartScheduler+0x120>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	4a46      	ldr	r2, [pc, #280]	; (800cbd4 <xPortStartScheduler+0x124>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d10a      	bne.n	800cad6 <xPortStartScheduler+0x26>
	__asm volatile
 800cac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac4:	f383 8811 	msr	BASEPRI, r3
 800cac8:	f3bf 8f6f 	isb	sy
 800cacc:	f3bf 8f4f 	dsb	sy
 800cad0:	613b      	str	r3, [r7, #16]
}
 800cad2:	bf00      	nop
 800cad4:	e7fe      	b.n	800cad4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cad6:	4b3e      	ldr	r3, [pc, #248]	; (800cbd0 <xPortStartScheduler+0x120>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a3f      	ldr	r2, [pc, #252]	; (800cbd8 <xPortStartScheduler+0x128>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d10a      	bne.n	800caf6 <xPortStartScheduler+0x46>
	__asm volatile
 800cae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae4:	f383 8811 	msr	BASEPRI, r3
 800cae8:	f3bf 8f6f 	isb	sy
 800caec:	f3bf 8f4f 	dsb	sy
 800caf0:	60fb      	str	r3, [r7, #12]
}
 800caf2:	bf00      	nop
 800caf4:	e7fe      	b.n	800caf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800caf6:	4b39      	ldr	r3, [pc, #228]	; (800cbdc <xPortStartScheduler+0x12c>)
 800caf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	22ff      	movs	r2, #255	; 0xff
 800cb06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cb10:	78fb      	ldrb	r3, [r7, #3]
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cb18:	b2da      	uxtb	r2, r3
 800cb1a:	4b31      	ldr	r3, [pc, #196]	; (800cbe0 <xPortStartScheduler+0x130>)
 800cb1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cb1e:	4b31      	ldr	r3, [pc, #196]	; (800cbe4 <xPortStartScheduler+0x134>)
 800cb20:	2207      	movs	r2, #7
 800cb22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb24:	e009      	b.n	800cb3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cb26:	4b2f      	ldr	r3, [pc, #188]	; (800cbe4 <xPortStartScheduler+0x134>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	3b01      	subs	r3, #1
 800cb2c:	4a2d      	ldr	r2, [pc, #180]	; (800cbe4 <xPortStartScheduler+0x134>)
 800cb2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cb30:	78fb      	ldrb	r3, [r7, #3]
 800cb32:	b2db      	uxtb	r3, r3
 800cb34:	005b      	lsls	r3, r3, #1
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb3a:	78fb      	ldrb	r3, [r7, #3]
 800cb3c:	b2db      	uxtb	r3, r3
 800cb3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb42:	2b80      	cmp	r3, #128	; 0x80
 800cb44:	d0ef      	beq.n	800cb26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cb46:	4b27      	ldr	r3, [pc, #156]	; (800cbe4 <xPortStartScheduler+0x134>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f1c3 0307 	rsb	r3, r3, #7
 800cb4e:	2b04      	cmp	r3, #4
 800cb50:	d00a      	beq.n	800cb68 <xPortStartScheduler+0xb8>
	__asm volatile
 800cb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb56:	f383 8811 	msr	BASEPRI, r3
 800cb5a:	f3bf 8f6f 	isb	sy
 800cb5e:	f3bf 8f4f 	dsb	sy
 800cb62:	60bb      	str	r3, [r7, #8]
}
 800cb64:	bf00      	nop
 800cb66:	e7fe      	b.n	800cb66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cb68:	4b1e      	ldr	r3, [pc, #120]	; (800cbe4 <xPortStartScheduler+0x134>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	021b      	lsls	r3, r3, #8
 800cb6e:	4a1d      	ldr	r2, [pc, #116]	; (800cbe4 <xPortStartScheduler+0x134>)
 800cb70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cb72:	4b1c      	ldr	r3, [pc, #112]	; (800cbe4 <xPortStartScheduler+0x134>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cb7a:	4a1a      	ldr	r2, [pc, #104]	; (800cbe4 <xPortStartScheduler+0x134>)
 800cb7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	b2da      	uxtb	r2, r3
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cb86:	4b18      	ldr	r3, [pc, #96]	; (800cbe8 <xPortStartScheduler+0x138>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4a17      	ldr	r2, [pc, #92]	; (800cbe8 <xPortStartScheduler+0x138>)
 800cb8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cb90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cb92:	4b15      	ldr	r3, [pc, #84]	; (800cbe8 <xPortStartScheduler+0x138>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4a14      	ldr	r2, [pc, #80]	; (800cbe8 <xPortStartScheduler+0x138>)
 800cb98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cb9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cb9e:	f000 f8dd 	bl	800cd5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cba2:	4b12      	ldr	r3, [pc, #72]	; (800cbec <xPortStartScheduler+0x13c>)
 800cba4:	2200      	movs	r2, #0
 800cba6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cba8:	f000 f8fc 	bl	800cda4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cbac:	4b10      	ldr	r3, [pc, #64]	; (800cbf0 <xPortStartScheduler+0x140>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a0f      	ldr	r2, [pc, #60]	; (800cbf0 <xPortStartScheduler+0x140>)
 800cbb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cbb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cbb8:	f7ff ff66 	bl	800ca88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cbbc:	f7ff fa90 	bl	800c0e0 <vTaskSwitchContext>
	prvTaskExitError();
 800cbc0:	f7ff ff20 	bl	800ca04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cbc4:	2300      	movs	r3, #0
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3718      	adds	r7, #24
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	e000ed00 	.word	0xe000ed00
 800cbd4:	410fc271 	.word	0x410fc271
 800cbd8:	410fc270 	.word	0x410fc270
 800cbdc:	e000e400 	.word	0xe000e400
 800cbe0:	200003c0 	.word	0x200003c0
 800cbe4:	200003c4 	.word	0x200003c4
 800cbe8:	e000ed20 	.word	0xe000ed20
 800cbec:	20000010 	.word	0x20000010
 800cbf0:	e000ef34 	.word	0xe000ef34

0800cbf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b083      	sub	sp, #12
 800cbf8:	af00      	add	r7, sp, #0
	__asm volatile
 800cbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfe:	f383 8811 	msr	BASEPRI, r3
 800cc02:	f3bf 8f6f 	isb	sy
 800cc06:	f3bf 8f4f 	dsb	sy
 800cc0a:	607b      	str	r3, [r7, #4]
}
 800cc0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cc0e:	4b0f      	ldr	r3, [pc, #60]	; (800cc4c <vPortEnterCritical+0x58>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	3301      	adds	r3, #1
 800cc14:	4a0d      	ldr	r2, [pc, #52]	; (800cc4c <vPortEnterCritical+0x58>)
 800cc16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cc18:	4b0c      	ldr	r3, [pc, #48]	; (800cc4c <vPortEnterCritical+0x58>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2b01      	cmp	r3, #1
 800cc1e:	d10f      	bne.n	800cc40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cc20:	4b0b      	ldr	r3, [pc, #44]	; (800cc50 <vPortEnterCritical+0x5c>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	b2db      	uxtb	r3, r3
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d00a      	beq.n	800cc40 <vPortEnterCritical+0x4c>
	__asm volatile
 800cc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2e:	f383 8811 	msr	BASEPRI, r3
 800cc32:	f3bf 8f6f 	isb	sy
 800cc36:	f3bf 8f4f 	dsb	sy
 800cc3a:	603b      	str	r3, [r7, #0]
}
 800cc3c:	bf00      	nop
 800cc3e:	e7fe      	b.n	800cc3e <vPortEnterCritical+0x4a>
	}
}
 800cc40:	bf00      	nop
 800cc42:	370c      	adds	r7, #12
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr
 800cc4c:	20000010 	.word	0x20000010
 800cc50:	e000ed04 	.word	0xe000ed04

0800cc54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cc54:	b480      	push	{r7}
 800cc56:	b083      	sub	sp, #12
 800cc58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cc5a:	4b12      	ldr	r3, [pc, #72]	; (800cca4 <vPortExitCritical+0x50>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d10a      	bne.n	800cc78 <vPortExitCritical+0x24>
	__asm volatile
 800cc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc66:	f383 8811 	msr	BASEPRI, r3
 800cc6a:	f3bf 8f6f 	isb	sy
 800cc6e:	f3bf 8f4f 	dsb	sy
 800cc72:	607b      	str	r3, [r7, #4]
}
 800cc74:	bf00      	nop
 800cc76:	e7fe      	b.n	800cc76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cc78:	4b0a      	ldr	r3, [pc, #40]	; (800cca4 <vPortExitCritical+0x50>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	3b01      	subs	r3, #1
 800cc7e:	4a09      	ldr	r2, [pc, #36]	; (800cca4 <vPortExitCritical+0x50>)
 800cc80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cc82:	4b08      	ldr	r3, [pc, #32]	; (800cca4 <vPortExitCritical+0x50>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d105      	bne.n	800cc96 <vPortExitCritical+0x42>
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	f383 8811 	msr	BASEPRI, r3
}
 800cc94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cc96:	bf00      	nop
 800cc98:	370c      	adds	r7, #12
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr
 800cca2:	bf00      	nop
 800cca4:	20000010 	.word	0x20000010
	...

0800ccb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ccb0:	f3ef 8009 	mrs	r0, PSP
 800ccb4:	f3bf 8f6f 	isb	sy
 800ccb8:	4b15      	ldr	r3, [pc, #84]	; (800cd10 <pxCurrentTCBConst>)
 800ccba:	681a      	ldr	r2, [r3, #0]
 800ccbc:	f01e 0f10 	tst.w	lr, #16
 800ccc0:	bf08      	it	eq
 800ccc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ccc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccca:	6010      	str	r0, [r2, #0]
 800cccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ccd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ccd4:	f380 8811 	msr	BASEPRI, r0
 800ccd8:	f3bf 8f4f 	dsb	sy
 800ccdc:	f3bf 8f6f 	isb	sy
 800cce0:	f7ff f9fe 	bl	800c0e0 <vTaskSwitchContext>
 800cce4:	f04f 0000 	mov.w	r0, #0
 800cce8:	f380 8811 	msr	BASEPRI, r0
 800ccec:	bc09      	pop	{r0, r3}
 800ccee:	6819      	ldr	r1, [r3, #0]
 800ccf0:	6808      	ldr	r0, [r1, #0]
 800ccf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf6:	f01e 0f10 	tst.w	lr, #16
 800ccfa:	bf08      	it	eq
 800ccfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cd00:	f380 8809 	msr	PSP, r0
 800cd04:	f3bf 8f6f 	isb	sy
 800cd08:	4770      	bx	lr
 800cd0a:	bf00      	nop
 800cd0c:	f3af 8000 	nop.w

0800cd10 <pxCurrentTCBConst>:
 800cd10:	20000294 	.word	0x20000294
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cd14:	bf00      	nop
 800cd16:	bf00      	nop

0800cd18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd22:	f383 8811 	msr	BASEPRI, r3
 800cd26:	f3bf 8f6f 	isb	sy
 800cd2a:	f3bf 8f4f 	dsb	sy
 800cd2e:	607b      	str	r3, [r7, #4]
}
 800cd30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cd32:	f7ff f91d 	bl	800bf70 <xTaskIncrementTick>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d003      	beq.n	800cd44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cd3c:	4b06      	ldr	r3, [pc, #24]	; (800cd58 <SysTick_Handler+0x40>)
 800cd3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd42:	601a      	str	r2, [r3, #0]
 800cd44:	2300      	movs	r3, #0
 800cd46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	f383 8811 	msr	BASEPRI, r3
}
 800cd4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cd50:	bf00      	nop
 800cd52:	3708      	adds	r7, #8
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}
 800cd58:	e000ed04 	.word	0xe000ed04

0800cd5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cd60:	4b0b      	ldr	r3, [pc, #44]	; (800cd90 <vPortSetupTimerInterrupt+0x34>)
 800cd62:	2200      	movs	r2, #0
 800cd64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cd66:	4b0b      	ldr	r3, [pc, #44]	; (800cd94 <vPortSetupTimerInterrupt+0x38>)
 800cd68:	2200      	movs	r2, #0
 800cd6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cd6c:	4b0a      	ldr	r3, [pc, #40]	; (800cd98 <vPortSetupTimerInterrupt+0x3c>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	4a0a      	ldr	r2, [pc, #40]	; (800cd9c <vPortSetupTimerInterrupt+0x40>)
 800cd72:	fba2 2303 	umull	r2, r3, r2, r3
 800cd76:	099b      	lsrs	r3, r3, #6
 800cd78:	4a09      	ldr	r2, [pc, #36]	; (800cda0 <vPortSetupTimerInterrupt+0x44>)
 800cd7a:	3b01      	subs	r3, #1
 800cd7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cd7e:	4b04      	ldr	r3, [pc, #16]	; (800cd90 <vPortSetupTimerInterrupt+0x34>)
 800cd80:	2207      	movs	r2, #7
 800cd82:	601a      	str	r2, [r3, #0]
}
 800cd84:	bf00      	nop
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr
 800cd8e:	bf00      	nop
 800cd90:	e000e010 	.word	0xe000e010
 800cd94:	e000e018 	.word	0xe000e018
 800cd98:	20000000 	.word	0x20000000
 800cd9c:	10624dd3 	.word	0x10624dd3
 800cda0:	e000e014 	.word	0xe000e014

0800cda4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cda4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cdb4 <vPortEnableVFP+0x10>
 800cda8:	6801      	ldr	r1, [r0, #0]
 800cdaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cdae:	6001      	str	r1, [r0, #0]
 800cdb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cdb2:	bf00      	nop
 800cdb4:	e000ed88 	.word	0xe000ed88

0800cdb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cdb8:	b480      	push	{r7}
 800cdba:	b085      	sub	sp, #20
 800cdbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cdbe:	f3ef 8305 	mrs	r3, IPSR
 800cdc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	2b0f      	cmp	r3, #15
 800cdc8:	d914      	bls.n	800cdf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cdca:	4a17      	ldr	r2, [pc, #92]	; (800ce28 <vPortValidateInterruptPriority+0x70>)
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	4413      	add	r3, r2
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cdd4:	4b15      	ldr	r3, [pc, #84]	; (800ce2c <vPortValidateInterruptPriority+0x74>)
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	7afa      	ldrb	r2, [r7, #11]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d20a      	bcs.n	800cdf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde2:	f383 8811 	msr	BASEPRI, r3
 800cde6:	f3bf 8f6f 	isb	sy
 800cdea:	f3bf 8f4f 	dsb	sy
 800cdee:	607b      	str	r3, [r7, #4]
}
 800cdf0:	bf00      	nop
 800cdf2:	e7fe      	b.n	800cdf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cdf4:	4b0e      	ldr	r3, [pc, #56]	; (800ce30 <vPortValidateInterruptPriority+0x78>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cdfc:	4b0d      	ldr	r3, [pc, #52]	; (800ce34 <vPortValidateInterruptPriority+0x7c>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d90a      	bls.n	800ce1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ce04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce08:	f383 8811 	msr	BASEPRI, r3
 800ce0c:	f3bf 8f6f 	isb	sy
 800ce10:	f3bf 8f4f 	dsb	sy
 800ce14:	603b      	str	r3, [r7, #0]
}
 800ce16:	bf00      	nop
 800ce18:	e7fe      	b.n	800ce18 <vPortValidateInterruptPriority+0x60>
	}
 800ce1a:	bf00      	nop
 800ce1c:	3714      	adds	r7, #20
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce24:	4770      	bx	lr
 800ce26:	bf00      	nop
 800ce28:	e000e3f0 	.word	0xe000e3f0
 800ce2c:	200003c0 	.word	0x200003c0
 800ce30:	e000ed0c 	.word	0xe000ed0c
 800ce34:	200003c4 	.word	0x200003c4

0800ce38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b08a      	sub	sp, #40	; 0x28
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ce40:	2300      	movs	r3, #0
 800ce42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ce44:	f7fe ffea 	bl	800be1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ce48:	4b5b      	ldr	r3, [pc, #364]	; (800cfb8 <pvPortMalloc+0x180>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d101      	bne.n	800ce54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ce50:	f000 f920 	bl	800d094 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ce54:	4b59      	ldr	r3, [pc, #356]	; (800cfbc <pvPortMalloc+0x184>)
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	4013      	ands	r3, r2
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	f040 8093 	bne.w	800cf88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d01d      	beq.n	800cea4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ce68:	2208      	movs	r2, #8
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f003 0307 	and.w	r3, r3, #7
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d014      	beq.n	800cea4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f023 0307 	bic.w	r3, r3, #7
 800ce80:	3308      	adds	r3, #8
 800ce82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f003 0307 	and.w	r3, r3, #7
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d00a      	beq.n	800cea4 <pvPortMalloc+0x6c>
	__asm volatile
 800ce8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce92:	f383 8811 	msr	BASEPRI, r3
 800ce96:	f3bf 8f6f 	isb	sy
 800ce9a:	f3bf 8f4f 	dsb	sy
 800ce9e:	617b      	str	r3, [r7, #20]
}
 800cea0:	bf00      	nop
 800cea2:	e7fe      	b.n	800cea2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d06e      	beq.n	800cf88 <pvPortMalloc+0x150>
 800ceaa:	4b45      	ldr	r3, [pc, #276]	; (800cfc0 <pvPortMalloc+0x188>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d869      	bhi.n	800cf88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ceb4:	4b43      	ldr	r3, [pc, #268]	; (800cfc4 <pvPortMalloc+0x18c>)
 800ceb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ceb8:	4b42      	ldr	r3, [pc, #264]	; (800cfc4 <pvPortMalloc+0x18c>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cebe:	e004      	b.n	800ceca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ceca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d903      	bls.n	800cedc <pvPortMalloc+0xa4>
 800ced4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d1f1      	bne.n	800cec0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cedc:	4b36      	ldr	r3, [pc, #216]	; (800cfb8 <pvPortMalloc+0x180>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d050      	beq.n	800cf88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cee6:	6a3b      	ldr	r3, [r7, #32]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	2208      	movs	r2, #8
 800ceec:	4413      	add	r3, r2
 800ceee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	6a3b      	ldr	r3, [r7, #32]
 800cef6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefa:	685a      	ldr	r2, [r3, #4]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	1ad2      	subs	r2, r2, r3
 800cf00:	2308      	movs	r3, #8
 800cf02:	005b      	lsls	r3, r3, #1
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d91f      	bls.n	800cf48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cf08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf10:	69bb      	ldr	r3, [r7, #24]
 800cf12:	f003 0307 	and.w	r3, r3, #7
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d00a      	beq.n	800cf30 <pvPortMalloc+0xf8>
	__asm volatile
 800cf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1e:	f383 8811 	msr	BASEPRI, r3
 800cf22:	f3bf 8f6f 	isb	sy
 800cf26:	f3bf 8f4f 	dsb	sy
 800cf2a:	613b      	str	r3, [r7, #16]
}
 800cf2c:	bf00      	nop
 800cf2e:	e7fe      	b.n	800cf2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cf30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf32:	685a      	ldr	r2, [r3, #4]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	1ad2      	subs	r2, r2, r3
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cf42:	69b8      	ldr	r0, [r7, #24]
 800cf44:	f000 f908 	bl	800d158 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cf48:	4b1d      	ldr	r3, [pc, #116]	; (800cfc0 <pvPortMalloc+0x188>)
 800cf4a:	681a      	ldr	r2, [r3, #0]
 800cf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	1ad3      	subs	r3, r2, r3
 800cf52:	4a1b      	ldr	r2, [pc, #108]	; (800cfc0 <pvPortMalloc+0x188>)
 800cf54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cf56:	4b1a      	ldr	r3, [pc, #104]	; (800cfc0 <pvPortMalloc+0x188>)
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	4b1b      	ldr	r3, [pc, #108]	; (800cfc8 <pvPortMalloc+0x190>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d203      	bcs.n	800cf6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cf62:	4b17      	ldr	r3, [pc, #92]	; (800cfc0 <pvPortMalloc+0x188>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	4a18      	ldr	r2, [pc, #96]	; (800cfc8 <pvPortMalloc+0x190>)
 800cf68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cf6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6c:	685a      	ldr	r2, [r3, #4]
 800cf6e:	4b13      	ldr	r3, [pc, #76]	; (800cfbc <pvPortMalloc+0x184>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	431a      	orrs	r2, r3
 800cf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cf7e:	4b13      	ldr	r3, [pc, #76]	; (800cfcc <pvPortMalloc+0x194>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	3301      	adds	r3, #1
 800cf84:	4a11      	ldr	r2, [pc, #68]	; (800cfcc <pvPortMalloc+0x194>)
 800cf86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cf88:	f7fe ff56 	bl	800be38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf8c:	69fb      	ldr	r3, [r7, #28]
 800cf8e:	f003 0307 	and.w	r3, r3, #7
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d00a      	beq.n	800cfac <pvPortMalloc+0x174>
	__asm volatile
 800cf96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9a:	f383 8811 	msr	BASEPRI, r3
 800cf9e:	f3bf 8f6f 	isb	sy
 800cfa2:	f3bf 8f4f 	dsb	sy
 800cfa6:	60fb      	str	r3, [r7, #12]
}
 800cfa8:	bf00      	nop
 800cfaa:	e7fe      	b.n	800cfaa <pvPortMalloc+0x172>
	return pvReturn;
 800cfac:	69fb      	ldr	r3, [r7, #28]
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3728      	adds	r7, #40	; 0x28
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	20003fd0 	.word	0x20003fd0
 800cfbc:	20003fe4 	.word	0x20003fe4
 800cfc0:	20003fd4 	.word	0x20003fd4
 800cfc4:	20003fc8 	.word	0x20003fc8
 800cfc8:	20003fd8 	.word	0x20003fd8
 800cfcc:	20003fdc 	.word	0x20003fdc

0800cfd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b086      	sub	sp, #24
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d04d      	beq.n	800d07e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cfe2:	2308      	movs	r3, #8
 800cfe4:	425b      	negs	r3, r3
 800cfe6:	697a      	ldr	r2, [r7, #20]
 800cfe8:	4413      	add	r3, r2
 800cfea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	685a      	ldr	r2, [r3, #4]
 800cff4:	4b24      	ldr	r3, [pc, #144]	; (800d088 <vPortFree+0xb8>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	4013      	ands	r3, r2
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d10a      	bne.n	800d014 <vPortFree+0x44>
	__asm volatile
 800cffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d002:	f383 8811 	msr	BASEPRI, r3
 800d006:	f3bf 8f6f 	isb	sy
 800d00a:	f3bf 8f4f 	dsb	sy
 800d00e:	60fb      	str	r3, [r7, #12]
}
 800d010:	bf00      	nop
 800d012:	e7fe      	b.n	800d012 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d00a      	beq.n	800d032 <vPortFree+0x62>
	__asm volatile
 800d01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d020:	f383 8811 	msr	BASEPRI, r3
 800d024:	f3bf 8f6f 	isb	sy
 800d028:	f3bf 8f4f 	dsb	sy
 800d02c:	60bb      	str	r3, [r7, #8]
}
 800d02e:	bf00      	nop
 800d030:	e7fe      	b.n	800d030 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	685a      	ldr	r2, [r3, #4]
 800d036:	4b14      	ldr	r3, [pc, #80]	; (800d088 <vPortFree+0xb8>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	4013      	ands	r3, r2
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d01e      	beq.n	800d07e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d11a      	bne.n	800d07e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	685a      	ldr	r2, [r3, #4]
 800d04c:	4b0e      	ldr	r3, [pc, #56]	; (800d088 <vPortFree+0xb8>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	43db      	mvns	r3, r3
 800d052:	401a      	ands	r2, r3
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d058:	f7fe fee0 	bl	800be1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	685a      	ldr	r2, [r3, #4]
 800d060:	4b0a      	ldr	r3, [pc, #40]	; (800d08c <vPortFree+0xbc>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4413      	add	r3, r2
 800d066:	4a09      	ldr	r2, [pc, #36]	; (800d08c <vPortFree+0xbc>)
 800d068:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d06a:	6938      	ldr	r0, [r7, #16]
 800d06c:	f000 f874 	bl	800d158 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d070:	4b07      	ldr	r3, [pc, #28]	; (800d090 <vPortFree+0xc0>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	3301      	adds	r3, #1
 800d076:	4a06      	ldr	r2, [pc, #24]	; (800d090 <vPortFree+0xc0>)
 800d078:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d07a:	f7fe fedd 	bl	800be38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d07e:	bf00      	nop
 800d080:	3718      	adds	r7, #24
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	20003fe4 	.word	0x20003fe4
 800d08c:	20003fd4 	.word	0x20003fd4
 800d090:	20003fe0 	.word	0x20003fe0

0800d094 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d094:	b480      	push	{r7}
 800d096:	b085      	sub	sp, #20
 800d098:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d09a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d09e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d0a0:	4b27      	ldr	r3, [pc, #156]	; (800d140 <prvHeapInit+0xac>)
 800d0a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f003 0307 	and.w	r3, r3, #7
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d00c      	beq.n	800d0c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	3307      	adds	r3, #7
 800d0b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f023 0307 	bic.w	r3, r3, #7
 800d0ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d0bc:	68ba      	ldr	r2, [r7, #8]
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	1ad3      	subs	r3, r2, r3
 800d0c2:	4a1f      	ldr	r2, [pc, #124]	; (800d140 <prvHeapInit+0xac>)
 800d0c4:	4413      	add	r3, r2
 800d0c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d0cc:	4a1d      	ldr	r2, [pc, #116]	; (800d144 <prvHeapInit+0xb0>)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d0d2:	4b1c      	ldr	r3, [pc, #112]	; (800d144 <prvHeapInit+0xb0>)
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	68ba      	ldr	r2, [r7, #8]
 800d0dc:	4413      	add	r3, r2
 800d0de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d0e0:	2208      	movs	r2, #8
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	1a9b      	subs	r3, r3, r2
 800d0e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f023 0307 	bic.w	r3, r3, #7
 800d0ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	4a15      	ldr	r2, [pc, #84]	; (800d148 <prvHeapInit+0xb4>)
 800d0f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d0f6:	4b14      	ldr	r3, [pc, #80]	; (800d148 <prvHeapInit+0xb4>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d0fe:	4b12      	ldr	r3, [pc, #72]	; (800d148 <prvHeapInit+0xb4>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2200      	movs	r2, #0
 800d104:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	68fa      	ldr	r2, [r7, #12]
 800d10e:	1ad2      	subs	r2, r2, r3
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d114:	4b0c      	ldr	r3, [pc, #48]	; (800d148 <prvHeapInit+0xb4>)
 800d116:	681a      	ldr	r2, [r3, #0]
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	4a0a      	ldr	r2, [pc, #40]	; (800d14c <prvHeapInit+0xb8>)
 800d122:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	685b      	ldr	r3, [r3, #4]
 800d128:	4a09      	ldr	r2, [pc, #36]	; (800d150 <prvHeapInit+0xbc>)
 800d12a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d12c:	4b09      	ldr	r3, [pc, #36]	; (800d154 <prvHeapInit+0xc0>)
 800d12e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d132:	601a      	str	r2, [r3, #0]
}
 800d134:	bf00      	nop
 800d136:	3714      	adds	r7, #20
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr
 800d140:	200003c8 	.word	0x200003c8
 800d144:	20003fc8 	.word	0x20003fc8
 800d148:	20003fd0 	.word	0x20003fd0
 800d14c:	20003fd8 	.word	0x20003fd8
 800d150:	20003fd4 	.word	0x20003fd4
 800d154:	20003fe4 	.word	0x20003fe4

0800d158 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d158:	b480      	push	{r7}
 800d15a:	b085      	sub	sp, #20
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d160:	4b28      	ldr	r3, [pc, #160]	; (800d204 <prvInsertBlockIntoFreeList+0xac>)
 800d162:	60fb      	str	r3, [r7, #12]
 800d164:	e002      	b.n	800d16c <prvInsertBlockIntoFreeList+0x14>
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	60fb      	str	r3, [r7, #12]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	687a      	ldr	r2, [r7, #4]
 800d172:	429a      	cmp	r2, r3
 800d174:	d8f7      	bhi.n	800d166 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	685b      	ldr	r3, [r3, #4]
 800d17e:	68ba      	ldr	r2, [r7, #8]
 800d180:	4413      	add	r3, r2
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	429a      	cmp	r2, r3
 800d186:	d108      	bne.n	800d19a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	685a      	ldr	r2, [r3, #4]
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	685b      	ldr	r3, [r3, #4]
 800d190:	441a      	add	r2, r3
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	685b      	ldr	r3, [r3, #4]
 800d1a2:	68ba      	ldr	r2, [r7, #8]
 800d1a4:	441a      	add	r2, r3
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d118      	bne.n	800d1e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	4b15      	ldr	r3, [pc, #84]	; (800d208 <prvInsertBlockIntoFreeList+0xb0>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d00d      	beq.n	800d1d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	685a      	ldr	r2, [r3, #4]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	441a      	add	r2, r3
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	681a      	ldr	r2, [r3, #0]
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	601a      	str	r2, [r3, #0]
 800d1d4:	e008      	b.n	800d1e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d1d6:	4b0c      	ldr	r3, [pc, #48]	; (800d208 <prvInsertBlockIntoFreeList+0xb0>)
 800d1d8:	681a      	ldr	r2, [r3, #0]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	601a      	str	r2, [r3, #0]
 800d1de:	e003      	b.n	800d1e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681a      	ldr	r2, [r3, #0]
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d1e8:	68fa      	ldr	r2, [r7, #12]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d002      	beq.n	800d1f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	687a      	ldr	r2, [r7, #4]
 800d1f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1f6:	bf00      	nop
 800d1f8:	3714      	adds	r7, #20
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr
 800d202:	bf00      	nop
 800d204:	20003fc8 	.word	0x20003fc8
 800d208:	20003fd0 	.word	0x20003fd0

0800d20c <__libc_init_array>:
 800d20c:	b570      	push	{r4, r5, r6, lr}
 800d20e:	4d0d      	ldr	r5, [pc, #52]	; (800d244 <__libc_init_array+0x38>)
 800d210:	4c0d      	ldr	r4, [pc, #52]	; (800d248 <__libc_init_array+0x3c>)
 800d212:	1b64      	subs	r4, r4, r5
 800d214:	10a4      	asrs	r4, r4, #2
 800d216:	2600      	movs	r6, #0
 800d218:	42a6      	cmp	r6, r4
 800d21a:	d109      	bne.n	800d230 <__libc_init_array+0x24>
 800d21c:	4d0b      	ldr	r5, [pc, #44]	; (800d24c <__libc_init_array+0x40>)
 800d21e:	4c0c      	ldr	r4, [pc, #48]	; (800d250 <__libc_init_array+0x44>)
 800d220:	f000 f82e 	bl	800d280 <_init>
 800d224:	1b64      	subs	r4, r4, r5
 800d226:	10a4      	asrs	r4, r4, #2
 800d228:	2600      	movs	r6, #0
 800d22a:	42a6      	cmp	r6, r4
 800d22c:	d105      	bne.n	800d23a <__libc_init_array+0x2e>
 800d22e:	bd70      	pop	{r4, r5, r6, pc}
 800d230:	f855 3b04 	ldr.w	r3, [r5], #4
 800d234:	4798      	blx	r3
 800d236:	3601      	adds	r6, #1
 800d238:	e7ee      	b.n	800d218 <__libc_init_array+0xc>
 800d23a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d23e:	4798      	blx	r3
 800d240:	3601      	adds	r6, #1
 800d242:	e7f2      	b.n	800d22a <__libc_init_array+0x1e>
 800d244:	0800d390 	.word	0x0800d390
 800d248:	0800d390 	.word	0x0800d390
 800d24c:	0800d390 	.word	0x0800d390
 800d250:	0800d394 	.word	0x0800d394

0800d254 <memcpy>:
 800d254:	440a      	add	r2, r1
 800d256:	4291      	cmp	r1, r2
 800d258:	f100 33ff 	add.w	r3, r0, #4294967295
 800d25c:	d100      	bne.n	800d260 <memcpy+0xc>
 800d25e:	4770      	bx	lr
 800d260:	b510      	push	{r4, lr}
 800d262:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d266:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d26a:	4291      	cmp	r1, r2
 800d26c:	d1f9      	bne.n	800d262 <memcpy+0xe>
 800d26e:	bd10      	pop	{r4, pc}

0800d270 <memset>:
 800d270:	4402      	add	r2, r0
 800d272:	4603      	mov	r3, r0
 800d274:	4293      	cmp	r3, r2
 800d276:	d100      	bne.n	800d27a <memset+0xa>
 800d278:	4770      	bx	lr
 800d27a:	f803 1b01 	strb.w	r1, [r3], #1
 800d27e:	e7f9      	b.n	800d274 <memset+0x4>

0800d280 <_init>:
 800d280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d282:	bf00      	nop
 800d284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d286:	bc08      	pop	{r3}
 800d288:	469e      	mov	lr, r3
 800d28a:	4770      	bx	lr

0800d28c <_fini>:
 800d28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d28e:	bf00      	nop
 800d290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d292:	bc08      	pop	{r3}
 800d294:	469e      	mov	lr, r3
 800d296:	4770      	bx	lr
