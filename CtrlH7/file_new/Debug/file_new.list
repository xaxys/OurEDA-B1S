
file_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d708  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800d9a8  0800d9a8  0001d9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800da98  0800da98  0001da98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800daa0  0800daa0  0001daa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800daa4  0800daa4  0001daa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  0800daa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004994  20000014  0800dabc  00020014  2**2
                  ALLOC
  8 .RAM_D1       00000128  24000000  0800dabc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 ._user_heap_stack 00000600  200049a8  200049a8  000349a8  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030128  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002c6b4  00000000  00000000  00030156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004a71  00000000  00000000  0005c80a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000017a0  00000000  00000000  00061280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001628  00000000  00000000  00062a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000395ee  00000000  00000000  00064048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001dc40  00000000  00000000  0009d636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016c1d3  00000000  00000000  000bb276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00227449  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006274  00000000  00000000  0022749c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000014 	.word	0x20000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d990 	.word	0x0800d990

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000018 	.word	0x20000018
 80002dc:	0800d990 	.word	0x0800d990

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <CaptureDownData>:
/**
 * @brief 捕获上位机向下位机发送的指令
 * @return DownDataDef 上位机向下位机发送的指令
 */
DownDataDef CaptureDownData(void)
{
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b090      	sub	sp, #64	; 0x40
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	DownDataDef CaptureData;

	CaptureData.StraightNum = ((DownDataReceive[1] << 8) | DownDataReceive[2]);
 80005e0:	4b4d      	ldr	r3, [pc, #308]	; (8000718 <CaptureDownData+0x140>)
 80005e2:	785b      	ldrb	r3, [r3, #1]
 80005e4:	021b      	lsls	r3, r3, #8
 80005e6:	b21a      	sxth	r2, r3
 80005e8:	4b4b      	ldr	r3, [pc, #300]	; (8000718 <CaptureDownData+0x140>)
 80005ea:	789b      	ldrb	r3, [r3, #2]
 80005ec:	b21b      	sxth	r3, r3
 80005ee:	4313      	orrs	r3, r2
 80005f0:	b21b      	sxth	r3, r3
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	81bb      	strh	r3, [r7, #12]
	CaptureData.RotateNum = ((DownDataReceive[3] << 8) | DownDataReceive[4]);
 80005f6:	4b48      	ldr	r3, [pc, #288]	; (8000718 <CaptureDownData+0x140>)
 80005f8:	78db      	ldrb	r3, [r3, #3]
 80005fa:	021b      	lsls	r3, r3, #8
 80005fc:	b21a      	sxth	r2, r3
 80005fe:	4b46      	ldr	r3, [pc, #280]	; (8000718 <CaptureDownData+0x140>)
 8000600:	791b      	ldrb	r3, [r3, #4]
 8000602:	b21b      	sxth	r3, r3
 8000604:	4313      	orrs	r3, r2
 8000606:	b21b      	sxth	r3, r3
 8000608:	b29b      	uxth	r3, r3
 800060a:	81fb      	strh	r3, [r7, #14]
	CaptureData.VerticalNum = ((DownDataReceive[5] << 8) | DownDataReceive[6]);
 800060c:	4b42      	ldr	r3, [pc, #264]	; (8000718 <CaptureDownData+0x140>)
 800060e:	795b      	ldrb	r3, [r3, #5]
 8000610:	021b      	lsls	r3, r3, #8
 8000612:	b21a      	sxth	r2, r3
 8000614:	4b40      	ldr	r3, [pc, #256]	; (8000718 <CaptureDownData+0x140>)
 8000616:	799b      	ldrb	r3, [r3, #6]
 8000618:	b21b      	sxth	r3, r3
 800061a:	4313      	orrs	r3, r2
 800061c:	b21b      	sxth	r3, r3
 800061e:	b29b      	uxth	r3, r3
 8000620:	823b      	strh	r3, [r7, #16]
	CaptureData.LightPWM = ((DownDataReceive[7] << 8) | DownDataReceive[8]);
 8000622:	4b3d      	ldr	r3, [pc, #244]	; (8000718 <CaptureDownData+0x140>)
 8000624:	79db      	ldrb	r3, [r3, #7]
 8000626:	021b      	lsls	r3, r3, #8
 8000628:	4a3b      	ldr	r2, [pc, #236]	; (8000718 <CaptureDownData+0x140>)
 800062a:	7a12      	ldrb	r2, [r2, #8]
 800062c:	4313      	orrs	r3, r2
 800062e:	617b      	str	r3, [r7, #20]
	CaptureData.THPWM = ((DownDataReceive[9] << 8) | DownDataReceive[10]);
 8000630:	4b39      	ldr	r3, [pc, #228]	; (8000718 <CaptureDownData+0x140>)
 8000632:	7a5b      	ldrb	r3, [r3, #9]
 8000634:	021b      	lsls	r3, r3, #8
 8000636:	4a38      	ldr	r2, [pc, #224]	; (8000718 <CaptureDownData+0x140>)
 8000638:	7a92      	ldrb	r2, [r2, #10]
 800063a:	4313      	orrs	r3, r2
 800063c:	61bb      	str	r3, [r7, #24]
	CaptureData.TranspPWM = ((DownDataReceive[11] << 8) | DownDataReceive[12]);
 800063e:	4b36      	ldr	r3, [pc, #216]	; (8000718 <CaptureDownData+0x140>)
 8000640:	7adb      	ldrb	r3, [r3, #11]
 8000642:	021b      	lsls	r3, r3, #8
 8000644:	4a34      	ldr	r2, [pc, #208]	; (8000718 <CaptureDownData+0x140>)
 8000646:	7b12      	ldrb	r2, [r2, #12]
 8000648:	4313      	orrs	r3, r2
 800064a:	61fb      	str	r3, [r7, #28]
	CaptureData.ArmPWM[0] = ((DownDataReceive[13] << 8) | DownDataReceive[14]);
 800064c:	4b32      	ldr	r3, [pc, #200]	; (8000718 <CaptureDownData+0x140>)
 800064e:	7b5b      	ldrb	r3, [r3, #13]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	4a31      	ldr	r2, [pc, #196]	; (8000718 <CaptureDownData+0x140>)
 8000654:	7b92      	ldrb	r2, [r2, #14]
 8000656:	4313      	orrs	r3, r2
 8000658:	623b      	str	r3, [r7, #32]
	CaptureData.ArmPWM[1] = ((DownDataReceive[15] << 8) | DownDataReceive[16]);
 800065a:	4b2f      	ldr	r3, [pc, #188]	; (8000718 <CaptureDownData+0x140>)
 800065c:	7bdb      	ldrb	r3, [r3, #15]
 800065e:	021b      	lsls	r3, r3, #8
 8000660:	4a2d      	ldr	r2, [pc, #180]	; (8000718 <CaptureDownData+0x140>)
 8000662:	7c12      	ldrb	r2, [r2, #16]
 8000664:	4313      	orrs	r3, r2
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
	CaptureData.ArmPWM[2] = ((DownDataReceive[17] << 8) | DownDataReceive[18]);
 8000668:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <CaptureDownData+0x140>)
 800066a:	7c5b      	ldrb	r3, [r3, #17]
 800066c:	021b      	lsls	r3, r3, #8
 800066e:	4a2a      	ldr	r2, [pc, #168]	; (8000718 <CaptureDownData+0x140>)
 8000670:	7c92      	ldrb	r2, [r2, #18]
 8000672:	4313      	orrs	r3, r2
 8000674:	62bb      	str	r3, [r7, #40]	; 0x28
	CaptureData.ArmPWM[3] = ((DownDataReceive[19] << 8) | DownDataReceive[20]);
 8000676:	4b28      	ldr	r3, [pc, #160]	; (8000718 <CaptureDownData+0x140>)
 8000678:	7cdb      	ldrb	r3, [r3, #19]
 800067a:	021b      	lsls	r3, r3, #8
 800067c:	4a26      	ldr	r2, [pc, #152]	; (8000718 <CaptureDownData+0x140>)
 800067e:	7d12      	ldrb	r2, [r2, #20]
 8000680:	4313      	orrs	r3, r2
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
	CaptureData.ArmPWM[4] = ((DownDataReceive[21] << 8) | DownDataReceive[22]);
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <CaptureDownData+0x140>)
 8000686:	7d5b      	ldrb	r3, [r3, #21]
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	4a23      	ldr	r2, [pc, #140]	; (8000718 <CaptureDownData+0x140>)
 800068c:	7d92      	ldrb	r2, [r2, #22]
 800068e:	4313      	orrs	r3, r2
 8000690:	633b      	str	r3, [r7, #48]	; 0x30
	CaptureData.ArmPWM[5] = ((DownDataReceive[23] << 8) | DownDataReceive[24]);
 8000692:	4b21      	ldr	r3, [pc, #132]	; (8000718 <CaptureDownData+0x140>)
 8000694:	7ddb      	ldrb	r3, [r3, #23]
 8000696:	021b      	lsls	r3, r3, #8
 8000698:	4a1f      	ldr	r2, [pc, #124]	; (8000718 <CaptureDownData+0x140>)
 800069a:	7e12      	ldrb	r2, [r2, #24]
 800069c:	4313      	orrs	r3, r2
 800069e:	637b      	str	r3, [r7, #52]	; 0x34
	CaptureData.ResPWM = ((DownDataReceive[25] << 8) | DownDataReceive[26]);
 80006a0:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <CaptureDownData+0x140>)
 80006a2:	7e5b      	ldrb	r3, [r3, #25]
 80006a4:	021b      	lsls	r3, r3, #8
 80006a6:	4a1c      	ldr	r2, [pc, #112]	; (8000718 <CaptureDownData+0x140>)
 80006a8:	7e92      	ldrb	r2, [r2, #26]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
#ifdef CtrlSide
	CaptureData.Mode = (DownDataReceive[27] & 0b0001);
 80006ae:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <CaptureDownData+0x140>)
 80006b0:	7edb      	ldrb	r3, [r3, #27]
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	CaptureData.Relay = (DownDataReceive[27] & 0b1000);
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <CaptureDownData+0x140>)
 80006be:	7edb      	ldrb	r3, [r3, #27]
 80006c0:	f003 0308 	and.w	r3, r3, #8
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
#else
	CaptureData.Mode = (DownDataReceive[27]);
	CaptureData.Relay = (DownDataReceive[27]);
#endif
#endif
	CaptureData.IdTest = IdTest(DownDataReceive, 0, 44, 28);
 80006ca:	231c      	movs	r3, #28
 80006cc:	222c      	movs	r2, #44	; 0x2c
 80006ce:	2100      	movs	r1, #0
 80006d0:	4811      	ldr	r0, [pc, #68]	; (8000718 <CaptureDownData+0x140>)
 80006d2:	f000 fbd1 	bl	8000e78 <IdTest>
 80006d6:	4603      	mov	r3, r0
 80006d8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	__HAL_UART_ENABLE_IT(&Up_UART, UART_IT_IDLE);
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <CaptureDownData+0x144>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <CaptureDownData+0x144>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f042 0210 	orr.w	r2, r2, #16
 80006ea:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Up_UART, DownDataReceive, Up_UART_RXLen);
 80006ec:	221e      	movs	r2, #30
 80006ee:	490a      	ldr	r1, [pc, #40]	; (8000718 <CaptureDownData+0x140>)
 80006f0:	480a      	ldr	r0, [pc, #40]	; (800071c <CaptureDownData+0x144>)
 80006f2:	f009 f8ed 	bl	80098d0 <HAL_UART_Receive_DMA>

	return CaptureData;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	461d      	mov	r5, r3
 80006fa:	f107 040c 	add.w	r4, r7, #12
 80006fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000704:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000706:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000708:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800070a:	6823      	ldr	r3, [r4, #0]
 800070c:	602b      	str	r3, [r5, #0]
}
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	3740      	adds	r7, #64	; 0x40
 8000712:	46bd      	mov	sp, r7
 8000714:	bdb0      	pop	{r4, r5, r7, pc}
 8000716:	bf00      	nop
 8000718:	24000000 	.word	0x24000000
 800071c:	200044d0 	.word	0x200044d0

08000720 <SendDownData>:
/**
 * @brief 向下位机发送数据
 * @param  SendData         待发送的数据结构体
 */
void SendDownData(DownDataDef SendData)
{
 8000720:	b084      	sub	sp, #16
 8000722:	b580      	push	{r7, lr}
 8000724:	af00      	add	r7, sp, #0
 8000726:	f107 0c08 	add.w	ip, r7, #8
 800072a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	DownDataSend[0] = 0x25;
 800072e:	4b4c      	ldr	r3, [pc, #304]	; (8000860 <SendDownData+0x140>)
 8000730:	2225      	movs	r2, #37	; 0x25
 8000732:	701a      	strb	r2, [r3, #0]
	DownDataSend[1] = SendData.StraightNum >> 8;
 8000734:	893b      	ldrh	r3, [r7, #8]
 8000736:	0a1b      	lsrs	r3, r3, #8
 8000738:	b29b      	uxth	r3, r3
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b48      	ldr	r3, [pc, #288]	; (8000860 <SendDownData+0x140>)
 800073e:	705a      	strb	r2, [r3, #1]
	DownDataSend[2] = SendData.StraightNum;
 8000740:	893b      	ldrh	r3, [r7, #8]
 8000742:	b2da      	uxtb	r2, r3
 8000744:	4b46      	ldr	r3, [pc, #280]	; (8000860 <SendDownData+0x140>)
 8000746:	709a      	strb	r2, [r3, #2]
	DownDataSend[3] = SendData.RotateNum >> 8;
 8000748:	897b      	ldrh	r3, [r7, #10]
 800074a:	0a1b      	lsrs	r3, r3, #8
 800074c:	b29b      	uxth	r3, r3
 800074e:	b2da      	uxtb	r2, r3
 8000750:	4b43      	ldr	r3, [pc, #268]	; (8000860 <SendDownData+0x140>)
 8000752:	70da      	strb	r2, [r3, #3]
	DownDataSend[4] = SendData.RotateNum;
 8000754:	897b      	ldrh	r3, [r7, #10]
 8000756:	b2da      	uxtb	r2, r3
 8000758:	4b41      	ldr	r3, [pc, #260]	; (8000860 <SendDownData+0x140>)
 800075a:	711a      	strb	r2, [r3, #4]
	DownDataSend[5] = SendData.VerticalNum >> 8;
 800075c:	89bb      	ldrh	r3, [r7, #12]
 800075e:	0a1b      	lsrs	r3, r3, #8
 8000760:	b29b      	uxth	r3, r3
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b3e      	ldr	r3, [pc, #248]	; (8000860 <SendDownData+0x140>)
 8000766:	715a      	strb	r2, [r3, #5]
	DownDataSend[6] = SendData.VerticalNum;
 8000768:	89bb      	ldrh	r3, [r7, #12]
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b3c      	ldr	r3, [pc, #240]	; (8000860 <SendDownData+0x140>)
 800076e:	719a      	strb	r2, [r3, #6]
	DownDataSend[7] = SendData.LightPWM >> 8;
 8000770:	693b      	ldr	r3, [r7, #16]
 8000772:	0a1b      	lsrs	r3, r3, #8
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b3a      	ldr	r3, [pc, #232]	; (8000860 <SendDownData+0x140>)
 8000778:	71da      	strb	r2, [r3, #7]
	DownDataSend[8] = SendData.LightPWM;
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b38      	ldr	r3, [pc, #224]	; (8000860 <SendDownData+0x140>)
 8000780:	721a      	strb	r2, [r3, #8]
	DownDataSend[9] = SendData.THPWM >> 8;
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	0a1b      	lsrs	r3, r3, #8
 8000786:	b2da      	uxtb	r2, r3
 8000788:	4b35      	ldr	r3, [pc, #212]	; (8000860 <SendDownData+0x140>)
 800078a:	725a      	strb	r2, [r3, #9]
	DownDataSend[10] = SendData.THPWM;
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b33      	ldr	r3, [pc, #204]	; (8000860 <SendDownData+0x140>)
 8000792:	729a      	strb	r2, [r3, #10]
	DownDataSend[11] = SendData.TranspPWM >> 8;
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	0a1b      	lsrs	r3, r3, #8
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b31      	ldr	r3, [pc, #196]	; (8000860 <SendDownData+0x140>)
 800079c:	72da      	strb	r2, [r3, #11]
	DownDataSend[12] = SendData.TranspPWM;
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4b2f      	ldr	r3, [pc, #188]	; (8000860 <SendDownData+0x140>)
 80007a4:	731a      	strb	r2, [r3, #12]
	DownDataSend[13] = SendData.ArmPWM[0] >> 8;
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	0a1b      	lsrs	r3, r3, #8
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4b2c      	ldr	r3, [pc, #176]	; (8000860 <SendDownData+0x140>)
 80007ae:	735a      	strb	r2, [r3, #13]
	DownDataSend[14] = SendData.ArmPWM[0];
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <SendDownData+0x140>)
 80007b6:	739a      	strb	r2, [r3, #14]
	DownDataSend[15] = SendData.ArmPWM[1] >> 8;
 80007b8:	6a3b      	ldr	r3, [r7, #32]
 80007ba:	0a1b      	lsrs	r3, r3, #8
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b28      	ldr	r3, [pc, #160]	; (8000860 <SendDownData+0x140>)
 80007c0:	73da      	strb	r2, [r3, #15]
	DownDataSend[16] = SendData.ArmPWM[1];
 80007c2:	6a3b      	ldr	r3, [r7, #32]
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4b26      	ldr	r3, [pc, #152]	; (8000860 <SendDownData+0x140>)
 80007c8:	741a      	strb	r2, [r3, #16]
	DownDataSend[17] = SendData.ArmPWM[2] >> 8;
 80007ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007cc:	0a1b      	lsrs	r3, r3, #8
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	4b23      	ldr	r3, [pc, #140]	; (8000860 <SendDownData+0x140>)
 80007d2:	745a      	strb	r2, [r3, #17]
	DownDataSend[18] = SendData.ArmPWM[2];
 80007d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	4b21      	ldr	r3, [pc, #132]	; (8000860 <SendDownData+0x140>)
 80007da:	749a      	strb	r2, [r3, #18]
	DownDataSend[19] = SendData.ArmPWM[3] >> 8;
 80007dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007de:	0a1b      	lsrs	r3, r3, #8
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <SendDownData+0x140>)
 80007e4:	74da      	strb	r2, [r3, #19]
	DownDataSend[20] = SendData.ArmPWM[3];
 80007e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <SendDownData+0x140>)
 80007ec:	751a      	strb	r2, [r3, #20]
	DownDataSend[21] = SendData.ArmPWM[4] >> 8;
 80007ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f0:	0a1b      	lsrs	r3, r3, #8
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <SendDownData+0x140>)
 80007f6:	755a      	strb	r2, [r3, #21]
	DownDataSend[22] = SendData.ArmPWM[4];
 80007f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <SendDownData+0x140>)
 80007fe:	759a      	strb	r2, [r3, #22]
	DownDataSend[23] = SendData.ArmPWM[5] >> 8;
 8000800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000802:	0a1b      	lsrs	r3, r3, #8
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <SendDownData+0x140>)
 8000808:	75da      	strb	r2, [r3, #23]
	DownDataSend[24] = SendData.ArmPWM[5];
 800080a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <SendDownData+0x140>)
 8000810:	761a      	strb	r2, [r3, #24]
	DownDataSend[25] = SendData.ResPWM >> 8;
 8000812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	b2da      	uxtb	r2, r3
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <SendDownData+0x140>)
 800081a:	765a      	strb	r2, [r3, #25]
	DownDataSend[26] = SendData.ResPWM;
 800081c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <SendDownData+0x140>)
 8000822:	769a      	strb	r2, [r3, #26]
	DownDataSend[27] = (SendData.Mode | SendData.Relay);
 8000824:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000828:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800082c:	4313      	orrs	r3, r2
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <SendDownData+0x140>)
 8000832:	76da      	strb	r2, [r3, #27]
	DownDataSend[28] = XorCaculate(DownDataSend, 28);
 8000834:	211c      	movs	r1, #28
 8000836:	480a      	ldr	r0, [pc, #40]	; (8000860 <SendDownData+0x140>)
 8000838:	f000 fb32 	bl	8000ea0 <XorCaculate>
 800083c:	4603      	mov	r3, r0
 800083e:	461a      	mov	r2, r3
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <SendDownData+0x140>)
 8000842:	771a      	strb	r2, [r3, #28]
	DownDataSend[29] = 0x21;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <SendDownData+0x140>)
 8000846:	2221      	movs	r2, #33	; 0x21
 8000848:	775a      	strb	r2, [r3, #29]

	HAL_UART_Transmit_DMA(&Down_UART, DownDataSend, Down_UART_TXLEN);
 800084a:	221e      	movs	r2, #30
 800084c:	4904      	ldr	r1, [pc, #16]	; (8000860 <SendDownData+0x140>)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <SendDownData+0x144>)
 8000850:	f008 ffbe 	bl	80097d0 <HAL_UART_Transmit_DMA>
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800085c:	b004      	add	sp, #16
 800085e:	4770      	bx	lr
 8000860:	24000020 	.word	0x24000020
 8000864:	200045ec 	.word	0x200045ec

08000868 <CaptureUpData>:
/**
 * @brief 捕获下位向上位发送的数据
 * @return UpDataDef 下位机上传的数据结构体
 */
UpDataDef CaptureUpData(void)
{
 8000868:	b5b0      	push	{r4, r5, r7, lr}
 800086a:	b08e      	sub	sp, #56	; 0x38
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	UpDataDef CaptureData;
	CaptureData.CabinNum = (UpDataReceive[1] & 0b0001); //0总控制仓，1PWM控制仓
 8000870:	4b8b      	ldr	r3, [pc, #556]	; (8000aa0 <CaptureUpData+0x238>)
 8000872:	785b      	ldrb	r3, [r3, #1]
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	b2db      	uxtb	r3, r3
 800087a:	723b      	strb	r3, [r7, #8]
	CaptureData.WaterDetect = (UpDataReceive[1] & 0b0110); //2控水；4电水
 800087c:	4b88      	ldr	r3, [pc, #544]	; (8000aa0 <CaptureUpData+0x238>)
 800087e:	785b      	ldrb	r3, [r3, #1]
 8000880:	f003 0306 	and.w	r3, r3, #6
 8000884:	b2db      	uxtb	r3, r3
 8000886:	727b      	strb	r3, [r7, #9]
	CaptureData.CabinTemperature = ((UpDataReceive[3] << 8) | UpDataReceive[2]);
 8000888:	4b85      	ldr	r3, [pc, #532]	; (8000aa0 <CaptureUpData+0x238>)
 800088a:	78db      	ldrb	r3, [r3, #3]
 800088c:	021b      	lsls	r3, r3, #8
 800088e:	b21a      	sxth	r2, r3
 8000890:	4b83      	ldr	r3, [pc, #524]	; (8000aa0 <CaptureUpData+0x238>)
 8000892:	789b      	ldrb	r3, [r3, #2]
 8000894:	b21b      	sxth	r3, r3
 8000896:	4313      	orrs	r3, r2
 8000898:	b21b      	sxth	r3, r3
 800089a:	b29b      	uxth	r3, r3
 800089c:	817b      	strh	r3, [r7, #10]
	CaptureData.CabinBaro = ((UpDataReceive[7] << 24) | (UpDataReceive[6] << 16)
 800089e:	4b80      	ldr	r3, [pc, #512]	; (8000aa0 <CaptureUpData+0x238>)
 80008a0:	79db      	ldrb	r3, [r3, #7]
 80008a2:	061a      	lsls	r2, r3, #24
 80008a4:	4b7e      	ldr	r3, [pc, #504]	; (8000aa0 <CaptureUpData+0x238>)
 80008a6:	799b      	ldrb	r3, [r3, #6]
 80008a8:	041b      	lsls	r3, r3, #16
 80008aa:	431a      	orrs	r2, r3
			| (UpDataReceive[5] << 8) | UpDataReceive[4]);
 80008ac:	4b7c      	ldr	r3, [pc, #496]	; (8000aa0 <CaptureUpData+0x238>)
 80008ae:	795b      	ldrb	r3, [r3, #5]
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	4313      	orrs	r3, r2
 80008b4:	4a7a      	ldr	r2, [pc, #488]	; (8000aa0 <CaptureUpData+0x238>)
 80008b6:	7912      	ldrb	r2, [r2, #4]
 80008b8:	4313      	orrs	r3, r2
	CaptureData.CabinBaro = ((UpDataReceive[7] << 24) | (UpDataReceive[6] << 16)
 80008ba:	60fb      	str	r3, [r7, #12]
	CaptureData.CabinHum = ((UpDataReceive[9] << 8) | UpDataReceive[8]);
 80008bc:	4b78      	ldr	r3, [pc, #480]	; (8000aa0 <CaptureUpData+0x238>)
 80008be:	7a5b      	ldrb	r3, [r3, #9]
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	4b76      	ldr	r3, [pc, #472]	; (8000aa0 <CaptureUpData+0x238>)
 80008c6:	7a1b      	ldrb	r3, [r3, #8]
 80008c8:	b21b      	sxth	r3, r3
 80008ca:	4313      	orrs	r3, r2
 80008cc:	b21b      	sxth	r3, r3
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	823b      	strh	r3, [r7, #16]
	CaptureData.AccNum[0] = ((UpDataReceive[11] << 8) | UpDataReceive[10]);
 80008d2:	4b73      	ldr	r3, [pc, #460]	; (8000aa0 <CaptureUpData+0x238>)
 80008d4:	7adb      	ldrb	r3, [r3, #11]
 80008d6:	021b      	lsls	r3, r3, #8
 80008d8:	b21a      	sxth	r2, r3
 80008da:	4b71      	ldr	r3, [pc, #452]	; (8000aa0 <CaptureUpData+0x238>)
 80008dc:	7a9b      	ldrb	r3, [r3, #10]
 80008de:	b21b      	sxth	r3, r3
 80008e0:	4313      	orrs	r3, r2
 80008e2:	b21b      	sxth	r3, r3
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	827b      	strh	r3, [r7, #18]
	CaptureData.AccNum[1] = ((UpDataReceive[13] << 8) | UpDataReceive[12]);
 80008e8:	4b6d      	ldr	r3, [pc, #436]	; (8000aa0 <CaptureUpData+0x238>)
 80008ea:	7b5b      	ldrb	r3, [r3, #13]
 80008ec:	021b      	lsls	r3, r3, #8
 80008ee:	b21a      	sxth	r2, r3
 80008f0:	4b6b      	ldr	r3, [pc, #428]	; (8000aa0 <CaptureUpData+0x238>)
 80008f2:	7b1b      	ldrb	r3, [r3, #12]
 80008f4:	b21b      	sxth	r3, r3
 80008f6:	4313      	orrs	r3, r2
 80008f8:	b21b      	sxth	r3, r3
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	82bb      	strh	r3, [r7, #20]
	CaptureData.AccNum[2] = ((UpDataReceive[15] << 8) | UpDataReceive[14]);
 80008fe:	4b68      	ldr	r3, [pc, #416]	; (8000aa0 <CaptureUpData+0x238>)
 8000900:	7bdb      	ldrb	r3, [r3, #15]
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	b21a      	sxth	r2, r3
 8000906:	4b66      	ldr	r3, [pc, #408]	; (8000aa0 <CaptureUpData+0x238>)
 8000908:	7b9b      	ldrb	r3, [r3, #14]
 800090a:	b21b      	sxth	r3, r3
 800090c:	4313      	orrs	r3, r2
 800090e:	b21b      	sxth	r3, r3
 8000910:	b29b      	uxth	r3, r3
 8000912:	82fb      	strh	r3, [r7, #22]
	CaptureData.RotNum[0] = ((UpDataReceive[17] << 8) | UpDataReceive[16]);
 8000914:	4b62      	ldr	r3, [pc, #392]	; (8000aa0 <CaptureUpData+0x238>)
 8000916:	7c5b      	ldrb	r3, [r3, #17]
 8000918:	021b      	lsls	r3, r3, #8
 800091a:	b21a      	sxth	r2, r3
 800091c:	4b60      	ldr	r3, [pc, #384]	; (8000aa0 <CaptureUpData+0x238>)
 800091e:	7c1b      	ldrb	r3, [r3, #16]
 8000920:	b21b      	sxth	r3, r3
 8000922:	4313      	orrs	r3, r2
 8000924:	b21b      	sxth	r3, r3
 8000926:	b29b      	uxth	r3, r3
 8000928:	833b      	strh	r3, [r7, #24]
	CaptureData.RotNum[1] = ((UpDataReceive[19] << 8) | UpDataReceive[18]);
 800092a:	4b5d      	ldr	r3, [pc, #372]	; (8000aa0 <CaptureUpData+0x238>)
 800092c:	7cdb      	ldrb	r3, [r3, #19]
 800092e:	021b      	lsls	r3, r3, #8
 8000930:	b21a      	sxth	r2, r3
 8000932:	4b5b      	ldr	r3, [pc, #364]	; (8000aa0 <CaptureUpData+0x238>)
 8000934:	7c9b      	ldrb	r3, [r3, #18]
 8000936:	b21b      	sxth	r3, r3
 8000938:	4313      	orrs	r3, r2
 800093a:	b21b      	sxth	r3, r3
 800093c:	b29b      	uxth	r3, r3
 800093e:	837b      	strh	r3, [r7, #26]
	CaptureData.RotNum[2] = ((UpDataReceive[21] << 8) | UpDataReceive[20]);
 8000940:	4b57      	ldr	r3, [pc, #348]	; (8000aa0 <CaptureUpData+0x238>)
 8000942:	7d5b      	ldrb	r3, [r3, #21]
 8000944:	021b      	lsls	r3, r3, #8
 8000946:	b21a      	sxth	r2, r3
 8000948:	4b55      	ldr	r3, [pc, #340]	; (8000aa0 <CaptureUpData+0x238>)
 800094a:	7d1b      	ldrb	r3, [r3, #20]
 800094c:	b21b      	sxth	r3, r3
 800094e:	4313      	orrs	r3, r2
 8000950:	b21b      	sxth	r3, r3
 8000952:	b29b      	uxth	r3, r3
 8000954:	83bb      	strh	r3, [r7, #28]
	CaptureData.EulNum[0] = ((UpDataReceive[23] << 8) | UpDataReceive[22]);
 8000956:	4b52      	ldr	r3, [pc, #328]	; (8000aa0 <CaptureUpData+0x238>)
 8000958:	7ddb      	ldrb	r3, [r3, #23]
 800095a:	021b      	lsls	r3, r3, #8
 800095c:	b21a      	sxth	r2, r3
 800095e:	4b50      	ldr	r3, [pc, #320]	; (8000aa0 <CaptureUpData+0x238>)
 8000960:	7d9b      	ldrb	r3, [r3, #22]
 8000962:	b21b      	sxth	r3, r3
 8000964:	4313      	orrs	r3, r2
 8000966:	b21b      	sxth	r3, r3
 8000968:	b29b      	uxth	r3, r3
 800096a:	83fb      	strh	r3, [r7, #30]
	CaptureData.EulNum[1] = ((UpDataReceive[25] << 8) | UpDataReceive[24]);
 800096c:	4b4c      	ldr	r3, [pc, #304]	; (8000aa0 <CaptureUpData+0x238>)
 800096e:	7e5b      	ldrb	r3, [r3, #25]
 8000970:	021b      	lsls	r3, r3, #8
 8000972:	b21a      	sxth	r2, r3
 8000974:	4b4a      	ldr	r3, [pc, #296]	; (8000aa0 <CaptureUpData+0x238>)
 8000976:	7e1b      	ldrb	r3, [r3, #24]
 8000978:	b21b      	sxth	r3, r3
 800097a:	4313      	orrs	r3, r2
 800097c:	b21b      	sxth	r3, r3
 800097e:	b29b      	uxth	r3, r3
 8000980:	843b      	strh	r3, [r7, #32]
	CaptureData.EulNum[2] = ((UpDataReceive[27] << 8) | UpDataReceive[26]);
 8000982:	4b47      	ldr	r3, [pc, #284]	; (8000aa0 <CaptureUpData+0x238>)
 8000984:	7edb      	ldrb	r3, [r3, #27]
 8000986:	021b      	lsls	r3, r3, #8
 8000988:	b21a      	sxth	r2, r3
 800098a:	4b45      	ldr	r3, [pc, #276]	; (8000aa0 <CaptureUpData+0x238>)
 800098c:	7e9b      	ldrb	r3, [r3, #26]
 800098e:	b21b      	sxth	r3, r3
 8000990:	4313      	orrs	r3, r2
 8000992:	b21b      	sxth	r3, r3
 8000994:	b29b      	uxth	r3, r3
 8000996:	847b      	strh	r3, [r7, #34]	; 0x22
	CaptureData.MagNum[0] = ((UpDataReceive[29] << 8) | UpDataReceive[28]);
 8000998:	4b41      	ldr	r3, [pc, #260]	; (8000aa0 <CaptureUpData+0x238>)
 800099a:	7f5b      	ldrb	r3, [r3, #29]
 800099c:	021b      	lsls	r3, r3, #8
 800099e:	b21a      	sxth	r2, r3
 80009a0:	4b3f      	ldr	r3, [pc, #252]	; (8000aa0 <CaptureUpData+0x238>)
 80009a2:	7f1b      	ldrb	r3, [r3, #28]
 80009a4:	b21b      	sxth	r3, r3
 80009a6:	4313      	orrs	r3, r2
 80009a8:	b21b      	sxth	r3, r3
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	84bb      	strh	r3, [r7, #36]	; 0x24
	CaptureData.MagNum[1] = ((UpDataReceive[31] << 8) | UpDataReceive[30]);
 80009ae:	4b3c      	ldr	r3, [pc, #240]	; (8000aa0 <CaptureUpData+0x238>)
 80009b0:	7fdb      	ldrb	r3, [r3, #31]
 80009b2:	021b      	lsls	r3, r3, #8
 80009b4:	b21a      	sxth	r2, r3
 80009b6:	4b3a      	ldr	r3, [pc, #232]	; (8000aa0 <CaptureUpData+0x238>)
 80009b8:	7f9b      	ldrb	r3, [r3, #30]
 80009ba:	b21b      	sxth	r3, r3
 80009bc:	4313      	orrs	r3, r2
 80009be:	b21b      	sxth	r3, r3
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	84fb      	strh	r3, [r7, #38]	; 0x26
	CaptureData.MagNum[2] = ((UpDataReceive[33] << 8) | UpDataReceive[32]);
 80009c4:	4b36      	ldr	r3, [pc, #216]	; (8000aa0 <CaptureUpData+0x238>)
 80009c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009ca:	021b      	lsls	r3, r3, #8
 80009cc:	b21a      	sxth	r2, r3
 80009ce:	4b34      	ldr	r3, [pc, #208]	; (8000aa0 <CaptureUpData+0x238>)
 80009d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009d4:	b21b      	sxth	r3, r3
 80009d6:	4313      	orrs	r3, r2
 80009d8:	b21b      	sxth	r3, r3
 80009da:	b29b      	uxth	r3, r3
 80009dc:	853b      	strh	r3, [r7, #40]	; 0x28
	CaptureData.DepthToBottom = ((UpDataReceive[37] << 24)
 80009de:	4b30      	ldr	r3, [pc, #192]	; (8000aa0 <CaptureUpData+0x238>)
 80009e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80009e4:	061a      	lsls	r2, r3, #24
			| (UpDataReceive[36] << 16) | (UpDataReceive[35] << 8)
 80009e6:	4b2e      	ldr	r3, [pc, #184]	; (8000aa0 <CaptureUpData+0x238>)
 80009e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80009ec:	041b      	lsls	r3, r3, #16
 80009ee:	431a      	orrs	r2, r3
 80009f0:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <CaptureUpData+0x238>)
 80009f2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80009f6:	021b      	lsls	r3, r3, #8
 80009f8:	4313      	orrs	r3, r2
			| UpDataReceive[34]);
 80009fa:	4a29      	ldr	r2, [pc, #164]	; (8000aa0 <CaptureUpData+0x238>)
 80009fc:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8000a00:	4313      	orrs	r3, r2
	CaptureData.DepthToBottom = ((UpDataReceive[37] << 24)
 8000a02:	633b      	str	r3, [r7, #48]	; 0x30
	CaptureData.Confidence = ((UpDataReceive[39] << 8) | UpDataReceive[38]);
 8000a04:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <CaptureUpData+0x238>)
 8000a06:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000a0a:	021b      	lsls	r3, r3, #8
 8000a0c:	b21a      	sxth	r2, r3
 8000a0e:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <CaptureUpData+0x238>)
 8000a10:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000a14:	b21b      	sxth	r3, r3
 8000a16:	4313      	orrs	r3, r2
 8000a18:	b21b      	sxth	r3, r3
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	CaptureData.WaterTemperature =
			((UpDataReceive[40] << 8) | UpDataReceive[41]);
 8000a1e:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <CaptureUpData+0x238>)
 8000a20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000a24:	021b      	lsls	r3, r3, #8
 8000a26:	b21a      	sxth	r2, r3
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <CaptureUpData+0x238>)
 8000a2a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000a2e:	b21b      	sxth	r3, r3
 8000a30:	4313      	orrs	r3, r2
 8000a32:	b21b      	sxth	r3, r3
 8000a34:	b29b      	uxth	r3, r3
	CaptureData.WaterTemperature =
 8000a36:	857b      	strh	r3, [r7, #42]	; 0x2a
	CaptureData.WaterDepth = ((UpDataReceive[42] << 8) | UpDataReceive[43]);
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <CaptureUpData+0x238>)
 8000a3a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	b21a      	sxth	r2, r3
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <CaptureUpData+0x238>)
 8000a44:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000a48:	b21b      	sxth	r3, r3
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	b21b      	sxth	r3, r3
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	85bb      	strh	r3, [r7, #44]	; 0x2c
	CaptureData.IdTest = IdTest(UpDataReceive, 1, 44, 28);
 8000a52:	231c      	movs	r3, #28
 8000a54:	222c      	movs	r2, #44	; 0x2c
 8000a56:	2101      	movs	r1, #1
 8000a58:	4811      	ldr	r0, [pc, #68]	; (8000aa0 <CaptureUpData+0x238>)
 8000a5a:	f000 fa0d 	bl	8000e78 <IdTest>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	__HAL_UART_ENABLE_IT(&Down_UART, UART_IT_IDLE);
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <CaptureUpData+0x23c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <CaptureUpData+0x23c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f042 0210 	orr.w	r2, r2, #16
 8000a72:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Down_UART, DownDataReceive, Down_UART_RXLen);
 8000a74:	222f      	movs	r2, #47	; 0x2f
 8000a76:	490c      	ldr	r1, [pc, #48]	; (8000aa8 <CaptureUpData+0x240>)
 8000a78:	480a      	ldr	r0, [pc, #40]	; (8000aa4 <CaptureUpData+0x23c>)
 8000a7a:	f008 ff29 	bl	80098d0 <HAL_UART_Receive_DMA>

	return CaptureData;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	461d      	mov	r5, r3
 8000a82:	f107 0408 	add.w	r4, r7, #8
 8000a86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a8e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a92:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	3738      	adds	r7, #56	; 0x38
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	24000040 	.word	0x24000040
 8000aa4:	200045ec 	.word	0x200045ec
 8000aa8:	24000000 	.word	0x24000000

08000aac <SendUpData>:
/**
 * @brief 向上位机发送数据
 * @param  SendData         待发送的数据结构体
 */
void SendUpData(UpDataDef SendData)
{
 8000aac:	b084      	sub	sp, #16
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	f107 0c08 	add.w	ip, r7, #8
 8000ab6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	UpDataSend[0] = 0x25;
 8000aba:	4b80      	ldr	r3, [pc, #512]	; (8000cbc <SendUpData+0x210>)
 8000abc:	2225      	movs	r2, #37	; 0x25
 8000abe:	701a      	strb	r2, [r3, #0]
	UpDataSend[1] = ((SendData.CabinNum) | (SendData.WaterDetect));
 8000ac0:	7a3a      	ldrb	r2, [r7, #8]
 8000ac2:	7a7b      	ldrb	r3, [r7, #9]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b7c      	ldr	r3, [pc, #496]	; (8000cbc <SendUpData+0x210>)
 8000aca:	705a      	strb	r2, [r3, #1]
	UpDataSend[2] = SendData.CabinTemperature;
 8000acc:	897b      	ldrh	r3, [r7, #10]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b7a      	ldr	r3, [pc, #488]	; (8000cbc <SendUpData+0x210>)
 8000ad2:	709a      	strb	r2, [r3, #2]
	UpDataSend[3] = SendData.CabinTemperature >> 8;
 8000ad4:	897b      	ldrh	r3, [r7, #10]
 8000ad6:	0a1b      	lsrs	r3, r3, #8
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b77      	ldr	r3, [pc, #476]	; (8000cbc <SendUpData+0x210>)
 8000ade:	70da      	strb	r2, [r3, #3]
	UpDataSend[4] = SendData.CabinBaro;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	4b75      	ldr	r3, [pc, #468]	; (8000cbc <SendUpData+0x210>)
 8000ae6:	711a      	strb	r2, [r3, #4]
	UpDataSend[5] = SendData.CabinBaro >> 8;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	0a1b      	lsrs	r3, r3, #8
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b73      	ldr	r3, [pc, #460]	; (8000cbc <SendUpData+0x210>)
 8000af0:	715a      	strb	r2, [r3, #5]
	UpDataSend[6] = SendData.CabinBaro >> 16;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	0c1b      	lsrs	r3, r3, #16
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	4b70      	ldr	r3, [pc, #448]	; (8000cbc <SendUpData+0x210>)
 8000afa:	719a      	strb	r2, [r3, #6]
	UpDataSend[7] = SendData.CabinBaro >> 24;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	0e1b      	lsrs	r3, r3, #24
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4b6e      	ldr	r3, [pc, #440]	; (8000cbc <SendUpData+0x210>)
 8000b04:	71da      	strb	r2, [r3, #7]
	UpDataSend[8] = SendData.CabinHum;
 8000b06:	8a3b      	ldrh	r3, [r7, #16]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4b6c      	ldr	r3, [pc, #432]	; (8000cbc <SendUpData+0x210>)
 8000b0c:	721a      	strb	r2, [r3, #8]
	UpDataSend[9] = SendData.CabinHum >> 8;
 8000b0e:	8a3b      	ldrh	r3, [r7, #16]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4b69      	ldr	r3, [pc, #420]	; (8000cbc <SendUpData+0x210>)
 8000b18:	725a      	strb	r2, [r3, #9]
	UpDataSend[10] = SendData.AccNum[0];
 8000b1a:	8a7b      	ldrh	r3, [r7, #18]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4b67      	ldr	r3, [pc, #412]	; (8000cbc <SendUpData+0x210>)
 8000b20:	729a      	strb	r2, [r3, #10]
	UpDataSend[11] = SendData.AccNum[0] >> 8;
 8000b22:	8a7b      	ldrh	r3, [r7, #18]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b64      	ldr	r3, [pc, #400]	; (8000cbc <SendUpData+0x210>)
 8000b2c:	72da      	strb	r2, [r3, #11]
	UpDataSend[12] = SendData.AccNum[1];
 8000b2e:	8abb      	ldrh	r3, [r7, #20]
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4b62      	ldr	r3, [pc, #392]	; (8000cbc <SendUpData+0x210>)
 8000b34:	731a      	strb	r2, [r3, #12]
	UpDataSend[13] = SendData.AccNum[1] >> 8;
 8000b36:	8abb      	ldrh	r3, [r7, #20]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4b5f      	ldr	r3, [pc, #380]	; (8000cbc <SendUpData+0x210>)
 8000b40:	735a      	strb	r2, [r3, #13]
	UpDataSend[14] = SendData.AccNum[2];
 8000b42:	8afb      	ldrh	r3, [r7, #22]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4b5d      	ldr	r3, [pc, #372]	; (8000cbc <SendUpData+0x210>)
 8000b48:	739a      	strb	r2, [r3, #14]
	UpDataSend[15] = SendData.AccNum[2] >> 8;
 8000b4a:	8afb      	ldrh	r3, [r7, #22]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4b5a      	ldr	r3, [pc, #360]	; (8000cbc <SendUpData+0x210>)
 8000b54:	73da      	strb	r2, [r3, #15]
	UpDataSend[16] = SendData.RotNum[0];
 8000b56:	8b3b      	ldrh	r3, [r7, #24]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4b58      	ldr	r3, [pc, #352]	; (8000cbc <SendUpData+0x210>)
 8000b5c:	741a      	strb	r2, [r3, #16]
	UpDataSend[17] = SendData.RotNum[0] >> 8;
 8000b5e:	8b3b      	ldrh	r3, [r7, #24]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4b55      	ldr	r3, [pc, #340]	; (8000cbc <SendUpData+0x210>)
 8000b68:	745a      	strb	r2, [r3, #17]
	UpDataSend[18] = SendData.RotNum[1];
 8000b6a:	8b7b      	ldrh	r3, [r7, #26]
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4b53      	ldr	r3, [pc, #332]	; (8000cbc <SendUpData+0x210>)
 8000b70:	749a      	strb	r2, [r3, #18]
	UpDataSend[19] = SendData.RotNum[1] >> 8;
 8000b72:	8b7b      	ldrh	r3, [r7, #26]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4b50      	ldr	r3, [pc, #320]	; (8000cbc <SendUpData+0x210>)
 8000b7c:	74da      	strb	r2, [r3, #19]
	UpDataSend[20] = SendData.RotNum[2];
 8000b7e:	8bbb      	ldrh	r3, [r7, #28]
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4b4e      	ldr	r3, [pc, #312]	; (8000cbc <SendUpData+0x210>)
 8000b84:	751a      	strb	r2, [r3, #20]
	UpDataSend[21] = SendData.RotNum[2] >> 8;
 8000b86:	8bbb      	ldrh	r3, [r7, #28]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4b4b      	ldr	r3, [pc, #300]	; (8000cbc <SendUpData+0x210>)
 8000b90:	755a      	strb	r2, [r3, #21]
	UpDataSend[22] = SendData.EulNum[0];
 8000b92:	8bfb      	ldrh	r3, [r7, #30]
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4b49      	ldr	r3, [pc, #292]	; (8000cbc <SendUpData+0x210>)
 8000b98:	759a      	strb	r2, [r3, #22]
	UpDataSend[23] = SendData.EulNum[0] >> 8;
 8000b9a:	8bfb      	ldrh	r3, [r7, #30]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b46      	ldr	r3, [pc, #280]	; (8000cbc <SendUpData+0x210>)
 8000ba4:	75da      	strb	r2, [r3, #23]
	UpDataSend[24] = SendData.EulNum[1];
 8000ba6:	8c3b      	ldrh	r3, [r7, #32]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b44      	ldr	r3, [pc, #272]	; (8000cbc <SendUpData+0x210>)
 8000bac:	761a      	strb	r2, [r3, #24]
	UpDataSend[25] = SendData.EulNum[1] >> 8;
 8000bae:	8c3b      	ldrh	r3, [r7, #32]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4b41      	ldr	r3, [pc, #260]	; (8000cbc <SendUpData+0x210>)
 8000bb8:	765a      	strb	r2, [r3, #25]
	UpDataSend[26] = SendData.EulNum[2];
 8000bba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4b3f      	ldr	r3, [pc, #252]	; (8000cbc <SendUpData+0x210>)
 8000bc0:	769a      	strb	r2, [r3, #26]
	UpDataSend[27] = SendData.EulNum[2] >> 8;
 8000bc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4b3c      	ldr	r3, [pc, #240]	; (8000cbc <SendUpData+0x210>)
 8000bcc:	76da      	strb	r2, [r3, #27]
	UpDataSend[28] = SendData.MagNum[0];
 8000bce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b3a      	ldr	r3, [pc, #232]	; (8000cbc <SendUpData+0x210>)
 8000bd4:	771a      	strb	r2, [r3, #28]
	UpDataSend[29] = SendData.MagNum[0] >> 8;
 8000bd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4b37      	ldr	r3, [pc, #220]	; (8000cbc <SendUpData+0x210>)
 8000be0:	775a      	strb	r2, [r3, #29]
	UpDataSend[30] = SendData.MagNum[1];
 8000be2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b35      	ldr	r3, [pc, #212]	; (8000cbc <SendUpData+0x210>)
 8000be8:	779a      	strb	r2, [r3, #30]
	UpDataSend[31] = SendData.MagNum[1] >> 8;
 8000bea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4b32      	ldr	r3, [pc, #200]	; (8000cbc <SendUpData+0x210>)
 8000bf4:	77da      	strb	r2, [r3, #31]
	UpDataSend[32] = SendData.MagNum[2];
 8000bf6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b30      	ldr	r3, [pc, #192]	; (8000cbc <SendUpData+0x210>)
 8000bfc:	f883 2020 	strb.w	r2, [r3, #32]
	UpDataSend[33] = SendData.MagNum[2] >> 8;
 8000c00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c02:	0a1b      	lsrs	r3, r3, #8
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	4b2c      	ldr	r3, [pc, #176]	; (8000cbc <SendUpData+0x210>)
 8000c0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	UpDataSend[34] = SendData.DepthToBottom;
 8000c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <SendUpData+0x210>)
 8000c14:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	UpDataSend[35] = SendData.DepthToBottom >> 8;
 8000c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c1a:	0a1b      	lsrs	r3, r3, #8
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <SendUpData+0x210>)
 8000c20:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	UpDataSend[36] = SendData.DepthToBottom >> 16;
 8000c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c26:	0c1b      	lsrs	r3, r3, #16
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <SendUpData+0x210>)
 8000c2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	UpDataSend[37] = SendData.DepthToBottom >> 24;
 8000c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c32:	0e1b      	lsrs	r3, r3, #24
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <SendUpData+0x210>)
 8000c38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UpDataSend[38] = SendData.Confidence;
 8000c3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <SendUpData+0x210>)
 8000c42:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	UpDataSend[39] = SendData.Confidence >> 8;
 8000c46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c48:	0a1b      	lsrs	r3, r3, #8
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <SendUpData+0x210>)
 8000c50:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	UpDataSend[40] = SendData.WaterTemperature;
 8000c54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <SendUpData+0x210>)
 8000c5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	UpDataSend[41] = SendData.WaterTemperature >> 8;
 8000c5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <SendUpData+0x210>)
 8000c68:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	UpDataSend[42] = SendData.WaterDepth;
 8000c6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <SendUpData+0x210>)
 8000c72:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	UpDataSend[43] = SendData.WaterDepth >> 8;
 8000c76:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <SendUpData+0x210>)
 8000c80:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	UpDataSend[44] = XorCaculate(UpDataSend, 38);
 8000c84:	2126      	movs	r1, #38	; 0x26
 8000c86:	480d      	ldr	r0, [pc, #52]	; (8000cbc <SendUpData+0x210>)
 8000c88:	f000 f90a 	bl	8000ea0 <XorCaculate>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <SendUpData+0x210>)
 8000c92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	UpDataSend[45] = 0xff;
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <SendUpData+0x210>)
 8000c98:	22ff      	movs	r2, #255	; 0xff
 8000c9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	UpDataSend[46] = 0xff;
 8000c9e:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <SendUpData+0x210>)
 8000ca0:	22ff      	movs	r2, #255	; 0xff
 8000ca2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	HAL_UART_Transmit_DMA(&Up_UART, UpDataSend, Up_UART_TXLen);
 8000ca6:	222f      	movs	r2, #47	; 0x2f
 8000ca8:	4904      	ldr	r1, [pc, #16]	; (8000cbc <SendUpData+0x210>)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <SendUpData+0x214>)
 8000cac:	f008 fd90 	bl	80097d0 <HAL_UART_Transmit_DMA>
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr
 8000cbc:	24000070 	.word	0x24000070
 8000cc0:	200044d0 	.word	0x200044d0

08000cc4 <SpecialMovePID>:
 * @param  SetValue         目标值
 * @param  ActualValue      当前值
 * @return u16 位置PID数据
 */
u16 SpecialMovePID(u8 ModeType, u16 SetValue, u16 ActualValue)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b08d      	sub	sp, #52	; 0x34
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
 8000cce:	460b      	mov	r3, r1
 8000cd0:	80bb      	strh	r3, [r7, #4]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	807b      	strh	r3, [r7, #2]
	//累计积分位置
	static float LocSum;
	//数据清空标志位
	static u8 PIDData = 0;

	if (ModeType == 4)
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2b04      	cmp	r3, #4
 8000cda:	d151      	bne.n	8000d80 <SpecialMovePID+0xbc>
	{
		PIDData = 0;
 8000cdc:	4b5d      	ldr	r3, [pc, #372]	; (8000e54 <SpecialMovePID+0x190>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
		u16 PIDLoc;
		Ek = (float) (SetValue - ActualValue);
 8000ce2:	88ba      	ldrh	r2, [r7, #4]
 8000ce4:	887b      	ldrh	r3, [r7, #2]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	ee07 3a90 	vmov	s15, r3
 8000cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf0:	4b59      	ldr	r3, [pc, #356]	; (8000e58 <SpecialMovePID+0x194>)
 8000cf2:	edc3 7a00 	vstr	s15, [r3]
		LocSum += Ek;
 8000cf6:	4b59      	ldr	r3, [pc, #356]	; (8000e5c <SpecialMovePID+0x198>)
 8000cf8:	ed93 7a00 	vldr	s14, [r3]
 8000cfc:	4b56      	ldr	r3, [pc, #344]	; (8000e58 <SpecialMovePID+0x194>)
 8000cfe:	edd3 7a00 	vldr	s15, [r3]
 8000d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d06:	4b55      	ldr	r3, [pc, #340]	; (8000e5c <SpecialMovePID+0x198>)
 8000d08:	edc3 7a00 	vstr	s15, [r3]
		PIDLoc =
				(u16) (1500
						+ BASICCTRL_RANGE(
 8000d0c:	4b52      	ldr	r3, [pc, #328]	; (8000e58 <SpecialMovePID+0x194>)
 8000d0e:	edd3 7a00 	vldr	s15, [r3]
 8000d12:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8000e60 <SpecialMovePID+0x19c>
 8000d16:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d1a:	4b50      	ldr	r3, [pc, #320]	; (8000e5c <SpecialMovePID+0x198>)
 8000d1c:	edd3 7a00 	vldr	s15, [r3]
 8000d20:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d28:	4b4e      	ldr	r3, [pc, #312]	; (8000e64 <SpecialMovePID+0x1a0>)
 8000d2a:	edd3 6a00 	vldr	s13, [r3]
 8000d2e:	4b4a      	ldr	r3, [pc, #296]	; (8000e58 <SpecialMovePID+0x194>)
 8000d30:	edd3 7a00 	vldr	s15, [r3]
 8000d34:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000d38:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8000e68 <SpecialMovePID+0x1a4>
 8000d3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d48:	ee17 3a90 	vmov	r3, s15
 8000d4c:	b21b      	sxth	r3, r3
 8000d4e:	847b      	strh	r3, [r7, #34]	; 0x22
 8000d50:	4b46      	ldr	r3, [pc, #280]	; (8000e6c <SpecialMovePID+0x1a8>)
 8000d52:	61fb      	str	r3, [r7, #28]
 8000d54:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000d58:	461a      	mov	r2, r3
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	bfb8      	it	lt
 8000d60:	4613      	movlt	r3, r2
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
 8000d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	bfa8      	it	ge
 8000d72:	4613      	movge	r3, r2
				(u16) (1500
 8000d74:	b29b      	uxth	r3, r3
		PIDLoc =
 8000d76:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000d7a:	85bb      	strh	r3, [r7, #44]	; 0x2c
								(int16_t) (PID_D_Kp * Ek + (PID_D_Ki * LocSum) + PID_D_Kd * (Ek1 - Ek)),
								-1000, 1000));
		return PIDLoc;
 8000d7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000d7e:	e062      	b.n	8000e46 <SpecialMovePID+0x182>
	}
	else if (ModeType == 2)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d14f      	bne.n	8000e26 <SpecialMovePID+0x162>
	{
		PIDData = 0;
 8000d86:	4b33      	ldr	r3, [pc, #204]	; (8000e54 <SpecialMovePID+0x190>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
		u16 PIDLoc;
		Ek = (float) (SetValue - ActualValue);
 8000d8c:	88ba      	ldrh	r2, [r7, #4]
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	ee07 3a90 	vmov	s15, r3
 8000d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d9a:	4b2f      	ldr	r3, [pc, #188]	; (8000e58 <SpecialMovePID+0x194>)
 8000d9c:	edc3 7a00 	vstr	s15, [r3]
		LocSum += Ek;
 8000da0:	4b2e      	ldr	r3, [pc, #184]	; (8000e5c <SpecialMovePID+0x198>)
 8000da2:	ed93 7a00 	vldr	s14, [r3]
 8000da6:	4b2c      	ldr	r3, [pc, #176]	; (8000e58 <SpecialMovePID+0x194>)
 8000da8:	edd3 7a00 	vldr	s15, [r3]
 8000dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000db0:	4b2a      	ldr	r3, [pc, #168]	; (8000e5c <SpecialMovePID+0x198>)
 8000db2:	edc3 7a00 	vstr	s15, [r3]
		PIDLoc =
				(u16) (1500
						+ BASICCTRL_RANGE(
 8000db6:	4b28      	ldr	r3, [pc, #160]	; (8000e58 <SpecialMovePID+0x194>)
 8000db8:	edd3 7a00 	vldr	s15, [r3]
 8000dbc:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000e70 <SpecialMovePID+0x1ac>
 8000dc0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000dc4:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <SpecialMovePID+0x198>)
 8000dc6:	edd3 7a00 	vldr	s15, [r3]
 8000dca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dce:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <SpecialMovePID+0x1a0>)
 8000dd0:	edd3 6a00 	vldr	s13, [r3]
 8000dd4:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <SpecialMovePID+0x194>)
 8000dd6:	edd3 7a00 	vldr	s15, [r3]
 8000dda:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000dde:	eddf 6a25 	vldr	s13, [pc, #148]	; 8000e74 <SpecialMovePID+0x1b0>
 8000de2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000de6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dee:	ee17 3a90 	vmov	r3, s15
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	827b      	strh	r3, [r7, #18]
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <SpecialMovePID+0x1a8>)
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4293      	cmp	r3, r2
 8000e04:	bfb8      	it	lt
 8000e06:	4613      	movlt	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
 8000e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	4293      	cmp	r3, r2
 8000e16:	bfa8      	it	ge
 8000e18:	4613      	movge	r3, r2
				(u16) (1500
 8000e1a:	b29b      	uxth	r3, r3
		PIDLoc =
 8000e1c:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000e20:	85fb      	strh	r3, [r7, #46]	; 0x2e
								(int16_t) (PID_O_Kp * Ek + (PID_O_Ki * LocSum) + PID_O_Kd * (Ek1 - Ek)),
								-1000, 1000));
		return PIDLoc;
 8000e22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e24:	e00f      	b.n	8000e46 <SpecialMovePID+0x182>
	}
	else
	{
		if (!PIDData)
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <SpecialMovePID+0x190>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d10a      	bne.n	8000e44 <SpecialMovePID+0x180>
		{
			PIDData = 1;
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <SpecialMovePID+0x190>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	701a      	strb	r2, [r3, #0]
			Ek = 0;
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <SpecialMovePID+0x194>)
 8000e36:	f04f 0200 	mov.w	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
			LocSum = 0;
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <SpecialMovePID+0x198>)
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
		}
		return 0;
 8000e44:	2300      	movs	r3, #0
	}
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3734      	adds	r7, #52	; 0x34
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000030 	.word	0x20000030
 8000e58:	20000034 	.word	0x20000034
 8000e5c:	20000038 	.word	0x20000038
 8000e60:	43480000 	.word	0x43480000
 8000e64:	2000003c 	.word	0x2000003c
 8000e68:	43960000 	.word	0x43960000
 8000e6c:	fffffc18 	.word	0xfffffc18
 8000e70:	42c80000 	.word	0x42c80000
 8000e74:	43160000 	.word	0x43160000

08000e78 <IdTest>:
 * @param  SendUpLength     上传数据长度
 * @param  SendDownLength   下传指令长度
 * @return u8 正确为1；错误为0，如果不开启奇偶校验默认为1
 */
static u8 IdTest(u8 *String, u8 Format, u8 SendUpLength, u8 SendDownLength)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	4608      	mov	r0, r1
 8000e82:	4611      	mov	r1, r2
 8000e84:	461a      	mov	r2, r3
 8000e86:	4603      	mov	r3, r0
 8000e88:	70fb      	strb	r3, [r7, #3]
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	70bb      	strb	r3, [r7, #2]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	707b      	strb	r3, [r7, #1]
			return 0;
		}
	}
	return 1;
#else
	return 1; //不开启奇偶校验时默认成功
 8000e92:	2301      	movs	r3, #1
#endif
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <XorCaculate>:
 * @param  CacString        待校验数据
 * @param  CacStringSize    待校验数据长度
 * @return u8 异或运算结果，如果不开启数据校验则默认返回0
 */
static u8 XorCaculate(u8 *CacString, u8 CacStringSize)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	70fb      	strb	r3, [r7, #3]
	{
		CacResult ^= CacString[i];
	}
	return CacResult;
#else
	return 0;
 8000eac:	2300      	movs	r3, #0
#endif
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <InitGY39>:

/**
 * @brief GY39温湿度大气压传感器初始化
 */
void InitGY39(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	GY39Send[0] = 0xa5;
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <InitGY39+0x24>)
 8000ec2:	22a5      	movs	r2, #165	; 0xa5
 8000ec4:	701a      	strb	r2, [r3, #0]
	GY39Send[1] = 0x82;
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <InitGY39+0x24>)
 8000ec8:	2282      	movs	r2, #130	; 0x82
 8000eca:	705a      	strb	r2, [r3, #1]
	GY39Send[2] = 0x27;
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <InitGY39+0x24>)
 8000ece:	2227      	movs	r2, #39	; 0x27
 8000ed0:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_DMA(&GY39_UART, GY39Send, GY39_UART_TXLen);
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	4902      	ldr	r1, [pc, #8]	; (8000ee0 <InitGY39+0x24>)
 8000ed6:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <InitGY39+0x28>)
 8000ed8:	f008 fc7a 	bl	80097d0 <HAL_UART_Transmit_DMA>
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	240000dc 	.word	0x240000dc
 8000ee4:	20004718 	.word	0x20004718

08000ee8 <ReceiveGY39>:
/**
 * @brief 接收GY39温湿度大气压传感器数据
 * @return GY39Data GY39传感器数据接收结构体
 */
GY39Data ReceiveGY39(void)
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	GY39Data RevGY39;

	RevGY39.Temperature = ((GY39Receive[3] << 8) | GY39Receive[2]);
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <ReceiveGY39+0x84>)
 8000ef2:	78db      	ldrb	r3, [r3, #3]
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	b21a      	sxth	r2, r3
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <ReceiveGY39+0x84>)
 8000efa:	789b      	ldrb	r3, [r3, #2]
 8000efc:	b21b      	sxth	r3, r3
 8000efe:	4313      	orrs	r3, r2
 8000f00:	b21b      	sxth	r3, r3
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	81bb      	strh	r3, [r7, #12]
	RevGY39.Baro = ((GY39Receive[7] << 24) | (GY39Receive[6] << 16)
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <ReceiveGY39+0x84>)
 8000f08:	79db      	ldrb	r3, [r3, #7]
 8000f0a:	061a      	lsls	r2, r3, #24
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <ReceiveGY39+0x84>)
 8000f0e:	799b      	ldrb	r3, [r3, #6]
 8000f10:	041b      	lsls	r3, r3, #16
 8000f12:	431a      	orrs	r2, r3
			| (GY39Receive[5] << 8) | GY39Receive[4]);
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <ReceiveGY39+0x84>)
 8000f16:	795b      	ldrb	r3, [r3, #5]
 8000f18:	021b      	lsls	r3, r3, #8
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <ReceiveGY39+0x84>)
 8000f1e:	7912      	ldrb	r2, [r2, #4]
 8000f20:	4313      	orrs	r3, r2
	RevGY39.Baro = ((GY39Receive[7] << 24) | (GY39Receive[6] << 16)
 8000f22:	613b      	str	r3, [r7, #16]
	RevGY39.Hum = ((GY39Receive[9] << 8) | GY39Receive[8]);
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <ReceiveGY39+0x84>)
 8000f26:	7a5b      	ldrb	r3, [r3, #9]
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	b21a      	sxth	r2, r3
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <ReceiveGY39+0x84>)
 8000f2e:	7a1b      	ldrb	r3, [r3, #8]
 8000f30:	b21b      	sxth	r3, r3
 8000f32:	4313      	orrs	r3, r2
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	82bb      	strh	r3, [r7, #20]

	__HAL_UART_ENABLE_IT(&GY39_UART, UART_IT_IDLE);
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <ReceiveGY39+0x88>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <ReceiveGY39+0x88>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f042 0210 	orr.w	r2, r2, #16
 8000f48:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&GY39_UART, GY39Receive, GY39_UART_RXLen);
 8000f4a:	2212      	movs	r2, #18
 8000f4c:	4907      	ldr	r1, [pc, #28]	; (8000f6c <ReceiveGY39+0x84>)
 8000f4e:	4808      	ldr	r0, [pc, #32]	; (8000f70 <ReceiveGY39+0x88>)
 8000f50:	f008 fcbe 	bl	80098d0 <HAL_UART_Receive_DMA>

	return RevGY39;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	461c      	mov	r4, r3
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	371c      	adds	r7, #28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd90      	pop	{r4, r7, pc}
 8000f6c:	240000e0 	.word	0x240000e0
 8000f70:	20004718 	.word	0x20004718

08000f74 <ReceiveWT931>:
/**
 * @brief 接收WT931九轴传感器数据
 * @return WT931Data WT931九轴传感器数据结构体
 */
WT931Data ReceiveWT931(void)
{
 8000f74:	b5b0      	push	{r4, r5, r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	WT931Data RevWT931;

	RevWT931.AccNum[0] = ((WT931Receive[3] << 8) | WT931Receive[2]);
 8000f7c:	4b53      	ldr	r3, [pc, #332]	; (80010cc <ReceiveWT931+0x158>)
 8000f7e:	78db      	ldrb	r3, [r3, #3]
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	b21a      	sxth	r2, r3
 8000f84:	4b51      	ldr	r3, [pc, #324]	; (80010cc <ReceiveWT931+0x158>)
 8000f86:	789b      	ldrb	r3, [r3, #2]
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	813b      	strh	r3, [r7, #8]
	RevWT931.AccNum[1] = ((WT931Receive[5] << 8) | WT931Receive[4]);
 8000f92:	4b4e      	ldr	r3, [pc, #312]	; (80010cc <ReceiveWT931+0x158>)
 8000f94:	795b      	ldrb	r3, [r3, #5]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	4b4c      	ldr	r3, [pc, #304]	; (80010cc <ReceiveWT931+0x158>)
 8000f9c:	791b      	ldrb	r3, [r3, #4]
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	817b      	strh	r3, [r7, #10]
	RevWT931.AccNum[2] = ((WT931Receive[7] << 8) | WT931Receive[6]);
 8000fa8:	4b48      	ldr	r3, [pc, #288]	; (80010cc <ReceiveWT931+0x158>)
 8000faa:	79db      	ldrb	r3, [r3, #7]
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	4b46      	ldr	r3, [pc, #280]	; (80010cc <ReceiveWT931+0x158>)
 8000fb2:	799b      	ldrb	r3, [r3, #6]
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	81bb      	strh	r3, [r7, #12]
	RevWT931.RotNum[0] = ((WT931Receive[14] << 8) | WT931Receive[13]);
 8000fbe:	4b43      	ldr	r3, [pc, #268]	; (80010cc <ReceiveWT931+0x158>)
 8000fc0:	7b9b      	ldrb	r3, [r3, #14]
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	4b41      	ldr	r3, [pc, #260]	; (80010cc <ReceiveWT931+0x158>)
 8000fc8:	7b5b      	ldrb	r3, [r3, #13]
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	81fb      	strh	r3, [r7, #14]
	RevWT931.RotNum[1] = ((WT931Receive[16] << 8) | WT931Receive[15]);
 8000fd4:	4b3d      	ldr	r3, [pc, #244]	; (80010cc <ReceiveWT931+0x158>)
 8000fd6:	7c1b      	ldrb	r3, [r3, #16]
 8000fd8:	021b      	lsls	r3, r3, #8
 8000fda:	b21a      	sxth	r2, r3
 8000fdc:	4b3b      	ldr	r3, [pc, #236]	; (80010cc <ReceiveWT931+0x158>)
 8000fde:	7bdb      	ldrb	r3, [r3, #15]
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	823b      	strh	r3, [r7, #16]
	RevWT931.RotNum[2] = ((WT931Receive[18] << 8) | WT931Receive[17]);
 8000fea:	4b38      	ldr	r3, [pc, #224]	; (80010cc <ReceiveWT931+0x158>)
 8000fec:	7c9b      	ldrb	r3, [r3, #18]
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	4b36      	ldr	r3, [pc, #216]	; (80010cc <ReceiveWT931+0x158>)
 8000ff4:	7c5b      	ldrb	r3, [r3, #17]
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	827b      	strh	r3, [r7, #18]
	RevWT931.EulNum[0] = ((WT931Receive[25] << 8) | WT931Receive[24]);
 8001000:	4b32      	ldr	r3, [pc, #200]	; (80010cc <ReceiveWT931+0x158>)
 8001002:	7e5b      	ldrb	r3, [r3, #25]
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	b21a      	sxth	r2, r3
 8001008:	4b30      	ldr	r3, [pc, #192]	; (80010cc <ReceiveWT931+0x158>)
 800100a:	7e1b      	ldrb	r3, [r3, #24]
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b21b      	sxth	r3, r3
 8001012:	b29b      	uxth	r3, r3
 8001014:	82bb      	strh	r3, [r7, #20]
	RevWT931.EulNum[1] = ((WT931Receive[27] << 8) | WT931Receive[26]);
 8001016:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <ReceiveWT931+0x158>)
 8001018:	7edb      	ldrb	r3, [r3, #27]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	b21a      	sxth	r2, r3
 800101e:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <ReceiveWT931+0x158>)
 8001020:	7e9b      	ldrb	r3, [r3, #26]
 8001022:	b21b      	sxth	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	b21b      	sxth	r3, r3
 8001028:	b29b      	uxth	r3, r3
 800102a:	82fb      	strh	r3, [r7, #22]
	RevWT931.EulNum[2] = ((WT931Receive[29] << 8) | WT931Receive[28]);
 800102c:	4b27      	ldr	r3, [pc, #156]	; (80010cc <ReceiveWT931+0x158>)
 800102e:	7f5b      	ldrb	r3, [r3, #29]
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	b21a      	sxth	r2, r3
 8001034:	4b25      	ldr	r3, [pc, #148]	; (80010cc <ReceiveWT931+0x158>)
 8001036:	7f1b      	ldrb	r3, [r3, #28]
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b21b      	sxth	r3, r3
 800103e:	b29b      	uxth	r3, r3
 8001040:	833b      	strh	r3, [r7, #24]
	RevWT931.MagNum[0] = ((WT931Receive[36] << 8) | WT931Receive[35]);
 8001042:	4b22      	ldr	r3, [pc, #136]	; (80010cc <ReceiveWT931+0x158>)
 8001044:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	b21a      	sxth	r2, r3
 800104c:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <ReceiveWT931+0x158>)
 800104e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001052:	b21b      	sxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b21b      	sxth	r3, r3
 8001058:	b29b      	uxth	r3, r3
 800105a:	837b      	strh	r3, [r7, #26]
	RevWT931.MagNum[1] = ((WT931Receive[38] << 8) | WT931Receive[37]);
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <ReceiveWT931+0x158>)
 800105e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b21a      	sxth	r2, r3
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <ReceiveWT931+0x158>)
 8001068:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21b      	sxth	r3, r3
 8001072:	b29b      	uxth	r3, r3
 8001074:	83bb      	strh	r3, [r7, #28]
	RevWT931.MagNum[2] = ((WT931Receive[40] << 8) | WT931Receive[39]);
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <ReceiveWT931+0x158>)
 8001078:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b21a      	sxth	r2, r3
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <ReceiveWT931+0x158>)
 8001082:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001086:	b21b      	sxth	r3, r3
 8001088:	4313      	orrs	r3, r2
 800108a:	b21b      	sxth	r3, r3
 800108c:	b29b      	uxth	r3, r3
 800108e:	83fb      	strh	r3, [r7, #30]

	__HAL_UART_ENABLE_IT(&WT931_UART, UART_IT_IDLE);
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <ReceiveWT931+0x15c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <ReceiveWT931+0x15c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f042 0210 	orr.w	r2, r2, #16
 800109e:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&WT931_UART, WT931Receive, WT931_UART_RXLen);
 80010a0:	223c      	movs	r2, #60	; 0x3c
 80010a2:	490a      	ldr	r1, [pc, #40]	; (80010cc <ReceiveWT931+0x158>)
 80010a4:	480a      	ldr	r0, [pc, #40]	; (80010d0 <ReceiveWT931+0x15c>)
 80010a6:	f008 fc13 	bl	80098d0 <HAL_UART_Receive_DMA>

	return RevWT931;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	461d      	mov	r5, r3
 80010ae:	f107 0408 	add.w	r4, r7, #8
 80010b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b4:	6028      	str	r0, [r5, #0]
 80010b6:	6069      	str	r1, [r5, #4]
 80010b8:	60aa      	str	r2, [r5, #8]
 80010ba:	60eb      	str	r3, [r5, #12]
 80010bc:	cc03      	ldmia	r4!, {r0, r1}
 80010be:	6128      	str	r0, [r5, #16]
 80010c0:	6169      	str	r1, [r5, #20]
}
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	3720      	adds	r7, #32
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bdb0      	pop	{r4, r5, r7, pc}
 80010ca:	bf00      	nop
 80010cc:	240000a0 	.word	0x240000a0
 80010d0:	2000416c 	.word	0x2000416c

080010d4 <ReceiveDeep>:
/**
 * @brief 接收水深水温传感器数据
 * @return DeepData 水深水温传感器数据结构体
 */
DeepData ReceiveDeep(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
	DeepData RevDeep;

	RevDeep.WaterDepth = ((DeepReceive[1] << 8) | DeepReceive[0]);
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <ReceiveDeep+0x68>)
 80010dc:	785b      	ldrb	r3, [r3, #1]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <ReceiveDeep+0x68>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	807b      	strh	r3, [r7, #2]
	RevDeep.WaterTemperature = ((DeepReceive[3] << 8) | DeepReceive[2]);
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <ReceiveDeep+0x68>)
 80010f2:	78db      	ldrb	r3, [r3, #3]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <ReceiveDeep+0x68>)
 80010fa:	789b      	ldrb	r3, [r3, #2]
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	4313      	orrs	r3, r2
 8001100:	b21b      	sxth	r3, r3
 8001102:	b29b      	uxth	r3, r3
 8001104:	803b      	strh	r3, [r7, #0]

	__HAL_UART_ENABLE_IT(&Deep_UART, UART_IT_IDLE);
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <ReceiveDeep+0x6c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <ReceiveDeep+0x6c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f042 0210 	orr.w	r2, r2, #16
 8001114:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Deep_UART, DeepReceive, Deep_UART_RXLen);
 8001116:	2204      	movs	r2, #4
 8001118:	4908      	ldr	r1, [pc, #32]	; (800113c <ReceiveDeep+0x68>)
 800111a:	4809      	ldr	r0, [pc, #36]	; (8001140 <ReceiveDeep+0x6c>)
 800111c:	f008 fbd8 	bl	80098d0 <HAL_UART_Receive_DMA>
	return RevDeep;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	2300      	movs	r3, #0
 8001126:	88ba      	ldrh	r2, [r7, #4]
 8001128:	f362 030f 	bfi	r3, r2, #0, #16
 800112c:	88fa      	ldrh	r2, [r7, #6]
 800112e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	240000f4 	.word	0x240000f4
 8001140:	20004680 	.word	0x20004680

08001144 <InitP30>:

/**
 * @brief 声呐传感器初始化
 */
void InitP30(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	//42 52 02 00 78 05 00 00 BB 04 D2 01
	P30Send[0] = 0x42;
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <InitP30+0x5c>)
 800114a:	2242      	movs	r2, #66	; 0x42
 800114c:	701a      	strb	r2, [r3, #0]
	P30Send[1] = 0x52;
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <InitP30+0x5c>)
 8001150:	2252      	movs	r2, #82	; 0x52
 8001152:	705a      	strb	r2, [r3, #1]
	P30Send[2] = 0x02;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <InitP30+0x5c>)
 8001156:	2202      	movs	r2, #2
 8001158:	709a      	strb	r2, [r3, #2]
	P30Send[3] = 0x00;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <InitP30+0x5c>)
 800115c:	2200      	movs	r2, #0
 800115e:	70da      	strb	r2, [r3, #3]
	P30Send[4] = 0x05;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <InitP30+0x5c>)
 8001162:	2205      	movs	r2, #5
 8001164:	711a      	strb	r2, [r3, #4]
	P30Send[5] = 0x00;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <InitP30+0x5c>)
 8001168:	2200      	movs	r2, #0
 800116a:	715a      	strb	r2, [r3, #5]
	P30Send[6] = 0x00;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <InitP30+0x5c>)
 800116e:	2200      	movs	r2, #0
 8001170:	719a      	strb	r2, [r3, #6]
	P30Send[7] = 0x00;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <InitP30+0x5c>)
 8001174:	2200      	movs	r2, #0
 8001176:	71da      	strb	r2, [r3, #7]
	P30Send[8] = 0xBB;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <InitP30+0x5c>)
 800117a:	22bb      	movs	r2, #187	; 0xbb
 800117c:	721a      	strb	r2, [r3, #8]
	P30Send[9] = 0x04;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <InitP30+0x5c>)
 8001180:	2204      	movs	r2, #4
 8001182:	725a      	strb	r2, [r3, #9]
	P30Send[10] = 0xD2;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <InitP30+0x5c>)
 8001186:	22d2      	movs	r2, #210	; 0xd2
 8001188:	729a      	strb	r2, [r3, #10]
	P30Send[11] = 0x01;
 800118a:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <InitP30+0x5c>)
 800118c:	2201      	movs	r2, #1
 800118e:	72da      	strb	r2, [r3, #11]

	HAL_UART_Transmit_DMA(&GP30_UART, P30Send, P30_UART_TXLen);
 8001190:	220c      	movs	r2, #12
 8001192:	4903      	ldr	r1, [pc, #12]	; (80011a0 <InitP30+0x5c>)
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <InitP30+0x60>)
 8001196:	f008 fb1b 	bl	80097d0 <HAL_UART_Transmit_DMA>
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	240000f8 	.word	0x240000f8
 80011a4:	200042d4 	.word	0x200042d4

080011a8 <ReceiveP30>:
/**
 * @brief 接收声呐传感器数据
 * @return P30Data 声呐传感器数据结构体
 */
P30Data ReceiveP30(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	P30Data RevP30;

	uint8_t FrameState = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	77fb      	strb	r3, [r7, #31]
	uint8_t Bytenum = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	77bb      	strb	r3, [r7, #30]
	uint8_t CheckSum = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	777b      	strb	r3, [r7, #29]
	uint8_t datahex[11];

	for (uint8_t i = 0; i < 33; i++)
 80011bc:	2300      	movs	r3, #0
 80011be:	773b      	strb	r3, [r7, #28]
 80011c0:	e069      	b.n	8001296 <ReceiveP30+0xee>
	{
		if (FrameState == 0)
 80011c2:	7ffb      	ldrb	r3, [r7, #31]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d121      	bne.n	800120c <ReceiveP30+0x64>
		{
			if ((P30Receive[i] == 0x42) && (Bytenum == 0))
 80011c8:	7f3b      	ldrb	r3, [r7, #28]
 80011ca:	4a41      	ldr	r2, [pc, #260]	; (80012d0 <ReceiveP30+0x128>)
 80011cc:	5cd3      	ldrb	r3, [r2, r3]
 80011ce:	2b42      	cmp	r3, #66	; 0x42
 80011d0:	d109      	bne.n	80011e6 <ReceiveP30+0x3e>
 80011d2:	7fbb      	ldrb	r3, [r7, #30]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d106      	bne.n	80011e6 <ReceiveP30+0x3e>
			{
				CheckSum = P30Receive[i];
 80011d8:	7f3b      	ldrb	r3, [r7, #28]
 80011da:	4a3d      	ldr	r2, [pc, #244]	; (80012d0 <ReceiveP30+0x128>)
 80011dc:	5cd3      	ldrb	r3, [r2, r3]
 80011de:	777b      	strb	r3, [r7, #29]
				Bytenum = 1;
 80011e0:	2301      	movs	r3, #1
 80011e2:	77bb      	strb	r3, [r7, #30]
				continue;
 80011e4:	e054      	b.n	8001290 <ReceiveP30+0xe8>
			}
			else if ((P30Receive[i] == 0x52) && (Bytenum == 1))
 80011e6:	7f3b      	ldrb	r3, [r7, #28]
 80011e8:	4a39      	ldr	r2, [pc, #228]	; (80012d0 <ReceiveP30+0x128>)
 80011ea:	5cd3      	ldrb	r3, [r2, r3]
 80011ec:	2b52      	cmp	r3, #82	; 0x52
 80011ee:	d14f      	bne.n	8001290 <ReceiveP30+0xe8>
 80011f0:	7fbb      	ldrb	r3, [r7, #30]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d14c      	bne.n	8001290 <ReceiveP30+0xe8>
			{
				CheckSum += P30Receive[i];
 80011f6:	7f3b      	ldrb	r3, [r7, #28]
 80011f8:	4a35      	ldr	r2, [pc, #212]	; (80012d0 <ReceiveP30+0x128>)
 80011fa:	5cd2      	ldrb	r2, [r2, r3]
 80011fc:	7f7b      	ldrb	r3, [r7, #29]
 80011fe:	4413      	add	r3, r2
 8001200:	777b      	strb	r3, [r7, #29]
				Bytenum = 2;
 8001202:	2302      	movs	r3, #2
 8001204:	77bb      	strb	r3, [r7, #30]
				FrameState = 1;
 8001206:	2301      	movs	r3, #1
 8001208:	77fb      	strb	r3, [r7, #31]
				continue;
 800120a:	e041      	b.n	8001290 <ReceiveP30+0xe8>
			}
		}
		else if (FrameState == 1)
 800120c:	7ffb      	ldrb	r3, [r7, #31]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d13e      	bne.n	8001290 <ReceiveP30+0xe8>
		{
			if (Bytenum < 13)
 8001212:	7fbb      	ldrb	r3, [r7, #30]
 8001214:	2b0c      	cmp	r3, #12
 8001216:	d813      	bhi.n	8001240 <ReceiveP30+0x98>
			{
				datahex[Bytenum - 2] = P30Receive[i];
 8001218:	7f3a      	ldrb	r2, [r7, #28]
 800121a:	7fbb      	ldrb	r3, [r7, #30]
 800121c:	3b02      	subs	r3, #2
 800121e:	492c      	ldr	r1, [pc, #176]	; (80012d0 <ReceiveP30+0x128>)
 8001220:	5c8a      	ldrb	r2, [r1, r2]
 8001222:	f107 0120 	add.w	r1, r7, #32
 8001226:	440b      	add	r3, r1
 8001228:	f803 2c18 	strb.w	r2, [r3, #-24]
				CheckSum += P30Receive[i];
 800122c:	7f3b      	ldrb	r3, [r7, #28]
 800122e:	4a28      	ldr	r2, [pc, #160]	; (80012d0 <ReceiveP30+0x128>)
 8001230:	5cd2      	ldrb	r2, [r2, r3]
 8001232:	7f7b      	ldrb	r3, [r7, #29]
 8001234:	4413      	add	r3, r2
 8001236:	777b      	strb	r3, [r7, #29]
				Bytenum++;
 8001238:	7fbb      	ldrb	r3, [r7, #30]
 800123a:	3301      	adds	r3, #1
 800123c:	77bb      	strb	r3, [r7, #30]
 800123e:	e027      	b.n	8001290 <ReceiveP30+0xe8>
			}
			else
			{
				if (P30Receive[i] == (CheckSum & 0xFF))
 8001240:	7f3b      	ldrb	r3, [r7, #28]
 8001242:	4a23      	ldr	r2, [pc, #140]	; (80012d0 <ReceiveP30+0x128>)
 8001244:	5cd3      	ldrb	r3, [r2, r3]
 8001246:	7f7a      	ldrb	r2, [r7, #29]
 8001248:	429a      	cmp	r2, r3
 800124a:	d11b      	bne.n	8001284 <ReceiveP30+0xdc>
				{
					RevP30.Confidence = datahex[10];
 800124c:	7cbb      	ldrb	r3, [r7, #18]
 800124e:	b29b      	uxth	r3, r3
 8001250:	833b      	strh	r3, [r7, #24]
					RevP30.DepthToBottom = (float) ((datahex[6] | datahex[7]
 8001252:	7bba      	ldrb	r2, [r7, #14]
 8001254:	7bfb      	ldrb	r3, [r7, #15]
							| datahex[8] | datahex[9]) / 1000);
 8001256:	4313      	orrs	r3, r2
 8001258:	b2da      	uxtb	r2, r3
 800125a:	7c3b      	ldrb	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	b2da      	uxtb	r2, r3
 8001260:	7c7b      	ldrb	r3, [r7, #17]
 8001262:	4313      	orrs	r3, r2
 8001264:	b2db      	uxtb	r3, r3
 8001266:	4a1b      	ldr	r2, [pc, #108]	; (80012d4 <ReceiveP30+0x12c>)
 8001268:	fb82 1203 	smull	r1, r2, r2, r3
 800126c:	1192      	asrs	r2, r2, #6
 800126e:	17db      	asrs	r3, r3, #31
 8001270:	1ad3      	subs	r3, r2, r3
					RevP30.DepthToBottom = (float) ((datahex[6] | datahex[7]
 8001272:	ee07 3a90 	vmov	s15, r3
 8001276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800127a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800127e:	ee17 3a90 	vmov	r3, s15
 8001282:	617b      	str	r3, [r7, #20]
				}
				CheckSum = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	777b      	strb	r3, [r7, #29]
				Bytenum = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	77bb      	strb	r3, [r7, #30]
				FrameState = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	77fb      	strb	r3, [r7, #31]
	for (uint8_t i = 0; i < 33; i++)
 8001290:	7f3b      	ldrb	r3, [r7, #28]
 8001292:	3301      	adds	r3, #1
 8001294:	773b      	strb	r3, [r7, #28]
 8001296:	7f3b      	ldrb	r3, [r7, #28]
 8001298:	2b20      	cmp	r3, #32
 800129a:	d992      	bls.n	80011c2 <ReceiveP30+0x1a>
			}
		}
	}

	__HAL_UART_ENABLE_IT(&GP30_UART, UART_IT_IDLE);
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <ReceiveP30+0x130>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <ReceiveP30+0x130>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0210 	orr.w	r2, r2, #16
 80012aa:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&GP30_UART, P30Receive, P30_UART_RXLen);
 80012ac:	2221      	movs	r2, #33	; 0x21
 80012ae:	4908      	ldr	r1, [pc, #32]	; (80012d0 <ReceiveP30+0x128>)
 80012b0:	4809      	ldr	r0, [pc, #36]	; (80012d8 <ReceiveP30+0x130>)
 80012b2:	f008 fb0d 	bl	80098d0 <HAL_UART_Receive_DMA>

	return RevP30;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	461a      	mov	r2, r3
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012c2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	3720      	adds	r7, #32
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	24000104 	.word	0x24000104
 80012d4:	10624dd3 	.word	0x10624dd3
 80012d8:	200042d4 	.word	0x200042d4

080012dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4a07      	ldr	r2, [pc, #28]	; (8001308 <vApplicationGetIdleTaskMemory+0x2c>)
 80012ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	4a06      	ldr	r2, [pc, #24]	; (800130c <vApplicationGetIdleTaskMemory+0x30>)
 80012f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2280      	movs	r2, #128	; 0x80
 80012f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012fa:	bf00      	nop
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000040 	.word	0x20000040
 800130c:	20000094 	.word	0x20000094

08001310 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b0b6      	sub	sp, #216	; 0xd8
 8001314:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001316:	f002 f9f1 	bl	80036fc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800131a:	f000 f963 	bl	80015e4 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 800131e:	f000 f9e7 	bl	80016f0 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001322:	f000 fc77 	bl	8001c14 <MX_GPIO_Init>
	MX_DMA_Init();
 8001326:	f000 fbf5 	bl	8001b14 <MX_DMA_Init>
	MX_IWDG1_Init();
 800132a:	f000 fa0d 	bl	8001748 <MX_IWDG1_Init>
	MX_USART1_UART_Init();
 800132e:	f000 fb0d 	bl	800194c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001332:	f000 fb57 	bl	80019e4 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001336:	f000 fba1 	bl	8001a7c <MX_USART3_UART_Init>
	MX_UART4_Init();
 800133a:	f000 fa23 	bl	8001784 <MX_UART4_Init>
	MX_UART8_Init();
 800133e:	f000 fab9 	bl	80018b4 <MX_UART8_Init>
	MX_UART5_Init();
 8001342:	f000 fa6b 	bl	800181c <MX_UART5_Init>
	/* USER CODE BEGIN 2 */
	HAL_IWDG_Refresh(&hiwdg1);
 8001346:	4890      	ldr	r0, [pc, #576]	; (8001588 <main+0x278>)
 8001348:	f005 fb96 	bl	8006a78 <HAL_IWDG_Refresh>
	//初始化下位机

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	2110      	movs	r1, #16
 8001350:	488e      	ldr	r0, [pc, #568]	; (800158c <main+0x27c>)
 8001352:	f005 fb29 	bl	80069a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8001356:	2201      	movs	r2, #1
 8001358:	2110      	movs	r1, #16
 800135a:	488c      	ldr	r0, [pc, #560]	; (800158c <main+0x27c>)
 800135c:	f005 fb24 	bl	80069a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	2110      	movs	r1, #16
 8001364:	4889      	ldr	r0, [pc, #548]	; (800158c <main+0x27c>)
 8001366:	f005 fb1f 	bl	80069a8 <HAL_GPIO_WritePin>
	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of UptoBaseDataRWFlag */
	osMutexDef(UptoBaseDataRWFlag);
 800136a:	2300      	movs	r3, #0
 800136c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001370:	2300      	movs	r3, #0
 8001372:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	UptoBaseDataRWFlagHandle = osMutexCreate(osMutex(UptoBaseDataRWFlag));
 8001376:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800137a:	4618      	mov	r0, r3
 800137c:	f00a f88f 	bl	800b49e <osMutexCreate>
 8001380:	4603      	mov	r3, r0
 8001382:	4a83      	ldr	r2, [pc, #524]	; (8001590 <main+0x280>)
 8001384:	6013      	str	r3, [r2, #0]

	/* definition and creation of BasetoUpDataRWFlag */
	osMutexDef(BasetoUpDataRWFlag);
 8001386:	2300      	movs	r3, #0
 8001388:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	BasetoUpDataRWFlagHandle = osMutexCreate(osMutex(BasetoUpDataRWFlag));
 8001392:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001396:	4618      	mov	r0, r3
 8001398:	f00a f881 	bl	800b49e <osMutexCreate>
 800139c:	4603      	mov	r3, r0
 800139e:	4a7d      	ldr	r2, [pc, #500]	; (8001594 <main+0x284>)
 80013a0:	6013      	str	r3, [r2, #0]

	/* definition and creation of WT931SensorDataRWFlag */
	osMutexDef(WT931SensorDataRWFlag);
 80013a2:	2300      	movs	r3, #0
 80013a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	WT931SensorDataRWFlagHandle = osMutexCreate(osMutex(WT931SensorDataRWFlag));
 80013ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f00a f873 	bl	800b49e <osMutexCreate>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4a77      	ldr	r2, [pc, #476]	; (8001598 <main+0x288>)
 80013bc:	6013      	str	r3, [r2, #0]

	/* definition and creation of GY39SensorDataRWFlag */
	osMutexDef(GY39SensorDataRWFlag);
 80013be:	2300      	movs	r3, #0
 80013c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80013c4:	2300      	movs	r3, #0
 80013c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	GY39SensorDataRWFlagHandle = osMutexCreate(osMutex(GY39SensorDataRWFlag));
 80013ca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00a f865 	bl	800b49e <osMutexCreate>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4a71      	ldr	r2, [pc, #452]	; (800159c <main+0x28c>)
 80013d8:	6013      	str	r3, [r2, #0]

	/* definition and creation of DeepSensorDataRWFlag */
	osMutexDef(DeepSensorDataRWFlag);
 80013da:	2300      	movs	r3, #0
 80013dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	DeepSensorDataRWFlagHandle = osMutexCreate(osMutex(DeepSensorDataRWFlag));
 80013e6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f00a f857 	bl	800b49e <osMutexCreate>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4a6b      	ldr	r2, [pc, #428]	; (80015a0 <main+0x290>)
 80013f4:	6013      	str	r3, [r2, #0]

	/* definition and creation of BaseControlEnableFlag */
	osMutexDef(BaseControlEnableFlag);
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	BaseControlEnableFlagHandle = osMutexCreate(osMutex(BaseControlEnableFlag));
 8001402:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001406:	4618      	mov	r0, r3
 8001408:	f00a f849 	bl	800b49e <osMutexCreate>
 800140c:	4603      	mov	r3, r0
 800140e:	4a65      	ldr	r2, [pc, #404]	; (80015a4 <main+0x294>)
 8001410:	6013      	str	r3, [r2, #0]

	/* definition and creation of P30SensorDataRWFlag */
	osMutexDef(P30SensorDataRWFlag);
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	P30SensorDataRWFlagHandle = osMutexCreate(osMutex(P30SensorDataRWFlag));
 800141e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001422:	4618      	mov	r0, r3
 8001424:	f00a f83b 	bl	800b49e <osMutexCreate>
 8001428:	4603      	mov	r3, r0
 800142a:	4a5f      	ldr	r2, [pc, #380]	; (80015a8 <main+0x298>)
 800142c:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_MUTEX */
	HAL_IWDG_Refresh(&hiwdg1);
 800142e:	4856      	ldr	r0, [pc, #344]	; (8001588 <main+0x278>)
 8001430:	f005 fb22 	bl	8006a78 <HAL_IWDG_Refresh>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of UptoBaseTransFinish */
	osSemaphoreDef(UptoBaseTransFinish);
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	UptoBaseTransFinishHandle = osSemaphoreCreate(
 8001440:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001444:	2101      	movs	r1, #1
 8001446:	4618      	mov	r0, r3
 8001448:	f00a f841 	bl	800b4ce <osSemaphoreCreate>
 800144c:	4603      	mov	r3, r0
 800144e:	4a57      	ldr	r2, [pc, #348]	; (80015ac <main+0x29c>)
 8001450:	6013      	str	r3, [r2, #0]
			osSemaphore(UptoBaseTransFinish), 1);

	/* definition and creation of WT931TransFinish */
	osSemaphoreDef(WT931TransFinish);
 8001452:	2300      	movs	r3, #0
 8001454:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001458:	2300      	movs	r3, #0
 800145a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	WT931TransFinishHandle = osSemaphoreCreate(osSemaphore(WT931TransFinish),
 800145e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001462:	2101      	movs	r1, #1
 8001464:	4618      	mov	r0, r3
 8001466:	f00a f832 	bl	800b4ce <osSemaphoreCreate>
 800146a:	4603      	mov	r3, r0
 800146c:	4a50      	ldr	r2, [pc, #320]	; (80015b0 <main+0x2a0>)
 800146e:	6013      	str	r3, [r2, #0]
			1);

	/* definition and creation of GY39TransFinish */
	osSemaphoreDef(GY39TransFinish);
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	GY39TransFinishHandle = osSemaphoreCreate(osSemaphore(GY39TransFinish), 1);
 800147c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001480:	2101      	movs	r1, #1
 8001482:	4618      	mov	r0, r3
 8001484:	f00a f823 	bl	800b4ce <osSemaphoreCreate>
 8001488:	4603      	mov	r3, r0
 800148a:	4a4a      	ldr	r2, [pc, #296]	; (80015b4 <main+0x2a4>)
 800148c:	6013      	str	r3, [r2, #0]

	/* definition and creation of BasetoUpTransFinishHandle */
	osSemaphoreDef(BasetoUpTransFinishHandle);
 800148e:	2300      	movs	r3, #0
 8001490:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	BasetoUpTransFinishHandleHandle = osSemaphoreCreate(
 800149a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800149e:	2101      	movs	r1, #1
 80014a0:	4618      	mov	r0, r3
 80014a2:	f00a f814 	bl	800b4ce <osSemaphoreCreate>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4a43      	ldr	r2, [pc, #268]	; (80015b8 <main+0x2a8>)
 80014aa:	6013      	str	r3, [r2, #0]
			osSemaphore(BasetoUpTransFinishHandle), 1);

	/* definition and creation of DeepTransFinishHandle */
	osSemaphoreDef(DeepTransFinishHandle);
 80014ac:	2300      	movs	r3, #0
 80014ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80014b0:	2300      	movs	r3, #0
 80014b2:	67fb      	str	r3, [r7, #124]	; 0x7c
	DeepTransFinishHandleHandle = osSemaphoreCreate(
 80014b4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80014b8:	2101      	movs	r1, #1
 80014ba:	4618      	mov	r0, r3
 80014bc:	f00a f807 	bl	800b4ce <osSemaphoreCreate>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4a3e      	ldr	r2, [pc, #248]	; (80015bc <main+0x2ac>)
 80014c4:	6013      	str	r3, [r2, #0]
			osSemaphore(DeepTransFinishHandle), 1);

	/* definition and creation of P30TransFinish */
	osSemaphoreDef(P30TransFinish);
 80014c6:	2300      	movs	r3, #0
 80014c8:	673b      	str	r3, [r7, #112]	; 0x70
 80014ca:	2300      	movs	r3, #0
 80014cc:	677b      	str	r3, [r7, #116]	; 0x74
	P30TransFinishHandle = osSemaphoreCreate(osSemaphore(P30TransFinish), 1);
 80014ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014d2:	2101      	movs	r1, #1
 80014d4:	4618      	mov	r0, r3
 80014d6:	f009 fffa 	bl	800b4ce <osSemaphoreCreate>
 80014da:	4603      	mov	r3, r0
 80014dc:	4a38      	ldr	r2, [pc, #224]	; (80015c0 <main+0x2b0>)
 80014de:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_SEMAPHORES */
	HAL_IWDG_Refresh(&hiwdg1);
 80014e0:	4829      	ldr	r0, [pc, #164]	; (8001588 <main+0x278>)
 80014e2:	f005 fac9 	bl	8006a78 <HAL_IWDG_Refresh>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of CtrlTask */
	osThreadDef(CtrlTask, CtrlTaskF, osPriorityNormal, 0, 128);
 80014e6:	4b37      	ldr	r3, [pc, #220]	; (80015c4 <main+0x2b4>)
 80014e8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80014ec:	461d      	mov	r5, r3
 80014ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CtrlTaskHandle = osThreadCreate(osThread(CtrlTask), NULL);
 80014fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f009 ff6c 	bl	800b3de <osThreadCreate>
 8001506:	4603      	mov	r3, r0
 8001508:	4a2f      	ldr	r2, [pc, #188]	; (80015c8 <main+0x2b8>)
 800150a:	6013      	str	r3, [r2, #0]

	/* definition and creation of SensorTask */
	osThreadDef(SensorTask, SensorTaskF, osPriorityNormal, 0, 128);
 800150c:	4b2f      	ldr	r3, [pc, #188]	; (80015cc <main+0x2bc>)
 800150e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001512:	461d      	mov	r5, r3
 8001514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001518:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800151c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	SensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 8001520:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f009 ff59 	bl	800b3de <osThreadCreate>
 800152c:	4603      	mov	r3, r0
 800152e:	4a28      	ldr	r2, [pc, #160]	; (80015d0 <main+0x2c0>)
 8001530:	6013      	str	r3, [r2, #0]

	/* definition and creation of UptoBaseTask */
	osThreadDef(UptoBaseTask, UtBF, osPriorityNormal, 0, 128);
 8001532:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <main+0x2c4>)
 8001534:	f107 041c 	add.w	r4, r7, #28
 8001538:	461d      	mov	r5, r3
 800153a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800153c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800153e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001542:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	UptoBaseTaskHandle = osThreadCreate(osThread(UptoBaseTask), NULL);
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f009 ff46 	bl	800b3de <osThreadCreate>
 8001552:	4603      	mov	r3, r0
 8001554:	4a20      	ldr	r2, [pc, #128]	; (80015d8 <main+0x2c8>)
 8001556:	6013      	str	r3, [r2, #0]

	/* definition and creation of BasetoUpTask */
	osThreadDef(BasetoUpTask, BtUF, osPriorityNormal, 0, 128);
 8001558:	4b20      	ldr	r3, [pc, #128]	; (80015dc <main+0x2cc>)
 800155a:	463c      	mov	r4, r7
 800155c:	461d      	mov	r5, r3
 800155e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001562:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001566:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	BasetoUpTaskHandle = osThreadCreate(osThread(BasetoUpTask), NULL);
 800156a:	463b      	mov	r3, r7
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f009 ff35 	bl	800b3de <osThreadCreate>
 8001574:	4603      	mov	r3, r0
 8001576:	4a1a      	ldr	r2, [pc, #104]	; (80015e0 <main+0x2d0>)
 8001578:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	HAL_IWDG_Refresh(&hiwdg1);
 800157a:	4803      	ldr	r0, [pc, #12]	; (8001588 <main+0x278>)
 800157c:	f005 fa7c 	bl	8006a78 <HAL_IWDG_Refresh>
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8001580:	f009 ff26 	bl	800b3d0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001584:	e7fe      	b.n	8001584 <main+0x274>
 8001586:	bf00      	nop
 8001588:	200040e4 	.word	0x200040e4
 800158c:	58021000 	.word	0x58021000
 8001590:	20004560 	.word	0x20004560
 8001594:	20004828 	.word	0x20004828
 8001598:	20004364 	.word	0x20004364
 800159c:	2000423c 	.word	0x2000423c
 80015a0:	20004200 	.word	0x20004200
 80015a4:	20004258 	.word	0x20004258
 80015a8:	200041fc 	.word	0x200041fc
 80015ac:	20003fec 	.word	0x20003fec
 80015b0:	20004920 	.word	0x20004920
 80015b4:	20004204 	.word	0x20004204
 80015b8:	200045e8 	.word	0x200045e8
 80015bc:	2000482c 	.word	0x2000482c
 80015c0:	20003fe8 	.word	0x20003fe8
 80015c4:	0800d9e0 	.word	0x0800d9e0
 80015c8:	20004208 	.word	0x20004208
 80015cc:	0800d9fc 	.word	0x0800d9fc
 80015d0:	20003ff0 	.word	0x20003ff0
 80015d4:	0800da18 	.word	0x0800da18
 80015d8:	20004710 	.word	0x20004710
 80015dc:	0800da34 	.word	0x0800da34
 80015e0:	20004714 	.word	0x20004714

080015e4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b09c      	sub	sp, #112	; 0x70
 80015e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80015ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ee:	224c      	movs	r2, #76	; 0x4c
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f00c f9c4 	bl	800d980 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2220      	movs	r2, #32
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f00c f9be 	bl	800d980 <memset>
	{ 0 };

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001604:	2002      	movs	r0, #2
 8001606:	f005 fa47 	bl	8006a98 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800160a:	2300      	movs	r3, #0
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	4b35      	ldr	r3, [pc, #212]	; (80016e4 <SystemClock_Config+0x100>)
 8001610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001612:	4a34      	ldr	r2, [pc, #208]	; (80016e4 <SystemClock_Config+0x100>)
 8001614:	f023 0301 	bic.w	r3, r3, #1
 8001618:	62d3      	str	r3, [r2, #44]	; 0x2c
 800161a:	4b32      	ldr	r3, [pc, #200]	; (80016e4 <SystemClock_Config+0x100>)
 800161c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	4b30      	ldr	r3, [pc, #192]	; (80016e8 <SystemClock_Config+0x104>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a2f      	ldr	r2, [pc, #188]	; (80016e8 <SystemClock_Config+0x104>)
 800162a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <SystemClock_Config+0x104>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 800163c:	bf00      	nop
 800163e:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <SystemClock_Config+0x104>)
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800164a:	d1f8      	bne.n	800163e <SystemClock_Config+0x5a>
	{
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800164c:	4b27      	ldr	r3, [pc, #156]	; (80016ec <SystemClock_Config+0x108>)
 800164e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001650:	f023 0303 	bic.w	r3, r3, #3
 8001654:	4a25      	ldr	r2, [pc, #148]	; (80016ec <SystemClock_Config+0x108>)
 8001656:	f043 0302 	orr.w	r3, r3, #2
 800165a:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 800165c:	2309      	movs	r3, #9
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001666:	2301      	movs	r3, #1
 8001668:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166a:	2302      	movs	r3, #2
 800166c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800166e:	2302      	movs	r3, #2
 8001670:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 8001672:	2305      	movs	r3, #5
 8001674:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 160;
 8001676:	23a0      	movs	r3, #160	; 0xa0
 8001678:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 800167a:	2302      	movs	r3, #2
 800167c:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800167e:	2302      	movs	r3, #2
 8001680:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001682:	2302      	movs	r3, #2
 8001684:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001686:	2308      	movs	r3, #8
 8001688:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800168a:	2300      	movs	r3, #0
 800168c:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001696:	4618      	mov	r0, r3
 8001698:	f005 fa38 	bl	8006b0c <HAL_RCC_OscConfig>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80016a2:	f000 fe95 	bl	80023d0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80016a6:	233f      	movs	r3, #63	; 0x3f
 80016a8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016aa:	2303      	movs	r3, #3
 80016ac:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80016b2:	2308      	movs	r3, #8
 80016b4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016b6:	2340      	movs	r3, #64	; 0x40
 80016b8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016ba:	2340      	movs	r3, #64	; 0x40
 80016bc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c2:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80016c4:	2340      	movs	r3, #64	; 0x40
 80016c6:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	2102      	movs	r1, #2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f005 fe2d 	bl	800732c <HAL_RCC_ClockConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <SystemClock_Config+0xf8>
	{
		Error_Handler();
 80016d8:	f000 fe7a 	bl	80023d0 <Error_Handler>
	}
}
 80016dc:	bf00      	nop
 80016de:	3770      	adds	r7, #112	; 0x70
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	58000400 	.word	0x58000400
 80016e8:	58024800 	.word	0x58024800
 80016ec:	58024400 	.word	0x58024400

080016f0 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b0b0      	sub	sp, #192	; 0xc0
 80016f4:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	22bc      	movs	r2, #188	; 0xbc
 80016fa:	2100      	movs	r1, #0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f00c f93f 	bl	800d980 <memset>
	{ 0 };

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5
 8001702:	2303      	movs	r3, #3
 8001704:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_UART8 | RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_UART4
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3;
	PeriphClkInitStruct.PLL3.PLL3M = 25;
 8001706:	2319      	movs	r3, #25
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLL3.PLL3N = 192;
 800170a:	23c0      	movs	r3, #192	; 0xc0
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLL3.PLL3P = 2;
 800170e:	2302      	movs	r3, #2
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001712:	2302      	movs	r3, #2
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001716:	2302      	movs	r3, #2
 8001718:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800171a:	2300      	movs	r3, #0
 800171c:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800171e:	2300      	movs	r3, #0
 8001720:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInitStruct.Usart234578ClockSelection =
 8001726:	2302      	movs	r3, #2
 8001728:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_USART234578CLKSOURCE_PLL3;
	PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 800172a:	2310      	movs	r3, #16
 800172c:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	4618      	mov	r0, r3
 8001732:	f006 f9c9 	bl	8007ac8 <HAL_RCCEx_PeriphCLKConfig>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <PeriphCommonClock_Config+0x50>
	{
		Error_Handler();
 800173c:	f000 fe48 	bl	80023d0 <Error_Handler>
	}
}
 8001740:	bf00      	nop
 8001742:	37c0      	adds	r7, #192	; 0xc0
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <MX_IWDG1_Init>:
 * @brief IWDG1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG1_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
	/* USER CODE END IWDG1_Init 0 */

	/* USER CODE BEGIN IWDG1_Init 1 */

	/* USER CODE END IWDG1_Init 1 */
	hiwdg1.Instance = IWDG1;
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <MX_IWDG1_Init+0x34>)
 800174e:	4a0c      	ldr	r2, [pc, #48]	; (8001780 <MX_IWDG1_Init+0x38>)
 8001750:	601a      	str	r2, [r3, #0]
	hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <MX_IWDG1_Init+0x34>)
 8001754:	2200      	movs	r2, #0
 8001756:	605a      	str	r2, [r3, #4]
	hiwdg1.Init.Window = 4095;
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <MX_IWDG1_Init+0x34>)
 800175a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800175e:	60da      	str	r2, [r3, #12]
	hiwdg1.Init.Reload = 4095;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <MX_IWDG1_Init+0x34>)
 8001762:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001766:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8001768:	4804      	ldr	r0, [pc, #16]	; (800177c <MX_IWDG1_Init+0x34>)
 800176a:	f005 f936 	bl	80069da <HAL_IWDG_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_IWDG1_Init+0x30>
	{
		Error_Handler();
 8001774:	f000 fe2c 	bl	80023d0 <Error_Handler>
	}
	/* USER CODE BEGIN IWDG1_Init 2 */

	/* USER CODE END IWDG1_Init 2 */

}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	200040e4 	.word	0x200040e4
 8001780:	58004800 	.word	0x58004800

08001784 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001788:	4b22      	ldr	r3, [pc, #136]	; (8001814 <MX_UART4_Init+0x90>)
 800178a:	4a23      	ldr	r2, [pc, #140]	; (8001818 <MX_UART4_Init+0x94>)
 800178c:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 921600;
 800178e:	4b21      	ldr	r3, [pc, #132]	; (8001814 <MX_UART4_Init+0x90>)
 8001790:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001794:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001796:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <MX_UART4_Init+0x90>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 800179c:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <MX_UART4_Init+0x90>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80017a2:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <MX_UART4_Init+0x90>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80017a8:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <MX_UART4_Init+0x90>)
 80017aa:	220c      	movs	r2, #12
 80017ac:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ae:	4b19      	ldr	r3, [pc, #100]	; (8001814 <MX_UART4_Init+0x90>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b4:	4b17      	ldr	r3, [pc, #92]	; (8001814 <MX_UART4_Init+0x90>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <MX_UART4_Init+0x90>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017c0:	4b14      	ldr	r3, [pc, #80]	; (8001814 <MX_UART4_Init+0x90>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <MX_UART4_Init+0x90>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK)
 80017cc:	4811      	ldr	r0, [pc, #68]	; (8001814 <MX_UART4_Init+0x90>)
 80017ce:	f007 ffaf 	bl	8009730 <HAL_UART_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_UART4_Init+0x58>
	{
		Error_Handler();
 80017d8:	f000 fdfa 	bl	80023d0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 80017dc:	2100      	movs	r1, #0
 80017de:	480d      	ldr	r0, [pc, #52]	; (8001814 <MX_UART4_Init+0x90>)
 80017e0:	f009 fd14 	bl	800b20c <HAL_UARTEx_SetTxFifoThreshold>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_UART4_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 80017ea:	f000 fdf1 	bl	80023d0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 80017ee:	2100      	movs	r1, #0
 80017f0:	4808      	ldr	r0, [pc, #32]	; (8001814 <MX_UART4_Init+0x90>)
 80017f2:	f009 fd49 	bl	800b288 <HAL_UARTEx_SetRxFifoThreshold>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_UART4_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 80017fc:	f000 fde8 	bl	80023d0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001800:	4804      	ldr	r0, [pc, #16]	; (8001814 <MX_UART4_Init+0x90>)
 8001802:	f009 fcca 	bl	800b19a <HAL_UARTEx_DisableFifoMode>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_UART4_Init+0x8c>
	{
		Error_Handler();
 800180c:	f000 fde0 	bl	80023d0 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20004680 	.word	0x20004680
 8001818:	40004c00 	.word	0x40004c00

0800181c <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8001820:	4b22      	ldr	r3, [pc, #136]	; (80018ac <MX_UART5_Init+0x90>)
 8001822:	4a23      	ldr	r2, [pc, #140]	; (80018b0 <MX_UART5_Init+0x94>)
 8001824:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8001826:	4b21      	ldr	r3, [pc, #132]	; (80018ac <MX_UART5_Init+0x90>)
 8001828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800182c:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800182e:	4b1f      	ldr	r3, [pc, #124]	; (80018ac <MX_UART5_Init+0x90>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001834:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <MX_UART5_Init+0x90>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 800183a:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <MX_UART5_Init+0x90>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001840:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <MX_UART5_Init+0x90>)
 8001842:	220c      	movs	r2, #12
 8001844:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001846:	4b19      	ldr	r3, [pc, #100]	; (80018ac <MX_UART5_Init+0x90>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800184c:	4b17      	ldr	r3, [pc, #92]	; (80018ac <MX_UART5_Init+0x90>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001852:	4b16      	ldr	r3, [pc, #88]	; (80018ac <MX_UART5_Init+0x90>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
	huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <MX_UART5_Init+0x90>)
 800185a:	2200      	movs	r2, #0
 800185c:	625a      	str	r2, [r3, #36]	; 0x24
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <MX_UART5_Init+0x90>)
 8001860:	2200      	movs	r2, #0
 8001862:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart5) != HAL_OK)
 8001864:	4811      	ldr	r0, [pc, #68]	; (80018ac <MX_UART5_Init+0x90>)
 8001866:	f007 ff63 	bl	8009730 <HAL_UART_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_UART5_Init+0x58>
	{
		Error_Handler();
 8001870:	f000 fdae 	bl	80023d0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8)
 8001874:	2100      	movs	r1, #0
 8001876:	480d      	ldr	r0, [pc, #52]	; (80018ac <MX_UART5_Init+0x90>)
 8001878:	f009 fcc8 	bl	800b20c <HAL_UARTEx_SetTxFifoThreshold>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_UART5_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 8001882:	f000 fda5 	bl	80023d0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8)
 8001886:	2100      	movs	r1, #0
 8001888:	4808      	ldr	r0, [pc, #32]	; (80018ac <MX_UART5_Init+0x90>)
 800188a:	f009 fcfd 	bl	800b288 <HAL_UARTEx_SetRxFifoThreshold>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_UART5_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001894:	f000 fd9c 	bl	80023d0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001898:	4804      	ldr	r0, [pc, #16]	; (80018ac <MX_UART5_Init+0x90>)
 800189a:	f009 fc7e 	bl	800b19a <HAL_UARTEx_DisableFifoMode>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_UART5_Init+0x8c>
	{
		Error_Handler();
 80018a4:	f000 fd94 	bl	80023d0 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	200042d4 	.word	0x200042d4
 80018b0:	40005000 	.word	0x40005000

080018b4 <MX_UART8_Init>:
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 80018b8:	4b22      	ldr	r3, [pc, #136]	; (8001944 <MX_UART8_Init+0x90>)
 80018ba:	4a23      	ldr	r2, [pc, #140]	; (8001948 <MX_UART8_Init+0x94>)
 80018bc:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 80018be:	4b21      	ldr	r3, [pc, #132]	; (8001944 <MX_UART8_Init+0x90>)
 80018c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018c4:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80018c6:	4b1f      	ldr	r3, [pc, #124]	; (8001944 <MX_UART8_Init+0x90>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 80018cc:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <MX_UART8_Init+0x90>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 80018d2:	4b1c      	ldr	r3, [pc, #112]	; (8001944 <MX_UART8_Init+0x90>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 80018d8:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <MX_UART8_Init+0x90>)
 80018da:	220c      	movs	r2, #12
 80018dc:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018de:	4b19      	ldr	r3, [pc, #100]	; (8001944 <MX_UART8_Init+0x90>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e4:	4b17      	ldr	r3, [pc, #92]	; (8001944 <MX_UART8_Init+0x90>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ea:	4b16      	ldr	r3, [pc, #88]	; (8001944 <MX_UART8_Init+0x90>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018f0:	4b14      	ldr	r3, [pc, #80]	; (8001944 <MX_UART8_Init+0x90>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f6:	4b13      	ldr	r3, [pc, #76]	; (8001944 <MX_UART8_Init+0x90>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart8) != HAL_OK)
 80018fc:	4811      	ldr	r0, [pc, #68]	; (8001944 <MX_UART8_Init+0x90>)
 80018fe:	f007 ff17 	bl	8009730 <HAL_UART_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_UART8_Init+0x58>
	{
		Error_Handler();
 8001908:	f000 fd62 	bl	80023d0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8)
 800190c:	2100      	movs	r1, #0
 800190e:	480d      	ldr	r0, [pc, #52]	; (8001944 <MX_UART8_Init+0x90>)
 8001910:	f009 fc7c 	bl	800b20c <HAL_UARTEx_SetTxFifoThreshold>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_UART8_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 800191a:	f000 fd59 	bl	80023d0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8)
 800191e:	2100      	movs	r1, #0
 8001920:	4808      	ldr	r0, [pc, #32]	; (8001944 <MX_UART8_Init+0x90>)
 8001922:	f009 fcb1 	bl	800b288 <HAL_UARTEx_SetRxFifoThreshold>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_UART8_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 800192c:	f000 fd50 	bl	80023d0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001930:	4804      	ldr	r0, [pc, #16]	; (8001944 <MX_UART8_Init+0x90>)
 8001932:	f009 fc32 	bl	800b19a <HAL_UARTEx_DisableFifoMode>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_UART8_Init+0x8c>
	{
		Error_Handler();
 800193c:	f000 fd48 	bl	80023d0 <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	200045ec 	.word	0x200045ec
 8001948:	40007c00 	.word	0x40007c00

0800194c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001950:	4b22      	ldr	r3, [pc, #136]	; (80019dc <MX_USART1_UART_Init+0x90>)
 8001952:	4a23      	ldr	r2, [pc, #140]	; (80019e0 <MX_USART1_UART_Init+0x94>)
 8001954:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 921600;
 8001956:	4b21      	ldr	r3, [pc, #132]	; (80019dc <MX_USART1_UART_Init+0x90>)
 8001958:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800195c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800195e:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <MX_USART1_UART_Init+0x90>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001964:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <MX_USART1_UART_Init+0x90>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800196a:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <MX_USART1_UART_Init+0x90>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001970:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <MX_USART1_UART_Init+0x90>)
 8001972:	220c      	movs	r2, #12
 8001974:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001976:	4b19      	ldr	r3, [pc, #100]	; (80019dc <MX_USART1_UART_Init+0x90>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800197c:	4b17      	ldr	r3, [pc, #92]	; (80019dc <MX_USART1_UART_Init+0x90>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001982:	4b16      	ldr	r3, [pc, #88]	; (80019dc <MX_USART1_UART_Init+0x90>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001988:	4b14      	ldr	r3, [pc, #80]	; (80019dc <MX_USART1_UART_Init+0x90>)
 800198a:	2200      	movs	r2, #0
 800198c:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800198e:	4b13      	ldr	r3, [pc, #76]	; (80019dc <MX_USART1_UART_Init+0x90>)
 8001990:	2200      	movs	r2, #0
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001994:	4811      	ldr	r0, [pc, #68]	; (80019dc <MX_USART1_UART_Init+0x90>)
 8001996:	f007 fecb 	bl	8009730 <HAL_UART_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 80019a0:	f000 fd16 	bl	80023d0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 80019a4:	2100      	movs	r1, #0
 80019a6:	480d      	ldr	r0, [pc, #52]	; (80019dc <MX_USART1_UART_Init+0x90>)
 80019a8:	f009 fc30 	bl	800b20c <HAL_UARTEx_SetTxFifoThreshold>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_USART1_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 80019b2:	f000 fd0d 	bl	80023d0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 80019b6:	2100      	movs	r1, #0
 80019b8:	4808      	ldr	r0, [pc, #32]	; (80019dc <MX_USART1_UART_Init+0x90>)
 80019ba:	f009 fc65 	bl	800b288 <HAL_UARTEx_SetRxFifoThreshold>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 80019c4:	f000 fd04 	bl	80023d0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80019c8:	4804      	ldr	r0, [pc, #16]	; (80019dc <MX_USART1_UART_Init+0x90>)
 80019ca:	f009 fbe6 	bl	800b19a <HAL_UARTEx_DisableFifoMode>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 80019d4:	f000 fcfc 	bl	80023d0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	200044d0 	.word	0x200044d0
 80019e0:	40011000 	.word	0x40011000

080019e4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80019e8:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <MX_USART2_UART_Init+0x90>)
 80019ea:	4a23      	ldr	r2, [pc, #140]	; (8001a78 <MX_USART2_UART_Init+0x94>)
 80019ec:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80019ee:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <MX_USART2_UART_Init+0x90>)
 80019f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019f4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019f6:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <MX_USART2_UART_Init+0x90>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80019fc:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <MX_USART2_UART_Init+0x90>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001a02:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <MX_USART2_UART_Init+0x90>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001a08:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <MX_USART2_UART_Init+0x90>)
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <MX_USART2_UART_Init+0x90>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a14:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <MX_USART2_UART_Init+0x90>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a1a:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <MX_USART2_UART_Init+0x90>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <MX_USART2_UART_Init+0x90>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a26:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <MX_USART2_UART_Init+0x90>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a2c:	4811      	ldr	r0, [pc, #68]	; (8001a74 <MX_USART2_UART_Init+0x90>)
 8001a2e:	f007 fe7f 	bl	8009730 <HAL_UART_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8001a38:	f000 fcca 	bl	80023d0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	480d      	ldr	r0, [pc, #52]	; (8001a74 <MX_USART2_UART_Init+0x90>)
 8001a40:	f009 fbe4 	bl	800b20c <HAL_UARTEx_SetTxFifoThreshold>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_USART2_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 8001a4a:	f000 fcc1 	bl	80023d0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4808      	ldr	r0, [pc, #32]	; (8001a74 <MX_USART2_UART_Init+0x90>)
 8001a52:	f009 fc19 	bl	800b288 <HAL_UARTEx_SetRxFifoThreshold>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001a5c:	f000 fcb8 	bl	80023d0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a60:	4804      	ldr	r0, [pc, #16]	; (8001a74 <MX_USART2_UART_Init+0x90>)
 8001a62:	f009 fb9a 	bl	800b19a <HAL_UARTEx_DisableFifoMode>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 8001a6c:	f000 fcb0 	bl	80023d0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20004718 	.word	0x20004718
 8001a78:	40004400 	.word	0x40004400

08001a7c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001a80:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <MX_USART3_UART_Init+0x90>)
 8001a82:	4a23      	ldr	r2, [pc, #140]	; (8001b10 <MX_USART3_UART_Init+0x94>)
 8001a84:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 921600;
 8001a86:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <MX_USART3_UART_Init+0x90>)
 8001a88:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001a8c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8e:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <MX_USART3_UART_Init+0x90>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001a94:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <MX_USART3_UART_Init+0x90>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001a9a:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <MX_USART3_UART_Init+0x90>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001aa0:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <MX_USART3_UART_Init+0x90>)
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa6:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <MX_USART3_UART_Init+0x90>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aac:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <MX_USART3_UART_Init+0x90>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <MX_USART3_UART_Init+0x90>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <MX_USART3_UART_Init+0x90>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001abe:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <MX_USART3_UART_Init+0x90>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ac4:	4811      	ldr	r0, [pc, #68]	; (8001b0c <MX_USART3_UART_Init+0x90>)
 8001ac6:	f007 fe33 	bl	8009730 <HAL_UART_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 8001ad0:	f000 fc7e 	bl	80023d0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	480d      	ldr	r0, [pc, #52]	; (8001b0c <MX_USART3_UART_Init+0x90>)
 8001ad8:	f009 fb98 	bl	800b20c <HAL_UARTEx_SetTxFifoThreshold>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_USART3_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 8001ae2:	f000 fc75 	bl	80023d0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4808      	ldr	r0, [pc, #32]	; (8001b0c <MX_USART3_UART_Init+0x90>)
 8001aea:	f009 fbcd 	bl	800b288 <HAL_UARTEx_SetRxFifoThreshold>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_USART3_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001af4:	f000 fc6c 	bl	80023d0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001af8:	4804      	ldr	r0, [pc, #16]	; (8001b0c <MX_USART3_UART_Init+0x90>)
 8001afa:	f009 fb4e 	bl	800b19a <HAL_UARTEx_DisableFifoMode>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 8001b04:	f000 fc64 	bl	80023d0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2000416c 	.word	0x2000416c
 8001b10:	40004800 	.word	0x40004800

08001b14 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <MX_DMA_Init+0xfc>)
 8001b1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b20:	4a3b      	ldr	r2, [pc, #236]	; (8001c10 <MX_DMA_Init+0xfc>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b2a:	4b39      	ldr	r3, [pc, #228]	; (8001c10 <MX_DMA_Init+0xfc>)
 8001b2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001b38:	4b35      	ldr	r3, [pc, #212]	; (8001c10 <MX_DMA_Init+0xfc>)
 8001b3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b3e:	4a34      	ldr	r2, [pc, #208]	; (8001c10 <MX_DMA_Init+0xfc>)
 8001b40:	f043 0302 	orr.w	r3, r3, #2
 8001b44:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b48:	4b31      	ldr	r3, [pc, #196]	; (8001c10 <MX_DMA_Init+0xfc>)
 8001b4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2105      	movs	r1, #5
 8001b5a:	200b      	movs	r0, #11
 8001b5c:	f001 feee 	bl	800393c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b60:	200b      	movs	r0, #11
 8001b62:	f001 ff05 	bl	8003970 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2105      	movs	r1, #5
 8001b6a:	200c      	movs	r0, #12
 8001b6c:	f001 fee6 	bl	800393c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b70:	200c      	movs	r0, #12
 8001b72:	f001 fefd 	bl	8003970 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2105      	movs	r1, #5
 8001b7a:	200d      	movs	r0, #13
 8001b7c:	f001 fede 	bl	800393c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001b80:	200d      	movs	r0, #13
 8001b82:	f001 fef5 	bl	8003970 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2105      	movs	r1, #5
 8001b8a:	200e      	movs	r0, #14
 8001b8c:	f001 fed6 	bl	800393c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001b90:	200e      	movs	r0, #14
 8001b92:	f001 feed 	bl	8003970 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2105      	movs	r1, #5
 8001b9a:	200f      	movs	r0, #15
 8001b9c:	f001 fece 	bl	800393c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001ba0:	200f      	movs	r0, #15
 8001ba2:	f001 fee5 	bl	8003970 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2105      	movs	r1, #5
 8001baa:	2010      	movs	r0, #16
 8001bac:	f001 fec6 	bl	800393c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001bb0:	2010      	movs	r0, #16
 8001bb2:	f001 fedd 	bl	8003970 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2105      	movs	r1, #5
 8001bba:	2011      	movs	r0, #17
 8001bbc:	f001 febe 	bl	800393c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001bc0:	2011      	movs	r0, #17
 8001bc2:	f001 fed5 	bl	8003970 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2105      	movs	r1, #5
 8001bca:	202f      	movs	r0, #47	; 0x2f
 8001bcc:	f001 feb6 	bl	800393c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001bd0:	202f      	movs	r0, #47	; 0x2f
 8001bd2:	f001 fecd 	bl	8003970 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2105      	movs	r1, #5
 8001bda:	2038      	movs	r0, #56	; 0x38
 8001bdc:	f001 feae 	bl	800393c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001be0:	2038      	movs	r0, #56	; 0x38
 8001be2:	f001 fec5 	bl	8003970 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2105      	movs	r1, #5
 8001bea:	2039      	movs	r0, #57	; 0x39
 8001bec:	f001 fea6 	bl	800393c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001bf0:	2039      	movs	r0, #57	; 0x39
 8001bf2:	f001 febd 	bl	8003970 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2105      	movs	r1, #5
 8001bfa:	203a      	movs	r0, #58	; 0x3a
 8001bfc:	f001 fe9e 	bl	800393c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001c00:	203a      	movs	r0, #58	; 0x3a
 8001c02:	f001 feb5 	bl	8003970 <HAL_NVIC_EnableIRQ>

}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	58024400 	.word	0x58024400

08001c14 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	60da      	str	r2, [r3, #12]
 8001c28:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001c2a:	4b3f      	ldr	r3, [pc, #252]	; (8001d28 <MX_GPIO_Init+0x114>)
 8001c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c30:	4a3d      	ldr	r2, [pc, #244]	; (8001d28 <MX_GPIO_Init+0x114>)
 8001c32:	f043 0310 	orr.w	r3, r3, #16
 8001c36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c3a:	4b3b      	ldr	r3, [pc, #236]	; (8001d28 <MX_GPIO_Init+0x114>)
 8001c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c48:	4b37      	ldr	r3, [pc, #220]	; (8001d28 <MX_GPIO_Init+0x114>)
 8001c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4e:	4a36      	ldr	r2, [pc, #216]	; (8001d28 <MX_GPIO_Init+0x114>)
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c58:	4b33      	ldr	r3, [pc, #204]	; (8001d28 <MX_GPIO_Init+0x114>)
 8001c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001c66:	4b30      	ldr	r3, [pc, #192]	; (8001d28 <MX_GPIO_Init+0x114>)
 8001c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6c:	4a2e      	ldr	r2, [pc, #184]	; (8001d28 <MX_GPIO_Init+0x114>)
 8001c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c76:	4b2c      	ldr	r3, [pc, #176]	; (8001d28 <MX_GPIO_Init+0x114>)
 8001c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c84:	4b28      	ldr	r3, [pc, #160]	; (8001d28 <MX_GPIO_Init+0x114>)
 8001c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8a:	4a27      	ldr	r2, [pc, #156]	; (8001d28 <MX_GPIO_Init+0x114>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c94:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <MX_GPIO_Init+0x114>)
 8001c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <MX_GPIO_Init+0x114>)
 8001ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca8:	4a1f      	ldr	r2, [pc, #124]	; (8001d28 <MX_GPIO_Init+0x114>)
 8001caa:	f043 0302 	orr.w	r3, r3, #2
 8001cae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cb2:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <MX_GPIO_Init+0x114>)
 8001cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2110      	movs	r1, #16
 8001cc4:	4819      	ldr	r0, [pc, #100]	; (8001d2c <MX_GPIO_Init+0x118>)
 8001cc6:	f004 fe6f 	bl	80069a8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cca:	2310      	movs	r3, #16
 8001ccc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4812      	ldr	r0, [pc, #72]	; (8001d2c <MX_GPIO_Init+0x118>)
 8001ce2:	f004 fc99 	bl	8006618 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ce6:	2340      	movs	r3, #64	; 0x40
 8001ce8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	480c      	ldr	r0, [pc, #48]	; (8001d2c <MX_GPIO_Init+0x118>)
 8001cfa:	f004 fc8d 	bl	8006618 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d02:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d10:	2301      	movs	r3, #1
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4805      	ldr	r0, [pc, #20]	; (8001d30 <MX_GPIO_Init+0x11c>)
 8001d1c:	f004 fc7c 	bl	8006618 <HAL_GPIO_Init>

}
 8001d20:	bf00      	nop
 8001d22:	3728      	adds	r7, #40	; 0x28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	58024400 	.word	0x58024400
 8001d2c:	58021000 	.word	0x58021000
 8001d30:	58020000 	.word	0x58020000

08001d34 <CtrlTaskF>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_CtrlTaskF */
void CtrlTaskF(void const *argument)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for (;;)
	{
		/* 该任务作为空任务 */
		HAL_IWDG_Refresh(&hiwdg1);
 8001d3c:	4801      	ldr	r0, [pc, #4]	; (8001d44 <CtrlTaskF+0x10>)
 8001d3e:	f004 fe9b 	bl	8006a78 <HAL_IWDG_Refresh>
 8001d42:	e7fb      	b.n	8001d3c <CtrlTaskF+0x8>
 8001d44:	200040e4 	.word	0x200040e4

08001d48 <SensorTaskF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SensorTaskF */
void SensorTaskF(void const *argument)
{
 8001d48:	b5b0      	push	{r4, r5, r7, lr}
 8001d4a:	b08c      	sub	sp, #48	; 0x30
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	62f8      	str	r0, [r7, #44]	; 0x2c
	/* USER CODE BEGIN SensorTaskF */
	InitGY39();
 8001d50:	f7ff f8b4 	bl	8000ebc <InitGY39>
	InitP30();
 8001d54:	f7ff f9f6 	bl	8001144 <InitP30>
	ReceiveDeep();
 8001d58:	f7ff f9bc 	bl	80010d4 <ReceiveDeep>
	ReceiveGY39();
 8001d5c:	f107 0318 	add.w	r3, r7, #24
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff f8c1 	bl	8000ee8 <ReceiveGY39>
	ReceiveWT931();
 8001d66:	463b      	mov	r3, r7
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff f903 	bl	8000f74 <ReceiveWT931>
	ReceiveP30();
 8001d6e:	463b      	mov	r3, r7
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fa19 	bl	80011a8 <ReceiveP30>
	osDelay(200);
 8001d76:	20c8      	movs	r0, #200	; 0xc8
 8001d78:	f009 fb7d 	bl	800b476 <osDelay>
	DeepSensorData = ReceiveDeep();
 8001d7c:	f7ff f9aa 	bl	80010d4 <ReceiveDeep>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b75      	ldr	r3, [pc, #468]	; (8001f58 <SensorTaskF+0x210>)
 8001d84:	4611      	mov	r1, r2
 8001d86:	8019      	strh	r1, [r3, #0]
 8001d88:	f3c2 420f 	ubfx	r2, r2, #16, #16
 8001d8c:	805a      	strh	r2, [r3, #2]
	GY39SensorData = ReceiveGY39();
 8001d8e:	4c73      	ldr	r4, [pc, #460]	; (8001f5c <SensorTaskF+0x214>)
 8001d90:	463b      	mov	r3, r7
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff f8a8 	bl	8000ee8 <ReceiveGY39>
 8001d98:	463b      	mov	r3, r7
 8001d9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	WT931SensorData = ReceiveWT931();
 8001da2:	4c6f      	ldr	r4, [pc, #444]	; (8001f60 <SensorTaskF+0x218>)
 8001da4:	463b      	mov	r3, r7
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff f8e4 	bl	8000f74 <ReceiveWT931>
 8001dac:	4622      	mov	r2, r4
 8001dae:	463b      	mov	r3, r7
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	6859      	ldr	r1, [r3, #4]
 8001db4:	689d      	ldr	r5, [r3, #8]
 8001db6:	68dc      	ldr	r4, [r3, #12]
 8001db8:	6010      	str	r0, [r2, #0]
 8001dba:	6051      	str	r1, [r2, #4]
 8001dbc:	6095      	str	r5, [r2, #8]
 8001dbe:	60d4      	str	r4, [r2, #12]
 8001dc0:	6918      	ldr	r0, [r3, #16]
 8001dc2:	6959      	ldr	r1, [r3, #20]
 8001dc4:	6110      	str	r0, [r2, #16]
 8001dc6:	6151      	str	r1, [r2, #20]
	P30SensorData = ReceiveP30();
 8001dc8:	4c66      	ldr	r4, [pc, #408]	; (8001f64 <SensorTaskF+0x21c>)
 8001dca:	463b      	mov	r3, r7
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff f9eb 	bl	80011a8 <ReceiveP30>
 8001dd2:	4622      	mov	r2, r4
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001dda:	e882 0003 	stmia.w	r2, {r0, r1}
	xSemaphoreGive(DeepSensorDataRWFlagHandle);
 8001dde:	4b62      	ldr	r3, [pc, #392]	; (8001f68 <SensorTaskF+0x220>)
 8001de0:	6818      	ldr	r0, [r3, #0]
 8001de2:	2300      	movs	r3, #0
 8001de4:	2200      	movs	r2, #0
 8001de6:	2100      	movs	r1, #0
 8001de8:	f009 fdde 	bl	800b9a8 <xQueueGenericSend>
	xSemaphoreGive(GY39SensorDataRWFlagHandle);
 8001dec:	4b5f      	ldr	r3, [pc, #380]	; (8001f6c <SensorTaskF+0x224>)
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	2300      	movs	r3, #0
 8001df2:	2200      	movs	r2, #0
 8001df4:	2100      	movs	r1, #0
 8001df6:	f009 fdd7 	bl	800b9a8 <xQueueGenericSend>
	xSemaphoreGive(WT931SensorDataRWFlagHandle);
 8001dfa:	4b5d      	ldr	r3, [pc, #372]	; (8001f70 <SensorTaskF+0x228>)
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2200      	movs	r2, #0
 8001e02:	2100      	movs	r1, #0
 8001e04:	f009 fdd0 	bl	800b9a8 <xQueueGenericSend>
	xSemaphoreGive(P30SensorDataRWFlagHandle);
 8001e08:	4b5a      	ldr	r3, [pc, #360]	; (8001f74 <SensorTaskF+0x22c>)
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2100      	movs	r1, #0
 8001e12:	f009 fdc9 	bl	800b9a8 <xQueueGenericSend>
	/* Infinite loop */
	for (;;)
	{
		//收取深度数据
		if (xSemaphoreTake(DeepTransFinishHandleHandle,portMAX_DELAY) == pdTRUE)
 8001e16:	4b58      	ldr	r3, [pc, #352]	; (8001f78 <SensorTaskF+0x230>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f009 ff4e 	bl	800bcc0 <xQueueSemaphoreTake>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d119      	bne.n	8001e5e <SensorTaskF+0x116>
		{
			if (xSemaphoreTake(DeepSensorDataRWFlagHandle,
 8001e2a:	4b4f      	ldr	r3, [pc, #316]	; (8001f68 <SensorTaskF+0x220>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e32:	4618      	mov	r0, r3
 8001e34:	f009 ff44 	bl	800bcc0 <xQueueSemaphoreTake>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d10f      	bne.n	8001e5e <SensorTaskF+0x116>
					portMAX_DELAY) == pdTRUE)
			{
				DeepSensorData = ReceiveDeep();
 8001e3e:	f7ff f949 	bl	80010d4 <ReceiveDeep>
 8001e42:	4602      	mov	r2, r0
 8001e44:	4b44      	ldr	r3, [pc, #272]	; (8001f58 <SensorTaskF+0x210>)
 8001e46:	4611      	mov	r1, r2
 8001e48:	8019      	strh	r1, [r3, #0]
 8001e4a:	f3c2 420f 	ubfx	r2, r2, #16, #16
 8001e4e:	805a      	strh	r2, [r3, #2]
				xSemaphoreGive(DeepSensorDataRWFlagHandle);
 8001e50:	4b45      	ldr	r3, [pc, #276]	; (8001f68 <SensorTaskF+0x220>)
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	2300      	movs	r3, #0
 8001e56:	2200      	movs	r2, #0
 8001e58:	2100      	movs	r1, #0
 8001e5a:	f009 fda5 	bl	800b9a8 <xQueueGenericSend>
			}
		}
		//收取九轴数据
		if (xSemaphoreTake(WT931TransFinishHandle,portMAX_DELAY) == pdTRUE)
 8001e5e:	4b47      	ldr	r3, [pc, #284]	; (8001f7c <SensorTaskF+0x234>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f04f 31ff 	mov.w	r1, #4294967295
 8001e66:	4618      	mov	r0, r3
 8001e68:	f009 ff2a 	bl	800bcc0 <xQueueSemaphoreTake>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d123      	bne.n	8001eba <SensorTaskF+0x172>
		{
			if (xSemaphoreTake(WT931SensorDataRWFlagHandle,
 8001e72:	4b3f      	ldr	r3, [pc, #252]	; (8001f70 <SensorTaskF+0x228>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f04f 31ff 	mov.w	r1, #4294967295
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f009 ff20 	bl	800bcc0 <xQueueSemaphoreTake>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d119      	bne.n	8001eba <SensorTaskF+0x172>
					portMAX_DELAY) == pdTRUE)
			{
				WT931SensorData = ReceiveWT931();
 8001e86:	4c36      	ldr	r4, [pc, #216]	; (8001f60 <SensorTaskF+0x218>)
 8001e88:	463b      	mov	r3, r7
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff f872 	bl	8000f74 <ReceiveWT931>
 8001e90:	4622      	mov	r2, r4
 8001e92:	463b      	mov	r3, r7
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	689d      	ldr	r5, [r3, #8]
 8001e9a:	68dc      	ldr	r4, [r3, #12]
 8001e9c:	6010      	str	r0, [r2, #0]
 8001e9e:	6051      	str	r1, [r2, #4]
 8001ea0:	6095      	str	r5, [r2, #8]
 8001ea2:	60d4      	str	r4, [r2, #12]
 8001ea4:	6918      	ldr	r0, [r3, #16]
 8001ea6:	6959      	ldr	r1, [r3, #20]
 8001ea8:	6110      	str	r0, [r2, #16]
 8001eaa:	6151      	str	r1, [r2, #20]
				xSemaphoreGive(WT931SensorDataRWFlagHandle);
 8001eac:	4b30      	ldr	r3, [pc, #192]	; (8001f70 <SensorTaskF+0x228>)
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	f009 fd77 	bl	800b9a8 <xQueueGenericSend>
			}
		}
		//收取温湿度数�????
		if (xSemaphoreTake(GY39TransFinishHandle,portMAX_DELAY) == pdTRUE)
 8001eba:	4b31      	ldr	r3, [pc, #196]	; (8001f80 <SensorTaskF+0x238>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f009 fefc 	bl	800bcc0 <xQueueSemaphoreTake>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d11a      	bne.n	8001f04 <SensorTaskF+0x1bc>
		{
			if (xSemaphoreTake(GY39SensorDataRWFlagHandle,
 8001ece:	4b27      	ldr	r3, [pc, #156]	; (8001f6c <SensorTaskF+0x224>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f009 fef2 	bl	800bcc0 <xQueueSemaphoreTake>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d110      	bne.n	8001f04 <SensorTaskF+0x1bc>
					portMAX_DELAY) == pdTRUE)
			{
				GY39SensorData = ReceiveGY39();
 8001ee2:	4c1e      	ldr	r4, [pc, #120]	; (8001f5c <SensorTaskF+0x214>)
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fffe 	bl	8000ee8 <ReceiveGY39>
 8001eec:	463b      	mov	r3, r7
 8001eee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ef2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				xSemaphoreGive(GY39SensorDataRWFlagHandle);
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <SensorTaskF+0x224>)
 8001ef8:	6818      	ldr	r0, [r3, #0]
 8001efa:	2300      	movs	r3, #0
 8001efc:	2200      	movs	r2, #0
 8001efe:	2100      	movs	r1, #0
 8001f00:	f009 fd52 	bl	800b9a8 <xQueueGenericSend>
			}
		}
		//收取声呐数据
		if (xSemaphoreTake(P30TransFinishHandle,portMAX_DELAY) == pdTRUE)
 8001f04:	4b1f      	ldr	r3, [pc, #124]	; (8001f84 <SensorTaskF+0x23c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f04f 31ff 	mov.w	r1, #4294967295
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f009 fed7 	bl	800bcc0 <xQueueSemaphoreTake>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d11b      	bne.n	8001f50 <SensorTaskF+0x208>
		{
			if (xSemaphoreTake(P30SensorDataRWFlagHandle,
 8001f18:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <SensorTaskF+0x22c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f20:	4618      	mov	r0, r3
 8001f22:	f009 fecd 	bl	800bcc0 <xQueueSemaphoreTake>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d111      	bne.n	8001f50 <SensorTaskF+0x208>
					portMAX_DELAY) == pdTRUE)
			{
				P30SensorData = ReceiveP30();
 8001f2c:	4c0d      	ldr	r4, [pc, #52]	; (8001f64 <SensorTaskF+0x21c>)
 8001f2e:	463b      	mov	r3, r7
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f939 	bl	80011a8 <ReceiveP30>
 8001f36:	4622      	mov	r2, r4
 8001f38:	463b      	mov	r3, r7
 8001f3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f3e:	e882 0003 	stmia.w	r2, {r0, r1}
				xSemaphoreGive(P30SensorDataRWFlagHandle);
 8001f42:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <SensorTaskF+0x22c>)
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	2300      	movs	r3, #0
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	f009 fd2c 	bl	800b9a8 <xQueueGenericSend>
			}
		}
		HAL_IWDG_Refresh(&hiwdg1);
 8001f50:	480d      	ldr	r0, [pc, #52]	; (8001f88 <SensorTaskF+0x240>)
 8001f52:	f004 fd91 	bl	8006a78 <HAL_IWDG_Refresh>
		if (xSemaphoreTake(DeepTransFinishHandleHandle,portMAX_DELAY) == pdTRUE)
 8001f56:	e75e      	b.n	8001e16 <SensorTaskF+0xce>
 8001f58:	2000467c 	.word	0x2000467c
 8001f5c:	20004564 	.word	0x20004564
 8001f60:	20004240 	.word	0x20004240
 8001f64:	20004820 	.word	0x20004820
 8001f68:	20004200 	.word	0x20004200
 8001f6c:	2000423c 	.word	0x2000423c
 8001f70:	20004364 	.word	0x20004364
 8001f74:	200041fc 	.word	0x200041fc
 8001f78:	2000482c 	.word	0x2000482c
 8001f7c:	20004920 	.word	0x20004920
 8001f80:	20004204 	.word	0x20004204
 8001f84:	20003fe8 	.word	0x20003fe8
 8001f88:	200040e4 	.word	0x200040e4

08001f8c <UtBF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UtBF */
void UtBF(void const *argument)
{
 8001f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8e:	b09b      	sub	sp, #108	; 0x6c
 8001f90:	af0a      	add	r7, sp, #40	; 0x28
 8001f92:	6378      	str	r0, [r7, #52]	; 0x34
	/* USER CODE BEGIN UtBF */
	u8 DIPFlag = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	u16 DIPStartNum = 0; //PID定向定深预期�?????????
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	87bb      	strh	r3, [r7, #60]	; 0x3c

	CaptureUpData();
 8001f9e:	463b      	mov	r3, r7
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fc61 	bl	8000868 <CaptureUpData>
	CaptureDownData();
 8001fa6:	463b      	mov	r3, r7
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fb15 	bl	80005d8 <CaptureDownData>
	osDelay(200);
 8001fae:	20c8      	movs	r0, #200	; 0xc8
 8001fb0:	f009 fa61 	bl	800b476 <osDelay>
	//打开串口接收
	BasetoUpData = CaptureUpData();
 8001fb4:	4c54      	ldr	r4, [pc, #336]	; (8002108 <UtBF+0x17c>)
 8001fb6:	463b      	mov	r3, r7
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fc55 	bl	8000868 <CaptureUpData>
 8001fbe:	4625      	mov	r5, r4
 8001fc0:	463c      	mov	r4, r7
 8001fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001fce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	UptoBaseData = CaptureDownData();
 8001fd2:	4c4e      	ldr	r4, [pc, #312]	; (800210c <UtBF+0x180>)
 8001fd4:	463b      	mov	r3, r7
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fafe 	bl	80005d8 <CaptureDownData>
 8001fdc:	4625      	mov	r5, r4
 8001fde:	463c      	mov	r4, r7
 8001fe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fec:	6823      	ldr	r3, [r4, #0]
 8001fee:	602b      	str	r3, [r5, #0]
	xSemaphoreGive(BasetoUpDataRWFlagHandle);
 8001ff0:	4b47      	ldr	r3, [pc, #284]	; (8002110 <UtBF+0x184>)
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	f009 fcd5 	bl	800b9a8 <xQueueGenericSend>
	xSemaphoreGive(UptoBaseDataRWFlagHandle);
 8001ffe:	4b45      	ldr	r3, [pc, #276]	; (8002114 <UtBF+0x188>)
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	2300      	movs	r3, #0
 8002004:	2200      	movs	r2, #0
 8002006:	2100      	movs	r1, #0
 8002008:	f009 fcce 	bl	800b9a8 <xQueueGenericSend>

	/* Infinite loop */
	for (;;)
	{
		//根据控制位判断是否执行自主定向定�????
		if (UptoBaseData.Mode == 0b0010) // Mode & 0b0111 == 0b0010,使用定向模式
 800200c:	4b3f      	ldr	r3, [pc, #252]	; (800210c <UtBF+0x180>)
 800200e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002012:	2b02      	cmp	r3, #2
 8002014:	d111      	bne.n	800203a <UtBF+0xae>
		{
			if (DIPFlag == 0)
 8002016:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800201a:	2b00      	cmp	r3, #0
 800201c:	d105      	bne.n	800202a <UtBF+0x9e>
			{
				DIPFlag = 1;
 800201e:	2301      	movs	r3, #1
 8002020:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				DIPStartNum = WT931SensorData.EulNum[2];
 8002024:	4b3c      	ldr	r3, [pc, #240]	; (8002118 <UtBF+0x18c>)
 8002026:	8a1b      	ldrh	r3, [r3, #16]
 8002028:	87bb      	strh	r3, [r7, #60]	; 0x3c
			}
			SpecialMovePID(2, DIPStartNum, WT931SensorData.EulNum[2]); //PID定向
 800202a:	4b3b      	ldr	r3, [pc, #236]	; (8002118 <UtBF+0x18c>)
 800202c:	8a1a      	ldrh	r2, [r3, #16]
 800202e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002030:	4619      	mov	r1, r3
 8002032:	2002      	movs	r0, #2
 8002034:	f7fe fe46 	bl	8000cc4 <SpecialMovePID>
 8002038:	e019      	b.n	800206e <UtBF+0xe2>
		}
		else if (UptoBaseData.Mode == 0b0100) // Mode & 0b0111 == 0b100,使用定深模式
 800203a:	4b34      	ldr	r3, [pc, #208]	; (800210c <UtBF+0x180>)
 800203c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002040:	2b04      	cmp	r3, #4
 8002042:	d111      	bne.n	8002068 <UtBF+0xdc>
		{
			if (DIPFlag == 0)
 8002044:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002048:	2b00      	cmp	r3, #0
 800204a:	d105      	bne.n	8002058 <UtBF+0xcc>
			{
				DIPFlag = 1;
 800204c:	2301      	movs	r3, #1
 800204e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				DIPStartNum = DeepSensorData.WaterDepth;
 8002052:	4b32      	ldr	r3, [pc, #200]	; (800211c <UtBF+0x190>)
 8002054:	885b      	ldrh	r3, [r3, #2]
 8002056:	87bb      	strh	r3, [r7, #60]	; 0x3c
			}
			SpecialMovePID(4, DIPStartNum, DeepSensorData.WaterDepth); //PID定深
 8002058:	4b30      	ldr	r3, [pc, #192]	; (800211c <UtBF+0x190>)
 800205a:	885a      	ldrh	r2, [r3, #2]
 800205c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800205e:	4619      	mov	r1, r3
 8002060:	2004      	movs	r0, #4
 8002062:	f7fe fe2f 	bl	8000cc4 <SpecialMovePID>
 8002066:	e002      	b.n	800206e <UtBF+0xe2>
		}
		else
		{
			DIPFlag = 0; //不开启定向定�????
 8002068:	2300      	movs	r3, #0
 800206a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}

		//收取上位机指�???
		if (xSemaphoreTake(UptoBaseTransFinishHandle,portMAX_DELAY) == pdTRUE)
 800206e:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <UtBF+0x194>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f04f 31ff 	mov.w	r1, #4294967295
 8002076:	4618      	mov	r0, r3
 8002078:	f009 fe22 	bl	800bcc0 <xQueueSemaphoreTake>
 800207c:	4603      	mov	r3, r0
 800207e:	2b01      	cmp	r3, #1
 8002080:	d11f      	bne.n	80020c2 <UtBF+0x136>
		{
			if (xSemaphoreTake(UptoBaseDataRWFlagHandle,
 8002082:	4b24      	ldr	r3, [pc, #144]	; (8002114 <UtBF+0x188>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f04f 31ff 	mov.w	r1, #4294967295
 800208a:	4618      	mov	r0, r3
 800208c:	f009 fe18 	bl	800bcc0 <xQueueSemaphoreTake>
 8002090:	4603      	mov	r3, r0
 8002092:	2b01      	cmp	r3, #1
 8002094:	d115      	bne.n	80020c2 <UtBF+0x136>
					portMAX_DELAY) == pdTRUE)
			{
				UptoBaseData = CaptureDownData();
 8002096:	4c1d      	ldr	r4, [pc, #116]	; (800210c <UtBF+0x180>)
 8002098:	463b      	mov	r3, r7
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fa9c 	bl	80005d8 <CaptureDownData>
 80020a0:	4625      	mov	r5, r4
 80020a2:	463c      	mov	r4, r7
 80020a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	602b      	str	r3, [r5, #0]
				xSemaphoreGive(UptoBaseDataRWFlagHandle);
 80020b4:	4b17      	ldr	r3, [pc, #92]	; (8002114 <UtBF+0x188>)
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	2300      	movs	r3, #0
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	f009 fc73 	bl	800b9a8 <xQueueGenericSend>
			}
		}

		//下传指令
		if (xSemaphoreTake(BasetoUpDataRWFlagHandle,
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <UtBF+0x184>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f04f 31ff 	mov.w	r1, #4294967295
 80020ca:	4618      	mov	r0, r3
 80020cc:	f009 fdf8 	bl	800bcc0 <xQueueSemaphoreTake>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d114      	bne.n	8002100 <UtBF+0x174>
				portMAX_DELAY) == pdTRUE)
		{
			SendDownData(UptoBaseData);
 80020d6:	4e0d      	ldr	r6, [pc, #52]	; (800210c <UtBF+0x180>)
 80020d8:	466d      	mov	r5, sp
 80020da:	f106 0410 	add.w	r4, r6, #16
 80020de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	602b      	str	r3, [r5, #0]
 80020ea:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80020ee:	f7fe fb17 	bl	8000720 <SendDownData>
			xSemaphoreGive(BasetoUpDataRWFlagHandle);
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <UtBF+0x184>)
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	2300      	movs	r3, #0
 80020f8:	2200      	movs	r2, #0
 80020fa:	2100      	movs	r1, #0
 80020fc:	f009 fc54 	bl	800b9a8 <xQueueGenericSend>
		}

		HAL_IWDG_Refresh(&hiwdg1);
 8002100:	4808      	ldr	r0, [pc, #32]	; (8002124 <UtBF+0x198>)
 8002102:	f004 fcb9 	bl	8006a78 <HAL_IWDG_Refresh>
		if (UptoBaseData.Mode == 0b0010) // Mode & 0b0111 == 0b0010,使用定向模式
 8002106:	e781      	b.n	800200c <UtBF+0x80>
 8002108:	2000420c 	.word	0x2000420c
 800210c:	20004924 	.word	0x20004924
 8002110:	20004828 	.word	0x20004828
 8002114:	20004560 	.word	0x20004560
 8002118:	20004240 	.word	0x20004240
 800211c:	2000467c 	.word	0x2000467c
 8002120:	20003fec 	.word	0x20003fec
 8002124:	200040e4 	.word	0x200040e4

08002128 <BtUF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_BtUF */
void BtUF(void const *argument)
{
 8002128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212a:	b099      	sub	sp, #100	; 0x64
 800212c:	af08      	add	r7, sp, #32
 800212e:	6378      	str	r0, [r7, #52]	; 0x34
	/* USER CODE BEGIN BtUF */
//	xSemaphoreGive(BaseControlEnableFlagHandle);
	//用于指示当前传输数据是哪个仓位的标志
	//置为1的时候表示推进器控制�?????????
	//置为0的时候表示主控仓
	u8 SensorCarbin = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	/* Infinite loop */
	for (;;)
	{
		if (SensorCarbin % 2 == 1) //发�?�推进器控制仓数�????
 8002136:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d04b      	beq.n	80021dc <BtUF+0xb4>
		{
			//接收下位仓回传的数据
			if (xSemaphoreTake(BasetoUpTransFinishHandleHandle,
 8002144:	4b8b      	ldr	r3, [pc, #556]	; (8002374 <BtUF+0x24c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f04f 31ff 	mov.w	r1, #4294967295
 800214c:	4618      	mov	r0, r3
 800214e:	f009 fdb7 	bl	800bcc0 <xQueueSemaphoreTake>
 8002152:	4603      	mov	r3, r0
 8002154:	2b01      	cmp	r3, #1
 8002156:	f040 8104 	bne.w	8002362 <BtUF+0x23a>
					portMAX_DELAY) == pdTRUE)
			{
				if (xSemaphoreTake(BasetoUpDataRWFlagHandle,
 800215a:	4b87      	ldr	r3, [pc, #540]	; (8002378 <BtUF+0x250>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f04f 31ff 	mov.w	r1, #4294967295
 8002162:	4618      	mov	r0, r3
 8002164:	f009 fdac 	bl	800bcc0 <xQueueSemaphoreTake>
 8002168:	4603      	mov	r3, r0
 800216a:	2b01      	cmp	r3, #1
 800216c:	f040 80f9 	bne.w	8002362 <BtUF+0x23a>
						portMAX_DELAY) == pdTRUE)
				{
					BasetoUpData = CaptureUpData();
 8002170:	4c82      	ldr	r4, [pc, #520]	; (800237c <BtUF+0x254>)
 8002172:	463b      	mov	r3, r7
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe fb77 	bl	8000868 <CaptureUpData>
 800217a:	4625      	mov	r5, r4
 800217c:	463c      	mov	r4, r7
 800217e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002184:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002186:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800218a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
					//上传数据
					if (xSemaphoreTake(UptoBaseDataRWFlagHandle,
 800218e:	4b7c      	ldr	r3, [pc, #496]	; (8002380 <BtUF+0x258>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f04f 31ff 	mov.w	r1, #4294967295
 8002196:	4618      	mov	r0, r3
 8002198:	f009 fd92 	bl	800bcc0 <xQueueSemaphoreTake>
 800219c:	4603      	mov	r3, r0
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d114      	bne.n	80021cc <BtUF+0xa4>
							portMAX_DELAY) == pdTRUE)
					{
						SendUpData(BasetoUpData);
 80021a2:	4e76      	ldr	r6, [pc, #472]	; (800237c <BtUF+0x254>)
 80021a4:	466d      	mov	r5, sp
 80021a6:	f106 0410 	add.w	r4, r6, #16
 80021aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80021b6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80021ba:	f7fe fc77 	bl	8000aac <SendUpData>
						xSemaphoreGive(UptoBaseDataRWFlagHandle);
 80021be:	4b70      	ldr	r3, [pc, #448]	; (8002380 <BtUF+0x258>)
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	2300      	movs	r3, #0
 80021c4:	2200      	movs	r2, #0
 80021c6:	2100      	movs	r1, #0
 80021c8:	f009 fbee 	bl	800b9a8 <xQueueGenericSend>
					}
					xSemaphoreGive(BasetoUpDataRWFlagHandle);
 80021cc:	4b6a      	ldr	r3, [pc, #424]	; (8002378 <BtUF+0x250>)
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	2300      	movs	r3, #0
 80021d2:	2200      	movs	r2, #0
 80021d4:	2100      	movs	r1, #0
 80021d6:	f009 fbe7 	bl	800b9a8 <xQueueGenericSend>
 80021da:	e0c2      	b.n	8002362 <BtUF+0x23a>
				}
			}

		}
		else if (SensorCarbin % 2 == 0)	//发�?�主控仓数据
 80021dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f040 80bb 	bne.w	8002362 <BtUF+0x23a>
		{
			//汇�?�本仓传感器数据
			//仓位数据
			BasetoUpData.CabinNum = 0;
 80021ec:	4b63      	ldr	r3, [pc, #396]	; (800237c <BtUF+0x254>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
			//漏水�????�????
			BasetoUpData.WaterDetect = HAL_GPIO_ReadPin(GPIOE,
 80021f2:	2140      	movs	r1, #64	; 0x40
 80021f4:	4863      	ldr	r0, [pc, #396]	; (8002384 <BtUF+0x25c>)
 80021f6:	f004 fbbf 	bl	8006978 <HAL_GPIO_ReadPin>
 80021fa:	4603      	mov	r3, r0
			GPIO_PIN_6) << 1;
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	b2da      	uxtb	r2, r3
			BasetoUpData.WaterDetect = HAL_GPIO_ReadPin(GPIOE,
 8002200:	4b5e      	ldr	r3, [pc, #376]	; (800237c <BtUF+0x254>)
 8002202:	705a      	strb	r2, [r3, #1]
			//九轴数据
			if (xSemaphoreTake(WT931SensorDataRWFlagHandle,
 8002204:	4b60      	ldr	r3, [pc, #384]	; (8002388 <BtUF+0x260>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f04f 31ff 	mov.w	r1, #4294967295
 800220c:	4618      	mov	r0, r3
 800220e:	f009 fd57 	bl	800bcc0 <xQueueSemaphoreTake>
 8002212:	4603      	mov	r3, r0
 8002214:	2b01      	cmp	r3, #1
 8002216:	d136      	bne.n	8002286 <BtUF+0x15e>
					portMAX_DELAY) == pdTRUE)
			{
				BasetoUpData.AccNum[0] = WT931SensorData.AccNum[0];
 8002218:	4b5c      	ldr	r3, [pc, #368]	; (800238c <BtUF+0x264>)
 800221a:	881a      	ldrh	r2, [r3, #0]
 800221c:	4b57      	ldr	r3, [pc, #348]	; (800237c <BtUF+0x254>)
 800221e:	815a      	strh	r2, [r3, #10]
				BasetoUpData.AccNum[1] = WT931SensorData.AccNum[1];
 8002220:	4b5a      	ldr	r3, [pc, #360]	; (800238c <BtUF+0x264>)
 8002222:	885a      	ldrh	r2, [r3, #2]
 8002224:	4b55      	ldr	r3, [pc, #340]	; (800237c <BtUF+0x254>)
 8002226:	819a      	strh	r2, [r3, #12]
				BasetoUpData.AccNum[2] = WT931SensorData.AccNum[2];
 8002228:	4b58      	ldr	r3, [pc, #352]	; (800238c <BtUF+0x264>)
 800222a:	889a      	ldrh	r2, [r3, #4]
 800222c:	4b53      	ldr	r3, [pc, #332]	; (800237c <BtUF+0x254>)
 800222e:	81da      	strh	r2, [r3, #14]
				BasetoUpData.RotNum[0] = WT931SensorData.RotNum[0];
 8002230:	4b56      	ldr	r3, [pc, #344]	; (800238c <BtUF+0x264>)
 8002232:	88da      	ldrh	r2, [r3, #6]
 8002234:	4b51      	ldr	r3, [pc, #324]	; (800237c <BtUF+0x254>)
 8002236:	821a      	strh	r2, [r3, #16]
				BasetoUpData.RotNum[1] = WT931SensorData.RotNum[1];
 8002238:	4b54      	ldr	r3, [pc, #336]	; (800238c <BtUF+0x264>)
 800223a:	891a      	ldrh	r2, [r3, #8]
 800223c:	4b4f      	ldr	r3, [pc, #316]	; (800237c <BtUF+0x254>)
 800223e:	825a      	strh	r2, [r3, #18]
				BasetoUpData.RotNum[2] = WT931SensorData.RotNum[2];
 8002240:	4b52      	ldr	r3, [pc, #328]	; (800238c <BtUF+0x264>)
 8002242:	895a      	ldrh	r2, [r3, #10]
 8002244:	4b4d      	ldr	r3, [pc, #308]	; (800237c <BtUF+0x254>)
 8002246:	829a      	strh	r2, [r3, #20]
				BasetoUpData.EulNum[0] = WT931SensorData.EulNum[0];
 8002248:	4b50      	ldr	r3, [pc, #320]	; (800238c <BtUF+0x264>)
 800224a:	899a      	ldrh	r2, [r3, #12]
 800224c:	4b4b      	ldr	r3, [pc, #300]	; (800237c <BtUF+0x254>)
 800224e:	82da      	strh	r2, [r3, #22]
				BasetoUpData.EulNum[1] = WT931SensorData.EulNum[1];
 8002250:	4b4e      	ldr	r3, [pc, #312]	; (800238c <BtUF+0x264>)
 8002252:	89da      	ldrh	r2, [r3, #14]
 8002254:	4b49      	ldr	r3, [pc, #292]	; (800237c <BtUF+0x254>)
 8002256:	831a      	strh	r2, [r3, #24]
				BasetoUpData.EulNum[2] = WT931SensorData.EulNum[2];
 8002258:	4b4c      	ldr	r3, [pc, #304]	; (800238c <BtUF+0x264>)
 800225a:	8a1a      	ldrh	r2, [r3, #16]
 800225c:	4b47      	ldr	r3, [pc, #284]	; (800237c <BtUF+0x254>)
 800225e:	835a      	strh	r2, [r3, #26]
				BasetoUpData.MagNum[0] = WT931SensorData.MagNum[0];
 8002260:	4b4a      	ldr	r3, [pc, #296]	; (800238c <BtUF+0x264>)
 8002262:	8a5a      	ldrh	r2, [r3, #18]
 8002264:	4b45      	ldr	r3, [pc, #276]	; (800237c <BtUF+0x254>)
 8002266:	839a      	strh	r2, [r3, #28]
				BasetoUpData.MagNum[1] = WT931SensorData.MagNum[1];
 8002268:	4b48      	ldr	r3, [pc, #288]	; (800238c <BtUF+0x264>)
 800226a:	8a9a      	ldrh	r2, [r3, #20]
 800226c:	4b43      	ldr	r3, [pc, #268]	; (800237c <BtUF+0x254>)
 800226e:	83da      	strh	r2, [r3, #30]
				BasetoUpData.MagNum[2] = WT931SensorData.MagNum[2];
 8002270:	4b46      	ldr	r3, [pc, #280]	; (800238c <BtUF+0x264>)
 8002272:	8ada      	ldrh	r2, [r3, #22]
 8002274:	4b41      	ldr	r3, [pc, #260]	; (800237c <BtUF+0x254>)
 8002276:	841a      	strh	r2, [r3, #32]
				xSemaphoreGive(WT931SensorDataRWFlagHandle);
 8002278:	4b43      	ldr	r3, [pc, #268]	; (8002388 <BtUF+0x260>)
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	2300      	movs	r3, #0
 800227e:	2200      	movs	r2, #0
 8002280:	2100      	movs	r1, #0
 8002282:	f009 fb91 	bl	800b9a8 <xQueueGenericSend>
			}
			//温湿度大气压数据
			if (xSemaphoreTake(GY39SensorDataRWFlagHandle,
 8002286:	4b42      	ldr	r3, [pc, #264]	; (8002390 <BtUF+0x268>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f04f 31ff 	mov.w	r1, #4294967295
 800228e:	4618      	mov	r0, r3
 8002290:	f009 fd16 	bl	800bcc0 <xQueueSemaphoreTake>
 8002294:	4603      	mov	r3, r0
 8002296:	2b01      	cmp	r3, #1
 8002298:	d112      	bne.n	80022c0 <BtUF+0x198>
					portMAX_DELAY) == pdTRUE)
			{
				BasetoUpData.CabinBaro = GY39SensorData.Baro;
 800229a:	4b3e      	ldr	r3, [pc, #248]	; (8002394 <BtUF+0x26c>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4a37      	ldr	r2, [pc, #220]	; (800237c <BtUF+0x254>)
 80022a0:	6053      	str	r3, [r2, #4]
				BasetoUpData.CabinHum = GY39SensorData.Hum;
 80022a2:	4b3c      	ldr	r3, [pc, #240]	; (8002394 <BtUF+0x26c>)
 80022a4:	891a      	ldrh	r2, [r3, #8]
 80022a6:	4b35      	ldr	r3, [pc, #212]	; (800237c <BtUF+0x254>)
 80022a8:	811a      	strh	r2, [r3, #8]
				BasetoUpData.CabinTemperature = GY39SensorData.Temperature;
 80022aa:	4b3a      	ldr	r3, [pc, #232]	; (8002394 <BtUF+0x26c>)
 80022ac:	881a      	ldrh	r2, [r3, #0]
 80022ae:	4b33      	ldr	r3, [pc, #204]	; (800237c <BtUF+0x254>)
 80022b0:	805a      	strh	r2, [r3, #2]
				xSemaphoreGive(GY39SensorDataRWFlagHandle);
 80022b2:	4b37      	ldr	r3, [pc, #220]	; (8002390 <BtUF+0x268>)
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	2300      	movs	r3, #0
 80022b8:	2200      	movs	r2, #0
 80022ba:	2100      	movs	r1, #0
 80022bc:	f009 fb74 	bl	800b9a8 <xQueueGenericSend>
			}
			//水深水温数据
			if (xSemaphoreTake(DeepSensorDataRWFlagHandle,
 80022c0:	4b35      	ldr	r3, [pc, #212]	; (8002398 <BtUF+0x270>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f04f 31ff 	mov.w	r1, #4294967295
 80022c8:	4618      	mov	r0, r3
 80022ca:	f009 fcf9 	bl	800bcc0 <xQueueSemaphoreTake>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d10e      	bne.n	80022f2 <BtUF+0x1ca>
					portMAX_DELAY) == pdTRUE)
			{
				BasetoUpData.WaterDepth = DeepSensorData.WaterDepth;
 80022d4:	4b31      	ldr	r3, [pc, #196]	; (800239c <BtUF+0x274>)
 80022d6:	885a      	ldrh	r2, [r3, #2]
 80022d8:	4b28      	ldr	r3, [pc, #160]	; (800237c <BtUF+0x254>)
 80022da:	849a      	strh	r2, [r3, #36]	; 0x24
				BasetoUpData.WaterTemperature = DeepSensorData.WaterTemperature;
 80022dc:	4b2f      	ldr	r3, [pc, #188]	; (800239c <BtUF+0x274>)
 80022de:	881a      	ldrh	r2, [r3, #0]
 80022e0:	4b26      	ldr	r3, [pc, #152]	; (800237c <BtUF+0x254>)
 80022e2:	845a      	strh	r2, [r3, #34]	; 0x22
				xSemaphoreGive(DeepSensorDataRWFlagHandle);
 80022e4:	4b2c      	ldr	r3, [pc, #176]	; (8002398 <BtUF+0x270>)
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	2300      	movs	r3, #0
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	f009 fb5b 	bl	800b9a8 <xQueueGenericSend>
			}
			//声呐数据
			if (xSemaphoreTake(P30SensorDataRWFlagHandle,
 80022f2:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <BtUF+0x278>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f04f 31ff 	mov.w	r1, #4294967295
 80022fa:	4618      	mov	r0, r3
 80022fc:	f009 fce0 	bl	800bcc0 <xQueueSemaphoreTake>
 8002300:	4603      	mov	r3, r0
 8002302:	2b01      	cmp	r3, #1
 8002304:	d10e      	bne.n	8002324 <BtUF+0x1fc>
					portMAX_DELAY) == pdTRUE)
			{
				BasetoUpData.DepthToBottom = P30SensorData.DepthToBottom;
 8002306:	4b27      	ldr	r3, [pc, #156]	; (80023a4 <BtUF+0x27c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a1c      	ldr	r2, [pc, #112]	; (800237c <BtUF+0x254>)
 800230c:	6293      	str	r3, [r2, #40]	; 0x28
				BasetoUpData.Confidence = P30SensorData.Confidence;
 800230e:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <BtUF+0x27c>)
 8002310:	889a      	ldrh	r2, [r3, #4]
 8002312:	4b1a      	ldr	r3, [pc, #104]	; (800237c <BtUF+0x254>)
 8002314:	84da      	strh	r2, [r3, #38]	; 0x26
				xSemaphoreGive(P30SensorDataRWFlagHandle);
 8002316:	4b22      	ldr	r3, [pc, #136]	; (80023a0 <BtUF+0x278>)
 8002318:	6818      	ldr	r0, [r3, #0]
 800231a:	2300      	movs	r3, #0
 800231c:	2200      	movs	r2, #0
 800231e:	2100      	movs	r1, #0
 8002320:	f009 fb42 	bl	800b9a8 <xQueueGenericSend>
			}
			//上传数据
			if (xSemaphoreTake(UptoBaseDataRWFlagHandle,
 8002324:	4b16      	ldr	r3, [pc, #88]	; (8002380 <BtUF+0x258>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f04f 31ff 	mov.w	r1, #4294967295
 800232c:	4618      	mov	r0, r3
 800232e:	f009 fcc7 	bl	800bcc0 <xQueueSemaphoreTake>
 8002332:	4603      	mov	r3, r0
 8002334:	2b01      	cmp	r3, #1
 8002336:	d114      	bne.n	8002362 <BtUF+0x23a>
					portMAX_DELAY) == pdTRUE)
			{
				SendUpData(BasetoUpData);
 8002338:	4e10      	ldr	r6, [pc, #64]	; (800237c <BtUF+0x254>)
 800233a:	466d      	mov	r5, sp
 800233c:	f106 0410 	add.w	r4, r6, #16
 8002340:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002342:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002344:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002348:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800234c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002350:	f7fe fbac 	bl	8000aac <SendUpData>
				xSemaphoreGive(UptoBaseDataRWFlagHandle);
 8002354:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <BtUF+0x258>)
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	2300      	movs	r3, #0
 800235a:	2200      	movs	r2, #0
 800235c:	2100      	movs	r1, #0
 800235e:	f009 fb23 	bl	800b9a8 <xQueueGenericSend>
			}
		}
		SensorCarbin++;
 8002362:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002366:	3301      	adds	r3, #1
 8002368:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		HAL_IWDG_Refresh(&hiwdg1);
 800236c:	480e      	ldr	r0, [pc, #56]	; (80023a8 <BtUF+0x280>)
 800236e:	f004 fb83 	bl	8006a78 <HAL_IWDG_Refresh>
		if (SensorCarbin % 2 == 1) //发�?�推进器控制仓数�????
 8002372:	e6e0      	b.n	8002136 <BtUF+0xe>
 8002374:	200045e8 	.word	0x200045e8
 8002378:	20004828 	.word	0x20004828
 800237c:	2000420c 	.word	0x2000420c
 8002380:	20004560 	.word	0x20004560
 8002384:	58021000 	.word	0x58021000
 8002388:	20004364 	.word	0x20004364
 800238c:	20004240 	.word	0x20004240
 8002390:	2000423c 	.word	0x2000423c
 8002394:	20004564 	.word	0x20004564
 8002398:	20004200 	.word	0x20004200
 800239c:	2000467c 	.word	0x2000467c
 80023a0:	200041fc 	.word	0x200041fc
 80023a4:	20004820 	.word	0x20004820
 80023a8:	200040e4 	.word	0x200040e4

080023ac <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a04      	ldr	r2, [pc, #16]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d101      	bne.n	80023c2 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 80023be:	f001 f9d9 	bl	8003774 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40001000 	.word	0x40001000

080023d0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023d4:	b672      	cpsid	i
}
 80023d6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80023d8:	e7fe      	b.n	80023d8 <Error_Handler+0x8>
	...

080023dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e2:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <HAL_MspInit+0x38>)
 80023e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023e8:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <HAL_MspInit+0x38>)
 80023ea:	f043 0302 	orr.w	r3, r3, #2
 80023ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80023f2:	4b08      	ldr	r3, [pc, #32]	; (8002414 <HAL_MspInit+0x38>)
 80023f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	607b      	str	r3, [r7, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002400:	2200      	movs	r2, #0
 8002402:	210f      	movs	r1, #15
 8002404:	f06f 0001 	mvn.w	r0, #1
 8002408:	f001 fa98 	bl	800393c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	58024400 	.word	0x58024400

08002418 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b094      	sub	sp, #80	; 0x50
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a96      	ldr	r2, [pc, #600]	; (8002690 <HAL_UART_MspInit+0x278>)
 8002436:	4293      	cmp	r3, r2
 8002438:	f040 8091 	bne.w	800255e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800243c:	4b95      	ldr	r3, [pc, #596]	; (8002694 <HAL_UART_MspInit+0x27c>)
 800243e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002442:	4a94      	ldr	r2, [pc, #592]	; (8002694 <HAL_UART_MspInit+0x27c>)
 8002444:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002448:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800244c:	4b91      	ldr	r3, [pc, #580]	; (8002694 <HAL_UART_MspInit+0x27c>)
 800244e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002456:	63bb      	str	r3, [r7, #56]	; 0x38
 8002458:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245a:	4b8e      	ldr	r3, [pc, #568]	; (8002694 <HAL_UART_MspInit+0x27c>)
 800245c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002460:	4a8c      	ldr	r2, [pc, #560]	; (8002694 <HAL_UART_MspInit+0x27c>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800246a:	4b8a      	ldr	r3, [pc, #552]	; (8002694 <HAL_UART_MspInit+0x27c>)
 800246c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	637b      	str	r3, [r7, #52]	; 0x34
 8002476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002478:	2303      	movs	r3, #3
 800247a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002484:	2300      	movs	r3, #0
 8002486:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002488:	2308      	movs	r3, #8
 800248a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002490:	4619      	mov	r1, r3
 8002492:	4881      	ldr	r0, [pc, #516]	; (8002698 <HAL_UART_MspInit+0x280>)
 8002494:	f004 f8c0 	bl	8006618 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream5;
 8002498:	4b80      	ldr	r3, [pc, #512]	; (800269c <HAL_UART_MspInit+0x284>)
 800249a:	4a81      	ldr	r2, [pc, #516]	; (80026a0 <HAL_UART_MspInit+0x288>)
 800249c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800249e:	4b7f      	ldr	r3, [pc, #508]	; (800269c <HAL_UART_MspInit+0x284>)
 80024a0:	223f      	movs	r2, #63	; 0x3f
 80024a2:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024a4:	4b7d      	ldr	r3, [pc, #500]	; (800269c <HAL_UART_MspInit+0x284>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024aa:	4b7c      	ldr	r3, [pc, #496]	; (800269c <HAL_UART_MspInit+0x284>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024b0:	4b7a      	ldr	r3, [pc, #488]	; (800269c <HAL_UART_MspInit+0x284>)
 80024b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024b6:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024b8:	4b78      	ldr	r3, [pc, #480]	; (800269c <HAL_UART_MspInit+0x284>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024be:	4b77      	ldr	r3, [pc, #476]	; (800269c <HAL_UART_MspInit+0x284>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80024c4:	4b75      	ldr	r3, [pc, #468]	; (800269c <HAL_UART_MspInit+0x284>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024ca:	4b74      	ldr	r3, [pc, #464]	; (800269c <HAL_UART_MspInit+0x284>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024d0:	4b72      	ldr	r3, [pc, #456]	; (800269c <HAL_UART_MspInit+0x284>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80024d6:	4871      	ldr	r0, [pc, #452]	; (800269c <HAL_UART_MspInit+0x284>)
 80024d8:	f001 fa58 	bl	800398c <HAL_DMA_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80024e2:	f7ff ff75 	bl	80023d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a6c      	ldr	r2, [pc, #432]	; (800269c <HAL_UART_MspInit+0x284>)
 80024ea:	67da      	str	r2, [r3, #124]	; 0x7c
 80024ec:	4a6b      	ldr	r2, [pc, #428]	; (800269c <HAL_UART_MspInit+0x284>)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream6;
 80024f2:	4b6c      	ldr	r3, [pc, #432]	; (80026a4 <HAL_UART_MspInit+0x28c>)
 80024f4:	4a6c      	ldr	r2, [pc, #432]	; (80026a8 <HAL_UART_MspInit+0x290>)
 80024f6:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80024f8:	4b6a      	ldr	r3, [pc, #424]	; (80026a4 <HAL_UART_MspInit+0x28c>)
 80024fa:	2240      	movs	r2, #64	; 0x40
 80024fc:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024fe:	4b69      	ldr	r3, [pc, #420]	; (80026a4 <HAL_UART_MspInit+0x28c>)
 8002500:	2240      	movs	r2, #64	; 0x40
 8002502:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002504:	4b67      	ldr	r3, [pc, #412]	; (80026a4 <HAL_UART_MspInit+0x28c>)
 8002506:	2200      	movs	r2, #0
 8002508:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800250a:	4b66      	ldr	r3, [pc, #408]	; (80026a4 <HAL_UART_MspInit+0x28c>)
 800250c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002510:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002512:	4b64      	ldr	r3, [pc, #400]	; (80026a4 <HAL_UART_MspInit+0x28c>)
 8002514:	2200      	movs	r2, #0
 8002516:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002518:	4b62      	ldr	r3, [pc, #392]	; (80026a4 <HAL_UART_MspInit+0x28c>)
 800251a:	2200      	movs	r2, #0
 800251c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800251e:	4b61      	ldr	r3, [pc, #388]	; (80026a4 <HAL_UART_MspInit+0x28c>)
 8002520:	2200      	movs	r2, #0
 8002522:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002524:	4b5f      	ldr	r3, [pc, #380]	; (80026a4 <HAL_UART_MspInit+0x28c>)
 8002526:	2200      	movs	r2, #0
 8002528:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800252a:	4b5e      	ldr	r3, [pc, #376]	; (80026a4 <HAL_UART_MspInit+0x28c>)
 800252c:	2200      	movs	r2, #0
 800252e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002530:	485c      	ldr	r0, [pc, #368]	; (80026a4 <HAL_UART_MspInit+0x28c>)
 8002532:	f001 fa2b 	bl	800398c <HAL_DMA_Init>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800253c:	f7ff ff48 	bl	80023d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a58      	ldr	r2, [pc, #352]	; (80026a4 <HAL_UART_MspInit+0x28c>)
 8002544:	679a      	str	r2, [r3, #120]	; 0x78
 8002546:	4a57      	ldr	r2, [pc, #348]	; (80026a4 <HAL_UART_MspInit+0x28c>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800254c:	2200      	movs	r2, #0
 800254e:	2105      	movs	r1, #5
 8002550:	2034      	movs	r0, #52	; 0x34
 8002552:	f001 f9f3 	bl	800393c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002556:	2034      	movs	r0, #52	; 0x34
 8002558:	f001 fa0a 	bl	8003970 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800255c:	e2fc      	b.n	8002b58 <HAL_UART_MspInit+0x740>
  else if(huart->Instance==UART5)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a52      	ldr	r2, [pc, #328]	; (80026ac <HAL_UART_MspInit+0x294>)
 8002564:	4293      	cmp	r3, r2
 8002566:	f040 80ad 	bne.w	80026c4 <HAL_UART_MspInit+0x2ac>
    __HAL_RCC_UART5_CLK_ENABLE();
 800256a:	4b4a      	ldr	r3, [pc, #296]	; (8002694 <HAL_UART_MspInit+0x27c>)
 800256c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002570:	4a48      	ldr	r2, [pc, #288]	; (8002694 <HAL_UART_MspInit+0x27c>)
 8002572:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002576:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800257a:	4b46      	ldr	r3, [pc, #280]	; (8002694 <HAL_UART_MspInit+0x27c>)
 800257c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002584:	633b      	str	r3, [r7, #48]	; 0x30
 8002586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002588:	4b42      	ldr	r3, [pc, #264]	; (8002694 <HAL_UART_MspInit+0x27c>)
 800258a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800258e:	4a41      	ldr	r2, [pc, #260]	; (8002694 <HAL_UART_MspInit+0x27c>)
 8002590:	f043 0302 	orr.w	r3, r3, #2
 8002594:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002598:	4b3e      	ldr	r3, [pc, #248]	; (8002694 <HAL_UART_MspInit+0x27c>)
 800259a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80025a6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80025aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	2302      	movs	r3, #2
 80025ae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b4:	2300      	movs	r3, #0
 80025b6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80025b8:	230e      	movs	r3, #14
 80025ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025c0:	4619      	mov	r1, r3
 80025c2:	483b      	ldr	r0, [pc, #236]	; (80026b0 <HAL_UART_MspInit+0x298>)
 80025c4:	f004 f828 	bl	8006618 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream4;
 80025c8:	4b3a      	ldr	r3, [pc, #232]	; (80026b4 <HAL_UART_MspInit+0x29c>)
 80025ca:	4a3b      	ldr	r2, [pc, #236]	; (80026b8 <HAL_UART_MspInit+0x2a0>)
 80025cc:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 80025ce:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <HAL_UART_MspInit+0x29c>)
 80025d0:	2241      	movs	r2, #65	; 0x41
 80025d2:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025d4:	4b37      	ldr	r3, [pc, #220]	; (80026b4 <HAL_UART_MspInit+0x29c>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025da:	4b36      	ldr	r3, [pc, #216]	; (80026b4 <HAL_UART_MspInit+0x29c>)
 80025dc:	2200      	movs	r2, #0
 80025de:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025e0:	4b34      	ldr	r3, [pc, #208]	; (80026b4 <HAL_UART_MspInit+0x29c>)
 80025e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025e6:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025e8:	4b32      	ldr	r3, [pc, #200]	; (80026b4 <HAL_UART_MspInit+0x29c>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ee:	4b31      	ldr	r3, [pc, #196]	; (80026b4 <HAL_UART_MspInit+0x29c>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80025f4:	4b2f      	ldr	r3, [pc, #188]	; (80026b4 <HAL_UART_MspInit+0x29c>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025fa:	4b2e      	ldr	r3, [pc, #184]	; (80026b4 <HAL_UART_MspInit+0x29c>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002600:	4b2c      	ldr	r3, [pc, #176]	; (80026b4 <HAL_UART_MspInit+0x29c>)
 8002602:	2200      	movs	r2, #0
 8002604:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002606:	482b      	ldr	r0, [pc, #172]	; (80026b4 <HAL_UART_MspInit+0x29c>)
 8002608:	f001 f9c0 	bl	800398c <HAL_DMA_Init>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 8002612:	f7ff fedd 	bl	80023d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a26      	ldr	r2, [pc, #152]	; (80026b4 <HAL_UART_MspInit+0x29c>)
 800261a:	67da      	str	r2, [r3, #124]	; 0x7c
 800261c:	4a25      	ldr	r2, [pc, #148]	; (80026b4 <HAL_UART_MspInit+0x29c>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA2_Stream2;
 8002622:	4b26      	ldr	r3, [pc, #152]	; (80026bc <HAL_UART_MspInit+0x2a4>)
 8002624:	4a26      	ldr	r2, [pc, #152]	; (80026c0 <HAL_UART_MspInit+0x2a8>)
 8002626:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8002628:	4b24      	ldr	r3, [pc, #144]	; (80026bc <HAL_UART_MspInit+0x2a4>)
 800262a:	2242      	movs	r2, #66	; 0x42
 800262c:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800262e:	4b23      	ldr	r3, [pc, #140]	; (80026bc <HAL_UART_MspInit+0x2a4>)
 8002630:	2240      	movs	r2, #64	; 0x40
 8002632:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002634:	4b21      	ldr	r3, [pc, #132]	; (80026bc <HAL_UART_MspInit+0x2a4>)
 8002636:	2200      	movs	r2, #0
 8002638:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800263a:	4b20      	ldr	r3, [pc, #128]	; (80026bc <HAL_UART_MspInit+0x2a4>)
 800263c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002640:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002642:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <HAL_UART_MspInit+0x2a4>)
 8002644:	2200      	movs	r2, #0
 8002646:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002648:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <HAL_UART_MspInit+0x2a4>)
 800264a:	2200      	movs	r2, #0
 800264c:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800264e:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <HAL_UART_MspInit+0x2a4>)
 8002650:	2200      	movs	r2, #0
 8002652:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <HAL_UART_MspInit+0x2a4>)
 8002656:	2200      	movs	r2, #0
 8002658:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800265a:	4b18      	ldr	r3, [pc, #96]	; (80026bc <HAL_UART_MspInit+0x2a4>)
 800265c:	2200      	movs	r2, #0
 800265e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8002660:	4816      	ldr	r0, [pc, #88]	; (80026bc <HAL_UART_MspInit+0x2a4>)
 8002662:	f001 f993 	bl	800398c <HAL_DMA_Init>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <HAL_UART_MspInit+0x258>
      Error_Handler();
 800266c:	f7ff feb0 	bl	80023d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a12      	ldr	r2, [pc, #72]	; (80026bc <HAL_UART_MspInit+0x2a4>)
 8002674:	679a      	str	r2, [r3, #120]	; 0x78
 8002676:	4a11      	ldr	r2, [pc, #68]	; (80026bc <HAL_UART_MspInit+0x2a4>)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800267c:	2200      	movs	r2, #0
 800267e:	2105      	movs	r1, #5
 8002680:	2035      	movs	r0, #53	; 0x35
 8002682:	f001 f95b 	bl	800393c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002686:	2035      	movs	r0, #53	; 0x35
 8002688:	f001 f972 	bl	8003970 <HAL_NVIC_EnableIRQ>
}
 800268c:	e264      	b.n	8002b58 <HAL_UART_MspInit+0x740>
 800268e:	bf00      	nop
 8002690:	40004c00 	.word	0x40004c00
 8002694:	58024400 	.word	0x58024400
 8002698:	58020000 	.word	0x58020000
 800269c:	20003ff4 	.word	0x20003ff4
 80026a0:	40020088 	.word	0x40020088
 80026a4:	20004830 	.word	0x20004830
 80026a8:	400200a0 	.word	0x400200a0
 80026ac:	40005000 	.word	0x40005000
 80026b0:	58020400 	.word	0x58020400
 80026b4:	200047a8 	.word	0x200047a8
 80026b8:	40020070 	.word	0x40020070
 80026bc:	200048a8 	.word	0x200048a8
 80026c0:	40020440 	.word	0x40020440
  else if(huart->Instance==UART8)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a96      	ldr	r2, [pc, #600]	; (8002924 <HAL_UART_MspInit+0x50c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	f040 8091 	bne.w	80027f2 <HAL_UART_MspInit+0x3da>
    __HAL_RCC_UART8_CLK_ENABLE();
 80026d0:	4b95      	ldr	r3, [pc, #596]	; (8002928 <HAL_UART_MspInit+0x510>)
 80026d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026d6:	4a94      	ldr	r2, [pc, #592]	; (8002928 <HAL_UART_MspInit+0x510>)
 80026d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026e0:	4b91      	ldr	r3, [pc, #580]	; (8002928 <HAL_UART_MspInit+0x510>)
 80026e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026ee:	4b8e      	ldr	r3, [pc, #568]	; (8002928 <HAL_UART_MspInit+0x510>)
 80026f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026f4:	4a8c      	ldr	r2, [pc, #560]	; (8002928 <HAL_UART_MspInit+0x510>)
 80026f6:	f043 0310 	orr.w	r3, r3, #16
 80026fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026fe:	4b8a      	ldr	r3, [pc, #552]	; (8002928 <HAL_UART_MspInit+0x510>)
 8002700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002704:	f003 0310 	and.w	r3, r3, #16
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800270c:	2303      	movs	r3, #3
 800270e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002710:	2302      	movs	r3, #2
 8002712:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002718:	2300      	movs	r3, #0
 800271a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800271c:	2308      	movs	r3, #8
 800271e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002720:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002724:	4619      	mov	r1, r3
 8002726:	4881      	ldr	r0, [pc, #516]	; (800292c <HAL_UART_MspInit+0x514>)
 8002728:	f003 ff76 	bl	8006618 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream7;
 800272c:	4b80      	ldr	r3, [pc, #512]	; (8002930 <HAL_UART_MspInit+0x518>)
 800272e:	4a81      	ldr	r2, [pc, #516]	; (8002934 <HAL_UART_MspInit+0x51c>)
 8002730:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8002732:	4b7f      	ldr	r3, [pc, #508]	; (8002930 <HAL_UART_MspInit+0x518>)
 8002734:	2251      	movs	r2, #81	; 0x51
 8002736:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002738:	4b7d      	ldr	r3, [pc, #500]	; (8002930 <HAL_UART_MspInit+0x518>)
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800273e:	4b7c      	ldr	r3, [pc, #496]	; (8002930 <HAL_UART_MspInit+0x518>)
 8002740:	2200      	movs	r2, #0
 8002742:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002744:	4b7a      	ldr	r3, [pc, #488]	; (8002930 <HAL_UART_MspInit+0x518>)
 8002746:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800274a:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800274c:	4b78      	ldr	r3, [pc, #480]	; (8002930 <HAL_UART_MspInit+0x518>)
 800274e:	2200      	movs	r2, #0
 8002750:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002752:	4b77      	ldr	r3, [pc, #476]	; (8002930 <HAL_UART_MspInit+0x518>)
 8002754:	2200      	movs	r2, #0
 8002756:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8002758:	4b75      	ldr	r3, [pc, #468]	; (8002930 <HAL_UART_MspInit+0x518>)
 800275a:	2200      	movs	r2, #0
 800275c:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 800275e:	4b74      	ldr	r3, [pc, #464]	; (8002930 <HAL_UART_MspInit+0x518>)
 8002760:	2200      	movs	r2, #0
 8002762:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002764:	4b72      	ldr	r3, [pc, #456]	; (8002930 <HAL_UART_MspInit+0x518>)
 8002766:	2200      	movs	r2, #0
 8002768:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 800276a:	4871      	ldr	r0, [pc, #452]	; (8002930 <HAL_UART_MspInit+0x518>)
 800276c:	f001 f90e 	bl	800398c <HAL_DMA_Init>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_UART_MspInit+0x362>
      Error_Handler();
 8002776:	f7ff fe2b 	bl	80023d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a6c      	ldr	r2, [pc, #432]	; (8002930 <HAL_UART_MspInit+0x518>)
 800277e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002780:	4a6b      	ldr	r2, [pc, #428]	; (8002930 <HAL_UART_MspInit+0x518>)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart8_tx.Instance = DMA2_Stream0;
 8002786:	4b6c      	ldr	r3, [pc, #432]	; (8002938 <HAL_UART_MspInit+0x520>)
 8002788:	4a6c      	ldr	r2, [pc, #432]	; (800293c <HAL_UART_MspInit+0x524>)
 800278a:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 800278c:	4b6a      	ldr	r3, [pc, #424]	; (8002938 <HAL_UART_MspInit+0x520>)
 800278e:	2252      	movs	r2, #82	; 0x52
 8002790:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002792:	4b69      	ldr	r3, [pc, #420]	; (8002938 <HAL_UART_MspInit+0x520>)
 8002794:	2240      	movs	r2, #64	; 0x40
 8002796:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002798:	4b67      	ldr	r3, [pc, #412]	; (8002938 <HAL_UART_MspInit+0x520>)
 800279a:	2200      	movs	r2, #0
 800279c:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 800279e:	4b66      	ldr	r3, [pc, #408]	; (8002938 <HAL_UART_MspInit+0x520>)
 80027a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027a4:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027a6:	4b64      	ldr	r3, [pc, #400]	; (8002938 <HAL_UART_MspInit+0x520>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027ac:	4b62      	ldr	r3, [pc, #392]	; (8002938 <HAL_UART_MspInit+0x520>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 80027b2:	4b61      	ldr	r3, [pc, #388]	; (8002938 <HAL_UART_MspInit+0x520>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027b8:	4b5f      	ldr	r3, [pc, #380]	; (8002938 <HAL_UART_MspInit+0x520>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027be:	4b5e      	ldr	r3, [pc, #376]	; (8002938 <HAL_UART_MspInit+0x520>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 80027c4:	485c      	ldr	r0, [pc, #368]	; (8002938 <HAL_UART_MspInit+0x520>)
 80027c6:	f001 f8e1 	bl	800398c <HAL_DMA_Init>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_UART_MspInit+0x3bc>
      Error_Handler();
 80027d0:	f7ff fdfe 	bl	80023d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a58      	ldr	r2, [pc, #352]	; (8002938 <HAL_UART_MspInit+0x520>)
 80027d8:	679a      	str	r2, [r3, #120]	; 0x78
 80027da:	4a57      	ldr	r2, [pc, #348]	; (8002938 <HAL_UART_MspInit+0x520>)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 80027e0:	2200      	movs	r2, #0
 80027e2:	2105      	movs	r1, #5
 80027e4:	2053      	movs	r0, #83	; 0x53
 80027e6:	f001 f8a9 	bl	800393c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80027ea:	2053      	movs	r0, #83	; 0x53
 80027ec:	f001 f8c0 	bl	8003970 <HAL_NVIC_EnableIRQ>
}
 80027f0:	e1b2      	b.n	8002b58 <HAL_UART_MspInit+0x740>
  else if(huart->Instance==USART1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a52      	ldr	r2, [pc, #328]	; (8002940 <HAL_UART_MspInit+0x528>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	f040 80ad 	bne.w	8002958 <HAL_UART_MspInit+0x540>
    __HAL_RCC_USART1_CLK_ENABLE();
 80027fe:	4b4a      	ldr	r3, [pc, #296]	; (8002928 <HAL_UART_MspInit+0x510>)
 8002800:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002804:	4a48      	ldr	r2, [pc, #288]	; (8002928 <HAL_UART_MspInit+0x510>)
 8002806:	f043 0310 	orr.w	r3, r3, #16
 800280a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800280e:	4b46      	ldr	r3, [pc, #280]	; (8002928 <HAL_UART_MspInit+0x510>)
 8002810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	623b      	str	r3, [r7, #32]
 800281a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800281c:	4b42      	ldr	r3, [pc, #264]	; (8002928 <HAL_UART_MspInit+0x510>)
 800281e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002822:	4a41      	ldr	r2, [pc, #260]	; (8002928 <HAL_UART_MspInit+0x510>)
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800282c:	4b3e      	ldr	r3, [pc, #248]	; (8002928 <HAL_UART_MspInit+0x510>)
 800282e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	61fb      	str	r3, [r7, #28]
 8002838:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800283a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800283e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002840:	2302      	movs	r3, #2
 8002842:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002848:	2300      	movs	r3, #0
 800284a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800284c:	2304      	movs	r3, #4
 800284e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002850:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002854:	4619      	mov	r1, r3
 8002856:	483b      	ldr	r0, [pc, #236]	; (8002944 <HAL_UART_MspInit+0x52c>)
 8002858:	f003 fede 	bl	8006618 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800285c:	4b3a      	ldr	r3, [pc, #232]	; (8002948 <HAL_UART_MspInit+0x530>)
 800285e:	4a3b      	ldr	r2, [pc, #236]	; (800294c <HAL_UART_MspInit+0x534>)
 8002860:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002862:	4b39      	ldr	r3, [pc, #228]	; (8002948 <HAL_UART_MspInit+0x530>)
 8002864:	2229      	movs	r2, #41	; 0x29
 8002866:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002868:	4b37      	ldr	r3, [pc, #220]	; (8002948 <HAL_UART_MspInit+0x530>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800286e:	4b36      	ldr	r3, [pc, #216]	; (8002948 <HAL_UART_MspInit+0x530>)
 8002870:	2200      	movs	r2, #0
 8002872:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002874:	4b34      	ldr	r3, [pc, #208]	; (8002948 <HAL_UART_MspInit+0x530>)
 8002876:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800287a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800287c:	4b32      	ldr	r3, [pc, #200]	; (8002948 <HAL_UART_MspInit+0x530>)
 800287e:	2200      	movs	r2, #0
 8002880:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002882:	4b31      	ldr	r3, [pc, #196]	; (8002948 <HAL_UART_MspInit+0x530>)
 8002884:	2200      	movs	r2, #0
 8002886:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002888:	4b2f      	ldr	r3, [pc, #188]	; (8002948 <HAL_UART_MspInit+0x530>)
 800288a:	2200      	movs	r2, #0
 800288c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800288e:	4b2e      	ldr	r3, [pc, #184]	; (8002948 <HAL_UART_MspInit+0x530>)
 8002890:	2200      	movs	r2, #0
 8002892:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002894:	4b2c      	ldr	r3, [pc, #176]	; (8002948 <HAL_UART_MspInit+0x530>)
 8002896:	2200      	movs	r2, #0
 8002898:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800289a:	482b      	ldr	r0, [pc, #172]	; (8002948 <HAL_UART_MspInit+0x530>)
 800289c:	f001 f876 	bl	800398c <HAL_DMA_Init>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_UART_MspInit+0x492>
      Error_Handler();
 80028a6:	f7ff fd93 	bl	80023d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a26      	ldr	r2, [pc, #152]	; (8002948 <HAL_UART_MspInit+0x530>)
 80028ae:	67da      	str	r2, [r3, #124]	; 0x7c
 80028b0:	4a25      	ldr	r2, [pc, #148]	; (8002948 <HAL_UART_MspInit+0x530>)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80028b6:	4b26      	ldr	r3, [pc, #152]	; (8002950 <HAL_UART_MspInit+0x538>)
 80028b8:	4a26      	ldr	r2, [pc, #152]	; (8002954 <HAL_UART_MspInit+0x53c>)
 80028ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80028bc:	4b24      	ldr	r3, [pc, #144]	; (8002950 <HAL_UART_MspInit+0x538>)
 80028be:	222a      	movs	r2, #42	; 0x2a
 80028c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028c2:	4b23      	ldr	r3, [pc, #140]	; (8002950 <HAL_UART_MspInit+0x538>)
 80028c4:	2240      	movs	r2, #64	; 0x40
 80028c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c8:	4b21      	ldr	r3, [pc, #132]	; (8002950 <HAL_UART_MspInit+0x538>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028ce:	4b20      	ldr	r3, [pc, #128]	; (8002950 <HAL_UART_MspInit+0x538>)
 80028d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028d4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028d6:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <HAL_UART_MspInit+0x538>)
 80028d8:	2200      	movs	r2, #0
 80028da:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028dc:	4b1c      	ldr	r3, [pc, #112]	; (8002950 <HAL_UART_MspInit+0x538>)
 80028de:	2200      	movs	r2, #0
 80028e0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80028e2:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <HAL_UART_MspInit+0x538>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028e8:	4b19      	ldr	r3, [pc, #100]	; (8002950 <HAL_UART_MspInit+0x538>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ee:	4b18      	ldr	r3, [pc, #96]	; (8002950 <HAL_UART_MspInit+0x538>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80028f4:	4816      	ldr	r0, [pc, #88]	; (8002950 <HAL_UART_MspInit+0x538>)
 80028f6:	f001 f849 	bl	800398c <HAL_DMA_Init>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_UART_MspInit+0x4ec>
      Error_Handler();
 8002900:	f7ff fd66 	bl	80023d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a12      	ldr	r2, [pc, #72]	; (8002950 <HAL_UART_MspInit+0x538>)
 8002908:	679a      	str	r2, [r3, #120]	; 0x78
 800290a:	4a11      	ldr	r2, [pc, #68]	; (8002950 <HAL_UART_MspInit+0x538>)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002910:	2200      	movs	r2, #0
 8002912:	2105      	movs	r1, #5
 8002914:	2025      	movs	r0, #37	; 0x25
 8002916:	f001 f811 	bl	800393c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800291a:	2025      	movs	r0, #37	; 0x25
 800291c:	f001 f828 	bl	8003970 <HAL_NVIC_EnableIRQ>
}
 8002920:	e11a      	b.n	8002b58 <HAL_UART_MspInit+0x740>
 8002922:	bf00      	nop
 8002924:	40007c00 	.word	0x40007c00
 8002928:	58024400 	.word	0x58024400
 800292c:	58021000 	.word	0x58021000
 8002930:	20004458 	.word	0x20004458
 8002934:	400200b8 	.word	0x400200b8
 8002938:	20004570 	.word	0x20004570
 800293c:	40020410 	.word	0x40020410
 8002940:	40011000 	.word	0x40011000
 8002944:	58020400 	.word	0x58020400
 8002948:	20004368 	.word	0x20004368
 800294c:	40020010 	.word	0x40020010
 8002950:	2000425c 	.word	0x2000425c
 8002954:	40020028 	.word	0x40020028
  else if(huart->Instance==USART2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a80      	ldr	r2, [pc, #512]	; (8002b60 <HAL_UART_MspInit+0x748>)
 800295e:	4293      	cmp	r3, r2
 8002960:	f040 8091 	bne.w	8002a86 <HAL_UART_MspInit+0x66e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002964:	4b7f      	ldr	r3, [pc, #508]	; (8002b64 <HAL_UART_MspInit+0x74c>)
 8002966:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800296a:	4a7e      	ldr	r2, [pc, #504]	; (8002b64 <HAL_UART_MspInit+0x74c>)
 800296c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002970:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002974:	4b7b      	ldr	r3, [pc, #492]	; (8002b64 <HAL_UART_MspInit+0x74c>)
 8002976:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	61bb      	str	r3, [r7, #24]
 8002980:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002982:	4b78      	ldr	r3, [pc, #480]	; (8002b64 <HAL_UART_MspInit+0x74c>)
 8002984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002988:	4a76      	ldr	r2, [pc, #472]	; (8002b64 <HAL_UART_MspInit+0x74c>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002992:	4b74      	ldr	r3, [pc, #464]	; (8002b64 <HAL_UART_MspInit+0x74c>)
 8002994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029a0:	230c      	movs	r3, #12
 80029a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a4:	2302      	movs	r3, #2
 80029a6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	2300      	movs	r3, #0
 80029ae:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029b0:	2307      	movs	r3, #7
 80029b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029b8:	4619      	mov	r1, r3
 80029ba:	486b      	ldr	r0, [pc, #428]	; (8002b68 <HAL_UART_MspInit+0x750>)
 80029bc:	f003 fe2c 	bl	8006618 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream2;
 80029c0:	4b6a      	ldr	r3, [pc, #424]	; (8002b6c <HAL_UART_MspInit+0x754>)
 80029c2:	4a6b      	ldr	r2, [pc, #428]	; (8002b70 <HAL_UART_MspInit+0x758>)
 80029c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80029c6:	4b69      	ldr	r3, [pc, #420]	; (8002b6c <HAL_UART_MspInit+0x754>)
 80029c8:	222b      	movs	r2, #43	; 0x2b
 80029ca:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029cc:	4b67      	ldr	r3, [pc, #412]	; (8002b6c <HAL_UART_MspInit+0x754>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d2:	4b66      	ldr	r3, [pc, #408]	; (8002b6c <HAL_UART_MspInit+0x754>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029d8:	4b64      	ldr	r3, [pc, #400]	; (8002b6c <HAL_UART_MspInit+0x754>)
 80029da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029de:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029e0:	4b62      	ldr	r3, [pc, #392]	; (8002b6c <HAL_UART_MspInit+0x754>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029e6:	4b61      	ldr	r3, [pc, #388]	; (8002b6c <HAL_UART_MspInit+0x754>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80029ec:	4b5f      	ldr	r3, [pc, #380]	; (8002b6c <HAL_UART_MspInit+0x754>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029f2:	4b5e      	ldr	r3, [pc, #376]	; (8002b6c <HAL_UART_MspInit+0x754>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029f8:	4b5c      	ldr	r3, [pc, #368]	; (8002b6c <HAL_UART_MspInit+0x754>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80029fe:	485b      	ldr	r0, [pc, #364]	; (8002b6c <HAL_UART_MspInit+0x754>)
 8002a00:	f000 ffc4 	bl	800398c <HAL_DMA_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_UART_MspInit+0x5f6>
      Error_Handler();
 8002a0a:	f7ff fce1 	bl	80023d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a56      	ldr	r2, [pc, #344]	; (8002b6c <HAL_UART_MspInit+0x754>)
 8002a12:	67da      	str	r2, [r3, #124]	; 0x7c
 8002a14:	4a55      	ldr	r2, [pc, #340]	; (8002b6c <HAL_UART_MspInit+0x754>)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA2_Stream1;
 8002a1a:	4b56      	ldr	r3, [pc, #344]	; (8002b74 <HAL_UART_MspInit+0x75c>)
 8002a1c:	4a56      	ldr	r2, [pc, #344]	; (8002b78 <HAL_UART_MspInit+0x760>)
 8002a1e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002a20:	4b54      	ldr	r3, [pc, #336]	; (8002b74 <HAL_UART_MspInit+0x75c>)
 8002a22:	222c      	movs	r2, #44	; 0x2c
 8002a24:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a26:	4b53      	ldr	r3, [pc, #332]	; (8002b74 <HAL_UART_MspInit+0x75c>)
 8002a28:	2240      	movs	r2, #64	; 0x40
 8002a2a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a2c:	4b51      	ldr	r3, [pc, #324]	; (8002b74 <HAL_UART_MspInit+0x75c>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a32:	4b50      	ldr	r3, [pc, #320]	; (8002b74 <HAL_UART_MspInit+0x75c>)
 8002a34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a38:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a3a:	4b4e      	ldr	r3, [pc, #312]	; (8002b74 <HAL_UART_MspInit+0x75c>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a40:	4b4c      	ldr	r3, [pc, #304]	; (8002b74 <HAL_UART_MspInit+0x75c>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002a46:	4b4b      	ldr	r3, [pc, #300]	; (8002b74 <HAL_UART_MspInit+0x75c>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a4c:	4b49      	ldr	r3, [pc, #292]	; (8002b74 <HAL_UART_MspInit+0x75c>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a52:	4b48      	ldr	r3, [pc, #288]	; (8002b74 <HAL_UART_MspInit+0x75c>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002a58:	4846      	ldr	r0, [pc, #280]	; (8002b74 <HAL_UART_MspInit+0x75c>)
 8002a5a:	f000 ff97 	bl	800398c <HAL_DMA_Init>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_UART_MspInit+0x650>
      Error_Handler();
 8002a64:	f7ff fcb4 	bl	80023d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a42      	ldr	r2, [pc, #264]	; (8002b74 <HAL_UART_MspInit+0x75c>)
 8002a6c:	679a      	str	r2, [r3, #120]	; 0x78
 8002a6e:	4a41      	ldr	r2, [pc, #260]	; (8002b74 <HAL_UART_MspInit+0x75c>)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002a74:	2200      	movs	r2, #0
 8002a76:	2105      	movs	r1, #5
 8002a78:	2026      	movs	r0, #38	; 0x26
 8002a7a:	f000 ff5f 	bl	800393c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a7e:	2026      	movs	r0, #38	; 0x26
 8002a80:	f000 ff76 	bl	8003970 <HAL_NVIC_EnableIRQ>
}
 8002a84:	e068      	b.n	8002b58 <HAL_UART_MspInit+0x740>
  else if(huart->Instance==USART3)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a3c      	ldr	r2, [pc, #240]	; (8002b7c <HAL_UART_MspInit+0x764>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d163      	bne.n	8002b58 <HAL_UART_MspInit+0x740>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a90:	4b34      	ldr	r3, [pc, #208]	; (8002b64 <HAL_UART_MspInit+0x74c>)
 8002a92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a96:	4a33      	ldr	r2, [pc, #204]	; (8002b64 <HAL_UART_MspInit+0x74c>)
 8002a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002aa0:	4b30      	ldr	r3, [pc, #192]	; (8002b64 <HAL_UART_MspInit+0x74c>)
 8002aa2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aae:	4b2d      	ldr	r3, [pc, #180]	; (8002b64 <HAL_UART_MspInit+0x74c>)
 8002ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ab4:	4a2b      	ldr	r2, [pc, #172]	; (8002b64 <HAL_UART_MspInit+0x74c>)
 8002ab6:	f043 0302 	orr.w	r3, r3, #2
 8002aba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002abe:	4b29      	ldr	r3, [pc, #164]	; (8002b64 <HAL_UART_MspInit+0x74c>)
 8002ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002acc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ada:	2300      	movs	r3, #0
 8002adc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ade:	2307      	movs	r3, #7
 8002ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4825      	ldr	r0, [pc, #148]	; (8002b80 <HAL_UART_MspInit+0x768>)
 8002aea:	f003 fd95 	bl	8006618 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream3;
 8002aee:	4b25      	ldr	r3, [pc, #148]	; (8002b84 <HAL_UART_MspInit+0x76c>)
 8002af0:	4a25      	ldr	r2, [pc, #148]	; (8002b88 <HAL_UART_MspInit+0x770>)
 8002af2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002af4:	4b23      	ldr	r3, [pc, #140]	; (8002b84 <HAL_UART_MspInit+0x76c>)
 8002af6:	222d      	movs	r2, #45	; 0x2d
 8002af8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002afa:	4b22      	ldr	r3, [pc, #136]	; (8002b84 <HAL_UART_MspInit+0x76c>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b00:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <HAL_UART_MspInit+0x76c>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b06:	4b1f      	ldr	r3, [pc, #124]	; (8002b84 <HAL_UART_MspInit+0x76c>)
 8002b08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b0c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b0e:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <HAL_UART_MspInit+0x76c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b14:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <HAL_UART_MspInit+0x76c>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002b1a:	4b1a      	ldr	r3, [pc, #104]	; (8002b84 <HAL_UART_MspInit+0x76c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b20:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <HAL_UART_MspInit+0x76c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b26:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <HAL_UART_MspInit+0x76c>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002b2c:	4815      	ldr	r0, [pc, #84]	; (8002b84 <HAL_UART_MspInit+0x76c>)
 8002b2e:	f000 ff2d 	bl	800398c <HAL_DMA_Init>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_UART_MspInit+0x724>
      Error_Handler();
 8002b38:	f7ff fc4a 	bl	80023d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a11      	ldr	r2, [pc, #68]	; (8002b84 <HAL_UART_MspInit+0x76c>)
 8002b40:	67da      	str	r2, [r3, #124]	; 0x7c
 8002b42:	4a10      	ldr	r2, [pc, #64]	; (8002b84 <HAL_UART_MspInit+0x76c>)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2105      	movs	r1, #5
 8002b4c:	2027      	movs	r0, #39	; 0x27
 8002b4e:	f000 fef5 	bl	800393c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b52:	2027      	movs	r0, #39	; 0x27
 8002b54:	f000 ff0c 	bl	8003970 <HAL_NVIC_EnableIRQ>
}
 8002b58:	bf00      	nop
 8002b5a:	3750      	adds	r7, #80	; 0x50
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40004400 	.word	0x40004400
 8002b64:	58024400 	.word	0x58024400
 8002b68:	58020000 	.word	0x58020000
 8002b6c:	2000406c 	.word	0x2000406c
 8002b70:	40020040 	.word	0x40020040
 8002b74:	200043e0 	.word	0x200043e0
 8002b78:	40020428 	.word	0x40020428
 8002b7c:	40004800 	.word	0x40004800
 8002b80:	58020400 	.word	0x58020400
 8002b84:	200040f4 	.word	0x200040f4
 8002b88:	40020058 	.word	0x40020058

08002b8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b090      	sub	sp, #64	; 0x40
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b0f      	cmp	r3, #15
 8002b98:	d827      	bhi.n	8002bea <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	2036      	movs	r0, #54	; 0x36
 8002ba0:	f000 fecc 	bl	800393c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ba4:	2036      	movs	r0, #54	; 0x36
 8002ba6:	f000 fee3 	bl	8003970 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002baa:	4a29      	ldr	r2, [pc, #164]	; (8002c50 <HAL_InitTick+0xc4>)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002bb0:	4b28      	ldr	r3, [pc, #160]	; (8002c54 <HAL_InitTick+0xc8>)
 8002bb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bb6:	4a27      	ldr	r2, [pc, #156]	; (8002c54 <HAL_InitTick+0xc8>)
 8002bb8:	f043 0310 	orr.w	r3, r3, #16
 8002bbc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bc0:	4b24      	ldr	r3, [pc, #144]	; (8002c54 <HAL_InitTick+0xc8>)
 8002bc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bce:	f107 0210 	add.w	r2, r7, #16
 8002bd2:	f107 0314 	add.w	r3, r7, #20
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f004 ff33 	bl	8007a44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d106      	bne.n	8002bf6 <HAL_InitTick+0x6a>
 8002be8:	e001      	b.n	8002bee <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e02b      	b.n	8002c46 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002bee:	f004 fefd 	bl	80079ec <HAL_RCC_GetPCLK1Freq>
 8002bf2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002bf4:	e004      	b.n	8002c00 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002bf6:	f004 fef9 	bl	80079ec <HAL_RCC_GetPCLK1Freq>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c02:	4a15      	ldr	r2, [pc, #84]	; (8002c58 <HAL_InitTick+0xcc>)
 8002c04:	fba2 2303 	umull	r2, r3, r2, r3
 8002c08:	0c9b      	lsrs	r3, r3, #18
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c0e:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <HAL_InitTick+0xd0>)
 8002c10:	4a13      	ldr	r2, [pc, #76]	; (8002c60 <HAL_InitTick+0xd4>)
 8002c12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002c14:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <HAL_InitTick+0xd0>)
 8002c16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c1a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c1c:	4a0f      	ldr	r2, [pc, #60]	; (8002c5c <HAL_InitTick+0xd0>)
 8002c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c20:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c22:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <HAL_InitTick+0xd0>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <HAL_InitTick+0xd0>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002c2e:	480b      	ldr	r0, [pc, #44]	; (8002c5c <HAL_InitTick+0xd0>)
 8002c30:	f006 faac 	bl	800918c <HAL_TIM_Base_Init>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d104      	bne.n	8002c44 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002c3a:	4808      	ldr	r0, [pc, #32]	; (8002c5c <HAL_InitTick+0xd0>)
 8002c3c:	f006 fb08 	bl	8009250 <HAL_TIM_Base_Start_IT>
 8002c40:	4603      	mov	r3, r0
 8002c42:	e000      	b.n	8002c46 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3740      	adds	r7, #64	; 0x40
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000008 	.word	0x20000008
 8002c54:	58024400 	.word	0x58024400
 8002c58:	431bde83 	.word	0x431bde83
 8002c5c:	20004958 	.word	0x20004958
 8002c60:	40001000 	.word	0x40001000

08002c64 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8002c68:	e7fe      	b.n	8002c68 <NMI_Handler+0x4>

08002c6a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8002c6e:	e7fe      	b.n	8002c6e <HardFault_Handler+0x4>

08002c70 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8002c74:	e7fe      	b.n	8002c74 <MemManage_Handler+0x4>

08002c76 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8002c76:	b480      	push	{r7}
 8002c78:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8002c7a:	e7fe      	b.n	8002c7a <BusFault_Handler+0x4>

08002c7c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8002c80:	e7fe      	b.n	8002c80 <UsageFault_Handler+0x4>

08002c82 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8002c82:	b480      	push	{r7}
 8002c84:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <DMA1_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA1 stream0 global interrupt.
 */
void DMA1_Stream0_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

	/* USER CODE END DMA1_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c94:	4802      	ldr	r0, [pc, #8]	; (8002ca0 <DMA1_Stream0_IRQHandler+0x10>)
 8002c96:	f002 f9a1 	bl	8004fdc <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

	/* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20004368 	.word	0x20004368

08002ca4 <DMA1_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA1 stream1 global interrupt.
 */
void DMA1_Stream1_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

	/* USER CODE END DMA1_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002ca8:	4802      	ldr	r0, [pc, #8]	; (8002cb4 <DMA1_Stream1_IRQHandler+0x10>)
 8002caa:	f002 f997 	bl	8004fdc <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

	/* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	2000425c 	.word	0x2000425c

08002cb8 <DMA1_Stream2_IRQHandler>:

/**
 * @brief This function handles DMA1 stream2 global interrupt.
 */
void DMA1_Stream2_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

	/* USER CODE END DMA1_Stream2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002cbc:	4802      	ldr	r0, [pc, #8]	; (8002cc8 <DMA1_Stream2_IRQHandler+0x10>)
 8002cbe:	f002 f98d 	bl	8004fdc <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

	/* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	2000406c 	.word	0x2000406c

08002ccc <DMA1_Stream3_IRQHandler>:

/**
 * @brief This function handles DMA1 stream3 global interrupt.
 */
void DMA1_Stream3_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

	/* USER CODE END DMA1_Stream3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002cd0:	4802      	ldr	r0, [pc, #8]	; (8002cdc <DMA1_Stream3_IRQHandler+0x10>)
 8002cd2:	f002 f983 	bl	8004fdc <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

	/* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	200040f4 	.word	0x200040f4

08002ce0 <DMA1_Stream4_IRQHandler>:

/**
 * @brief This function handles DMA1 stream4 global interrupt.
 */
void DMA1_Stream4_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

	/* USER CODE END DMA1_Stream4_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002ce4:	4802      	ldr	r0, [pc, #8]	; (8002cf0 <DMA1_Stream4_IRQHandler+0x10>)
 8002ce6:	f002 f979 	bl	8004fdc <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

	/* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	200047a8 	.word	0x200047a8

08002cf4 <DMA1_Stream5_IRQHandler>:

/**
 * @brief This function handles DMA1 stream5 global interrupt.
 */
void DMA1_Stream5_IRQHandler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

	/* USER CODE END DMA1_Stream5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002cf8:	4802      	ldr	r0, [pc, #8]	; (8002d04 <DMA1_Stream5_IRQHandler+0x10>)
 8002cfa:	f002 f96f 	bl	8004fdc <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

	/* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20003ff4 	.word	0x20003ff4

08002d08 <DMA1_Stream6_IRQHandler>:

/**
 * @brief This function handles DMA1 stream6 global interrupt.
 */
void DMA1_Stream6_IRQHandler(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

	/* USER CODE END DMA1_Stream6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002d0c:	4802      	ldr	r0, [pc, #8]	; (8002d18 <DMA1_Stream6_IRQHandler+0x10>)
 8002d0e:	f002 f965 	bl	8004fdc <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

	/* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20004830 	.word	0x20004830

08002d1c <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE);
 8002d26:	4b40      	ldr	r3, [pc, #256]	; (8002e28 <USART1_IRQHandler+0x10c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b10      	cmp	r3, #16
 8002d32:	bf0c      	ite	eq
 8002d34:	2301      	moveq	r3, #1
 8002d36:	2300      	movne	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d06b      	beq.n	8002e1a <USART1_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8002d42:	4b39      	ldr	r3, [pc, #228]	; (8002e28 <USART1_IRQHandler+0x10c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2210      	movs	r2, #16
 8002d48:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart1);
 8002d4a:	4837      	ldr	r0, [pc, #220]	; (8002e28 <USART1_IRQHandler+0x10c>)
 8002d4c:	f006 fe06 	bl	800995c <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8002d50:	4b36      	ldr	r3, [pc, #216]	; (8002e2c <USART1_IRQHandler+0x110>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a36      	ldr	r2, [pc, #216]	; (8002e30 <USART1_IRQHandler+0x114>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d04a      	beq.n	8002df0 <USART1_IRQHandler+0xd4>
 8002d5a:	4b34      	ldr	r3, [pc, #208]	; (8002e2c <USART1_IRQHandler+0x110>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a35      	ldr	r2, [pc, #212]	; (8002e34 <USART1_IRQHandler+0x118>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d045      	beq.n	8002df0 <USART1_IRQHandler+0xd4>
 8002d64:	4b31      	ldr	r3, [pc, #196]	; (8002e2c <USART1_IRQHandler+0x110>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a33      	ldr	r2, [pc, #204]	; (8002e38 <USART1_IRQHandler+0x11c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d040      	beq.n	8002df0 <USART1_IRQHandler+0xd4>
 8002d6e:	4b2f      	ldr	r3, [pc, #188]	; (8002e2c <USART1_IRQHandler+0x110>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a32      	ldr	r2, [pc, #200]	; (8002e3c <USART1_IRQHandler+0x120>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d03b      	beq.n	8002df0 <USART1_IRQHandler+0xd4>
 8002d78:	4b2c      	ldr	r3, [pc, #176]	; (8002e2c <USART1_IRQHandler+0x110>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a30      	ldr	r2, [pc, #192]	; (8002e40 <USART1_IRQHandler+0x124>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d036      	beq.n	8002df0 <USART1_IRQHandler+0xd4>
 8002d82:	4b2a      	ldr	r3, [pc, #168]	; (8002e2c <USART1_IRQHandler+0x110>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a2f      	ldr	r2, [pc, #188]	; (8002e44 <USART1_IRQHandler+0x128>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d031      	beq.n	8002df0 <USART1_IRQHandler+0xd4>
 8002d8c:	4b27      	ldr	r3, [pc, #156]	; (8002e2c <USART1_IRQHandler+0x110>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a2d      	ldr	r2, [pc, #180]	; (8002e48 <USART1_IRQHandler+0x12c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d02c      	beq.n	8002df0 <USART1_IRQHandler+0xd4>
 8002d96:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <USART1_IRQHandler+0x110>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a2c      	ldr	r2, [pc, #176]	; (8002e4c <USART1_IRQHandler+0x130>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d027      	beq.n	8002df0 <USART1_IRQHandler+0xd4>
 8002da0:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <USART1_IRQHandler+0x110>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a2a      	ldr	r2, [pc, #168]	; (8002e50 <USART1_IRQHandler+0x134>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d022      	beq.n	8002df0 <USART1_IRQHandler+0xd4>
 8002daa:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <USART1_IRQHandler+0x110>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a29      	ldr	r2, [pc, #164]	; (8002e54 <USART1_IRQHandler+0x138>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d01d      	beq.n	8002df0 <USART1_IRQHandler+0xd4>
 8002db4:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <USART1_IRQHandler+0x110>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a27      	ldr	r2, [pc, #156]	; (8002e58 <USART1_IRQHandler+0x13c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d018      	beq.n	8002df0 <USART1_IRQHandler+0xd4>
 8002dbe:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <USART1_IRQHandler+0x110>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a26      	ldr	r2, [pc, #152]	; (8002e5c <USART1_IRQHandler+0x140>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d013      	beq.n	8002df0 <USART1_IRQHandler+0xd4>
 8002dc8:	4b18      	ldr	r3, [pc, #96]	; (8002e2c <USART1_IRQHandler+0x110>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a24      	ldr	r2, [pc, #144]	; (8002e60 <USART1_IRQHandler+0x144>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00e      	beq.n	8002df0 <USART1_IRQHandler+0xd4>
 8002dd2:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <USART1_IRQHandler+0x110>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a23      	ldr	r2, [pc, #140]	; (8002e64 <USART1_IRQHandler+0x148>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d009      	beq.n	8002df0 <USART1_IRQHandler+0xd4>
 8002ddc:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <USART1_IRQHandler+0x110>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a21      	ldr	r2, [pc, #132]	; (8002e68 <USART1_IRQHandler+0x14c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d004      	beq.n	8002df0 <USART1_IRQHandler+0xd4>
 8002de6:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <USART1_IRQHandler+0x110>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a20      	ldr	r2, [pc, #128]	; (8002e6c <USART1_IRQHandler+0x150>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d103      	bne.n	8002df8 <USART1_IRQHandler+0xdc>
 8002df0:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <USART1_IRQHandler+0x110>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	e002      	b.n	8002dfe <USART1_IRQHandler+0xe2>
 8002df8:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <USART1_IRQHandler+0x110>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <USART1_IRQHandler+0x10c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <USART1_IRQHandler+0x10c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0210 	bic.w	r2, r2, #16
 8002e0c:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(UptoBaseTransFinishHandle, pdFALSE);
 8002e0e:	4b18      	ldr	r3, [pc, #96]	; (8002e70 <USART1_IRQHandler+0x154>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2100      	movs	r1, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f008 fec5 	bl	800bba4 <xQueueGiveFromISR>
	}
	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8002e1a:	4803      	ldr	r0, [pc, #12]	; (8002e28 <USART1_IRQHandler+0x10c>)
 8002e1c:	f006 fe0e 	bl	8009a3c <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8002e20:	bf00      	nop
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	200044d0 	.word	0x200044d0
 8002e2c:	20004368 	.word	0x20004368
 8002e30:	40020010 	.word	0x40020010
 8002e34:	40020028 	.word	0x40020028
 8002e38:	40020040 	.word	0x40020040
 8002e3c:	40020058 	.word	0x40020058
 8002e40:	40020070 	.word	0x40020070
 8002e44:	40020088 	.word	0x40020088
 8002e48:	400200a0 	.word	0x400200a0
 8002e4c:	400200b8 	.word	0x400200b8
 8002e50:	40020410 	.word	0x40020410
 8002e54:	40020428 	.word	0x40020428
 8002e58:	40020440 	.word	0x40020440
 8002e5c:	40020458 	.word	0x40020458
 8002e60:	40020470 	.word	0x40020470
 8002e64:	40020488 	.word	0x40020488
 8002e68:	400204a0 	.word	0x400204a0
 8002e6c:	400204b8 	.word	0x400204b8
 8002e70:	20003fec 	.word	0x20003fec

08002e74 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE);
 8002e7e:	4b40      	ldr	r3, [pc, #256]	; (8002f80 <USART2_IRQHandler+0x10c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	f003 0310 	and.w	r3, r3, #16
 8002e88:	2b10      	cmp	r3, #16
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d06b      	beq.n	8002f72 <USART2_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8002e9a:	4b39      	ldr	r3, [pc, #228]	; (8002f80 <USART2_IRQHandler+0x10c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2210      	movs	r2, #16
 8002ea0:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart2);
 8002ea2:	4837      	ldr	r0, [pc, #220]	; (8002f80 <USART2_IRQHandler+0x10c>)
 8002ea4:	f006 fd5a 	bl	800995c <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8002ea8:	4b36      	ldr	r3, [pc, #216]	; (8002f84 <USART2_IRQHandler+0x110>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a36      	ldr	r2, [pc, #216]	; (8002f88 <USART2_IRQHandler+0x114>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d04a      	beq.n	8002f48 <USART2_IRQHandler+0xd4>
 8002eb2:	4b34      	ldr	r3, [pc, #208]	; (8002f84 <USART2_IRQHandler+0x110>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a35      	ldr	r2, [pc, #212]	; (8002f8c <USART2_IRQHandler+0x118>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d045      	beq.n	8002f48 <USART2_IRQHandler+0xd4>
 8002ebc:	4b31      	ldr	r3, [pc, #196]	; (8002f84 <USART2_IRQHandler+0x110>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a33      	ldr	r2, [pc, #204]	; (8002f90 <USART2_IRQHandler+0x11c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d040      	beq.n	8002f48 <USART2_IRQHandler+0xd4>
 8002ec6:	4b2f      	ldr	r3, [pc, #188]	; (8002f84 <USART2_IRQHandler+0x110>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a32      	ldr	r2, [pc, #200]	; (8002f94 <USART2_IRQHandler+0x120>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d03b      	beq.n	8002f48 <USART2_IRQHandler+0xd4>
 8002ed0:	4b2c      	ldr	r3, [pc, #176]	; (8002f84 <USART2_IRQHandler+0x110>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a30      	ldr	r2, [pc, #192]	; (8002f98 <USART2_IRQHandler+0x124>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d036      	beq.n	8002f48 <USART2_IRQHandler+0xd4>
 8002eda:	4b2a      	ldr	r3, [pc, #168]	; (8002f84 <USART2_IRQHandler+0x110>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a2f      	ldr	r2, [pc, #188]	; (8002f9c <USART2_IRQHandler+0x128>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d031      	beq.n	8002f48 <USART2_IRQHandler+0xd4>
 8002ee4:	4b27      	ldr	r3, [pc, #156]	; (8002f84 <USART2_IRQHandler+0x110>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a2d      	ldr	r2, [pc, #180]	; (8002fa0 <USART2_IRQHandler+0x12c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d02c      	beq.n	8002f48 <USART2_IRQHandler+0xd4>
 8002eee:	4b25      	ldr	r3, [pc, #148]	; (8002f84 <USART2_IRQHandler+0x110>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a2c      	ldr	r2, [pc, #176]	; (8002fa4 <USART2_IRQHandler+0x130>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d027      	beq.n	8002f48 <USART2_IRQHandler+0xd4>
 8002ef8:	4b22      	ldr	r3, [pc, #136]	; (8002f84 <USART2_IRQHandler+0x110>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a2a      	ldr	r2, [pc, #168]	; (8002fa8 <USART2_IRQHandler+0x134>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d022      	beq.n	8002f48 <USART2_IRQHandler+0xd4>
 8002f02:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <USART2_IRQHandler+0x110>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a29      	ldr	r2, [pc, #164]	; (8002fac <USART2_IRQHandler+0x138>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d01d      	beq.n	8002f48 <USART2_IRQHandler+0xd4>
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <USART2_IRQHandler+0x110>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a27      	ldr	r2, [pc, #156]	; (8002fb0 <USART2_IRQHandler+0x13c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d018      	beq.n	8002f48 <USART2_IRQHandler+0xd4>
 8002f16:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <USART2_IRQHandler+0x110>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a26      	ldr	r2, [pc, #152]	; (8002fb4 <USART2_IRQHandler+0x140>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d013      	beq.n	8002f48 <USART2_IRQHandler+0xd4>
 8002f20:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <USART2_IRQHandler+0x110>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a24      	ldr	r2, [pc, #144]	; (8002fb8 <USART2_IRQHandler+0x144>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00e      	beq.n	8002f48 <USART2_IRQHandler+0xd4>
 8002f2a:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <USART2_IRQHandler+0x110>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a23      	ldr	r2, [pc, #140]	; (8002fbc <USART2_IRQHandler+0x148>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d009      	beq.n	8002f48 <USART2_IRQHandler+0xd4>
 8002f34:	4b13      	ldr	r3, [pc, #76]	; (8002f84 <USART2_IRQHandler+0x110>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a21      	ldr	r2, [pc, #132]	; (8002fc0 <USART2_IRQHandler+0x14c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d004      	beq.n	8002f48 <USART2_IRQHandler+0xd4>
 8002f3e:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <USART2_IRQHandler+0x110>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a20      	ldr	r2, [pc, #128]	; (8002fc4 <USART2_IRQHandler+0x150>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d103      	bne.n	8002f50 <USART2_IRQHandler+0xdc>
 8002f48:	4b0e      	ldr	r3, [pc, #56]	; (8002f84 <USART2_IRQHandler+0x110>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	e002      	b.n	8002f56 <USART2_IRQHandler+0xe2>
 8002f50:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <USART2_IRQHandler+0x110>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_IDLE);
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <USART2_IRQHandler+0x10c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <USART2_IRQHandler+0x10c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0210 	bic.w	r2, r2, #16
 8002f64:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(GY39TransFinishHandle, pdFALSE);
 8002f66:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <USART2_IRQHandler+0x154>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f008 fe19 	bl	800bba4 <xQueueGiveFromISR>
	}
	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8002f72:	4803      	ldr	r0, [pc, #12]	; (8002f80 <USART2_IRQHandler+0x10c>)
 8002f74:	f006 fd62 	bl	8009a3c <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20004718 	.word	0x20004718
 8002f84:	2000406c 	.word	0x2000406c
 8002f88:	40020010 	.word	0x40020010
 8002f8c:	40020028 	.word	0x40020028
 8002f90:	40020040 	.word	0x40020040
 8002f94:	40020058 	.word	0x40020058
 8002f98:	40020070 	.word	0x40020070
 8002f9c:	40020088 	.word	0x40020088
 8002fa0:	400200a0 	.word	0x400200a0
 8002fa4:	400200b8 	.word	0x400200b8
 8002fa8:	40020410 	.word	0x40020410
 8002fac:	40020428 	.word	0x40020428
 8002fb0:	40020440 	.word	0x40020440
 8002fb4:	40020458 	.word	0x40020458
 8002fb8:	40020470 	.word	0x40020470
 8002fbc:	40020488 	.word	0x40020488
 8002fc0:	400204a0 	.word	0x400204a0
 8002fc4:	400204b8 	.word	0x400204b8
 8002fc8:	20004204 	.word	0x20004204

08002fcc <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE);
 8002fd6:	4b40      	ldr	r3, [pc, #256]	; (80030d8 <USART3_IRQHandler+0x10c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	2b10      	cmp	r3, #16
 8002fe2:	bf0c      	ite	eq
 8002fe4:	2301      	moveq	r3, #1
 8002fe6:	2300      	movne	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d06b      	beq.n	80030ca <USART3_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8002ff2:	4b39      	ldr	r3, [pc, #228]	; (80030d8 <USART3_IRQHandler+0x10c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2210      	movs	r2, #16
 8002ff8:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart3);
 8002ffa:	4837      	ldr	r0, [pc, #220]	; (80030d8 <USART3_IRQHandler+0x10c>)
 8002ffc:	f006 fcae 	bl	800995c <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 8003000:	4b36      	ldr	r3, [pc, #216]	; (80030dc <USART3_IRQHandler+0x110>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a36      	ldr	r2, [pc, #216]	; (80030e0 <USART3_IRQHandler+0x114>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d04a      	beq.n	80030a0 <USART3_IRQHandler+0xd4>
 800300a:	4b34      	ldr	r3, [pc, #208]	; (80030dc <USART3_IRQHandler+0x110>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a35      	ldr	r2, [pc, #212]	; (80030e4 <USART3_IRQHandler+0x118>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d045      	beq.n	80030a0 <USART3_IRQHandler+0xd4>
 8003014:	4b31      	ldr	r3, [pc, #196]	; (80030dc <USART3_IRQHandler+0x110>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a33      	ldr	r2, [pc, #204]	; (80030e8 <USART3_IRQHandler+0x11c>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d040      	beq.n	80030a0 <USART3_IRQHandler+0xd4>
 800301e:	4b2f      	ldr	r3, [pc, #188]	; (80030dc <USART3_IRQHandler+0x110>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a32      	ldr	r2, [pc, #200]	; (80030ec <USART3_IRQHandler+0x120>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d03b      	beq.n	80030a0 <USART3_IRQHandler+0xd4>
 8003028:	4b2c      	ldr	r3, [pc, #176]	; (80030dc <USART3_IRQHandler+0x110>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a30      	ldr	r2, [pc, #192]	; (80030f0 <USART3_IRQHandler+0x124>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d036      	beq.n	80030a0 <USART3_IRQHandler+0xd4>
 8003032:	4b2a      	ldr	r3, [pc, #168]	; (80030dc <USART3_IRQHandler+0x110>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a2f      	ldr	r2, [pc, #188]	; (80030f4 <USART3_IRQHandler+0x128>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d031      	beq.n	80030a0 <USART3_IRQHandler+0xd4>
 800303c:	4b27      	ldr	r3, [pc, #156]	; (80030dc <USART3_IRQHandler+0x110>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a2d      	ldr	r2, [pc, #180]	; (80030f8 <USART3_IRQHandler+0x12c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d02c      	beq.n	80030a0 <USART3_IRQHandler+0xd4>
 8003046:	4b25      	ldr	r3, [pc, #148]	; (80030dc <USART3_IRQHandler+0x110>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a2c      	ldr	r2, [pc, #176]	; (80030fc <USART3_IRQHandler+0x130>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d027      	beq.n	80030a0 <USART3_IRQHandler+0xd4>
 8003050:	4b22      	ldr	r3, [pc, #136]	; (80030dc <USART3_IRQHandler+0x110>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a2a      	ldr	r2, [pc, #168]	; (8003100 <USART3_IRQHandler+0x134>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d022      	beq.n	80030a0 <USART3_IRQHandler+0xd4>
 800305a:	4b20      	ldr	r3, [pc, #128]	; (80030dc <USART3_IRQHandler+0x110>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a29      	ldr	r2, [pc, #164]	; (8003104 <USART3_IRQHandler+0x138>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d01d      	beq.n	80030a0 <USART3_IRQHandler+0xd4>
 8003064:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <USART3_IRQHandler+0x110>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a27      	ldr	r2, [pc, #156]	; (8003108 <USART3_IRQHandler+0x13c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d018      	beq.n	80030a0 <USART3_IRQHandler+0xd4>
 800306e:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <USART3_IRQHandler+0x110>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a26      	ldr	r2, [pc, #152]	; (800310c <USART3_IRQHandler+0x140>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d013      	beq.n	80030a0 <USART3_IRQHandler+0xd4>
 8003078:	4b18      	ldr	r3, [pc, #96]	; (80030dc <USART3_IRQHandler+0x110>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a24      	ldr	r2, [pc, #144]	; (8003110 <USART3_IRQHandler+0x144>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d00e      	beq.n	80030a0 <USART3_IRQHandler+0xd4>
 8003082:	4b16      	ldr	r3, [pc, #88]	; (80030dc <USART3_IRQHandler+0x110>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a23      	ldr	r2, [pc, #140]	; (8003114 <USART3_IRQHandler+0x148>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d009      	beq.n	80030a0 <USART3_IRQHandler+0xd4>
 800308c:	4b13      	ldr	r3, [pc, #76]	; (80030dc <USART3_IRQHandler+0x110>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a21      	ldr	r2, [pc, #132]	; (8003118 <USART3_IRQHandler+0x14c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d004      	beq.n	80030a0 <USART3_IRQHandler+0xd4>
 8003096:	4b11      	ldr	r3, [pc, #68]	; (80030dc <USART3_IRQHandler+0x110>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a20      	ldr	r2, [pc, #128]	; (800311c <USART3_IRQHandler+0x150>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d103      	bne.n	80030a8 <USART3_IRQHandler+0xdc>
 80030a0:	4b0e      	ldr	r3, [pc, #56]	; (80030dc <USART3_IRQHandler+0x110>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	e002      	b.n	80030ae <USART3_IRQHandler+0xe2>
 80030a8:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <USART3_IRQHandler+0x110>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart3, UART_IT_IDLE);
 80030ae:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <USART3_IRQHandler+0x10c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <USART3_IRQHandler+0x10c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0210 	bic.w	r2, r2, #16
 80030bc:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(WT931TransFinishHandle, pdFALSE);
 80030be:	4b18      	ldr	r3, [pc, #96]	; (8003120 <USART3_IRQHandler+0x154>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2100      	movs	r1, #0
 80030c4:	4618      	mov	r0, r3
 80030c6:	f008 fd6d 	bl	800bba4 <xQueueGiveFromISR>
	}
	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 80030ca:	4803      	ldr	r0, [pc, #12]	; (80030d8 <USART3_IRQHandler+0x10c>)
 80030cc:	f006 fcb6 	bl	8009a3c <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */

	/* USER CODE END USART3_IRQn 1 */
}
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	2000416c 	.word	0x2000416c
 80030dc:	200040f4 	.word	0x200040f4
 80030e0:	40020010 	.word	0x40020010
 80030e4:	40020028 	.word	0x40020028
 80030e8:	40020040 	.word	0x40020040
 80030ec:	40020058 	.word	0x40020058
 80030f0:	40020070 	.word	0x40020070
 80030f4:	40020088 	.word	0x40020088
 80030f8:	400200a0 	.word	0x400200a0
 80030fc:	400200b8 	.word	0x400200b8
 8003100:	40020410 	.word	0x40020410
 8003104:	40020428 	.word	0x40020428
 8003108:	40020440 	.word	0x40020440
 800310c:	40020458 	.word	0x40020458
 8003110:	40020470 	.word	0x40020470
 8003114:	40020488 	.word	0x40020488
 8003118:	400204a0 	.word	0x400204a0
 800311c:	400204b8 	.word	0x400204b8
 8003120:	20004920 	.word	0x20004920

08003124 <DMA1_Stream7_IRQHandler>:

/**
 * @brief This function handles DMA1 stream7 global interrupt.
 */
void DMA1_Stream7_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

	/* USER CODE END DMA1_Stream7_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8003128:	4802      	ldr	r0, [pc, #8]	; (8003134 <DMA1_Stream7_IRQHandler+0x10>)
 800312a:	f001 ff57 	bl	8004fdc <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

	/* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20004458 	.word	0x20004458

08003138 <UART4_IRQHandler>:

/**
 * @brief This function handles UART4 global interrupt.
 */
void UART4_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART4_IRQn 0 */
	uint32_t tmp_flag = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE);
 8003142:	4b40      	ldr	r3, [pc, #256]	; (8003244 <UART4_IRQHandler+0x10c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	2b10      	cmp	r3, #16
 800314e:	bf0c      	ite	eq
 8003150:	2301      	moveq	r3, #1
 8003152:	2300      	movne	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d06b      	beq.n	8003236 <UART4_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 800315e:	4b39      	ldr	r3, [pc, #228]	; (8003244 <UART4_IRQHandler+0x10c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2210      	movs	r2, #16
 8003164:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart4);
 8003166:	4837      	ldr	r0, [pc, #220]	; (8003244 <UART4_IRQHandler+0x10c>)
 8003168:	f006 fbf8 	bl	800995c <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart4_rx);
 800316c:	4b36      	ldr	r3, [pc, #216]	; (8003248 <UART4_IRQHandler+0x110>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a36      	ldr	r2, [pc, #216]	; (800324c <UART4_IRQHandler+0x114>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d04a      	beq.n	800320c <UART4_IRQHandler+0xd4>
 8003176:	4b34      	ldr	r3, [pc, #208]	; (8003248 <UART4_IRQHandler+0x110>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a35      	ldr	r2, [pc, #212]	; (8003250 <UART4_IRQHandler+0x118>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d045      	beq.n	800320c <UART4_IRQHandler+0xd4>
 8003180:	4b31      	ldr	r3, [pc, #196]	; (8003248 <UART4_IRQHandler+0x110>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a33      	ldr	r2, [pc, #204]	; (8003254 <UART4_IRQHandler+0x11c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d040      	beq.n	800320c <UART4_IRQHandler+0xd4>
 800318a:	4b2f      	ldr	r3, [pc, #188]	; (8003248 <UART4_IRQHandler+0x110>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a32      	ldr	r2, [pc, #200]	; (8003258 <UART4_IRQHandler+0x120>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d03b      	beq.n	800320c <UART4_IRQHandler+0xd4>
 8003194:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <UART4_IRQHandler+0x110>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a30      	ldr	r2, [pc, #192]	; (800325c <UART4_IRQHandler+0x124>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d036      	beq.n	800320c <UART4_IRQHandler+0xd4>
 800319e:	4b2a      	ldr	r3, [pc, #168]	; (8003248 <UART4_IRQHandler+0x110>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a2f      	ldr	r2, [pc, #188]	; (8003260 <UART4_IRQHandler+0x128>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d031      	beq.n	800320c <UART4_IRQHandler+0xd4>
 80031a8:	4b27      	ldr	r3, [pc, #156]	; (8003248 <UART4_IRQHandler+0x110>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a2d      	ldr	r2, [pc, #180]	; (8003264 <UART4_IRQHandler+0x12c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d02c      	beq.n	800320c <UART4_IRQHandler+0xd4>
 80031b2:	4b25      	ldr	r3, [pc, #148]	; (8003248 <UART4_IRQHandler+0x110>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a2c      	ldr	r2, [pc, #176]	; (8003268 <UART4_IRQHandler+0x130>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d027      	beq.n	800320c <UART4_IRQHandler+0xd4>
 80031bc:	4b22      	ldr	r3, [pc, #136]	; (8003248 <UART4_IRQHandler+0x110>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a2a      	ldr	r2, [pc, #168]	; (800326c <UART4_IRQHandler+0x134>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d022      	beq.n	800320c <UART4_IRQHandler+0xd4>
 80031c6:	4b20      	ldr	r3, [pc, #128]	; (8003248 <UART4_IRQHandler+0x110>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a29      	ldr	r2, [pc, #164]	; (8003270 <UART4_IRQHandler+0x138>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d01d      	beq.n	800320c <UART4_IRQHandler+0xd4>
 80031d0:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <UART4_IRQHandler+0x110>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a27      	ldr	r2, [pc, #156]	; (8003274 <UART4_IRQHandler+0x13c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d018      	beq.n	800320c <UART4_IRQHandler+0xd4>
 80031da:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <UART4_IRQHandler+0x110>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a26      	ldr	r2, [pc, #152]	; (8003278 <UART4_IRQHandler+0x140>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d013      	beq.n	800320c <UART4_IRQHandler+0xd4>
 80031e4:	4b18      	ldr	r3, [pc, #96]	; (8003248 <UART4_IRQHandler+0x110>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a24      	ldr	r2, [pc, #144]	; (800327c <UART4_IRQHandler+0x144>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d00e      	beq.n	800320c <UART4_IRQHandler+0xd4>
 80031ee:	4b16      	ldr	r3, [pc, #88]	; (8003248 <UART4_IRQHandler+0x110>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a23      	ldr	r2, [pc, #140]	; (8003280 <UART4_IRQHandler+0x148>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d009      	beq.n	800320c <UART4_IRQHandler+0xd4>
 80031f8:	4b13      	ldr	r3, [pc, #76]	; (8003248 <UART4_IRQHandler+0x110>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a21      	ldr	r2, [pc, #132]	; (8003284 <UART4_IRQHandler+0x14c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d004      	beq.n	800320c <UART4_IRQHandler+0xd4>
 8003202:	4b11      	ldr	r3, [pc, #68]	; (8003248 <UART4_IRQHandler+0x110>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a20      	ldr	r2, [pc, #128]	; (8003288 <UART4_IRQHandler+0x150>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d103      	bne.n	8003214 <UART4_IRQHandler+0xdc>
 800320c:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <UART4_IRQHandler+0x110>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	e002      	b.n	800321a <UART4_IRQHandler+0xe2>
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <UART4_IRQHandler+0x110>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart4, UART_IT_IDLE);
 800321a:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <UART4_IRQHandler+0x10c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	4b08      	ldr	r3, [pc, #32]	; (8003244 <UART4_IRQHandler+0x10c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0210 	bic.w	r2, r2, #16
 8003228:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(DeepTransFinishHandleHandle, pdFALSE);
 800322a:	4b18      	ldr	r3, [pc, #96]	; (800328c <UART4_IRQHandler+0x154>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2100      	movs	r1, #0
 8003230:	4618      	mov	r0, r3
 8003232:	f008 fcb7 	bl	800bba4 <xQueueGiveFromISR>
	}
	/* USER CODE END UART4_IRQn 0 */
	HAL_UART_IRQHandler(&huart4);
 8003236:	4803      	ldr	r0, [pc, #12]	; (8003244 <UART4_IRQHandler+0x10c>)
 8003238:	f006 fc00 	bl	8009a3c <HAL_UART_IRQHandler>
	/* USER CODE BEGIN UART4_IRQn 1 */

	/* USER CODE END UART4_IRQn 1 */
}
 800323c:	bf00      	nop
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	20004680 	.word	0x20004680
 8003248:	20003ff4 	.word	0x20003ff4
 800324c:	40020010 	.word	0x40020010
 8003250:	40020028 	.word	0x40020028
 8003254:	40020040 	.word	0x40020040
 8003258:	40020058 	.word	0x40020058
 800325c:	40020070 	.word	0x40020070
 8003260:	40020088 	.word	0x40020088
 8003264:	400200a0 	.word	0x400200a0
 8003268:	400200b8 	.word	0x400200b8
 800326c:	40020410 	.word	0x40020410
 8003270:	40020428 	.word	0x40020428
 8003274:	40020440 	.word	0x40020440
 8003278:	40020458 	.word	0x40020458
 800327c:	40020470 	.word	0x40020470
 8003280:	40020488 	.word	0x40020488
 8003284:	400204a0 	.word	0x400204a0
 8003288:	400204b8 	.word	0x400204b8
 800328c:	2000482c 	.word	0x2000482c

08003290 <UART5_IRQHandler>:

/**
 * @brief This function handles UART5 global interrupt.
 */
void UART5_IRQHandler(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART5_IRQn 0 */
	uint32_t tmp_flag = 0;
 8003296:	2300      	movs	r3, #0
 8003298:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart5, UART_FLAG_IDLE);
 800329a:	4b40      	ldr	r3, [pc, #256]	; (800339c <UART5_IRQHandler+0x10c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	2b10      	cmp	r3, #16
 80032a6:	bf0c      	ite	eq
 80032a8:	2301      	moveq	r3, #1
 80032aa:	2300      	movne	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d06b      	beq.n	800338e <UART5_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart5);
 80032b6:	4b39      	ldr	r3, [pc, #228]	; (800339c <UART5_IRQHandler+0x10c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2210      	movs	r2, #16
 80032bc:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart5);
 80032be:	4837      	ldr	r0, [pc, #220]	; (800339c <UART5_IRQHandler+0x10c>)
 80032c0:	f006 fb4c 	bl	800995c <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart5_rx);
 80032c4:	4b36      	ldr	r3, [pc, #216]	; (80033a0 <UART5_IRQHandler+0x110>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a36      	ldr	r2, [pc, #216]	; (80033a4 <UART5_IRQHandler+0x114>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d04a      	beq.n	8003364 <UART5_IRQHandler+0xd4>
 80032ce:	4b34      	ldr	r3, [pc, #208]	; (80033a0 <UART5_IRQHandler+0x110>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a35      	ldr	r2, [pc, #212]	; (80033a8 <UART5_IRQHandler+0x118>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d045      	beq.n	8003364 <UART5_IRQHandler+0xd4>
 80032d8:	4b31      	ldr	r3, [pc, #196]	; (80033a0 <UART5_IRQHandler+0x110>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a33      	ldr	r2, [pc, #204]	; (80033ac <UART5_IRQHandler+0x11c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d040      	beq.n	8003364 <UART5_IRQHandler+0xd4>
 80032e2:	4b2f      	ldr	r3, [pc, #188]	; (80033a0 <UART5_IRQHandler+0x110>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a32      	ldr	r2, [pc, #200]	; (80033b0 <UART5_IRQHandler+0x120>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d03b      	beq.n	8003364 <UART5_IRQHandler+0xd4>
 80032ec:	4b2c      	ldr	r3, [pc, #176]	; (80033a0 <UART5_IRQHandler+0x110>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a30      	ldr	r2, [pc, #192]	; (80033b4 <UART5_IRQHandler+0x124>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d036      	beq.n	8003364 <UART5_IRQHandler+0xd4>
 80032f6:	4b2a      	ldr	r3, [pc, #168]	; (80033a0 <UART5_IRQHandler+0x110>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a2f      	ldr	r2, [pc, #188]	; (80033b8 <UART5_IRQHandler+0x128>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d031      	beq.n	8003364 <UART5_IRQHandler+0xd4>
 8003300:	4b27      	ldr	r3, [pc, #156]	; (80033a0 <UART5_IRQHandler+0x110>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a2d      	ldr	r2, [pc, #180]	; (80033bc <UART5_IRQHandler+0x12c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d02c      	beq.n	8003364 <UART5_IRQHandler+0xd4>
 800330a:	4b25      	ldr	r3, [pc, #148]	; (80033a0 <UART5_IRQHandler+0x110>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a2c      	ldr	r2, [pc, #176]	; (80033c0 <UART5_IRQHandler+0x130>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d027      	beq.n	8003364 <UART5_IRQHandler+0xd4>
 8003314:	4b22      	ldr	r3, [pc, #136]	; (80033a0 <UART5_IRQHandler+0x110>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a2a      	ldr	r2, [pc, #168]	; (80033c4 <UART5_IRQHandler+0x134>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d022      	beq.n	8003364 <UART5_IRQHandler+0xd4>
 800331e:	4b20      	ldr	r3, [pc, #128]	; (80033a0 <UART5_IRQHandler+0x110>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a29      	ldr	r2, [pc, #164]	; (80033c8 <UART5_IRQHandler+0x138>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d01d      	beq.n	8003364 <UART5_IRQHandler+0xd4>
 8003328:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <UART5_IRQHandler+0x110>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a27      	ldr	r2, [pc, #156]	; (80033cc <UART5_IRQHandler+0x13c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d018      	beq.n	8003364 <UART5_IRQHandler+0xd4>
 8003332:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <UART5_IRQHandler+0x110>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a26      	ldr	r2, [pc, #152]	; (80033d0 <UART5_IRQHandler+0x140>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d013      	beq.n	8003364 <UART5_IRQHandler+0xd4>
 800333c:	4b18      	ldr	r3, [pc, #96]	; (80033a0 <UART5_IRQHandler+0x110>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a24      	ldr	r2, [pc, #144]	; (80033d4 <UART5_IRQHandler+0x144>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00e      	beq.n	8003364 <UART5_IRQHandler+0xd4>
 8003346:	4b16      	ldr	r3, [pc, #88]	; (80033a0 <UART5_IRQHandler+0x110>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a23      	ldr	r2, [pc, #140]	; (80033d8 <UART5_IRQHandler+0x148>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d009      	beq.n	8003364 <UART5_IRQHandler+0xd4>
 8003350:	4b13      	ldr	r3, [pc, #76]	; (80033a0 <UART5_IRQHandler+0x110>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a21      	ldr	r2, [pc, #132]	; (80033dc <UART5_IRQHandler+0x14c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d004      	beq.n	8003364 <UART5_IRQHandler+0xd4>
 800335a:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <UART5_IRQHandler+0x110>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a20      	ldr	r2, [pc, #128]	; (80033e0 <UART5_IRQHandler+0x150>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d103      	bne.n	800336c <UART5_IRQHandler+0xdc>
 8003364:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <UART5_IRQHandler+0x110>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	e002      	b.n	8003372 <UART5_IRQHandler+0xe2>
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <UART5_IRQHandler+0x110>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart5, UART_IT_IDLE);
 8003372:	4b0a      	ldr	r3, [pc, #40]	; (800339c <UART5_IRQHandler+0x10c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	4b08      	ldr	r3, [pc, #32]	; (800339c <UART5_IRQHandler+0x10c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0210 	bic.w	r2, r2, #16
 8003380:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(P30TransFinishHandle, pdFALSE);
 8003382:	4b18      	ldr	r3, [pc, #96]	; (80033e4 <UART5_IRQHandler+0x154>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2100      	movs	r1, #0
 8003388:	4618      	mov	r0, r3
 800338a:	f008 fc0b 	bl	800bba4 <xQueueGiveFromISR>
	}
	/* USER CODE END UART5_IRQn 0 */
	HAL_UART_IRQHandler(&huart5);
 800338e:	4803      	ldr	r0, [pc, #12]	; (800339c <UART5_IRQHandler+0x10c>)
 8003390:	f006 fb54 	bl	8009a3c <HAL_UART_IRQHandler>
	/* USER CODE BEGIN UART5_IRQn 1 */

	/* USER CODE END UART5_IRQn 1 */
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	200042d4 	.word	0x200042d4
 80033a0:	200047a8 	.word	0x200047a8
 80033a4:	40020010 	.word	0x40020010
 80033a8:	40020028 	.word	0x40020028
 80033ac:	40020040 	.word	0x40020040
 80033b0:	40020058 	.word	0x40020058
 80033b4:	40020070 	.word	0x40020070
 80033b8:	40020088 	.word	0x40020088
 80033bc:	400200a0 	.word	0x400200a0
 80033c0:	400200b8 	.word	0x400200b8
 80033c4:	40020410 	.word	0x40020410
 80033c8:	40020428 	.word	0x40020428
 80033cc:	40020440 	.word	0x40020440
 80033d0:	40020458 	.word	0x40020458
 80033d4:	40020470 	.word	0x40020470
 80033d8:	40020488 	.word	0x40020488
 80033dc:	400204a0 	.word	0x400204a0
 80033e0:	400204b8 	.word	0x400204b8
 80033e4:	20003fe8 	.word	0x20003fe8

080033e8 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 80033ec:	4802      	ldr	r0, [pc, #8]	; (80033f8 <TIM6_DAC_IRQHandler+0x10>)
 80033ee:	f005 ff9f 	bl	8009330 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20004958 	.word	0x20004958

080033fc <DMA2_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA2 stream0 global interrupt.
 */
void DMA2_Stream0_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	/* USER CODE END DMA2_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8003400:	4802      	ldr	r0, [pc, #8]	; (800340c <DMA2_Stream0_IRQHandler+0x10>)
 8003402:	f001 fdeb 	bl	8004fdc <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

	/* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20004570 	.word	0x20004570

08003410 <DMA2_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA2 stream1 global interrupt.
 */
void DMA2_Stream1_IRQHandler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	/* USER CODE END DMA2_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003414:	4802      	ldr	r0, [pc, #8]	; (8003420 <DMA2_Stream1_IRQHandler+0x10>)
 8003416:	f001 fde1 	bl	8004fdc <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

	/* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	200043e0 	.word	0x200043e0

08003424 <DMA2_Stream2_IRQHandler>:

/**
 * @brief This function handles DMA2 stream2 global interrupt.
 */
void DMA2_Stream2_IRQHandler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

	/* USER CODE END DMA2_Stream2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8003428:	4802      	ldr	r0, [pc, #8]	; (8003434 <DMA2_Stream2_IRQHandler+0x10>)
 800342a:	f001 fdd7 	bl	8004fdc <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

	/* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	200048a8 	.word	0x200048a8

08003438 <UART8_IRQHandler>:

/**
 * @brief This function handles UART8 global interrupt.
 */
void UART8_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART8_IRQn 0 */
	uint32_t tmp_flag = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart8, UART_FLAG_IDLE);
 8003442:	4b40      	ldr	r3, [pc, #256]	; (8003544 <UART8_IRQHandler+0x10c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b10      	cmp	r3, #16
 800344e:	bf0c      	ite	eq
 8003450:	2301      	moveq	r3, #1
 8003452:	2300      	movne	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d06b      	beq.n	8003536 <UART8_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart8);
 800345e:	4b39      	ldr	r3, [pc, #228]	; (8003544 <UART8_IRQHandler+0x10c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2210      	movs	r2, #16
 8003464:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart8);
 8003466:	4837      	ldr	r0, [pc, #220]	; (8003544 <UART8_IRQHandler+0x10c>)
 8003468:	f006 fa78 	bl	800995c <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart8_rx);
 800346c:	4b36      	ldr	r3, [pc, #216]	; (8003548 <UART8_IRQHandler+0x110>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a36      	ldr	r2, [pc, #216]	; (800354c <UART8_IRQHandler+0x114>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d04a      	beq.n	800350c <UART8_IRQHandler+0xd4>
 8003476:	4b34      	ldr	r3, [pc, #208]	; (8003548 <UART8_IRQHandler+0x110>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a35      	ldr	r2, [pc, #212]	; (8003550 <UART8_IRQHandler+0x118>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d045      	beq.n	800350c <UART8_IRQHandler+0xd4>
 8003480:	4b31      	ldr	r3, [pc, #196]	; (8003548 <UART8_IRQHandler+0x110>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a33      	ldr	r2, [pc, #204]	; (8003554 <UART8_IRQHandler+0x11c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d040      	beq.n	800350c <UART8_IRQHandler+0xd4>
 800348a:	4b2f      	ldr	r3, [pc, #188]	; (8003548 <UART8_IRQHandler+0x110>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a32      	ldr	r2, [pc, #200]	; (8003558 <UART8_IRQHandler+0x120>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d03b      	beq.n	800350c <UART8_IRQHandler+0xd4>
 8003494:	4b2c      	ldr	r3, [pc, #176]	; (8003548 <UART8_IRQHandler+0x110>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a30      	ldr	r2, [pc, #192]	; (800355c <UART8_IRQHandler+0x124>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d036      	beq.n	800350c <UART8_IRQHandler+0xd4>
 800349e:	4b2a      	ldr	r3, [pc, #168]	; (8003548 <UART8_IRQHandler+0x110>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a2f      	ldr	r2, [pc, #188]	; (8003560 <UART8_IRQHandler+0x128>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d031      	beq.n	800350c <UART8_IRQHandler+0xd4>
 80034a8:	4b27      	ldr	r3, [pc, #156]	; (8003548 <UART8_IRQHandler+0x110>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a2d      	ldr	r2, [pc, #180]	; (8003564 <UART8_IRQHandler+0x12c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d02c      	beq.n	800350c <UART8_IRQHandler+0xd4>
 80034b2:	4b25      	ldr	r3, [pc, #148]	; (8003548 <UART8_IRQHandler+0x110>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a2c      	ldr	r2, [pc, #176]	; (8003568 <UART8_IRQHandler+0x130>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d027      	beq.n	800350c <UART8_IRQHandler+0xd4>
 80034bc:	4b22      	ldr	r3, [pc, #136]	; (8003548 <UART8_IRQHandler+0x110>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a2a      	ldr	r2, [pc, #168]	; (800356c <UART8_IRQHandler+0x134>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d022      	beq.n	800350c <UART8_IRQHandler+0xd4>
 80034c6:	4b20      	ldr	r3, [pc, #128]	; (8003548 <UART8_IRQHandler+0x110>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a29      	ldr	r2, [pc, #164]	; (8003570 <UART8_IRQHandler+0x138>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d01d      	beq.n	800350c <UART8_IRQHandler+0xd4>
 80034d0:	4b1d      	ldr	r3, [pc, #116]	; (8003548 <UART8_IRQHandler+0x110>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a27      	ldr	r2, [pc, #156]	; (8003574 <UART8_IRQHandler+0x13c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d018      	beq.n	800350c <UART8_IRQHandler+0xd4>
 80034da:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <UART8_IRQHandler+0x110>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a26      	ldr	r2, [pc, #152]	; (8003578 <UART8_IRQHandler+0x140>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d013      	beq.n	800350c <UART8_IRQHandler+0xd4>
 80034e4:	4b18      	ldr	r3, [pc, #96]	; (8003548 <UART8_IRQHandler+0x110>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a24      	ldr	r2, [pc, #144]	; (800357c <UART8_IRQHandler+0x144>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00e      	beq.n	800350c <UART8_IRQHandler+0xd4>
 80034ee:	4b16      	ldr	r3, [pc, #88]	; (8003548 <UART8_IRQHandler+0x110>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a23      	ldr	r2, [pc, #140]	; (8003580 <UART8_IRQHandler+0x148>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d009      	beq.n	800350c <UART8_IRQHandler+0xd4>
 80034f8:	4b13      	ldr	r3, [pc, #76]	; (8003548 <UART8_IRQHandler+0x110>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a21      	ldr	r2, [pc, #132]	; (8003584 <UART8_IRQHandler+0x14c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d004      	beq.n	800350c <UART8_IRQHandler+0xd4>
 8003502:	4b11      	ldr	r3, [pc, #68]	; (8003548 <UART8_IRQHandler+0x110>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a20      	ldr	r2, [pc, #128]	; (8003588 <UART8_IRQHandler+0x150>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d103      	bne.n	8003514 <UART8_IRQHandler+0xdc>
 800350c:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <UART8_IRQHandler+0x110>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	e002      	b.n	800351a <UART8_IRQHandler+0xe2>
 8003514:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <UART8_IRQHandler+0x110>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart8, UART_IT_IDLE);
 800351a:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <UART8_IRQHandler+0x10c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4b08      	ldr	r3, [pc, #32]	; (8003544 <UART8_IRQHandler+0x10c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0210 	bic.w	r2, r2, #16
 8003528:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(BasetoUpTransFinishHandleHandle, pdFALSE);
 800352a:	4b18      	ldr	r3, [pc, #96]	; (800358c <UART8_IRQHandler+0x154>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2100      	movs	r1, #0
 8003530:	4618      	mov	r0, r3
 8003532:	f008 fb37 	bl	800bba4 <xQueueGiveFromISR>
	}
	/* USER CODE END UART8_IRQn 0 */
	HAL_UART_IRQHandler(&huart8);
 8003536:	4803      	ldr	r0, [pc, #12]	; (8003544 <UART8_IRQHandler+0x10c>)
 8003538:	f006 fa80 	bl	8009a3c <HAL_UART_IRQHandler>
	/* USER CODE BEGIN UART8_IRQn 1 */

	/* USER CODE END UART8_IRQn 1 */
}
 800353c:	bf00      	nop
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	200045ec 	.word	0x200045ec
 8003548:	20004458 	.word	0x20004458
 800354c:	40020010 	.word	0x40020010
 8003550:	40020028 	.word	0x40020028
 8003554:	40020040 	.word	0x40020040
 8003558:	40020058 	.word	0x40020058
 800355c:	40020070 	.word	0x40020070
 8003560:	40020088 	.word	0x40020088
 8003564:	400200a0 	.word	0x400200a0
 8003568:	400200b8 	.word	0x400200b8
 800356c:	40020410 	.word	0x40020410
 8003570:	40020428 	.word	0x40020428
 8003574:	40020440 	.word	0x40020440
 8003578:	40020458 	.word	0x40020458
 800357c:	40020470 	.word	0x40020470
 8003580:	40020488 	.word	0x40020488
 8003584:	400204a0 	.word	0x400204a0
 8003588:	400204b8 	.word	0x400204b8
 800358c:	200045e8 	.word	0x200045e8

08003590 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003594:	4b39      	ldr	r3, [pc, #228]	; (800367c <SystemInit+0xec>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	4a38      	ldr	r2, [pc, #224]	; (800367c <SystemInit+0xec>)
 800359c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80035a4:	4b36      	ldr	r3, [pc, #216]	; (8003680 <SystemInit+0xf0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	2b06      	cmp	r3, #6
 80035ae:	d807      	bhi.n	80035c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80035b0:	4b33      	ldr	r3, [pc, #204]	; (8003680 <SystemInit+0xf0>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f023 030f 	bic.w	r3, r3, #15
 80035b8:	4a31      	ldr	r2, [pc, #196]	; (8003680 <SystemInit+0xf0>)
 80035ba:	f043 0307 	orr.w	r3, r3, #7
 80035be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80035c0:	4b30      	ldr	r3, [pc, #192]	; (8003684 <SystemInit+0xf4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a2f      	ldr	r2, [pc, #188]	; (8003684 <SystemInit+0xf4>)
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80035cc:	4b2d      	ldr	r3, [pc, #180]	; (8003684 <SystemInit+0xf4>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80035d2:	4b2c      	ldr	r3, [pc, #176]	; (8003684 <SystemInit+0xf4>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	492b      	ldr	r1, [pc, #172]	; (8003684 <SystemInit+0xf4>)
 80035d8:	4b2b      	ldr	r3, [pc, #172]	; (8003688 <SystemInit+0xf8>)
 80035da:	4013      	ands	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80035de:	4b28      	ldr	r3, [pc, #160]	; (8003680 <SystemInit+0xf0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80035ea:	4b25      	ldr	r3, [pc, #148]	; (8003680 <SystemInit+0xf0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 030f 	bic.w	r3, r3, #15
 80035f2:	4a23      	ldr	r2, [pc, #140]	; (8003680 <SystemInit+0xf0>)
 80035f4:	f043 0307 	orr.w	r3, r3, #7
 80035f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80035fa:	4b22      	ldr	r3, [pc, #136]	; (8003684 <SystemInit+0xf4>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003600:	4b20      	ldr	r3, [pc, #128]	; (8003684 <SystemInit+0xf4>)
 8003602:	2200      	movs	r2, #0
 8003604:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003606:	4b1f      	ldr	r3, [pc, #124]	; (8003684 <SystemInit+0xf4>)
 8003608:	2200      	movs	r2, #0
 800360a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800360c:	4b1d      	ldr	r3, [pc, #116]	; (8003684 <SystemInit+0xf4>)
 800360e:	4a1f      	ldr	r2, [pc, #124]	; (800368c <SystemInit+0xfc>)
 8003610:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003612:	4b1c      	ldr	r3, [pc, #112]	; (8003684 <SystemInit+0xf4>)
 8003614:	4a1e      	ldr	r2, [pc, #120]	; (8003690 <SystemInit+0x100>)
 8003616:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003618:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <SystemInit+0xf4>)
 800361a:	4a1e      	ldr	r2, [pc, #120]	; (8003694 <SystemInit+0x104>)
 800361c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800361e:	4b19      	ldr	r3, [pc, #100]	; (8003684 <SystemInit+0xf4>)
 8003620:	2200      	movs	r2, #0
 8003622:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003624:	4b17      	ldr	r3, [pc, #92]	; (8003684 <SystemInit+0xf4>)
 8003626:	4a1b      	ldr	r2, [pc, #108]	; (8003694 <SystemInit+0x104>)
 8003628:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800362a:	4b16      	ldr	r3, [pc, #88]	; (8003684 <SystemInit+0xf4>)
 800362c:	2200      	movs	r2, #0
 800362e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003630:	4b14      	ldr	r3, [pc, #80]	; (8003684 <SystemInit+0xf4>)
 8003632:	4a18      	ldr	r2, [pc, #96]	; (8003694 <SystemInit+0x104>)
 8003634:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003636:	4b13      	ldr	r3, [pc, #76]	; (8003684 <SystemInit+0xf4>)
 8003638:	2200      	movs	r2, #0
 800363a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800363c:	4b11      	ldr	r3, [pc, #68]	; (8003684 <SystemInit+0xf4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a10      	ldr	r2, [pc, #64]	; (8003684 <SystemInit+0xf4>)
 8003642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003646:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003648:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <SystemInit+0xf4>)
 800364a:	2200      	movs	r2, #0
 800364c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800364e:	4b12      	ldr	r3, [pc, #72]	; (8003698 <SystemInit+0x108>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	4b12      	ldr	r3, [pc, #72]	; (800369c <SystemInit+0x10c>)
 8003654:	4013      	ands	r3, r2
 8003656:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800365a:	d202      	bcs.n	8003662 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800365c:	4b10      	ldr	r3, [pc, #64]	; (80036a0 <SystemInit+0x110>)
 800365e:	2201      	movs	r2, #1
 8003660:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003662:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <SystemInit+0x114>)
 8003664:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003668:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800366a:	4b04      	ldr	r3, [pc, #16]	; (800367c <SystemInit+0xec>)
 800366c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003670:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003672:	bf00      	nop
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	e000ed00 	.word	0xe000ed00
 8003680:	52002000 	.word	0x52002000
 8003684:	58024400 	.word	0x58024400
 8003688:	eaf6ed7f 	.word	0xeaf6ed7f
 800368c:	02020200 	.word	0x02020200
 8003690:	01ff0000 	.word	0x01ff0000
 8003694:	01010280 	.word	0x01010280
 8003698:	5c001000 	.word	0x5c001000
 800369c:	ffff0000 	.word	0xffff0000
 80036a0:	51008108 	.word	0x51008108
 80036a4:	52004000 	.word	0x52004000

080036a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80036a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80036ac:	f7ff ff70 	bl	8003590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036b0:	480c      	ldr	r0, [pc, #48]	; (80036e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036b2:	490d      	ldr	r1, [pc, #52]	; (80036e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036b4:	4a0d      	ldr	r2, [pc, #52]	; (80036ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036b8:	e002      	b.n	80036c0 <LoopCopyDataInit>

080036ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036be:	3304      	adds	r3, #4

080036c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036c4:	d3f9      	bcc.n	80036ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036c6:	4a0a      	ldr	r2, [pc, #40]	; (80036f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036c8:	4c0a      	ldr	r4, [pc, #40]	; (80036f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80036ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036cc:	e001      	b.n	80036d2 <LoopFillZerobss>

080036ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036d0:	3204      	adds	r2, #4

080036d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036d4:	d3fb      	bcc.n	80036ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036d6:	f00a f921 	bl	800d91c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036da:	f7fd fe19 	bl	8001310 <main>
  bx  lr
 80036de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036e8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80036ec:	0800daa8 	.word	0x0800daa8
  ldr r2, =_sbss
 80036f0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80036f4:	200049a8 	.word	0x200049a8

080036f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036f8:	e7fe      	b.n	80036f8 <ADC3_IRQHandler>
	...

080036fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003702:	2003      	movs	r0, #3
 8003704:	f000 f90f 	bl	8003926 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003708:	f003 ffc6 	bl	8007698 <HAL_RCC_GetSysClockFreq>
 800370c:	4602      	mov	r2, r0
 800370e:	4b15      	ldr	r3, [pc, #84]	; (8003764 <HAL_Init+0x68>)
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	0a1b      	lsrs	r3, r3, #8
 8003714:	f003 030f 	and.w	r3, r3, #15
 8003718:	4913      	ldr	r1, [pc, #76]	; (8003768 <HAL_Init+0x6c>)
 800371a:	5ccb      	ldrb	r3, [r1, r3]
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	fa22 f303 	lsr.w	r3, r2, r3
 8003724:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003726:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <HAL_Init+0x68>)
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	4a0e      	ldr	r2, [pc, #56]	; (8003768 <HAL_Init+0x6c>)
 8003730:	5cd3      	ldrb	r3, [r2, r3]
 8003732:	f003 031f 	and.w	r3, r3, #31
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	fa22 f303 	lsr.w	r3, r2, r3
 800373c:	4a0b      	ldr	r2, [pc, #44]	; (800376c <HAL_Init+0x70>)
 800373e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003740:	4a0b      	ldr	r2, [pc, #44]	; (8003770 <HAL_Init+0x74>)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003746:	2000      	movs	r0, #0
 8003748:	f7ff fa20 	bl	8002b8c <HAL_InitTick>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e002      	b.n	800375c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003756:	f7fe fe41 	bl	80023dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	58024400 	.word	0x58024400
 8003768:	0800da58 	.word	0x0800da58
 800376c:	20000004 	.word	0x20000004
 8003770:	20000000 	.word	0x20000000

08003774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <HAL_IncTick+0x20>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_IncTick+0x24>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4413      	add	r3, r2
 8003784:	4a04      	ldr	r2, [pc, #16]	; (8003798 <HAL_IncTick+0x24>)
 8003786:	6013      	str	r3, [r2, #0]
}
 8003788:	bf00      	nop
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	2000000c 	.word	0x2000000c
 8003798:	200049a4 	.word	0x200049a4

0800379c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  return uwTick;
 80037a0:	4b03      	ldr	r3, [pc, #12]	; (80037b0 <HAL_GetTick+0x14>)
 80037a2:	681b      	ldr	r3, [r3, #0]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	200049a4 	.word	0x200049a4

080037b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80037b8:	4b03      	ldr	r3, [pc, #12]	; (80037c8 <HAL_GetREVID+0x14>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	0c1b      	lsrs	r3, r3, #16
}
 80037be:	4618      	mov	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	5c001000 	.word	0x5c001000

080037cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037dc:	4b0b      	ldr	r3, [pc, #44]	; (800380c <__NVIC_SetPriorityGrouping+0x40>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037e8:	4013      	ands	r3, r2
 80037ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <__NVIC_SetPriorityGrouping+0x44>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037fa:	4a04      	ldr	r2, [pc, #16]	; (800380c <__NVIC_SetPriorityGrouping+0x40>)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	60d3      	str	r3, [r2, #12]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	e000ed00 	.word	0xe000ed00
 8003810:	05fa0000 	.word	0x05fa0000

08003814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003818:	4b04      	ldr	r3, [pc, #16]	; (800382c <__NVIC_GetPriorityGrouping+0x18>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	0a1b      	lsrs	r3, r3, #8
 800381e:	f003 0307 	and.w	r3, r3, #7
}
 8003822:	4618      	mov	r0, r3
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800383a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800383e:	2b00      	cmp	r3, #0
 8003840:	db0b      	blt.n	800385a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003842:	88fb      	ldrh	r3, [r7, #6]
 8003844:	f003 021f 	and.w	r2, r3, #31
 8003848:	4907      	ldr	r1, [pc, #28]	; (8003868 <__NVIC_EnableIRQ+0x38>)
 800384a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	2001      	movs	r0, #1
 8003852:	fa00 f202 	lsl.w	r2, r0, r2
 8003856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	e000e100 	.word	0xe000e100

0800386c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	6039      	str	r1, [r7, #0]
 8003876:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003878:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800387c:	2b00      	cmp	r3, #0
 800387e:	db0a      	blt.n	8003896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	b2da      	uxtb	r2, r3
 8003884:	490c      	ldr	r1, [pc, #48]	; (80038b8 <__NVIC_SetPriority+0x4c>)
 8003886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800388a:	0112      	lsls	r2, r2, #4
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	440b      	add	r3, r1
 8003890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003894:	e00a      	b.n	80038ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	b2da      	uxtb	r2, r3
 800389a:	4908      	ldr	r1, [pc, #32]	; (80038bc <__NVIC_SetPriority+0x50>)
 800389c:	88fb      	ldrh	r3, [r7, #6]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	3b04      	subs	r3, #4
 80038a4:	0112      	lsls	r2, r2, #4
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	440b      	add	r3, r1
 80038aa:	761a      	strb	r2, [r3, #24]
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	e000e100 	.word	0xe000e100
 80038bc:	e000ed00 	.word	0xe000ed00

080038c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b089      	sub	sp, #36	; 0x24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f1c3 0307 	rsb	r3, r3, #7
 80038da:	2b04      	cmp	r3, #4
 80038dc:	bf28      	it	cs
 80038de:	2304      	movcs	r3, #4
 80038e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	3304      	adds	r3, #4
 80038e6:	2b06      	cmp	r3, #6
 80038e8:	d902      	bls.n	80038f0 <NVIC_EncodePriority+0x30>
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3b03      	subs	r3, #3
 80038ee:	e000      	b.n	80038f2 <NVIC_EncodePriority+0x32>
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f4:	f04f 32ff 	mov.w	r2, #4294967295
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43da      	mvns	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	401a      	ands	r2, r3
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003908:	f04f 31ff 	mov.w	r1, #4294967295
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	fa01 f303 	lsl.w	r3, r1, r3
 8003912:	43d9      	mvns	r1, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003918:	4313      	orrs	r3, r2
         );
}
 800391a:	4618      	mov	r0, r3
 800391c:	3724      	adds	r7, #36	; 0x24
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b082      	sub	sp, #8
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff ff4c 	bl	80037cc <__NVIC_SetPriorityGrouping>
}
 8003934:	bf00      	nop
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	4603      	mov	r3, r0
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800394a:	f7ff ff63 	bl	8003814 <__NVIC_GetPriorityGrouping>
 800394e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	68b9      	ldr	r1, [r7, #8]
 8003954:	6978      	ldr	r0, [r7, #20]
 8003956:	f7ff ffb3 	bl	80038c0 <NVIC_EncodePriority>
 800395a:	4602      	mov	r2, r0
 800395c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003960:	4611      	mov	r1, r2
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff ff82 	bl	800386c <__NVIC_SetPriority>
}
 8003968:	bf00      	nop
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800397a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff ff56 	bl	8003830 <__NVIC_EnableIRQ>
}
 8003984:	bf00      	nop
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003994:	f7ff ff02 	bl	800379c <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e316      	b.n	8003fd2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a66      	ldr	r2, [pc, #408]	; (8003b44 <HAL_DMA_Init+0x1b8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d04a      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a65      	ldr	r2, [pc, #404]	; (8003b48 <HAL_DMA_Init+0x1bc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d045      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a63      	ldr	r2, [pc, #396]	; (8003b4c <HAL_DMA_Init+0x1c0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d040      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a62      	ldr	r2, [pc, #392]	; (8003b50 <HAL_DMA_Init+0x1c4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d03b      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a60      	ldr	r2, [pc, #384]	; (8003b54 <HAL_DMA_Init+0x1c8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d036      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a5f      	ldr	r2, [pc, #380]	; (8003b58 <HAL_DMA_Init+0x1cc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d031      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a5d      	ldr	r2, [pc, #372]	; (8003b5c <HAL_DMA_Init+0x1d0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d02c      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a5c      	ldr	r2, [pc, #368]	; (8003b60 <HAL_DMA_Init+0x1d4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d027      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a5a      	ldr	r2, [pc, #360]	; (8003b64 <HAL_DMA_Init+0x1d8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d022      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a59      	ldr	r2, [pc, #356]	; (8003b68 <HAL_DMA_Init+0x1dc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d01d      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a57      	ldr	r2, [pc, #348]	; (8003b6c <HAL_DMA_Init+0x1e0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d018      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a56      	ldr	r2, [pc, #344]	; (8003b70 <HAL_DMA_Init+0x1e4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d013      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a54      	ldr	r2, [pc, #336]	; (8003b74 <HAL_DMA_Init+0x1e8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00e      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a53      	ldr	r2, [pc, #332]	; (8003b78 <HAL_DMA_Init+0x1ec>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d009      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a51      	ldr	r2, [pc, #324]	; (8003b7c <HAL_DMA_Init+0x1f0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d004      	beq.n	8003a44 <HAL_DMA_Init+0xb8>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a50      	ldr	r2, [pc, #320]	; (8003b80 <HAL_DMA_Init+0x1f4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d101      	bne.n	8003a48 <HAL_DMA_Init+0xbc>
 8003a44:	2301      	movs	r3, #1
 8003a46:	e000      	b.n	8003a4a <HAL_DMA_Init+0xbe>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 813b 	beq.w	8003cc6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a37      	ldr	r2, [pc, #220]	; (8003b44 <HAL_DMA_Init+0x1b8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d04a      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a36      	ldr	r2, [pc, #216]	; (8003b48 <HAL_DMA_Init+0x1bc>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d045      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a34      	ldr	r2, [pc, #208]	; (8003b4c <HAL_DMA_Init+0x1c0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d040      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a33      	ldr	r2, [pc, #204]	; (8003b50 <HAL_DMA_Init+0x1c4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d03b      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a31      	ldr	r2, [pc, #196]	; (8003b54 <HAL_DMA_Init+0x1c8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d036      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a30      	ldr	r2, [pc, #192]	; (8003b58 <HAL_DMA_Init+0x1cc>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d031      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a2e      	ldr	r2, [pc, #184]	; (8003b5c <HAL_DMA_Init+0x1d0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d02c      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a2d      	ldr	r2, [pc, #180]	; (8003b60 <HAL_DMA_Init+0x1d4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d027      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a2b      	ldr	r2, [pc, #172]	; (8003b64 <HAL_DMA_Init+0x1d8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d022      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a2a      	ldr	r2, [pc, #168]	; (8003b68 <HAL_DMA_Init+0x1dc>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d01d      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a28      	ldr	r2, [pc, #160]	; (8003b6c <HAL_DMA_Init+0x1e0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d018      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a27      	ldr	r2, [pc, #156]	; (8003b70 <HAL_DMA_Init+0x1e4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d013      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a25      	ldr	r2, [pc, #148]	; (8003b74 <HAL_DMA_Init+0x1e8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00e      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a24      	ldr	r2, [pc, #144]	; (8003b78 <HAL_DMA_Init+0x1ec>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d009      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a22      	ldr	r2, [pc, #136]	; (8003b7c <HAL_DMA_Init+0x1f0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d004      	beq.n	8003b00 <HAL_DMA_Init+0x174>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a21      	ldr	r2, [pc, #132]	; (8003b80 <HAL_DMA_Init+0x1f4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d108      	bne.n	8003b12 <HAL_DMA_Init+0x186>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0201 	bic.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	e007      	b.n	8003b22 <HAL_DMA_Init+0x196>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0201 	bic.w	r2, r2, #1
 8003b20:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b22:	e02f      	b.n	8003b84 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b24:	f7ff fe3a 	bl	800379c <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b05      	cmp	r3, #5
 8003b30:	d928      	bls.n	8003b84 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2220      	movs	r2, #32
 8003b36:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2203      	movs	r2, #3
 8003b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e246      	b.n	8003fd2 <HAL_DMA_Init+0x646>
 8003b44:	40020010 	.word	0x40020010
 8003b48:	40020028 	.word	0x40020028
 8003b4c:	40020040 	.word	0x40020040
 8003b50:	40020058 	.word	0x40020058
 8003b54:	40020070 	.word	0x40020070
 8003b58:	40020088 	.word	0x40020088
 8003b5c:	400200a0 	.word	0x400200a0
 8003b60:	400200b8 	.word	0x400200b8
 8003b64:	40020410 	.word	0x40020410
 8003b68:	40020428 	.word	0x40020428
 8003b6c:	40020440 	.word	0x40020440
 8003b70:	40020458 	.word	0x40020458
 8003b74:	40020470 	.word	0x40020470
 8003b78:	40020488 	.word	0x40020488
 8003b7c:	400204a0 	.word	0x400204a0
 8003b80:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1c8      	bne.n	8003b24 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	4b83      	ldr	r3, [pc, #524]	; (8003dac <HAL_DMA_Init+0x420>)
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003baa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bc2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d107      	bne.n	8003be8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	4313      	orrs	r3, r2
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003be8:	4b71      	ldr	r3, [pc, #452]	; (8003db0 <HAL_DMA_Init+0x424>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	4b71      	ldr	r3, [pc, #452]	; (8003db4 <HAL_DMA_Init+0x428>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bf4:	d328      	bcc.n	8003c48 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b28      	cmp	r3, #40	; 0x28
 8003bfc:	d903      	bls.n	8003c06 <HAL_DMA_Init+0x27a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b2e      	cmp	r3, #46	; 0x2e
 8003c04:	d917      	bls.n	8003c36 <HAL_DMA_Init+0x2aa>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b3e      	cmp	r3, #62	; 0x3e
 8003c0c:	d903      	bls.n	8003c16 <HAL_DMA_Init+0x28a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b42      	cmp	r3, #66	; 0x42
 8003c14:	d90f      	bls.n	8003c36 <HAL_DMA_Init+0x2aa>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b46      	cmp	r3, #70	; 0x46
 8003c1c:	d903      	bls.n	8003c26 <HAL_DMA_Init+0x29a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b48      	cmp	r3, #72	; 0x48
 8003c24:	d907      	bls.n	8003c36 <HAL_DMA_Init+0x2aa>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b4e      	cmp	r3, #78	; 0x4e
 8003c2c:	d905      	bls.n	8003c3a <HAL_DMA_Init+0x2ae>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b52      	cmp	r3, #82	; 0x52
 8003c34:	d801      	bhi.n	8003c3a <HAL_DMA_Init+0x2ae>
 8003c36:	2301      	movs	r3, #1
 8003c38:	e000      	b.n	8003c3c <HAL_DMA_Init+0x2b0>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c46:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f023 0307 	bic.w	r3, r3, #7
 8003c5e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d117      	bne.n	8003ca2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00e      	beq.n	8003ca2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f002 fb3d 	bl	8006304 <DMA_CheckFifoParam>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d008      	beq.n	8003ca2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2240      	movs	r2, #64	; 0x40
 8003c94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e197      	b.n	8003fd2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f002 fa78 	bl	80061a0 <DMA_CalcBaseAndBitshift>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb8:	f003 031f 	and.w	r3, r3, #31
 8003cbc:	223f      	movs	r2, #63	; 0x3f
 8003cbe:	409a      	lsls	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	e0cd      	b.n	8003e62 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a3b      	ldr	r2, [pc, #236]	; (8003db8 <HAL_DMA_Init+0x42c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d022      	beq.n	8003d16 <HAL_DMA_Init+0x38a>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a39      	ldr	r2, [pc, #228]	; (8003dbc <HAL_DMA_Init+0x430>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d01d      	beq.n	8003d16 <HAL_DMA_Init+0x38a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a38      	ldr	r2, [pc, #224]	; (8003dc0 <HAL_DMA_Init+0x434>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d018      	beq.n	8003d16 <HAL_DMA_Init+0x38a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a36      	ldr	r2, [pc, #216]	; (8003dc4 <HAL_DMA_Init+0x438>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d013      	beq.n	8003d16 <HAL_DMA_Init+0x38a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a35      	ldr	r2, [pc, #212]	; (8003dc8 <HAL_DMA_Init+0x43c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00e      	beq.n	8003d16 <HAL_DMA_Init+0x38a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a33      	ldr	r2, [pc, #204]	; (8003dcc <HAL_DMA_Init+0x440>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d009      	beq.n	8003d16 <HAL_DMA_Init+0x38a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a32      	ldr	r2, [pc, #200]	; (8003dd0 <HAL_DMA_Init+0x444>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d004      	beq.n	8003d16 <HAL_DMA_Init+0x38a>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a30      	ldr	r2, [pc, #192]	; (8003dd4 <HAL_DMA_Init+0x448>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d101      	bne.n	8003d1a <HAL_DMA_Init+0x38e>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <HAL_DMA_Init+0x390>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 8097 	beq.w	8003e50 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a24      	ldr	r2, [pc, #144]	; (8003db8 <HAL_DMA_Init+0x42c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d021      	beq.n	8003d70 <HAL_DMA_Init+0x3e4>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a22      	ldr	r2, [pc, #136]	; (8003dbc <HAL_DMA_Init+0x430>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d01c      	beq.n	8003d70 <HAL_DMA_Init+0x3e4>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a21      	ldr	r2, [pc, #132]	; (8003dc0 <HAL_DMA_Init+0x434>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d017      	beq.n	8003d70 <HAL_DMA_Init+0x3e4>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1f      	ldr	r2, [pc, #124]	; (8003dc4 <HAL_DMA_Init+0x438>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d012      	beq.n	8003d70 <HAL_DMA_Init+0x3e4>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1e      	ldr	r2, [pc, #120]	; (8003dc8 <HAL_DMA_Init+0x43c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00d      	beq.n	8003d70 <HAL_DMA_Init+0x3e4>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1c      	ldr	r2, [pc, #112]	; (8003dcc <HAL_DMA_Init+0x440>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d008      	beq.n	8003d70 <HAL_DMA_Init+0x3e4>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a1b      	ldr	r2, [pc, #108]	; (8003dd0 <HAL_DMA_Init+0x444>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d003      	beq.n	8003d70 <HAL_DMA_Init+0x3e4>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a19      	ldr	r2, [pc, #100]	; (8003dd4 <HAL_DMA_Init+0x448>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <HAL_DMA_Init+0x44c>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2b40      	cmp	r3, #64	; 0x40
 8003d98:	d020      	beq.n	8003ddc <HAL_DMA_Init+0x450>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	2b80      	cmp	r3, #128	; 0x80
 8003da0:	d102      	bne.n	8003da8 <HAL_DMA_Init+0x41c>
 8003da2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003da6:	e01a      	b.n	8003dde <HAL_DMA_Init+0x452>
 8003da8:	2300      	movs	r3, #0
 8003daa:	e018      	b.n	8003dde <HAL_DMA_Init+0x452>
 8003dac:	fe10803f 	.word	0xfe10803f
 8003db0:	5c001000 	.word	0x5c001000
 8003db4:	ffff0000 	.word	0xffff0000
 8003db8:	58025408 	.word	0x58025408
 8003dbc:	5802541c 	.word	0x5802541c
 8003dc0:	58025430 	.word	0x58025430
 8003dc4:	58025444 	.word	0x58025444
 8003dc8:	58025458 	.word	0x58025458
 8003dcc:	5802546c 	.word	0x5802546c
 8003dd0:	58025480 	.word	0x58025480
 8003dd4:	58025494 	.word	0x58025494
 8003dd8:	fffe000f 	.word	0xfffe000f
 8003ddc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	68d2      	ldr	r2, [r2, #12]
 8003de2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003de4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003dec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003df4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003dfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e0c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	4b6e      	ldr	r3, [pc, #440]	; (8003fdc <HAL_DMA_Init+0x650>)
 8003e24:	4413      	add	r3, r2
 8003e26:	4a6e      	ldr	r2, [pc, #440]	; (8003fe0 <HAL_DMA_Init+0x654>)
 8003e28:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2c:	091b      	lsrs	r3, r3, #4
 8003e2e:	009a      	lsls	r2, r3, #2
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f002 f9b3 	bl	80061a0 <DMA_CalcBaseAndBitshift>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e42:	f003 031f 	and.w	r3, r3, #31
 8003e46:	2201      	movs	r2, #1
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	605a      	str	r2, [r3, #4]
 8003e4e:	e008      	b.n	8003e62 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2240      	movs	r2, #64	; 0x40
 8003e54:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2203      	movs	r2, #3
 8003e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e0b7      	b.n	8003fd2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a5f      	ldr	r2, [pc, #380]	; (8003fe4 <HAL_DMA_Init+0x658>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d072      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a5d      	ldr	r2, [pc, #372]	; (8003fe8 <HAL_DMA_Init+0x65c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d06d      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a5c      	ldr	r2, [pc, #368]	; (8003fec <HAL_DMA_Init+0x660>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d068      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a5a      	ldr	r2, [pc, #360]	; (8003ff0 <HAL_DMA_Init+0x664>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d063      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a59      	ldr	r2, [pc, #356]	; (8003ff4 <HAL_DMA_Init+0x668>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d05e      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a57      	ldr	r2, [pc, #348]	; (8003ff8 <HAL_DMA_Init+0x66c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d059      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a56      	ldr	r2, [pc, #344]	; (8003ffc <HAL_DMA_Init+0x670>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d054      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a54      	ldr	r2, [pc, #336]	; (8004000 <HAL_DMA_Init+0x674>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d04f      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a53      	ldr	r2, [pc, #332]	; (8004004 <HAL_DMA_Init+0x678>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d04a      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a51      	ldr	r2, [pc, #324]	; (8004008 <HAL_DMA_Init+0x67c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d045      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a50      	ldr	r2, [pc, #320]	; (800400c <HAL_DMA_Init+0x680>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d040      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a4e      	ldr	r2, [pc, #312]	; (8004010 <HAL_DMA_Init+0x684>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d03b      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a4d      	ldr	r2, [pc, #308]	; (8004014 <HAL_DMA_Init+0x688>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d036      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a4b      	ldr	r2, [pc, #300]	; (8004018 <HAL_DMA_Init+0x68c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d031      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a4a      	ldr	r2, [pc, #296]	; (800401c <HAL_DMA_Init+0x690>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d02c      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a48      	ldr	r2, [pc, #288]	; (8004020 <HAL_DMA_Init+0x694>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d027      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a47      	ldr	r2, [pc, #284]	; (8004024 <HAL_DMA_Init+0x698>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d022      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a45      	ldr	r2, [pc, #276]	; (8004028 <HAL_DMA_Init+0x69c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d01d      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a44      	ldr	r2, [pc, #272]	; (800402c <HAL_DMA_Init+0x6a0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d018      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a42      	ldr	r2, [pc, #264]	; (8004030 <HAL_DMA_Init+0x6a4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d013      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a41      	ldr	r2, [pc, #260]	; (8004034 <HAL_DMA_Init+0x6a8>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00e      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a3f      	ldr	r2, [pc, #252]	; (8004038 <HAL_DMA_Init+0x6ac>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d009      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a3e      	ldr	r2, [pc, #248]	; (800403c <HAL_DMA_Init+0x6b0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <HAL_DMA_Init+0x5c6>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a3c      	ldr	r2, [pc, #240]	; (8004040 <HAL_DMA_Init+0x6b4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d101      	bne.n	8003f56 <HAL_DMA_Init+0x5ca>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <HAL_DMA_Init+0x5cc>
 8003f56:	2300      	movs	r3, #0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d032      	beq.n	8003fc2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f002 fa4d 	bl	80063fc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2b80      	cmp	r3, #128	; 0x80
 8003f68:	d102      	bne.n	8003f70 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f84:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d010      	beq.n	8003fb0 <HAL_DMA_Init+0x624>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d80c      	bhi.n	8003fb0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f002 faca 	bl	8006530 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	e008      	b.n	8003fc2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	a7fdabf8 	.word	0xa7fdabf8
 8003fe0:	cccccccd 	.word	0xcccccccd
 8003fe4:	40020010 	.word	0x40020010
 8003fe8:	40020028 	.word	0x40020028
 8003fec:	40020040 	.word	0x40020040
 8003ff0:	40020058 	.word	0x40020058
 8003ff4:	40020070 	.word	0x40020070
 8003ff8:	40020088 	.word	0x40020088
 8003ffc:	400200a0 	.word	0x400200a0
 8004000:	400200b8 	.word	0x400200b8
 8004004:	40020410 	.word	0x40020410
 8004008:	40020428 	.word	0x40020428
 800400c:	40020440 	.word	0x40020440
 8004010:	40020458 	.word	0x40020458
 8004014:	40020470 	.word	0x40020470
 8004018:	40020488 	.word	0x40020488
 800401c:	400204a0 	.word	0x400204a0
 8004020:	400204b8 	.word	0x400204b8
 8004024:	58025408 	.word	0x58025408
 8004028:	5802541c 	.word	0x5802541c
 800402c:	58025430 	.word	0x58025430
 8004030:	58025444 	.word	0x58025444
 8004034:	58025458 	.word	0x58025458
 8004038:	5802546c 	.word	0x5802546c
 800403c:	58025480 	.word	0x58025480
 8004040:	58025494 	.word	0x58025494

08004044 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e226      	b.n	80044ae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <HAL_DMA_Start_IT+0x2a>
 800406a:	2302      	movs	r3, #2
 800406c:	e21f      	b.n	80044ae <HAL_DMA_Start_IT+0x46a>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b01      	cmp	r3, #1
 8004080:	f040 820a 	bne.w	8004498 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a68      	ldr	r2, [pc, #416]	; (8004238 <HAL_DMA_Start_IT+0x1f4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d04a      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a66      	ldr	r2, [pc, #408]	; (800423c <HAL_DMA_Start_IT+0x1f8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d045      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a65      	ldr	r2, [pc, #404]	; (8004240 <HAL_DMA_Start_IT+0x1fc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d040      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a63      	ldr	r2, [pc, #396]	; (8004244 <HAL_DMA_Start_IT+0x200>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d03b      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a62      	ldr	r2, [pc, #392]	; (8004248 <HAL_DMA_Start_IT+0x204>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d036      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a60      	ldr	r2, [pc, #384]	; (800424c <HAL_DMA_Start_IT+0x208>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d031      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a5f      	ldr	r2, [pc, #380]	; (8004250 <HAL_DMA_Start_IT+0x20c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d02c      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a5d      	ldr	r2, [pc, #372]	; (8004254 <HAL_DMA_Start_IT+0x210>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d027      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a5c      	ldr	r2, [pc, #368]	; (8004258 <HAL_DMA_Start_IT+0x214>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d022      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a5a      	ldr	r2, [pc, #360]	; (800425c <HAL_DMA_Start_IT+0x218>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d01d      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a59      	ldr	r2, [pc, #356]	; (8004260 <HAL_DMA_Start_IT+0x21c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d018      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a57      	ldr	r2, [pc, #348]	; (8004264 <HAL_DMA_Start_IT+0x220>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d013      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a56      	ldr	r2, [pc, #344]	; (8004268 <HAL_DMA_Start_IT+0x224>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00e      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a54      	ldr	r2, [pc, #336]	; (800426c <HAL_DMA_Start_IT+0x228>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d009      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a53      	ldr	r2, [pc, #332]	; (8004270 <HAL_DMA_Start_IT+0x22c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d004      	beq.n	8004132 <HAL_DMA_Start_IT+0xee>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a51      	ldr	r2, [pc, #324]	; (8004274 <HAL_DMA_Start_IT+0x230>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d108      	bne.n	8004144 <HAL_DMA_Start_IT+0x100>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0201 	bic.w	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	e007      	b.n	8004154 <HAL_DMA_Start_IT+0x110>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0201 	bic.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f001 fe74 	bl	8005e48 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a34      	ldr	r2, [pc, #208]	; (8004238 <HAL_DMA_Start_IT+0x1f4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d04a      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a33      	ldr	r2, [pc, #204]	; (800423c <HAL_DMA_Start_IT+0x1f8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d045      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a31      	ldr	r2, [pc, #196]	; (8004240 <HAL_DMA_Start_IT+0x1fc>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d040      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a30      	ldr	r2, [pc, #192]	; (8004244 <HAL_DMA_Start_IT+0x200>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d03b      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a2e      	ldr	r2, [pc, #184]	; (8004248 <HAL_DMA_Start_IT+0x204>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d036      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a2d      	ldr	r2, [pc, #180]	; (800424c <HAL_DMA_Start_IT+0x208>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d031      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a2b      	ldr	r2, [pc, #172]	; (8004250 <HAL_DMA_Start_IT+0x20c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d02c      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a2a      	ldr	r2, [pc, #168]	; (8004254 <HAL_DMA_Start_IT+0x210>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d027      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a28      	ldr	r2, [pc, #160]	; (8004258 <HAL_DMA_Start_IT+0x214>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d022      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a27      	ldr	r2, [pc, #156]	; (800425c <HAL_DMA_Start_IT+0x218>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d01d      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a25      	ldr	r2, [pc, #148]	; (8004260 <HAL_DMA_Start_IT+0x21c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d018      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a24      	ldr	r2, [pc, #144]	; (8004264 <HAL_DMA_Start_IT+0x220>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d013      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a22      	ldr	r2, [pc, #136]	; (8004268 <HAL_DMA_Start_IT+0x224>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00e      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a21      	ldr	r2, [pc, #132]	; (800426c <HAL_DMA_Start_IT+0x228>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d009      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1f      	ldr	r2, [pc, #124]	; (8004270 <HAL_DMA_Start_IT+0x22c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d004      	beq.n	8004200 <HAL_DMA_Start_IT+0x1bc>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a1e      	ldr	r2, [pc, #120]	; (8004274 <HAL_DMA_Start_IT+0x230>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d101      	bne.n	8004204 <HAL_DMA_Start_IT+0x1c0>
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <HAL_DMA_Start_IT+0x1c2>
 8004204:	2300      	movs	r3, #0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d036      	beq.n	8004278 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f023 021e 	bic.w	r2, r3, #30
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 0216 	orr.w	r2, r2, #22
 800421c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	2b00      	cmp	r3, #0
 8004224:	d03e      	beq.n	80042a4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f042 0208 	orr.w	r2, r2, #8
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	e035      	b.n	80042a4 <HAL_DMA_Start_IT+0x260>
 8004238:	40020010 	.word	0x40020010
 800423c:	40020028 	.word	0x40020028
 8004240:	40020040 	.word	0x40020040
 8004244:	40020058 	.word	0x40020058
 8004248:	40020070 	.word	0x40020070
 800424c:	40020088 	.word	0x40020088
 8004250:	400200a0 	.word	0x400200a0
 8004254:	400200b8 	.word	0x400200b8
 8004258:	40020410 	.word	0x40020410
 800425c:	40020428 	.word	0x40020428
 8004260:	40020440 	.word	0x40020440
 8004264:	40020458 	.word	0x40020458
 8004268:	40020470 	.word	0x40020470
 800426c:	40020488 	.word	0x40020488
 8004270:	400204a0 	.word	0x400204a0
 8004274:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f023 020e 	bic.w	r2, r3, #14
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 020a 	orr.w	r2, r2, #10
 800428a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	2b00      	cmp	r3, #0
 8004292:	d007      	beq.n	80042a4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0204 	orr.w	r2, r2, #4
 80042a2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a83      	ldr	r2, [pc, #524]	; (80044b8 <HAL_DMA_Start_IT+0x474>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d072      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a82      	ldr	r2, [pc, #520]	; (80044bc <HAL_DMA_Start_IT+0x478>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d06d      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a80      	ldr	r2, [pc, #512]	; (80044c0 <HAL_DMA_Start_IT+0x47c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d068      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a7f      	ldr	r2, [pc, #508]	; (80044c4 <HAL_DMA_Start_IT+0x480>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d063      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a7d      	ldr	r2, [pc, #500]	; (80044c8 <HAL_DMA_Start_IT+0x484>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d05e      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a7c      	ldr	r2, [pc, #496]	; (80044cc <HAL_DMA_Start_IT+0x488>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d059      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a7a      	ldr	r2, [pc, #488]	; (80044d0 <HAL_DMA_Start_IT+0x48c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d054      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a79      	ldr	r2, [pc, #484]	; (80044d4 <HAL_DMA_Start_IT+0x490>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d04f      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a77      	ldr	r2, [pc, #476]	; (80044d8 <HAL_DMA_Start_IT+0x494>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d04a      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a76      	ldr	r2, [pc, #472]	; (80044dc <HAL_DMA_Start_IT+0x498>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d045      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a74      	ldr	r2, [pc, #464]	; (80044e0 <HAL_DMA_Start_IT+0x49c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d040      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a73      	ldr	r2, [pc, #460]	; (80044e4 <HAL_DMA_Start_IT+0x4a0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d03b      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a71      	ldr	r2, [pc, #452]	; (80044e8 <HAL_DMA_Start_IT+0x4a4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d036      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a70      	ldr	r2, [pc, #448]	; (80044ec <HAL_DMA_Start_IT+0x4a8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d031      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a6e      	ldr	r2, [pc, #440]	; (80044f0 <HAL_DMA_Start_IT+0x4ac>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d02c      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a6d      	ldr	r2, [pc, #436]	; (80044f4 <HAL_DMA_Start_IT+0x4b0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d027      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a6b      	ldr	r2, [pc, #428]	; (80044f8 <HAL_DMA_Start_IT+0x4b4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d022      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a6a      	ldr	r2, [pc, #424]	; (80044fc <HAL_DMA_Start_IT+0x4b8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d01d      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a68      	ldr	r2, [pc, #416]	; (8004500 <HAL_DMA_Start_IT+0x4bc>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d018      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a67      	ldr	r2, [pc, #412]	; (8004504 <HAL_DMA_Start_IT+0x4c0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d013      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a65      	ldr	r2, [pc, #404]	; (8004508 <HAL_DMA_Start_IT+0x4c4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00e      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a64      	ldr	r2, [pc, #400]	; (800450c <HAL_DMA_Start_IT+0x4c8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d009      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a62      	ldr	r2, [pc, #392]	; (8004510 <HAL_DMA_Start_IT+0x4cc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d004      	beq.n	8004394 <HAL_DMA_Start_IT+0x350>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a61      	ldr	r2, [pc, #388]	; (8004514 <HAL_DMA_Start_IT+0x4d0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d101      	bne.n	8004398 <HAL_DMA_Start_IT+0x354>
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <HAL_DMA_Start_IT+0x356>
 8004398:	2300      	movs	r3, #0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d01a      	beq.n	80043d4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d007      	beq.n	80043bc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d007      	beq.n	80043d4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043d2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a37      	ldr	r2, [pc, #220]	; (80044b8 <HAL_DMA_Start_IT+0x474>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d04a      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a36      	ldr	r2, [pc, #216]	; (80044bc <HAL_DMA_Start_IT+0x478>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d045      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a34      	ldr	r2, [pc, #208]	; (80044c0 <HAL_DMA_Start_IT+0x47c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d040      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a33      	ldr	r2, [pc, #204]	; (80044c4 <HAL_DMA_Start_IT+0x480>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d03b      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a31      	ldr	r2, [pc, #196]	; (80044c8 <HAL_DMA_Start_IT+0x484>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d036      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a30      	ldr	r2, [pc, #192]	; (80044cc <HAL_DMA_Start_IT+0x488>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d031      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a2e      	ldr	r2, [pc, #184]	; (80044d0 <HAL_DMA_Start_IT+0x48c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d02c      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a2d      	ldr	r2, [pc, #180]	; (80044d4 <HAL_DMA_Start_IT+0x490>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d027      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a2b      	ldr	r2, [pc, #172]	; (80044d8 <HAL_DMA_Start_IT+0x494>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d022      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a2a      	ldr	r2, [pc, #168]	; (80044dc <HAL_DMA_Start_IT+0x498>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d01d      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a28      	ldr	r2, [pc, #160]	; (80044e0 <HAL_DMA_Start_IT+0x49c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d018      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a27      	ldr	r2, [pc, #156]	; (80044e4 <HAL_DMA_Start_IT+0x4a0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d013      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a25      	ldr	r2, [pc, #148]	; (80044e8 <HAL_DMA_Start_IT+0x4a4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00e      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a24      	ldr	r2, [pc, #144]	; (80044ec <HAL_DMA_Start_IT+0x4a8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d009      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a22      	ldr	r2, [pc, #136]	; (80044f0 <HAL_DMA_Start_IT+0x4ac>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d004      	beq.n	8004474 <HAL_DMA_Start_IT+0x430>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a21      	ldr	r2, [pc, #132]	; (80044f4 <HAL_DMA_Start_IT+0x4b0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d108      	bne.n	8004486 <HAL_DMA_Start_IT+0x442>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	e012      	b.n	80044ac <HAL_DMA_Start_IT+0x468>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 0201 	orr.w	r2, r2, #1
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	e009      	b.n	80044ac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40020010 	.word	0x40020010
 80044bc:	40020028 	.word	0x40020028
 80044c0:	40020040 	.word	0x40020040
 80044c4:	40020058 	.word	0x40020058
 80044c8:	40020070 	.word	0x40020070
 80044cc:	40020088 	.word	0x40020088
 80044d0:	400200a0 	.word	0x400200a0
 80044d4:	400200b8 	.word	0x400200b8
 80044d8:	40020410 	.word	0x40020410
 80044dc:	40020428 	.word	0x40020428
 80044e0:	40020440 	.word	0x40020440
 80044e4:	40020458 	.word	0x40020458
 80044e8:	40020470 	.word	0x40020470
 80044ec:	40020488 	.word	0x40020488
 80044f0:	400204a0 	.word	0x400204a0
 80044f4:	400204b8 	.word	0x400204b8
 80044f8:	58025408 	.word	0x58025408
 80044fc:	5802541c 	.word	0x5802541c
 8004500:	58025430 	.word	0x58025430
 8004504:	58025444 	.word	0x58025444
 8004508:	58025458 	.word	0x58025458
 800450c:	5802546c 	.word	0x5802546c
 8004510:	58025480 	.word	0x58025480
 8004514:	58025494 	.word	0x58025494

08004518 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004520:	f7ff f93c 	bl	800379c <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e2dc      	b.n	8004aea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d008      	beq.n	800454e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2280      	movs	r2, #128	; 0x80
 8004540:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e2cd      	b.n	8004aea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a76      	ldr	r2, [pc, #472]	; (800472c <HAL_DMA_Abort+0x214>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d04a      	beq.n	80045ee <HAL_DMA_Abort+0xd6>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a74      	ldr	r2, [pc, #464]	; (8004730 <HAL_DMA_Abort+0x218>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d045      	beq.n	80045ee <HAL_DMA_Abort+0xd6>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a73      	ldr	r2, [pc, #460]	; (8004734 <HAL_DMA_Abort+0x21c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d040      	beq.n	80045ee <HAL_DMA_Abort+0xd6>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a71      	ldr	r2, [pc, #452]	; (8004738 <HAL_DMA_Abort+0x220>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d03b      	beq.n	80045ee <HAL_DMA_Abort+0xd6>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a70      	ldr	r2, [pc, #448]	; (800473c <HAL_DMA_Abort+0x224>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d036      	beq.n	80045ee <HAL_DMA_Abort+0xd6>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a6e      	ldr	r2, [pc, #440]	; (8004740 <HAL_DMA_Abort+0x228>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d031      	beq.n	80045ee <HAL_DMA_Abort+0xd6>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a6d      	ldr	r2, [pc, #436]	; (8004744 <HAL_DMA_Abort+0x22c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d02c      	beq.n	80045ee <HAL_DMA_Abort+0xd6>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a6b      	ldr	r2, [pc, #428]	; (8004748 <HAL_DMA_Abort+0x230>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d027      	beq.n	80045ee <HAL_DMA_Abort+0xd6>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a6a      	ldr	r2, [pc, #424]	; (800474c <HAL_DMA_Abort+0x234>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d022      	beq.n	80045ee <HAL_DMA_Abort+0xd6>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a68      	ldr	r2, [pc, #416]	; (8004750 <HAL_DMA_Abort+0x238>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d01d      	beq.n	80045ee <HAL_DMA_Abort+0xd6>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a67      	ldr	r2, [pc, #412]	; (8004754 <HAL_DMA_Abort+0x23c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d018      	beq.n	80045ee <HAL_DMA_Abort+0xd6>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a65      	ldr	r2, [pc, #404]	; (8004758 <HAL_DMA_Abort+0x240>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d013      	beq.n	80045ee <HAL_DMA_Abort+0xd6>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a64      	ldr	r2, [pc, #400]	; (800475c <HAL_DMA_Abort+0x244>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d00e      	beq.n	80045ee <HAL_DMA_Abort+0xd6>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a62      	ldr	r2, [pc, #392]	; (8004760 <HAL_DMA_Abort+0x248>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d009      	beq.n	80045ee <HAL_DMA_Abort+0xd6>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a61      	ldr	r2, [pc, #388]	; (8004764 <HAL_DMA_Abort+0x24c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d004      	beq.n	80045ee <HAL_DMA_Abort+0xd6>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a5f      	ldr	r2, [pc, #380]	; (8004768 <HAL_DMA_Abort+0x250>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d101      	bne.n	80045f2 <HAL_DMA_Abort+0xda>
 80045ee:	2301      	movs	r3, #1
 80045f0:	e000      	b.n	80045f4 <HAL_DMA_Abort+0xdc>
 80045f2:	2300      	movs	r3, #0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d013      	beq.n	8004620 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 021e 	bic.w	r2, r2, #30
 8004606:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695a      	ldr	r2, [r3, #20]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004616:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	e00a      	b.n	8004636 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 020e 	bic.w	r2, r2, #14
 800462e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a3c      	ldr	r2, [pc, #240]	; (800472c <HAL_DMA_Abort+0x214>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d072      	beq.n	8004726 <HAL_DMA_Abort+0x20e>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a3a      	ldr	r2, [pc, #232]	; (8004730 <HAL_DMA_Abort+0x218>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d06d      	beq.n	8004726 <HAL_DMA_Abort+0x20e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a39      	ldr	r2, [pc, #228]	; (8004734 <HAL_DMA_Abort+0x21c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d068      	beq.n	8004726 <HAL_DMA_Abort+0x20e>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a37      	ldr	r2, [pc, #220]	; (8004738 <HAL_DMA_Abort+0x220>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d063      	beq.n	8004726 <HAL_DMA_Abort+0x20e>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a36      	ldr	r2, [pc, #216]	; (800473c <HAL_DMA_Abort+0x224>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d05e      	beq.n	8004726 <HAL_DMA_Abort+0x20e>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a34      	ldr	r2, [pc, #208]	; (8004740 <HAL_DMA_Abort+0x228>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d059      	beq.n	8004726 <HAL_DMA_Abort+0x20e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a33      	ldr	r2, [pc, #204]	; (8004744 <HAL_DMA_Abort+0x22c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d054      	beq.n	8004726 <HAL_DMA_Abort+0x20e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a31      	ldr	r2, [pc, #196]	; (8004748 <HAL_DMA_Abort+0x230>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d04f      	beq.n	8004726 <HAL_DMA_Abort+0x20e>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a30      	ldr	r2, [pc, #192]	; (800474c <HAL_DMA_Abort+0x234>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d04a      	beq.n	8004726 <HAL_DMA_Abort+0x20e>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a2e      	ldr	r2, [pc, #184]	; (8004750 <HAL_DMA_Abort+0x238>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d045      	beq.n	8004726 <HAL_DMA_Abort+0x20e>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a2d      	ldr	r2, [pc, #180]	; (8004754 <HAL_DMA_Abort+0x23c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d040      	beq.n	8004726 <HAL_DMA_Abort+0x20e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a2b      	ldr	r2, [pc, #172]	; (8004758 <HAL_DMA_Abort+0x240>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d03b      	beq.n	8004726 <HAL_DMA_Abort+0x20e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a2a      	ldr	r2, [pc, #168]	; (800475c <HAL_DMA_Abort+0x244>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d036      	beq.n	8004726 <HAL_DMA_Abort+0x20e>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a28      	ldr	r2, [pc, #160]	; (8004760 <HAL_DMA_Abort+0x248>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d031      	beq.n	8004726 <HAL_DMA_Abort+0x20e>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a27      	ldr	r2, [pc, #156]	; (8004764 <HAL_DMA_Abort+0x24c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d02c      	beq.n	8004726 <HAL_DMA_Abort+0x20e>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a25      	ldr	r2, [pc, #148]	; (8004768 <HAL_DMA_Abort+0x250>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d027      	beq.n	8004726 <HAL_DMA_Abort+0x20e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a24      	ldr	r2, [pc, #144]	; (800476c <HAL_DMA_Abort+0x254>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d022      	beq.n	8004726 <HAL_DMA_Abort+0x20e>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a22      	ldr	r2, [pc, #136]	; (8004770 <HAL_DMA_Abort+0x258>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d01d      	beq.n	8004726 <HAL_DMA_Abort+0x20e>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a21      	ldr	r2, [pc, #132]	; (8004774 <HAL_DMA_Abort+0x25c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d018      	beq.n	8004726 <HAL_DMA_Abort+0x20e>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1f      	ldr	r2, [pc, #124]	; (8004778 <HAL_DMA_Abort+0x260>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <HAL_DMA_Abort+0x20e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1e      	ldr	r2, [pc, #120]	; (800477c <HAL_DMA_Abort+0x264>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00e      	beq.n	8004726 <HAL_DMA_Abort+0x20e>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1c      	ldr	r2, [pc, #112]	; (8004780 <HAL_DMA_Abort+0x268>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d009      	beq.n	8004726 <HAL_DMA_Abort+0x20e>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a1b      	ldr	r2, [pc, #108]	; (8004784 <HAL_DMA_Abort+0x26c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d004      	beq.n	8004726 <HAL_DMA_Abort+0x20e>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a19      	ldr	r2, [pc, #100]	; (8004788 <HAL_DMA_Abort+0x270>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d132      	bne.n	800478c <HAL_DMA_Abort+0x274>
 8004726:	2301      	movs	r3, #1
 8004728:	e031      	b.n	800478e <HAL_DMA_Abort+0x276>
 800472a:	bf00      	nop
 800472c:	40020010 	.word	0x40020010
 8004730:	40020028 	.word	0x40020028
 8004734:	40020040 	.word	0x40020040
 8004738:	40020058 	.word	0x40020058
 800473c:	40020070 	.word	0x40020070
 8004740:	40020088 	.word	0x40020088
 8004744:	400200a0 	.word	0x400200a0
 8004748:	400200b8 	.word	0x400200b8
 800474c:	40020410 	.word	0x40020410
 8004750:	40020428 	.word	0x40020428
 8004754:	40020440 	.word	0x40020440
 8004758:	40020458 	.word	0x40020458
 800475c:	40020470 	.word	0x40020470
 8004760:	40020488 	.word	0x40020488
 8004764:	400204a0 	.word	0x400204a0
 8004768:	400204b8 	.word	0x400204b8
 800476c:	58025408 	.word	0x58025408
 8004770:	5802541c 	.word	0x5802541c
 8004774:	58025430 	.word	0x58025430
 8004778:	58025444 	.word	0x58025444
 800477c:	58025458 	.word	0x58025458
 8004780:	5802546c 	.word	0x5802546c
 8004784:	58025480 	.word	0x58025480
 8004788:	58025494 	.word	0x58025494
 800478c:	2300      	movs	r3, #0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d007      	beq.n	80047a2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800479c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a6d      	ldr	r2, [pc, #436]	; (800495c <HAL_DMA_Abort+0x444>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d04a      	beq.n	8004842 <HAL_DMA_Abort+0x32a>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a6b      	ldr	r2, [pc, #428]	; (8004960 <HAL_DMA_Abort+0x448>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d045      	beq.n	8004842 <HAL_DMA_Abort+0x32a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a6a      	ldr	r2, [pc, #424]	; (8004964 <HAL_DMA_Abort+0x44c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d040      	beq.n	8004842 <HAL_DMA_Abort+0x32a>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a68      	ldr	r2, [pc, #416]	; (8004968 <HAL_DMA_Abort+0x450>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d03b      	beq.n	8004842 <HAL_DMA_Abort+0x32a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a67      	ldr	r2, [pc, #412]	; (800496c <HAL_DMA_Abort+0x454>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d036      	beq.n	8004842 <HAL_DMA_Abort+0x32a>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a65      	ldr	r2, [pc, #404]	; (8004970 <HAL_DMA_Abort+0x458>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d031      	beq.n	8004842 <HAL_DMA_Abort+0x32a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a64      	ldr	r2, [pc, #400]	; (8004974 <HAL_DMA_Abort+0x45c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d02c      	beq.n	8004842 <HAL_DMA_Abort+0x32a>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a62      	ldr	r2, [pc, #392]	; (8004978 <HAL_DMA_Abort+0x460>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d027      	beq.n	8004842 <HAL_DMA_Abort+0x32a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a61      	ldr	r2, [pc, #388]	; (800497c <HAL_DMA_Abort+0x464>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d022      	beq.n	8004842 <HAL_DMA_Abort+0x32a>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a5f      	ldr	r2, [pc, #380]	; (8004980 <HAL_DMA_Abort+0x468>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d01d      	beq.n	8004842 <HAL_DMA_Abort+0x32a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a5e      	ldr	r2, [pc, #376]	; (8004984 <HAL_DMA_Abort+0x46c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d018      	beq.n	8004842 <HAL_DMA_Abort+0x32a>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a5c      	ldr	r2, [pc, #368]	; (8004988 <HAL_DMA_Abort+0x470>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d013      	beq.n	8004842 <HAL_DMA_Abort+0x32a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a5b      	ldr	r2, [pc, #364]	; (800498c <HAL_DMA_Abort+0x474>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00e      	beq.n	8004842 <HAL_DMA_Abort+0x32a>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a59      	ldr	r2, [pc, #356]	; (8004990 <HAL_DMA_Abort+0x478>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d009      	beq.n	8004842 <HAL_DMA_Abort+0x32a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a58      	ldr	r2, [pc, #352]	; (8004994 <HAL_DMA_Abort+0x47c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d004      	beq.n	8004842 <HAL_DMA_Abort+0x32a>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a56      	ldr	r2, [pc, #344]	; (8004998 <HAL_DMA_Abort+0x480>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d108      	bne.n	8004854 <HAL_DMA_Abort+0x33c>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0201 	bic.w	r2, r2, #1
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	e007      	b.n	8004864 <HAL_DMA_Abort+0x34c>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0201 	bic.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004864:	e013      	b.n	800488e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004866:	f7fe ff99 	bl	800379c <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b05      	cmp	r3, #5
 8004872:	d90c      	bls.n	800488e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2220      	movs	r2, #32
 8004878:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2203      	movs	r2, #3
 8004886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e12d      	b.n	8004aea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1e5      	bne.n	8004866 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a2f      	ldr	r2, [pc, #188]	; (800495c <HAL_DMA_Abort+0x444>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d04a      	beq.n	800493a <HAL_DMA_Abort+0x422>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a2d      	ldr	r2, [pc, #180]	; (8004960 <HAL_DMA_Abort+0x448>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d045      	beq.n	800493a <HAL_DMA_Abort+0x422>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a2c      	ldr	r2, [pc, #176]	; (8004964 <HAL_DMA_Abort+0x44c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d040      	beq.n	800493a <HAL_DMA_Abort+0x422>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a2a      	ldr	r2, [pc, #168]	; (8004968 <HAL_DMA_Abort+0x450>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d03b      	beq.n	800493a <HAL_DMA_Abort+0x422>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a29      	ldr	r2, [pc, #164]	; (800496c <HAL_DMA_Abort+0x454>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d036      	beq.n	800493a <HAL_DMA_Abort+0x422>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a27      	ldr	r2, [pc, #156]	; (8004970 <HAL_DMA_Abort+0x458>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d031      	beq.n	800493a <HAL_DMA_Abort+0x422>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a26      	ldr	r2, [pc, #152]	; (8004974 <HAL_DMA_Abort+0x45c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d02c      	beq.n	800493a <HAL_DMA_Abort+0x422>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a24      	ldr	r2, [pc, #144]	; (8004978 <HAL_DMA_Abort+0x460>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d027      	beq.n	800493a <HAL_DMA_Abort+0x422>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a23      	ldr	r2, [pc, #140]	; (800497c <HAL_DMA_Abort+0x464>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d022      	beq.n	800493a <HAL_DMA_Abort+0x422>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a21      	ldr	r2, [pc, #132]	; (8004980 <HAL_DMA_Abort+0x468>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d01d      	beq.n	800493a <HAL_DMA_Abort+0x422>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a20      	ldr	r2, [pc, #128]	; (8004984 <HAL_DMA_Abort+0x46c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d018      	beq.n	800493a <HAL_DMA_Abort+0x422>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a1e      	ldr	r2, [pc, #120]	; (8004988 <HAL_DMA_Abort+0x470>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d013      	beq.n	800493a <HAL_DMA_Abort+0x422>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a1d      	ldr	r2, [pc, #116]	; (800498c <HAL_DMA_Abort+0x474>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00e      	beq.n	800493a <HAL_DMA_Abort+0x422>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a1b      	ldr	r2, [pc, #108]	; (8004990 <HAL_DMA_Abort+0x478>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d009      	beq.n	800493a <HAL_DMA_Abort+0x422>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a1a      	ldr	r2, [pc, #104]	; (8004994 <HAL_DMA_Abort+0x47c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d004      	beq.n	800493a <HAL_DMA_Abort+0x422>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a18      	ldr	r2, [pc, #96]	; (8004998 <HAL_DMA_Abort+0x480>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d101      	bne.n	800493e <HAL_DMA_Abort+0x426>
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <HAL_DMA_Abort+0x428>
 800493e:	2300      	movs	r3, #0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d02b      	beq.n	800499c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004948:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494e:	f003 031f 	and.w	r3, r3, #31
 8004952:	223f      	movs	r2, #63	; 0x3f
 8004954:	409a      	lsls	r2, r3
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	609a      	str	r2, [r3, #8]
 800495a:	e02a      	b.n	80049b2 <HAL_DMA_Abort+0x49a>
 800495c:	40020010 	.word	0x40020010
 8004960:	40020028 	.word	0x40020028
 8004964:	40020040 	.word	0x40020040
 8004968:	40020058 	.word	0x40020058
 800496c:	40020070 	.word	0x40020070
 8004970:	40020088 	.word	0x40020088
 8004974:	400200a0 	.word	0x400200a0
 8004978:	400200b8 	.word	0x400200b8
 800497c:	40020410 	.word	0x40020410
 8004980:	40020428 	.word	0x40020428
 8004984:	40020440 	.word	0x40020440
 8004988:	40020458 	.word	0x40020458
 800498c:	40020470 	.word	0x40020470
 8004990:	40020488 	.word	0x40020488
 8004994:	400204a0 	.word	0x400204a0
 8004998:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	2201      	movs	r2, #1
 80049ac:	409a      	lsls	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a4f      	ldr	r2, [pc, #316]	; (8004af4 <HAL_DMA_Abort+0x5dc>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d072      	beq.n	8004aa2 <HAL_DMA_Abort+0x58a>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a4d      	ldr	r2, [pc, #308]	; (8004af8 <HAL_DMA_Abort+0x5e0>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d06d      	beq.n	8004aa2 <HAL_DMA_Abort+0x58a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a4c      	ldr	r2, [pc, #304]	; (8004afc <HAL_DMA_Abort+0x5e4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d068      	beq.n	8004aa2 <HAL_DMA_Abort+0x58a>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a4a      	ldr	r2, [pc, #296]	; (8004b00 <HAL_DMA_Abort+0x5e8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d063      	beq.n	8004aa2 <HAL_DMA_Abort+0x58a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a49      	ldr	r2, [pc, #292]	; (8004b04 <HAL_DMA_Abort+0x5ec>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d05e      	beq.n	8004aa2 <HAL_DMA_Abort+0x58a>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a47      	ldr	r2, [pc, #284]	; (8004b08 <HAL_DMA_Abort+0x5f0>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d059      	beq.n	8004aa2 <HAL_DMA_Abort+0x58a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a46      	ldr	r2, [pc, #280]	; (8004b0c <HAL_DMA_Abort+0x5f4>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d054      	beq.n	8004aa2 <HAL_DMA_Abort+0x58a>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a44      	ldr	r2, [pc, #272]	; (8004b10 <HAL_DMA_Abort+0x5f8>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d04f      	beq.n	8004aa2 <HAL_DMA_Abort+0x58a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a43      	ldr	r2, [pc, #268]	; (8004b14 <HAL_DMA_Abort+0x5fc>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d04a      	beq.n	8004aa2 <HAL_DMA_Abort+0x58a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a41      	ldr	r2, [pc, #260]	; (8004b18 <HAL_DMA_Abort+0x600>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d045      	beq.n	8004aa2 <HAL_DMA_Abort+0x58a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a40      	ldr	r2, [pc, #256]	; (8004b1c <HAL_DMA_Abort+0x604>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d040      	beq.n	8004aa2 <HAL_DMA_Abort+0x58a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a3e      	ldr	r2, [pc, #248]	; (8004b20 <HAL_DMA_Abort+0x608>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d03b      	beq.n	8004aa2 <HAL_DMA_Abort+0x58a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a3d      	ldr	r2, [pc, #244]	; (8004b24 <HAL_DMA_Abort+0x60c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d036      	beq.n	8004aa2 <HAL_DMA_Abort+0x58a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a3b      	ldr	r2, [pc, #236]	; (8004b28 <HAL_DMA_Abort+0x610>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d031      	beq.n	8004aa2 <HAL_DMA_Abort+0x58a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a3a      	ldr	r2, [pc, #232]	; (8004b2c <HAL_DMA_Abort+0x614>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d02c      	beq.n	8004aa2 <HAL_DMA_Abort+0x58a>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a38      	ldr	r2, [pc, #224]	; (8004b30 <HAL_DMA_Abort+0x618>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d027      	beq.n	8004aa2 <HAL_DMA_Abort+0x58a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a37      	ldr	r2, [pc, #220]	; (8004b34 <HAL_DMA_Abort+0x61c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d022      	beq.n	8004aa2 <HAL_DMA_Abort+0x58a>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a35      	ldr	r2, [pc, #212]	; (8004b38 <HAL_DMA_Abort+0x620>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d01d      	beq.n	8004aa2 <HAL_DMA_Abort+0x58a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a34      	ldr	r2, [pc, #208]	; (8004b3c <HAL_DMA_Abort+0x624>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d018      	beq.n	8004aa2 <HAL_DMA_Abort+0x58a>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a32      	ldr	r2, [pc, #200]	; (8004b40 <HAL_DMA_Abort+0x628>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d013      	beq.n	8004aa2 <HAL_DMA_Abort+0x58a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a31      	ldr	r2, [pc, #196]	; (8004b44 <HAL_DMA_Abort+0x62c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00e      	beq.n	8004aa2 <HAL_DMA_Abort+0x58a>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a2f      	ldr	r2, [pc, #188]	; (8004b48 <HAL_DMA_Abort+0x630>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d009      	beq.n	8004aa2 <HAL_DMA_Abort+0x58a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a2e      	ldr	r2, [pc, #184]	; (8004b4c <HAL_DMA_Abort+0x634>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d004      	beq.n	8004aa2 <HAL_DMA_Abort+0x58a>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a2c      	ldr	r2, [pc, #176]	; (8004b50 <HAL_DMA_Abort+0x638>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d101      	bne.n	8004aa6 <HAL_DMA_Abort+0x58e>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <HAL_DMA_Abort+0x590>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d015      	beq.n	8004ad8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ab4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00c      	beq.n	8004ad8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ac8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004acc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004ad6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3718      	adds	r7, #24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40020010 	.word	0x40020010
 8004af8:	40020028 	.word	0x40020028
 8004afc:	40020040 	.word	0x40020040
 8004b00:	40020058 	.word	0x40020058
 8004b04:	40020070 	.word	0x40020070
 8004b08:	40020088 	.word	0x40020088
 8004b0c:	400200a0 	.word	0x400200a0
 8004b10:	400200b8 	.word	0x400200b8
 8004b14:	40020410 	.word	0x40020410
 8004b18:	40020428 	.word	0x40020428
 8004b1c:	40020440 	.word	0x40020440
 8004b20:	40020458 	.word	0x40020458
 8004b24:	40020470 	.word	0x40020470
 8004b28:	40020488 	.word	0x40020488
 8004b2c:	400204a0 	.word	0x400204a0
 8004b30:	400204b8 	.word	0x400204b8
 8004b34:	58025408 	.word	0x58025408
 8004b38:	5802541c 	.word	0x5802541c
 8004b3c:	58025430 	.word	0x58025430
 8004b40:	58025444 	.word	0x58025444
 8004b44:	58025458 	.word	0x58025458
 8004b48:	5802546c 	.word	0x5802546c
 8004b4c:	58025480 	.word	0x58025480
 8004b50:	58025494 	.word	0x58025494

08004b54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e205      	b.n	8004f72 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d004      	beq.n	8004b7c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2280      	movs	r2, #128	; 0x80
 8004b76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e1fa      	b.n	8004f72 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a8c      	ldr	r2, [pc, #560]	; (8004db4 <HAL_DMA_Abort_IT+0x260>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d04a      	beq.n	8004c1c <HAL_DMA_Abort_IT+0xc8>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a8b      	ldr	r2, [pc, #556]	; (8004db8 <HAL_DMA_Abort_IT+0x264>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d045      	beq.n	8004c1c <HAL_DMA_Abort_IT+0xc8>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a89      	ldr	r2, [pc, #548]	; (8004dbc <HAL_DMA_Abort_IT+0x268>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d040      	beq.n	8004c1c <HAL_DMA_Abort_IT+0xc8>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a88      	ldr	r2, [pc, #544]	; (8004dc0 <HAL_DMA_Abort_IT+0x26c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d03b      	beq.n	8004c1c <HAL_DMA_Abort_IT+0xc8>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a86      	ldr	r2, [pc, #536]	; (8004dc4 <HAL_DMA_Abort_IT+0x270>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d036      	beq.n	8004c1c <HAL_DMA_Abort_IT+0xc8>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a85      	ldr	r2, [pc, #532]	; (8004dc8 <HAL_DMA_Abort_IT+0x274>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d031      	beq.n	8004c1c <HAL_DMA_Abort_IT+0xc8>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a83      	ldr	r2, [pc, #524]	; (8004dcc <HAL_DMA_Abort_IT+0x278>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d02c      	beq.n	8004c1c <HAL_DMA_Abort_IT+0xc8>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a82      	ldr	r2, [pc, #520]	; (8004dd0 <HAL_DMA_Abort_IT+0x27c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d027      	beq.n	8004c1c <HAL_DMA_Abort_IT+0xc8>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a80      	ldr	r2, [pc, #512]	; (8004dd4 <HAL_DMA_Abort_IT+0x280>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d022      	beq.n	8004c1c <HAL_DMA_Abort_IT+0xc8>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a7f      	ldr	r2, [pc, #508]	; (8004dd8 <HAL_DMA_Abort_IT+0x284>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d01d      	beq.n	8004c1c <HAL_DMA_Abort_IT+0xc8>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a7d      	ldr	r2, [pc, #500]	; (8004ddc <HAL_DMA_Abort_IT+0x288>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d018      	beq.n	8004c1c <HAL_DMA_Abort_IT+0xc8>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a7c      	ldr	r2, [pc, #496]	; (8004de0 <HAL_DMA_Abort_IT+0x28c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d013      	beq.n	8004c1c <HAL_DMA_Abort_IT+0xc8>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a7a      	ldr	r2, [pc, #488]	; (8004de4 <HAL_DMA_Abort_IT+0x290>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00e      	beq.n	8004c1c <HAL_DMA_Abort_IT+0xc8>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a79      	ldr	r2, [pc, #484]	; (8004de8 <HAL_DMA_Abort_IT+0x294>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d009      	beq.n	8004c1c <HAL_DMA_Abort_IT+0xc8>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a77      	ldr	r2, [pc, #476]	; (8004dec <HAL_DMA_Abort_IT+0x298>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d004      	beq.n	8004c1c <HAL_DMA_Abort_IT+0xc8>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a76      	ldr	r2, [pc, #472]	; (8004df0 <HAL_DMA_Abort_IT+0x29c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d101      	bne.n	8004c20 <HAL_DMA_Abort_IT+0xcc>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <HAL_DMA_Abort_IT+0xce>
 8004c20:	2300      	movs	r3, #0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d065      	beq.n	8004cf2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2204      	movs	r2, #4
 8004c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a60      	ldr	r2, [pc, #384]	; (8004db4 <HAL_DMA_Abort_IT+0x260>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d04a      	beq.n	8004cce <HAL_DMA_Abort_IT+0x17a>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a5e      	ldr	r2, [pc, #376]	; (8004db8 <HAL_DMA_Abort_IT+0x264>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d045      	beq.n	8004cce <HAL_DMA_Abort_IT+0x17a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a5d      	ldr	r2, [pc, #372]	; (8004dbc <HAL_DMA_Abort_IT+0x268>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d040      	beq.n	8004cce <HAL_DMA_Abort_IT+0x17a>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a5b      	ldr	r2, [pc, #364]	; (8004dc0 <HAL_DMA_Abort_IT+0x26c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d03b      	beq.n	8004cce <HAL_DMA_Abort_IT+0x17a>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a5a      	ldr	r2, [pc, #360]	; (8004dc4 <HAL_DMA_Abort_IT+0x270>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d036      	beq.n	8004cce <HAL_DMA_Abort_IT+0x17a>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a58      	ldr	r2, [pc, #352]	; (8004dc8 <HAL_DMA_Abort_IT+0x274>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d031      	beq.n	8004cce <HAL_DMA_Abort_IT+0x17a>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a57      	ldr	r2, [pc, #348]	; (8004dcc <HAL_DMA_Abort_IT+0x278>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d02c      	beq.n	8004cce <HAL_DMA_Abort_IT+0x17a>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a55      	ldr	r2, [pc, #340]	; (8004dd0 <HAL_DMA_Abort_IT+0x27c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d027      	beq.n	8004cce <HAL_DMA_Abort_IT+0x17a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a54      	ldr	r2, [pc, #336]	; (8004dd4 <HAL_DMA_Abort_IT+0x280>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d022      	beq.n	8004cce <HAL_DMA_Abort_IT+0x17a>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a52      	ldr	r2, [pc, #328]	; (8004dd8 <HAL_DMA_Abort_IT+0x284>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d01d      	beq.n	8004cce <HAL_DMA_Abort_IT+0x17a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a51      	ldr	r2, [pc, #324]	; (8004ddc <HAL_DMA_Abort_IT+0x288>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d018      	beq.n	8004cce <HAL_DMA_Abort_IT+0x17a>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a4f      	ldr	r2, [pc, #316]	; (8004de0 <HAL_DMA_Abort_IT+0x28c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d013      	beq.n	8004cce <HAL_DMA_Abort_IT+0x17a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a4e      	ldr	r2, [pc, #312]	; (8004de4 <HAL_DMA_Abort_IT+0x290>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d00e      	beq.n	8004cce <HAL_DMA_Abort_IT+0x17a>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a4c      	ldr	r2, [pc, #304]	; (8004de8 <HAL_DMA_Abort_IT+0x294>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d009      	beq.n	8004cce <HAL_DMA_Abort_IT+0x17a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a4b      	ldr	r2, [pc, #300]	; (8004dec <HAL_DMA_Abort_IT+0x298>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d004      	beq.n	8004cce <HAL_DMA_Abort_IT+0x17a>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a49      	ldr	r2, [pc, #292]	; (8004df0 <HAL_DMA_Abort_IT+0x29c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d108      	bne.n	8004ce0 <HAL_DMA_Abort_IT+0x18c>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0201 	bic.w	r2, r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	e147      	b.n	8004f70 <HAL_DMA_Abort_IT+0x41c>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0201 	bic.w	r2, r2, #1
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	e13e      	b.n	8004f70 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 020e 	bic.w	r2, r2, #14
 8004d00:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a2b      	ldr	r2, [pc, #172]	; (8004db4 <HAL_DMA_Abort_IT+0x260>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d04a      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x24e>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a29      	ldr	r2, [pc, #164]	; (8004db8 <HAL_DMA_Abort_IT+0x264>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d045      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x24e>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a28      	ldr	r2, [pc, #160]	; (8004dbc <HAL_DMA_Abort_IT+0x268>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d040      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x24e>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a26      	ldr	r2, [pc, #152]	; (8004dc0 <HAL_DMA_Abort_IT+0x26c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d03b      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x24e>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a25      	ldr	r2, [pc, #148]	; (8004dc4 <HAL_DMA_Abort_IT+0x270>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d036      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x24e>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a23      	ldr	r2, [pc, #140]	; (8004dc8 <HAL_DMA_Abort_IT+0x274>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d031      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x24e>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a22      	ldr	r2, [pc, #136]	; (8004dcc <HAL_DMA_Abort_IT+0x278>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d02c      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x24e>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a20      	ldr	r2, [pc, #128]	; (8004dd0 <HAL_DMA_Abort_IT+0x27c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d027      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x24e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a1f      	ldr	r2, [pc, #124]	; (8004dd4 <HAL_DMA_Abort_IT+0x280>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d022      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x24e>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a1d      	ldr	r2, [pc, #116]	; (8004dd8 <HAL_DMA_Abort_IT+0x284>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d01d      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x24e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a1c      	ldr	r2, [pc, #112]	; (8004ddc <HAL_DMA_Abort_IT+0x288>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d018      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x24e>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a1a      	ldr	r2, [pc, #104]	; (8004de0 <HAL_DMA_Abort_IT+0x28c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d013      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x24e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a19      	ldr	r2, [pc, #100]	; (8004de4 <HAL_DMA_Abort_IT+0x290>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00e      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x24e>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a17      	ldr	r2, [pc, #92]	; (8004de8 <HAL_DMA_Abort_IT+0x294>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d009      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x24e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a16      	ldr	r2, [pc, #88]	; (8004dec <HAL_DMA_Abort_IT+0x298>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d004      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x24e>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a14      	ldr	r2, [pc, #80]	; (8004df0 <HAL_DMA_Abort_IT+0x29c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d128      	bne.n	8004df4 <HAL_DMA_Abort_IT+0x2a0>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0201 	bic.w	r2, r2, #1
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	e027      	b.n	8004e04 <HAL_DMA_Abort_IT+0x2b0>
 8004db4:	40020010 	.word	0x40020010
 8004db8:	40020028 	.word	0x40020028
 8004dbc:	40020040 	.word	0x40020040
 8004dc0:	40020058 	.word	0x40020058
 8004dc4:	40020070 	.word	0x40020070
 8004dc8:	40020088 	.word	0x40020088
 8004dcc:	400200a0 	.word	0x400200a0
 8004dd0:	400200b8 	.word	0x400200b8
 8004dd4:	40020410 	.word	0x40020410
 8004dd8:	40020428 	.word	0x40020428
 8004ddc:	40020440 	.word	0x40020440
 8004de0:	40020458 	.word	0x40020458
 8004de4:	40020470 	.word	0x40020470
 8004de8:	40020488 	.word	0x40020488
 8004dec:	400204a0 	.word	0x400204a0
 8004df0:	400204b8 	.word	0x400204b8
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0201 	bic.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a5c      	ldr	r2, [pc, #368]	; (8004f7c <HAL_DMA_Abort_IT+0x428>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d072      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x3a0>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a5b      	ldr	r2, [pc, #364]	; (8004f80 <HAL_DMA_Abort_IT+0x42c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d06d      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x3a0>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a59      	ldr	r2, [pc, #356]	; (8004f84 <HAL_DMA_Abort_IT+0x430>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d068      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x3a0>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a58      	ldr	r2, [pc, #352]	; (8004f88 <HAL_DMA_Abort_IT+0x434>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d063      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x3a0>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a56      	ldr	r2, [pc, #344]	; (8004f8c <HAL_DMA_Abort_IT+0x438>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d05e      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x3a0>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a55      	ldr	r2, [pc, #340]	; (8004f90 <HAL_DMA_Abort_IT+0x43c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d059      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x3a0>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a53      	ldr	r2, [pc, #332]	; (8004f94 <HAL_DMA_Abort_IT+0x440>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d054      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x3a0>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a52      	ldr	r2, [pc, #328]	; (8004f98 <HAL_DMA_Abort_IT+0x444>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d04f      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x3a0>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a50      	ldr	r2, [pc, #320]	; (8004f9c <HAL_DMA_Abort_IT+0x448>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d04a      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x3a0>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a4f      	ldr	r2, [pc, #316]	; (8004fa0 <HAL_DMA_Abort_IT+0x44c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d045      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x3a0>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a4d      	ldr	r2, [pc, #308]	; (8004fa4 <HAL_DMA_Abort_IT+0x450>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d040      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x3a0>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a4c      	ldr	r2, [pc, #304]	; (8004fa8 <HAL_DMA_Abort_IT+0x454>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d03b      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x3a0>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a4a      	ldr	r2, [pc, #296]	; (8004fac <HAL_DMA_Abort_IT+0x458>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d036      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x3a0>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a49      	ldr	r2, [pc, #292]	; (8004fb0 <HAL_DMA_Abort_IT+0x45c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d031      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x3a0>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a47      	ldr	r2, [pc, #284]	; (8004fb4 <HAL_DMA_Abort_IT+0x460>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d02c      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x3a0>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a46      	ldr	r2, [pc, #280]	; (8004fb8 <HAL_DMA_Abort_IT+0x464>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d027      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x3a0>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a44      	ldr	r2, [pc, #272]	; (8004fbc <HAL_DMA_Abort_IT+0x468>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d022      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x3a0>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a43      	ldr	r2, [pc, #268]	; (8004fc0 <HAL_DMA_Abort_IT+0x46c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d01d      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x3a0>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a41      	ldr	r2, [pc, #260]	; (8004fc4 <HAL_DMA_Abort_IT+0x470>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d018      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x3a0>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a40      	ldr	r2, [pc, #256]	; (8004fc8 <HAL_DMA_Abort_IT+0x474>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d013      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x3a0>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a3e      	ldr	r2, [pc, #248]	; (8004fcc <HAL_DMA_Abort_IT+0x478>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00e      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x3a0>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a3d      	ldr	r2, [pc, #244]	; (8004fd0 <HAL_DMA_Abort_IT+0x47c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d009      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x3a0>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a3b      	ldr	r2, [pc, #236]	; (8004fd4 <HAL_DMA_Abort_IT+0x480>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d004      	beq.n	8004ef4 <HAL_DMA_Abort_IT+0x3a0>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a3a      	ldr	r2, [pc, #232]	; (8004fd8 <HAL_DMA_Abort_IT+0x484>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d101      	bne.n	8004ef8 <HAL_DMA_Abort_IT+0x3a4>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e000      	b.n	8004efa <HAL_DMA_Abort_IT+0x3a6>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d028      	beq.n	8004f50 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f0c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f12:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f18:	f003 031f 	and.w	r3, r3, #31
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	409a      	lsls	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f2c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00c      	beq.n	8004f50 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f44:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f4e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d003      	beq.n	8004f70 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40020010 	.word	0x40020010
 8004f80:	40020028 	.word	0x40020028
 8004f84:	40020040 	.word	0x40020040
 8004f88:	40020058 	.word	0x40020058
 8004f8c:	40020070 	.word	0x40020070
 8004f90:	40020088 	.word	0x40020088
 8004f94:	400200a0 	.word	0x400200a0
 8004f98:	400200b8 	.word	0x400200b8
 8004f9c:	40020410 	.word	0x40020410
 8004fa0:	40020428 	.word	0x40020428
 8004fa4:	40020440 	.word	0x40020440
 8004fa8:	40020458 	.word	0x40020458
 8004fac:	40020470 	.word	0x40020470
 8004fb0:	40020488 	.word	0x40020488
 8004fb4:	400204a0 	.word	0x400204a0
 8004fb8:	400204b8 	.word	0x400204b8
 8004fbc:	58025408 	.word	0x58025408
 8004fc0:	5802541c 	.word	0x5802541c
 8004fc4:	58025430 	.word	0x58025430
 8004fc8:	58025444 	.word	0x58025444
 8004fcc:	58025458 	.word	0x58025458
 8004fd0:	5802546c 	.word	0x5802546c
 8004fd4:	58025480 	.word	0x58025480
 8004fd8:	58025494 	.word	0x58025494

08004fdc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08a      	sub	sp, #40	; 0x28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004fe8:	4b67      	ldr	r3, [pc, #412]	; (8005188 <HAL_DMA_IRQHandler+0x1ac>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a67      	ldr	r2, [pc, #412]	; (800518c <HAL_DMA_IRQHandler+0x1b0>)
 8004fee:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff2:	0a9b      	lsrs	r3, r3, #10
 8004ff4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ffa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005000:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a5f      	ldr	r2, [pc, #380]	; (8005190 <HAL_DMA_IRQHandler+0x1b4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d04a      	beq.n	80050ae <HAL_DMA_IRQHandler+0xd2>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a5d      	ldr	r2, [pc, #372]	; (8005194 <HAL_DMA_IRQHandler+0x1b8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d045      	beq.n	80050ae <HAL_DMA_IRQHandler+0xd2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a5c      	ldr	r2, [pc, #368]	; (8005198 <HAL_DMA_IRQHandler+0x1bc>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d040      	beq.n	80050ae <HAL_DMA_IRQHandler+0xd2>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a5a      	ldr	r2, [pc, #360]	; (800519c <HAL_DMA_IRQHandler+0x1c0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d03b      	beq.n	80050ae <HAL_DMA_IRQHandler+0xd2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a59      	ldr	r2, [pc, #356]	; (80051a0 <HAL_DMA_IRQHandler+0x1c4>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d036      	beq.n	80050ae <HAL_DMA_IRQHandler+0xd2>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a57      	ldr	r2, [pc, #348]	; (80051a4 <HAL_DMA_IRQHandler+0x1c8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d031      	beq.n	80050ae <HAL_DMA_IRQHandler+0xd2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a56      	ldr	r2, [pc, #344]	; (80051a8 <HAL_DMA_IRQHandler+0x1cc>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d02c      	beq.n	80050ae <HAL_DMA_IRQHandler+0xd2>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a54      	ldr	r2, [pc, #336]	; (80051ac <HAL_DMA_IRQHandler+0x1d0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d027      	beq.n	80050ae <HAL_DMA_IRQHandler+0xd2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a53      	ldr	r2, [pc, #332]	; (80051b0 <HAL_DMA_IRQHandler+0x1d4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d022      	beq.n	80050ae <HAL_DMA_IRQHandler+0xd2>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a51      	ldr	r2, [pc, #324]	; (80051b4 <HAL_DMA_IRQHandler+0x1d8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d01d      	beq.n	80050ae <HAL_DMA_IRQHandler+0xd2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a50      	ldr	r2, [pc, #320]	; (80051b8 <HAL_DMA_IRQHandler+0x1dc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d018      	beq.n	80050ae <HAL_DMA_IRQHandler+0xd2>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a4e      	ldr	r2, [pc, #312]	; (80051bc <HAL_DMA_IRQHandler+0x1e0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d013      	beq.n	80050ae <HAL_DMA_IRQHandler+0xd2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a4d      	ldr	r2, [pc, #308]	; (80051c0 <HAL_DMA_IRQHandler+0x1e4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d00e      	beq.n	80050ae <HAL_DMA_IRQHandler+0xd2>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a4b      	ldr	r2, [pc, #300]	; (80051c4 <HAL_DMA_IRQHandler+0x1e8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d009      	beq.n	80050ae <HAL_DMA_IRQHandler+0xd2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a4a      	ldr	r2, [pc, #296]	; (80051c8 <HAL_DMA_IRQHandler+0x1ec>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d004      	beq.n	80050ae <HAL_DMA_IRQHandler+0xd2>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a48      	ldr	r2, [pc, #288]	; (80051cc <HAL_DMA_IRQHandler+0x1f0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d101      	bne.n	80050b2 <HAL_DMA_IRQHandler+0xd6>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e000      	b.n	80050b4 <HAL_DMA_IRQHandler+0xd8>
 80050b2:	2300      	movs	r3, #0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 842b 	beq.w	8005910 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050be:	f003 031f 	and.w	r3, r3, #31
 80050c2:	2208      	movs	r2, #8
 80050c4:	409a      	lsls	r2, r3
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	4013      	ands	r3, r2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 80a2 	beq.w	8005214 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a2e      	ldr	r2, [pc, #184]	; (8005190 <HAL_DMA_IRQHandler+0x1b4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d04a      	beq.n	8005170 <HAL_DMA_IRQHandler+0x194>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a2d      	ldr	r2, [pc, #180]	; (8005194 <HAL_DMA_IRQHandler+0x1b8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d045      	beq.n	8005170 <HAL_DMA_IRQHandler+0x194>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a2b      	ldr	r2, [pc, #172]	; (8005198 <HAL_DMA_IRQHandler+0x1bc>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d040      	beq.n	8005170 <HAL_DMA_IRQHandler+0x194>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a2a      	ldr	r2, [pc, #168]	; (800519c <HAL_DMA_IRQHandler+0x1c0>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d03b      	beq.n	8005170 <HAL_DMA_IRQHandler+0x194>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a28      	ldr	r2, [pc, #160]	; (80051a0 <HAL_DMA_IRQHandler+0x1c4>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d036      	beq.n	8005170 <HAL_DMA_IRQHandler+0x194>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a27      	ldr	r2, [pc, #156]	; (80051a4 <HAL_DMA_IRQHandler+0x1c8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d031      	beq.n	8005170 <HAL_DMA_IRQHandler+0x194>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a25      	ldr	r2, [pc, #148]	; (80051a8 <HAL_DMA_IRQHandler+0x1cc>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d02c      	beq.n	8005170 <HAL_DMA_IRQHandler+0x194>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a24      	ldr	r2, [pc, #144]	; (80051ac <HAL_DMA_IRQHandler+0x1d0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d027      	beq.n	8005170 <HAL_DMA_IRQHandler+0x194>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a22      	ldr	r2, [pc, #136]	; (80051b0 <HAL_DMA_IRQHandler+0x1d4>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d022      	beq.n	8005170 <HAL_DMA_IRQHandler+0x194>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a21      	ldr	r2, [pc, #132]	; (80051b4 <HAL_DMA_IRQHandler+0x1d8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d01d      	beq.n	8005170 <HAL_DMA_IRQHandler+0x194>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a1f      	ldr	r2, [pc, #124]	; (80051b8 <HAL_DMA_IRQHandler+0x1dc>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d018      	beq.n	8005170 <HAL_DMA_IRQHandler+0x194>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a1e      	ldr	r2, [pc, #120]	; (80051bc <HAL_DMA_IRQHandler+0x1e0>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d013      	beq.n	8005170 <HAL_DMA_IRQHandler+0x194>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a1c      	ldr	r2, [pc, #112]	; (80051c0 <HAL_DMA_IRQHandler+0x1e4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00e      	beq.n	8005170 <HAL_DMA_IRQHandler+0x194>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a1b      	ldr	r2, [pc, #108]	; (80051c4 <HAL_DMA_IRQHandler+0x1e8>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d009      	beq.n	8005170 <HAL_DMA_IRQHandler+0x194>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a19      	ldr	r2, [pc, #100]	; (80051c8 <HAL_DMA_IRQHandler+0x1ec>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d004      	beq.n	8005170 <HAL_DMA_IRQHandler+0x194>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a18      	ldr	r2, [pc, #96]	; (80051cc <HAL_DMA_IRQHandler+0x1f0>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d12f      	bne.n	80051d0 <HAL_DMA_IRQHandler+0x1f4>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0304 	and.w	r3, r3, #4
 800517a:	2b00      	cmp	r3, #0
 800517c:	bf14      	ite	ne
 800517e:	2301      	movne	r3, #1
 8005180:	2300      	moveq	r3, #0
 8005182:	b2db      	uxtb	r3, r3
 8005184:	e02e      	b.n	80051e4 <HAL_DMA_IRQHandler+0x208>
 8005186:	bf00      	nop
 8005188:	20000000 	.word	0x20000000
 800518c:	1b4e81b5 	.word	0x1b4e81b5
 8005190:	40020010 	.word	0x40020010
 8005194:	40020028 	.word	0x40020028
 8005198:	40020040 	.word	0x40020040
 800519c:	40020058 	.word	0x40020058
 80051a0:	40020070 	.word	0x40020070
 80051a4:	40020088 	.word	0x40020088
 80051a8:	400200a0 	.word	0x400200a0
 80051ac:	400200b8 	.word	0x400200b8
 80051b0:	40020410 	.word	0x40020410
 80051b4:	40020428 	.word	0x40020428
 80051b8:	40020440 	.word	0x40020440
 80051bc:	40020458 	.word	0x40020458
 80051c0:	40020470 	.word	0x40020470
 80051c4:	40020488 	.word	0x40020488
 80051c8:	400204a0 	.word	0x400204a0
 80051cc:	400204b8 	.word	0x400204b8
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	2b00      	cmp	r3, #0
 80051dc:	bf14      	ite	ne
 80051de:	2301      	movne	r3, #1
 80051e0:	2300      	moveq	r3, #0
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d015      	beq.n	8005214 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0204 	bic.w	r2, r2, #4
 80051f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051fc:	f003 031f 	and.w	r3, r3, #31
 8005200:	2208      	movs	r2, #8
 8005202:	409a      	lsls	r2, r3
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520c:	f043 0201 	orr.w	r2, r3, #1
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005218:	f003 031f 	and.w	r3, r3, #31
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	fa22 f303 	lsr.w	r3, r2, r3
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d06e      	beq.n	8005308 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a69      	ldr	r2, [pc, #420]	; (80053d4 <HAL_DMA_IRQHandler+0x3f8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d04a      	beq.n	80052ca <HAL_DMA_IRQHandler+0x2ee>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a67      	ldr	r2, [pc, #412]	; (80053d8 <HAL_DMA_IRQHandler+0x3fc>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d045      	beq.n	80052ca <HAL_DMA_IRQHandler+0x2ee>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a66      	ldr	r2, [pc, #408]	; (80053dc <HAL_DMA_IRQHandler+0x400>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d040      	beq.n	80052ca <HAL_DMA_IRQHandler+0x2ee>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a64      	ldr	r2, [pc, #400]	; (80053e0 <HAL_DMA_IRQHandler+0x404>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d03b      	beq.n	80052ca <HAL_DMA_IRQHandler+0x2ee>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a63      	ldr	r2, [pc, #396]	; (80053e4 <HAL_DMA_IRQHandler+0x408>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d036      	beq.n	80052ca <HAL_DMA_IRQHandler+0x2ee>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a61      	ldr	r2, [pc, #388]	; (80053e8 <HAL_DMA_IRQHandler+0x40c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d031      	beq.n	80052ca <HAL_DMA_IRQHandler+0x2ee>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a60      	ldr	r2, [pc, #384]	; (80053ec <HAL_DMA_IRQHandler+0x410>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d02c      	beq.n	80052ca <HAL_DMA_IRQHandler+0x2ee>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a5e      	ldr	r2, [pc, #376]	; (80053f0 <HAL_DMA_IRQHandler+0x414>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d027      	beq.n	80052ca <HAL_DMA_IRQHandler+0x2ee>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a5d      	ldr	r2, [pc, #372]	; (80053f4 <HAL_DMA_IRQHandler+0x418>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d022      	beq.n	80052ca <HAL_DMA_IRQHandler+0x2ee>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a5b      	ldr	r2, [pc, #364]	; (80053f8 <HAL_DMA_IRQHandler+0x41c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d01d      	beq.n	80052ca <HAL_DMA_IRQHandler+0x2ee>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a5a      	ldr	r2, [pc, #360]	; (80053fc <HAL_DMA_IRQHandler+0x420>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d018      	beq.n	80052ca <HAL_DMA_IRQHandler+0x2ee>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a58      	ldr	r2, [pc, #352]	; (8005400 <HAL_DMA_IRQHandler+0x424>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d013      	beq.n	80052ca <HAL_DMA_IRQHandler+0x2ee>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a57      	ldr	r2, [pc, #348]	; (8005404 <HAL_DMA_IRQHandler+0x428>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00e      	beq.n	80052ca <HAL_DMA_IRQHandler+0x2ee>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a55      	ldr	r2, [pc, #340]	; (8005408 <HAL_DMA_IRQHandler+0x42c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d009      	beq.n	80052ca <HAL_DMA_IRQHandler+0x2ee>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a54      	ldr	r2, [pc, #336]	; (800540c <HAL_DMA_IRQHandler+0x430>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d004      	beq.n	80052ca <HAL_DMA_IRQHandler+0x2ee>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a52      	ldr	r2, [pc, #328]	; (8005410 <HAL_DMA_IRQHandler+0x434>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d10a      	bne.n	80052e0 <HAL_DMA_IRQHandler+0x304>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	bf14      	ite	ne
 80052d8:	2301      	movne	r3, #1
 80052da:	2300      	moveq	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	e003      	b.n	80052e8 <HAL_DMA_IRQHandler+0x30c>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2300      	movs	r3, #0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00d      	beq.n	8005308 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f0:	f003 031f 	and.w	r3, r3, #31
 80052f4:	2201      	movs	r2, #1
 80052f6:	409a      	lsls	r2, r3
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005300:	f043 0202 	orr.w	r2, r3, #2
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800530c:	f003 031f 	and.w	r3, r3, #31
 8005310:	2204      	movs	r2, #4
 8005312:	409a      	lsls	r2, r3
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	4013      	ands	r3, r2
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 808f 	beq.w	800543c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a2c      	ldr	r2, [pc, #176]	; (80053d4 <HAL_DMA_IRQHandler+0x3f8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d04a      	beq.n	80053be <HAL_DMA_IRQHandler+0x3e2>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a2a      	ldr	r2, [pc, #168]	; (80053d8 <HAL_DMA_IRQHandler+0x3fc>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d045      	beq.n	80053be <HAL_DMA_IRQHandler+0x3e2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a29      	ldr	r2, [pc, #164]	; (80053dc <HAL_DMA_IRQHandler+0x400>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d040      	beq.n	80053be <HAL_DMA_IRQHandler+0x3e2>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a27      	ldr	r2, [pc, #156]	; (80053e0 <HAL_DMA_IRQHandler+0x404>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d03b      	beq.n	80053be <HAL_DMA_IRQHandler+0x3e2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a26      	ldr	r2, [pc, #152]	; (80053e4 <HAL_DMA_IRQHandler+0x408>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d036      	beq.n	80053be <HAL_DMA_IRQHandler+0x3e2>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a24      	ldr	r2, [pc, #144]	; (80053e8 <HAL_DMA_IRQHandler+0x40c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d031      	beq.n	80053be <HAL_DMA_IRQHandler+0x3e2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a23      	ldr	r2, [pc, #140]	; (80053ec <HAL_DMA_IRQHandler+0x410>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d02c      	beq.n	80053be <HAL_DMA_IRQHandler+0x3e2>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a21      	ldr	r2, [pc, #132]	; (80053f0 <HAL_DMA_IRQHandler+0x414>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d027      	beq.n	80053be <HAL_DMA_IRQHandler+0x3e2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a20      	ldr	r2, [pc, #128]	; (80053f4 <HAL_DMA_IRQHandler+0x418>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d022      	beq.n	80053be <HAL_DMA_IRQHandler+0x3e2>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a1e      	ldr	r2, [pc, #120]	; (80053f8 <HAL_DMA_IRQHandler+0x41c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d01d      	beq.n	80053be <HAL_DMA_IRQHandler+0x3e2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a1d      	ldr	r2, [pc, #116]	; (80053fc <HAL_DMA_IRQHandler+0x420>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d018      	beq.n	80053be <HAL_DMA_IRQHandler+0x3e2>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1b      	ldr	r2, [pc, #108]	; (8005400 <HAL_DMA_IRQHandler+0x424>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d013      	beq.n	80053be <HAL_DMA_IRQHandler+0x3e2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1a      	ldr	r2, [pc, #104]	; (8005404 <HAL_DMA_IRQHandler+0x428>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00e      	beq.n	80053be <HAL_DMA_IRQHandler+0x3e2>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a18      	ldr	r2, [pc, #96]	; (8005408 <HAL_DMA_IRQHandler+0x42c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d009      	beq.n	80053be <HAL_DMA_IRQHandler+0x3e2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a17      	ldr	r2, [pc, #92]	; (800540c <HAL_DMA_IRQHandler+0x430>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d004      	beq.n	80053be <HAL_DMA_IRQHandler+0x3e2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a15      	ldr	r2, [pc, #84]	; (8005410 <HAL_DMA_IRQHandler+0x434>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d12a      	bne.n	8005414 <HAL_DMA_IRQHandler+0x438>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	bf14      	ite	ne
 80053cc:	2301      	movne	r3, #1
 80053ce:	2300      	moveq	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	e023      	b.n	800541c <HAL_DMA_IRQHandler+0x440>
 80053d4:	40020010 	.word	0x40020010
 80053d8:	40020028 	.word	0x40020028
 80053dc:	40020040 	.word	0x40020040
 80053e0:	40020058 	.word	0x40020058
 80053e4:	40020070 	.word	0x40020070
 80053e8:	40020088 	.word	0x40020088
 80053ec:	400200a0 	.word	0x400200a0
 80053f0:	400200b8 	.word	0x400200b8
 80053f4:	40020410 	.word	0x40020410
 80053f8:	40020428 	.word	0x40020428
 80053fc:	40020440 	.word	0x40020440
 8005400:	40020458 	.word	0x40020458
 8005404:	40020470 	.word	0x40020470
 8005408:	40020488 	.word	0x40020488
 800540c:	400204a0 	.word	0x400204a0
 8005410:	400204b8 	.word	0x400204b8
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2300      	movs	r3, #0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00d      	beq.n	800543c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005424:	f003 031f 	and.w	r3, r3, #31
 8005428:	2204      	movs	r2, #4
 800542a:	409a      	lsls	r2, r3
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005434:	f043 0204 	orr.w	r2, r3, #4
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005440:	f003 031f 	and.w	r3, r3, #31
 8005444:	2210      	movs	r2, #16
 8005446:	409a      	lsls	r2, r3
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	4013      	ands	r3, r2
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 80a6 	beq.w	800559e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a85      	ldr	r2, [pc, #532]	; (800566c <HAL_DMA_IRQHandler+0x690>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d04a      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x516>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a83      	ldr	r2, [pc, #524]	; (8005670 <HAL_DMA_IRQHandler+0x694>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d045      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x516>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a82      	ldr	r2, [pc, #520]	; (8005674 <HAL_DMA_IRQHandler+0x698>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d040      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x516>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a80      	ldr	r2, [pc, #512]	; (8005678 <HAL_DMA_IRQHandler+0x69c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d03b      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x516>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a7f      	ldr	r2, [pc, #508]	; (800567c <HAL_DMA_IRQHandler+0x6a0>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d036      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x516>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a7d      	ldr	r2, [pc, #500]	; (8005680 <HAL_DMA_IRQHandler+0x6a4>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d031      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x516>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a7c      	ldr	r2, [pc, #496]	; (8005684 <HAL_DMA_IRQHandler+0x6a8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d02c      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x516>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a7a      	ldr	r2, [pc, #488]	; (8005688 <HAL_DMA_IRQHandler+0x6ac>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d027      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x516>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a79      	ldr	r2, [pc, #484]	; (800568c <HAL_DMA_IRQHandler+0x6b0>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d022      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x516>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a77      	ldr	r2, [pc, #476]	; (8005690 <HAL_DMA_IRQHandler+0x6b4>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d01d      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x516>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a76      	ldr	r2, [pc, #472]	; (8005694 <HAL_DMA_IRQHandler+0x6b8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d018      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x516>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a74      	ldr	r2, [pc, #464]	; (8005698 <HAL_DMA_IRQHandler+0x6bc>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d013      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x516>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a73      	ldr	r2, [pc, #460]	; (800569c <HAL_DMA_IRQHandler+0x6c0>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00e      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x516>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a71      	ldr	r2, [pc, #452]	; (80056a0 <HAL_DMA_IRQHandler+0x6c4>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d009      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x516>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a70      	ldr	r2, [pc, #448]	; (80056a4 <HAL_DMA_IRQHandler+0x6c8>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d004      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x516>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a6e      	ldr	r2, [pc, #440]	; (80056a8 <HAL_DMA_IRQHandler+0x6cc>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d10a      	bne.n	8005508 <HAL_DMA_IRQHandler+0x52c>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0308 	and.w	r3, r3, #8
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	bf14      	ite	ne
 8005500:	2301      	movne	r3, #1
 8005502:	2300      	moveq	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	e009      	b.n	800551c <HAL_DMA_IRQHandler+0x540>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b00      	cmp	r3, #0
 8005514:	bf14      	ite	ne
 8005516:	2301      	movne	r3, #1
 8005518:	2300      	moveq	r3, #0
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d03e      	beq.n	800559e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005524:	f003 031f 	and.w	r3, r3, #31
 8005528:	2210      	movs	r2, #16
 800552a:	409a      	lsls	r2, r3
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d018      	beq.n	8005570 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d108      	bne.n	800555e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005550:	2b00      	cmp	r3, #0
 8005552:	d024      	beq.n	800559e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	4798      	blx	r3
 800555c:	e01f      	b.n	800559e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005562:	2b00      	cmp	r3, #0
 8005564:	d01b      	beq.n	800559e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	4798      	blx	r3
 800556e:	e016      	b.n	800559e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557a:	2b00      	cmp	r3, #0
 800557c:	d107      	bne.n	800558e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0208 	bic.w	r2, r2, #8
 800558c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a2:	f003 031f 	and.w	r3, r3, #31
 80055a6:	2220      	movs	r2, #32
 80055a8:	409a      	lsls	r2, r3
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	4013      	ands	r3, r2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 8110 	beq.w	80057d4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a2c      	ldr	r2, [pc, #176]	; (800566c <HAL_DMA_IRQHandler+0x690>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d04a      	beq.n	8005654 <HAL_DMA_IRQHandler+0x678>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a2b      	ldr	r2, [pc, #172]	; (8005670 <HAL_DMA_IRQHandler+0x694>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d045      	beq.n	8005654 <HAL_DMA_IRQHandler+0x678>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a29      	ldr	r2, [pc, #164]	; (8005674 <HAL_DMA_IRQHandler+0x698>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d040      	beq.n	8005654 <HAL_DMA_IRQHandler+0x678>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a28      	ldr	r2, [pc, #160]	; (8005678 <HAL_DMA_IRQHandler+0x69c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d03b      	beq.n	8005654 <HAL_DMA_IRQHandler+0x678>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a26      	ldr	r2, [pc, #152]	; (800567c <HAL_DMA_IRQHandler+0x6a0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d036      	beq.n	8005654 <HAL_DMA_IRQHandler+0x678>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a25      	ldr	r2, [pc, #148]	; (8005680 <HAL_DMA_IRQHandler+0x6a4>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d031      	beq.n	8005654 <HAL_DMA_IRQHandler+0x678>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a23      	ldr	r2, [pc, #140]	; (8005684 <HAL_DMA_IRQHandler+0x6a8>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d02c      	beq.n	8005654 <HAL_DMA_IRQHandler+0x678>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a22      	ldr	r2, [pc, #136]	; (8005688 <HAL_DMA_IRQHandler+0x6ac>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d027      	beq.n	8005654 <HAL_DMA_IRQHandler+0x678>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a20      	ldr	r2, [pc, #128]	; (800568c <HAL_DMA_IRQHandler+0x6b0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d022      	beq.n	8005654 <HAL_DMA_IRQHandler+0x678>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a1f      	ldr	r2, [pc, #124]	; (8005690 <HAL_DMA_IRQHandler+0x6b4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d01d      	beq.n	8005654 <HAL_DMA_IRQHandler+0x678>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a1d      	ldr	r2, [pc, #116]	; (8005694 <HAL_DMA_IRQHandler+0x6b8>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d018      	beq.n	8005654 <HAL_DMA_IRQHandler+0x678>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a1c      	ldr	r2, [pc, #112]	; (8005698 <HAL_DMA_IRQHandler+0x6bc>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d013      	beq.n	8005654 <HAL_DMA_IRQHandler+0x678>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a1a      	ldr	r2, [pc, #104]	; (800569c <HAL_DMA_IRQHandler+0x6c0>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00e      	beq.n	8005654 <HAL_DMA_IRQHandler+0x678>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a19      	ldr	r2, [pc, #100]	; (80056a0 <HAL_DMA_IRQHandler+0x6c4>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d009      	beq.n	8005654 <HAL_DMA_IRQHandler+0x678>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a17      	ldr	r2, [pc, #92]	; (80056a4 <HAL_DMA_IRQHandler+0x6c8>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d004      	beq.n	8005654 <HAL_DMA_IRQHandler+0x678>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a16      	ldr	r2, [pc, #88]	; (80056a8 <HAL_DMA_IRQHandler+0x6cc>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d12b      	bne.n	80056ac <HAL_DMA_IRQHandler+0x6d0>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0310 	and.w	r3, r3, #16
 800565e:	2b00      	cmp	r3, #0
 8005660:	bf14      	ite	ne
 8005662:	2301      	movne	r3, #1
 8005664:	2300      	moveq	r3, #0
 8005666:	b2db      	uxtb	r3, r3
 8005668:	e02a      	b.n	80056c0 <HAL_DMA_IRQHandler+0x6e4>
 800566a:	bf00      	nop
 800566c:	40020010 	.word	0x40020010
 8005670:	40020028 	.word	0x40020028
 8005674:	40020040 	.word	0x40020040
 8005678:	40020058 	.word	0x40020058
 800567c:	40020070 	.word	0x40020070
 8005680:	40020088 	.word	0x40020088
 8005684:	400200a0 	.word	0x400200a0
 8005688:	400200b8 	.word	0x400200b8
 800568c:	40020410 	.word	0x40020410
 8005690:	40020428 	.word	0x40020428
 8005694:	40020440 	.word	0x40020440
 8005698:	40020458 	.word	0x40020458
 800569c:	40020470 	.word	0x40020470
 80056a0:	40020488 	.word	0x40020488
 80056a4:	400204a0 	.word	0x400204a0
 80056a8:	400204b8 	.word	0x400204b8
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	bf14      	ite	ne
 80056ba:	2301      	movne	r3, #1
 80056bc:	2300      	moveq	r3, #0
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 8087 	beq.w	80057d4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ca:	f003 031f 	and.w	r3, r3, #31
 80056ce:	2220      	movs	r2, #32
 80056d0:	409a      	lsls	r2, r3
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d139      	bne.n	8005756 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0216 	bic.w	r2, r2, #22
 80056f0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	695a      	ldr	r2, [r3, #20]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005700:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	2b00      	cmp	r3, #0
 8005708:	d103      	bne.n	8005712 <HAL_DMA_IRQHandler+0x736>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800570e:	2b00      	cmp	r3, #0
 8005710:	d007      	beq.n	8005722 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0208 	bic.w	r2, r2, #8
 8005720:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005726:	f003 031f 	and.w	r3, r3, #31
 800572a:	223f      	movs	r2, #63	; 0x3f
 800572c:	409a      	lsls	r2, r3
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 834a 	beq.w	8005de0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	4798      	blx	r3
          }
          return;
 8005754:	e344      	b.n	8005de0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d018      	beq.n	8005796 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d108      	bne.n	8005784 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005776:	2b00      	cmp	r3, #0
 8005778:	d02c      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	4798      	blx	r3
 8005782:	e027      	b.n	80057d4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005788:	2b00      	cmp	r3, #0
 800578a:	d023      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	4798      	blx	r3
 8005794:	e01e      	b.n	80057d4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10f      	bne.n	80057c4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0210 	bic.w	r2, r2, #16
 80057b2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 8306 	beq.w	8005dea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 8088 	beq.w	80058fc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2204      	movs	r2, #4
 80057f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a7a      	ldr	r2, [pc, #488]	; (80059e4 <HAL_DMA_IRQHandler+0xa08>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d04a      	beq.n	8005894 <HAL_DMA_IRQHandler+0x8b8>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a79      	ldr	r2, [pc, #484]	; (80059e8 <HAL_DMA_IRQHandler+0xa0c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d045      	beq.n	8005894 <HAL_DMA_IRQHandler+0x8b8>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a77      	ldr	r2, [pc, #476]	; (80059ec <HAL_DMA_IRQHandler+0xa10>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d040      	beq.n	8005894 <HAL_DMA_IRQHandler+0x8b8>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a76      	ldr	r2, [pc, #472]	; (80059f0 <HAL_DMA_IRQHandler+0xa14>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d03b      	beq.n	8005894 <HAL_DMA_IRQHandler+0x8b8>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a74      	ldr	r2, [pc, #464]	; (80059f4 <HAL_DMA_IRQHandler+0xa18>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d036      	beq.n	8005894 <HAL_DMA_IRQHandler+0x8b8>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a73      	ldr	r2, [pc, #460]	; (80059f8 <HAL_DMA_IRQHandler+0xa1c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d031      	beq.n	8005894 <HAL_DMA_IRQHandler+0x8b8>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a71      	ldr	r2, [pc, #452]	; (80059fc <HAL_DMA_IRQHandler+0xa20>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d02c      	beq.n	8005894 <HAL_DMA_IRQHandler+0x8b8>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a70      	ldr	r2, [pc, #448]	; (8005a00 <HAL_DMA_IRQHandler+0xa24>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d027      	beq.n	8005894 <HAL_DMA_IRQHandler+0x8b8>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a6e      	ldr	r2, [pc, #440]	; (8005a04 <HAL_DMA_IRQHandler+0xa28>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d022      	beq.n	8005894 <HAL_DMA_IRQHandler+0x8b8>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a6d      	ldr	r2, [pc, #436]	; (8005a08 <HAL_DMA_IRQHandler+0xa2c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d01d      	beq.n	8005894 <HAL_DMA_IRQHandler+0x8b8>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a6b      	ldr	r2, [pc, #428]	; (8005a0c <HAL_DMA_IRQHandler+0xa30>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d018      	beq.n	8005894 <HAL_DMA_IRQHandler+0x8b8>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a6a      	ldr	r2, [pc, #424]	; (8005a10 <HAL_DMA_IRQHandler+0xa34>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d013      	beq.n	8005894 <HAL_DMA_IRQHandler+0x8b8>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a68      	ldr	r2, [pc, #416]	; (8005a14 <HAL_DMA_IRQHandler+0xa38>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00e      	beq.n	8005894 <HAL_DMA_IRQHandler+0x8b8>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a67      	ldr	r2, [pc, #412]	; (8005a18 <HAL_DMA_IRQHandler+0xa3c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d009      	beq.n	8005894 <HAL_DMA_IRQHandler+0x8b8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a65      	ldr	r2, [pc, #404]	; (8005a1c <HAL_DMA_IRQHandler+0xa40>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d004      	beq.n	8005894 <HAL_DMA_IRQHandler+0x8b8>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a64      	ldr	r2, [pc, #400]	; (8005a20 <HAL_DMA_IRQHandler+0xa44>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d108      	bne.n	80058a6 <HAL_DMA_IRQHandler+0x8ca>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0201 	bic.w	r2, r2, #1
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	e007      	b.n	80058b6 <HAL_DMA_IRQHandler+0x8da>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 0201 	bic.w	r2, r2, #1
 80058b4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3301      	adds	r3, #1
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058be:	429a      	cmp	r2, r3
 80058c0:	d307      	bcc.n	80058d2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1f2      	bne.n	80058b6 <HAL_DMA_IRQHandler+0x8da>
 80058d0:	e000      	b.n	80058d4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80058d2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d004      	beq.n	80058f4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2203      	movs	r2, #3
 80058ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80058f2:	e003      	b.n	80058fc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 8272 	beq.w	8005dea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	4798      	blx	r3
 800590e:	e26c      	b.n	8005dea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a43      	ldr	r2, [pc, #268]	; (8005a24 <HAL_DMA_IRQHandler+0xa48>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d022      	beq.n	8005960 <HAL_DMA_IRQHandler+0x984>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a42      	ldr	r2, [pc, #264]	; (8005a28 <HAL_DMA_IRQHandler+0xa4c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d01d      	beq.n	8005960 <HAL_DMA_IRQHandler+0x984>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a40      	ldr	r2, [pc, #256]	; (8005a2c <HAL_DMA_IRQHandler+0xa50>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d018      	beq.n	8005960 <HAL_DMA_IRQHandler+0x984>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a3f      	ldr	r2, [pc, #252]	; (8005a30 <HAL_DMA_IRQHandler+0xa54>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d013      	beq.n	8005960 <HAL_DMA_IRQHandler+0x984>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a3d      	ldr	r2, [pc, #244]	; (8005a34 <HAL_DMA_IRQHandler+0xa58>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00e      	beq.n	8005960 <HAL_DMA_IRQHandler+0x984>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a3c      	ldr	r2, [pc, #240]	; (8005a38 <HAL_DMA_IRQHandler+0xa5c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d009      	beq.n	8005960 <HAL_DMA_IRQHandler+0x984>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a3a      	ldr	r2, [pc, #232]	; (8005a3c <HAL_DMA_IRQHandler+0xa60>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d004      	beq.n	8005960 <HAL_DMA_IRQHandler+0x984>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a39      	ldr	r2, [pc, #228]	; (8005a40 <HAL_DMA_IRQHandler+0xa64>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d101      	bne.n	8005964 <HAL_DMA_IRQHandler+0x988>
 8005960:	2301      	movs	r3, #1
 8005962:	e000      	b.n	8005966 <HAL_DMA_IRQHandler+0x98a>
 8005964:	2300      	movs	r3, #0
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 823f 	beq.w	8005dea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005978:	f003 031f 	and.w	r3, r3, #31
 800597c:	2204      	movs	r2, #4
 800597e:	409a      	lsls	r2, r3
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	4013      	ands	r3, r2
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 80cd 	beq.w	8005b24 <HAL_DMA_IRQHandler+0xb48>
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 80c7 	beq.w	8005b24 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800599a:	f003 031f 	and.w	r3, r3, #31
 800599e:	2204      	movs	r2, #4
 80059a0:	409a      	lsls	r2, r3
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d049      	beq.n	8005a44 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d109      	bne.n	80059ce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 8210 	beq.w	8005de4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059cc:	e20a      	b.n	8005de4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 8206 	beq.w	8005de4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059e0:	e200      	b.n	8005de4 <HAL_DMA_IRQHandler+0xe08>
 80059e2:	bf00      	nop
 80059e4:	40020010 	.word	0x40020010
 80059e8:	40020028 	.word	0x40020028
 80059ec:	40020040 	.word	0x40020040
 80059f0:	40020058 	.word	0x40020058
 80059f4:	40020070 	.word	0x40020070
 80059f8:	40020088 	.word	0x40020088
 80059fc:	400200a0 	.word	0x400200a0
 8005a00:	400200b8 	.word	0x400200b8
 8005a04:	40020410 	.word	0x40020410
 8005a08:	40020428 	.word	0x40020428
 8005a0c:	40020440 	.word	0x40020440
 8005a10:	40020458 	.word	0x40020458
 8005a14:	40020470 	.word	0x40020470
 8005a18:	40020488 	.word	0x40020488
 8005a1c:	400204a0 	.word	0x400204a0
 8005a20:	400204b8 	.word	0x400204b8
 8005a24:	58025408 	.word	0x58025408
 8005a28:	5802541c 	.word	0x5802541c
 8005a2c:	58025430 	.word	0x58025430
 8005a30:	58025444 	.word	0x58025444
 8005a34:	58025458 	.word	0x58025458
 8005a38:	5802546c 	.word	0x5802546c
 8005a3c:	58025480 	.word	0x58025480
 8005a40:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	f003 0320 	and.w	r3, r3, #32
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d160      	bne.n	8005b10 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a8c      	ldr	r2, [pc, #560]	; (8005c84 <HAL_DMA_IRQHandler+0xca8>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d04a      	beq.n	8005aee <HAL_DMA_IRQHandler+0xb12>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a8a      	ldr	r2, [pc, #552]	; (8005c88 <HAL_DMA_IRQHandler+0xcac>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d045      	beq.n	8005aee <HAL_DMA_IRQHandler+0xb12>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a89      	ldr	r2, [pc, #548]	; (8005c8c <HAL_DMA_IRQHandler+0xcb0>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d040      	beq.n	8005aee <HAL_DMA_IRQHandler+0xb12>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a87      	ldr	r2, [pc, #540]	; (8005c90 <HAL_DMA_IRQHandler+0xcb4>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d03b      	beq.n	8005aee <HAL_DMA_IRQHandler+0xb12>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a86      	ldr	r2, [pc, #536]	; (8005c94 <HAL_DMA_IRQHandler+0xcb8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d036      	beq.n	8005aee <HAL_DMA_IRQHandler+0xb12>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a84      	ldr	r2, [pc, #528]	; (8005c98 <HAL_DMA_IRQHandler+0xcbc>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d031      	beq.n	8005aee <HAL_DMA_IRQHandler+0xb12>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a83      	ldr	r2, [pc, #524]	; (8005c9c <HAL_DMA_IRQHandler+0xcc0>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d02c      	beq.n	8005aee <HAL_DMA_IRQHandler+0xb12>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a81      	ldr	r2, [pc, #516]	; (8005ca0 <HAL_DMA_IRQHandler+0xcc4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d027      	beq.n	8005aee <HAL_DMA_IRQHandler+0xb12>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a80      	ldr	r2, [pc, #512]	; (8005ca4 <HAL_DMA_IRQHandler+0xcc8>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d022      	beq.n	8005aee <HAL_DMA_IRQHandler+0xb12>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a7e      	ldr	r2, [pc, #504]	; (8005ca8 <HAL_DMA_IRQHandler+0xccc>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d01d      	beq.n	8005aee <HAL_DMA_IRQHandler+0xb12>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a7d      	ldr	r2, [pc, #500]	; (8005cac <HAL_DMA_IRQHandler+0xcd0>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d018      	beq.n	8005aee <HAL_DMA_IRQHandler+0xb12>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a7b      	ldr	r2, [pc, #492]	; (8005cb0 <HAL_DMA_IRQHandler+0xcd4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d013      	beq.n	8005aee <HAL_DMA_IRQHandler+0xb12>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a7a      	ldr	r2, [pc, #488]	; (8005cb4 <HAL_DMA_IRQHandler+0xcd8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d00e      	beq.n	8005aee <HAL_DMA_IRQHandler+0xb12>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a78      	ldr	r2, [pc, #480]	; (8005cb8 <HAL_DMA_IRQHandler+0xcdc>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d009      	beq.n	8005aee <HAL_DMA_IRQHandler+0xb12>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a77      	ldr	r2, [pc, #476]	; (8005cbc <HAL_DMA_IRQHandler+0xce0>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d004      	beq.n	8005aee <HAL_DMA_IRQHandler+0xb12>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a75      	ldr	r2, [pc, #468]	; (8005cc0 <HAL_DMA_IRQHandler+0xce4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d108      	bne.n	8005b00 <HAL_DMA_IRQHandler+0xb24>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 0208 	bic.w	r2, r2, #8
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	e007      	b.n	8005b10 <HAL_DMA_IRQHandler+0xb34>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0204 	bic.w	r2, r2, #4
 8005b0e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 8165 	beq.w	8005de4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b22:	e15f      	b.n	8005de4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b28:	f003 031f 	and.w	r3, r3, #31
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	409a      	lsls	r2, r3
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	4013      	ands	r3, r2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 80c5 	beq.w	8005cc4 <HAL_DMA_IRQHandler+0xce8>
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 80bf 	beq.w	8005cc4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b4a:	f003 031f 	and.w	r3, r3, #31
 8005b4e:	2202      	movs	r2, #2
 8005b50:	409a      	lsls	r2, r3
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d018      	beq.n	8005b92 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d109      	bne.n	8005b7e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 813a 	beq.w	8005de8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b7c:	e134      	b.n	8005de8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 8130 	beq.w	8005de8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b90:	e12a      	b.n	8005de8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f003 0320 	and.w	r3, r3, #32
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d168      	bne.n	8005c6e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a38      	ldr	r2, [pc, #224]	; (8005c84 <HAL_DMA_IRQHandler+0xca8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d04a      	beq.n	8005c3c <HAL_DMA_IRQHandler+0xc60>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a37      	ldr	r2, [pc, #220]	; (8005c88 <HAL_DMA_IRQHandler+0xcac>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d045      	beq.n	8005c3c <HAL_DMA_IRQHandler+0xc60>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a35      	ldr	r2, [pc, #212]	; (8005c8c <HAL_DMA_IRQHandler+0xcb0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d040      	beq.n	8005c3c <HAL_DMA_IRQHandler+0xc60>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a34      	ldr	r2, [pc, #208]	; (8005c90 <HAL_DMA_IRQHandler+0xcb4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d03b      	beq.n	8005c3c <HAL_DMA_IRQHandler+0xc60>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a32      	ldr	r2, [pc, #200]	; (8005c94 <HAL_DMA_IRQHandler+0xcb8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d036      	beq.n	8005c3c <HAL_DMA_IRQHandler+0xc60>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a31      	ldr	r2, [pc, #196]	; (8005c98 <HAL_DMA_IRQHandler+0xcbc>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d031      	beq.n	8005c3c <HAL_DMA_IRQHandler+0xc60>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a2f      	ldr	r2, [pc, #188]	; (8005c9c <HAL_DMA_IRQHandler+0xcc0>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d02c      	beq.n	8005c3c <HAL_DMA_IRQHandler+0xc60>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a2e      	ldr	r2, [pc, #184]	; (8005ca0 <HAL_DMA_IRQHandler+0xcc4>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d027      	beq.n	8005c3c <HAL_DMA_IRQHandler+0xc60>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a2c      	ldr	r2, [pc, #176]	; (8005ca4 <HAL_DMA_IRQHandler+0xcc8>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d022      	beq.n	8005c3c <HAL_DMA_IRQHandler+0xc60>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a2b      	ldr	r2, [pc, #172]	; (8005ca8 <HAL_DMA_IRQHandler+0xccc>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d01d      	beq.n	8005c3c <HAL_DMA_IRQHandler+0xc60>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a29      	ldr	r2, [pc, #164]	; (8005cac <HAL_DMA_IRQHandler+0xcd0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d018      	beq.n	8005c3c <HAL_DMA_IRQHandler+0xc60>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a28      	ldr	r2, [pc, #160]	; (8005cb0 <HAL_DMA_IRQHandler+0xcd4>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d013      	beq.n	8005c3c <HAL_DMA_IRQHandler+0xc60>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a26      	ldr	r2, [pc, #152]	; (8005cb4 <HAL_DMA_IRQHandler+0xcd8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d00e      	beq.n	8005c3c <HAL_DMA_IRQHandler+0xc60>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a25      	ldr	r2, [pc, #148]	; (8005cb8 <HAL_DMA_IRQHandler+0xcdc>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d009      	beq.n	8005c3c <HAL_DMA_IRQHandler+0xc60>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a23      	ldr	r2, [pc, #140]	; (8005cbc <HAL_DMA_IRQHandler+0xce0>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d004      	beq.n	8005c3c <HAL_DMA_IRQHandler+0xc60>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a22      	ldr	r2, [pc, #136]	; (8005cc0 <HAL_DMA_IRQHandler+0xce4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d108      	bne.n	8005c4e <HAL_DMA_IRQHandler+0xc72>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0214 	bic.w	r2, r2, #20
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	e007      	b.n	8005c5e <HAL_DMA_IRQHandler+0xc82>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 020a 	bic.w	r2, r2, #10
 8005c5c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f000 80b8 	beq.w	8005de8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c80:	e0b2      	b.n	8005de8 <HAL_DMA_IRQHandler+0xe0c>
 8005c82:	bf00      	nop
 8005c84:	40020010 	.word	0x40020010
 8005c88:	40020028 	.word	0x40020028
 8005c8c:	40020040 	.word	0x40020040
 8005c90:	40020058 	.word	0x40020058
 8005c94:	40020070 	.word	0x40020070
 8005c98:	40020088 	.word	0x40020088
 8005c9c:	400200a0 	.word	0x400200a0
 8005ca0:	400200b8 	.word	0x400200b8
 8005ca4:	40020410 	.word	0x40020410
 8005ca8:	40020428 	.word	0x40020428
 8005cac:	40020440 	.word	0x40020440
 8005cb0:	40020458 	.word	0x40020458
 8005cb4:	40020470 	.word	0x40020470
 8005cb8:	40020488 	.word	0x40020488
 8005cbc:	400204a0 	.word	0x400204a0
 8005cc0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc8:	f003 031f 	and.w	r3, r3, #31
 8005ccc:	2208      	movs	r2, #8
 8005cce:	409a      	lsls	r2, r3
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 8088 	beq.w	8005dea <HAL_DMA_IRQHandler+0xe0e>
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f003 0308 	and.w	r3, r3, #8
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 8082 	beq.w	8005dea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a41      	ldr	r2, [pc, #260]	; (8005df0 <HAL_DMA_IRQHandler+0xe14>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d04a      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xdaa>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a3f      	ldr	r2, [pc, #252]	; (8005df4 <HAL_DMA_IRQHandler+0xe18>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d045      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xdaa>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a3e      	ldr	r2, [pc, #248]	; (8005df8 <HAL_DMA_IRQHandler+0xe1c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d040      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xdaa>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a3c      	ldr	r2, [pc, #240]	; (8005dfc <HAL_DMA_IRQHandler+0xe20>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d03b      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xdaa>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a3b      	ldr	r2, [pc, #236]	; (8005e00 <HAL_DMA_IRQHandler+0xe24>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d036      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xdaa>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a39      	ldr	r2, [pc, #228]	; (8005e04 <HAL_DMA_IRQHandler+0xe28>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d031      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xdaa>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a38      	ldr	r2, [pc, #224]	; (8005e08 <HAL_DMA_IRQHandler+0xe2c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d02c      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xdaa>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a36      	ldr	r2, [pc, #216]	; (8005e0c <HAL_DMA_IRQHandler+0xe30>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d027      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xdaa>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a35      	ldr	r2, [pc, #212]	; (8005e10 <HAL_DMA_IRQHandler+0xe34>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d022      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xdaa>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a33      	ldr	r2, [pc, #204]	; (8005e14 <HAL_DMA_IRQHandler+0xe38>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d01d      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xdaa>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a32      	ldr	r2, [pc, #200]	; (8005e18 <HAL_DMA_IRQHandler+0xe3c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d018      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xdaa>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a30      	ldr	r2, [pc, #192]	; (8005e1c <HAL_DMA_IRQHandler+0xe40>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d013      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xdaa>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a2f      	ldr	r2, [pc, #188]	; (8005e20 <HAL_DMA_IRQHandler+0xe44>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d00e      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xdaa>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a2d      	ldr	r2, [pc, #180]	; (8005e24 <HAL_DMA_IRQHandler+0xe48>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d009      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xdaa>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a2c      	ldr	r2, [pc, #176]	; (8005e28 <HAL_DMA_IRQHandler+0xe4c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d004      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xdaa>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a2a      	ldr	r2, [pc, #168]	; (8005e2c <HAL_DMA_IRQHandler+0xe50>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d108      	bne.n	8005d98 <HAL_DMA_IRQHandler+0xdbc>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 021c 	bic.w	r2, r2, #28
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	e007      	b.n	8005da8 <HAL_DMA_IRQHandler+0xdcc>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 020e 	bic.w	r2, r2, #14
 8005da6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dac:	f003 031f 	and.w	r3, r3, #31
 8005db0:	2201      	movs	r2, #1
 8005db2:	409a      	lsls	r2, r3
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d009      	beq.n	8005dea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	4798      	blx	r3
 8005dde:	e004      	b.n	8005dea <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005de0:	bf00      	nop
 8005de2:	e002      	b.n	8005dea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005de4:	bf00      	nop
 8005de6:	e000      	b.n	8005dea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005de8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005dea:	3728      	adds	r7, #40	; 0x28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40020010 	.word	0x40020010
 8005df4:	40020028 	.word	0x40020028
 8005df8:	40020040 	.word	0x40020040
 8005dfc:	40020058 	.word	0x40020058
 8005e00:	40020070 	.word	0x40020070
 8005e04:	40020088 	.word	0x40020088
 8005e08:	400200a0 	.word	0x400200a0
 8005e0c:	400200b8 	.word	0x400200b8
 8005e10:	40020410 	.word	0x40020410
 8005e14:	40020428 	.word	0x40020428
 8005e18:	40020440 	.word	0x40020440
 8005e1c:	40020458 	.word	0x40020458
 8005e20:	40020470 	.word	0x40020470
 8005e24:	40020488 	.word	0x40020488
 8005e28:	400204a0 	.word	0x400204a0
 8005e2c:	400204b8 	.word	0x400204b8

08005e30 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e5a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e60:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a84      	ldr	r2, [pc, #528]	; (8006078 <DMA_SetConfig+0x230>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d072      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a82      	ldr	r2, [pc, #520]	; (800607c <DMA_SetConfig+0x234>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d06d      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a81      	ldr	r2, [pc, #516]	; (8006080 <DMA_SetConfig+0x238>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d068      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a7f      	ldr	r2, [pc, #508]	; (8006084 <DMA_SetConfig+0x23c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d063      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a7e      	ldr	r2, [pc, #504]	; (8006088 <DMA_SetConfig+0x240>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d05e      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a7c      	ldr	r2, [pc, #496]	; (800608c <DMA_SetConfig+0x244>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d059      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a7b      	ldr	r2, [pc, #492]	; (8006090 <DMA_SetConfig+0x248>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d054      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a79      	ldr	r2, [pc, #484]	; (8006094 <DMA_SetConfig+0x24c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d04f      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a78      	ldr	r2, [pc, #480]	; (8006098 <DMA_SetConfig+0x250>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d04a      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a76      	ldr	r2, [pc, #472]	; (800609c <DMA_SetConfig+0x254>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d045      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a75      	ldr	r2, [pc, #468]	; (80060a0 <DMA_SetConfig+0x258>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d040      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a73      	ldr	r2, [pc, #460]	; (80060a4 <DMA_SetConfig+0x25c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d03b      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a72      	ldr	r2, [pc, #456]	; (80060a8 <DMA_SetConfig+0x260>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d036      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a70      	ldr	r2, [pc, #448]	; (80060ac <DMA_SetConfig+0x264>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d031      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a6f      	ldr	r2, [pc, #444]	; (80060b0 <DMA_SetConfig+0x268>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d02c      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a6d      	ldr	r2, [pc, #436]	; (80060b4 <DMA_SetConfig+0x26c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d027      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a6c      	ldr	r2, [pc, #432]	; (80060b8 <DMA_SetConfig+0x270>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d022      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a6a      	ldr	r2, [pc, #424]	; (80060bc <DMA_SetConfig+0x274>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d01d      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a69      	ldr	r2, [pc, #420]	; (80060c0 <DMA_SetConfig+0x278>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d018      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a67      	ldr	r2, [pc, #412]	; (80060c4 <DMA_SetConfig+0x27c>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d013      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a66      	ldr	r2, [pc, #408]	; (80060c8 <DMA_SetConfig+0x280>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d00e      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a64      	ldr	r2, [pc, #400]	; (80060cc <DMA_SetConfig+0x284>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d009      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a63      	ldr	r2, [pc, #396]	; (80060d0 <DMA_SetConfig+0x288>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d004      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a61      	ldr	r2, [pc, #388]	; (80060d4 <DMA_SetConfig+0x28c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d101      	bne.n	8005f56 <DMA_SetConfig+0x10e>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e000      	b.n	8005f58 <DMA_SetConfig+0x110>
 8005f56:	2300      	movs	r3, #0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00d      	beq.n	8005f78 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f64:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d004      	beq.n	8005f78 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f76:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a3e      	ldr	r2, [pc, #248]	; (8006078 <DMA_SetConfig+0x230>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d04a      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a3d      	ldr	r2, [pc, #244]	; (800607c <DMA_SetConfig+0x234>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d045      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a3b      	ldr	r2, [pc, #236]	; (8006080 <DMA_SetConfig+0x238>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d040      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a3a      	ldr	r2, [pc, #232]	; (8006084 <DMA_SetConfig+0x23c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d03b      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a38      	ldr	r2, [pc, #224]	; (8006088 <DMA_SetConfig+0x240>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d036      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a37      	ldr	r2, [pc, #220]	; (800608c <DMA_SetConfig+0x244>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d031      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a35      	ldr	r2, [pc, #212]	; (8006090 <DMA_SetConfig+0x248>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d02c      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a34      	ldr	r2, [pc, #208]	; (8006094 <DMA_SetConfig+0x24c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d027      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a32      	ldr	r2, [pc, #200]	; (8006098 <DMA_SetConfig+0x250>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d022      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a31      	ldr	r2, [pc, #196]	; (800609c <DMA_SetConfig+0x254>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d01d      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a2f      	ldr	r2, [pc, #188]	; (80060a0 <DMA_SetConfig+0x258>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d018      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a2e      	ldr	r2, [pc, #184]	; (80060a4 <DMA_SetConfig+0x25c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d013      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a2c      	ldr	r2, [pc, #176]	; (80060a8 <DMA_SetConfig+0x260>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00e      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a2b      	ldr	r2, [pc, #172]	; (80060ac <DMA_SetConfig+0x264>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d009      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a29      	ldr	r2, [pc, #164]	; (80060b0 <DMA_SetConfig+0x268>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d004      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a28      	ldr	r2, [pc, #160]	; (80060b4 <DMA_SetConfig+0x26c>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d101      	bne.n	800601c <DMA_SetConfig+0x1d4>
 8006018:	2301      	movs	r3, #1
 800601a:	e000      	b.n	800601e <DMA_SetConfig+0x1d6>
 800601c:	2300      	movs	r3, #0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d05a      	beq.n	80060d8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006026:	f003 031f 	and.w	r3, r3, #31
 800602a:	223f      	movs	r2, #63	; 0x3f
 800602c:	409a      	lsls	r2, r3
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006040:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	2b40      	cmp	r3, #64	; 0x40
 8006050:	d108      	bne.n	8006064 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006062:	e087      	b.n	8006174 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	60da      	str	r2, [r3, #12]
}
 8006074:	e07e      	b.n	8006174 <DMA_SetConfig+0x32c>
 8006076:	bf00      	nop
 8006078:	40020010 	.word	0x40020010
 800607c:	40020028 	.word	0x40020028
 8006080:	40020040 	.word	0x40020040
 8006084:	40020058 	.word	0x40020058
 8006088:	40020070 	.word	0x40020070
 800608c:	40020088 	.word	0x40020088
 8006090:	400200a0 	.word	0x400200a0
 8006094:	400200b8 	.word	0x400200b8
 8006098:	40020410 	.word	0x40020410
 800609c:	40020428 	.word	0x40020428
 80060a0:	40020440 	.word	0x40020440
 80060a4:	40020458 	.word	0x40020458
 80060a8:	40020470 	.word	0x40020470
 80060ac:	40020488 	.word	0x40020488
 80060b0:	400204a0 	.word	0x400204a0
 80060b4:	400204b8 	.word	0x400204b8
 80060b8:	58025408 	.word	0x58025408
 80060bc:	5802541c 	.word	0x5802541c
 80060c0:	58025430 	.word	0x58025430
 80060c4:	58025444 	.word	0x58025444
 80060c8:	58025458 	.word	0x58025458
 80060cc:	5802546c 	.word	0x5802546c
 80060d0:	58025480 	.word	0x58025480
 80060d4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a28      	ldr	r2, [pc, #160]	; (8006180 <DMA_SetConfig+0x338>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d022      	beq.n	8006128 <DMA_SetConfig+0x2e0>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a27      	ldr	r2, [pc, #156]	; (8006184 <DMA_SetConfig+0x33c>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d01d      	beq.n	8006128 <DMA_SetConfig+0x2e0>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a25      	ldr	r2, [pc, #148]	; (8006188 <DMA_SetConfig+0x340>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d018      	beq.n	8006128 <DMA_SetConfig+0x2e0>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a24      	ldr	r2, [pc, #144]	; (800618c <DMA_SetConfig+0x344>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d013      	beq.n	8006128 <DMA_SetConfig+0x2e0>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a22      	ldr	r2, [pc, #136]	; (8006190 <DMA_SetConfig+0x348>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d00e      	beq.n	8006128 <DMA_SetConfig+0x2e0>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a21      	ldr	r2, [pc, #132]	; (8006194 <DMA_SetConfig+0x34c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d009      	beq.n	8006128 <DMA_SetConfig+0x2e0>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a1f      	ldr	r2, [pc, #124]	; (8006198 <DMA_SetConfig+0x350>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d004      	beq.n	8006128 <DMA_SetConfig+0x2e0>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a1e      	ldr	r2, [pc, #120]	; (800619c <DMA_SetConfig+0x354>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d101      	bne.n	800612c <DMA_SetConfig+0x2e4>
 8006128:	2301      	movs	r3, #1
 800612a:	e000      	b.n	800612e <DMA_SetConfig+0x2e6>
 800612c:	2300      	movs	r3, #0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d020      	beq.n	8006174 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006136:	f003 031f 	and.w	r3, r3, #31
 800613a:	2201      	movs	r2, #1
 800613c:	409a      	lsls	r2, r3
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	2b40      	cmp	r3, #64	; 0x40
 8006150:	d108      	bne.n	8006164 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	60da      	str	r2, [r3, #12]
}
 8006162:	e007      	b.n	8006174 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	60da      	str	r2, [r3, #12]
}
 8006174:	bf00      	nop
 8006176:	371c      	adds	r7, #28
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	58025408 	.word	0x58025408
 8006184:	5802541c 	.word	0x5802541c
 8006188:	58025430 	.word	0x58025430
 800618c:	58025444 	.word	0x58025444
 8006190:	58025458 	.word	0x58025458
 8006194:	5802546c 	.word	0x5802546c
 8006198:	58025480 	.word	0x58025480
 800619c:	58025494 	.word	0x58025494

080061a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a42      	ldr	r2, [pc, #264]	; (80062b8 <DMA_CalcBaseAndBitshift+0x118>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d04a      	beq.n	8006248 <DMA_CalcBaseAndBitshift+0xa8>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a41      	ldr	r2, [pc, #260]	; (80062bc <DMA_CalcBaseAndBitshift+0x11c>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d045      	beq.n	8006248 <DMA_CalcBaseAndBitshift+0xa8>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a3f      	ldr	r2, [pc, #252]	; (80062c0 <DMA_CalcBaseAndBitshift+0x120>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d040      	beq.n	8006248 <DMA_CalcBaseAndBitshift+0xa8>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a3e      	ldr	r2, [pc, #248]	; (80062c4 <DMA_CalcBaseAndBitshift+0x124>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d03b      	beq.n	8006248 <DMA_CalcBaseAndBitshift+0xa8>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a3c      	ldr	r2, [pc, #240]	; (80062c8 <DMA_CalcBaseAndBitshift+0x128>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d036      	beq.n	8006248 <DMA_CalcBaseAndBitshift+0xa8>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a3b      	ldr	r2, [pc, #236]	; (80062cc <DMA_CalcBaseAndBitshift+0x12c>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d031      	beq.n	8006248 <DMA_CalcBaseAndBitshift+0xa8>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a39      	ldr	r2, [pc, #228]	; (80062d0 <DMA_CalcBaseAndBitshift+0x130>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d02c      	beq.n	8006248 <DMA_CalcBaseAndBitshift+0xa8>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a38      	ldr	r2, [pc, #224]	; (80062d4 <DMA_CalcBaseAndBitshift+0x134>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d027      	beq.n	8006248 <DMA_CalcBaseAndBitshift+0xa8>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a36      	ldr	r2, [pc, #216]	; (80062d8 <DMA_CalcBaseAndBitshift+0x138>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d022      	beq.n	8006248 <DMA_CalcBaseAndBitshift+0xa8>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a35      	ldr	r2, [pc, #212]	; (80062dc <DMA_CalcBaseAndBitshift+0x13c>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d01d      	beq.n	8006248 <DMA_CalcBaseAndBitshift+0xa8>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a33      	ldr	r2, [pc, #204]	; (80062e0 <DMA_CalcBaseAndBitshift+0x140>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d018      	beq.n	8006248 <DMA_CalcBaseAndBitshift+0xa8>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a32      	ldr	r2, [pc, #200]	; (80062e4 <DMA_CalcBaseAndBitshift+0x144>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d013      	beq.n	8006248 <DMA_CalcBaseAndBitshift+0xa8>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a30      	ldr	r2, [pc, #192]	; (80062e8 <DMA_CalcBaseAndBitshift+0x148>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d00e      	beq.n	8006248 <DMA_CalcBaseAndBitshift+0xa8>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a2f      	ldr	r2, [pc, #188]	; (80062ec <DMA_CalcBaseAndBitshift+0x14c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d009      	beq.n	8006248 <DMA_CalcBaseAndBitshift+0xa8>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a2d      	ldr	r2, [pc, #180]	; (80062f0 <DMA_CalcBaseAndBitshift+0x150>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d004      	beq.n	8006248 <DMA_CalcBaseAndBitshift+0xa8>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a2c      	ldr	r2, [pc, #176]	; (80062f4 <DMA_CalcBaseAndBitshift+0x154>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d101      	bne.n	800624c <DMA_CalcBaseAndBitshift+0xac>
 8006248:	2301      	movs	r3, #1
 800624a:	e000      	b.n	800624e <DMA_CalcBaseAndBitshift+0xae>
 800624c:	2300      	movs	r3, #0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d024      	beq.n	800629c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	b2db      	uxtb	r3, r3
 8006258:	3b10      	subs	r3, #16
 800625a:	4a27      	ldr	r2, [pc, #156]	; (80062f8 <DMA_CalcBaseAndBitshift+0x158>)
 800625c:	fba2 2303 	umull	r2, r3, r2, r3
 8006260:	091b      	lsrs	r3, r3, #4
 8006262:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f003 0307 	and.w	r3, r3, #7
 800626a:	4a24      	ldr	r2, [pc, #144]	; (80062fc <DMA_CalcBaseAndBitshift+0x15c>)
 800626c:	5cd3      	ldrb	r3, [r2, r3]
 800626e:	461a      	mov	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b03      	cmp	r3, #3
 8006278:	d908      	bls.n	800628c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	4b1f      	ldr	r3, [pc, #124]	; (8006300 <DMA_CalcBaseAndBitshift+0x160>)
 8006282:	4013      	ands	r3, r2
 8006284:	1d1a      	adds	r2, r3, #4
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	659a      	str	r2, [r3, #88]	; 0x58
 800628a:	e00d      	b.n	80062a8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	461a      	mov	r2, r3
 8006292:	4b1b      	ldr	r3, [pc, #108]	; (8006300 <DMA_CalcBaseAndBitshift+0x160>)
 8006294:	4013      	ands	r3, r2
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	6593      	str	r3, [r2, #88]	; 0x58
 800629a:	e005      	b.n	80062a8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	40020010 	.word	0x40020010
 80062bc:	40020028 	.word	0x40020028
 80062c0:	40020040 	.word	0x40020040
 80062c4:	40020058 	.word	0x40020058
 80062c8:	40020070 	.word	0x40020070
 80062cc:	40020088 	.word	0x40020088
 80062d0:	400200a0 	.word	0x400200a0
 80062d4:	400200b8 	.word	0x400200b8
 80062d8:	40020410 	.word	0x40020410
 80062dc:	40020428 	.word	0x40020428
 80062e0:	40020440 	.word	0x40020440
 80062e4:	40020458 	.word	0x40020458
 80062e8:	40020470 	.word	0x40020470
 80062ec:	40020488 	.word	0x40020488
 80062f0:	400204a0 	.word	0x400204a0
 80062f4:	400204b8 	.word	0x400204b8
 80062f8:	aaaaaaab 	.word	0xaaaaaaab
 80062fc:	0800da68 	.word	0x0800da68
 8006300:	fffffc00 	.word	0xfffffc00

08006304 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d120      	bne.n	800635a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631c:	2b03      	cmp	r3, #3
 800631e:	d858      	bhi.n	80063d2 <DMA_CheckFifoParam+0xce>
 8006320:	a201      	add	r2, pc, #4	; (adr r2, 8006328 <DMA_CheckFifoParam+0x24>)
 8006322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006326:	bf00      	nop
 8006328:	08006339 	.word	0x08006339
 800632c:	0800634b 	.word	0x0800634b
 8006330:	08006339 	.word	0x08006339
 8006334:	080063d3 	.word	0x080063d3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d048      	beq.n	80063d6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006348:	e045      	b.n	80063d6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006352:	d142      	bne.n	80063da <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006358:	e03f      	b.n	80063da <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006362:	d123      	bne.n	80063ac <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006368:	2b03      	cmp	r3, #3
 800636a:	d838      	bhi.n	80063de <DMA_CheckFifoParam+0xda>
 800636c:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <DMA_CheckFifoParam+0x70>)
 800636e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006372:	bf00      	nop
 8006374:	08006385 	.word	0x08006385
 8006378:	0800638b 	.word	0x0800638b
 800637c:	08006385 	.word	0x08006385
 8006380:	0800639d 	.word	0x0800639d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	73fb      	strb	r3, [r7, #15]
        break;
 8006388:	e030      	b.n	80063ec <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d025      	beq.n	80063e2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800639a:	e022      	b.n	80063e2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063a4:	d11f      	bne.n	80063e6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063aa:	e01c      	b.n	80063e6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d902      	bls.n	80063ba <DMA_CheckFifoParam+0xb6>
 80063b4:	2b03      	cmp	r3, #3
 80063b6:	d003      	beq.n	80063c0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80063b8:	e018      	b.n	80063ec <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	73fb      	strb	r3, [r7, #15]
        break;
 80063be:	e015      	b.n	80063ec <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00e      	beq.n	80063ea <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	73fb      	strb	r3, [r7, #15]
    break;
 80063d0:	e00b      	b.n	80063ea <DMA_CheckFifoParam+0xe6>
        break;
 80063d2:	bf00      	nop
 80063d4:	e00a      	b.n	80063ec <DMA_CheckFifoParam+0xe8>
        break;
 80063d6:	bf00      	nop
 80063d8:	e008      	b.n	80063ec <DMA_CheckFifoParam+0xe8>
        break;
 80063da:	bf00      	nop
 80063dc:	e006      	b.n	80063ec <DMA_CheckFifoParam+0xe8>
        break;
 80063de:	bf00      	nop
 80063e0:	e004      	b.n	80063ec <DMA_CheckFifoParam+0xe8>
        break;
 80063e2:	bf00      	nop
 80063e4:	e002      	b.n	80063ec <DMA_CheckFifoParam+0xe8>
        break;
 80063e6:	bf00      	nop
 80063e8:	e000      	b.n	80063ec <DMA_CheckFifoParam+0xe8>
    break;
 80063ea:	bf00      	nop
    }
  }

  return status;
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop

080063fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a38      	ldr	r2, [pc, #224]	; (80064f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d022      	beq.n	800645a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a36      	ldr	r2, [pc, #216]	; (80064f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d01d      	beq.n	800645a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a35      	ldr	r2, [pc, #212]	; (80064f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d018      	beq.n	800645a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a33      	ldr	r2, [pc, #204]	; (80064fc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d013      	beq.n	800645a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a32      	ldr	r2, [pc, #200]	; (8006500 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d00e      	beq.n	800645a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a30      	ldr	r2, [pc, #192]	; (8006504 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d009      	beq.n	800645a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a2f      	ldr	r2, [pc, #188]	; (8006508 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d004      	beq.n	800645a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a2d      	ldr	r2, [pc, #180]	; (800650c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d101      	bne.n	800645e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800645a:	2301      	movs	r3, #1
 800645c:	e000      	b.n	8006460 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800645e:	2300      	movs	r3, #0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d01a      	beq.n	800649a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	b2db      	uxtb	r3, r3
 800646a:	3b08      	subs	r3, #8
 800646c:	4a28      	ldr	r2, [pc, #160]	; (8006510 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800646e:	fba2 2303 	umull	r2, r3, r2, r3
 8006472:	091b      	lsrs	r3, r3, #4
 8006474:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	4b26      	ldr	r3, [pc, #152]	; (8006514 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800647a:	4413      	add	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	461a      	mov	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a24      	ldr	r2, [pc, #144]	; (8006518 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006488:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f003 031f 	and.w	r3, r3, #31
 8006490:	2201      	movs	r2, #1
 8006492:	409a      	lsls	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006498:	e024      	b.n	80064e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	3b10      	subs	r3, #16
 80064a2:	4a1e      	ldr	r2, [pc, #120]	; (800651c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80064a4:	fba2 2303 	umull	r2, r3, r2, r3
 80064a8:	091b      	lsrs	r3, r3, #4
 80064aa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	4a1c      	ldr	r2, [pc, #112]	; (8006520 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d806      	bhi.n	80064c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	4a1b      	ldr	r2, [pc, #108]	; (8006524 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d902      	bls.n	80064c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	3308      	adds	r3, #8
 80064c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4b18      	ldr	r3, [pc, #96]	; (8006528 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80064c6:	4413      	add	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	461a      	mov	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a16      	ldr	r2, [pc, #88]	; (800652c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80064d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f003 031f 	and.w	r3, r3, #31
 80064dc:	2201      	movs	r2, #1
 80064de:	409a      	lsls	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80064e4:	bf00      	nop
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	58025408 	.word	0x58025408
 80064f4:	5802541c 	.word	0x5802541c
 80064f8:	58025430 	.word	0x58025430
 80064fc:	58025444 	.word	0x58025444
 8006500:	58025458 	.word	0x58025458
 8006504:	5802546c 	.word	0x5802546c
 8006508:	58025480 	.word	0x58025480
 800650c:	58025494 	.word	0x58025494
 8006510:	cccccccd 	.word	0xcccccccd
 8006514:	16009600 	.word	0x16009600
 8006518:	58025880 	.word	0x58025880
 800651c:	aaaaaaab 	.word	0xaaaaaaab
 8006520:	400204b8 	.word	0x400204b8
 8006524:	4002040f 	.word	0x4002040f
 8006528:	10008200 	.word	0x10008200
 800652c:	40020880 	.word	0x40020880

08006530 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d04a      	beq.n	80065dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2b08      	cmp	r3, #8
 800654a:	d847      	bhi.n	80065dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a25      	ldr	r2, [pc, #148]	; (80065e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d022      	beq.n	800659c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a24      	ldr	r2, [pc, #144]	; (80065ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d01d      	beq.n	800659c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a22      	ldr	r2, [pc, #136]	; (80065f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d018      	beq.n	800659c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a21      	ldr	r2, [pc, #132]	; (80065f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d013      	beq.n	800659c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a1f      	ldr	r2, [pc, #124]	; (80065f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d00e      	beq.n	800659c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a1e      	ldr	r2, [pc, #120]	; (80065fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d009      	beq.n	800659c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a1c      	ldr	r2, [pc, #112]	; (8006600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d004      	beq.n	800659c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a1b      	ldr	r2, [pc, #108]	; (8006604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d101      	bne.n	80065a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800659c:	2301      	movs	r3, #1
 800659e:	e000      	b.n	80065a2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80065a0:	2300      	movs	r3, #0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	4b17      	ldr	r3, [pc, #92]	; (8006608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80065aa:	4413      	add	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	461a      	mov	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a15      	ldr	r2, [pc, #84]	; (800660c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80065b8:	671a      	str	r2, [r3, #112]	; 0x70
 80065ba:	e009      	b.n	80065d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	4b14      	ldr	r3, [pc, #80]	; (8006610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80065c0:	4413      	add	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	461a      	mov	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a11      	ldr	r2, [pc, #68]	; (8006614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80065ce:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3b01      	subs	r3, #1
 80065d4:	2201      	movs	r2, #1
 80065d6:	409a      	lsls	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80065dc:	bf00      	nop
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	58025408 	.word	0x58025408
 80065ec:	5802541c 	.word	0x5802541c
 80065f0:	58025430 	.word	0x58025430
 80065f4:	58025444 	.word	0x58025444
 80065f8:	58025458 	.word	0x58025458
 80065fc:	5802546c 	.word	0x5802546c
 8006600:	58025480 	.word	0x58025480
 8006604:	58025494 	.word	0x58025494
 8006608:	1600963f 	.word	0x1600963f
 800660c:	58025940 	.word	0x58025940
 8006610:	1000823f 	.word	0x1000823f
 8006614:	40020940 	.word	0x40020940

08006618 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006618:	b480      	push	{r7}
 800661a:	b089      	sub	sp, #36	; 0x24
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006622:	2300      	movs	r3, #0
 8006624:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006626:	4b89      	ldr	r3, [pc, #548]	; (800684c <HAL_GPIO_Init+0x234>)
 8006628:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800662a:	e194      	b.n	8006956 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	2101      	movs	r1, #1
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	fa01 f303 	lsl.w	r3, r1, r3
 8006638:	4013      	ands	r3, r2
 800663a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 8186 	beq.w	8006950 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d00b      	beq.n	8006664 <HAL_GPIO_Init+0x4c>
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	2b02      	cmp	r3, #2
 8006652:	d007      	beq.n	8006664 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006658:	2b11      	cmp	r3, #17
 800665a:	d003      	beq.n	8006664 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	2b12      	cmp	r3, #18
 8006662:	d130      	bne.n	80066c6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	2203      	movs	r2, #3
 8006670:	fa02 f303 	lsl.w	r3, r2, r3
 8006674:	43db      	mvns	r3, r3
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	4013      	ands	r3, r2
 800667a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	68da      	ldr	r2, [r3, #12]
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	fa02 f303 	lsl.w	r3, r2, r3
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	4313      	orrs	r3, r2
 800668c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800669a:	2201      	movs	r2, #1
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	fa02 f303 	lsl.w	r3, r2, r3
 80066a2:	43db      	mvns	r3, r3
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	4013      	ands	r3, r2
 80066a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	091b      	lsrs	r3, r3, #4
 80066b0:	f003 0201 	and.w	r2, r3, #1
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	4313      	orrs	r3, r2
 80066be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	69ba      	ldr	r2, [r7, #24]
 80066c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	005b      	lsls	r3, r3, #1
 80066d0:	2203      	movs	r2, #3
 80066d2:	fa02 f303 	lsl.w	r3, r2, r3
 80066d6:	43db      	mvns	r3, r3
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	4013      	ands	r3, r2
 80066dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	689a      	ldr	r2, [r3, #8]
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	005b      	lsls	r3, r3, #1
 80066e6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d003      	beq.n	8006706 <HAL_GPIO_Init+0xee>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	2b12      	cmp	r3, #18
 8006704:	d123      	bne.n	800674e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	08da      	lsrs	r2, r3, #3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	3208      	adds	r2, #8
 800670e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	220f      	movs	r2, #15
 800671e:	fa02 f303 	lsl.w	r3, r2, r3
 8006722:	43db      	mvns	r3, r3
 8006724:	69ba      	ldr	r2, [r7, #24]
 8006726:	4013      	ands	r3, r2
 8006728:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	691a      	ldr	r2, [r3, #16]
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	f003 0307 	and.w	r3, r3, #7
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	fa02 f303 	lsl.w	r3, r2, r3
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	4313      	orrs	r3, r2
 800673e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	08da      	lsrs	r2, r3, #3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3208      	adds	r2, #8
 8006748:	69b9      	ldr	r1, [r7, #24]
 800674a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	2203      	movs	r2, #3
 800675a:	fa02 f303 	lsl.w	r3, r2, r3
 800675e:	43db      	mvns	r3, r3
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	4013      	ands	r3, r2
 8006764:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f003 0203 	and.w	r2, r3, #3
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	005b      	lsls	r3, r3, #1
 8006772:	fa02 f303 	lsl.w	r3, r2, r3
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	4313      	orrs	r3, r2
 800677a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	69ba      	ldr	r2, [r7, #24]
 8006780:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 80e0 	beq.w	8006950 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006790:	4b2f      	ldr	r3, [pc, #188]	; (8006850 <HAL_GPIO_Init+0x238>)
 8006792:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006796:	4a2e      	ldr	r2, [pc, #184]	; (8006850 <HAL_GPIO_Init+0x238>)
 8006798:	f043 0302 	orr.w	r3, r3, #2
 800679c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80067a0:	4b2b      	ldr	r3, [pc, #172]	; (8006850 <HAL_GPIO_Init+0x238>)
 80067a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	60fb      	str	r3, [r7, #12]
 80067ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80067ae:	4a29      	ldr	r2, [pc, #164]	; (8006854 <HAL_GPIO_Init+0x23c>)
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	089b      	lsrs	r3, r3, #2
 80067b4:	3302      	adds	r3, #2
 80067b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	f003 0303 	and.w	r3, r3, #3
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	220f      	movs	r2, #15
 80067c6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ca:	43db      	mvns	r3, r3
 80067cc:	69ba      	ldr	r2, [r7, #24]
 80067ce:	4013      	ands	r3, r2
 80067d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a20      	ldr	r2, [pc, #128]	; (8006858 <HAL_GPIO_Init+0x240>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d052      	beq.n	8006880 <HAL_GPIO_Init+0x268>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a1f      	ldr	r2, [pc, #124]	; (800685c <HAL_GPIO_Init+0x244>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d031      	beq.n	8006846 <HAL_GPIO_Init+0x22e>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a1e      	ldr	r2, [pc, #120]	; (8006860 <HAL_GPIO_Init+0x248>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d02b      	beq.n	8006842 <HAL_GPIO_Init+0x22a>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a1d      	ldr	r2, [pc, #116]	; (8006864 <HAL_GPIO_Init+0x24c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d025      	beq.n	800683e <HAL_GPIO_Init+0x226>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a1c      	ldr	r2, [pc, #112]	; (8006868 <HAL_GPIO_Init+0x250>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d01f      	beq.n	800683a <HAL_GPIO_Init+0x222>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a1b      	ldr	r2, [pc, #108]	; (800686c <HAL_GPIO_Init+0x254>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d019      	beq.n	8006836 <HAL_GPIO_Init+0x21e>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a1a      	ldr	r2, [pc, #104]	; (8006870 <HAL_GPIO_Init+0x258>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d013      	beq.n	8006832 <HAL_GPIO_Init+0x21a>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a19      	ldr	r2, [pc, #100]	; (8006874 <HAL_GPIO_Init+0x25c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d00d      	beq.n	800682e <HAL_GPIO_Init+0x216>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a18      	ldr	r2, [pc, #96]	; (8006878 <HAL_GPIO_Init+0x260>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d007      	beq.n	800682a <HAL_GPIO_Init+0x212>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a17      	ldr	r2, [pc, #92]	; (800687c <HAL_GPIO_Init+0x264>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d101      	bne.n	8006826 <HAL_GPIO_Init+0x20e>
 8006822:	2309      	movs	r3, #9
 8006824:	e02d      	b.n	8006882 <HAL_GPIO_Init+0x26a>
 8006826:	230a      	movs	r3, #10
 8006828:	e02b      	b.n	8006882 <HAL_GPIO_Init+0x26a>
 800682a:	2308      	movs	r3, #8
 800682c:	e029      	b.n	8006882 <HAL_GPIO_Init+0x26a>
 800682e:	2307      	movs	r3, #7
 8006830:	e027      	b.n	8006882 <HAL_GPIO_Init+0x26a>
 8006832:	2306      	movs	r3, #6
 8006834:	e025      	b.n	8006882 <HAL_GPIO_Init+0x26a>
 8006836:	2305      	movs	r3, #5
 8006838:	e023      	b.n	8006882 <HAL_GPIO_Init+0x26a>
 800683a:	2304      	movs	r3, #4
 800683c:	e021      	b.n	8006882 <HAL_GPIO_Init+0x26a>
 800683e:	2303      	movs	r3, #3
 8006840:	e01f      	b.n	8006882 <HAL_GPIO_Init+0x26a>
 8006842:	2302      	movs	r3, #2
 8006844:	e01d      	b.n	8006882 <HAL_GPIO_Init+0x26a>
 8006846:	2301      	movs	r3, #1
 8006848:	e01b      	b.n	8006882 <HAL_GPIO_Init+0x26a>
 800684a:	bf00      	nop
 800684c:	58000080 	.word	0x58000080
 8006850:	58024400 	.word	0x58024400
 8006854:	58000400 	.word	0x58000400
 8006858:	58020000 	.word	0x58020000
 800685c:	58020400 	.word	0x58020400
 8006860:	58020800 	.word	0x58020800
 8006864:	58020c00 	.word	0x58020c00
 8006868:	58021000 	.word	0x58021000
 800686c:	58021400 	.word	0x58021400
 8006870:	58021800 	.word	0x58021800
 8006874:	58021c00 	.word	0x58021c00
 8006878:	58022000 	.word	0x58022000
 800687c:	58022400 	.word	0x58022400
 8006880:	2300      	movs	r3, #0
 8006882:	69fa      	ldr	r2, [r7, #28]
 8006884:	f002 0203 	and.w	r2, r2, #3
 8006888:	0092      	lsls	r2, r2, #2
 800688a:	4093      	lsls	r3, r2
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	4313      	orrs	r3, r2
 8006890:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006892:	4938      	ldr	r1, [pc, #224]	; (8006974 <HAL_GPIO_Init+0x35c>)
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	089b      	lsrs	r3, r3, #2
 8006898:	3302      	adds	r3, #2
 800689a:	69ba      	ldr	r2, [r7, #24]
 800689c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	43db      	mvns	r3, r3
 80068aa:	69ba      	ldr	r2, [r7, #24]
 80068ac:	4013      	ands	r3, r2
 80068ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80068bc:	69ba      	ldr	r2, [r7, #24]
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	69ba      	ldr	r2, [r7, #24]
 80068c8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	43db      	mvns	r3, r3
 80068d4:	69ba      	ldr	r2, [r7, #24]
 80068d6:	4013      	ands	r3, r2
 80068d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	69ba      	ldr	r2, [r7, #24]
 80068f2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80068f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	43db      	mvns	r3, r3
 8006900:	69ba      	ldr	r2, [r7, #24]
 8006902:	4013      	ands	r3, r2
 8006904:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006912:	69ba      	ldr	r2, [r7, #24]
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	4313      	orrs	r3, r2
 8006918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800691a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	43db      	mvns	r3, r3
 800692e:	69ba      	ldr	r2, [r7, #24]
 8006930:	4013      	ands	r3, r2
 8006932:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	4313      	orrs	r3, r2
 8006946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006948:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	3301      	adds	r3, #1
 8006954:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	fa22 f303 	lsr.w	r3, r2, r3
 8006960:	2b00      	cmp	r3, #0
 8006962:	f47f ae63 	bne.w	800662c <HAL_GPIO_Init+0x14>
  }
}
 8006966:	bf00      	nop
 8006968:	bf00      	nop
 800696a:	3724      	adds	r7, #36	; 0x24
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	58000400 	.word	0x58000400

08006978 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	460b      	mov	r3, r1
 8006982:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691a      	ldr	r2, [r3, #16]
 8006988:	887b      	ldrh	r3, [r7, #2]
 800698a:	4013      	ands	r3, r2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006990:	2301      	movs	r3, #1
 8006992:	73fb      	strb	r3, [r7, #15]
 8006994:	e001      	b.n	800699a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006996:	2300      	movs	r3, #0
 8006998:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800699a:	7bfb      	ldrb	r3, [r7, #15]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	460b      	mov	r3, r1
 80069b2:	807b      	strh	r3, [r7, #2]
 80069b4:	4613      	mov	r3, r2
 80069b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80069b8:	787b      	ldrb	r3, [r7, #1]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069be:	887a      	ldrh	r2, [r7, #2]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80069c4:	e003      	b.n	80069ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80069c6:	887b      	ldrh	r3, [r7, #2]
 80069c8:	041a      	lsls	r2, r3, #16
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	619a      	str	r2, [r3, #24]
}
 80069ce:	bf00      	nop
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b084      	sub	sp, #16
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e041      	b.n	8006a70 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80069f4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f245 5255 	movw	r2, #21845	; 0x5555
 80069fe:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	6852      	ldr	r2, [r2, #4]
 8006a08:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	6892      	ldr	r2, [r2, #8]
 8006a12:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006a14:	f7fc fec2 	bl	800379c <HAL_GetTick>
 8006a18:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006a1a:	e00f      	b.n	8006a3c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006a1c:	f7fc febe 	bl	800379c <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b30      	cmp	r3, #48	; 0x30
 8006a28:	d908      	bls.n	8006a3c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	f003 0307 	and.w	r3, r3, #7
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d001      	beq.n	8006a3c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e019      	b.n	8006a70 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	f003 0307 	and.w	r3, r3, #7
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1e8      	bne.n	8006a1c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	691a      	ldr	r2, [r3, #16]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d005      	beq.n	8006a64 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	68d2      	ldr	r2, [r2, #12]
 8006a60:	611a      	str	r2, [r3, #16]
 8006a62:	e004      	b.n	8006a6e <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006a6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006a88:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006aa0:	4b19      	ldr	r3, [pc, #100]	; (8006b08 <HAL_PWREx_ConfigSupply+0x70>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f003 0304 	and.w	r3, r3, #4
 8006aa8:	2b04      	cmp	r3, #4
 8006aaa:	d00a      	beq.n	8006ac2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006aac:	4b16      	ldr	r3, [pc, #88]	; (8006b08 <HAL_PWREx_ConfigSupply+0x70>)
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f003 0307 	and.w	r3, r3, #7
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d001      	beq.n	8006abe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e01f      	b.n	8006afe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	e01d      	b.n	8006afe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006ac2:	4b11      	ldr	r3, [pc, #68]	; (8006b08 <HAL_PWREx_ConfigSupply+0x70>)
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	f023 0207 	bic.w	r2, r3, #7
 8006aca:	490f      	ldr	r1, [pc, #60]	; (8006b08 <HAL_PWREx_ConfigSupply+0x70>)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006ad2:	f7fc fe63 	bl	800379c <HAL_GetTick>
 8006ad6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006ad8:	e009      	b.n	8006aee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006ada:	f7fc fe5f 	bl	800379c <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ae8:	d901      	bls.n	8006aee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e007      	b.n	8006afe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006aee:	4b06      	ldr	r3, [pc, #24]	; (8006b08 <HAL_PWREx_ConfigSupply+0x70>)
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006afa:	d1ee      	bne.n	8006ada <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	58024800 	.word	0x58024800

08006b0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08c      	sub	sp, #48	; 0x30
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e3ff      	b.n	800731e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 8087 	beq.w	8006c3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b2c:	4b99      	ldr	r3, [pc, #612]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b36:	4b97      	ldr	r3, [pc, #604]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3e:	2b10      	cmp	r3, #16
 8006b40:	d007      	beq.n	8006b52 <HAL_RCC_OscConfig+0x46>
 8006b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b44:	2b18      	cmp	r3, #24
 8006b46:	d110      	bne.n	8006b6a <HAL_RCC_OscConfig+0x5e>
 8006b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4a:	f003 0303 	and.w	r3, r3, #3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d10b      	bne.n	8006b6a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b52:	4b90      	ldr	r3, [pc, #576]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d06c      	beq.n	8006c38 <HAL_RCC_OscConfig+0x12c>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d168      	bne.n	8006c38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e3d9      	b.n	800731e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b72:	d106      	bne.n	8006b82 <HAL_RCC_OscConfig+0x76>
 8006b74:	4b87      	ldr	r3, [pc, #540]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a86      	ldr	r2, [pc, #536]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	e02e      	b.n	8006be0 <HAL_RCC_OscConfig+0xd4>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10c      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x98>
 8006b8a:	4b82      	ldr	r3, [pc, #520]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a81      	ldr	r2, [pc, #516]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	4b7f      	ldr	r3, [pc, #508]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a7e      	ldr	r2, [pc, #504]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006b9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ba0:	6013      	str	r3, [r2, #0]
 8006ba2:	e01d      	b.n	8006be0 <HAL_RCC_OscConfig+0xd4>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bac:	d10c      	bne.n	8006bc8 <HAL_RCC_OscConfig+0xbc>
 8006bae:	4b79      	ldr	r3, [pc, #484]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a78      	ldr	r2, [pc, #480]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bb8:	6013      	str	r3, [r2, #0]
 8006bba:	4b76      	ldr	r3, [pc, #472]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a75      	ldr	r2, [pc, #468]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bc4:	6013      	str	r3, [r2, #0]
 8006bc6:	e00b      	b.n	8006be0 <HAL_RCC_OscConfig+0xd4>
 8006bc8:	4b72      	ldr	r3, [pc, #456]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a71      	ldr	r2, [pc, #452]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bd2:	6013      	str	r3, [r2, #0]
 8006bd4:	4b6f      	ldr	r3, [pc, #444]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a6e      	ldr	r2, [pc, #440]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d013      	beq.n	8006c10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be8:	f7fc fdd8 	bl	800379c <HAL_GetTick>
 8006bec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006bee:	e008      	b.n	8006c02 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bf0:	f7fc fdd4 	bl	800379c <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	2b64      	cmp	r3, #100	; 0x64
 8006bfc:	d901      	bls.n	8006c02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e38d      	b.n	800731e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c02:	4b64      	ldr	r3, [pc, #400]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0f0      	beq.n	8006bf0 <HAL_RCC_OscConfig+0xe4>
 8006c0e:	e014      	b.n	8006c3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c10:	f7fc fdc4 	bl	800379c <HAL_GetTick>
 8006c14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c16:	e008      	b.n	8006c2a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c18:	f7fc fdc0 	bl	800379c <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b64      	cmp	r3, #100	; 0x64
 8006c24:	d901      	bls.n	8006c2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e379      	b.n	800731e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c2a:	4b5a      	ldr	r3, [pc, #360]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1f0      	bne.n	8006c18 <HAL_RCC_OscConfig+0x10c>
 8006c36:	e000      	b.n	8006c3a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 80ae 	beq.w	8006da4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c48:	4b52      	ldr	r3, [pc, #328]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c52:	4b50      	ldr	r3, [pc, #320]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c56:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d007      	beq.n	8006c6e <HAL_RCC_OscConfig+0x162>
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	2b18      	cmp	r3, #24
 8006c62:	d13a      	bne.n	8006cda <HAL_RCC_OscConfig+0x1ce>
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	f003 0303 	and.w	r3, r3, #3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d135      	bne.n	8006cda <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c6e:	4b49      	ldr	r3, [pc, #292]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0304 	and.w	r3, r3, #4
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d005      	beq.n	8006c86 <HAL_RCC_OscConfig+0x17a>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e34b      	b.n	800731e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c86:	f7fc fd95 	bl	80037b4 <HAL_GetREVID>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d817      	bhi.n	8006cc4 <HAL_RCC_OscConfig+0x1b8>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	2b40      	cmp	r3, #64	; 0x40
 8006c9a:	d108      	bne.n	8006cae <HAL_RCC_OscConfig+0x1a2>
 8006c9c:	4b3d      	ldr	r3, [pc, #244]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006ca4:	4a3b      	ldr	r2, [pc, #236]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006caa:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cac:	e07a      	b.n	8006da4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cae:	4b39      	ldr	r3, [pc, #228]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	031b      	lsls	r3, r3, #12
 8006cbc:	4935      	ldr	r1, [pc, #212]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cc2:	e06f      	b.n	8006da4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cc4:	4b33      	ldr	r3, [pc, #204]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	061b      	lsls	r3, r3, #24
 8006cd2:	4930      	ldr	r1, [pc, #192]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cd8:	e064      	b.n	8006da4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d045      	beq.n	8006d6e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ce2:	4b2c      	ldr	r3, [pc, #176]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f023 0219 	bic.w	r2, r3, #25
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	4929      	ldr	r1, [pc, #164]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf4:	f7fc fd52 	bl	800379c <HAL_GetTick>
 8006cf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006cfa:	e008      	b.n	8006d0e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cfc:	f7fc fd4e 	bl	800379c <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d901      	bls.n	8006d0e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e307      	b.n	800731e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d0e:	4b21      	ldr	r3, [pc, #132]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0304 	and.w	r3, r3, #4
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d0f0      	beq.n	8006cfc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d1a:	f7fc fd4b 	bl	80037b4 <HAL_GetREVID>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	f241 0203 	movw	r2, #4099	; 0x1003
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d817      	bhi.n	8006d58 <HAL_RCC_OscConfig+0x24c>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	2b40      	cmp	r3, #64	; 0x40
 8006d2e:	d108      	bne.n	8006d42 <HAL_RCC_OscConfig+0x236>
 8006d30:	4b18      	ldr	r3, [pc, #96]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006d38:	4a16      	ldr	r2, [pc, #88]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d3e:	6053      	str	r3, [r2, #4]
 8006d40:	e030      	b.n	8006da4 <HAL_RCC_OscConfig+0x298>
 8006d42:	4b14      	ldr	r3, [pc, #80]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	031b      	lsls	r3, r3, #12
 8006d50:	4910      	ldr	r1, [pc, #64]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	604b      	str	r3, [r1, #4]
 8006d56:	e025      	b.n	8006da4 <HAL_RCC_OscConfig+0x298>
 8006d58:	4b0e      	ldr	r3, [pc, #56]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	061b      	lsls	r3, r3, #24
 8006d66:	490b      	ldr	r1, [pc, #44]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	604b      	str	r3, [r1, #4]
 8006d6c:	e01a      	b.n	8006da4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d6e:	4b09      	ldr	r3, [pc, #36]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a08      	ldr	r2, [pc, #32]	; (8006d94 <HAL_RCC_OscConfig+0x288>)
 8006d74:	f023 0301 	bic.w	r3, r3, #1
 8006d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d7a:	f7fc fd0f 	bl	800379c <HAL_GetTick>
 8006d7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d80:	e00a      	b.n	8006d98 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d82:	f7fc fd0b 	bl	800379c <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d903      	bls.n	8006d98 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e2c4      	b.n	800731e <HAL_RCC_OscConfig+0x812>
 8006d94:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d98:	4ba4      	ldr	r3, [pc, #656]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1ee      	bne.n	8006d82 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0310 	and.w	r3, r3, #16
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 80a9 	beq.w	8006f04 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006db2:	4b9e      	ldr	r3, [pc, #632]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006dbc:	4b9b      	ldr	r3, [pc, #620]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	2b08      	cmp	r3, #8
 8006dc6:	d007      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x2cc>
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	2b18      	cmp	r3, #24
 8006dcc:	d13a      	bne.n	8006e44 <HAL_RCC_OscConfig+0x338>
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f003 0303 	and.w	r3, r3, #3
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d135      	bne.n	8006e44 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006dd8:	4b94      	ldr	r3, [pc, #592]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d005      	beq.n	8006df0 <HAL_RCC_OscConfig+0x2e4>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	69db      	ldr	r3, [r3, #28]
 8006de8:	2b80      	cmp	r3, #128	; 0x80
 8006dea:	d001      	beq.n	8006df0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e296      	b.n	800731e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006df0:	f7fc fce0 	bl	80037b4 <HAL_GetREVID>
 8006df4:	4603      	mov	r3, r0
 8006df6:	f241 0203 	movw	r2, #4099	; 0x1003
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d817      	bhi.n	8006e2e <HAL_RCC_OscConfig+0x322>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	d108      	bne.n	8006e18 <HAL_RCC_OscConfig+0x30c>
 8006e06:	4b89      	ldr	r3, [pc, #548]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006e0e:	4a87      	ldr	r2, [pc, #540]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006e10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e14:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e16:	e075      	b.n	8006f04 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e18:	4b84      	ldr	r3, [pc, #528]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	069b      	lsls	r3, r3, #26
 8006e26:	4981      	ldr	r1, [pc, #516]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e2c:	e06a      	b.n	8006f04 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e2e:	4b7f      	ldr	r3, [pc, #508]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	061b      	lsls	r3, r3, #24
 8006e3c:	497b      	ldr	r1, [pc, #492]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e42:	e05f      	b.n	8006f04 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	69db      	ldr	r3, [r3, #28]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d042      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006e4c:	4b77      	ldr	r3, [pc, #476]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a76      	ldr	r2, [pc, #472]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e58:	f7fc fca0 	bl	800379c <HAL_GetTick>
 8006e5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e5e:	e008      	b.n	8006e72 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006e60:	f7fc fc9c 	bl	800379c <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d901      	bls.n	8006e72 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e255      	b.n	800731e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e72:	4b6e      	ldr	r3, [pc, #440]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d0f0      	beq.n	8006e60 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e7e:	f7fc fc99 	bl	80037b4 <HAL_GetREVID>
 8006e82:	4603      	mov	r3, r0
 8006e84:	f241 0203 	movw	r2, #4099	; 0x1003
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d817      	bhi.n	8006ebc <HAL_RCC_OscConfig+0x3b0>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a1b      	ldr	r3, [r3, #32]
 8006e90:	2b20      	cmp	r3, #32
 8006e92:	d108      	bne.n	8006ea6 <HAL_RCC_OscConfig+0x39a>
 8006e94:	4b65      	ldr	r3, [pc, #404]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006e9c:	4a63      	ldr	r2, [pc, #396]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006e9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ea2:	6053      	str	r3, [r2, #4]
 8006ea4:	e02e      	b.n	8006f04 <HAL_RCC_OscConfig+0x3f8>
 8006ea6:	4b61      	ldr	r3, [pc, #388]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	069b      	lsls	r3, r3, #26
 8006eb4:	495d      	ldr	r1, [pc, #372]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	604b      	str	r3, [r1, #4]
 8006eba:	e023      	b.n	8006f04 <HAL_RCC_OscConfig+0x3f8>
 8006ebc:	4b5b      	ldr	r3, [pc, #364]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
 8006ec8:	061b      	lsls	r3, r3, #24
 8006eca:	4958      	ldr	r1, [pc, #352]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	60cb      	str	r3, [r1, #12]
 8006ed0:	e018      	b.n	8006f04 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006ed2:	4b56      	ldr	r3, [pc, #344]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a55      	ldr	r2, [pc, #340]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006ed8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ede:	f7fc fc5d 	bl	800379c <HAL_GetTick>
 8006ee2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ee4:	e008      	b.n	8006ef8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006ee6:	f7fc fc59 	bl	800379c <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d901      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e212      	b.n	800731e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ef8:	4b4c      	ldr	r3, [pc, #304]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1f0      	bne.n	8006ee6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0308 	and.w	r3, r3, #8
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d036      	beq.n	8006f7e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	695b      	ldr	r3, [r3, #20]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d019      	beq.n	8006f4c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f18:	4b44      	ldr	r3, [pc, #272]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f1c:	4a43      	ldr	r2, [pc, #268]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006f1e:	f043 0301 	orr.w	r3, r3, #1
 8006f22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f24:	f7fc fc3a 	bl	800379c <HAL_GetTick>
 8006f28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f2a:	e008      	b.n	8006f3e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f2c:	f7fc fc36 	bl	800379c <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d901      	bls.n	8006f3e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e1ef      	b.n	800731e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f3e:	4b3b      	ldr	r3, [pc, #236]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d0f0      	beq.n	8006f2c <HAL_RCC_OscConfig+0x420>
 8006f4a:	e018      	b.n	8006f7e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f4c:	4b37      	ldr	r3, [pc, #220]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f50:	4a36      	ldr	r2, [pc, #216]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006f52:	f023 0301 	bic.w	r3, r3, #1
 8006f56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f58:	f7fc fc20 	bl	800379c <HAL_GetTick>
 8006f5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f60:	f7fc fc1c 	bl	800379c <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e1d5      	b.n	800731e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f72:	4b2e      	ldr	r3, [pc, #184]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1f0      	bne.n	8006f60 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0320 	and.w	r3, r3, #32
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d036      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d019      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f92:	4b26      	ldr	r3, [pc, #152]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a25      	ldr	r2, [pc, #148]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006f98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f9e:	f7fc fbfd 	bl	800379c <HAL_GetTick>
 8006fa2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fa4:	e008      	b.n	8006fb8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006fa6:	f7fc fbf9 	bl	800379c <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d901      	bls.n	8006fb8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e1b2      	b.n	800731e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fb8:	4b1c      	ldr	r3, [pc, #112]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d0f0      	beq.n	8006fa6 <HAL_RCC_OscConfig+0x49a>
 8006fc4:	e018      	b.n	8006ff8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006fc6:	4b19      	ldr	r3, [pc, #100]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a18      	ldr	r2, [pc, #96]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006fcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fd0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006fd2:	f7fc fbe3 	bl	800379c <HAL_GetTick>
 8006fd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006fd8:	e008      	b.n	8006fec <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006fda:	f7fc fbdf 	bl	800379c <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d901      	bls.n	8006fec <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e198      	b.n	800731e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006fec:	4b0f      	ldr	r3, [pc, #60]	; (800702c <HAL_RCC_OscConfig+0x520>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1f0      	bne.n	8006fda <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b00      	cmp	r3, #0
 8007002:	f000 8085 	beq.w	8007110 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007006:	4b0a      	ldr	r3, [pc, #40]	; (8007030 <HAL_RCC_OscConfig+0x524>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a09      	ldr	r2, [pc, #36]	; (8007030 <HAL_RCC_OscConfig+0x524>)
 800700c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007010:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007012:	f7fc fbc3 	bl	800379c <HAL_GetTick>
 8007016:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007018:	e00c      	b.n	8007034 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800701a:	f7fc fbbf 	bl	800379c <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	2b64      	cmp	r3, #100	; 0x64
 8007026:	d905      	bls.n	8007034 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e178      	b.n	800731e <HAL_RCC_OscConfig+0x812>
 800702c:	58024400 	.word	0x58024400
 8007030:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007034:	4b96      	ldr	r3, [pc, #600]	; (8007290 <HAL_RCC_OscConfig+0x784>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800703c:	2b00      	cmp	r3, #0
 800703e:	d0ec      	beq.n	800701a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d106      	bne.n	8007056 <HAL_RCC_OscConfig+0x54a>
 8007048:	4b92      	ldr	r3, [pc, #584]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 800704a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800704c:	4a91      	ldr	r2, [pc, #580]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 800704e:	f043 0301 	orr.w	r3, r3, #1
 8007052:	6713      	str	r3, [r2, #112]	; 0x70
 8007054:	e02d      	b.n	80070b2 <HAL_RCC_OscConfig+0x5a6>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10c      	bne.n	8007078 <HAL_RCC_OscConfig+0x56c>
 800705e:	4b8d      	ldr	r3, [pc, #564]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 8007060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007062:	4a8c      	ldr	r2, [pc, #560]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 8007064:	f023 0301 	bic.w	r3, r3, #1
 8007068:	6713      	str	r3, [r2, #112]	; 0x70
 800706a:	4b8a      	ldr	r3, [pc, #552]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 800706c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800706e:	4a89      	ldr	r2, [pc, #548]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 8007070:	f023 0304 	bic.w	r3, r3, #4
 8007074:	6713      	str	r3, [r2, #112]	; 0x70
 8007076:	e01c      	b.n	80070b2 <HAL_RCC_OscConfig+0x5a6>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	2b05      	cmp	r3, #5
 800707e:	d10c      	bne.n	800709a <HAL_RCC_OscConfig+0x58e>
 8007080:	4b84      	ldr	r3, [pc, #528]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 8007082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007084:	4a83      	ldr	r2, [pc, #524]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 8007086:	f043 0304 	orr.w	r3, r3, #4
 800708a:	6713      	str	r3, [r2, #112]	; 0x70
 800708c:	4b81      	ldr	r3, [pc, #516]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 800708e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007090:	4a80      	ldr	r2, [pc, #512]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 8007092:	f043 0301 	orr.w	r3, r3, #1
 8007096:	6713      	str	r3, [r2, #112]	; 0x70
 8007098:	e00b      	b.n	80070b2 <HAL_RCC_OscConfig+0x5a6>
 800709a:	4b7e      	ldr	r3, [pc, #504]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 800709c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709e:	4a7d      	ldr	r2, [pc, #500]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 80070a0:	f023 0301 	bic.w	r3, r3, #1
 80070a4:	6713      	str	r3, [r2, #112]	; 0x70
 80070a6:	4b7b      	ldr	r3, [pc, #492]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 80070a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070aa:	4a7a      	ldr	r2, [pc, #488]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 80070ac:	f023 0304 	bic.w	r3, r3, #4
 80070b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d015      	beq.n	80070e6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ba:	f7fc fb6f 	bl	800379c <HAL_GetTick>
 80070be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070c0:	e00a      	b.n	80070d8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070c2:	f7fc fb6b 	bl	800379c <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d901      	bls.n	80070d8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e122      	b.n	800731e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070d8:	4b6e      	ldr	r3, [pc, #440]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 80070da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070dc:	f003 0302 	and.w	r3, r3, #2
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d0ee      	beq.n	80070c2 <HAL_RCC_OscConfig+0x5b6>
 80070e4:	e014      	b.n	8007110 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070e6:	f7fc fb59 	bl	800379c <HAL_GetTick>
 80070ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80070ec:	e00a      	b.n	8007104 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070ee:	f7fc fb55 	bl	800379c <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d901      	bls.n	8007104 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e10c      	b.n	800731e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007104:	4b63      	ldr	r3, [pc, #396]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 8007106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007108:	f003 0302 	and.w	r3, r3, #2
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1ee      	bne.n	80070ee <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 8101 	beq.w	800731c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800711a:	4b5e      	ldr	r3, [pc, #376]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007122:	2b18      	cmp	r3, #24
 8007124:	f000 80bc 	beq.w	80072a0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	2b02      	cmp	r3, #2
 800712e:	f040 8095 	bne.w	800725c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007132:	4b58      	ldr	r3, [pc, #352]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a57      	ldr	r2, [pc, #348]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 8007138:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800713c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800713e:	f7fc fb2d 	bl	800379c <HAL_GetTick>
 8007142:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007144:	e008      	b.n	8007158 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007146:	f7fc fb29 	bl	800379c <HAL_GetTick>
 800714a:	4602      	mov	r2, r0
 800714c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	2b02      	cmp	r3, #2
 8007152:	d901      	bls.n	8007158 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e0e2      	b.n	800731e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007158:	4b4e      	ldr	r3, [pc, #312]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1f0      	bne.n	8007146 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007164:	4b4b      	ldr	r3, [pc, #300]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 8007166:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007168:	4b4b      	ldr	r3, [pc, #300]	; (8007298 <HAL_RCC_OscConfig+0x78c>)
 800716a:	4013      	ands	r3, r2
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007174:	0112      	lsls	r2, r2, #4
 8007176:	430a      	orrs	r2, r1
 8007178:	4946      	ldr	r1, [pc, #280]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 800717a:	4313      	orrs	r3, r2
 800717c:	628b      	str	r3, [r1, #40]	; 0x28
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007182:	3b01      	subs	r3, #1
 8007184:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718c:	3b01      	subs	r3, #1
 800718e:	025b      	lsls	r3, r3, #9
 8007190:	b29b      	uxth	r3, r3
 8007192:	431a      	orrs	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007198:	3b01      	subs	r3, #1
 800719a:	041b      	lsls	r3, r3, #16
 800719c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80071a0:	431a      	orrs	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a6:	3b01      	subs	r3, #1
 80071a8:	061b      	lsls	r3, r3, #24
 80071aa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80071ae:	4939      	ldr	r1, [pc, #228]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80071b4:	4b37      	ldr	r3, [pc, #220]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	4a36      	ldr	r2, [pc, #216]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 80071ba:	f023 0301 	bic.w	r3, r3, #1
 80071be:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80071c0:	4b34      	ldr	r3, [pc, #208]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 80071c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071c4:	4b35      	ldr	r3, [pc, #212]	; (800729c <HAL_RCC_OscConfig+0x790>)
 80071c6:	4013      	ands	r3, r2
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80071cc:	00d2      	lsls	r2, r2, #3
 80071ce:	4931      	ldr	r1, [pc, #196]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 80071d0:	4313      	orrs	r3, r2
 80071d2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80071d4:	4b2f      	ldr	r3, [pc, #188]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 80071d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d8:	f023 020c 	bic.w	r2, r3, #12
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e0:	492c      	ldr	r1, [pc, #176]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80071e6:	4b2b      	ldr	r3, [pc, #172]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 80071e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ea:	f023 0202 	bic.w	r2, r3, #2
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f2:	4928      	ldr	r1, [pc, #160]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80071f8:	4b26      	ldr	r3, [pc, #152]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 80071fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fc:	4a25      	ldr	r2, [pc, #148]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 80071fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007202:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007204:	4b23      	ldr	r3, [pc, #140]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 8007206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007208:	4a22      	ldr	r2, [pc, #136]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 800720a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800720e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007210:	4b20      	ldr	r3, [pc, #128]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 8007212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007214:	4a1f      	ldr	r2, [pc, #124]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 8007216:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800721a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800721c:	4b1d      	ldr	r3, [pc, #116]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 800721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007220:	4a1c      	ldr	r2, [pc, #112]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 8007222:	f043 0301 	orr.w	r3, r3, #1
 8007226:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007228:	4b1a      	ldr	r3, [pc, #104]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a19      	ldr	r2, [pc, #100]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 800722e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007234:	f7fc fab2 	bl	800379c <HAL_GetTick>
 8007238:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800723a:	e008      	b.n	800724e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800723c:	f7fc faae 	bl	800379c <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	2b02      	cmp	r3, #2
 8007248:	d901      	bls.n	800724e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	e067      	b.n	800731e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800724e:	4b11      	ldr	r3, [pc, #68]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d0f0      	beq.n	800723c <HAL_RCC_OscConfig+0x730>
 800725a:	e05f      	b.n	800731c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800725c:	4b0d      	ldr	r3, [pc, #52]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a0c      	ldr	r2, [pc, #48]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 8007262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007268:	f7fc fa98 	bl	800379c <HAL_GetTick>
 800726c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800726e:	e008      	b.n	8007282 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007270:	f7fc fa94 	bl	800379c <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b02      	cmp	r3, #2
 800727c:	d901      	bls.n	8007282 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e04d      	b.n	800731e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007282:	4b04      	ldr	r3, [pc, #16]	; (8007294 <HAL_RCC_OscConfig+0x788>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1f0      	bne.n	8007270 <HAL_RCC_OscConfig+0x764>
 800728e:	e045      	b.n	800731c <HAL_RCC_OscConfig+0x810>
 8007290:	58024800 	.word	0x58024800
 8007294:	58024400 	.word	0x58024400
 8007298:	fffffc0c 	.word	0xfffffc0c
 800729c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80072a0:	4b21      	ldr	r3, [pc, #132]	; (8007328 <HAL_RCC_OscConfig+0x81c>)
 80072a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80072a6:	4b20      	ldr	r3, [pc, #128]	; (8007328 <HAL_RCC_OscConfig+0x81c>)
 80072a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072aa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d031      	beq.n	8007318 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	f003 0203 	and.w	r2, r3, #3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072be:	429a      	cmp	r2, r3
 80072c0:	d12a      	bne.n	8007318 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	091b      	lsrs	r3, r3, #4
 80072c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d122      	bne.n	8007318 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80072de:	429a      	cmp	r2, r3
 80072e0:	d11a      	bne.n	8007318 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	0a5b      	lsrs	r3, r3, #9
 80072e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ee:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d111      	bne.n	8007318 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	0c1b      	lsrs	r3, r3, #16
 80072f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007300:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007302:	429a      	cmp	r2, r3
 8007304:	d108      	bne.n	8007318 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	0e1b      	lsrs	r3, r3, #24
 800730a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007312:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007314:	429a      	cmp	r2, r3
 8007316:	d001      	beq.n	800731c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e000      	b.n	800731e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3730      	adds	r7, #48	; 0x30
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	58024400 	.word	0x58024400

0800732c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e19c      	b.n	800767a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007340:	4b8a      	ldr	r3, [pc, #552]	; (800756c <HAL_RCC_ClockConfig+0x240>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 030f 	and.w	r3, r3, #15
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	429a      	cmp	r2, r3
 800734c:	d910      	bls.n	8007370 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800734e:	4b87      	ldr	r3, [pc, #540]	; (800756c <HAL_RCC_ClockConfig+0x240>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f023 020f 	bic.w	r2, r3, #15
 8007356:	4985      	ldr	r1, [pc, #532]	; (800756c <HAL_RCC_ClockConfig+0x240>)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	4313      	orrs	r3, r2
 800735c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800735e:	4b83      	ldr	r3, [pc, #524]	; (800756c <HAL_RCC_ClockConfig+0x240>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 030f 	and.w	r3, r3, #15
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	429a      	cmp	r2, r3
 800736a:	d001      	beq.n	8007370 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e184      	b.n	800767a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0304 	and.w	r3, r3, #4
 8007378:	2b00      	cmp	r3, #0
 800737a:	d010      	beq.n	800739e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	691a      	ldr	r2, [r3, #16]
 8007380:	4b7b      	ldr	r3, [pc, #492]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007388:	429a      	cmp	r2, r3
 800738a:	d908      	bls.n	800739e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800738c:	4b78      	ldr	r3, [pc, #480]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	4975      	ldr	r1, [pc, #468]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 800739a:	4313      	orrs	r3, r2
 800739c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0308 	and.w	r3, r3, #8
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d010      	beq.n	80073cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	695a      	ldr	r2, [r3, #20]
 80073ae:	4b70      	ldr	r3, [pc, #448]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 80073b0:	69db      	ldr	r3, [r3, #28]
 80073b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d908      	bls.n	80073cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80073ba:	4b6d      	ldr	r3, [pc, #436]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	496a      	ldr	r1, [pc, #424]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0310 	and.w	r3, r3, #16
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d010      	beq.n	80073fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	699a      	ldr	r2, [r3, #24]
 80073dc:	4b64      	ldr	r3, [pc, #400]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d908      	bls.n	80073fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80073e8:	4b61      	ldr	r3, [pc, #388]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 80073ea:	69db      	ldr	r3, [r3, #28]
 80073ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	495e      	ldr	r1, [pc, #376]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0320 	and.w	r3, r3, #32
 8007402:	2b00      	cmp	r3, #0
 8007404:	d010      	beq.n	8007428 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	69da      	ldr	r2, [r3, #28]
 800740a:	4b59      	ldr	r3, [pc, #356]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007412:	429a      	cmp	r2, r3
 8007414:	d908      	bls.n	8007428 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007416:	4b56      	ldr	r3, [pc, #344]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	4953      	ldr	r1, [pc, #332]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 8007424:	4313      	orrs	r3, r2
 8007426:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b00      	cmp	r3, #0
 8007432:	d010      	beq.n	8007456 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68da      	ldr	r2, [r3, #12]
 8007438:	4b4d      	ldr	r3, [pc, #308]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	f003 030f 	and.w	r3, r3, #15
 8007440:	429a      	cmp	r2, r3
 8007442:	d908      	bls.n	8007456 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007444:	4b4a      	ldr	r3, [pc, #296]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	f023 020f 	bic.w	r2, r3, #15
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	4947      	ldr	r1, [pc, #284]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 8007452:	4313      	orrs	r3, r2
 8007454:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	d055      	beq.n	800750e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007462:	4b43      	ldr	r3, [pc, #268]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	4940      	ldr	r1, [pc, #256]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 8007470:	4313      	orrs	r3, r2
 8007472:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	2b02      	cmp	r3, #2
 800747a:	d107      	bne.n	800748c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800747c:	4b3c      	ldr	r3, [pc, #240]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007484:	2b00      	cmp	r3, #0
 8007486:	d121      	bne.n	80074cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e0f6      	b.n	800767a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	2b03      	cmp	r3, #3
 8007492:	d107      	bne.n	80074a4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007494:	4b36      	ldr	r3, [pc, #216]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d115      	bne.n	80074cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e0ea      	b.n	800767a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d107      	bne.n	80074bc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80074ac:	4b30      	ldr	r3, [pc, #192]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d109      	bne.n	80074cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e0de      	b.n	800767a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074bc:	4b2c      	ldr	r3, [pc, #176]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0304 	and.w	r3, r3, #4
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e0d6      	b.n	800767a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80074cc:	4b28      	ldr	r3, [pc, #160]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	f023 0207 	bic.w	r2, r3, #7
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	4925      	ldr	r1, [pc, #148]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074de:	f7fc f95d 	bl	800379c <HAL_GetTick>
 80074e2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074e4:	e00a      	b.n	80074fc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074e6:	f7fc f959 	bl	800379c <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d901      	bls.n	80074fc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e0be      	b.n	800767a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074fc:	4b1c      	ldr	r3, [pc, #112]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	00db      	lsls	r3, r3, #3
 800750a:	429a      	cmp	r2, r3
 800750c:	d1eb      	bne.n	80074e6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0302 	and.w	r3, r3, #2
 8007516:	2b00      	cmp	r3, #0
 8007518:	d010      	beq.n	800753c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68da      	ldr	r2, [r3, #12]
 800751e:	4b14      	ldr	r3, [pc, #80]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	f003 030f 	and.w	r3, r3, #15
 8007526:	429a      	cmp	r2, r3
 8007528:	d208      	bcs.n	800753c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800752a:	4b11      	ldr	r3, [pc, #68]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	f023 020f 	bic.w	r2, r3, #15
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	490e      	ldr	r1, [pc, #56]	; (8007570 <HAL_RCC_ClockConfig+0x244>)
 8007538:	4313      	orrs	r3, r2
 800753a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800753c:	4b0b      	ldr	r3, [pc, #44]	; (800756c <HAL_RCC_ClockConfig+0x240>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 030f 	and.w	r3, r3, #15
 8007544:	683a      	ldr	r2, [r7, #0]
 8007546:	429a      	cmp	r2, r3
 8007548:	d214      	bcs.n	8007574 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800754a:	4b08      	ldr	r3, [pc, #32]	; (800756c <HAL_RCC_ClockConfig+0x240>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f023 020f 	bic.w	r2, r3, #15
 8007552:	4906      	ldr	r1, [pc, #24]	; (800756c <HAL_RCC_ClockConfig+0x240>)
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	4313      	orrs	r3, r2
 8007558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800755a:	4b04      	ldr	r3, [pc, #16]	; (800756c <HAL_RCC_ClockConfig+0x240>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 030f 	and.w	r3, r3, #15
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	429a      	cmp	r2, r3
 8007566:	d005      	beq.n	8007574 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e086      	b.n	800767a <HAL_RCC_ClockConfig+0x34e>
 800756c:	52002000 	.word	0x52002000
 8007570:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0304 	and.w	r3, r3, #4
 800757c:	2b00      	cmp	r3, #0
 800757e:	d010      	beq.n	80075a2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	691a      	ldr	r2, [r3, #16]
 8007584:	4b3f      	ldr	r3, [pc, #252]	; (8007684 <HAL_RCC_ClockConfig+0x358>)
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800758c:	429a      	cmp	r2, r3
 800758e:	d208      	bcs.n	80075a2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007590:	4b3c      	ldr	r3, [pc, #240]	; (8007684 <HAL_RCC_ClockConfig+0x358>)
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	4939      	ldr	r1, [pc, #228]	; (8007684 <HAL_RCC_ClockConfig+0x358>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0308 	and.w	r3, r3, #8
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d010      	beq.n	80075d0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	695a      	ldr	r2, [r3, #20]
 80075b2:	4b34      	ldr	r3, [pc, #208]	; (8007684 <HAL_RCC_ClockConfig+0x358>)
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d208      	bcs.n	80075d0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80075be:	4b31      	ldr	r3, [pc, #196]	; (8007684 <HAL_RCC_ClockConfig+0x358>)
 80075c0:	69db      	ldr	r3, [r3, #28]
 80075c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	492e      	ldr	r1, [pc, #184]	; (8007684 <HAL_RCC_ClockConfig+0x358>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0310 	and.w	r3, r3, #16
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d010      	beq.n	80075fe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	699a      	ldr	r2, [r3, #24]
 80075e0:	4b28      	ldr	r3, [pc, #160]	; (8007684 <HAL_RCC_ClockConfig+0x358>)
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d208      	bcs.n	80075fe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80075ec:	4b25      	ldr	r3, [pc, #148]	; (8007684 <HAL_RCC_ClockConfig+0x358>)
 80075ee:	69db      	ldr	r3, [r3, #28]
 80075f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	4922      	ldr	r1, [pc, #136]	; (8007684 <HAL_RCC_ClockConfig+0x358>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0320 	and.w	r3, r3, #32
 8007606:	2b00      	cmp	r3, #0
 8007608:	d010      	beq.n	800762c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	69da      	ldr	r2, [r3, #28]
 800760e:	4b1d      	ldr	r3, [pc, #116]	; (8007684 <HAL_RCC_ClockConfig+0x358>)
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007616:	429a      	cmp	r2, r3
 8007618:	d208      	bcs.n	800762c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800761a:	4b1a      	ldr	r3, [pc, #104]	; (8007684 <HAL_RCC_ClockConfig+0x358>)
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	4917      	ldr	r1, [pc, #92]	; (8007684 <HAL_RCC_ClockConfig+0x358>)
 8007628:	4313      	orrs	r3, r2
 800762a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800762c:	f000 f834 	bl	8007698 <HAL_RCC_GetSysClockFreq>
 8007630:	4602      	mov	r2, r0
 8007632:	4b14      	ldr	r3, [pc, #80]	; (8007684 <HAL_RCC_ClockConfig+0x358>)
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	0a1b      	lsrs	r3, r3, #8
 8007638:	f003 030f 	and.w	r3, r3, #15
 800763c:	4912      	ldr	r1, [pc, #72]	; (8007688 <HAL_RCC_ClockConfig+0x35c>)
 800763e:	5ccb      	ldrb	r3, [r1, r3]
 8007640:	f003 031f 	and.w	r3, r3, #31
 8007644:	fa22 f303 	lsr.w	r3, r2, r3
 8007648:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800764a:	4b0e      	ldr	r3, [pc, #56]	; (8007684 <HAL_RCC_ClockConfig+0x358>)
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	f003 030f 	and.w	r3, r3, #15
 8007652:	4a0d      	ldr	r2, [pc, #52]	; (8007688 <HAL_RCC_ClockConfig+0x35c>)
 8007654:	5cd3      	ldrb	r3, [r2, r3]
 8007656:	f003 031f 	and.w	r3, r3, #31
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	fa22 f303 	lsr.w	r3, r2, r3
 8007660:	4a0a      	ldr	r2, [pc, #40]	; (800768c <HAL_RCC_ClockConfig+0x360>)
 8007662:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007664:	4a0a      	ldr	r2, [pc, #40]	; (8007690 <HAL_RCC_ClockConfig+0x364>)
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800766a:	4b0a      	ldr	r3, [pc, #40]	; (8007694 <HAL_RCC_ClockConfig+0x368>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4618      	mov	r0, r3
 8007670:	f7fb fa8c 	bl	8002b8c <HAL_InitTick>
 8007674:	4603      	mov	r3, r0
 8007676:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007678:	7bfb      	ldrb	r3, [r7, #15]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3718      	adds	r7, #24
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	58024400 	.word	0x58024400
 8007688:	0800da58 	.word	0x0800da58
 800768c:	20000004 	.word	0x20000004
 8007690:	20000000 	.word	0x20000000
 8007694:	20000008 	.word	0x20000008

08007698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007698:	b480      	push	{r7}
 800769a:	b089      	sub	sp, #36	; 0x24
 800769c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800769e:	4bb3      	ldr	r3, [pc, #716]	; (800796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076a6:	2b18      	cmp	r3, #24
 80076a8:	f200 8155 	bhi.w	8007956 <HAL_RCC_GetSysClockFreq+0x2be>
 80076ac:	a201      	add	r2, pc, #4	; (adr r2, 80076b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80076ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b2:	bf00      	nop
 80076b4:	08007719 	.word	0x08007719
 80076b8:	08007957 	.word	0x08007957
 80076bc:	08007957 	.word	0x08007957
 80076c0:	08007957 	.word	0x08007957
 80076c4:	08007957 	.word	0x08007957
 80076c8:	08007957 	.word	0x08007957
 80076cc:	08007957 	.word	0x08007957
 80076d0:	08007957 	.word	0x08007957
 80076d4:	0800773f 	.word	0x0800773f
 80076d8:	08007957 	.word	0x08007957
 80076dc:	08007957 	.word	0x08007957
 80076e0:	08007957 	.word	0x08007957
 80076e4:	08007957 	.word	0x08007957
 80076e8:	08007957 	.word	0x08007957
 80076ec:	08007957 	.word	0x08007957
 80076f0:	08007957 	.word	0x08007957
 80076f4:	08007745 	.word	0x08007745
 80076f8:	08007957 	.word	0x08007957
 80076fc:	08007957 	.word	0x08007957
 8007700:	08007957 	.word	0x08007957
 8007704:	08007957 	.word	0x08007957
 8007708:	08007957 	.word	0x08007957
 800770c:	08007957 	.word	0x08007957
 8007710:	08007957 	.word	0x08007957
 8007714:	0800774b 	.word	0x0800774b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007718:	4b94      	ldr	r3, [pc, #592]	; (800796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0320 	and.w	r3, r3, #32
 8007720:	2b00      	cmp	r3, #0
 8007722:	d009      	beq.n	8007738 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007724:	4b91      	ldr	r3, [pc, #580]	; (800796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	08db      	lsrs	r3, r3, #3
 800772a:	f003 0303 	and.w	r3, r3, #3
 800772e:	4a90      	ldr	r2, [pc, #576]	; (8007970 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007730:	fa22 f303 	lsr.w	r3, r2, r3
 8007734:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007736:	e111      	b.n	800795c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007738:	4b8d      	ldr	r3, [pc, #564]	; (8007970 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800773a:	61bb      	str	r3, [r7, #24]
    break;
 800773c:	e10e      	b.n	800795c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800773e:	4b8d      	ldr	r3, [pc, #564]	; (8007974 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007740:	61bb      	str	r3, [r7, #24]
    break;
 8007742:	e10b      	b.n	800795c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007744:	4b8c      	ldr	r3, [pc, #560]	; (8007978 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007746:	61bb      	str	r3, [r7, #24]
    break;
 8007748:	e108      	b.n	800795c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800774a:	4b88      	ldr	r3, [pc, #544]	; (800796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800774c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774e:	f003 0303 	and.w	r3, r3, #3
 8007752:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007754:	4b85      	ldr	r3, [pc, #532]	; (800796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007758:	091b      	lsrs	r3, r3, #4
 800775a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800775e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007760:	4b82      	ldr	r3, [pc, #520]	; (800796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800776a:	4b80      	ldr	r3, [pc, #512]	; (800796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800776c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800776e:	08db      	lsrs	r3, r3, #3
 8007770:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	fb02 f303 	mul.w	r3, r2, r3
 800777a:	ee07 3a90 	vmov	s15, r3
 800777e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007782:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 80e1 	beq.w	8007950 <HAL_RCC_GetSysClockFreq+0x2b8>
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2b02      	cmp	r3, #2
 8007792:	f000 8083 	beq.w	800789c <HAL_RCC_GetSysClockFreq+0x204>
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	2b02      	cmp	r3, #2
 800779a:	f200 80a1 	bhi.w	80078e0 <HAL_RCC_GetSysClockFreq+0x248>
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d003      	beq.n	80077ac <HAL_RCC_GetSysClockFreq+0x114>
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d056      	beq.n	8007858 <HAL_RCC_GetSysClockFreq+0x1c0>
 80077aa:	e099      	b.n	80078e0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077ac:	4b6f      	ldr	r3, [pc, #444]	; (800796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0320 	and.w	r3, r3, #32
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d02d      	beq.n	8007814 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077b8:	4b6c      	ldr	r3, [pc, #432]	; (800796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	08db      	lsrs	r3, r3, #3
 80077be:	f003 0303 	and.w	r3, r3, #3
 80077c2:	4a6b      	ldr	r2, [pc, #428]	; (8007970 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80077c4:	fa22 f303 	lsr.w	r3, r2, r3
 80077c8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	ee07 3a90 	vmov	s15, r3
 80077d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	ee07 3a90 	vmov	s15, r3
 80077da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077e2:	4b62      	ldr	r3, [pc, #392]	; (800796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ea:	ee07 3a90 	vmov	s15, r3
 80077ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80077f6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800797c <HAL_RCC_GetSysClockFreq+0x2e4>
 80077fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800780a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800780e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007812:	e087      	b.n	8007924 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	ee07 3a90 	vmov	s15, r3
 800781a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007980 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007826:	4b51      	ldr	r3, [pc, #324]	; (800796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800782e:	ee07 3a90 	vmov	s15, r3
 8007832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007836:	ed97 6a02 	vldr	s12, [r7, #8]
 800783a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800797c <HAL_RCC_GetSysClockFreq+0x2e4>
 800783e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800784a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800784e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007852:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007856:	e065      	b.n	8007924 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	ee07 3a90 	vmov	s15, r3
 800785e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007862:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007984 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800786a:	4b40      	ldr	r3, [pc, #256]	; (800796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800786c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007872:	ee07 3a90 	vmov	s15, r3
 8007876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800787a:	ed97 6a02 	vldr	s12, [r7, #8]
 800787e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800797c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800788a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800788e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800789a:	e043      	b.n	8007924 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	ee07 3a90 	vmov	s15, r3
 80078a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007988 <HAL_RCC_GetSysClockFreq+0x2f0>
 80078aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ae:	4b2f      	ldr	r3, [pc, #188]	; (800796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b6:	ee07 3a90 	vmov	s15, r3
 80078ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078be:	ed97 6a02 	vldr	s12, [r7, #8]
 80078c2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800797c <HAL_RCC_GetSysClockFreq+0x2e4>
 80078c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078de:	e021      	b.n	8007924 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	ee07 3a90 	vmov	s15, r3
 80078e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007984 <HAL_RCC_GetSysClockFreq+0x2ec>
 80078ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078f2:	4b1e      	ldr	r3, [pc, #120]	; (800796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078fa:	ee07 3a90 	vmov	s15, r3
 80078fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007902:	ed97 6a02 	vldr	s12, [r7, #8]
 8007906:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800797c <HAL_RCC_GetSysClockFreq+0x2e4>
 800790a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800790e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800791a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800791e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007922:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007924:	4b11      	ldr	r3, [pc, #68]	; (800796c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007928:	0a5b      	lsrs	r3, r3, #9
 800792a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800792e:	3301      	adds	r3, #1
 8007930:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	ee07 3a90 	vmov	s15, r3
 8007938:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800793c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007948:	ee17 3a90 	vmov	r3, s15
 800794c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800794e:	e005      	b.n	800795c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007950:	2300      	movs	r3, #0
 8007952:	61bb      	str	r3, [r7, #24]
    break;
 8007954:	e002      	b.n	800795c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007956:	4b07      	ldr	r3, [pc, #28]	; (8007974 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007958:	61bb      	str	r3, [r7, #24]
    break;
 800795a:	bf00      	nop
  }

  return sysclockfreq;
 800795c:	69bb      	ldr	r3, [r7, #24]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3724      	adds	r7, #36	; 0x24
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	58024400 	.word	0x58024400
 8007970:	03d09000 	.word	0x03d09000
 8007974:	003d0900 	.word	0x003d0900
 8007978:	017d7840 	.word	0x017d7840
 800797c:	46000000 	.word	0x46000000
 8007980:	4c742400 	.word	0x4c742400
 8007984:	4a742400 	.word	0x4a742400
 8007988:	4bbebc20 	.word	0x4bbebc20

0800798c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007992:	f7ff fe81 	bl	8007698 <HAL_RCC_GetSysClockFreq>
 8007996:	4602      	mov	r2, r0
 8007998:	4b10      	ldr	r3, [pc, #64]	; (80079dc <HAL_RCC_GetHCLKFreq+0x50>)
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	0a1b      	lsrs	r3, r3, #8
 800799e:	f003 030f 	and.w	r3, r3, #15
 80079a2:	490f      	ldr	r1, [pc, #60]	; (80079e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80079a4:	5ccb      	ldrb	r3, [r1, r3]
 80079a6:	f003 031f 	and.w	r3, r3, #31
 80079aa:	fa22 f303 	lsr.w	r3, r2, r3
 80079ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80079b0:	4b0a      	ldr	r3, [pc, #40]	; (80079dc <HAL_RCC_GetHCLKFreq+0x50>)
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	f003 030f 	and.w	r3, r3, #15
 80079b8:	4a09      	ldr	r2, [pc, #36]	; (80079e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80079ba:	5cd3      	ldrb	r3, [r2, r3]
 80079bc:	f003 031f 	and.w	r3, r3, #31
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	fa22 f303 	lsr.w	r3, r2, r3
 80079c6:	4a07      	ldr	r2, [pc, #28]	; (80079e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80079c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80079ca:	4a07      	ldr	r2, [pc, #28]	; (80079e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80079d0:	4b04      	ldr	r3, [pc, #16]	; (80079e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80079d2:	681b      	ldr	r3, [r3, #0]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	58024400 	.word	0x58024400
 80079e0:	0800da58 	.word	0x0800da58
 80079e4:	20000004 	.word	0x20000004
 80079e8:	20000000 	.word	0x20000000

080079ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80079f0:	f7ff ffcc 	bl	800798c <HAL_RCC_GetHCLKFreq>
 80079f4:	4602      	mov	r2, r0
 80079f6:	4b06      	ldr	r3, [pc, #24]	; (8007a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079f8:	69db      	ldr	r3, [r3, #28]
 80079fa:	091b      	lsrs	r3, r3, #4
 80079fc:	f003 0307 	and.w	r3, r3, #7
 8007a00:	4904      	ldr	r1, [pc, #16]	; (8007a14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a02:	5ccb      	ldrb	r3, [r1, r3]
 8007a04:	f003 031f 	and.w	r3, r3, #31
 8007a08:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	58024400 	.word	0x58024400
 8007a14:	0800da58 	.word	0x0800da58

08007a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007a1c:	f7ff ffb6 	bl	800798c <HAL_RCC_GetHCLKFreq>
 8007a20:	4602      	mov	r2, r0
 8007a22:	4b06      	ldr	r3, [pc, #24]	; (8007a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	0a1b      	lsrs	r3, r3, #8
 8007a28:	f003 0307 	and.w	r3, r3, #7
 8007a2c:	4904      	ldr	r1, [pc, #16]	; (8007a40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a2e:	5ccb      	ldrb	r3, [r1, r3]
 8007a30:	f003 031f 	and.w	r3, r3, #31
 8007a34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	58024400 	.word	0x58024400
 8007a40:	0800da58 	.word	0x0800da58

08007a44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	223f      	movs	r2, #63	; 0x3f
 8007a52:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007a54:	4b1a      	ldr	r3, [pc, #104]	; (8007ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	f003 0207 	and.w	r2, r3, #7
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007a60:	4b17      	ldr	r3, [pc, #92]	; (8007ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007a6c:	4b14      	ldr	r3, [pc, #80]	; (8007ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	f003 020f 	and.w	r2, r3, #15
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007a78:	4b11      	ldr	r3, [pc, #68]	; (8007ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007a84:	4b0e      	ldr	r3, [pc, #56]	; (8007ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8007a86:	69db      	ldr	r3, [r3, #28]
 8007a88:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007a90:	4b0b      	ldr	r3, [pc, #44]	; (8007ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8007a92:	69db      	ldr	r3, [r3, #28]
 8007a94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007a9c:	4b08      	ldr	r3, [pc, #32]	; (8007ac0 <HAL_RCC_GetClockConfig+0x7c>)
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007aa8:	4b06      	ldr	r3, [pc, #24]	; (8007ac4 <HAL_RCC_GetClockConfig+0x80>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 020f 	and.w	r2, r3, #15
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	601a      	str	r2, [r3, #0]
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr
 8007ac0:	58024400 	.word	0x58024400
 8007ac4:	52002000 	.word	0x52002000

08007ac8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b086      	sub	sp, #24
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d03f      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ae8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007aec:	d02a      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007aee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007af2:	d824      	bhi.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007af4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007af8:	d018      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007afa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007afe:	d81e      	bhi.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d003      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007b04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b08:	d007      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007b0a:	e018      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b0c:	4bab      	ldr	r3, [pc, #684]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b10:	4aaa      	ldr	r2, [pc, #680]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007b18:	e015      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	2102      	movs	r1, #2
 8007b20:	4618      	mov	r0, r3
 8007b22:	f001 f9cf 	bl	8008ec4 <RCCEx_PLL2_Config>
 8007b26:	4603      	mov	r3, r0
 8007b28:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007b2a:	e00c      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	3324      	adds	r3, #36	; 0x24
 8007b30:	2102      	movs	r1, #2
 8007b32:	4618      	mov	r0, r3
 8007b34:	f001 fa78 	bl	8009028 <RCCEx_PLL3_Config>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007b3c:	e003      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	75fb      	strb	r3, [r7, #23]
      break;
 8007b42:	e000      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b46:	7dfb      	ldrb	r3, [r7, #23]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d109      	bne.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007b4c:	4b9b      	ldr	r3, [pc, #620]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b58:	4998      	ldr	r1, [pc, #608]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	650b      	str	r3, [r1, #80]	; 0x50
 8007b5e:	e001      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b60:	7dfb      	ldrb	r3, [r7, #23]
 8007b62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d03d      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b74:	2b04      	cmp	r3, #4
 8007b76:	d826      	bhi.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007b78:	a201      	add	r2, pc, #4	; (adr r2, 8007b80 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7e:	bf00      	nop
 8007b80:	08007b95 	.word	0x08007b95
 8007b84:	08007ba3 	.word	0x08007ba3
 8007b88:	08007bb5 	.word	0x08007bb5
 8007b8c:	08007bcd 	.word	0x08007bcd
 8007b90:	08007bcd 	.word	0x08007bcd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b94:	4b89      	ldr	r3, [pc, #548]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b98:	4a88      	ldr	r2, [pc, #544]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ba0:	e015      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f001 f98b 	bl	8008ec4 <RCCEx_PLL2_Config>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bb2:	e00c      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3324      	adds	r3, #36	; 0x24
 8007bb8:	2100      	movs	r1, #0
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f001 fa34 	bl	8009028 <RCCEx_PLL3_Config>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bc4:	e003      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	75fb      	strb	r3, [r7, #23]
      break;
 8007bca:	e000      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007bcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bce:	7dfb      	ldrb	r3, [r7, #23]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d109      	bne.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007bd4:	4b79      	ldr	r3, [pc, #484]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd8:	f023 0207 	bic.w	r2, r3, #7
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be0:	4976      	ldr	r1, [pc, #472]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	650b      	str	r3, [r1, #80]	; 0x50
 8007be6:	e001      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be8:	7dfb      	ldrb	r3, [r7, #23]
 8007bea:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d042      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c00:	d02b      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c06:	d825      	bhi.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007c08:	2bc0      	cmp	r3, #192	; 0xc0
 8007c0a:	d028      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007c0c:	2bc0      	cmp	r3, #192	; 0xc0
 8007c0e:	d821      	bhi.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007c10:	2b80      	cmp	r3, #128	; 0x80
 8007c12:	d016      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007c14:	2b80      	cmp	r3, #128	; 0x80
 8007c16:	d81d      	bhi.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d002      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007c1c:	2b40      	cmp	r3, #64	; 0x40
 8007c1e:	d007      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007c20:	e018      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c22:	4b66      	ldr	r3, [pc, #408]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c26:	4a65      	ldr	r2, [pc, #404]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007c2e:	e017      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	3304      	adds	r3, #4
 8007c34:	2100      	movs	r1, #0
 8007c36:	4618      	mov	r0, r3
 8007c38:	f001 f944 	bl	8008ec4 <RCCEx_PLL2_Config>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007c40:	e00e      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	3324      	adds	r3, #36	; 0x24
 8007c46:	2100      	movs	r1, #0
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f001 f9ed 	bl	8009028 <RCCEx_PLL3_Config>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007c52:	e005      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	75fb      	strb	r3, [r7, #23]
      break;
 8007c58:	e002      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007c5a:	bf00      	nop
 8007c5c:	e000      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007c5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c60:	7dfb      	ldrb	r3, [r7, #23]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d109      	bne.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007c66:	4b55      	ldr	r3, [pc, #340]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c6a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c72:	4952      	ldr	r1, [pc, #328]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	650b      	str	r3, [r1, #80]	; 0x50
 8007c78:	e001      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c7a:	7dfb      	ldrb	r3, [r7, #23]
 8007c7c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d049      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007c90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c94:	d030      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007c96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c9a:	d82a      	bhi.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007c9c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ca0:	d02c      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007ca2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ca6:	d824      	bhi.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007ca8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cac:	d018      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007cae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cb2:	d81e      	bhi.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d003      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007cb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cbc:	d007      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007cbe:	e018      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cc0:	4b3e      	ldr	r3, [pc, #248]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc4:	4a3d      	ldr	r2, [pc, #244]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ccc:	e017      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	3304      	adds	r3, #4
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f001 f8f5 	bl	8008ec4 <RCCEx_PLL2_Config>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007cde:	e00e      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	3324      	adds	r3, #36	; 0x24
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f001 f99e 	bl	8009028 <RCCEx_PLL3_Config>
 8007cec:	4603      	mov	r3, r0
 8007cee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007cf0:	e005      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	75fb      	strb	r3, [r7, #23]
      break;
 8007cf6:	e002      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007cf8:	bf00      	nop
 8007cfa:	e000      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007cfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cfe:	7dfb      	ldrb	r3, [r7, #23]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10a      	bne.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007d04:	4b2d      	ldr	r3, [pc, #180]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d08:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007d12:	492a      	ldr	r1, [pc, #168]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	658b      	str	r3, [r1, #88]	; 0x58
 8007d18:	e001      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
 8007d1c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d04c      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007d30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d34:	d030      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007d36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d3a:	d82a      	bhi.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007d3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d40:	d02c      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007d42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d46:	d824      	bhi.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007d48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d4c:	d018      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007d4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d52:	d81e      	bhi.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d003      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d5c:	d007      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007d5e:	e018      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d60:	4b16      	ldr	r3, [pc, #88]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d64:	4a15      	ldr	r2, [pc, #84]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d6c:	e017      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	3304      	adds	r3, #4
 8007d72:	2100      	movs	r1, #0
 8007d74:	4618      	mov	r0, r3
 8007d76:	f001 f8a5 	bl	8008ec4 <RCCEx_PLL2_Config>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007d7e:	e00e      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	3324      	adds	r3, #36	; 0x24
 8007d84:	2100      	movs	r1, #0
 8007d86:	4618      	mov	r0, r3
 8007d88:	f001 f94e 	bl	8009028 <RCCEx_PLL3_Config>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d90:	e005      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	75fb      	strb	r3, [r7, #23]
      break;
 8007d96:	e002      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007d98:	bf00      	nop
 8007d9a:	e000      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007d9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10d      	bne.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007da4:	4b05      	ldr	r3, [pc, #20]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007da8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007db2:	4902      	ldr	r1, [pc, #8]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007db4:	4313      	orrs	r3, r2
 8007db6:	658b      	str	r3, [r1, #88]	; 0x58
 8007db8:	e004      	b.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007dba:	bf00      	nop
 8007dbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
 8007dc2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d032      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dd4:	2b30      	cmp	r3, #48	; 0x30
 8007dd6:	d01c      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007dd8:	2b30      	cmp	r3, #48	; 0x30
 8007dda:	d817      	bhi.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007ddc:	2b20      	cmp	r3, #32
 8007dde:	d00c      	beq.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007de0:	2b20      	cmp	r3, #32
 8007de2:	d813      	bhi.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d016      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007de8:	2b10      	cmp	r3, #16
 8007dea:	d10f      	bne.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dec:	4baf      	ldr	r3, [pc, #700]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df0:	4aae      	ldr	r2, [pc, #696]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007df6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007df8:	e00e      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	2102      	movs	r1, #2
 8007e00:	4618      	mov	r0, r3
 8007e02:	f001 f85f 	bl	8008ec4 <RCCEx_PLL2_Config>
 8007e06:	4603      	mov	r3, r0
 8007e08:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007e0a:	e005      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e10:	e002      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007e12:	bf00      	nop
 8007e14:	e000      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007e16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e18:	7dfb      	ldrb	r3, [r7, #23]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d109      	bne.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007e1e:	4ba3      	ldr	r3, [pc, #652]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e2a:	49a0      	ldr	r1, [pc, #640]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007e30:	e001      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
 8007e34:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d047      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e4a:	d030      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007e4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e50:	d82a      	bhi.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007e52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e56:	d02c      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007e58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e5c:	d824      	bhi.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e62:	d018      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e68:	d81e      	bhi.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d003      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e72:	d007      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007e74:	e018      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e76:	4b8d      	ldr	r3, [pc, #564]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7a:	4a8c      	ldr	r2, [pc, #560]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007e82:	e017      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	3304      	adds	r3, #4
 8007e88:	2100      	movs	r1, #0
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f001 f81a 	bl	8008ec4 <RCCEx_PLL2_Config>
 8007e90:	4603      	mov	r3, r0
 8007e92:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007e94:	e00e      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	3324      	adds	r3, #36	; 0x24
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f001 f8c3 	bl	8009028 <RCCEx_PLL3_Config>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ea6:	e005      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8007eac:	e002      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007eae:	bf00      	nop
 8007eb0:	e000      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007eb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007eb4:	7dfb      	ldrb	r3, [r7, #23]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d109      	bne.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007eba:	4b7c      	ldr	r3, [pc, #496]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ebe:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ec6:	4979      	ldr	r1, [pc, #484]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	650b      	str	r3, [r1, #80]	; 0x50
 8007ecc:	e001      	b.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ece:	7dfb      	ldrb	r3, [r7, #23]
 8007ed0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d049      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ee2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ee6:	d02e      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007eec:	d828      	bhi.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007eee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ef2:	d02a      	beq.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007ef4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ef8:	d822      	bhi.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007efa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007efe:	d026      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007f00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f04:	d81c      	bhi.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007f06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f0a:	d010      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007f0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f10:	d816      	bhi.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d01d      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f1a:	d111      	bne.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3304      	adds	r3, #4
 8007f20:	2101      	movs	r1, #1
 8007f22:	4618      	mov	r0, r3
 8007f24:	f000 ffce 	bl	8008ec4 <RCCEx_PLL2_Config>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007f2c:	e012      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	3324      	adds	r3, #36	; 0x24
 8007f32:	2101      	movs	r1, #1
 8007f34:	4618      	mov	r0, r3
 8007f36:	f001 f877 	bl	8009028 <RCCEx_PLL3_Config>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007f3e:	e009      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	75fb      	strb	r3, [r7, #23]
      break;
 8007f44:	e006      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007f46:	bf00      	nop
 8007f48:	e004      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007f4a:	bf00      	nop
 8007f4c:	e002      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007f4e:	bf00      	nop
 8007f50:	e000      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007f52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f54:	7dfb      	ldrb	r3, [r7, #23]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d109      	bne.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007f5a:	4b54      	ldr	r3, [pc, #336]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f5e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f66:	4951      	ldr	r1, [pc, #324]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	650b      	str	r3, [r1, #80]	; 0x50
 8007f6c:	e001      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f6e:	7dfb      	ldrb	r3, [r7, #23]
 8007f70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d04b      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f88:	d02e      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f8e:	d828      	bhi.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f94:	d02a      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f9a:	d822      	bhi.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007f9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007fa0:	d026      	beq.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007fa2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007fa6:	d81c      	bhi.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fac:	d010      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fb2:	d816      	bhi.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d01d      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007fb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fbc:	d111      	bne.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	3304      	adds	r3, #4
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 ff7d 	bl	8008ec4 <RCCEx_PLL2_Config>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007fce:	e012      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3324      	adds	r3, #36	; 0x24
 8007fd4:	2101      	movs	r1, #1
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f001 f826 	bl	8009028 <RCCEx_PLL3_Config>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007fe0:	e009      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe6:	e006      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007fe8:	bf00      	nop
 8007fea:	e004      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007fec:	bf00      	nop
 8007fee:	e002      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007ff0:	bf00      	nop
 8007ff2:	e000      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007ff4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10a      	bne.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007ffc:	4b2b      	ldr	r3, [pc, #172]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008000:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800800a:	4928      	ldr	r1, [pc, #160]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800800c:	4313      	orrs	r3, r2
 800800e:	658b      	str	r3, [r1, #88]	; 0x58
 8008010:	e001      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008012:	7dfb      	ldrb	r3, [r7, #23]
 8008014:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d02f      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800802a:	d00e      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800802c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008030:	d814      	bhi.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008032:	2b00      	cmp	r3, #0
 8008034:	d015      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008036:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800803a:	d10f      	bne.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800803c:	4b1b      	ldr	r3, [pc, #108]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800803e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008040:	4a1a      	ldr	r2, [pc, #104]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008046:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008048:	e00c      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	3304      	adds	r3, #4
 800804e:	2101      	movs	r1, #1
 8008050:	4618      	mov	r0, r3
 8008052:	f000 ff37 	bl	8008ec4 <RCCEx_PLL2_Config>
 8008056:	4603      	mov	r3, r0
 8008058:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800805a:	e003      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	75fb      	strb	r3, [r7, #23]
      break;
 8008060:	e000      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8008062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008064:	7dfb      	ldrb	r3, [r7, #23]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d109      	bne.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800806a:	4b10      	ldr	r3, [pc, #64]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800806c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800806e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008076:	490d      	ldr	r1, [pc, #52]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008078:	4313      	orrs	r3, r2
 800807a:	650b      	str	r3, [r1, #80]	; 0x50
 800807c:	e001      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800807e:	7dfb      	ldrb	r3, [r7, #23]
 8008080:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d033      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008092:	2b03      	cmp	r3, #3
 8008094:	d81c      	bhi.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008096:	a201      	add	r2, pc, #4	; (adr r2, 800809c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8008098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809c:	080080d7 	.word	0x080080d7
 80080a0:	080080b1 	.word	0x080080b1
 80080a4:	080080bf 	.word	0x080080bf
 80080a8:	080080d7 	.word	0x080080d7
 80080ac:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080b0:	4bb8      	ldr	r3, [pc, #736]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b4:	4ab7      	ldr	r2, [pc, #732]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80080bc:	e00c      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	3304      	adds	r3, #4
 80080c2:	2102      	movs	r1, #2
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 fefd 	bl	8008ec4 <RCCEx_PLL2_Config>
 80080ca:	4603      	mov	r3, r0
 80080cc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80080ce:	e003      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	75fb      	strb	r3, [r7, #23]
      break;
 80080d4:	e000      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80080d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080d8:	7dfb      	ldrb	r3, [r7, #23]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d109      	bne.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80080de:	4bad      	ldr	r3, [pc, #692]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080e2:	f023 0203 	bic.w	r2, r3, #3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ea:	49aa      	ldr	r1, [pc, #680]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080ec:	4313      	orrs	r3, r2
 80080ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80080f0:	e001      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f2:	7dfb      	ldrb	r3, [r7, #23]
 80080f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f000 8086 	beq.w	8008210 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008104:	4ba4      	ldr	r3, [pc, #656]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4aa3      	ldr	r2, [pc, #652]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800810a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800810e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008110:	f7fb fb44 	bl	800379c <HAL_GetTick>
 8008114:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008116:	e009      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008118:	f7fb fb40 	bl	800379c <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	2b64      	cmp	r3, #100	; 0x64
 8008124:	d902      	bls.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	75fb      	strb	r3, [r7, #23]
        break;
 800812a:	e005      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800812c:	4b9a      	ldr	r3, [pc, #616]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008134:	2b00      	cmp	r3, #0
 8008136:	d0ef      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008138:	7dfb      	ldrb	r3, [r7, #23]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d166      	bne.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800813e:	4b95      	ldr	r3, [pc, #596]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008140:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008148:	4053      	eors	r3, r2
 800814a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800814e:	2b00      	cmp	r3, #0
 8008150:	d013      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008152:	4b90      	ldr	r3, [pc, #576]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800815a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800815c:	4b8d      	ldr	r3, [pc, #564]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800815e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008160:	4a8c      	ldr	r2, [pc, #560]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008166:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008168:	4b8a      	ldr	r3, [pc, #552]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800816a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800816c:	4a89      	ldr	r2, [pc, #548]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800816e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008172:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008174:	4a87      	ldr	r2, [pc, #540]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008184:	d115      	bne.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008186:	f7fb fb09 	bl	800379c <HAL_GetTick>
 800818a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800818c:	e00b      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800818e:	f7fb fb05 	bl	800379c <HAL_GetTick>
 8008192:	4602      	mov	r2, r0
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	f241 3288 	movw	r2, #5000	; 0x1388
 800819c:	4293      	cmp	r3, r2
 800819e:	d902      	bls.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	75fb      	strb	r3, [r7, #23]
            break;
 80081a4:	e005      	b.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081a6:	4b7b      	ldr	r3, [pc, #492]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081aa:	f003 0302 	and.w	r3, r3, #2
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d0ed      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80081b2:	7dfb      	ldrb	r3, [r7, #23]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d126      	bne.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80081be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081c6:	d10d      	bne.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80081c8:	4b72      	ldr	r3, [pc, #456]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80081d6:	0919      	lsrs	r1, r3, #4
 80081d8:	4b70      	ldr	r3, [pc, #448]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80081da:	400b      	ands	r3, r1
 80081dc:	496d      	ldr	r1, [pc, #436]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081de:	4313      	orrs	r3, r2
 80081e0:	610b      	str	r3, [r1, #16]
 80081e2:	e005      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80081e4:	4b6b      	ldr	r3, [pc, #428]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	4a6a      	ldr	r2, [pc, #424]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80081ee:	6113      	str	r3, [r2, #16]
 80081f0:	4b68      	ldr	r3, [pc, #416]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80081fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081fe:	4965      	ldr	r1, [pc, #404]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008200:	4313      	orrs	r3, r2
 8008202:	670b      	str	r3, [r1, #112]	; 0x70
 8008204:	e004      	b.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008206:	7dfb      	ldrb	r3, [r7, #23]
 8008208:	75bb      	strb	r3, [r7, #22]
 800820a:	e001      	b.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800820c:	7dfb      	ldrb	r3, [r7, #23]
 800820e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0301 	and.w	r3, r3, #1
 8008218:	2b00      	cmp	r3, #0
 800821a:	d07e      	beq.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008220:	2b28      	cmp	r3, #40	; 0x28
 8008222:	d867      	bhi.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008224:	a201      	add	r2, pc, #4	; (adr r2, 800822c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822a:	bf00      	nop
 800822c:	080082fb 	.word	0x080082fb
 8008230:	080082f5 	.word	0x080082f5
 8008234:	080082f5 	.word	0x080082f5
 8008238:	080082f5 	.word	0x080082f5
 800823c:	080082f5 	.word	0x080082f5
 8008240:	080082f5 	.word	0x080082f5
 8008244:	080082f5 	.word	0x080082f5
 8008248:	080082f5 	.word	0x080082f5
 800824c:	080082d1 	.word	0x080082d1
 8008250:	080082f5 	.word	0x080082f5
 8008254:	080082f5 	.word	0x080082f5
 8008258:	080082f5 	.word	0x080082f5
 800825c:	080082f5 	.word	0x080082f5
 8008260:	080082f5 	.word	0x080082f5
 8008264:	080082f5 	.word	0x080082f5
 8008268:	080082f5 	.word	0x080082f5
 800826c:	080082e3 	.word	0x080082e3
 8008270:	080082f5 	.word	0x080082f5
 8008274:	080082f5 	.word	0x080082f5
 8008278:	080082f5 	.word	0x080082f5
 800827c:	080082f5 	.word	0x080082f5
 8008280:	080082f5 	.word	0x080082f5
 8008284:	080082f5 	.word	0x080082f5
 8008288:	080082f5 	.word	0x080082f5
 800828c:	080082fb 	.word	0x080082fb
 8008290:	080082f5 	.word	0x080082f5
 8008294:	080082f5 	.word	0x080082f5
 8008298:	080082f5 	.word	0x080082f5
 800829c:	080082f5 	.word	0x080082f5
 80082a0:	080082f5 	.word	0x080082f5
 80082a4:	080082f5 	.word	0x080082f5
 80082a8:	080082f5 	.word	0x080082f5
 80082ac:	080082fb 	.word	0x080082fb
 80082b0:	080082f5 	.word	0x080082f5
 80082b4:	080082f5 	.word	0x080082f5
 80082b8:	080082f5 	.word	0x080082f5
 80082bc:	080082f5 	.word	0x080082f5
 80082c0:	080082f5 	.word	0x080082f5
 80082c4:	080082f5 	.word	0x080082f5
 80082c8:	080082f5 	.word	0x080082f5
 80082cc:	080082fb 	.word	0x080082fb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	3304      	adds	r3, #4
 80082d4:	2101      	movs	r1, #1
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 fdf4 	bl	8008ec4 <RCCEx_PLL2_Config>
 80082dc:	4603      	mov	r3, r0
 80082de:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80082e0:	e00c      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	3324      	adds	r3, #36	; 0x24
 80082e6:	2101      	movs	r1, #1
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 fe9d 	bl	8009028 <RCCEx_PLL3_Config>
 80082ee:	4603      	mov	r3, r0
 80082f0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80082f2:	e003      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	75fb      	strb	r3, [r7, #23]
      break;
 80082f8:	e000      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80082fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082fc:	7dfb      	ldrb	r3, [r7, #23]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d109      	bne.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008302:	4b24      	ldr	r3, [pc, #144]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008306:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800830e:	4921      	ldr	r1, [pc, #132]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008310:	4313      	orrs	r3, r2
 8008312:	654b      	str	r3, [r1, #84]	; 0x54
 8008314:	e001      	b.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008316:	7dfb      	ldrb	r3, [r7, #23]
 8008318:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 0302 	and.w	r3, r3, #2
 8008322:	2b00      	cmp	r3, #0
 8008324:	d03e      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800832a:	2b05      	cmp	r3, #5
 800832c:	d820      	bhi.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800832e:	a201      	add	r2, pc, #4	; (adr r2, 8008334 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008334:	08008377 	.word	0x08008377
 8008338:	0800834d 	.word	0x0800834d
 800833c:	0800835f 	.word	0x0800835f
 8008340:	08008377 	.word	0x08008377
 8008344:	08008377 	.word	0x08008377
 8008348:	08008377 	.word	0x08008377
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3304      	adds	r3, #4
 8008350:	2101      	movs	r1, #1
 8008352:	4618      	mov	r0, r3
 8008354:	f000 fdb6 	bl	8008ec4 <RCCEx_PLL2_Config>
 8008358:	4603      	mov	r3, r0
 800835a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800835c:	e00c      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	3324      	adds	r3, #36	; 0x24
 8008362:	2101      	movs	r1, #1
 8008364:	4618      	mov	r0, r3
 8008366:	f000 fe5f 	bl	8009028 <RCCEx_PLL3_Config>
 800836a:	4603      	mov	r3, r0
 800836c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800836e:	e003      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	75fb      	strb	r3, [r7, #23]
      break;
 8008374:	e000      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8008376:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008378:	7dfb      	ldrb	r3, [r7, #23]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d110      	bne.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800837e:	4b05      	ldr	r3, [pc, #20]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008382:	f023 0207 	bic.w	r2, r3, #7
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800838a:	4902      	ldr	r1, [pc, #8]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800838c:	4313      	orrs	r3, r2
 800838e:	654b      	str	r3, [r1, #84]	; 0x54
 8008390:	e008      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008392:	bf00      	nop
 8008394:	58024400 	.word	0x58024400
 8008398:	58024800 	.word	0x58024800
 800839c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083a0:	7dfb      	ldrb	r3, [r7, #23]
 80083a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0304 	and.w	r3, r3, #4
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d039      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083b6:	2b05      	cmp	r3, #5
 80083b8:	d820      	bhi.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x934>
 80083ba:	a201      	add	r2, pc, #4	; (adr r2, 80083c0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80083bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c0:	08008403 	.word	0x08008403
 80083c4:	080083d9 	.word	0x080083d9
 80083c8:	080083eb 	.word	0x080083eb
 80083cc:	08008403 	.word	0x08008403
 80083d0:	08008403 	.word	0x08008403
 80083d4:	08008403 	.word	0x08008403
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	3304      	adds	r3, #4
 80083dc:	2101      	movs	r1, #1
 80083de:	4618      	mov	r0, r3
 80083e0:	f000 fd70 	bl	8008ec4 <RCCEx_PLL2_Config>
 80083e4:	4603      	mov	r3, r0
 80083e6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80083e8:	e00c      	b.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	3324      	adds	r3, #36	; 0x24
 80083ee:	2101      	movs	r1, #1
 80083f0:	4618      	mov	r0, r3
 80083f2:	f000 fe19 	bl	8009028 <RCCEx_PLL3_Config>
 80083f6:	4603      	mov	r3, r0
 80083f8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80083fa:	e003      	b.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008400:	e000      	b.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008402:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008404:	7dfb      	ldrb	r3, [r7, #23]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10a      	bne.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800840a:	4bb7      	ldr	r3, [pc, #732]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800840c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800840e:	f023 0207 	bic.w	r2, r3, #7
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008418:	49b3      	ldr	r1, [pc, #716]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800841a:	4313      	orrs	r3, r2
 800841c:	658b      	str	r3, [r1, #88]	; 0x58
 800841e:	e001      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008420:	7dfb      	ldrb	r3, [r7, #23]
 8008422:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0320 	and.w	r3, r3, #32
 800842c:	2b00      	cmp	r3, #0
 800842e:	d04b      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008436:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800843a:	d02e      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800843c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008440:	d828      	bhi.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008446:	d02a      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800844c:	d822      	bhi.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800844e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008452:	d026      	beq.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008454:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008458:	d81c      	bhi.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800845a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800845e:	d010      	beq.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008464:	d816      	bhi.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008466:	2b00      	cmp	r3, #0
 8008468:	d01d      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800846a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800846e:	d111      	bne.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	3304      	adds	r3, #4
 8008474:	2100      	movs	r1, #0
 8008476:	4618      	mov	r0, r3
 8008478:	f000 fd24 	bl	8008ec4 <RCCEx_PLL2_Config>
 800847c:	4603      	mov	r3, r0
 800847e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008480:	e012      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	3324      	adds	r3, #36	; 0x24
 8008486:	2102      	movs	r1, #2
 8008488:	4618      	mov	r0, r3
 800848a:	f000 fdcd 	bl	8009028 <RCCEx_PLL3_Config>
 800848e:	4603      	mov	r3, r0
 8008490:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008492:	e009      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	75fb      	strb	r3, [r7, #23]
      break;
 8008498:	e006      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800849a:	bf00      	nop
 800849c:	e004      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800849e:	bf00      	nop
 80084a0:	e002      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80084a2:	bf00      	nop
 80084a4:	e000      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80084a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084a8:	7dfb      	ldrb	r3, [r7, #23]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d10a      	bne.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084ae:	4b8e      	ldr	r3, [pc, #568]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80084b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084bc:	498a      	ldr	r1, [pc, #552]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	654b      	str	r3, [r1, #84]	; 0x54
 80084c2:	e001      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084c4:	7dfb      	ldrb	r3, [r7, #23]
 80084c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d04b      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80084da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80084de:	d02e      	beq.n	800853e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80084e0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80084e4:	d828      	bhi.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80084e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084ea:	d02a      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80084ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084f0:	d822      	bhi.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80084f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084f6:	d026      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80084f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084fc:	d81c      	bhi.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80084fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008502:	d010      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008508:	d816      	bhi.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800850a:	2b00      	cmp	r3, #0
 800850c:	d01d      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800850e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008512:	d111      	bne.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	3304      	adds	r3, #4
 8008518:	2100      	movs	r1, #0
 800851a:	4618      	mov	r0, r3
 800851c:	f000 fcd2 	bl	8008ec4 <RCCEx_PLL2_Config>
 8008520:	4603      	mov	r3, r0
 8008522:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008524:	e012      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	3324      	adds	r3, #36	; 0x24
 800852a:	2102      	movs	r1, #2
 800852c:	4618      	mov	r0, r3
 800852e:	f000 fd7b 	bl	8009028 <RCCEx_PLL3_Config>
 8008532:	4603      	mov	r3, r0
 8008534:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008536:	e009      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	75fb      	strb	r3, [r7, #23]
      break;
 800853c:	e006      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800853e:	bf00      	nop
 8008540:	e004      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008542:	bf00      	nop
 8008544:	e002      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008546:	bf00      	nop
 8008548:	e000      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800854a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800854c:	7dfb      	ldrb	r3, [r7, #23]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10a      	bne.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008552:	4b65      	ldr	r3, [pc, #404]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008556:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008560:	4961      	ldr	r1, [pc, #388]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008562:	4313      	orrs	r3, r2
 8008564:	658b      	str	r3, [r1, #88]	; 0x58
 8008566:	e001      	b.n	800856c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008568:	7dfb      	ldrb	r3, [r7, #23]
 800856a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008574:	2b00      	cmp	r3, #0
 8008576:	d04b      	beq.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800857e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008582:	d02e      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008584:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008588:	d828      	bhi.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800858a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800858e:	d02a      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008594:	d822      	bhi.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008596:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800859a:	d026      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800859c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80085a0:	d81c      	bhi.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80085a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085a6:	d010      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80085a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085ac:	d816      	bhi.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d01d      	beq.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80085b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085b6:	d111      	bne.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	3304      	adds	r3, #4
 80085bc:	2100      	movs	r1, #0
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fc80 	bl	8008ec4 <RCCEx_PLL2_Config>
 80085c4:	4603      	mov	r3, r0
 80085c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80085c8:	e012      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	3324      	adds	r3, #36	; 0x24
 80085ce:	2102      	movs	r1, #2
 80085d0:	4618      	mov	r0, r3
 80085d2:	f000 fd29 	bl	8009028 <RCCEx_PLL3_Config>
 80085d6:	4603      	mov	r3, r0
 80085d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80085da:	e009      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	75fb      	strb	r3, [r7, #23]
      break;
 80085e0:	e006      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80085e2:	bf00      	nop
 80085e4:	e004      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80085e6:	bf00      	nop
 80085e8:	e002      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80085ea:	bf00      	nop
 80085ec:	e000      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80085ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085f0:	7dfb      	ldrb	r3, [r7, #23]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d10a      	bne.n	800860c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80085f6:	4b3c      	ldr	r3, [pc, #240]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80085f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008604:	4938      	ldr	r1, [pc, #224]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008606:	4313      	orrs	r3, r2
 8008608:	658b      	str	r3, [r1, #88]	; 0x58
 800860a:	e001      	b.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800860c:	7dfb      	ldrb	r3, [r7, #23]
 800860e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0308 	and.w	r3, r3, #8
 8008618:	2b00      	cmp	r3, #0
 800861a:	d01a      	beq.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008626:	d10a      	bne.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	3324      	adds	r3, #36	; 0x24
 800862c:	2102      	movs	r1, #2
 800862e:	4618      	mov	r0, r3
 8008630:	f000 fcfa 	bl	8009028 <RCCEx_PLL3_Config>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800863e:	4b2a      	ldr	r3, [pc, #168]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008642:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800864c:	4926      	ldr	r1, [pc, #152]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800864e:	4313      	orrs	r3, r2
 8008650:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 0310 	and.w	r3, r3, #16
 800865a:	2b00      	cmp	r3, #0
 800865c:	d01a      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008668:	d10a      	bne.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	3324      	adds	r3, #36	; 0x24
 800866e:	2102      	movs	r1, #2
 8008670:	4618      	mov	r0, r3
 8008672:	f000 fcd9 	bl	8009028 <RCCEx_PLL3_Config>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d001      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008680:	4b19      	ldr	r3, [pc, #100]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008684:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800868e:	4916      	ldr	r1, [pc, #88]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008690:	4313      	orrs	r3, r2
 8008692:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d036      	beq.n	800870e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80086a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086aa:	d01f      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80086ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086b0:	d817      	bhi.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80086b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086ba:	d009      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80086bc:	e011      	b.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	3304      	adds	r3, #4
 80086c2:	2100      	movs	r1, #0
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 fbfd 	bl	8008ec4 <RCCEx_PLL2_Config>
 80086ca:	4603      	mov	r3, r0
 80086cc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80086ce:	e00e      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3324      	adds	r3, #36	; 0x24
 80086d4:	2102      	movs	r1, #2
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 fca6 	bl	8009028 <RCCEx_PLL3_Config>
 80086dc:	4603      	mov	r3, r0
 80086de:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80086e0:	e005      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	75fb      	strb	r3, [r7, #23]
      break;
 80086e6:	e002      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80086e8:	58024400 	.word	0x58024400
      break;
 80086ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086ee:	7dfb      	ldrb	r3, [r7, #23]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10a      	bne.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80086f4:	4b93      	ldr	r3, [pc, #588]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80086f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008702:	4990      	ldr	r1, [pc, #576]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008704:	4313      	orrs	r3, r2
 8008706:	658b      	str	r3, [r1, #88]	; 0x58
 8008708:	e001      	b.n	800870e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800870a:	7dfb      	ldrb	r3, [r7, #23]
 800870c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008716:	2b00      	cmp	r3, #0
 8008718:	d033      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008720:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008724:	d01c      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008726:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800872a:	d816      	bhi.n	800875a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800872c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008730:	d003      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008732:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008736:	d007      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008738:	e00f      	b.n	800875a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800873a:	4b82      	ldr	r3, [pc, #520]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800873c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873e:	4a81      	ldr	r2, [pc, #516]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008744:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008746:	e00c      	b.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	3324      	adds	r3, #36	; 0x24
 800874c:	2101      	movs	r1, #1
 800874e:	4618      	mov	r0, r3
 8008750:	f000 fc6a 	bl	8009028 <RCCEx_PLL3_Config>
 8008754:	4603      	mov	r3, r0
 8008756:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008758:	e003      	b.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	75fb      	strb	r3, [r7, #23]
      break;
 800875e:	e000      	b.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008762:	7dfb      	ldrb	r3, [r7, #23]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10a      	bne.n	800877e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008768:	4b76      	ldr	r3, [pc, #472]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800876a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800876c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008776:	4973      	ldr	r1, [pc, #460]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008778:	4313      	orrs	r3, r2
 800877a:	654b      	str	r3, [r1, #84]	; 0x54
 800877c:	e001      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800877e:	7dfb      	ldrb	r3, [r7, #23]
 8008780:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800878a:	2b00      	cmp	r3, #0
 800878c:	d029      	beq.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008792:	2b00      	cmp	r3, #0
 8008794:	d003      	beq.n	800879e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800879a:	d007      	beq.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800879c:	e00f      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800879e:	4b69      	ldr	r3, [pc, #420]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a2:	4a68      	ldr	r2, [pc, #416]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80087aa:	e00b      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	3304      	adds	r3, #4
 80087b0:	2102      	movs	r1, #2
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 fb86 	bl	8008ec4 <RCCEx_PLL2_Config>
 80087b8:	4603      	mov	r3, r0
 80087ba:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80087bc:	e002      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	75fb      	strb	r3, [r7, #23]
      break;
 80087c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087c4:	7dfb      	ldrb	r3, [r7, #23]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d109      	bne.n	80087de <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80087ca:	4b5e      	ldr	r3, [pc, #376]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087d6:	495b      	ldr	r1, [pc, #364]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087d8:	4313      	orrs	r3, r2
 80087da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80087dc:	e001      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087de:	7dfb      	ldrb	r3, [r7, #23]
 80087e0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00a      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	3324      	adds	r3, #36	; 0x24
 80087f2:	2102      	movs	r1, #2
 80087f4:	4618      	mov	r0, r3
 80087f6:	f000 fc17 	bl	8009028 <RCCEx_PLL3_Config>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d001      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d030      	beq.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008814:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008818:	d017      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800881a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800881e:	d811      	bhi.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008824:	d013      	beq.n	800884e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800882a:	d80b      	bhi.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800882c:	2b00      	cmp	r3, #0
 800882e:	d010      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008834:	d106      	bne.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008836:	4b43      	ldr	r3, [pc, #268]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883a:	4a42      	ldr	r2, [pc, #264]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800883c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008840:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008842:	e007      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	75fb      	strb	r3, [r7, #23]
      break;
 8008848:	e004      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800884a:	bf00      	nop
 800884c:	e002      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800884e:	bf00      	nop
 8008850:	e000      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008852:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008854:	7dfb      	ldrb	r3, [r7, #23]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d109      	bne.n	800886e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800885a:	4b3a      	ldr	r3, [pc, #232]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800885c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800885e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008866:	4937      	ldr	r1, [pc, #220]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008868:	4313      	orrs	r3, r2
 800886a:	654b      	str	r3, [r1, #84]	; 0x54
 800886c:	e001      	b.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800886e:	7dfb      	ldrb	r3, [r7, #23]
 8008870:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d008      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800887e:	4b31      	ldr	r3, [pc, #196]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008882:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800888a:	492e      	ldr	r1, [pc, #184]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800888c:	4313      	orrs	r3, r2
 800888e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008898:	2b00      	cmp	r3, #0
 800889a:	d009      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800889c:	4b29      	ldr	r3, [pc, #164]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80088aa:	4926      	ldr	r1, [pc, #152]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088ac:	4313      	orrs	r3, r2
 80088ae:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d008      	beq.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80088bc:	4b21      	ldr	r3, [pc, #132]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088c8:	491e      	ldr	r1, [pc, #120]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088ca:	4313      	orrs	r3, r2
 80088cc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00d      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80088da:	4b1a      	ldr	r3, [pc, #104]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	4a19      	ldr	r2, [pc, #100]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088e4:	6113      	str	r3, [r2, #16]
 80088e6:	4b17      	ldr	r3, [pc, #92]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088e8:	691a      	ldr	r2, [r3, #16]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80088f0:	4914      	ldr	r1, [pc, #80]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088f2:	4313      	orrs	r3, r2
 80088f4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	da08      	bge.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80088fe:	4b11      	ldr	r3, [pc, #68]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008902:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800890a:	490e      	ldr	r1, [pc, #56]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800890c:	4313      	orrs	r3, r2
 800890e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008918:	2b00      	cmp	r3, #0
 800891a:	d009      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800891c:	4b09      	ldr	r3, [pc, #36]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800891e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008920:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800892a:	4906      	ldr	r1, [pc, #24]	; (8008944 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800892c:	4313      	orrs	r3, r2
 800892e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008930:	7dbb      	ldrb	r3, [r7, #22]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d101      	bne.n	800893a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008936:	2300      	movs	r3, #0
 8008938:	e000      	b.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
}
 800893c:	4618      	mov	r0, r3
 800893e:	3718      	adds	r7, #24
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	58024400 	.word	0x58024400

08008948 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800894c:	f7ff f81e 	bl	800798c <HAL_RCC_GetHCLKFreq>
 8008950:	4602      	mov	r2, r0
 8008952:	4b06      	ldr	r3, [pc, #24]	; (800896c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008954:	6a1b      	ldr	r3, [r3, #32]
 8008956:	091b      	lsrs	r3, r3, #4
 8008958:	f003 0307 	and.w	r3, r3, #7
 800895c:	4904      	ldr	r1, [pc, #16]	; (8008970 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800895e:	5ccb      	ldrb	r3, [r1, r3]
 8008960:	f003 031f 	and.w	r3, r3, #31
 8008964:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008968:	4618      	mov	r0, r3
 800896a:	bd80      	pop	{r7, pc}
 800896c:	58024400 	.word	0x58024400
 8008970:	0800da58 	.word	0x0800da58

08008974 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008974:	b480      	push	{r7}
 8008976:	b089      	sub	sp, #36	; 0x24
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800897c:	4ba1      	ldr	r3, [pc, #644]	; (8008c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800897e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008980:	f003 0303 	and.w	r3, r3, #3
 8008984:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008986:	4b9f      	ldr	r3, [pc, #636]	; (8008c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898a:	0b1b      	lsrs	r3, r3, #12
 800898c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008990:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008992:	4b9c      	ldr	r3, [pc, #624]	; (8008c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008996:	091b      	lsrs	r3, r3, #4
 8008998:	f003 0301 	and.w	r3, r3, #1
 800899c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800899e:	4b99      	ldr	r3, [pc, #612]	; (8008c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089a2:	08db      	lsrs	r3, r3, #3
 80089a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	fb02 f303 	mul.w	r3, r2, r3
 80089ae:	ee07 3a90 	vmov	s15, r3
 80089b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f000 8111 	beq.w	8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	f000 8083 	beq.w	8008ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	f200 80a1 	bhi.w	8008b14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d003      	beq.n	80089e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d056      	beq.n	8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80089de:	e099      	b.n	8008b14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089e0:	4b88      	ldr	r3, [pc, #544]	; (8008c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 0320 	and.w	r3, r3, #32
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d02d      	beq.n	8008a48 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089ec:	4b85      	ldr	r3, [pc, #532]	; (8008c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	08db      	lsrs	r3, r3, #3
 80089f2:	f003 0303 	and.w	r3, r3, #3
 80089f6:	4a84      	ldr	r2, [pc, #528]	; (8008c08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80089f8:	fa22 f303 	lsr.w	r3, r2, r3
 80089fc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	ee07 3a90 	vmov	s15, r3
 8008a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	ee07 3a90 	vmov	s15, r3
 8008a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a16:	4b7b      	ldr	r3, [pc, #492]	; (8008c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a1e:	ee07 3a90 	vmov	s15, r3
 8008a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a26:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a2a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008c0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a42:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008a46:	e087      	b.n	8008b58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a52:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008c10 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a5a:	4b6a      	ldr	r3, [pc, #424]	; (8008c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a62:	ee07 3a90 	vmov	s15, r3
 8008a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a6e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008c0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a8a:	e065      	b.n	8008b58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a96:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a9e:	4b59      	ldr	r3, [pc, #356]	; (8008c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aa6:	ee07 3a90 	vmov	s15, r3
 8008aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aae:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ab2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008c0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ace:	e043      	b.n	8008b58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	ee07 3a90 	vmov	s15, r3
 8008ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ada:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008c18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ae2:	4b48      	ldr	r3, [pc, #288]	; (8008c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aea:	ee07 3a90 	vmov	s15, r3
 8008aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008af2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008af6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008c0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b12:	e021      	b.n	8008b58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	ee07 3a90 	vmov	s15, r3
 8008b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b26:	4b37      	ldr	r3, [pc, #220]	; (8008c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b2e:	ee07 3a90 	vmov	s15, r3
 8008b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b36:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b3a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008c0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b56:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008b58:	4b2a      	ldr	r3, [pc, #168]	; (8008c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5c:	0a5b      	lsrs	r3, r3, #9
 8008b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b62:	ee07 3a90 	vmov	s15, r3
 8008b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b72:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b7e:	ee17 2a90 	vmov	r2, s15
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008b86:	4b1f      	ldr	r3, [pc, #124]	; (8008c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8a:	0c1b      	lsrs	r3, r3, #16
 8008b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b90:	ee07 3a90 	vmov	s15, r3
 8008b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ba0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bac:	ee17 2a90 	vmov	r2, s15
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008bb4:	4b13      	ldr	r3, [pc, #76]	; (8008c04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb8:	0e1b      	lsrs	r3, r3, #24
 8008bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bbe:	ee07 3a90 	vmov	s15, r3
 8008bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bce:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bda:	ee17 2a90 	vmov	r2, s15
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008be2:	e008      	b.n	8008bf6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	609a      	str	r2, [r3, #8]
}
 8008bf6:	bf00      	nop
 8008bf8:	3724      	adds	r7, #36	; 0x24
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	58024400 	.word	0x58024400
 8008c08:	03d09000 	.word	0x03d09000
 8008c0c:	46000000 	.word	0x46000000
 8008c10:	4c742400 	.word	0x4c742400
 8008c14:	4a742400 	.word	0x4a742400
 8008c18:	4bbebc20 	.word	0x4bbebc20

08008c1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b089      	sub	sp, #36	; 0x24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c24:	4ba1      	ldr	r3, [pc, #644]	; (8008eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c28:	f003 0303 	and.w	r3, r3, #3
 8008c2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008c2e:	4b9f      	ldr	r3, [pc, #636]	; (8008eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c32:	0d1b      	lsrs	r3, r3, #20
 8008c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008c3a:	4b9c      	ldr	r3, [pc, #624]	; (8008eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3e:	0a1b      	lsrs	r3, r3, #8
 8008c40:	f003 0301 	and.w	r3, r3, #1
 8008c44:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008c46:	4b99      	ldr	r3, [pc, #612]	; (8008eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c4a:	08db      	lsrs	r3, r3, #3
 8008c4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c50:	693a      	ldr	r2, [r7, #16]
 8008c52:	fb02 f303 	mul.w	r3, r2, r3
 8008c56:	ee07 3a90 	vmov	s15, r3
 8008c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f000 8111 	beq.w	8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	f000 8083 	beq.w	8008d78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	f200 80a1 	bhi.w	8008dbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d003      	beq.n	8008c88 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d056      	beq.n	8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008c86:	e099      	b.n	8008dbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c88:	4b88      	ldr	r3, [pc, #544]	; (8008eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 0320 	and.w	r3, r3, #32
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d02d      	beq.n	8008cf0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c94:	4b85      	ldr	r3, [pc, #532]	; (8008eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	08db      	lsrs	r3, r3, #3
 8008c9a:	f003 0303 	and.w	r3, r3, #3
 8008c9e:	4a84      	ldr	r2, [pc, #528]	; (8008eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ca4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	ee07 3a90 	vmov	s15, r3
 8008cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	ee07 3a90 	vmov	s15, r3
 8008cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cbe:	4b7b      	ldr	r3, [pc, #492]	; (8008eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cc6:	ee07 3a90 	vmov	s15, r3
 8008cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cce:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cd2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008cee:	e087      	b.n	8008e00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	ee07 3a90 	vmov	s15, r3
 8008cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cfa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d02:	4b6a      	ldr	r3, [pc, #424]	; (8008eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d0a:	ee07 3a90 	vmov	s15, r3
 8008d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d12:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d16:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d32:	e065      	b.n	8008e00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	ee07 3a90 	vmov	s15, r3
 8008d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d46:	4b59      	ldr	r3, [pc, #356]	; (8008eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d4e:	ee07 3a90 	vmov	s15, r3
 8008d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d76:	e043      	b.n	8008e00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	ee07 3a90 	vmov	s15, r3
 8008d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d8a:	4b48      	ldr	r3, [pc, #288]	; (8008eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d92:	ee07 3a90 	vmov	s15, r3
 8008d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008db6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008dba:	e021      	b.n	8008e00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	ee07 3a90 	vmov	s15, r3
 8008dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dce:	4b37      	ldr	r3, [pc, #220]	; (8008eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dd6:	ee07 3a90 	vmov	s15, r3
 8008dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dde:	ed97 6a03 	vldr	s12, [r7, #12]
 8008de2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dfa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008dfe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008e00:	4b2a      	ldr	r3, [pc, #168]	; (8008eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e04:	0a5b      	lsrs	r3, r3, #9
 8008e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e0a:	ee07 3a90 	vmov	s15, r3
 8008e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e26:	ee17 2a90 	vmov	r2, s15
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008e2e:	4b1f      	ldr	r3, [pc, #124]	; (8008eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e32:	0c1b      	lsrs	r3, r3, #16
 8008e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e38:	ee07 3a90 	vmov	s15, r3
 8008e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e48:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e54:	ee17 2a90 	vmov	r2, s15
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008e5c:	4b13      	ldr	r3, [pc, #76]	; (8008eac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e60:	0e1b      	lsrs	r3, r3, #24
 8008e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e66:	ee07 3a90 	vmov	s15, r3
 8008e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e76:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e82:	ee17 2a90 	vmov	r2, s15
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008e8a:	e008      	b.n	8008e9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	609a      	str	r2, [r3, #8]
}
 8008e9e:	bf00      	nop
 8008ea0:	3724      	adds	r7, #36	; 0x24
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	58024400 	.word	0x58024400
 8008eb0:	03d09000 	.word	0x03d09000
 8008eb4:	46000000 	.word	0x46000000
 8008eb8:	4c742400 	.word	0x4c742400
 8008ebc:	4a742400 	.word	0x4a742400
 8008ec0:	4bbebc20 	.word	0x4bbebc20

08008ec4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ed2:	4b53      	ldr	r3, [pc, #332]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed6:	f003 0303 	and.w	r3, r3, #3
 8008eda:	2b03      	cmp	r3, #3
 8008edc:	d101      	bne.n	8008ee2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e099      	b.n	8009016 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008ee2:	4b4f      	ldr	r3, [pc, #316]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a4e      	ldr	r2, [pc, #312]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008ee8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008eec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008eee:	f7fa fc55 	bl	800379c <HAL_GetTick>
 8008ef2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ef4:	e008      	b.n	8008f08 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008ef6:	f7fa fc51 	bl	800379c <HAL_GetTick>
 8008efa:	4602      	mov	r2, r0
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d901      	bls.n	8008f08 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f04:	2303      	movs	r3, #3
 8008f06:	e086      	b.n	8009016 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f08:	4b45      	ldr	r3, [pc, #276]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1f0      	bne.n	8008ef6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008f14:	4b42      	ldr	r3, [pc, #264]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f18:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	031b      	lsls	r3, r3, #12
 8008f22:	493f      	ldr	r1, [pc, #252]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008f24:	4313      	orrs	r3, r2
 8008f26:	628b      	str	r3, [r1, #40]	; 0x28
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	3b01      	subs	r3, #1
 8008f38:	025b      	lsls	r3, r3, #9
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	431a      	orrs	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	3b01      	subs	r3, #1
 8008f44:	041b      	lsls	r3, r3, #16
 8008f46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f4a:	431a      	orrs	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	061b      	lsls	r3, r3, #24
 8008f54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f58:	4931      	ldr	r1, [pc, #196]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008f5e:	4b30      	ldr	r3, [pc, #192]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	695b      	ldr	r3, [r3, #20]
 8008f6a:	492d      	ldr	r1, [pc, #180]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008f70:	4b2b      	ldr	r3, [pc, #172]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f74:	f023 0220 	bic.w	r2, r3, #32
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	699b      	ldr	r3, [r3, #24]
 8008f7c:	4928      	ldr	r1, [pc, #160]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008f82:	4b27      	ldr	r3, [pc, #156]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f86:	4a26      	ldr	r2, [pc, #152]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008f88:	f023 0310 	bic.w	r3, r3, #16
 8008f8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008f8e:	4b24      	ldr	r3, [pc, #144]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008f90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f92:	4b24      	ldr	r3, [pc, #144]	; (8009024 <RCCEx_PLL2_Config+0x160>)
 8008f94:	4013      	ands	r3, r2
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	69d2      	ldr	r2, [r2, #28]
 8008f9a:	00d2      	lsls	r2, r2, #3
 8008f9c:	4920      	ldr	r1, [pc, #128]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008fa2:	4b1f      	ldr	r3, [pc, #124]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa6:	4a1e      	ldr	r2, [pc, #120]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008fa8:	f043 0310 	orr.w	r3, r3, #16
 8008fac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d106      	bne.n	8008fc2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008fb4:	4b1a      	ldr	r3, [pc, #104]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb8:	4a19      	ldr	r2, [pc, #100]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008fba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008fc0:	e00f      	b.n	8008fe2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d106      	bne.n	8008fd6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008fc8:	4b15      	ldr	r3, [pc, #84]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fcc:	4a14      	ldr	r2, [pc, #80]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008fce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008fd4:	e005      	b.n	8008fe2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008fd6:	4b12      	ldr	r3, [pc, #72]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fda:	4a11      	ldr	r2, [pc, #68]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008fdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008fe0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008fe2:	4b0f      	ldr	r3, [pc, #60]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a0e      	ldr	r2, [pc, #56]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 8008fe8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fee:	f7fa fbd5 	bl	800379c <HAL_GetTick>
 8008ff2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ff4:	e008      	b.n	8009008 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008ff6:	f7fa fbd1 	bl	800379c <HAL_GetTick>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	1ad3      	subs	r3, r2, r3
 8009000:	2b02      	cmp	r3, #2
 8009002:	d901      	bls.n	8009008 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009004:	2303      	movs	r3, #3
 8009006:	e006      	b.n	8009016 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009008:	4b05      	ldr	r3, [pc, #20]	; (8009020 <RCCEx_PLL2_Config+0x15c>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009010:	2b00      	cmp	r3, #0
 8009012:	d0f0      	beq.n	8008ff6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009014:	7bfb      	ldrb	r3, [r7, #15]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	58024400 	.word	0x58024400
 8009024:	ffff0007 	.word	0xffff0007

08009028 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009036:	4b53      	ldr	r3, [pc, #332]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 8009038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800903a:	f003 0303 	and.w	r3, r3, #3
 800903e:	2b03      	cmp	r3, #3
 8009040:	d101      	bne.n	8009046 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e099      	b.n	800917a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009046:	4b4f      	ldr	r3, [pc, #316]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a4e      	ldr	r2, [pc, #312]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 800904c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009050:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009052:	f7fa fba3 	bl	800379c <HAL_GetTick>
 8009056:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009058:	e008      	b.n	800906c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800905a:	f7fa fb9f 	bl	800379c <HAL_GetTick>
 800905e:	4602      	mov	r2, r0
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	2b02      	cmp	r3, #2
 8009066:	d901      	bls.n	800906c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009068:	2303      	movs	r3, #3
 800906a:	e086      	b.n	800917a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800906c:	4b45      	ldr	r3, [pc, #276]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1f0      	bne.n	800905a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009078:	4b42      	ldr	r3, [pc, #264]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 800907a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	051b      	lsls	r3, r3, #20
 8009086:	493f      	ldr	r1, [pc, #252]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 8009088:	4313      	orrs	r3, r2
 800908a:	628b      	str	r3, [r1, #40]	; 0x28
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	3b01      	subs	r3, #1
 8009092:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	3b01      	subs	r3, #1
 800909c:	025b      	lsls	r3, r3, #9
 800909e:	b29b      	uxth	r3, r3
 80090a0:	431a      	orrs	r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	3b01      	subs	r3, #1
 80090a8:	041b      	lsls	r3, r3, #16
 80090aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80090ae:	431a      	orrs	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	3b01      	subs	r3, #1
 80090b6:	061b      	lsls	r3, r3, #24
 80090b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80090bc:	4931      	ldr	r1, [pc, #196]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 80090be:	4313      	orrs	r3, r2
 80090c0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80090c2:	4b30      	ldr	r3, [pc, #192]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 80090c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	492d      	ldr	r1, [pc, #180]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 80090d0:	4313      	orrs	r3, r2
 80090d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80090d4:	4b2b      	ldr	r3, [pc, #172]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 80090d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	4928      	ldr	r1, [pc, #160]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 80090e2:	4313      	orrs	r3, r2
 80090e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80090e6:	4b27      	ldr	r3, [pc, #156]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 80090e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ea:	4a26      	ldr	r2, [pc, #152]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 80090ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80090f2:	4b24      	ldr	r3, [pc, #144]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 80090f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090f6:	4b24      	ldr	r3, [pc, #144]	; (8009188 <RCCEx_PLL3_Config+0x160>)
 80090f8:	4013      	ands	r3, r2
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	69d2      	ldr	r2, [r2, #28]
 80090fe:	00d2      	lsls	r2, r2, #3
 8009100:	4920      	ldr	r1, [pc, #128]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 8009102:	4313      	orrs	r3, r2
 8009104:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009106:	4b1f      	ldr	r3, [pc, #124]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 8009108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910a:	4a1e      	ldr	r2, [pc, #120]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 800910c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009110:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d106      	bne.n	8009126 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009118:	4b1a      	ldr	r3, [pc, #104]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 800911a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911c:	4a19      	ldr	r2, [pc, #100]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 800911e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009122:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009124:	e00f      	b.n	8009146 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d106      	bne.n	800913a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800912c:	4b15      	ldr	r3, [pc, #84]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 800912e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009130:	4a14      	ldr	r2, [pc, #80]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 8009132:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009136:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009138:	e005      	b.n	8009146 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800913a:	4b12      	ldr	r3, [pc, #72]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 800913c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913e:	4a11      	ldr	r2, [pc, #68]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 8009140:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009144:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009146:	4b0f      	ldr	r3, [pc, #60]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a0e      	ldr	r2, [pc, #56]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 800914c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009152:	f7fa fb23 	bl	800379c <HAL_GetTick>
 8009156:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009158:	e008      	b.n	800916c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800915a:	f7fa fb1f 	bl	800379c <HAL_GetTick>
 800915e:	4602      	mov	r2, r0
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	2b02      	cmp	r3, #2
 8009166:	d901      	bls.n	800916c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009168:	2303      	movs	r3, #3
 800916a:	e006      	b.n	800917a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800916c:	4b05      	ldr	r3, [pc, #20]	; (8009184 <RCCEx_PLL3_Config+0x15c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d0f0      	beq.n	800915a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009178:	7bfb      	ldrb	r3, [r7, #15]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	58024400 	.word	0x58024400
 8009188:	ffff0007 	.word	0xffff0007

0800918c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d101      	bne.n	800919e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	e049      	b.n	8009232 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d106      	bne.n	80091b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 f841 	bl	800923a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2202      	movs	r2, #2
 80091bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	3304      	adds	r3, #4
 80091c8:	4619      	mov	r1, r3
 80091ca:	4610      	mov	r0, r2
 80091cc:	f000 f9f8 	bl	80095c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800923a:	b480      	push	{r7}
 800923c:	b083      	sub	sp, #12
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009242:	bf00      	nop
 8009244:	370c      	adds	r7, #12
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
	...

08009250 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800925e:	b2db      	uxtb	r3, r3
 8009260:	2b01      	cmp	r3, #1
 8009262:	d001      	beq.n	8009268 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	e04f      	b.n	8009308 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2202      	movs	r2, #2
 800926c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68da      	ldr	r2, [r3, #12]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f042 0201 	orr.w	r2, r2, #1
 800927e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a23      	ldr	r2, [pc, #140]	; (8009314 <HAL_TIM_Base_Start_IT+0xc4>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d01d      	beq.n	80092c6 <HAL_TIM_Base_Start_IT+0x76>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009292:	d018      	beq.n	80092c6 <HAL_TIM_Base_Start_IT+0x76>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a1f      	ldr	r2, [pc, #124]	; (8009318 <HAL_TIM_Base_Start_IT+0xc8>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d013      	beq.n	80092c6 <HAL_TIM_Base_Start_IT+0x76>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a1e      	ldr	r2, [pc, #120]	; (800931c <HAL_TIM_Base_Start_IT+0xcc>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d00e      	beq.n	80092c6 <HAL_TIM_Base_Start_IT+0x76>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a1c      	ldr	r2, [pc, #112]	; (8009320 <HAL_TIM_Base_Start_IT+0xd0>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d009      	beq.n	80092c6 <HAL_TIM_Base_Start_IT+0x76>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a1b      	ldr	r2, [pc, #108]	; (8009324 <HAL_TIM_Base_Start_IT+0xd4>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d004      	beq.n	80092c6 <HAL_TIM_Base_Start_IT+0x76>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a19      	ldr	r2, [pc, #100]	; (8009328 <HAL_TIM_Base_Start_IT+0xd8>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d115      	bne.n	80092f2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	689a      	ldr	r2, [r3, #8]
 80092cc:	4b17      	ldr	r3, [pc, #92]	; (800932c <HAL_TIM_Base_Start_IT+0xdc>)
 80092ce:	4013      	ands	r3, r2
 80092d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2b06      	cmp	r3, #6
 80092d6:	d015      	beq.n	8009304 <HAL_TIM_Base_Start_IT+0xb4>
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092de:	d011      	beq.n	8009304 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f042 0201 	orr.w	r2, r2, #1
 80092ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092f0:	e008      	b.n	8009304 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f042 0201 	orr.w	r2, r2, #1
 8009300:	601a      	str	r2, [r3, #0]
 8009302:	e000      	b.n	8009306 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009304:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3714      	adds	r7, #20
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr
 8009314:	40010000 	.word	0x40010000
 8009318:	40000400 	.word	0x40000400
 800931c:	40000800 	.word	0x40000800
 8009320:	40000c00 	.word	0x40000c00
 8009324:	40010400 	.word	0x40010400
 8009328:	40001800 	.word	0x40001800
 800932c:	00010007 	.word	0x00010007

08009330 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	f003 0302 	and.w	r3, r3, #2
 8009342:	2b02      	cmp	r3, #2
 8009344:	d122      	bne.n	800938c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	f003 0302 	and.w	r3, r3, #2
 8009350:	2b02      	cmp	r3, #2
 8009352:	d11b      	bne.n	800938c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f06f 0202 	mvn.w	r2, #2
 800935c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	f003 0303 	and.w	r3, r3, #3
 800936e:	2b00      	cmp	r3, #0
 8009370:	d003      	beq.n	800937a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f905 	bl	8009582 <HAL_TIM_IC_CaptureCallback>
 8009378:	e005      	b.n	8009386 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f8f7 	bl	800956e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 f908 	bl	8009596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	f003 0304 	and.w	r3, r3, #4
 8009396:	2b04      	cmp	r3, #4
 8009398:	d122      	bne.n	80093e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	f003 0304 	and.w	r3, r3, #4
 80093a4:	2b04      	cmp	r3, #4
 80093a6:	d11b      	bne.n	80093e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f06f 0204 	mvn.w	r2, #4
 80093b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2202      	movs	r2, #2
 80093b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	699b      	ldr	r3, [r3, #24]
 80093be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d003      	beq.n	80093ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f8db 	bl	8009582 <HAL_TIM_IC_CaptureCallback>
 80093cc:	e005      	b.n	80093da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f8cd 	bl	800956e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f8de 	bl	8009596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	f003 0308 	and.w	r3, r3, #8
 80093ea:	2b08      	cmp	r3, #8
 80093ec:	d122      	bne.n	8009434 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	f003 0308 	and.w	r3, r3, #8
 80093f8:	2b08      	cmp	r3, #8
 80093fa:	d11b      	bne.n	8009434 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f06f 0208 	mvn.w	r2, #8
 8009404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2204      	movs	r2, #4
 800940a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	69db      	ldr	r3, [r3, #28]
 8009412:	f003 0303 	and.w	r3, r3, #3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d003      	beq.n	8009422 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f8b1 	bl	8009582 <HAL_TIM_IC_CaptureCallback>
 8009420:	e005      	b.n	800942e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f8a3 	bl	800956e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f8b4 	bl	8009596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	f003 0310 	and.w	r3, r3, #16
 800943e:	2b10      	cmp	r3, #16
 8009440:	d122      	bne.n	8009488 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	f003 0310 	and.w	r3, r3, #16
 800944c:	2b10      	cmp	r3, #16
 800944e:	d11b      	bne.n	8009488 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f06f 0210 	mvn.w	r2, #16
 8009458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2208      	movs	r2, #8
 800945e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	69db      	ldr	r3, [r3, #28]
 8009466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800946a:	2b00      	cmp	r3, #0
 800946c:	d003      	beq.n	8009476 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f887 	bl	8009582 <HAL_TIM_IC_CaptureCallback>
 8009474:	e005      	b.n	8009482 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f879 	bl	800956e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f88a 	bl	8009596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	f003 0301 	and.w	r3, r3, #1
 8009492:	2b01      	cmp	r3, #1
 8009494:	d10e      	bne.n	80094b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	f003 0301 	and.w	r3, r3, #1
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d107      	bne.n	80094b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f06f 0201 	mvn.w	r2, #1
 80094ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f7f8 ff7c 	bl	80023ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094be:	2b80      	cmp	r3, #128	; 0x80
 80094c0:	d10e      	bne.n	80094e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094cc:	2b80      	cmp	r3, #128	; 0x80
 80094ce:	d107      	bne.n	80094e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80094d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 f914 	bl	8009708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094ee:	d10e      	bne.n	800950e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094fa:	2b80      	cmp	r3, #128	; 0x80
 80094fc:	d107      	bne.n	800950e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f907 	bl	800971c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009518:	2b40      	cmp	r3, #64	; 0x40
 800951a:	d10e      	bne.n	800953a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009526:	2b40      	cmp	r3, #64	; 0x40
 8009528:	d107      	bne.n	800953a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 f838 	bl	80095aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	f003 0320 	and.w	r3, r3, #32
 8009544:	2b20      	cmp	r3, #32
 8009546:	d10e      	bne.n	8009566 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	f003 0320 	and.w	r3, r3, #32
 8009552:	2b20      	cmp	r3, #32
 8009554:	d107      	bne.n	8009566 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f06f 0220 	mvn.w	r2, #32
 800955e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f8c7 	bl	80096f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009566:	bf00      	nop
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800956e:	b480      	push	{r7}
 8009570:	b083      	sub	sp, #12
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009576:	bf00      	nop
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr

08009582 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009582:	b480      	push	{r7}
 8009584:	b083      	sub	sp, #12
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800958a:	bf00      	nop
 800958c:	370c      	adds	r7, #12
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr

08009596 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009596:	b480      	push	{r7}
 8009598:	b083      	sub	sp, #12
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800959e:	bf00      	nop
 80095a0:	370c      	adds	r7, #12
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095aa:	b480      	push	{r7}
 80095ac:	b083      	sub	sp, #12
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095b2:	bf00      	nop
 80095b4:	370c      	adds	r7, #12
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
	...

080095c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a40      	ldr	r2, [pc, #256]	; (80096d4 <TIM_Base_SetConfig+0x114>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d013      	beq.n	8009600 <TIM_Base_SetConfig+0x40>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095de:	d00f      	beq.n	8009600 <TIM_Base_SetConfig+0x40>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a3d      	ldr	r2, [pc, #244]	; (80096d8 <TIM_Base_SetConfig+0x118>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d00b      	beq.n	8009600 <TIM_Base_SetConfig+0x40>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a3c      	ldr	r2, [pc, #240]	; (80096dc <TIM_Base_SetConfig+0x11c>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d007      	beq.n	8009600 <TIM_Base_SetConfig+0x40>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4a3b      	ldr	r2, [pc, #236]	; (80096e0 <TIM_Base_SetConfig+0x120>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d003      	beq.n	8009600 <TIM_Base_SetConfig+0x40>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a3a      	ldr	r2, [pc, #232]	; (80096e4 <TIM_Base_SetConfig+0x124>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d108      	bne.n	8009612 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	4313      	orrs	r3, r2
 8009610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a2f      	ldr	r2, [pc, #188]	; (80096d4 <TIM_Base_SetConfig+0x114>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d01f      	beq.n	800965a <TIM_Base_SetConfig+0x9a>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009620:	d01b      	beq.n	800965a <TIM_Base_SetConfig+0x9a>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a2c      	ldr	r2, [pc, #176]	; (80096d8 <TIM_Base_SetConfig+0x118>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d017      	beq.n	800965a <TIM_Base_SetConfig+0x9a>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a2b      	ldr	r2, [pc, #172]	; (80096dc <TIM_Base_SetConfig+0x11c>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d013      	beq.n	800965a <TIM_Base_SetConfig+0x9a>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a2a      	ldr	r2, [pc, #168]	; (80096e0 <TIM_Base_SetConfig+0x120>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d00f      	beq.n	800965a <TIM_Base_SetConfig+0x9a>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a29      	ldr	r2, [pc, #164]	; (80096e4 <TIM_Base_SetConfig+0x124>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d00b      	beq.n	800965a <TIM_Base_SetConfig+0x9a>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a28      	ldr	r2, [pc, #160]	; (80096e8 <TIM_Base_SetConfig+0x128>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d007      	beq.n	800965a <TIM_Base_SetConfig+0x9a>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a27      	ldr	r2, [pc, #156]	; (80096ec <TIM_Base_SetConfig+0x12c>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d003      	beq.n	800965a <TIM_Base_SetConfig+0x9a>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a26      	ldr	r2, [pc, #152]	; (80096f0 <TIM_Base_SetConfig+0x130>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d108      	bne.n	800966c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	4313      	orrs	r3, r2
 800966a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	4313      	orrs	r3, r2
 8009678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	689a      	ldr	r2, [r3, #8]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a10      	ldr	r2, [pc, #64]	; (80096d4 <TIM_Base_SetConfig+0x114>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d00f      	beq.n	80096b8 <TIM_Base_SetConfig+0xf8>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a12      	ldr	r2, [pc, #72]	; (80096e4 <TIM_Base_SetConfig+0x124>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d00b      	beq.n	80096b8 <TIM_Base_SetConfig+0xf8>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a11      	ldr	r2, [pc, #68]	; (80096e8 <TIM_Base_SetConfig+0x128>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d007      	beq.n	80096b8 <TIM_Base_SetConfig+0xf8>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a10      	ldr	r2, [pc, #64]	; (80096ec <TIM_Base_SetConfig+0x12c>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d003      	beq.n	80096b8 <TIM_Base_SetConfig+0xf8>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a0f      	ldr	r2, [pc, #60]	; (80096f0 <TIM_Base_SetConfig+0x130>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d103      	bne.n	80096c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	691a      	ldr	r2, [r3, #16]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2201      	movs	r2, #1
 80096c4:	615a      	str	r2, [r3, #20]
}
 80096c6:	bf00      	nop
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	40010000 	.word	0x40010000
 80096d8:	40000400 	.word	0x40000400
 80096dc:	40000800 	.word	0x40000800
 80096e0:	40000c00 	.word	0x40000c00
 80096e4:	40010400 	.word	0x40010400
 80096e8:	40014000 	.word	0x40014000
 80096ec:	40014400 	.word	0x40014400
 80096f0:	40014800 	.word	0x40014800

080096f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d101      	bne.n	8009742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	e042      	b.n	80097c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009748:	2b00      	cmp	r3, #0
 800974a:	d106      	bne.n	800975a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f7f8 fe5f 	bl	8002418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2224      	movs	r2, #36	; 0x24
 800975e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f022 0201 	bic.w	r2, r2, #1
 8009770:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 fc5a 	bl	800a02c <UART_SetConfig>
 8009778:	4603      	mov	r3, r0
 800977a:	2b01      	cmp	r3, #1
 800977c:	d101      	bne.n	8009782 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e022      	b.n	80097c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009786:	2b00      	cmp	r3, #0
 8009788:	d002      	beq.n	8009790 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f001 f9ae 	bl	800aaec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	685a      	ldr	r2, [r3, #4]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800979e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	689a      	ldr	r2, [r3, #8]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80097ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f042 0201 	orr.w	r2, r2, #1
 80097be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f001 fa35 	bl	800ac30 <UART_CheckIdleState>
 80097c6:	4603      	mov	r3, r0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3708      	adds	r7, #8
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	4613      	mov	r3, r2
 80097dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097e4:	2b20      	cmp	r3, #32
 80097e6:	d168      	bne.n	80098ba <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d002      	beq.n	80097f4 <HAL_UART_Transmit_DMA+0x24>
 80097ee:	88fb      	ldrh	r3, [r7, #6]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d101      	bne.n	80097f8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	e061      	b.n	80098bc <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d101      	bne.n	8009806 <HAL_UART_Transmit_DMA+0x36>
 8009802:	2302      	movs	r3, #2
 8009804:	e05a      	b.n	80098bc <HAL_UART_Transmit_DMA+0xec>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2201      	movs	r2, #1
 800980a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	68ba      	ldr	r2, [r7, #8]
 8009812:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	88fa      	ldrh	r2, [r7, #6]
 8009818:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	88fa      	ldrh	r2, [r7, #6]
 8009820:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2200      	movs	r2, #0
 8009828:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2221      	movs	r2, #33	; 0x21
 8009830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009838:	2b00      	cmp	r3, #0
 800983a:	d02c      	beq.n	8009896 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009840:	4a20      	ldr	r2, [pc, #128]	; (80098c4 <HAL_UART_Transmit_DMA+0xf4>)
 8009842:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009848:	4a1f      	ldr	r2, [pc, #124]	; (80098c8 <HAL_UART_Transmit_DMA+0xf8>)
 800984a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009850:	4a1e      	ldr	r2, [pc, #120]	; (80098cc <HAL_UART_Transmit_DMA+0xfc>)
 8009852:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009858:	2200      	movs	r2, #0
 800985a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009864:	4619      	mov	r1, r3
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	3328      	adds	r3, #40	; 0x28
 800986c:	461a      	mov	r2, r3
 800986e:	88fb      	ldrh	r3, [r7, #6]
 8009870:	f7fa fbe8 	bl	8004044 <HAL_DMA_Start_IT>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00d      	beq.n	8009896 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2210      	movs	r2, #16
 800987e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2220      	movs	r2, #32
 800988e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e012      	b.n	80098bc <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2240      	movs	r2, #64	; 0x40
 800989c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	689a      	ldr	r2, [r3, #8]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80098b4:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80098b6:	2300      	movs	r3, #0
 80098b8:	e000      	b.n	80098bc <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 80098ba:	2302      	movs	r3, #2
  }
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	0800af45 	.word	0x0800af45
 80098c8:	0800af95 	.word	0x0800af95
 80098cc:	0800b07f 	.word	0x0800b07f

080098d0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	4613      	mov	r3, r2
 80098dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098e4:	2b20      	cmp	r3, #32
 80098e6:	d131      	bne.n	800994c <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d002      	beq.n	80098f4 <HAL_UART_Receive_DMA+0x24>
 80098ee:	88fb      	ldrh	r3, [r7, #6]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d101      	bne.n	80098f8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	e02a      	b.n	800994e <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d101      	bne.n	8009906 <HAL_UART_Receive_DMA+0x36>
 8009902:	2302      	movs	r3, #2
 8009904:	e023      	b.n	800994e <HAL_UART_Receive_DMA+0x7e>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2201      	movs	r2, #1
 800990a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a0f      	ldr	r2, [pc, #60]	; (8009958 <HAL_UART_Receive_DMA+0x88>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d00e      	beq.n	800993c <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009928:	2b00      	cmp	r3, #0
 800992a:	d007      	beq.n	800993c <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800993a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800993c:	88fb      	ldrh	r3, [r7, #6]
 800993e:	461a      	mov	r2, r3
 8009940:	68b9      	ldr	r1, [r7, #8]
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	f001 fa40 	bl	800adc8 <UART_Start_Receive_DMA>
 8009948:	4603      	mov	r3, r0
 800994a:	e000      	b.n	800994e <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800994c:	2302      	movs	r3, #2
  }
}
 800994e:	4618      	mov	r0, r3
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	58000c00 	.word	0x58000c00

0800995c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800996a:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009972:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800997e:	2b80      	cmp	r3, #128	; 0x80
 8009980:	d127      	bne.n	80099d2 <HAL_UART_DMAStop+0x76>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2b21      	cmp	r3, #33	; 0x21
 8009986:	d124      	bne.n	80099d2 <HAL_UART_DMAStop+0x76>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	689a      	ldr	r2, [r3, #8]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009996:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800999c:	2b00      	cmp	r3, #0
 800999e:	d015      	beq.n	80099cc <HAL_UART_DMAStop+0x70>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7fa fdb7 	bl	8004518 <HAL_DMA_Abort>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00d      	beq.n	80099cc <HAL_UART_DMAStop+0x70>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7fc fa3b 	bl	8005e30 <HAL_DMA_GetError>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b20      	cmp	r3, #32
 80099be:	d105      	bne.n	80099cc <HAL_UART_DMAStop+0x70>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2210      	movs	r2, #16
 80099c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 80099c8:	2303      	movs	r3, #3
 80099ca:	e032      	b.n	8009a32 <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f001 fa69 	bl	800aea4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099dc:	2b40      	cmp	r3, #64	; 0x40
 80099de:	d127      	bne.n	8009a30 <HAL_UART_DMAStop+0xd4>
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	2b22      	cmp	r3, #34	; 0x22
 80099e4:	d124      	bne.n	8009a30 <HAL_UART_DMAStop+0xd4>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	689a      	ldr	r2, [r3, #8]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099f4:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d015      	beq.n	8009a2a <HAL_UART_DMAStop+0xce>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fa fd88 	bl	8004518 <HAL_DMA_Abort>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00d      	beq.n	8009a2a <HAL_UART_DMAStop+0xce>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fc fa0c 	bl	8005e30 <HAL_DMA_GetError>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b20      	cmp	r3, #32
 8009a1c:	d105      	bne.n	8009a2a <HAL_UART_DMAStop+0xce>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2210      	movs	r2, #16
 8009a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8009a26:	2303      	movs	r3, #3
 8009a28:	e003      	b.n	8009a32 <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f001 fa58 	bl	800aee0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
	...

08009a3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b088      	sub	sp, #32
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	69db      	ldr	r3, [r3, #28]
 8009a4a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009a5c:	69fa      	ldr	r2, [r7, #28]
 8009a5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009a62:	4013      	ands	r3, r2
 8009a64:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d118      	bne.n	8009a9e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	f003 0320 	and.w	r3, r3, #32
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d013      	beq.n	8009a9e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	f003 0320 	and.w	r3, r3, #32
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d104      	bne.n	8009a8a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d009      	beq.n	8009a9e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f000 8282 	beq.w	8009f98 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	4798      	blx	r3
      }
      return;
 8009a9c:	e27c      	b.n	8009f98 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	f000 80ef 	beq.w	8009c84 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	4b73      	ldr	r3, [pc, #460]	; (8009c78 <HAL_UART_IRQHandler+0x23c>)
 8009aaa:	4013      	ands	r3, r2
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d105      	bne.n	8009abc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009ab0:	69ba      	ldr	r2, [r7, #24]
 8009ab2:	4b72      	ldr	r3, [pc, #456]	; (8009c7c <HAL_UART_IRQHandler+0x240>)
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f000 80e4 	beq.w	8009c84 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	f003 0301 	and.w	r3, r3, #1
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d010      	beq.n	8009ae8 <HAL_UART_IRQHandler+0xac>
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d00b      	beq.n	8009ae8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ade:	f043 0201 	orr.w	r2, r3, #1
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	f003 0302 	and.w	r3, r3, #2
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d010      	beq.n	8009b14 <HAL_UART_IRQHandler+0xd8>
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f003 0301 	and.w	r3, r3, #1
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d00b      	beq.n	8009b14 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2202      	movs	r2, #2
 8009b02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b0a:	f043 0204 	orr.w	r2, r3, #4
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	f003 0304 	and.w	r3, r3, #4
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d010      	beq.n	8009b40 <HAL_UART_IRQHandler+0x104>
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	f003 0301 	and.w	r3, r3, #1
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d00b      	beq.n	8009b40 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2204      	movs	r2, #4
 8009b2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b36:	f043 0202 	orr.w	r2, r3, #2
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	f003 0308 	and.w	r3, r3, #8
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d015      	beq.n	8009b76 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	f003 0320 	and.w	r3, r3, #32
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d104      	bne.n	8009b5e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009b54:	697a      	ldr	r2, [r7, #20]
 8009b56:	4b48      	ldr	r3, [pc, #288]	; (8009c78 <HAL_UART_IRQHandler+0x23c>)
 8009b58:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00b      	beq.n	8009b76 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2208      	movs	r2, #8
 8009b64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b6c:	f043 0208 	orr.w	r2, r3, #8
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d011      	beq.n	8009ba4 <HAL_UART_IRQHandler+0x168>
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00c      	beq.n	8009ba4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b9a:	f043 0220 	orr.w	r2, r3, #32
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f000 81f6 	beq.w	8009f9c <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009bb0:	69fb      	ldr	r3, [r7, #28]
 8009bb2:	f003 0320 	and.w	r3, r3, #32
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d011      	beq.n	8009bde <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	f003 0320 	and.w	r3, r3, #32
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d104      	bne.n	8009bce <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d007      	beq.n	8009bde <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d003      	beq.n	8009bde <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009be4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bf0:	2b40      	cmp	r3, #64	; 0x40
 8009bf2:	d004      	beq.n	8009bfe <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d031      	beq.n	8009c62 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f001 f96e 	bl	800aee0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c0e:	2b40      	cmp	r3, #64	; 0x40
 8009c10:	d123      	bne.n	8009c5a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	689a      	ldr	r2, [r3, #8]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c20:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d013      	beq.n	8009c52 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c2e:	4a14      	ldr	r2, [pc, #80]	; (8009c80 <HAL_UART_IRQHandler+0x244>)
 8009c30:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fa ff8c 	bl	8004b54 <HAL_DMA_Abort_IT>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d017      	beq.n	8009c72 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009c4c:	4610      	mov	r0, r2
 8009c4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c50:	e00f      	b.n	8009c72 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f9d4 	bl	800a000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c58:	e00b      	b.n	8009c72 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 f9d0 	bl	800a000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c60:	e007      	b.n	8009c72 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 f9cc 	bl	800a000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009c70:	e194      	b.n	8009f9c <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c72:	bf00      	nop
    return;
 8009c74:	e192      	b.n	8009f9c <HAL_UART_IRQHandler+0x560>
 8009c76:	bf00      	nop
 8009c78:	10000001 	.word	0x10000001
 8009c7c:	04000120 	.word	0x04000120
 8009c80:	0800b0ff 	.word	0x0800b0ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	f040 810f 	bne.w	8009eac <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	f003 0310 	and.w	r3, r3, #16
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f000 8109 	beq.w	8009eac <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	f003 0310 	and.w	r3, r3, #16
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 8103 	beq.w	8009eac <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2210      	movs	r2, #16
 8009cac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cb8:	2b40      	cmp	r3, #64	; 0x40
 8009cba:	f040 80bb 	bne.w	8009e34 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a96      	ldr	r2, [pc, #600]	; (8009f20 <HAL_UART_IRQHandler+0x4e4>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d059      	beq.n	8009d7e <HAL_UART_IRQHandler+0x342>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a94      	ldr	r2, [pc, #592]	; (8009f24 <HAL_UART_IRQHandler+0x4e8>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d053      	beq.n	8009d7e <HAL_UART_IRQHandler+0x342>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a92      	ldr	r2, [pc, #584]	; (8009f28 <HAL_UART_IRQHandler+0x4ec>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d04d      	beq.n	8009d7e <HAL_UART_IRQHandler+0x342>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a90      	ldr	r2, [pc, #576]	; (8009f2c <HAL_UART_IRQHandler+0x4f0>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d047      	beq.n	8009d7e <HAL_UART_IRQHandler+0x342>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a8e      	ldr	r2, [pc, #568]	; (8009f30 <HAL_UART_IRQHandler+0x4f4>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d041      	beq.n	8009d7e <HAL_UART_IRQHandler+0x342>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a8c      	ldr	r2, [pc, #560]	; (8009f34 <HAL_UART_IRQHandler+0x4f8>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d03b      	beq.n	8009d7e <HAL_UART_IRQHandler+0x342>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a8a      	ldr	r2, [pc, #552]	; (8009f38 <HAL_UART_IRQHandler+0x4fc>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d035      	beq.n	8009d7e <HAL_UART_IRQHandler+0x342>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a88      	ldr	r2, [pc, #544]	; (8009f3c <HAL_UART_IRQHandler+0x500>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d02f      	beq.n	8009d7e <HAL_UART_IRQHandler+0x342>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a86      	ldr	r2, [pc, #536]	; (8009f40 <HAL_UART_IRQHandler+0x504>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d029      	beq.n	8009d7e <HAL_UART_IRQHandler+0x342>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a84      	ldr	r2, [pc, #528]	; (8009f44 <HAL_UART_IRQHandler+0x508>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d023      	beq.n	8009d7e <HAL_UART_IRQHandler+0x342>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a82      	ldr	r2, [pc, #520]	; (8009f48 <HAL_UART_IRQHandler+0x50c>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d01d      	beq.n	8009d7e <HAL_UART_IRQHandler+0x342>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a80      	ldr	r2, [pc, #512]	; (8009f4c <HAL_UART_IRQHandler+0x510>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d017      	beq.n	8009d7e <HAL_UART_IRQHandler+0x342>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a7e      	ldr	r2, [pc, #504]	; (8009f50 <HAL_UART_IRQHandler+0x514>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d011      	beq.n	8009d7e <HAL_UART_IRQHandler+0x342>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a7c      	ldr	r2, [pc, #496]	; (8009f54 <HAL_UART_IRQHandler+0x518>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d00b      	beq.n	8009d7e <HAL_UART_IRQHandler+0x342>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a7a      	ldr	r2, [pc, #488]	; (8009f58 <HAL_UART_IRQHandler+0x51c>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d005      	beq.n	8009d7e <HAL_UART_IRQHandler+0x342>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a78      	ldr	r2, [pc, #480]	; (8009f5c <HAL_UART_IRQHandler+0x520>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d105      	bne.n	8009d8a <HAL_UART_IRQHandler+0x34e>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	e004      	b.n	8009d94 <HAL_UART_IRQHandler+0x358>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8009d96:	893b      	ldrh	r3, [r7, #8]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f000 8101 	beq.w	8009fa0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009da4:	893a      	ldrh	r2, [r7, #8]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	f080 80fa 	bcs.w	8009fa0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	893a      	ldrh	r2, [r7, #8]
 8009db0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009db8:	69db      	ldr	r3, [r3, #28]
 8009dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dbe:	d02b      	beq.n	8009e18 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009dce:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	689a      	ldr	r2, [r3, #8]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f022 0201 	bic.w	r2, r2, #1
 8009dde:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	689a      	ldr	r2, [r3, #8]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009dee:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2220      	movs	r2, #32
 8009df4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f022 0210 	bic.w	r2, r2, #16
 8009e0c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7fa fb80 	bl	8004518 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	1ad3      	subs	r3, r2, r3
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f8f1 	bl	800a014 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e32:	e0b5      	b.n	8009fa0 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f000 80a8 	beq.w	8009fa4 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8009e54:	897b      	ldrh	r3, [r7, #10]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	f000 80a4 	beq.w	8009fa4 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009e6a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	6899      	ldr	r1, [r3, #8]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	4b3a      	ldr	r3, [pc, #232]	; (8009f60 <HAL_UART_IRQHandler+0x524>)
 8009e78:	400b      	ands	r3, r1
 8009e7a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2220      	movs	r2, #32
 8009e80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f022 0210 	bic.w	r2, r2, #16
 8009e9e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ea0:	897b      	ldrh	r3, [r7, #10]
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 f8b5 	bl	800a014 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009eaa:	e07b      	b.n	8009fa4 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00d      	beq.n	8009ed2 <HAL_UART_IRQHandler+0x496>
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d008      	beq.n	8009ed2 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009ec8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f001 f947 	bl	800b15e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ed0:	e06b      	b.n	8009faa <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d012      	beq.n	8009f02 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009edc:	69bb      	ldr	r3, [r7, #24]
 8009ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d104      	bne.n	8009ef0 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d008      	beq.n	8009f02 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d057      	beq.n	8009fa8 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	4798      	blx	r3
    }
    return;
 8009f00:	e052      	b.n	8009fa8 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d02b      	beq.n	8009f64 <HAL_UART_IRQHandler+0x528>
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d026      	beq.n	8009f64 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f001 f907 	bl	800b12a <UART_EndTransmit_IT>
    return;
 8009f1c:	e045      	b.n	8009faa <HAL_UART_IRQHandler+0x56e>
 8009f1e:	bf00      	nop
 8009f20:	40020010 	.word	0x40020010
 8009f24:	40020028 	.word	0x40020028
 8009f28:	40020040 	.word	0x40020040
 8009f2c:	40020058 	.word	0x40020058
 8009f30:	40020070 	.word	0x40020070
 8009f34:	40020088 	.word	0x40020088
 8009f38:	400200a0 	.word	0x400200a0
 8009f3c:	400200b8 	.word	0x400200b8
 8009f40:	40020410 	.word	0x40020410
 8009f44:	40020428 	.word	0x40020428
 8009f48:	40020440 	.word	0x40020440
 8009f4c:	40020458 	.word	0x40020458
 8009f50:	40020470 	.word	0x40020470
 8009f54:	40020488 	.word	0x40020488
 8009f58:	400204a0 	.word	0x400204a0
 8009f5c:	400204b8 	.word	0x400204b8
 8009f60:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d008      	beq.n	8009f80 <HAL_UART_IRQHandler+0x544>
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d003      	beq.n	8009f80 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f001 f904 	bl	800b186 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f7e:	e014      	b.n	8009faa <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00f      	beq.n	8009faa <HAL_UART_IRQHandler+0x56e>
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	da0c      	bge.n	8009faa <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f001 f8ee 	bl	800b172 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f96:	e008      	b.n	8009faa <HAL_UART_IRQHandler+0x56e>
      return;
 8009f98:	bf00      	nop
 8009f9a:	e006      	b.n	8009faa <HAL_UART_IRQHandler+0x56e>
    return;
 8009f9c:	bf00      	nop
 8009f9e:	e004      	b.n	8009faa <HAL_UART_IRQHandler+0x56e>
      return;
 8009fa0:	bf00      	nop
 8009fa2:	e002      	b.n	8009faa <HAL_UART_IRQHandler+0x56e>
      return;
 8009fa4:	bf00      	nop
 8009fa6:	e000      	b.n	8009faa <HAL_UART_IRQHandler+0x56e>
    return;
 8009fa8:	bf00      	nop
  }
}
 8009faa:	3720      	adds	r7, #32
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009fb8:	bf00      	nop
 8009fba:	370c      	adds	r7, #12
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009fcc:	bf00      	nop
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009fe0:	bf00      	nop
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009ff4:	bf00      	nop
 8009ff6:	370c      	adds	r7, #12
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a008:	bf00      	nop
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	460b      	mov	r3, r1
 800a01e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a020:	bf00      	nop
 800a022:	370c      	adds	r7, #12
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a02c:	b5b0      	push	{r4, r5, r7, lr}
 800a02e:	b08e      	sub	sp, #56	; 0x38
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a034:	2300      	movs	r3, #0
 800a036:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	689a      	ldr	r2, [r3, #8]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	691b      	ldr	r3, [r3, #16]
 800a042:	431a      	orrs	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	695b      	ldr	r3, [r3, #20]
 800a048:	431a      	orrs	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	69db      	ldr	r3, [r3, #28]
 800a04e:	4313      	orrs	r3, r2
 800a050:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	4bbf      	ldr	r3, [pc, #764]	; (800a358 <UART_SetConfig+0x32c>)
 800a05a:	4013      	ands	r3, r2
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	6812      	ldr	r2, [r2, #0]
 800a060:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a062:	430b      	orrs	r3, r1
 800a064:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	68da      	ldr	r2, [r3, #12]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	430a      	orrs	r2, r1
 800a07a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	699b      	ldr	r3, [r3, #24]
 800a080:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4ab5      	ldr	r2, [pc, #724]	; (800a35c <UART_SetConfig+0x330>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d004      	beq.n	800a096 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a1b      	ldr	r3, [r3, #32]
 800a090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a092:	4313      	orrs	r3, r2
 800a094:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	689a      	ldr	r2, [r3, #8]
 800a09c:	4bb0      	ldr	r3, [pc, #704]	; (800a360 <UART_SetConfig+0x334>)
 800a09e:	4013      	ands	r3, r2
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	6812      	ldr	r2, [r2, #0]
 800a0a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a0a6:	430b      	orrs	r3, r1
 800a0a8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b0:	f023 010f 	bic.w	r1, r3, #15
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	430a      	orrs	r2, r1
 800a0be:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4aa7      	ldr	r2, [pc, #668]	; (800a364 <UART_SetConfig+0x338>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d176      	bne.n	800a1b8 <UART_SetConfig+0x18c>
 800a0ca:	4ba7      	ldr	r3, [pc, #668]	; (800a368 <UART_SetConfig+0x33c>)
 800a0cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0d2:	2b28      	cmp	r3, #40	; 0x28
 800a0d4:	d86c      	bhi.n	800a1b0 <UART_SetConfig+0x184>
 800a0d6:	a201      	add	r2, pc, #4	; (adr r2, 800a0dc <UART_SetConfig+0xb0>)
 800a0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0dc:	0800a181 	.word	0x0800a181
 800a0e0:	0800a1b1 	.word	0x0800a1b1
 800a0e4:	0800a1b1 	.word	0x0800a1b1
 800a0e8:	0800a1b1 	.word	0x0800a1b1
 800a0ec:	0800a1b1 	.word	0x0800a1b1
 800a0f0:	0800a1b1 	.word	0x0800a1b1
 800a0f4:	0800a1b1 	.word	0x0800a1b1
 800a0f8:	0800a1b1 	.word	0x0800a1b1
 800a0fc:	0800a189 	.word	0x0800a189
 800a100:	0800a1b1 	.word	0x0800a1b1
 800a104:	0800a1b1 	.word	0x0800a1b1
 800a108:	0800a1b1 	.word	0x0800a1b1
 800a10c:	0800a1b1 	.word	0x0800a1b1
 800a110:	0800a1b1 	.word	0x0800a1b1
 800a114:	0800a1b1 	.word	0x0800a1b1
 800a118:	0800a1b1 	.word	0x0800a1b1
 800a11c:	0800a191 	.word	0x0800a191
 800a120:	0800a1b1 	.word	0x0800a1b1
 800a124:	0800a1b1 	.word	0x0800a1b1
 800a128:	0800a1b1 	.word	0x0800a1b1
 800a12c:	0800a1b1 	.word	0x0800a1b1
 800a130:	0800a1b1 	.word	0x0800a1b1
 800a134:	0800a1b1 	.word	0x0800a1b1
 800a138:	0800a1b1 	.word	0x0800a1b1
 800a13c:	0800a199 	.word	0x0800a199
 800a140:	0800a1b1 	.word	0x0800a1b1
 800a144:	0800a1b1 	.word	0x0800a1b1
 800a148:	0800a1b1 	.word	0x0800a1b1
 800a14c:	0800a1b1 	.word	0x0800a1b1
 800a150:	0800a1b1 	.word	0x0800a1b1
 800a154:	0800a1b1 	.word	0x0800a1b1
 800a158:	0800a1b1 	.word	0x0800a1b1
 800a15c:	0800a1a1 	.word	0x0800a1a1
 800a160:	0800a1b1 	.word	0x0800a1b1
 800a164:	0800a1b1 	.word	0x0800a1b1
 800a168:	0800a1b1 	.word	0x0800a1b1
 800a16c:	0800a1b1 	.word	0x0800a1b1
 800a170:	0800a1b1 	.word	0x0800a1b1
 800a174:	0800a1b1 	.word	0x0800a1b1
 800a178:	0800a1b1 	.word	0x0800a1b1
 800a17c:	0800a1a9 	.word	0x0800a1a9
 800a180:	2301      	movs	r3, #1
 800a182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a186:	e222      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a188:	2304      	movs	r3, #4
 800a18a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a18e:	e21e      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a190:	2308      	movs	r3, #8
 800a192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a196:	e21a      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a198:	2310      	movs	r3, #16
 800a19a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a19e:	e216      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a1a0:	2320      	movs	r3, #32
 800a1a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1a6:	e212      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a1a8:	2340      	movs	r3, #64	; 0x40
 800a1aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ae:	e20e      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a1b0:	2380      	movs	r3, #128	; 0x80
 800a1b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1b6:	e20a      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a6b      	ldr	r2, [pc, #428]	; (800a36c <UART_SetConfig+0x340>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d130      	bne.n	800a224 <UART_SetConfig+0x1f8>
 800a1c2:	4b69      	ldr	r3, [pc, #420]	; (800a368 <UART_SetConfig+0x33c>)
 800a1c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1c6:	f003 0307 	and.w	r3, r3, #7
 800a1ca:	2b05      	cmp	r3, #5
 800a1cc:	d826      	bhi.n	800a21c <UART_SetConfig+0x1f0>
 800a1ce:	a201      	add	r2, pc, #4	; (adr r2, 800a1d4 <UART_SetConfig+0x1a8>)
 800a1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d4:	0800a1ed 	.word	0x0800a1ed
 800a1d8:	0800a1f5 	.word	0x0800a1f5
 800a1dc:	0800a1fd 	.word	0x0800a1fd
 800a1e0:	0800a205 	.word	0x0800a205
 800a1e4:	0800a20d 	.word	0x0800a20d
 800a1e8:	0800a215 	.word	0x0800a215
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1f2:	e1ec      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a1f4:	2304      	movs	r3, #4
 800a1f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1fa:	e1e8      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a1fc:	2308      	movs	r3, #8
 800a1fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a202:	e1e4      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a204:	2310      	movs	r3, #16
 800a206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a20a:	e1e0      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a20c:	2320      	movs	r3, #32
 800a20e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a212:	e1dc      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a214:	2340      	movs	r3, #64	; 0x40
 800a216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a21a:	e1d8      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a21c:	2380      	movs	r3, #128	; 0x80
 800a21e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a222:	e1d4      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a51      	ldr	r2, [pc, #324]	; (800a370 <UART_SetConfig+0x344>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d130      	bne.n	800a290 <UART_SetConfig+0x264>
 800a22e:	4b4e      	ldr	r3, [pc, #312]	; (800a368 <UART_SetConfig+0x33c>)
 800a230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a232:	f003 0307 	and.w	r3, r3, #7
 800a236:	2b05      	cmp	r3, #5
 800a238:	d826      	bhi.n	800a288 <UART_SetConfig+0x25c>
 800a23a:	a201      	add	r2, pc, #4	; (adr r2, 800a240 <UART_SetConfig+0x214>)
 800a23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a240:	0800a259 	.word	0x0800a259
 800a244:	0800a261 	.word	0x0800a261
 800a248:	0800a269 	.word	0x0800a269
 800a24c:	0800a271 	.word	0x0800a271
 800a250:	0800a279 	.word	0x0800a279
 800a254:	0800a281 	.word	0x0800a281
 800a258:	2300      	movs	r3, #0
 800a25a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a25e:	e1b6      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a260:	2304      	movs	r3, #4
 800a262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a266:	e1b2      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a268:	2308      	movs	r3, #8
 800a26a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a26e:	e1ae      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a270:	2310      	movs	r3, #16
 800a272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a276:	e1aa      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a278:	2320      	movs	r3, #32
 800a27a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a27e:	e1a6      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a280:	2340      	movs	r3, #64	; 0x40
 800a282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a286:	e1a2      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a288:	2380      	movs	r3, #128	; 0x80
 800a28a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a28e:	e19e      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a37      	ldr	r2, [pc, #220]	; (800a374 <UART_SetConfig+0x348>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d130      	bne.n	800a2fc <UART_SetConfig+0x2d0>
 800a29a:	4b33      	ldr	r3, [pc, #204]	; (800a368 <UART_SetConfig+0x33c>)
 800a29c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a29e:	f003 0307 	and.w	r3, r3, #7
 800a2a2:	2b05      	cmp	r3, #5
 800a2a4:	d826      	bhi.n	800a2f4 <UART_SetConfig+0x2c8>
 800a2a6:	a201      	add	r2, pc, #4	; (adr r2, 800a2ac <UART_SetConfig+0x280>)
 800a2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ac:	0800a2c5 	.word	0x0800a2c5
 800a2b0:	0800a2cd 	.word	0x0800a2cd
 800a2b4:	0800a2d5 	.word	0x0800a2d5
 800a2b8:	0800a2dd 	.word	0x0800a2dd
 800a2bc:	0800a2e5 	.word	0x0800a2e5
 800a2c0:	0800a2ed 	.word	0x0800a2ed
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ca:	e180      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a2cc:	2304      	movs	r3, #4
 800a2ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2d2:	e17c      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a2d4:	2308      	movs	r3, #8
 800a2d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2da:	e178      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a2dc:	2310      	movs	r3, #16
 800a2de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2e2:	e174      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a2e4:	2320      	movs	r3, #32
 800a2e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ea:	e170      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a2ec:	2340      	movs	r3, #64	; 0x40
 800a2ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2f2:	e16c      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a2f4:	2380      	movs	r3, #128	; 0x80
 800a2f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2fa:	e168      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a1d      	ldr	r2, [pc, #116]	; (800a378 <UART_SetConfig+0x34c>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d142      	bne.n	800a38c <UART_SetConfig+0x360>
 800a306:	4b18      	ldr	r3, [pc, #96]	; (800a368 <UART_SetConfig+0x33c>)
 800a308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a30a:	f003 0307 	and.w	r3, r3, #7
 800a30e:	2b05      	cmp	r3, #5
 800a310:	d838      	bhi.n	800a384 <UART_SetConfig+0x358>
 800a312:	a201      	add	r2, pc, #4	; (adr r2, 800a318 <UART_SetConfig+0x2ec>)
 800a314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a318:	0800a331 	.word	0x0800a331
 800a31c:	0800a339 	.word	0x0800a339
 800a320:	0800a341 	.word	0x0800a341
 800a324:	0800a349 	.word	0x0800a349
 800a328:	0800a351 	.word	0x0800a351
 800a32c:	0800a37d 	.word	0x0800a37d
 800a330:	2300      	movs	r3, #0
 800a332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a336:	e14a      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a338:	2304      	movs	r3, #4
 800a33a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a33e:	e146      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a340:	2308      	movs	r3, #8
 800a342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a346:	e142      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a348:	2310      	movs	r3, #16
 800a34a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a34e:	e13e      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a350:	2320      	movs	r3, #32
 800a352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a356:	e13a      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a358:	cfff69f3 	.word	0xcfff69f3
 800a35c:	58000c00 	.word	0x58000c00
 800a360:	11fff4ff 	.word	0x11fff4ff
 800a364:	40011000 	.word	0x40011000
 800a368:	58024400 	.word	0x58024400
 800a36c:	40004400 	.word	0x40004400
 800a370:	40004800 	.word	0x40004800
 800a374:	40004c00 	.word	0x40004c00
 800a378:	40005000 	.word	0x40005000
 800a37c:	2340      	movs	r3, #64	; 0x40
 800a37e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a382:	e124      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a384:	2380      	movs	r3, #128	; 0x80
 800a386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a38a:	e120      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4acc      	ldr	r2, [pc, #816]	; (800a6c4 <UART_SetConfig+0x698>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d176      	bne.n	800a484 <UART_SetConfig+0x458>
 800a396:	4bcc      	ldr	r3, [pc, #816]	; (800a6c8 <UART_SetConfig+0x69c>)
 800a398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a39a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a39e:	2b28      	cmp	r3, #40	; 0x28
 800a3a0:	d86c      	bhi.n	800a47c <UART_SetConfig+0x450>
 800a3a2:	a201      	add	r2, pc, #4	; (adr r2, 800a3a8 <UART_SetConfig+0x37c>)
 800a3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a8:	0800a44d 	.word	0x0800a44d
 800a3ac:	0800a47d 	.word	0x0800a47d
 800a3b0:	0800a47d 	.word	0x0800a47d
 800a3b4:	0800a47d 	.word	0x0800a47d
 800a3b8:	0800a47d 	.word	0x0800a47d
 800a3bc:	0800a47d 	.word	0x0800a47d
 800a3c0:	0800a47d 	.word	0x0800a47d
 800a3c4:	0800a47d 	.word	0x0800a47d
 800a3c8:	0800a455 	.word	0x0800a455
 800a3cc:	0800a47d 	.word	0x0800a47d
 800a3d0:	0800a47d 	.word	0x0800a47d
 800a3d4:	0800a47d 	.word	0x0800a47d
 800a3d8:	0800a47d 	.word	0x0800a47d
 800a3dc:	0800a47d 	.word	0x0800a47d
 800a3e0:	0800a47d 	.word	0x0800a47d
 800a3e4:	0800a47d 	.word	0x0800a47d
 800a3e8:	0800a45d 	.word	0x0800a45d
 800a3ec:	0800a47d 	.word	0x0800a47d
 800a3f0:	0800a47d 	.word	0x0800a47d
 800a3f4:	0800a47d 	.word	0x0800a47d
 800a3f8:	0800a47d 	.word	0x0800a47d
 800a3fc:	0800a47d 	.word	0x0800a47d
 800a400:	0800a47d 	.word	0x0800a47d
 800a404:	0800a47d 	.word	0x0800a47d
 800a408:	0800a465 	.word	0x0800a465
 800a40c:	0800a47d 	.word	0x0800a47d
 800a410:	0800a47d 	.word	0x0800a47d
 800a414:	0800a47d 	.word	0x0800a47d
 800a418:	0800a47d 	.word	0x0800a47d
 800a41c:	0800a47d 	.word	0x0800a47d
 800a420:	0800a47d 	.word	0x0800a47d
 800a424:	0800a47d 	.word	0x0800a47d
 800a428:	0800a46d 	.word	0x0800a46d
 800a42c:	0800a47d 	.word	0x0800a47d
 800a430:	0800a47d 	.word	0x0800a47d
 800a434:	0800a47d 	.word	0x0800a47d
 800a438:	0800a47d 	.word	0x0800a47d
 800a43c:	0800a47d 	.word	0x0800a47d
 800a440:	0800a47d 	.word	0x0800a47d
 800a444:	0800a47d 	.word	0x0800a47d
 800a448:	0800a475 	.word	0x0800a475
 800a44c:	2301      	movs	r3, #1
 800a44e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a452:	e0bc      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a454:	2304      	movs	r3, #4
 800a456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a45a:	e0b8      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a45c:	2308      	movs	r3, #8
 800a45e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a462:	e0b4      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a464:	2310      	movs	r3, #16
 800a466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a46a:	e0b0      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a46c:	2320      	movs	r3, #32
 800a46e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a472:	e0ac      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a474:	2340      	movs	r3, #64	; 0x40
 800a476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a47a:	e0a8      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a47c:	2380      	movs	r3, #128	; 0x80
 800a47e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a482:	e0a4      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a90      	ldr	r2, [pc, #576]	; (800a6cc <UART_SetConfig+0x6a0>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d130      	bne.n	800a4f0 <UART_SetConfig+0x4c4>
 800a48e:	4b8e      	ldr	r3, [pc, #568]	; (800a6c8 <UART_SetConfig+0x69c>)
 800a490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a492:	f003 0307 	and.w	r3, r3, #7
 800a496:	2b05      	cmp	r3, #5
 800a498:	d826      	bhi.n	800a4e8 <UART_SetConfig+0x4bc>
 800a49a:	a201      	add	r2, pc, #4	; (adr r2, 800a4a0 <UART_SetConfig+0x474>)
 800a49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a0:	0800a4b9 	.word	0x0800a4b9
 800a4a4:	0800a4c1 	.word	0x0800a4c1
 800a4a8:	0800a4c9 	.word	0x0800a4c9
 800a4ac:	0800a4d1 	.word	0x0800a4d1
 800a4b0:	0800a4d9 	.word	0x0800a4d9
 800a4b4:	0800a4e1 	.word	0x0800a4e1
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4be:	e086      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a4c0:	2304      	movs	r3, #4
 800a4c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4c6:	e082      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a4c8:	2308      	movs	r3, #8
 800a4ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ce:	e07e      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a4d0:	2310      	movs	r3, #16
 800a4d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4d6:	e07a      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a4d8:	2320      	movs	r3, #32
 800a4da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4de:	e076      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a4e0:	2340      	movs	r3, #64	; 0x40
 800a4e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4e6:	e072      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a4e8:	2380      	movs	r3, #128	; 0x80
 800a4ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ee:	e06e      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a76      	ldr	r2, [pc, #472]	; (800a6d0 <UART_SetConfig+0x6a4>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d130      	bne.n	800a55c <UART_SetConfig+0x530>
 800a4fa:	4b73      	ldr	r3, [pc, #460]	; (800a6c8 <UART_SetConfig+0x69c>)
 800a4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4fe:	f003 0307 	and.w	r3, r3, #7
 800a502:	2b05      	cmp	r3, #5
 800a504:	d826      	bhi.n	800a554 <UART_SetConfig+0x528>
 800a506:	a201      	add	r2, pc, #4	; (adr r2, 800a50c <UART_SetConfig+0x4e0>)
 800a508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50c:	0800a525 	.word	0x0800a525
 800a510:	0800a52d 	.word	0x0800a52d
 800a514:	0800a535 	.word	0x0800a535
 800a518:	0800a53d 	.word	0x0800a53d
 800a51c:	0800a545 	.word	0x0800a545
 800a520:	0800a54d 	.word	0x0800a54d
 800a524:	2300      	movs	r3, #0
 800a526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a52a:	e050      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a52c:	2304      	movs	r3, #4
 800a52e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a532:	e04c      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a534:	2308      	movs	r3, #8
 800a536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a53a:	e048      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a53c:	2310      	movs	r3, #16
 800a53e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a542:	e044      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a544:	2320      	movs	r3, #32
 800a546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a54a:	e040      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a54c:	2340      	movs	r3, #64	; 0x40
 800a54e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a552:	e03c      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a554:	2380      	movs	r3, #128	; 0x80
 800a556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a55a:	e038      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a5c      	ldr	r2, [pc, #368]	; (800a6d4 <UART_SetConfig+0x6a8>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d130      	bne.n	800a5c8 <UART_SetConfig+0x59c>
 800a566:	4b58      	ldr	r3, [pc, #352]	; (800a6c8 <UART_SetConfig+0x69c>)
 800a568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a56a:	f003 0307 	and.w	r3, r3, #7
 800a56e:	2b05      	cmp	r3, #5
 800a570:	d826      	bhi.n	800a5c0 <UART_SetConfig+0x594>
 800a572:	a201      	add	r2, pc, #4	; (adr r2, 800a578 <UART_SetConfig+0x54c>)
 800a574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a578:	0800a591 	.word	0x0800a591
 800a57c:	0800a599 	.word	0x0800a599
 800a580:	0800a5a1 	.word	0x0800a5a1
 800a584:	0800a5a9 	.word	0x0800a5a9
 800a588:	0800a5b1 	.word	0x0800a5b1
 800a58c:	0800a5b9 	.word	0x0800a5b9
 800a590:	2302      	movs	r3, #2
 800a592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a596:	e01a      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a598:	2304      	movs	r3, #4
 800a59a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a59e:	e016      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a5a0:	2308      	movs	r3, #8
 800a5a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5a6:	e012      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a5a8:	2310      	movs	r3, #16
 800a5aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ae:	e00e      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a5b0:	2320      	movs	r3, #32
 800a5b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5b6:	e00a      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a5b8:	2340      	movs	r3, #64	; 0x40
 800a5ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5be:	e006      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a5c0:	2380      	movs	r3, #128	; 0x80
 800a5c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5c6:	e002      	b.n	800a5ce <UART_SetConfig+0x5a2>
 800a5c8:	2380      	movs	r3, #128	; 0x80
 800a5ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a40      	ldr	r2, [pc, #256]	; (800a6d4 <UART_SetConfig+0x6a8>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	f040 80ef 	bne.w	800a7b8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a5da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a5de:	2b20      	cmp	r3, #32
 800a5e0:	dc46      	bgt.n	800a670 <UART_SetConfig+0x644>
 800a5e2:	2b02      	cmp	r3, #2
 800a5e4:	f2c0 8081 	blt.w	800a6ea <UART_SetConfig+0x6be>
 800a5e8:	3b02      	subs	r3, #2
 800a5ea:	2b1e      	cmp	r3, #30
 800a5ec:	d87d      	bhi.n	800a6ea <UART_SetConfig+0x6be>
 800a5ee:	a201      	add	r2, pc, #4	; (adr r2, 800a5f4 <UART_SetConfig+0x5c8>)
 800a5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f4:	0800a677 	.word	0x0800a677
 800a5f8:	0800a6eb 	.word	0x0800a6eb
 800a5fc:	0800a67f 	.word	0x0800a67f
 800a600:	0800a6eb 	.word	0x0800a6eb
 800a604:	0800a6eb 	.word	0x0800a6eb
 800a608:	0800a6eb 	.word	0x0800a6eb
 800a60c:	0800a68f 	.word	0x0800a68f
 800a610:	0800a6eb 	.word	0x0800a6eb
 800a614:	0800a6eb 	.word	0x0800a6eb
 800a618:	0800a6eb 	.word	0x0800a6eb
 800a61c:	0800a6eb 	.word	0x0800a6eb
 800a620:	0800a6eb 	.word	0x0800a6eb
 800a624:	0800a6eb 	.word	0x0800a6eb
 800a628:	0800a6eb 	.word	0x0800a6eb
 800a62c:	0800a69f 	.word	0x0800a69f
 800a630:	0800a6eb 	.word	0x0800a6eb
 800a634:	0800a6eb 	.word	0x0800a6eb
 800a638:	0800a6eb 	.word	0x0800a6eb
 800a63c:	0800a6eb 	.word	0x0800a6eb
 800a640:	0800a6eb 	.word	0x0800a6eb
 800a644:	0800a6eb 	.word	0x0800a6eb
 800a648:	0800a6eb 	.word	0x0800a6eb
 800a64c:	0800a6eb 	.word	0x0800a6eb
 800a650:	0800a6eb 	.word	0x0800a6eb
 800a654:	0800a6eb 	.word	0x0800a6eb
 800a658:	0800a6eb 	.word	0x0800a6eb
 800a65c:	0800a6eb 	.word	0x0800a6eb
 800a660:	0800a6eb 	.word	0x0800a6eb
 800a664:	0800a6eb 	.word	0x0800a6eb
 800a668:	0800a6eb 	.word	0x0800a6eb
 800a66c:	0800a6dd 	.word	0x0800a6dd
 800a670:	2b40      	cmp	r3, #64	; 0x40
 800a672:	d036      	beq.n	800a6e2 <UART_SetConfig+0x6b6>
 800a674:	e039      	b.n	800a6ea <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a676:	f7fe f967 	bl	8008948 <HAL_RCCEx_GetD3PCLK1Freq>
 800a67a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a67c:	e03b      	b.n	800a6f6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a67e:	f107 0314 	add.w	r3, r7, #20
 800a682:	4618      	mov	r0, r3
 800a684:	f7fe f976 	bl	8008974 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a68c:	e033      	b.n	800a6f6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a68e:	f107 0308 	add.w	r3, r7, #8
 800a692:	4618      	mov	r0, r3
 800a694:	f7fe fac2 	bl	8008c1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a69c:	e02b      	b.n	800a6f6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a69e:	4b0a      	ldr	r3, [pc, #40]	; (800a6c8 <UART_SetConfig+0x69c>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f003 0320 	and.w	r3, r3, #32
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d009      	beq.n	800a6be <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a6aa:	4b07      	ldr	r3, [pc, #28]	; (800a6c8 <UART_SetConfig+0x69c>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	08db      	lsrs	r3, r3, #3
 800a6b0:	f003 0303 	and.w	r3, r3, #3
 800a6b4:	4a08      	ldr	r2, [pc, #32]	; (800a6d8 <UART_SetConfig+0x6ac>)
 800a6b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a6bc:	e01b      	b.n	800a6f6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800a6be:	4b06      	ldr	r3, [pc, #24]	; (800a6d8 <UART_SetConfig+0x6ac>)
 800a6c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6c2:	e018      	b.n	800a6f6 <UART_SetConfig+0x6ca>
 800a6c4:	40011400 	.word	0x40011400
 800a6c8:	58024400 	.word	0x58024400
 800a6cc:	40007800 	.word	0x40007800
 800a6d0:	40007c00 	.word	0x40007c00
 800a6d4:	58000c00 	.word	0x58000c00
 800a6d8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a6dc:	4bc4      	ldr	r3, [pc, #784]	; (800a9f0 <UART_SetConfig+0x9c4>)
 800a6de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6e0:	e009      	b.n	800a6f6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6e8:	e005      	b.n	800a6f6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a6f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f000 81da 	beq.w	800aab2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a702:	4abc      	ldr	r2, [pc, #752]	; (800a9f4 <UART_SetConfig+0x9c8>)
 800a704:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a708:	461a      	mov	r2, r3
 800a70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a710:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	685a      	ldr	r2, [r3, #4]
 800a716:	4613      	mov	r3, r2
 800a718:	005b      	lsls	r3, r3, #1
 800a71a:	4413      	add	r3, r2
 800a71c:	6a3a      	ldr	r2, [r7, #32]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d305      	bcc.n	800a72e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a728:	6a3a      	ldr	r2, [r7, #32]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d903      	bls.n	800a736 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800a72e:	2301      	movs	r3, #1
 800a730:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a734:	e1bd      	b.n	800aab2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a738:	4618      	mov	r0, r3
 800a73a:	f04f 0100 	mov.w	r1, #0
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a742:	4aac      	ldr	r2, [pc, #688]	; (800a9f4 <UART_SetConfig+0x9c8>)
 800a744:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a748:	b29a      	uxth	r2, r3
 800a74a:	f04f 0300 	mov.w	r3, #0
 800a74e:	f7f5 fdc7 	bl	80002e0 <__aeabi_uldivmod>
 800a752:	4602      	mov	r2, r0
 800a754:	460b      	mov	r3, r1
 800a756:	4610      	mov	r0, r2
 800a758:	4619      	mov	r1, r3
 800a75a:	f04f 0200 	mov.w	r2, #0
 800a75e:	f04f 0300 	mov.w	r3, #0
 800a762:	020b      	lsls	r3, r1, #8
 800a764:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a768:	0202      	lsls	r2, r0, #8
 800a76a:	6879      	ldr	r1, [r7, #4]
 800a76c:	6849      	ldr	r1, [r1, #4]
 800a76e:	0849      	lsrs	r1, r1, #1
 800a770:	4608      	mov	r0, r1
 800a772:	f04f 0100 	mov.w	r1, #0
 800a776:	1814      	adds	r4, r2, r0
 800a778:	eb43 0501 	adc.w	r5, r3, r1
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	461a      	mov	r2, r3
 800a782:	f04f 0300 	mov.w	r3, #0
 800a786:	4620      	mov	r0, r4
 800a788:	4629      	mov	r1, r5
 800a78a:	f7f5 fda9 	bl	80002e0 <__aeabi_uldivmod>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	4613      	mov	r3, r2
 800a794:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a798:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a79c:	d308      	bcc.n	800a7b0 <UART_SetConfig+0x784>
 800a79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7a4:	d204      	bcs.n	800a7b0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7ac:	60da      	str	r2, [r3, #12]
 800a7ae:	e180      	b.n	800aab2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a7b6:	e17c      	b.n	800aab2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	69db      	ldr	r3, [r3, #28]
 800a7bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7c0:	f040 80bf 	bne.w	800a942 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800a7c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a7c8:	2b20      	cmp	r3, #32
 800a7ca:	dc49      	bgt.n	800a860 <UART_SetConfig+0x834>
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	db7c      	blt.n	800a8ca <UART_SetConfig+0x89e>
 800a7d0:	2b20      	cmp	r3, #32
 800a7d2:	d87a      	bhi.n	800a8ca <UART_SetConfig+0x89e>
 800a7d4:	a201      	add	r2, pc, #4	; (adr r2, 800a7dc <UART_SetConfig+0x7b0>)
 800a7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7da:	bf00      	nop
 800a7dc:	0800a867 	.word	0x0800a867
 800a7e0:	0800a86f 	.word	0x0800a86f
 800a7e4:	0800a8cb 	.word	0x0800a8cb
 800a7e8:	0800a8cb 	.word	0x0800a8cb
 800a7ec:	0800a877 	.word	0x0800a877
 800a7f0:	0800a8cb 	.word	0x0800a8cb
 800a7f4:	0800a8cb 	.word	0x0800a8cb
 800a7f8:	0800a8cb 	.word	0x0800a8cb
 800a7fc:	0800a887 	.word	0x0800a887
 800a800:	0800a8cb 	.word	0x0800a8cb
 800a804:	0800a8cb 	.word	0x0800a8cb
 800a808:	0800a8cb 	.word	0x0800a8cb
 800a80c:	0800a8cb 	.word	0x0800a8cb
 800a810:	0800a8cb 	.word	0x0800a8cb
 800a814:	0800a8cb 	.word	0x0800a8cb
 800a818:	0800a8cb 	.word	0x0800a8cb
 800a81c:	0800a897 	.word	0x0800a897
 800a820:	0800a8cb 	.word	0x0800a8cb
 800a824:	0800a8cb 	.word	0x0800a8cb
 800a828:	0800a8cb 	.word	0x0800a8cb
 800a82c:	0800a8cb 	.word	0x0800a8cb
 800a830:	0800a8cb 	.word	0x0800a8cb
 800a834:	0800a8cb 	.word	0x0800a8cb
 800a838:	0800a8cb 	.word	0x0800a8cb
 800a83c:	0800a8cb 	.word	0x0800a8cb
 800a840:	0800a8cb 	.word	0x0800a8cb
 800a844:	0800a8cb 	.word	0x0800a8cb
 800a848:	0800a8cb 	.word	0x0800a8cb
 800a84c:	0800a8cb 	.word	0x0800a8cb
 800a850:	0800a8cb 	.word	0x0800a8cb
 800a854:	0800a8cb 	.word	0x0800a8cb
 800a858:	0800a8cb 	.word	0x0800a8cb
 800a85c:	0800a8bd 	.word	0x0800a8bd
 800a860:	2b40      	cmp	r3, #64	; 0x40
 800a862:	d02e      	beq.n	800a8c2 <UART_SetConfig+0x896>
 800a864:	e031      	b.n	800a8ca <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a866:	f7fd f8c1 	bl	80079ec <HAL_RCC_GetPCLK1Freq>
 800a86a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a86c:	e033      	b.n	800a8d6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a86e:	f7fd f8d3 	bl	8007a18 <HAL_RCC_GetPCLK2Freq>
 800a872:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a874:	e02f      	b.n	800a8d6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a876:	f107 0314 	add.w	r3, r7, #20
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7fe f87a 	bl	8008974 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a884:	e027      	b.n	800a8d6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a886:	f107 0308 	add.w	r3, r7, #8
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7fe f9c6 	bl	8008c1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a894:	e01f      	b.n	800a8d6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a896:	4b58      	ldr	r3, [pc, #352]	; (800a9f8 <UART_SetConfig+0x9cc>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f003 0320 	and.w	r3, r3, #32
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d009      	beq.n	800a8b6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8a2:	4b55      	ldr	r3, [pc, #340]	; (800a9f8 <UART_SetConfig+0x9cc>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	08db      	lsrs	r3, r3, #3
 800a8a8:	f003 0303 	and.w	r3, r3, #3
 800a8ac:	4a53      	ldr	r2, [pc, #332]	; (800a9fc <UART_SetConfig+0x9d0>)
 800a8ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8b4:	e00f      	b.n	800a8d6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a8b6:	4b51      	ldr	r3, [pc, #324]	; (800a9fc <UART_SetConfig+0x9d0>)
 800a8b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8ba:	e00c      	b.n	800a8d6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8bc:	4b4c      	ldr	r3, [pc, #304]	; (800a9f0 <UART_SetConfig+0x9c4>)
 800a8be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8c0:	e009      	b.n	800a8d6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8c8:	e005      	b.n	800a8d6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a8d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f000 80ea 	beq.w	800aab2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e2:	4a44      	ldr	r2, [pc, #272]	; (800a9f4 <UART_SetConfig+0x9c8>)
 800a8e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8f0:	005a      	lsls	r2, r3, #1
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	085b      	lsrs	r3, r3, #1
 800a8f8:	441a      	add	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a902:	b29b      	uxth	r3, r3
 800a904:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a908:	2b0f      	cmp	r3, #15
 800a90a:	d916      	bls.n	800a93a <UART_SetConfig+0x90e>
 800a90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a912:	d212      	bcs.n	800a93a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a916:	b29b      	uxth	r3, r3
 800a918:	f023 030f 	bic.w	r3, r3, #15
 800a91c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a920:	085b      	lsrs	r3, r3, #1
 800a922:	b29b      	uxth	r3, r3
 800a924:	f003 0307 	and.w	r3, r3, #7
 800a928:	b29a      	uxth	r2, r3
 800a92a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a92c:	4313      	orrs	r3, r2
 800a92e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a936:	60da      	str	r2, [r3, #12]
 800a938:	e0bb      	b.n	800aab2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a940:	e0b7      	b.n	800aab2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a942:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a946:	2b20      	cmp	r3, #32
 800a948:	dc4a      	bgt.n	800a9e0 <UART_SetConfig+0x9b4>
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	f2c0 8086 	blt.w	800aa5c <UART_SetConfig+0xa30>
 800a950:	2b20      	cmp	r3, #32
 800a952:	f200 8083 	bhi.w	800aa5c <UART_SetConfig+0xa30>
 800a956:	a201      	add	r2, pc, #4	; (adr r2, 800a95c <UART_SetConfig+0x930>)
 800a958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a95c:	0800a9e7 	.word	0x0800a9e7
 800a960:	0800aa01 	.word	0x0800aa01
 800a964:	0800aa5d 	.word	0x0800aa5d
 800a968:	0800aa5d 	.word	0x0800aa5d
 800a96c:	0800aa09 	.word	0x0800aa09
 800a970:	0800aa5d 	.word	0x0800aa5d
 800a974:	0800aa5d 	.word	0x0800aa5d
 800a978:	0800aa5d 	.word	0x0800aa5d
 800a97c:	0800aa19 	.word	0x0800aa19
 800a980:	0800aa5d 	.word	0x0800aa5d
 800a984:	0800aa5d 	.word	0x0800aa5d
 800a988:	0800aa5d 	.word	0x0800aa5d
 800a98c:	0800aa5d 	.word	0x0800aa5d
 800a990:	0800aa5d 	.word	0x0800aa5d
 800a994:	0800aa5d 	.word	0x0800aa5d
 800a998:	0800aa5d 	.word	0x0800aa5d
 800a99c:	0800aa29 	.word	0x0800aa29
 800a9a0:	0800aa5d 	.word	0x0800aa5d
 800a9a4:	0800aa5d 	.word	0x0800aa5d
 800a9a8:	0800aa5d 	.word	0x0800aa5d
 800a9ac:	0800aa5d 	.word	0x0800aa5d
 800a9b0:	0800aa5d 	.word	0x0800aa5d
 800a9b4:	0800aa5d 	.word	0x0800aa5d
 800a9b8:	0800aa5d 	.word	0x0800aa5d
 800a9bc:	0800aa5d 	.word	0x0800aa5d
 800a9c0:	0800aa5d 	.word	0x0800aa5d
 800a9c4:	0800aa5d 	.word	0x0800aa5d
 800a9c8:	0800aa5d 	.word	0x0800aa5d
 800a9cc:	0800aa5d 	.word	0x0800aa5d
 800a9d0:	0800aa5d 	.word	0x0800aa5d
 800a9d4:	0800aa5d 	.word	0x0800aa5d
 800a9d8:	0800aa5d 	.word	0x0800aa5d
 800a9dc:	0800aa4f 	.word	0x0800aa4f
 800a9e0:	2b40      	cmp	r3, #64	; 0x40
 800a9e2:	d037      	beq.n	800aa54 <UART_SetConfig+0xa28>
 800a9e4:	e03a      	b.n	800aa5c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9e6:	f7fd f801 	bl	80079ec <HAL_RCC_GetPCLK1Freq>
 800a9ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a9ec:	e03c      	b.n	800aa68 <UART_SetConfig+0xa3c>
 800a9ee:	bf00      	nop
 800a9f0:	003d0900 	.word	0x003d0900
 800a9f4:	0800da70 	.word	0x0800da70
 800a9f8:	58024400 	.word	0x58024400
 800a9fc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa00:	f7fd f80a 	bl	8007a18 <HAL_RCC_GetPCLK2Freq>
 800aa04:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aa06:	e02f      	b.n	800aa68 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa08:	f107 0314 	add.w	r3, r7, #20
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7fd ffb1 	bl	8008974 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa16:	e027      	b.n	800aa68 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa18:	f107 0308 	add.w	r3, r7, #8
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7fe f8fd 	bl	8008c1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa26:	e01f      	b.n	800aa68 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa28:	4b2c      	ldr	r3, [pc, #176]	; (800aadc <UART_SetConfig+0xab0>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f003 0320 	and.w	r3, r3, #32
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d009      	beq.n	800aa48 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa34:	4b29      	ldr	r3, [pc, #164]	; (800aadc <UART_SetConfig+0xab0>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	08db      	lsrs	r3, r3, #3
 800aa3a:	f003 0303 	and.w	r3, r3, #3
 800aa3e:	4a28      	ldr	r2, [pc, #160]	; (800aae0 <UART_SetConfig+0xab4>)
 800aa40:	fa22 f303 	lsr.w	r3, r2, r3
 800aa44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa46:	e00f      	b.n	800aa68 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800aa48:	4b25      	ldr	r3, [pc, #148]	; (800aae0 <UART_SetConfig+0xab4>)
 800aa4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa4c:	e00c      	b.n	800aa68 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa4e:	4b25      	ldr	r3, [pc, #148]	; (800aae4 <UART_SetConfig+0xab8>)
 800aa50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa52:	e009      	b.n	800aa68 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa5a:	e005      	b.n	800aa68 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aa60:	2301      	movs	r3, #1
 800aa62:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800aa66:	bf00      	nop
    }

    if (pclk != 0U)
 800aa68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d021      	beq.n	800aab2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa72:	4a1d      	ldr	r2, [pc, #116]	; (800aae8 <UART_SetConfig+0xabc>)
 800aa74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa78:	461a      	mov	r2, r3
 800aa7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7c:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	085b      	lsrs	r3, r3, #1
 800aa86:	441a      	add	r2, r3
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa96:	2b0f      	cmp	r3, #15
 800aa98:	d908      	bls.n	800aaac <UART_SetConfig+0xa80>
 800aa9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaa0:	d204      	bcs.n	800aaac <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaa8:	60da      	str	r2, [r3, #12]
 800aaaa:	e002      	b.n	800aab2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800aaac:	2301      	movs	r3, #1
 800aaae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2201      	movs	r2, #1
 800aab6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2201      	movs	r2, #1
 800aabe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800aace:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3738      	adds	r7, #56	; 0x38
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bdb0      	pop	{r4, r5, r7, pc}
 800aada:	bf00      	nop
 800aadc:	58024400 	.word	0x58024400
 800aae0:	03d09000 	.word	0x03d09000
 800aae4:	003d0900 	.word	0x003d0900
 800aae8:	0800da70 	.word	0x0800da70

0800aaec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaf8:	f003 0301 	and.w	r3, r3, #1
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d00a      	beq.n	800ab16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	430a      	orrs	r2, r1
 800ab14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab1a:	f003 0302 	and.w	r3, r3, #2
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00a      	beq.n	800ab38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	430a      	orrs	r2, r1
 800ab36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab3c:	f003 0304 	and.w	r3, r3, #4
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d00a      	beq.n	800ab5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	430a      	orrs	r2, r1
 800ab58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab5e:	f003 0308 	and.w	r3, r3, #8
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00a      	beq.n	800ab7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	430a      	orrs	r2, r1
 800ab7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab80:	f003 0310 	and.w	r3, r3, #16
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d00a      	beq.n	800ab9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	430a      	orrs	r2, r1
 800ab9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aba2:	f003 0320 	and.w	r3, r3, #32
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00a      	beq.n	800abc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	430a      	orrs	r2, r1
 800abbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d01a      	beq.n	800ac02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	430a      	orrs	r2, r1
 800abe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abea:	d10a      	bne.n	800ac02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	430a      	orrs	r2, r1
 800ac00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00a      	beq.n	800ac24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	430a      	orrs	r2, r1
 800ac22:	605a      	str	r2, [r3, #4]
  }
}
 800ac24:	bf00      	nop
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b086      	sub	sp, #24
 800ac34:	af02      	add	r7, sp, #8
 800ac36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac40:	f7f8 fdac 	bl	800379c <HAL_GetTick>
 800ac44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f003 0308 	and.w	r3, r3, #8
 800ac50:	2b08      	cmp	r3, #8
 800ac52:	d10e      	bne.n	800ac72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ac58:	9300      	str	r3, [sp, #0]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 f82f 	bl	800acc6 <UART_WaitOnFlagUntilTimeout>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d001      	beq.n	800ac72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac6e:	2303      	movs	r3, #3
 800ac70:	e025      	b.n	800acbe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f003 0304 	and.w	r3, r3, #4
 800ac7c:	2b04      	cmp	r3, #4
 800ac7e:	d10e      	bne.n	800ac9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ac84:	9300      	str	r3, [sp, #0]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 f819 	bl	800acc6 <UART_WaitOnFlagUntilTimeout>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d001      	beq.n	800ac9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac9a:	2303      	movs	r3, #3
 800ac9c:	e00f      	b.n	800acbe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2220      	movs	r2, #32
 800aca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2220      	movs	r2, #32
 800acaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800acbc:	2300      	movs	r3, #0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b084      	sub	sp, #16
 800acca:	af00      	add	r7, sp, #0
 800accc:	60f8      	str	r0, [r7, #12]
 800acce:	60b9      	str	r1, [r7, #8]
 800acd0:	603b      	str	r3, [r7, #0]
 800acd2:	4613      	mov	r3, r2
 800acd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acd6:	e062      	b.n	800ad9e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acde:	d05e      	beq.n	800ad9e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ace0:	f7f8 fd5c 	bl	800379c <HAL_GetTick>
 800ace4:	4602      	mov	r2, r0
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	1ad3      	subs	r3, r2, r3
 800acea:	69ba      	ldr	r2, [r7, #24]
 800acec:	429a      	cmp	r2, r3
 800acee:	d302      	bcc.n	800acf6 <UART_WaitOnFlagUntilTimeout+0x30>
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d11d      	bne.n	800ad32 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ad04:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	689a      	ldr	r2, [r3, #8]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f022 0201 	bic.w	r2, r2, #1
 800ad14:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2220      	movs	r2, #32
 800ad1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2220      	movs	r2, #32
 800ad22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ad2e:	2303      	movs	r3, #3
 800ad30:	e045      	b.n	800adbe <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f003 0304 	and.w	r3, r3, #4
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d02e      	beq.n	800ad9e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	69db      	ldr	r3, [r3, #28]
 800ad46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad4e:	d126      	bne.n	800ad9e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ad68:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	689a      	ldr	r2, [r3, #8]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f022 0201 	bic.w	r2, r2, #1
 800ad78:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2220      	movs	r2, #32
 800ad7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2220      	movs	r2, #32
 800ad86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2220      	movs	r2, #32
 800ad8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ad9a:	2303      	movs	r3, #3
 800ad9c:	e00f      	b.n	800adbe <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	69da      	ldr	r2, [r3, #28]
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	4013      	ands	r3, r2
 800ada8:	68ba      	ldr	r2, [r7, #8]
 800adaa:	429a      	cmp	r2, r3
 800adac:	bf0c      	ite	eq
 800adae:	2301      	moveq	r3, #1
 800adb0:	2300      	movne	r3, #0
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	461a      	mov	r2, r3
 800adb6:	79fb      	ldrb	r3, [r7, #7]
 800adb8:	429a      	cmp	r2, r3
 800adba:	d08d      	beq.n	800acd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800adbc:	2300      	movs	r3, #0
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
	...

0800adc8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	4613      	mov	r3, r2
 800add4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	68ba      	ldr	r2, [r7, #8]
 800adda:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	88fa      	ldrh	r2, [r7, #6]
 800ade0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2200      	movs	r2, #0
 800ade8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2222      	movs	r2, #34	; 0x22
 800adf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d02c      	beq.n	800ae56 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae00:	4a25      	ldr	r2, [pc, #148]	; (800ae98 <UART_Start_Receive_DMA+0xd0>)
 800ae02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae08:	4a24      	ldr	r2, [pc, #144]	; (800ae9c <UART_Start_Receive_DMA+0xd4>)
 800ae0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae10:	4a23      	ldr	r2, [pc, #140]	; (800aea0 <UART_Start_Receive_DMA+0xd8>)
 800ae12:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae18:	2200      	movs	r2, #0
 800ae1a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	3324      	adds	r3, #36	; 0x24
 800ae26:	4619      	mov	r1, r3
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	88fb      	ldrh	r3, [r7, #6]
 800ae30:	f7f9 f908 	bl	8004044 <HAL_DMA_Start_IT>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00d      	beq.n	800ae56 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2210      	movs	r2, #16
 800ae3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2200      	movs	r2, #0
 800ae46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2220      	movs	r2, #32
 800ae4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	e01c      	b.n	800ae90 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae6c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	689a      	ldr	r2, [r3, #8]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f042 0201 	orr.w	r2, r2, #1
 800ae7c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	689a      	ldr	r2, [r3, #8]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae8c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	0800afb1 	.word	0x0800afb1
 800ae9c:	0800b047 	.word	0x0800b047
 800aea0:	0800b07f 	.word	0x0800b07f

0800aea4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800aeba:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	689a      	ldr	r2, [r3, #8]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800aeca:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2220      	movs	r2, #32
 800aed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800aed4:	bf00      	nop
 800aed6:	370c      	adds	r7, #12
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aef6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	6899      	ldr	r1, [r3, #8]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	4b0f      	ldr	r3, [pc, #60]	; (800af40 <UART_EndRxTransfer+0x60>)
 800af04:	400b      	ands	r3, r1
 800af06:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d107      	bne.n	800af20 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f022 0210 	bic.w	r2, r2, #16
 800af1e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2220      	movs	r2, #32
 800af24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	671a      	str	r2, [r3, #112]	; 0x70
}
 800af34:	bf00      	nop
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr
 800af40:	effffffe 	.word	0xeffffffe

0800af44 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af50:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	69db      	ldr	r3, [r3, #28]
 800af56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af5a:	d014      	beq.n	800af86 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2200      	movs	r2, #0
 800af60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	689a      	ldr	r2, [r3, #8]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af72:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af82:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af84:	e002      	b.n	800af8c <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f7ff f812 	bl	8009fb0 <HAL_UART_TxCpltCallback>
}
 800af8c:	bf00      	nop
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800afa2:	68f8      	ldr	r0, [r7, #12]
 800afa4:	f7ff f80e 	bl	8009fc4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afa8:	bf00      	nop
 800afaa:	3710      	adds	r7, #16
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afbc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	69db      	ldr	r3, [r3, #28]
 800afc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afc6:	d02b      	beq.n	800b020 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2200      	movs	r2, #0
 800afcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800afde:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	689a      	ldr	r2, [r3, #8]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f022 0201 	bic.w	r2, r2, #1
 800afee:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	689a      	ldr	r2, [r3, #8]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800affe:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2220      	movs	r2, #32
 800b004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d107      	bne.n	800b020 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f022 0210 	bic.w	r2, r2, #16
 800b01e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b024:	2b01      	cmp	r3, #1
 800b026:	d107      	bne.n	800b038 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b02e:	4619      	mov	r1, r3
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f7fe ffef 	bl	800a014 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b036:	e002      	b.n	800b03e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f7fe ffcd 	bl	8009fd8 <HAL_UART_RxCpltCallback>
}
 800b03e:	bf00      	nop
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b084      	sub	sp, #16
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b052:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d109      	bne.n	800b070 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b062:	085b      	lsrs	r3, r3, #1
 800b064:	b29b      	uxth	r3, r3
 800b066:	4619      	mov	r1, r3
 800b068:	68f8      	ldr	r0, [r7, #12]
 800b06a:	f7fe ffd3 	bl	800a014 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b06e:	e002      	b.n	800b076 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f7fe ffbb 	bl	8009fec <HAL_UART_RxHalfCpltCallback>
}
 800b076:	bf00      	nop
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}

0800b07e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b086      	sub	sp, #24
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b08a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b092:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b09a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	689b      	ldr	r3, [r3, #8]
 800b0a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0a6:	2b80      	cmp	r3, #128	; 0x80
 800b0a8:	d109      	bne.n	800b0be <UART_DMAError+0x40>
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	2b21      	cmp	r3, #33	; 0x21
 800b0ae:	d106      	bne.n	800b0be <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b0b8:	6978      	ldr	r0, [r7, #20]
 800b0ba:	f7ff fef3 	bl	800aea4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0c8:	2b40      	cmp	r3, #64	; 0x40
 800b0ca:	d109      	bne.n	800b0e0 <UART_DMAError+0x62>
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2b22      	cmp	r3, #34	; 0x22
 800b0d0:	d106      	bne.n	800b0e0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b0da:	6978      	ldr	r0, [r7, #20]
 800b0dc:	f7ff ff00 	bl	800aee0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0e6:	f043 0210 	orr.w	r2, r3, #16
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b0f0:	6978      	ldr	r0, [r7, #20]
 800b0f2:	f7fe ff85 	bl	800a000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0f6:	bf00      	nop
 800b0f8:	3718      	adds	r7, #24
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b084      	sub	sp, #16
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b10a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2200      	movs	r2, #0
 800b110:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2200      	movs	r2, #0
 800b118:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f7fe ff6f 	bl	800a000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b122:	bf00      	nop
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}

0800b12a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b12a:	b580      	push	{r7, lr}
 800b12c:	b082      	sub	sp, #8
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b140:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2220      	movs	r2, #32
 800b146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2200      	movs	r2, #0
 800b14e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f7fe ff2d 	bl	8009fb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b156:	bf00      	nop
 800b158:	3708      	adds	r7, #8
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}

0800b15e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b15e:	b480      	push	{r7}
 800b160:	b083      	sub	sp, #12
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b166:	bf00      	nop
 800b168:	370c      	adds	r7, #12
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr

0800b172 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b172:	b480      	push	{r7}
 800b174:	b083      	sub	sp, #12
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b17a:	bf00      	nop
 800b17c:	370c      	adds	r7, #12
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr

0800b186 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b186:	b480      	push	{r7}
 800b188:	b083      	sub	sp, #12
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b18e:	bf00      	nop
 800b190:	370c      	adds	r7, #12
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr

0800b19a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b19a:	b480      	push	{r7}
 800b19c:	b085      	sub	sp, #20
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d101      	bne.n	800b1b0 <HAL_UARTEx_DisableFifoMode+0x16>
 800b1ac:	2302      	movs	r3, #2
 800b1ae:	e027      	b.n	800b200 <HAL_UARTEx_DisableFifoMode+0x66>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2224      	movs	r2, #36	; 0x24
 800b1bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f022 0201 	bic.w	r2, r2, #1
 800b1d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b1de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2220      	movs	r2, #32
 800b1f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b1fe:	2300      	movs	r3, #0
}
 800b200:	4618      	mov	r0, r3
 800b202:	3714      	adds	r7, #20
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d101      	bne.n	800b224 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b220:	2302      	movs	r3, #2
 800b222:	e02d      	b.n	800b280 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2201      	movs	r2, #1
 800b228:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2224      	movs	r2, #36	; 0x24
 800b230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f022 0201 	bic.w	r2, r2, #1
 800b24a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	683a      	ldr	r2, [r7, #0]
 800b25c:	430a      	orrs	r2, r1
 800b25e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 f84f 	bl	800b304 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2220      	movs	r2, #32
 800b272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b27e:	2300      	movs	r3, #0
}
 800b280:	4618      	mov	r0, r3
 800b282:	3710      	adds	r7, #16
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d101      	bne.n	800b2a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b29c:	2302      	movs	r3, #2
 800b29e:	e02d      	b.n	800b2fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2224      	movs	r2, #36	; 0x24
 800b2ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f022 0201 	bic.w	r2, r2, #1
 800b2c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	683a      	ldr	r2, [r7, #0]
 800b2d8:	430a      	orrs	r2, r1
 800b2da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 f811 	bl	800b304 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	68fa      	ldr	r2, [r7, #12]
 800b2e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2220      	movs	r2, #32
 800b2ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b2fa:	2300      	movs	r3, #0
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3710      	adds	r7, #16
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b310:	2b00      	cmp	r3, #0
 800b312:	d108      	bne.n	800b326 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2201      	movs	r2, #1
 800b318:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b324:	e031      	b.n	800b38a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b326:	2310      	movs	r3, #16
 800b328:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b32a:	2310      	movs	r3, #16
 800b32c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	0e5b      	lsrs	r3, r3, #25
 800b336:	b2db      	uxtb	r3, r3
 800b338:	f003 0307 	and.w	r3, r3, #7
 800b33c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	0f5b      	lsrs	r3, r3, #29
 800b346:	b2db      	uxtb	r3, r3
 800b348:	f003 0307 	and.w	r3, r3, #7
 800b34c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b34e:	7bbb      	ldrb	r3, [r7, #14]
 800b350:	7b3a      	ldrb	r2, [r7, #12]
 800b352:	4911      	ldr	r1, [pc, #68]	; (800b398 <UARTEx_SetNbDataToProcess+0x94>)
 800b354:	5c8a      	ldrb	r2, [r1, r2]
 800b356:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b35a:	7b3a      	ldrb	r2, [r7, #12]
 800b35c:	490f      	ldr	r1, [pc, #60]	; (800b39c <UARTEx_SetNbDataToProcess+0x98>)
 800b35e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b360:	fb93 f3f2 	sdiv	r3, r3, r2
 800b364:	b29a      	uxth	r2, r3
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b36c:	7bfb      	ldrb	r3, [r7, #15]
 800b36e:	7b7a      	ldrb	r2, [r7, #13]
 800b370:	4909      	ldr	r1, [pc, #36]	; (800b398 <UARTEx_SetNbDataToProcess+0x94>)
 800b372:	5c8a      	ldrb	r2, [r1, r2]
 800b374:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b378:	7b7a      	ldrb	r2, [r7, #13]
 800b37a:	4908      	ldr	r1, [pc, #32]	; (800b39c <UARTEx_SetNbDataToProcess+0x98>)
 800b37c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b37e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b382:	b29a      	uxth	r2, r3
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b38a:	bf00      	nop
 800b38c:	3714      	adds	r7, #20
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr
 800b396:	bf00      	nop
 800b398:	0800da88 	.word	0x0800da88
 800b39c:	0800da90 	.word	0x0800da90

0800b3a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b085      	sub	sp, #20
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b3ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b3b2:	2b84      	cmp	r3, #132	; 0x84
 800b3b4:	d005      	beq.n	800b3c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b3b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	4413      	add	r3, r2
 800b3be:	3303      	adds	r3, #3
 800b3c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3714      	adds	r7, #20
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b3d4:	f001 f84a 	bl	800c46c <vTaskStartScheduler>
  
  return osOK;
 800b3d8:	2300      	movs	r3, #0
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b3de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3e0:	b089      	sub	sp, #36	; 0x24
 800b3e2:	af04      	add	r7, sp, #16
 800b3e4:	6078      	str	r0, [r7, #4]
 800b3e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	695b      	ldr	r3, [r3, #20]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d020      	beq.n	800b432 <osThreadCreate+0x54>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	699b      	ldr	r3, [r3, #24]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d01c      	beq.n	800b432 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	685c      	ldr	r4, [r3, #4]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681d      	ldr	r5, [r3, #0]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	691e      	ldr	r6, [r3, #16]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7ff ffc8 	bl	800b3a0 <makeFreeRtosPriority>
 800b410:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	695b      	ldr	r3, [r3, #20]
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b41a:	9202      	str	r2, [sp, #8]
 800b41c:	9301      	str	r3, [sp, #4]
 800b41e:	9100      	str	r1, [sp, #0]
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	4632      	mov	r2, r6
 800b424:	4629      	mov	r1, r5
 800b426:	4620      	mov	r0, r4
 800b428:	f000 fe58 	bl	800c0dc <xTaskCreateStatic>
 800b42c:	4603      	mov	r3, r0
 800b42e:	60fb      	str	r3, [r7, #12]
 800b430:	e01c      	b.n	800b46c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	685c      	ldr	r4, [r3, #4]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b43e:	b29e      	uxth	r6, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b446:	4618      	mov	r0, r3
 800b448:	f7ff ffaa 	bl	800b3a0 <makeFreeRtosPriority>
 800b44c:	4602      	mov	r2, r0
 800b44e:	f107 030c 	add.w	r3, r7, #12
 800b452:	9301      	str	r3, [sp, #4]
 800b454:	9200      	str	r2, [sp, #0]
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	4632      	mov	r2, r6
 800b45a:	4629      	mov	r1, r5
 800b45c:	4620      	mov	r0, r4
 800b45e:	f000 fe9a 	bl	800c196 <xTaskCreate>
 800b462:	4603      	mov	r3, r0
 800b464:	2b01      	cmp	r3, #1
 800b466:	d001      	beq.n	800b46c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b468:	2300      	movs	r3, #0
 800b46a:	e000      	b.n	800b46e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b46c:	68fb      	ldr	r3, [r7, #12]
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3714      	adds	r7, #20
 800b472:	46bd      	mov	sp, r7
 800b474:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b476 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b476:	b580      	push	{r7, lr}
 800b478:	b084      	sub	sp, #16
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d001      	beq.n	800b48c <osDelay+0x16>
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	e000      	b.n	800b48e <osDelay+0x18>
 800b48c:	2301      	movs	r3, #1
 800b48e:	4618      	mov	r0, r3
 800b490:	f000 ffb8 	bl	800c404 <vTaskDelay>
  
  return osOK;
 800b494:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b496:	4618      	mov	r0, r3
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b082      	sub	sp, #8
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d007      	beq.n	800b4be <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	2001      	movs	r0, #1
 800b4b6:	f000 fa5c 	bl	800b972 <xQueueCreateMutexStatic>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	e003      	b.n	800b4c6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b4be:	2001      	movs	r0, #1
 800b4c0:	f000 fa3f 	bl	800b942 <xQueueCreateMutex>
 800b4c4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3708      	adds	r7, #8
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b4ce:	b580      	push	{r7, lr}
 800b4d0:	b086      	sub	sp, #24
 800b4d2:	af02      	add	r7, sp, #8
 800b4d4:	6078      	str	r0, [r7, #4]
 800b4d6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d00f      	beq.n	800b500 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d10a      	bne.n	800b4fc <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	2203      	movs	r2, #3
 800b4ec:	9200      	str	r2, [sp, #0]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	2001      	movs	r0, #1
 800b4f4:	f000 f93a 	bl	800b76c <xQueueGenericCreateStatic>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	e016      	b.n	800b52a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	e014      	b.n	800b52a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	2b01      	cmp	r3, #1
 800b504:	d110      	bne.n	800b528 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b506:	2203      	movs	r2, #3
 800b508:	2100      	movs	r1, #0
 800b50a:	2001      	movs	r0, #1
 800b50c:	f000 f9a6 	bl	800b85c <xQueueGenericCreate>
 800b510:	60f8      	str	r0, [r7, #12]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d005      	beq.n	800b524 <osSemaphoreCreate+0x56>
 800b518:	2300      	movs	r3, #0
 800b51a:	2200      	movs	r2, #0
 800b51c:	2100      	movs	r1, #0
 800b51e:	68f8      	ldr	r0, [r7, #12]
 800b520:	f000 fa42 	bl	800b9a8 <xQueueGenericSend>
      return sema;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	e000      	b.n	800b52a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b528:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b532:	b480      	push	{r7}
 800b534:	b083      	sub	sp, #12
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f103 0208 	add.w	r2, r3, #8
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f04f 32ff 	mov.w	r2, #4294967295
 800b54a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f103 0208 	add.w	r2, r3, #8
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f103 0208 	add.w	r2, r3, #8
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2200      	movs	r2, #0
 800b564:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b566:	bf00      	nop
 800b568:	370c      	adds	r7, #12
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr

0800b572 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b572:	b480      	push	{r7}
 800b574:	b083      	sub	sp, #12
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b580:	bf00      	nop
 800b582:	370c      	adds	r7, #12
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr

0800b58c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b58c:	b480      	push	{r7}
 800b58e:	b085      	sub	sp, #20
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	689a      	ldr	r2, [r3, #8]
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	683a      	ldr	r2, [r7, #0]
 800b5b0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	683a      	ldr	r2, [r7, #0]
 800b5b6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	1c5a      	adds	r2, r3, #1
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	601a      	str	r2, [r3, #0]
}
 800b5c8:	bf00      	nop
 800b5ca:	3714      	adds	r7, #20
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ea:	d103      	bne.n	800b5f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	691b      	ldr	r3, [r3, #16]
 800b5f0:	60fb      	str	r3, [r7, #12]
 800b5f2:	e00c      	b.n	800b60e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	3308      	adds	r3, #8
 800b5f8:	60fb      	str	r3, [r7, #12]
 800b5fa:	e002      	b.n	800b602 <vListInsert+0x2e>
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	60fb      	str	r3, [r7, #12]
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	68ba      	ldr	r2, [r7, #8]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d2f6      	bcs.n	800b5fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	685a      	ldr	r2, [r3, #4]
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	683a      	ldr	r2, [r7, #0]
 800b61c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	68fa      	ldr	r2, [r7, #12]
 800b622:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	683a      	ldr	r2, [r7, #0]
 800b628:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	1c5a      	adds	r2, r3, #1
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	601a      	str	r2, [r3, #0]
}
 800b63a:	bf00      	nop
 800b63c:	3714      	adds	r7, #20
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr

0800b646 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b646:	b480      	push	{r7}
 800b648:	b085      	sub	sp, #20
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	691b      	ldr	r3, [r3, #16]
 800b652:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	6892      	ldr	r2, [r2, #8]
 800b65c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	6852      	ldr	r2, [r2, #4]
 800b666:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d103      	bne.n	800b67a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	689a      	ldr	r2, [r3, #8]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2200      	movs	r2, #0
 800b67e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	1e5a      	subs	r2, r3, #1
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3714      	adds	r7, #20
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr
	...

0800b69c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d10a      	bne.n	800b6c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b4:	f383 8811 	msr	BASEPRI, r3
 800b6b8:	f3bf 8f6f 	isb	sy
 800b6bc:	f3bf 8f4f 	dsb	sy
 800b6c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b6c2:	bf00      	nop
 800b6c4:	e7fe      	b.n	800b6c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b6c6:	f001 fe1d 	bl	800d304 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6d2:	68f9      	ldr	r1, [r7, #12]
 800b6d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b6d6:	fb01 f303 	mul.w	r3, r1, r3
 800b6da:	441a      	add	r2, r3
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6f6:	3b01      	subs	r3, #1
 800b6f8:	68f9      	ldr	r1, [r7, #12]
 800b6fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b6fc:	fb01 f303 	mul.w	r3, r1, r3
 800b700:	441a      	add	r2, r3
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	22ff      	movs	r2, #255	; 0xff
 800b70a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	22ff      	movs	r2, #255	; 0xff
 800b712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d114      	bne.n	800b746 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	691b      	ldr	r3, [r3, #16]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d01a      	beq.n	800b75a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	3310      	adds	r3, #16
 800b728:	4618      	mov	r0, r3
 800b72a:	f001 f8e1 	bl	800c8f0 <xTaskRemoveFromEventList>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d012      	beq.n	800b75a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b734:	4b0c      	ldr	r3, [pc, #48]	; (800b768 <xQueueGenericReset+0xcc>)
 800b736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b73a:	601a      	str	r2, [r3, #0]
 800b73c:	f3bf 8f4f 	dsb	sy
 800b740:	f3bf 8f6f 	isb	sy
 800b744:	e009      	b.n	800b75a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	3310      	adds	r3, #16
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7ff fef1 	bl	800b532 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	3324      	adds	r3, #36	; 0x24
 800b754:	4618      	mov	r0, r3
 800b756:	f7ff feec 	bl	800b532 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b75a:	f001 fe03 	bl	800d364 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b75e:	2301      	movs	r3, #1
}
 800b760:	4618      	mov	r0, r3
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}
 800b768:	e000ed04 	.word	0xe000ed04

0800b76c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b08e      	sub	sp, #56	; 0x38
 800b770:	af02      	add	r7, sp, #8
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	607a      	str	r2, [r7, #4]
 800b778:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d10a      	bne.n	800b796 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b784:	f383 8811 	msr	BASEPRI, r3
 800b788:	f3bf 8f6f 	isb	sy
 800b78c:	f3bf 8f4f 	dsb	sy
 800b790:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b792:	bf00      	nop
 800b794:	e7fe      	b.n	800b794 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d10a      	bne.n	800b7b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a0:	f383 8811 	msr	BASEPRI, r3
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b7ae:	bf00      	nop
 800b7b0:	e7fe      	b.n	800b7b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d002      	beq.n	800b7be <xQueueGenericCreateStatic+0x52>
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d001      	beq.n	800b7c2 <xQueueGenericCreateStatic+0x56>
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e000      	b.n	800b7c4 <xQueueGenericCreateStatic+0x58>
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d10a      	bne.n	800b7de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7cc:	f383 8811 	msr	BASEPRI, r3
 800b7d0:	f3bf 8f6f 	isb	sy
 800b7d4:	f3bf 8f4f 	dsb	sy
 800b7d8:	623b      	str	r3, [r7, #32]
}
 800b7da:	bf00      	nop
 800b7dc:	e7fe      	b.n	800b7dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d102      	bne.n	800b7ea <xQueueGenericCreateStatic+0x7e>
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d101      	bne.n	800b7ee <xQueueGenericCreateStatic+0x82>
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e000      	b.n	800b7f0 <xQueueGenericCreateStatic+0x84>
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d10a      	bne.n	800b80a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f8:	f383 8811 	msr	BASEPRI, r3
 800b7fc:	f3bf 8f6f 	isb	sy
 800b800:	f3bf 8f4f 	dsb	sy
 800b804:	61fb      	str	r3, [r7, #28]
}
 800b806:	bf00      	nop
 800b808:	e7fe      	b.n	800b808 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b80a:	2348      	movs	r3, #72	; 0x48
 800b80c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	2b48      	cmp	r3, #72	; 0x48
 800b812:	d00a      	beq.n	800b82a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b818:	f383 8811 	msr	BASEPRI, r3
 800b81c:	f3bf 8f6f 	isb	sy
 800b820:	f3bf 8f4f 	dsb	sy
 800b824:	61bb      	str	r3, [r7, #24]
}
 800b826:	bf00      	nop
 800b828:	e7fe      	b.n	800b828 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b82a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00d      	beq.n	800b852 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b838:	2201      	movs	r2, #1
 800b83a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b83e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b844:	9300      	str	r3, [sp, #0]
 800b846:	4613      	mov	r3, r2
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	68b9      	ldr	r1, [r7, #8]
 800b84c:	68f8      	ldr	r0, [r7, #12]
 800b84e:	f000 f83f 	bl	800b8d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b854:	4618      	mov	r0, r3
 800b856:	3730      	adds	r7, #48	; 0x30
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b08a      	sub	sp, #40	; 0x28
 800b860:	af02      	add	r7, sp, #8
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	4613      	mov	r3, r2
 800b868:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d10a      	bne.n	800b886 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b874:	f383 8811 	msr	BASEPRI, r3
 800b878:	f3bf 8f6f 	isb	sy
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	613b      	str	r3, [r7, #16]
}
 800b882:	bf00      	nop
 800b884:	e7fe      	b.n	800b884 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	68ba      	ldr	r2, [r7, #8]
 800b88a:	fb02 f303 	mul.w	r3, r2, r3
 800b88e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	3348      	adds	r3, #72	; 0x48
 800b894:	4618      	mov	r0, r3
 800b896:	f001 fe57 	bl	800d548 <pvPortMalloc>
 800b89a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b89c:	69bb      	ldr	r3, [r7, #24]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d011      	beq.n	800b8c6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b8a2:	69bb      	ldr	r3, [r7, #24]
 800b8a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	3348      	adds	r3, #72	; 0x48
 800b8aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b8ac:	69bb      	ldr	r3, [r7, #24]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b8b4:	79fa      	ldrb	r2, [r7, #7]
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	9300      	str	r3, [sp, #0]
 800b8ba:	4613      	mov	r3, r2
 800b8bc:	697a      	ldr	r2, [r7, #20]
 800b8be:	68b9      	ldr	r1, [r7, #8]
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f000 f805 	bl	800b8d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b8c6:	69bb      	ldr	r3, [r7, #24]
	}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3720      	adds	r7, #32
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	607a      	str	r2, [r7, #4]
 800b8dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d103      	bne.n	800b8ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	69ba      	ldr	r2, [r7, #24]
 800b8e8:	601a      	str	r2, [r3, #0]
 800b8ea:	e002      	b.n	800b8f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b8ec:	69bb      	ldr	r3, [r7, #24]
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b8f2:	69bb      	ldr	r3, [r7, #24]
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b8f8:	69bb      	ldr	r3, [r7, #24]
 800b8fa:	68ba      	ldr	r2, [r7, #8]
 800b8fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b8fe:	2101      	movs	r1, #1
 800b900:	69b8      	ldr	r0, [r7, #24]
 800b902:	f7ff fecb 	bl	800b69c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b906:	bf00      	nop
 800b908:	3710      	adds	r7, #16
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}

0800b90e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b90e:	b580      	push	{r7, lr}
 800b910:	b082      	sub	sp, #8
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00e      	beq.n	800b93a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b92e:	2300      	movs	r3, #0
 800b930:	2200      	movs	r2, #0
 800b932:	2100      	movs	r1, #0
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 f837 	bl	800b9a8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b93a:	bf00      	nop
 800b93c:	3708      	adds	r7, #8
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}

0800b942 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b942:	b580      	push	{r7, lr}
 800b944:	b086      	sub	sp, #24
 800b946:	af00      	add	r7, sp, #0
 800b948:	4603      	mov	r3, r0
 800b94a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b94c:	2301      	movs	r3, #1
 800b94e:	617b      	str	r3, [r7, #20]
 800b950:	2300      	movs	r3, #0
 800b952:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b954:	79fb      	ldrb	r3, [r7, #7]
 800b956:	461a      	mov	r2, r3
 800b958:	6939      	ldr	r1, [r7, #16]
 800b95a:	6978      	ldr	r0, [r7, #20]
 800b95c:	f7ff ff7e 	bl	800b85c <xQueueGenericCreate>
 800b960:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b962:	68f8      	ldr	r0, [r7, #12]
 800b964:	f7ff ffd3 	bl	800b90e <prvInitialiseMutex>

		return xNewQueue;
 800b968:	68fb      	ldr	r3, [r7, #12]
	}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3718      	adds	r7, #24
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}

0800b972 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b972:	b580      	push	{r7, lr}
 800b974:	b088      	sub	sp, #32
 800b976:	af02      	add	r7, sp, #8
 800b978:	4603      	mov	r3, r0
 800b97a:	6039      	str	r1, [r7, #0]
 800b97c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b97e:	2301      	movs	r3, #1
 800b980:	617b      	str	r3, [r7, #20]
 800b982:	2300      	movs	r3, #0
 800b984:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b986:	79fb      	ldrb	r3, [r7, #7]
 800b988:	9300      	str	r3, [sp, #0]
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	2200      	movs	r2, #0
 800b98e:	6939      	ldr	r1, [r7, #16]
 800b990:	6978      	ldr	r0, [r7, #20]
 800b992:	f7ff feeb 	bl	800b76c <xQueueGenericCreateStatic>
 800b996:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b998:	68f8      	ldr	r0, [r7, #12]
 800b99a:	f7ff ffb8 	bl	800b90e <prvInitialiseMutex>

		return xNewQueue;
 800b99e:	68fb      	ldr	r3, [r7, #12]
	}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3718      	adds	r7, #24
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b08e      	sub	sp, #56	; 0x38
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	60b9      	str	r1, [r7, #8]
 800b9b2:	607a      	str	r2, [r7, #4]
 800b9b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d10a      	bne.n	800b9da <xQueueGenericSend+0x32>
	__asm volatile
 800b9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c8:	f383 8811 	msr	BASEPRI, r3
 800b9cc:	f3bf 8f6f 	isb	sy
 800b9d0:	f3bf 8f4f 	dsb	sy
 800b9d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b9d6:	bf00      	nop
 800b9d8:	e7fe      	b.n	800b9d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d103      	bne.n	800b9e8 <xQueueGenericSend+0x40>
 800b9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d101      	bne.n	800b9ec <xQueueGenericSend+0x44>
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	e000      	b.n	800b9ee <xQueueGenericSend+0x46>
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d10a      	bne.n	800ba08 <xQueueGenericSend+0x60>
	__asm volatile
 800b9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f6:	f383 8811 	msr	BASEPRI, r3
 800b9fa:	f3bf 8f6f 	isb	sy
 800b9fe:	f3bf 8f4f 	dsb	sy
 800ba02:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba04:	bf00      	nop
 800ba06:	e7fe      	b.n	800ba06 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d103      	bne.n	800ba16 <xQueueGenericSend+0x6e>
 800ba0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d101      	bne.n	800ba1a <xQueueGenericSend+0x72>
 800ba16:	2301      	movs	r3, #1
 800ba18:	e000      	b.n	800ba1c <xQueueGenericSend+0x74>
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d10a      	bne.n	800ba36 <xQueueGenericSend+0x8e>
	__asm volatile
 800ba20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba24:	f383 8811 	msr	BASEPRI, r3
 800ba28:	f3bf 8f6f 	isb	sy
 800ba2c:	f3bf 8f4f 	dsb	sy
 800ba30:	623b      	str	r3, [r7, #32]
}
 800ba32:	bf00      	nop
 800ba34:	e7fe      	b.n	800ba34 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba36:	f001 f917 	bl	800cc68 <xTaskGetSchedulerState>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d102      	bne.n	800ba46 <xQueueGenericSend+0x9e>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d101      	bne.n	800ba4a <xQueueGenericSend+0xa2>
 800ba46:	2301      	movs	r3, #1
 800ba48:	e000      	b.n	800ba4c <xQueueGenericSend+0xa4>
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d10a      	bne.n	800ba66 <xQueueGenericSend+0xbe>
	__asm volatile
 800ba50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba54:	f383 8811 	msr	BASEPRI, r3
 800ba58:	f3bf 8f6f 	isb	sy
 800ba5c:	f3bf 8f4f 	dsb	sy
 800ba60:	61fb      	str	r3, [r7, #28]
}
 800ba62:	bf00      	nop
 800ba64:	e7fe      	b.n	800ba64 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba66:	f001 fc4d 	bl	800d304 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ba6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d302      	bcc.n	800ba7c <xQueueGenericSend+0xd4>
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	2b02      	cmp	r3, #2
 800ba7a:	d129      	bne.n	800bad0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba7c:	683a      	ldr	r2, [r7, #0]
 800ba7e:	68b9      	ldr	r1, [r7, #8]
 800ba80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba82:	f000 fa41 	bl	800bf08 <prvCopyDataToQueue>
 800ba86:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d010      	beq.n	800bab2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba92:	3324      	adds	r3, #36	; 0x24
 800ba94:	4618      	mov	r0, r3
 800ba96:	f000 ff2b 	bl	800c8f0 <xTaskRemoveFromEventList>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d013      	beq.n	800bac8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800baa0:	4b3f      	ldr	r3, [pc, #252]	; (800bba0 <xQueueGenericSend+0x1f8>)
 800baa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baa6:	601a      	str	r2, [r3, #0]
 800baa8:	f3bf 8f4f 	dsb	sy
 800baac:	f3bf 8f6f 	isb	sy
 800bab0:	e00a      	b.n	800bac8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d007      	beq.n	800bac8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bab8:	4b39      	ldr	r3, [pc, #228]	; (800bba0 <xQueueGenericSend+0x1f8>)
 800baba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800babe:	601a      	str	r2, [r3, #0]
 800bac0:	f3bf 8f4f 	dsb	sy
 800bac4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bac8:	f001 fc4c 	bl	800d364 <vPortExitCritical>
				return pdPASS;
 800bacc:	2301      	movs	r3, #1
 800bace:	e063      	b.n	800bb98 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d103      	bne.n	800bade <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bad6:	f001 fc45 	bl	800d364 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bada:	2300      	movs	r3, #0
 800badc:	e05c      	b.n	800bb98 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d106      	bne.n	800baf2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bae4:	f107 0314 	add.w	r3, r7, #20
 800bae8:	4618      	mov	r0, r3
 800baea:	f000 ff63 	bl	800c9b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800baee:	2301      	movs	r3, #1
 800baf0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800baf2:	f001 fc37 	bl	800d364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800baf6:	f000 fd19 	bl	800c52c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bafa:	f001 fc03 	bl	800d304 <vPortEnterCritical>
 800bafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb04:	b25b      	sxtb	r3, r3
 800bb06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb0a:	d103      	bne.n	800bb14 <xQueueGenericSend+0x16c>
 800bb0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb1a:	b25b      	sxtb	r3, r3
 800bb1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb20:	d103      	bne.n	800bb2a <xQueueGenericSend+0x182>
 800bb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb24:	2200      	movs	r2, #0
 800bb26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb2a:	f001 fc1b 	bl	800d364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb2e:	1d3a      	adds	r2, r7, #4
 800bb30:	f107 0314 	add.w	r3, r7, #20
 800bb34:	4611      	mov	r1, r2
 800bb36:	4618      	mov	r0, r3
 800bb38:	f000 ff52 	bl	800c9e0 <xTaskCheckForTimeOut>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d124      	bne.n	800bb8c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bb42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb44:	f000 fab2 	bl	800c0ac <prvIsQueueFull>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d018      	beq.n	800bb80 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb50:	3310      	adds	r3, #16
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	4611      	mov	r1, r2
 800bb56:	4618      	mov	r0, r3
 800bb58:	f000 fea6 	bl	800c8a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bb5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb5e:	f000 fa3d 	bl	800bfdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bb62:	f000 fcf1 	bl	800c548 <xTaskResumeAll>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	f47f af7c 	bne.w	800ba66 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bb6e:	4b0c      	ldr	r3, [pc, #48]	; (800bba0 <xQueueGenericSend+0x1f8>)
 800bb70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb74:	601a      	str	r2, [r3, #0]
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	f3bf 8f6f 	isb	sy
 800bb7e:	e772      	b.n	800ba66 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bb80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb82:	f000 fa2b 	bl	800bfdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb86:	f000 fcdf 	bl	800c548 <xTaskResumeAll>
 800bb8a:	e76c      	b.n	800ba66 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bb8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb8e:	f000 fa25 	bl	800bfdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb92:	f000 fcd9 	bl	800c548 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bb96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3738      	adds	r7, #56	; 0x38
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	e000ed04 	.word	0xe000ed04

0800bba4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b08e      	sub	sp, #56	; 0x38
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d10a      	bne.n	800bbce <xQueueGiveFromISR+0x2a>
	__asm volatile
 800bbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbbc:	f383 8811 	msr	BASEPRI, r3
 800bbc0:	f3bf 8f6f 	isb	sy
 800bbc4:	f3bf 8f4f 	dsb	sy
 800bbc8:	623b      	str	r3, [r7, #32]
}
 800bbca:	bf00      	nop
 800bbcc:	e7fe      	b.n	800bbcc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00a      	beq.n	800bbec <xQueueGiveFromISR+0x48>
	__asm volatile
 800bbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbda:	f383 8811 	msr	BASEPRI, r3
 800bbde:	f3bf 8f6f 	isb	sy
 800bbe2:	f3bf 8f4f 	dsb	sy
 800bbe6:	61fb      	str	r3, [r7, #28]
}
 800bbe8:	bf00      	nop
 800bbea:	e7fe      	b.n	800bbea <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d103      	bne.n	800bbfc <xQueueGiveFromISR+0x58>
 800bbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d101      	bne.n	800bc00 <xQueueGiveFromISR+0x5c>
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e000      	b.n	800bc02 <xQueueGiveFromISR+0x5e>
 800bc00:	2300      	movs	r3, #0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d10a      	bne.n	800bc1c <xQueueGiveFromISR+0x78>
	__asm volatile
 800bc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc0a:	f383 8811 	msr	BASEPRI, r3
 800bc0e:	f3bf 8f6f 	isb	sy
 800bc12:	f3bf 8f4f 	dsb	sy
 800bc16:	61bb      	str	r3, [r7, #24]
}
 800bc18:	bf00      	nop
 800bc1a:	e7fe      	b.n	800bc1a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc1c:	f001 fc54 	bl	800d4c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bc20:	f3ef 8211 	mrs	r2, BASEPRI
 800bc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc28:	f383 8811 	msr	BASEPRI, r3
 800bc2c:	f3bf 8f6f 	isb	sy
 800bc30:	f3bf 8f4f 	dsb	sy
 800bc34:	617a      	str	r2, [r7, #20]
 800bc36:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bc38:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc40:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d22b      	bcs.n	800bca4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc58:	1c5a      	adds	r2, r3, #1
 800bc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bc5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bc62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc66:	d112      	bne.n	800bc8e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d016      	beq.n	800bc9e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc72:	3324      	adds	r3, #36	; 0x24
 800bc74:	4618      	mov	r0, r3
 800bc76:	f000 fe3b 	bl	800c8f0 <xTaskRemoveFromEventList>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d00e      	beq.n	800bc9e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d00b      	beq.n	800bc9e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	2201      	movs	r2, #1
 800bc8a:	601a      	str	r2, [r3, #0]
 800bc8c:	e007      	b.n	800bc9e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bc8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc92:	3301      	adds	r3, #1
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	b25a      	sxtb	r2, r3
 800bc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	637b      	str	r3, [r7, #52]	; 0x34
 800bca2:	e001      	b.n	800bca8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bca4:	2300      	movs	r3, #0
 800bca6:	637b      	str	r3, [r7, #52]	; 0x34
 800bca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcaa:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bcb2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bcb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3738      	adds	r7, #56	; 0x38
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
	...

0800bcc0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b08e      	sub	sp, #56	; 0x38
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bcca:	2300      	movs	r3, #0
 800bccc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bcd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d10a      	bne.n	800bcf2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bcdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce0:	f383 8811 	msr	BASEPRI, r3
 800bce4:	f3bf 8f6f 	isb	sy
 800bce8:	f3bf 8f4f 	dsb	sy
 800bcec:	623b      	str	r3, [r7, #32]
}
 800bcee:	bf00      	nop
 800bcf0:	e7fe      	b.n	800bcf0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bcf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d00a      	beq.n	800bd10 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bcfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcfe:	f383 8811 	msr	BASEPRI, r3
 800bd02:	f3bf 8f6f 	isb	sy
 800bd06:	f3bf 8f4f 	dsb	sy
 800bd0a:	61fb      	str	r3, [r7, #28]
}
 800bd0c:	bf00      	nop
 800bd0e:	e7fe      	b.n	800bd0e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd10:	f000 ffaa 	bl	800cc68 <xTaskGetSchedulerState>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d102      	bne.n	800bd20 <xQueueSemaphoreTake+0x60>
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d101      	bne.n	800bd24 <xQueueSemaphoreTake+0x64>
 800bd20:	2301      	movs	r3, #1
 800bd22:	e000      	b.n	800bd26 <xQueueSemaphoreTake+0x66>
 800bd24:	2300      	movs	r3, #0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d10a      	bne.n	800bd40 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2e:	f383 8811 	msr	BASEPRI, r3
 800bd32:	f3bf 8f6f 	isb	sy
 800bd36:	f3bf 8f4f 	dsb	sy
 800bd3a:	61bb      	str	r3, [r7, #24]
}
 800bd3c:	bf00      	nop
 800bd3e:	e7fe      	b.n	800bd3e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd40:	f001 fae0 	bl	800d304 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd48:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d024      	beq.n	800bd9a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd52:	1e5a      	subs	r2, r3, #1
 800bd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd56:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d104      	bne.n	800bd6a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bd60:	f001 f92a 	bl	800cfb8 <pvTaskIncrementMutexHeldCount>
 800bd64:	4602      	mov	r2, r0
 800bd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd68:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd6c:	691b      	ldr	r3, [r3, #16]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d00f      	beq.n	800bd92 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd74:	3310      	adds	r3, #16
 800bd76:	4618      	mov	r0, r3
 800bd78:	f000 fdba 	bl	800c8f0 <xTaskRemoveFromEventList>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d007      	beq.n	800bd92 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bd82:	4b54      	ldr	r3, [pc, #336]	; (800bed4 <xQueueSemaphoreTake+0x214>)
 800bd84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd88:	601a      	str	r2, [r3, #0]
 800bd8a:	f3bf 8f4f 	dsb	sy
 800bd8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bd92:	f001 fae7 	bl	800d364 <vPortExitCritical>
				return pdPASS;
 800bd96:	2301      	movs	r3, #1
 800bd98:	e097      	b.n	800beca <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d111      	bne.n	800bdc4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00a      	beq.n	800bdbc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bda6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdaa:	f383 8811 	msr	BASEPRI, r3
 800bdae:	f3bf 8f6f 	isb	sy
 800bdb2:	f3bf 8f4f 	dsb	sy
 800bdb6:	617b      	str	r3, [r7, #20]
}
 800bdb8:	bf00      	nop
 800bdba:	e7fe      	b.n	800bdba <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bdbc:	f001 fad2 	bl	800d364 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	e082      	b.n	800beca <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bdc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d106      	bne.n	800bdd8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bdca:	f107 030c 	add.w	r3, r7, #12
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f000 fdf0 	bl	800c9b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bdd8:	f001 fac4 	bl	800d364 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bddc:	f000 fba6 	bl	800c52c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bde0:	f001 fa90 	bl	800d304 <vPortEnterCritical>
 800bde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdea:	b25b      	sxtb	r3, r3
 800bdec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdf0:	d103      	bne.n	800bdfa <xQueueSemaphoreTake+0x13a>
 800bdf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be00:	b25b      	sxtb	r3, r3
 800be02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be06:	d103      	bne.n	800be10 <xQueueSemaphoreTake+0x150>
 800be08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0a:	2200      	movs	r2, #0
 800be0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be10:	f001 faa8 	bl	800d364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be14:	463a      	mov	r2, r7
 800be16:	f107 030c 	add.w	r3, r7, #12
 800be1a:	4611      	mov	r1, r2
 800be1c:	4618      	mov	r0, r3
 800be1e:	f000 fddf 	bl	800c9e0 <xTaskCheckForTimeOut>
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d132      	bne.n	800be8e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be2a:	f000 f929 	bl	800c080 <prvIsQueueEmpty>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d026      	beq.n	800be82 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d109      	bne.n	800be50 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800be3c:	f001 fa62 	bl	800d304 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800be40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be42:	689b      	ldr	r3, [r3, #8]
 800be44:	4618      	mov	r0, r3
 800be46:	f000 ff2d 	bl	800cca4 <xTaskPriorityInherit>
 800be4a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800be4c:	f001 fa8a 	bl	800d364 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be52:	3324      	adds	r3, #36	; 0x24
 800be54:	683a      	ldr	r2, [r7, #0]
 800be56:	4611      	mov	r1, r2
 800be58:	4618      	mov	r0, r3
 800be5a:	f000 fd25 	bl	800c8a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be60:	f000 f8bc 	bl	800bfdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be64:	f000 fb70 	bl	800c548 <xTaskResumeAll>
 800be68:	4603      	mov	r3, r0
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	f47f af68 	bne.w	800bd40 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800be70:	4b18      	ldr	r3, [pc, #96]	; (800bed4 <xQueueSemaphoreTake+0x214>)
 800be72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be76:	601a      	str	r2, [r3, #0]
 800be78:	f3bf 8f4f 	dsb	sy
 800be7c:	f3bf 8f6f 	isb	sy
 800be80:	e75e      	b.n	800bd40 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800be82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be84:	f000 f8aa 	bl	800bfdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be88:	f000 fb5e 	bl	800c548 <xTaskResumeAll>
 800be8c:	e758      	b.n	800bd40 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800be8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be90:	f000 f8a4 	bl	800bfdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be94:	f000 fb58 	bl	800c548 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be9a:	f000 f8f1 	bl	800c080 <prvIsQueueEmpty>
 800be9e:	4603      	mov	r3, r0
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f43f af4d 	beq.w	800bd40 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d00d      	beq.n	800bec8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800beac:	f001 fa2a 	bl	800d304 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800beb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800beb2:	f000 f811 	bl	800bed8 <prvGetDisinheritPriorityAfterTimeout>
 800beb6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800beb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bebe:	4618      	mov	r0, r3
 800bec0:	f000 ffec 	bl	800ce9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bec4:	f001 fa4e 	bl	800d364 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bec8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800beca:	4618      	mov	r0, r3
 800becc:	3738      	adds	r7, #56	; 0x38
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	e000ed04 	.word	0xe000ed04

0800bed8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bed8:	b480      	push	{r7}
 800beda:	b085      	sub	sp, #20
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d006      	beq.n	800bef6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f1c3 0307 	rsb	r3, r3, #7
 800bef2:	60fb      	str	r3, [r7, #12]
 800bef4:	e001      	b.n	800befa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bef6:	2300      	movs	r3, #0
 800bef8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800befa:	68fb      	ldr	r3, [r7, #12]
	}
 800befc:	4618      	mov	r0, r3
 800befe:	3714      	adds	r7, #20
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b086      	sub	sp, #24
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bf14:	2300      	movs	r3, #0
 800bf16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d10d      	bne.n	800bf42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d14d      	bne.n	800bfca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	689b      	ldr	r3, [r3, #8]
 800bf32:	4618      	mov	r0, r3
 800bf34:	f000 ff2c 	bl	800cd90 <xTaskPriorityDisinherit>
 800bf38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	609a      	str	r2, [r3, #8]
 800bf40:	e043      	b.n	800bfca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d119      	bne.n	800bf7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	6858      	ldr	r0, [r3, #4]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf50:	461a      	mov	r2, r3
 800bf52:	68b9      	ldr	r1, [r7, #8]
 800bf54:	f001 fd06 	bl	800d964 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	685a      	ldr	r2, [r3, #4]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf60:	441a      	add	r2, r3
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	685a      	ldr	r2, [r3, #4]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d32b      	bcc.n	800bfca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	605a      	str	r2, [r3, #4]
 800bf7a:	e026      	b.n	800bfca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	68d8      	ldr	r0, [r3, #12]
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf84:	461a      	mov	r2, r3
 800bf86:	68b9      	ldr	r1, [r7, #8]
 800bf88:	f001 fcec 	bl	800d964 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	68da      	ldr	r2, [r3, #12]
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf94:	425b      	negs	r3, r3
 800bf96:	441a      	add	r2, r3
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	68da      	ldr	r2, [r3, #12]
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d207      	bcs.n	800bfb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	689a      	ldr	r2, [r3, #8]
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb0:	425b      	negs	r3, r3
 800bfb2:	441a      	add	r2, r3
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2b02      	cmp	r3, #2
 800bfbc:	d105      	bne.n	800bfca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d002      	beq.n	800bfca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	3b01      	subs	r3, #1
 800bfc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	1c5a      	adds	r2, r3, #1
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bfd2:	697b      	ldr	r3, [r7, #20]
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3718      	adds	r7, #24
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bfe4:	f001 f98e 	bl	800d304 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bff0:	e011      	b.n	800c016 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d012      	beq.n	800c020 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	3324      	adds	r3, #36	; 0x24
 800bffe:	4618      	mov	r0, r3
 800c000:	f000 fc76 	bl	800c8f0 <xTaskRemoveFromEventList>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d001      	beq.n	800c00e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c00a:	f000 fd4b 	bl	800caa4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c00e:	7bfb      	ldrb	r3, [r7, #15]
 800c010:	3b01      	subs	r3, #1
 800c012:	b2db      	uxtb	r3, r3
 800c014:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	dce9      	bgt.n	800bff2 <prvUnlockQueue+0x16>
 800c01e:	e000      	b.n	800c022 <prvUnlockQueue+0x46>
					break;
 800c020:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	22ff      	movs	r2, #255	; 0xff
 800c026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c02a:	f001 f99b 	bl	800d364 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c02e:	f001 f969 	bl	800d304 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c038:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c03a:	e011      	b.n	800c060 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	691b      	ldr	r3, [r3, #16]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d012      	beq.n	800c06a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	3310      	adds	r3, #16
 800c048:	4618      	mov	r0, r3
 800c04a:	f000 fc51 	bl	800c8f0 <xTaskRemoveFromEventList>
 800c04e:	4603      	mov	r3, r0
 800c050:	2b00      	cmp	r3, #0
 800c052:	d001      	beq.n	800c058 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c054:	f000 fd26 	bl	800caa4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c058:	7bbb      	ldrb	r3, [r7, #14]
 800c05a:	3b01      	subs	r3, #1
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c060:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c064:	2b00      	cmp	r3, #0
 800c066:	dce9      	bgt.n	800c03c <prvUnlockQueue+0x60>
 800c068:	e000      	b.n	800c06c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c06a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	22ff      	movs	r2, #255	; 0xff
 800c070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c074:	f001 f976 	bl	800d364 <vPortExitCritical>
}
 800c078:	bf00      	nop
 800c07a:	3710      	adds	r7, #16
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c088:	f001 f93c 	bl	800d304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c090:	2b00      	cmp	r3, #0
 800c092:	d102      	bne.n	800c09a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c094:	2301      	movs	r3, #1
 800c096:	60fb      	str	r3, [r7, #12]
 800c098:	e001      	b.n	800c09e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c09a:	2300      	movs	r3, #0
 800c09c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c09e:	f001 f961 	bl	800d364 <vPortExitCritical>

	return xReturn;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3710      	adds	r7, #16
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0b4:	f001 f926 	bl	800d304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d102      	bne.n	800c0ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	60fb      	str	r3, [r7, #12]
 800c0c8:	e001      	b.n	800c0ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0ce:	f001 f949 	bl	800d364 <vPortExitCritical>

	return xReturn;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3710      	adds	r7, #16
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b08e      	sub	sp, #56	; 0x38
 800c0e0:	af04      	add	r7, sp, #16
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	60b9      	str	r1, [r7, #8]
 800c0e6:	607a      	str	r2, [r7, #4]
 800c0e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c0ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d10a      	bne.n	800c106 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	623b      	str	r3, [r7, #32]
}
 800c102:	bf00      	nop
 800c104:	e7fe      	b.n	800c104 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d10a      	bne.n	800c122 <xTaskCreateStatic+0x46>
	__asm volatile
 800c10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c110:	f383 8811 	msr	BASEPRI, r3
 800c114:	f3bf 8f6f 	isb	sy
 800c118:	f3bf 8f4f 	dsb	sy
 800c11c:	61fb      	str	r3, [r7, #28]
}
 800c11e:	bf00      	nop
 800c120:	e7fe      	b.n	800c120 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c122:	2354      	movs	r3, #84	; 0x54
 800c124:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	2b54      	cmp	r3, #84	; 0x54
 800c12a:	d00a      	beq.n	800c142 <xTaskCreateStatic+0x66>
	__asm volatile
 800c12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c130:	f383 8811 	msr	BASEPRI, r3
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	f3bf 8f4f 	dsb	sy
 800c13c:	61bb      	str	r3, [r7, #24]
}
 800c13e:	bf00      	nop
 800c140:	e7fe      	b.n	800c140 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c142:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c146:	2b00      	cmp	r3, #0
 800c148:	d01e      	beq.n	800c188 <xTaskCreateStatic+0xac>
 800c14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d01b      	beq.n	800c188 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c152:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c158:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15c:	2202      	movs	r2, #2
 800c15e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c162:	2300      	movs	r3, #0
 800c164:	9303      	str	r3, [sp, #12]
 800c166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c168:	9302      	str	r3, [sp, #8]
 800c16a:	f107 0314 	add.w	r3, r7, #20
 800c16e:	9301      	str	r3, [sp, #4]
 800c170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c172:	9300      	str	r3, [sp, #0]
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	68b9      	ldr	r1, [r7, #8]
 800c17a:	68f8      	ldr	r0, [r7, #12]
 800c17c:	f000 f850 	bl	800c220 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c180:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c182:	f000 f8d5 	bl	800c330 <prvAddNewTaskToReadyList>
 800c186:	e001      	b.n	800c18c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c188:	2300      	movs	r3, #0
 800c18a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c18c:	697b      	ldr	r3, [r7, #20]
	}
 800c18e:	4618      	mov	r0, r3
 800c190:	3728      	adds	r7, #40	; 0x28
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c196:	b580      	push	{r7, lr}
 800c198:	b08c      	sub	sp, #48	; 0x30
 800c19a:	af04      	add	r7, sp, #16
 800c19c:	60f8      	str	r0, [r7, #12]
 800c19e:	60b9      	str	r1, [r7, #8]
 800c1a0:	603b      	str	r3, [r7, #0]
 800c1a2:	4613      	mov	r3, r2
 800c1a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c1a6:	88fb      	ldrh	r3, [r7, #6]
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f001 f9cc 	bl	800d548 <pvPortMalloc>
 800c1b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d00e      	beq.n	800c1d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c1b8:	2054      	movs	r0, #84	; 0x54
 800c1ba:	f001 f9c5 	bl	800d548 <pvPortMalloc>
 800c1be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c1c0:	69fb      	ldr	r3, [r7, #28]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d003      	beq.n	800c1ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c1c6:	69fb      	ldr	r3, [r7, #28]
 800c1c8:	697a      	ldr	r2, [r7, #20]
 800c1ca:	631a      	str	r2, [r3, #48]	; 0x30
 800c1cc:	e005      	b.n	800c1da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c1ce:	6978      	ldr	r0, [r7, #20]
 800c1d0:	f001 fa86 	bl	800d6e0 <vPortFree>
 800c1d4:	e001      	b.n	800c1da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c1da:	69fb      	ldr	r3, [r7, #28]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d017      	beq.n	800c210 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c1e0:	69fb      	ldr	r3, [r7, #28]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c1e8:	88fa      	ldrh	r2, [r7, #6]
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	9303      	str	r3, [sp, #12]
 800c1ee:	69fb      	ldr	r3, [r7, #28]
 800c1f0:	9302      	str	r3, [sp, #8]
 800c1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f4:	9301      	str	r3, [sp, #4]
 800c1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f8:	9300      	str	r3, [sp, #0]
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	68b9      	ldr	r1, [r7, #8]
 800c1fe:	68f8      	ldr	r0, [r7, #12]
 800c200:	f000 f80e 	bl	800c220 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c204:	69f8      	ldr	r0, [r7, #28]
 800c206:	f000 f893 	bl	800c330 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c20a:	2301      	movs	r3, #1
 800c20c:	61bb      	str	r3, [r7, #24]
 800c20e:	e002      	b.n	800c216 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c210:	f04f 33ff 	mov.w	r3, #4294967295
 800c214:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c216:	69bb      	ldr	r3, [r7, #24]
	}
 800c218:	4618      	mov	r0, r3
 800c21a:	3720      	adds	r7, #32
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b088      	sub	sp, #32
 800c224:	af00      	add	r7, sp, #0
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	60b9      	str	r1, [r7, #8]
 800c22a:	607a      	str	r2, [r7, #4]
 800c22c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c232:	6879      	ldr	r1, [r7, #4]
 800c234:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c238:	440b      	add	r3, r1
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	4413      	add	r3, r2
 800c23e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c240:	69bb      	ldr	r3, [r7, #24]
 800c242:	f023 0307 	bic.w	r3, r3, #7
 800c246:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	f003 0307 	and.w	r3, r3, #7
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d00a      	beq.n	800c268 <prvInitialiseNewTask+0x48>
	__asm volatile
 800c252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c256:	f383 8811 	msr	BASEPRI, r3
 800c25a:	f3bf 8f6f 	isb	sy
 800c25e:	f3bf 8f4f 	dsb	sy
 800c262:	617b      	str	r3, [r7, #20]
}
 800c264:	bf00      	nop
 800c266:	e7fe      	b.n	800c266 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d01f      	beq.n	800c2ae <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c26e:	2300      	movs	r3, #0
 800c270:	61fb      	str	r3, [r7, #28]
 800c272:	e012      	b.n	800c29a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c274:	68ba      	ldr	r2, [r7, #8]
 800c276:	69fb      	ldr	r3, [r7, #28]
 800c278:	4413      	add	r3, r2
 800c27a:	7819      	ldrb	r1, [r3, #0]
 800c27c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c27e:	69fb      	ldr	r3, [r7, #28]
 800c280:	4413      	add	r3, r2
 800c282:	3334      	adds	r3, #52	; 0x34
 800c284:	460a      	mov	r2, r1
 800c286:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c288:	68ba      	ldr	r2, [r7, #8]
 800c28a:	69fb      	ldr	r3, [r7, #28]
 800c28c:	4413      	add	r3, r2
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d006      	beq.n	800c2a2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	3301      	adds	r3, #1
 800c298:	61fb      	str	r3, [r7, #28]
 800c29a:	69fb      	ldr	r3, [r7, #28]
 800c29c:	2b0f      	cmp	r3, #15
 800c29e:	d9e9      	bls.n	800c274 <prvInitialiseNewTask+0x54>
 800c2a0:	e000      	b.n	800c2a4 <prvInitialiseNewTask+0x84>
			{
				break;
 800c2a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c2ac:	e003      	b.n	800c2b6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b8:	2b06      	cmp	r3, #6
 800c2ba:	d901      	bls.n	800c2c0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c2bc:	2306      	movs	r3, #6
 800c2be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2ca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d4:	3304      	adds	r3, #4
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7ff f94b 	bl	800b572 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2de:	3318      	adds	r3, #24
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7ff f946 	bl	800b572 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ee:	f1c3 0207 	rsb	r2, r3, #7
 800c2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fe:	2200      	movs	r2, #0
 800c300:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c304:	2200      	movs	r2, #0
 800c306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c30a:	683a      	ldr	r2, [r7, #0]
 800c30c:	68f9      	ldr	r1, [r7, #12]
 800c30e:	69b8      	ldr	r0, [r7, #24]
 800c310:	f000 fecc 	bl	800d0ac <pxPortInitialiseStack>
 800c314:	4602      	mov	r2, r0
 800c316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c318:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d002      	beq.n	800c326 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c326:	bf00      	nop
 800c328:	3720      	adds	r7, #32
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
	...

0800c330 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b082      	sub	sp, #8
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c338:	f000 ffe4 	bl	800d304 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c33c:	4b2a      	ldr	r3, [pc, #168]	; (800c3e8 <prvAddNewTaskToReadyList+0xb8>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	3301      	adds	r3, #1
 800c342:	4a29      	ldr	r2, [pc, #164]	; (800c3e8 <prvAddNewTaskToReadyList+0xb8>)
 800c344:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c346:	4b29      	ldr	r3, [pc, #164]	; (800c3ec <prvAddNewTaskToReadyList+0xbc>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d109      	bne.n	800c362 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c34e:	4a27      	ldr	r2, [pc, #156]	; (800c3ec <prvAddNewTaskToReadyList+0xbc>)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c354:	4b24      	ldr	r3, [pc, #144]	; (800c3e8 <prvAddNewTaskToReadyList+0xb8>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d110      	bne.n	800c37e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c35c:	f000 fbc6 	bl	800caec <prvInitialiseTaskLists>
 800c360:	e00d      	b.n	800c37e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c362:	4b23      	ldr	r3, [pc, #140]	; (800c3f0 <prvAddNewTaskToReadyList+0xc0>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d109      	bne.n	800c37e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c36a:	4b20      	ldr	r3, [pc, #128]	; (800c3ec <prvAddNewTaskToReadyList+0xbc>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c374:	429a      	cmp	r2, r3
 800c376:	d802      	bhi.n	800c37e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c378:	4a1c      	ldr	r2, [pc, #112]	; (800c3ec <prvAddNewTaskToReadyList+0xbc>)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c37e:	4b1d      	ldr	r3, [pc, #116]	; (800c3f4 <prvAddNewTaskToReadyList+0xc4>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	3301      	adds	r3, #1
 800c384:	4a1b      	ldr	r2, [pc, #108]	; (800c3f4 <prvAddNewTaskToReadyList+0xc4>)
 800c386:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c38c:	2201      	movs	r2, #1
 800c38e:	409a      	lsls	r2, r3
 800c390:	4b19      	ldr	r3, [pc, #100]	; (800c3f8 <prvAddNewTaskToReadyList+0xc8>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4313      	orrs	r3, r2
 800c396:	4a18      	ldr	r2, [pc, #96]	; (800c3f8 <prvAddNewTaskToReadyList+0xc8>)
 800c398:	6013      	str	r3, [r2, #0]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c39e:	4613      	mov	r3, r2
 800c3a0:	009b      	lsls	r3, r3, #2
 800c3a2:	4413      	add	r3, r2
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	4a15      	ldr	r2, [pc, #84]	; (800c3fc <prvAddNewTaskToReadyList+0xcc>)
 800c3a8:	441a      	add	r2, r3
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	3304      	adds	r3, #4
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	4610      	mov	r0, r2
 800c3b2:	f7ff f8eb 	bl	800b58c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c3b6:	f000 ffd5 	bl	800d364 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c3ba:	4b0d      	ldr	r3, [pc, #52]	; (800c3f0 <prvAddNewTaskToReadyList+0xc0>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00e      	beq.n	800c3e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c3c2:	4b0a      	ldr	r3, [pc, #40]	; (800c3ec <prvAddNewTaskToReadyList+0xbc>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d207      	bcs.n	800c3e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c3d0:	4b0b      	ldr	r3, [pc, #44]	; (800c400 <prvAddNewTaskToReadyList+0xd0>)
 800c3d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3d6:	601a      	str	r2, [r3, #0]
 800c3d8:	f3bf 8f4f 	dsb	sy
 800c3dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3e0:	bf00      	nop
 800c3e2:	3708      	adds	r7, #8
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	20000394 	.word	0x20000394
 800c3ec:	20000294 	.word	0x20000294
 800c3f0:	200003a0 	.word	0x200003a0
 800c3f4:	200003b0 	.word	0x200003b0
 800c3f8:	2000039c 	.word	0x2000039c
 800c3fc:	20000298 	.word	0x20000298
 800c400:	e000ed04 	.word	0xe000ed04

0800c404 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c404:	b580      	push	{r7, lr}
 800c406:	b084      	sub	sp, #16
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c40c:	2300      	movs	r3, #0
 800c40e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d017      	beq.n	800c446 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c416:	4b13      	ldr	r3, [pc, #76]	; (800c464 <vTaskDelay+0x60>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d00a      	beq.n	800c434 <vTaskDelay+0x30>
	__asm volatile
 800c41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c422:	f383 8811 	msr	BASEPRI, r3
 800c426:	f3bf 8f6f 	isb	sy
 800c42a:	f3bf 8f4f 	dsb	sy
 800c42e:	60bb      	str	r3, [r7, #8]
}
 800c430:	bf00      	nop
 800c432:	e7fe      	b.n	800c432 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c434:	f000 f87a 	bl	800c52c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c438:	2100      	movs	r1, #0
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 fdd0 	bl	800cfe0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c440:	f000 f882 	bl	800c548 <xTaskResumeAll>
 800c444:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d107      	bne.n	800c45c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c44c:	4b06      	ldr	r3, [pc, #24]	; (800c468 <vTaskDelay+0x64>)
 800c44e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c452:	601a      	str	r2, [r3, #0]
 800c454:	f3bf 8f4f 	dsb	sy
 800c458:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c45c:	bf00      	nop
 800c45e:	3710      	adds	r7, #16
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}
 800c464:	200003bc 	.word	0x200003bc
 800c468:	e000ed04 	.word	0xe000ed04

0800c46c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b08a      	sub	sp, #40	; 0x28
 800c470:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c472:	2300      	movs	r3, #0
 800c474:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c476:	2300      	movs	r3, #0
 800c478:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c47a:	463a      	mov	r2, r7
 800c47c:	1d39      	adds	r1, r7, #4
 800c47e:	f107 0308 	add.w	r3, r7, #8
 800c482:	4618      	mov	r0, r3
 800c484:	f7f4 ff2a 	bl	80012dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c488:	6839      	ldr	r1, [r7, #0]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	68ba      	ldr	r2, [r7, #8]
 800c48e:	9202      	str	r2, [sp, #8]
 800c490:	9301      	str	r3, [sp, #4]
 800c492:	2300      	movs	r3, #0
 800c494:	9300      	str	r3, [sp, #0]
 800c496:	2300      	movs	r3, #0
 800c498:	460a      	mov	r2, r1
 800c49a:	491e      	ldr	r1, [pc, #120]	; (800c514 <vTaskStartScheduler+0xa8>)
 800c49c:	481e      	ldr	r0, [pc, #120]	; (800c518 <vTaskStartScheduler+0xac>)
 800c49e:	f7ff fe1d 	bl	800c0dc <xTaskCreateStatic>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	4a1d      	ldr	r2, [pc, #116]	; (800c51c <vTaskStartScheduler+0xb0>)
 800c4a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c4a8:	4b1c      	ldr	r3, [pc, #112]	; (800c51c <vTaskStartScheduler+0xb0>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d002      	beq.n	800c4b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	617b      	str	r3, [r7, #20]
 800c4b4:	e001      	b.n	800c4ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d116      	bne.n	800c4ee <vTaskStartScheduler+0x82>
	__asm volatile
 800c4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	613b      	str	r3, [r7, #16]
}
 800c4d2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c4d4:	4b12      	ldr	r3, [pc, #72]	; (800c520 <vTaskStartScheduler+0xb4>)
 800c4d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c4da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c4dc:	4b11      	ldr	r3, [pc, #68]	; (800c524 <vTaskStartScheduler+0xb8>)
 800c4de:	2201      	movs	r2, #1
 800c4e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c4e2:	4b11      	ldr	r3, [pc, #68]	; (800c528 <vTaskStartScheduler+0xbc>)
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c4e8:	f000 fe6a 	bl	800d1c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c4ec:	e00e      	b.n	800c50c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4f4:	d10a      	bne.n	800c50c <vTaskStartScheduler+0xa0>
	__asm volatile
 800c4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fa:	f383 8811 	msr	BASEPRI, r3
 800c4fe:	f3bf 8f6f 	isb	sy
 800c502:	f3bf 8f4f 	dsb	sy
 800c506:	60fb      	str	r3, [r7, #12]
}
 800c508:	bf00      	nop
 800c50a:	e7fe      	b.n	800c50a <vTaskStartScheduler+0x9e>
}
 800c50c:	bf00      	nop
 800c50e:	3718      	adds	r7, #24
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}
 800c514:	0800da50 	.word	0x0800da50
 800c518:	0800cabd 	.word	0x0800cabd
 800c51c:	200003b8 	.word	0x200003b8
 800c520:	200003b4 	.word	0x200003b4
 800c524:	200003a0 	.word	0x200003a0
 800c528:	20000398 	.word	0x20000398

0800c52c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c52c:	b480      	push	{r7}
 800c52e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c530:	4b04      	ldr	r3, [pc, #16]	; (800c544 <vTaskSuspendAll+0x18>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	3301      	adds	r3, #1
 800c536:	4a03      	ldr	r2, [pc, #12]	; (800c544 <vTaskSuspendAll+0x18>)
 800c538:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c53a:	bf00      	nop
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr
 800c544:	200003bc 	.word	0x200003bc

0800c548 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c54e:	2300      	movs	r3, #0
 800c550:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c552:	2300      	movs	r3, #0
 800c554:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c556:	4b41      	ldr	r3, [pc, #260]	; (800c65c <xTaskResumeAll+0x114>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d10a      	bne.n	800c574 <xTaskResumeAll+0x2c>
	__asm volatile
 800c55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c562:	f383 8811 	msr	BASEPRI, r3
 800c566:	f3bf 8f6f 	isb	sy
 800c56a:	f3bf 8f4f 	dsb	sy
 800c56e:	603b      	str	r3, [r7, #0]
}
 800c570:	bf00      	nop
 800c572:	e7fe      	b.n	800c572 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c574:	f000 fec6 	bl	800d304 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c578:	4b38      	ldr	r3, [pc, #224]	; (800c65c <xTaskResumeAll+0x114>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	3b01      	subs	r3, #1
 800c57e:	4a37      	ldr	r2, [pc, #220]	; (800c65c <xTaskResumeAll+0x114>)
 800c580:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c582:	4b36      	ldr	r3, [pc, #216]	; (800c65c <xTaskResumeAll+0x114>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d161      	bne.n	800c64e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c58a:	4b35      	ldr	r3, [pc, #212]	; (800c660 <xTaskResumeAll+0x118>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d05d      	beq.n	800c64e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c592:	e02e      	b.n	800c5f2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c594:	4b33      	ldr	r3, [pc, #204]	; (800c664 <xTaskResumeAll+0x11c>)
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	68db      	ldr	r3, [r3, #12]
 800c59a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	3318      	adds	r3, #24
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7ff f850 	bl	800b646 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	3304      	adds	r3, #4
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7ff f84b 	bl	800b646 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	409a      	lsls	r2, r3
 800c5b8:	4b2b      	ldr	r3, [pc, #172]	; (800c668 <xTaskResumeAll+0x120>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	4a2a      	ldr	r2, [pc, #168]	; (800c668 <xTaskResumeAll+0x120>)
 800c5c0:	6013      	str	r3, [r2, #0]
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5c6:	4613      	mov	r3, r2
 800c5c8:	009b      	lsls	r3, r3, #2
 800c5ca:	4413      	add	r3, r2
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	4a27      	ldr	r2, [pc, #156]	; (800c66c <xTaskResumeAll+0x124>)
 800c5d0:	441a      	add	r2, r3
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	3304      	adds	r3, #4
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	4610      	mov	r0, r2
 800c5da:	f7fe ffd7 	bl	800b58c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5e2:	4b23      	ldr	r3, [pc, #140]	; (800c670 <xTaskResumeAll+0x128>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d302      	bcc.n	800c5f2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c5ec:	4b21      	ldr	r3, [pc, #132]	; (800c674 <xTaskResumeAll+0x12c>)
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c5f2:	4b1c      	ldr	r3, [pc, #112]	; (800c664 <xTaskResumeAll+0x11c>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d1cc      	bne.n	800c594 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d001      	beq.n	800c604 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c600:	f000 fb12 	bl	800cc28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c604:	4b1c      	ldr	r3, [pc, #112]	; (800c678 <xTaskResumeAll+0x130>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d010      	beq.n	800c632 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c610:	f000 f836 	bl	800c680 <xTaskIncrementTick>
 800c614:	4603      	mov	r3, r0
 800c616:	2b00      	cmp	r3, #0
 800c618:	d002      	beq.n	800c620 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c61a:	4b16      	ldr	r3, [pc, #88]	; (800c674 <xTaskResumeAll+0x12c>)
 800c61c:	2201      	movs	r2, #1
 800c61e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	3b01      	subs	r3, #1
 800c624:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d1f1      	bne.n	800c610 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c62c:	4b12      	ldr	r3, [pc, #72]	; (800c678 <xTaskResumeAll+0x130>)
 800c62e:	2200      	movs	r2, #0
 800c630:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c632:	4b10      	ldr	r3, [pc, #64]	; (800c674 <xTaskResumeAll+0x12c>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d009      	beq.n	800c64e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c63a:	2301      	movs	r3, #1
 800c63c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c63e:	4b0f      	ldr	r3, [pc, #60]	; (800c67c <xTaskResumeAll+0x134>)
 800c640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c644:	601a      	str	r2, [r3, #0]
 800c646:	f3bf 8f4f 	dsb	sy
 800c64a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c64e:	f000 fe89 	bl	800d364 <vPortExitCritical>

	return xAlreadyYielded;
 800c652:	68bb      	ldr	r3, [r7, #8]
}
 800c654:	4618      	mov	r0, r3
 800c656:	3710      	adds	r7, #16
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	200003bc 	.word	0x200003bc
 800c660:	20000394 	.word	0x20000394
 800c664:	20000354 	.word	0x20000354
 800c668:	2000039c 	.word	0x2000039c
 800c66c:	20000298 	.word	0x20000298
 800c670:	20000294 	.word	0x20000294
 800c674:	200003a8 	.word	0x200003a8
 800c678:	200003a4 	.word	0x200003a4
 800c67c:	e000ed04 	.word	0xe000ed04

0800c680 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b086      	sub	sp, #24
 800c684:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c686:	2300      	movs	r3, #0
 800c688:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c68a:	4b4e      	ldr	r3, [pc, #312]	; (800c7c4 <xTaskIncrementTick+0x144>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f040 808e 	bne.w	800c7b0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c694:	4b4c      	ldr	r3, [pc, #304]	; (800c7c8 <xTaskIncrementTick+0x148>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	3301      	adds	r3, #1
 800c69a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c69c:	4a4a      	ldr	r2, [pc, #296]	; (800c7c8 <xTaskIncrementTick+0x148>)
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d120      	bne.n	800c6ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c6a8:	4b48      	ldr	r3, [pc, #288]	; (800c7cc <xTaskIncrementTick+0x14c>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d00a      	beq.n	800c6c8 <xTaskIncrementTick+0x48>
	__asm volatile
 800c6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b6:	f383 8811 	msr	BASEPRI, r3
 800c6ba:	f3bf 8f6f 	isb	sy
 800c6be:	f3bf 8f4f 	dsb	sy
 800c6c2:	603b      	str	r3, [r7, #0]
}
 800c6c4:	bf00      	nop
 800c6c6:	e7fe      	b.n	800c6c6 <xTaskIncrementTick+0x46>
 800c6c8:	4b40      	ldr	r3, [pc, #256]	; (800c7cc <xTaskIncrementTick+0x14c>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	60fb      	str	r3, [r7, #12]
 800c6ce:	4b40      	ldr	r3, [pc, #256]	; (800c7d0 <xTaskIncrementTick+0x150>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	4a3e      	ldr	r2, [pc, #248]	; (800c7cc <xTaskIncrementTick+0x14c>)
 800c6d4:	6013      	str	r3, [r2, #0]
 800c6d6:	4a3e      	ldr	r2, [pc, #248]	; (800c7d0 <xTaskIncrementTick+0x150>)
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	6013      	str	r3, [r2, #0]
 800c6dc:	4b3d      	ldr	r3, [pc, #244]	; (800c7d4 <xTaskIncrementTick+0x154>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	4a3c      	ldr	r2, [pc, #240]	; (800c7d4 <xTaskIncrementTick+0x154>)
 800c6e4:	6013      	str	r3, [r2, #0]
 800c6e6:	f000 fa9f 	bl	800cc28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c6ea:	4b3b      	ldr	r3, [pc, #236]	; (800c7d8 <xTaskIncrementTick+0x158>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	693a      	ldr	r2, [r7, #16]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d348      	bcc.n	800c786 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6f4:	4b35      	ldr	r3, [pc, #212]	; (800c7cc <xTaskIncrementTick+0x14c>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d104      	bne.n	800c708 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6fe:	4b36      	ldr	r3, [pc, #216]	; (800c7d8 <xTaskIncrementTick+0x158>)
 800c700:	f04f 32ff 	mov.w	r2, #4294967295
 800c704:	601a      	str	r2, [r3, #0]
					break;
 800c706:	e03e      	b.n	800c786 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c708:	4b30      	ldr	r3, [pc, #192]	; (800c7cc <xTaskIncrementTick+0x14c>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	68db      	ldr	r3, [r3, #12]
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c718:	693a      	ldr	r2, [r7, #16]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d203      	bcs.n	800c728 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c720:	4a2d      	ldr	r2, [pc, #180]	; (800c7d8 <xTaskIncrementTick+0x158>)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c726:	e02e      	b.n	800c786 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	3304      	adds	r3, #4
 800c72c:	4618      	mov	r0, r3
 800c72e:	f7fe ff8a 	bl	800b646 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c736:	2b00      	cmp	r3, #0
 800c738:	d004      	beq.n	800c744 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	3318      	adds	r3, #24
 800c73e:	4618      	mov	r0, r3
 800c740:	f7fe ff81 	bl	800b646 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c748:	2201      	movs	r2, #1
 800c74a:	409a      	lsls	r2, r3
 800c74c:	4b23      	ldr	r3, [pc, #140]	; (800c7dc <xTaskIncrementTick+0x15c>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	4313      	orrs	r3, r2
 800c752:	4a22      	ldr	r2, [pc, #136]	; (800c7dc <xTaskIncrementTick+0x15c>)
 800c754:	6013      	str	r3, [r2, #0]
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c75a:	4613      	mov	r3, r2
 800c75c:	009b      	lsls	r3, r3, #2
 800c75e:	4413      	add	r3, r2
 800c760:	009b      	lsls	r3, r3, #2
 800c762:	4a1f      	ldr	r2, [pc, #124]	; (800c7e0 <xTaskIncrementTick+0x160>)
 800c764:	441a      	add	r2, r3
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	3304      	adds	r3, #4
 800c76a:	4619      	mov	r1, r3
 800c76c:	4610      	mov	r0, r2
 800c76e:	f7fe ff0d 	bl	800b58c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c776:	4b1b      	ldr	r3, [pc, #108]	; (800c7e4 <xTaskIncrementTick+0x164>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d3b9      	bcc.n	800c6f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c780:	2301      	movs	r3, #1
 800c782:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c784:	e7b6      	b.n	800c6f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c786:	4b17      	ldr	r3, [pc, #92]	; (800c7e4 <xTaskIncrementTick+0x164>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c78c:	4914      	ldr	r1, [pc, #80]	; (800c7e0 <xTaskIncrementTick+0x160>)
 800c78e:	4613      	mov	r3, r2
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	4413      	add	r3, r2
 800c794:	009b      	lsls	r3, r3, #2
 800c796:	440b      	add	r3, r1
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d901      	bls.n	800c7a2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c7a2:	4b11      	ldr	r3, [pc, #68]	; (800c7e8 <xTaskIncrementTick+0x168>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d007      	beq.n	800c7ba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	617b      	str	r3, [r7, #20]
 800c7ae:	e004      	b.n	800c7ba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c7b0:	4b0e      	ldr	r3, [pc, #56]	; (800c7ec <xTaskIncrementTick+0x16c>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	3301      	adds	r3, #1
 800c7b6:	4a0d      	ldr	r2, [pc, #52]	; (800c7ec <xTaskIncrementTick+0x16c>)
 800c7b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c7ba:	697b      	ldr	r3, [r7, #20]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3718      	adds	r7, #24
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	200003bc 	.word	0x200003bc
 800c7c8:	20000398 	.word	0x20000398
 800c7cc:	2000034c 	.word	0x2000034c
 800c7d0:	20000350 	.word	0x20000350
 800c7d4:	200003ac 	.word	0x200003ac
 800c7d8:	200003b4 	.word	0x200003b4
 800c7dc:	2000039c 	.word	0x2000039c
 800c7e0:	20000298 	.word	0x20000298
 800c7e4:	20000294 	.word	0x20000294
 800c7e8:	200003a8 	.word	0x200003a8
 800c7ec:	200003a4 	.word	0x200003a4

0800c7f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b087      	sub	sp, #28
 800c7f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c7f6:	4b27      	ldr	r3, [pc, #156]	; (800c894 <vTaskSwitchContext+0xa4>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d003      	beq.n	800c806 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c7fe:	4b26      	ldr	r3, [pc, #152]	; (800c898 <vTaskSwitchContext+0xa8>)
 800c800:	2201      	movs	r2, #1
 800c802:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c804:	e03f      	b.n	800c886 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800c806:	4b24      	ldr	r3, [pc, #144]	; (800c898 <vTaskSwitchContext+0xa8>)
 800c808:	2200      	movs	r2, #0
 800c80a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c80c:	4b23      	ldr	r3, [pc, #140]	; (800c89c <vTaskSwitchContext+0xac>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	fab3 f383 	clz	r3, r3
 800c818:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c81a:	7afb      	ldrb	r3, [r7, #11]
 800c81c:	f1c3 031f 	rsb	r3, r3, #31
 800c820:	617b      	str	r3, [r7, #20]
 800c822:	491f      	ldr	r1, [pc, #124]	; (800c8a0 <vTaskSwitchContext+0xb0>)
 800c824:	697a      	ldr	r2, [r7, #20]
 800c826:	4613      	mov	r3, r2
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	4413      	add	r3, r2
 800c82c:	009b      	lsls	r3, r3, #2
 800c82e:	440b      	add	r3, r1
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d10a      	bne.n	800c84c <vTaskSwitchContext+0x5c>
	__asm volatile
 800c836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c83a:	f383 8811 	msr	BASEPRI, r3
 800c83e:	f3bf 8f6f 	isb	sy
 800c842:	f3bf 8f4f 	dsb	sy
 800c846:	607b      	str	r3, [r7, #4]
}
 800c848:	bf00      	nop
 800c84a:	e7fe      	b.n	800c84a <vTaskSwitchContext+0x5a>
 800c84c:	697a      	ldr	r2, [r7, #20]
 800c84e:	4613      	mov	r3, r2
 800c850:	009b      	lsls	r3, r3, #2
 800c852:	4413      	add	r3, r2
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	4a12      	ldr	r2, [pc, #72]	; (800c8a0 <vTaskSwitchContext+0xb0>)
 800c858:	4413      	add	r3, r2
 800c85a:	613b      	str	r3, [r7, #16]
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	685a      	ldr	r2, [r3, #4]
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	605a      	str	r2, [r3, #4]
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	685a      	ldr	r2, [r3, #4]
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	3308      	adds	r3, #8
 800c86e:	429a      	cmp	r2, r3
 800c870:	d104      	bne.n	800c87c <vTaskSwitchContext+0x8c>
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	685a      	ldr	r2, [r3, #4]
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	605a      	str	r2, [r3, #4]
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	685b      	ldr	r3, [r3, #4]
 800c880:	68db      	ldr	r3, [r3, #12]
 800c882:	4a08      	ldr	r2, [pc, #32]	; (800c8a4 <vTaskSwitchContext+0xb4>)
 800c884:	6013      	str	r3, [r2, #0]
}
 800c886:	bf00      	nop
 800c888:	371c      	adds	r7, #28
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	200003bc 	.word	0x200003bc
 800c898:	200003a8 	.word	0x200003a8
 800c89c:	2000039c 	.word	0x2000039c
 800c8a0:	20000298 	.word	0x20000298
 800c8a4:	20000294 	.word	0x20000294

0800c8a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d10a      	bne.n	800c8ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8bc:	f383 8811 	msr	BASEPRI, r3
 800c8c0:	f3bf 8f6f 	isb	sy
 800c8c4:	f3bf 8f4f 	dsb	sy
 800c8c8:	60fb      	str	r3, [r7, #12]
}
 800c8ca:	bf00      	nop
 800c8cc:	e7fe      	b.n	800c8cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c8ce:	4b07      	ldr	r3, [pc, #28]	; (800c8ec <vTaskPlaceOnEventList+0x44>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	3318      	adds	r3, #24
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f7fe fe7c 	bl	800b5d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c8dc:	2101      	movs	r1, #1
 800c8de:	6838      	ldr	r0, [r7, #0]
 800c8e0:	f000 fb7e 	bl	800cfe0 <prvAddCurrentTaskToDelayedList>
}
 800c8e4:	bf00      	nop
 800c8e6:	3710      	adds	r7, #16
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}
 800c8ec:	20000294 	.word	0x20000294

0800c8f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b086      	sub	sp, #24
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	68db      	ldr	r3, [r3, #12]
 800c8fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d10a      	bne.n	800c91c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c90a:	f383 8811 	msr	BASEPRI, r3
 800c90e:	f3bf 8f6f 	isb	sy
 800c912:	f3bf 8f4f 	dsb	sy
 800c916:	60fb      	str	r3, [r7, #12]
}
 800c918:	bf00      	nop
 800c91a:	e7fe      	b.n	800c91a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	3318      	adds	r3, #24
 800c920:	4618      	mov	r0, r3
 800c922:	f7fe fe90 	bl	800b646 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c926:	4b1d      	ldr	r3, [pc, #116]	; (800c99c <xTaskRemoveFromEventList+0xac>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d11c      	bne.n	800c968 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	3304      	adds	r3, #4
 800c932:	4618      	mov	r0, r3
 800c934:	f7fe fe87 	bl	800b646 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c93c:	2201      	movs	r2, #1
 800c93e:	409a      	lsls	r2, r3
 800c940:	4b17      	ldr	r3, [pc, #92]	; (800c9a0 <xTaskRemoveFromEventList+0xb0>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4313      	orrs	r3, r2
 800c946:	4a16      	ldr	r2, [pc, #88]	; (800c9a0 <xTaskRemoveFromEventList+0xb0>)
 800c948:	6013      	str	r3, [r2, #0]
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c94e:	4613      	mov	r3, r2
 800c950:	009b      	lsls	r3, r3, #2
 800c952:	4413      	add	r3, r2
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	4a13      	ldr	r2, [pc, #76]	; (800c9a4 <xTaskRemoveFromEventList+0xb4>)
 800c958:	441a      	add	r2, r3
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	3304      	adds	r3, #4
 800c95e:	4619      	mov	r1, r3
 800c960:	4610      	mov	r0, r2
 800c962:	f7fe fe13 	bl	800b58c <vListInsertEnd>
 800c966:	e005      	b.n	800c974 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	3318      	adds	r3, #24
 800c96c:	4619      	mov	r1, r3
 800c96e:	480e      	ldr	r0, [pc, #56]	; (800c9a8 <xTaskRemoveFromEventList+0xb8>)
 800c970:	f7fe fe0c 	bl	800b58c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c978:	4b0c      	ldr	r3, [pc, #48]	; (800c9ac <xTaskRemoveFromEventList+0xbc>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c97e:	429a      	cmp	r2, r3
 800c980:	d905      	bls.n	800c98e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c982:	2301      	movs	r3, #1
 800c984:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c986:	4b0a      	ldr	r3, [pc, #40]	; (800c9b0 <xTaskRemoveFromEventList+0xc0>)
 800c988:	2201      	movs	r2, #1
 800c98a:	601a      	str	r2, [r3, #0]
 800c98c:	e001      	b.n	800c992 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c98e:	2300      	movs	r3, #0
 800c990:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c992:	697b      	ldr	r3, [r7, #20]
}
 800c994:	4618      	mov	r0, r3
 800c996:	3718      	adds	r7, #24
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}
 800c99c:	200003bc 	.word	0x200003bc
 800c9a0:	2000039c 	.word	0x2000039c
 800c9a4:	20000298 	.word	0x20000298
 800c9a8:	20000354 	.word	0x20000354
 800c9ac:	20000294 	.word	0x20000294
 800c9b0:	200003a8 	.word	0x200003a8

0800c9b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c9bc:	4b06      	ldr	r3, [pc, #24]	; (800c9d8 <vTaskInternalSetTimeOutState+0x24>)
 800c9be:	681a      	ldr	r2, [r3, #0]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c9c4:	4b05      	ldr	r3, [pc, #20]	; (800c9dc <vTaskInternalSetTimeOutState+0x28>)
 800c9c6:	681a      	ldr	r2, [r3, #0]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	605a      	str	r2, [r3, #4]
}
 800c9cc:	bf00      	nop
 800c9ce:	370c      	adds	r7, #12
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr
 800c9d8:	200003ac 	.word	0x200003ac
 800c9dc:	20000398 	.word	0x20000398

0800c9e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b088      	sub	sp, #32
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d10a      	bne.n	800ca06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f4:	f383 8811 	msr	BASEPRI, r3
 800c9f8:	f3bf 8f6f 	isb	sy
 800c9fc:	f3bf 8f4f 	dsb	sy
 800ca00:	613b      	str	r3, [r7, #16]
}
 800ca02:	bf00      	nop
 800ca04:	e7fe      	b.n	800ca04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d10a      	bne.n	800ca22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ca0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca10:	f383 8811 	msr	BASEPRI, r3
 800ca14:	f3bf 8f6f 	isb	sy
 800ca18:	f3bf 8f4f 	dsb	sy
 800ca1c:	60fb      	str	r3, [r7, #12]
}
 800ca1e:	bf00      	nop
 800ca20:	e7fe      	b.n	800ca20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ca22:	f000 fc6f 	bl	800d304 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ca26:	4b1d      	ldr	r3, [pc, #116]	; (800ca9c <xTaskCheckForTimeOut+0xbc>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	69ba      	ldr	r2, [r7, #24]
 800ca32:	1ad3      	subs	r3, r2, r3
 800ca34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca3e:	d102      	bne.n	800ca46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ca40:	2300      	movs	r3, #0
 800ca42:	61fb      	str	r3, [r7, #28]
 800ca44:	e023      	b.n	800ca8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	4b15      	ldr	r3, [pc, #84]	; (800caa0 <xTaskCheckForTimeOut+0xc0>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d007      	beq.n	800ca62 <xTaskCheckForTimeOut+0x82>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	69ba      	ldr	r2, [r7, #24]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d302      	bcc.n	800ca62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	61fb      	str	r3, [r7, #28]
 800ca60:	e015      	b.n	800ca8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	697a      	ldr	r2, [r7, #20]
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d20b      	bcs.n	800ca84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	681a      	ldr	r2, [r3, #0]
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	1ad2      	subs	r2, r2, r3
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f7ff ff9b 	bl	800c9b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	61fb      	str	r3, [r7, #28]
 800ca82:	e004      	b.n	800ca8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	2200      	movs	r2, #0
 800ca88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ca8e:	f000 fc69 	bl	800d364 <vPortExitCritical>

	return xReturn;
 800ca92:	69fb      	ldr	r3, [r7, #28]
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3720      	adds	r7, #32
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}
 800ca9c:	20000398 	.word	0x20000398
 800caa0:	200003ac 	.word	0x200003ac

0800caa4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800caa4:	b480      	push	{r7}
 800caa6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800caa8:	4b03      	ldr	r3, [pc, #12]	; (800cab8 <vTaskMissedYield+0x14>)
 800caaa:	2201      	movs	r2, #1
 800caac:	601a      	str	r2, [r3, #0]
}
 800caae:	bf00      	nop
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr
 800cab8:	200003a8 	.word	0x200003a8

0800cabc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b082      	sub	sp, #8
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cac4:	f000 f852 	bl	800cb6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cac8:	4b06      	ldr	r3, [pc, #24]	; (800cae4 <prvIdleTask+0x28>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d9f9      	bls.n	800cac4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cad0:	4b05      	ldr	r3, [pc, #20]	; (800cae8 <prvIdleTask+0x2c>)
 800cad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cad6:	601a      	str	r2, [r3, #0]
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cae0:	e7f0      	b.n	800cac4 <prvIdleTask+0x8>
 800cae2:	bf00      	nop
 800cae4:	20000298 	.word	0x20000298
 800cae8:	e000ed04 	.word	0xe000ed04

0800caec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b082      	sub	sp, #8
 800caf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800caf2:	2300      	movs	r3, #0
 800caf4:	607b      	str	r3, [r7, #4]
 800caf6:	e00c      	b.n	800cb12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	4613      	mov	r3, r2
 800cafc:	009b      	lsls	r3, r3, #2
 800cafe:	4413      	add	r3, r2
 800cb00:	009b      	lsls	r3, r3, #2
 800cb02:	4a12      	ldr	r2, [pc, #72]	; (800cb4c <prvInitialiseTaskLists+0x60>)
 800cb04:	4413      	add	r3, r2
 800cb06:	4618      	mov	r0, r3
 800cb08:	f7fe fd13 	bl	800b532 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	3301      	adds	r3, #1
 800cb10:	607b      	str	r3, [r7, #4]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2b06      	cmp	r3, #6
 800cb16:	d9ef      	bls.n	800caf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cb18:	480d      	ldr	r0, [pc, #52]	; (800cb50 <prvInitialiseTaskLists+0x64>)
 800cb1a:	f7fe fd0a 	bl	800b532 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cb1e:	480d      	ldr	r0, [pc, #52]	; (800cb54 <prvInitialiseTaskLists+0x68>)
 800cb20:	f7fe fd07 	bl	800b532 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cb24:	480c      	ldr	r0, [pc, #48]	; (800cb58 <prvInitialiseTaskLists+0x6c>)
 800cb26:	f7fe fd04 	bl	800b532 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cb2a:	480c      	ldr	r0, [pc, #48]	; (800cb5c <prvInitialiseTaskLists+0x70>)
 800cb2c:	f7fe fd01 	bl	800b532 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cb30:	480b      	ldr	r0, [pc, #44]	; (800cb60 <prvInitialiseTaskLists+0x74>)
 800cb32:	f7fe fcfe 	bl	800b532 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cb36:	4b0b      	ldr	r3, [pc, #44]	; (800cb64 <prvInitialiseTaskLists+0x78>)
 800cb38:	4a05      	ldr	r2, [pc, #20]	; (800cb50 <prvInitialiseTaskLists+0x64>)
 800cb3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cb3c:	4b0a      	ldr	r3, [pc, #40]	; (800cb68 <prvInitialiseTaskLists+0x7c>)
 800cb3e:	4a05      	ldr	r2, [pc, #20]	; (800cb54 <prvInitialiseTaskLists+0x68>)
 800cb40:	601a      	str	r2, [r3, #0]
}
 800cb42:	bf00      	nop
 800cb44:	3708      	adds	r7, #8
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
 800cb4a:	bf00      	nop
 800cb4c:	20000298 	.word	0x20000298
 800cb50:	20000324 	.word	0x20000324
 800cb54:	20000338 	.word	0x20000338
 800cb58:	20000354 	.word	0x20000354
 800cb5c:	20000368 	.word	0x20000368
 800cb60:	20000380 	.word	0x20000380
 800cb64:	2000034c 	.word	0x2000034c
 800cb68:	20000350 	.word	0x20000350

0800cb6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cb72:	e019      	b.n	800cba8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cb74:	f000 fbc6 	bl	800d304 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb78:	4b10      	ldr	r3, [pc, #64]	; (800cbbc <prvCheckTasksWaitingTermination+0x50>)
 800cb7a:	68db      	ldr	r3, [r3, #12]
 800cb7c:	68db      	ldr	r3, [r3, #12]
 800cb7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	3304      	adds	r3, #4
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7fe fd5e 	bl	800b646 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cb8a:	4b0d      	ldr	r3, [pc, #52]	; (800cbc0 <prvCheckTasksWaitingTermination+0x54>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	3b01      	subs	r3, #1
 800cb90:	4a0b      	ldr	r2, [pc, #44]	; (800cbc0 <prvCheckTasksWaitingTermination+0x54>)
 800cb92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cb94:	4b0b      	ldr	r3, [pc, #44]	; (800cbc4 <prvCheckTasksWaitingTermination+0x58>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	3b01      	subs	r3, #1
 800cb9a:	4a0a      	ldr	r2, [pc, #40]	; (800cbc4 <prvCheckTasksWaitingTermination+0x58>)
 800cb9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cb9e:	f000 fbe1 	bl	800d364 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f000 f810 	bl	800cbc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cba8:	4b06      	ldr	r3, [pc, #24]	; (800cbc4 <prvCheckTasksWaitingTermination+0x58>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d1e1      	bne.n	800cb74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cbb0:	bf00      	nop
 800cbb2:	bf00      	nop
 800cbb4:	3708      	adds	r7, #8
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	20000368 	.word	0x20000368
 800cbc0:	20000394 	.word	0x20000394
 800cbc4:	2000037c 	.word	0x2000037c

0800cbc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b084      	sub	sp, #16
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d108      	bne.n	800cbec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f000 fd7e 	bl	800d6e0 <vPortFree>
				vPortFree( pxTCB );
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f000 fd7b 	bl	800d6e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cbea:	e018      	b.n	800cc1e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cbf2:	2b01      	cmp	r3, #1
 800cbf4:	d103      	bne.n	800cbfe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f000 fd72 	bl	800d6e0 <vPortFree>
	}
 800cbfc:	e00f      	b.n	800cc1e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cc04:	2b02      	cmp	r3, #2
 800cc06:	d00a      	beq.n	800cc1e <prvDeleteTCB+0x56>
	__asm volatile
 800cc08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc0c:	f383 8811 	msr	BASEPRI, r3
 800cc10:	f3bf 8f6f 	isb	sy
 800cc14:	f3bf 8f4f 	dsb	sy
 800cc18:	60fb      	str	r3, [r7, #12]
}
 800cc1a:	bf00      	nop
 800cc1c:	e7fe      	b.n	800cc1c <prvDeleteTCB+0x54>
	}
 800cc1e:	bf00      	nop
 800cc20:	3710      	adds	r7, #16
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
	...

0800cc28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b083      	sub	sp, #12
 800cc2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc2e:	4b0c      	ldr	r3, [pc, #48]	; (800cc60 <prvResetNextTaskUnblockTime+0x38>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d104      	bne.n	800cc42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cc38:	4b0a      	ldr	r3, [pc, #40]	; (800cc64 <prvResetNextTaskUnblockTime+0x3c>)
 800cc3a:	f04f 32ff 	mov.w	r2, #4294967295
 800cc3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cc40:	e008      	b.n	800cc54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc42:	4b07      	ldr	r3, [pc, #28]	; (800cc60 <prvResetNextTaskUnblockTime+0x38>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	68db      	ldr	r3, [r3, #12]
 800cc48:	68db      	ldr	r3, [r3, #12]
 800cc4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	4a04      	ldr	r2, [pc, #16]	; (800cc64 <prvResetNextTaskUnblockTime+0x3c>)
 800cc52:	6013      	str	r3, [r2, #0]
}
 800cc54:	bf00      	nop
 800cc56:	370c      	adds	r7, #12
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr
 800cc60:	2000034c 	.word	0x2000034c
 800cc64:	200003b4 	.word	0x200003b4

0800cc68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cc68:	b480      	push	{r7}
 800cc6a:	b083      	sub	sp, #12
 800cc6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cc6e:	4b0b      	ldr	r3, [pc, #44]	; (800cc9c <xTaskGetSchedulerState+0x34>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d102      	bne.n	800cc7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cc76:	2301      	movs	r3, #1
 800cc78:	607b      	str	r3, [r7, #4]
 800cc7a:	e008      	b.n	800cc8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc7c:	4b08      	ldr	r3, [pc, #32]	; (800cca0 <xTaskGetSchedulerState+0x38>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d102      	bne.n	800cc8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cc84:	2302      	movs	r3, #2
 800cc86:	607b      	str	r3, [r7, #4]
 800cc88:	e001      	b.n	800cc8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cc8e:	687b      	ldr	r3, [r7, #4]
	}
 800cc90:	4618      	mov	r0, r3
 800cc92:	370c      	adds	r7, #12
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr
 800cc9c:	200003a0 	.word	0x200003a0
 800cca0:	200003bc 	.word	0x200003bc

0800cca4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d05e      	beq.n	800cd78 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccbe:	4b31      	ldr	r3, [pc, #196]	; (800cd84 <xTaskPriorityInherit+0xe0>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d24e      	bcs.n	800cd66 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	699b      	ldr	r3, [r3, #24]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	db06      	blt.n	800ccde <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccd0:	4b2c      	ldr	r3, [pc, #176]	; (800cd84 <xTaskPriorityInherit+0xe0>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd6:	f1c3 0207 	rsb	r2, r3, #7
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	6959      	ldr	r1, [r3, #20]
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cce6:	4613      	mov	r3, r2
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	4413      	add	r3, r2
 800ccec:	009b      	lsls	r3, r3, #2
 800ccee:	4a26      	ldr	r2, [pc, #152]	; (800cd88 <xTaskPriorityInherit+0xe4>)
 800ccf0:	4413      	add	r3, r2
 800ccf2:	4299      	cmp	r1, r3
 800ccf4:	d12f      	bne.n	800cd56 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	3304      	adds	r3, #4
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7fe fca3 	bl	800b646 <uxListRemove>
 800cd00:	4603      	mov	r3, r0
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d10a      	bne.n	800cd1c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	fa02 f303 	lsl.w	r3, r2, r3
 800cd10:	43da      	mvns	r2, r3
 800cd12:	4b1e      	ldr	r3, [pc, #120]	; (800cd8c <xTaskPriorityInherit+0xe8>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4013      	ands	r3, r2
 800cd18:	4a1c      	ldr	r2, [pc, #112]	; (800cd8c <xTaskPriorityInherit+0xe8>)
 800cd1a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cd1c:	4b19      	ldr	r3, [pc, #100]	; (800cd84 <xTaskPriorityInherit+0xe0>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	409a      	lsls	r2, r3
 800cd2e:	4b17      	ldr	r3, [pc, #92]	; (800cd8c <xTaskPriorityInherit+0xe8>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4313      	orrs	r3, r2
 800cd34:	4a15      	ldr	r2, [pc, #84]	; (800cd8c <xTaskPriorityInherit+0xe8>)
 800cd36:	6013      	str	r3, [r2, #0]
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd3c:	4613      	mov	r3, r2
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	4413      	add	r3, r2
 800cd42:	009b      	lsls	r3, r3, #2
 800cd44:	4a10      	ldr	r2, [pc, #64]	; (800cd88 <xTaskPriorityInherit+0xe4>)
 800cd46:	441a      	add	r2, r3
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	3304      	adds	r3, #4
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	4610      	mov	r0, r2
 800cd50:	f7fe fc1c 	bl	800b58c <vListInsertEnd>
 800cd54:	e004      	b.n	800cd60 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cd56:	4b0b      	ldr	r3, [pc, #44]	; (800cd84 <xTaskPriorityInherit+0xe0>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cd60:	2301      	movs	r3, #1
 800cd62:	60fb      	str	r3, [r7, #12]
 800cd64:	e008      	b.n	800cd78 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd6a:	4b06      	ldr	r3, [pc, #24]	; (800cd84 <xTaskPriorityInherit+0xe0>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d201      	bcs.n	800cd78 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cd74:	2301      	movs	r3, #1
 800cd76:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cd78:	68fb      	ldr	r3, [r7, #12]
	}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3710      	adds	r7, #16
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop
 800cd84:	20000294 	.word	0x20000294
 800cd88:	20000298 	.word	0x20000298
 800cd8c:	2000039c 	.word	0x2000039c

0800cd90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b086      	sub	sp, #24
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d06e      	beq.n	800ce84 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cda6:	4b3a      	ldr	r3, [pc, #232]	; (800ce90 <xTaskPriorityDisinherit+0x100>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	693a      	ldr	r2, [r7, #16]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d00a      	beq.n	800cdc6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb4:	f383 8811 	msr	BASEPRI, r3
 800cdb8:	f3bf 8f6f 	isb	sy
 800cdbc:	f3bf 8f4f 	dsb	sy
 800cdc0:	60fb      	str	r3, [r7, #12]
}
 800cdc2:	bf00      	nop
 800cdc4:	e7fe      	b.n	800cdc4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d10a      	bne.n	800cde4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd2:	f383 8811 	msr	BASEPRI, r3
 800cdd6:	f3bf 8f6f 	isb	sy
 800cdda:	f3bf 8f4f 	dsb	sy
 800cdde:	60bb      	str	r3, [r7, #8]
}
 800cde0:	bf00      	nop
 800cde2:	e7fe      	b.n	800cde2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cde8:	1e5a      	subs	r2, r3, #1
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d044      	beq.n	800ce84 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cdfa:	693b      	ldr	r3, [r7, #16]
 800cdfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d140      	bne.n	800ce84 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	3304      	adds	r3, #4
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7fe fc1d 	bl	800b646 <uxListRemove>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d115      	bne.n	800ce3e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce16:	491f      	ldr	r1, [pc, #124]	; (800ce94 <xTaskPriorityDisinherit+0x104>)
 800ce18:	4613      	mov	r3, r2
 800ce1a:	009b      	lsls	r3, r3, #2
 800ce1c:	4413      	add	r3, r2
 800ce1e:	009b      	lsls	r3, r3, #2
 800ce20:	440b      	add	r3, r1
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d10a      	bne.n	800ce3e <xTaskPriorityDisinherit+0xae>
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	fa02 f303 	lsl.w	r3, r2, r3
 800ce32:	43da      	mvns	r2, r3
 800ce34:	4b18      	ldr	r3, [pc, #96]	; (800ce98 <xTaskPriorityDisinherit+0x108>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4013      	ands	r3, r2
 800ce3a:	4a17      	ldr	r2, [pc, #92]	; (800ce98 <xTaskPriorityDisinherit+0x108>)
 800ce3c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce4a:	f1c3 0207 	rsb	r2, r3, #7
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce56:	2201      	movs	r2, #1
 800ce58:	409a      	lsls	r2, r3
 800ce5a:	4b0f      	ldr	r3, [pc, #60]	; (800ce98 <xTaskPriorityDisinherit+0x108>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	4313      	orrs	r3, r2
 800ce60:	4a0d      	ldr	r2, [pc, #52]	; (800ce98 <xTaskPriorityDisinherit+0x108>)
 800ce62:	6013      	str	r3, [r2, #0]
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce68:	4613      	mov	r3, r2
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	4413      	add	r3, r2
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	4a08      	ldr	r2, [pc, #32]	; (800ce94 <xTaskPriorityDisinherit+0x104>)
 800ce72:	441a      	add	r2, r3
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	3304      	adds	r3, #4
 800ce78:	4619      	mov	r1, r3
 800ce7a:	4610      	mov	r0, r2
 800ce7c:	f7fe fb86 	bl	800b58c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ce80:	2301      	movs	r3, #1
 800ce82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ce84:	697b      	ldr	r3, [r7, #20]
	}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3718      	adds	r7, #24
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	20000294 	.word	0x20000294
 800ce94:	20000298 	.word	0x20000298
 800ce98:	2000039c 	.word	0x2000039c

0800ce9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b088      	sub	sp, #32
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d077      	beq.n	800cfa4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ceb4:	69bb      	ldr	r3, [r7, #24]
 800ceb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d10a      	bne.n	800ced2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800cebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec0:	f383 8811 	msr	BASEPRI, r3
 800cec4:	f3bf 8f6f 	isb	sy
 800cec8:	f3bf 8f4f 	dsb	sy
 800cecc:	60fb      	str	r3, [r7, #12]
}
 800cece:	bf00      	nop
 800ced0:	e7fe      	b.n	800ced0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ced2:	69bb      	ldr	r3, [r7, #24]
 800ced4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ced6:	683a      	ldr	r2, [r7, #0]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d902      	bls.n	800cee2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	61fb      	str	r3, [r7, #28]
 800cee0:	e002      	b.n	800cee8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cee2:	69bb      	ldr	r3, [r7, #24]
 800cee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cee6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cee8:	69bb      	ldr	r3, [r7, #24]
 800ceea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceec:	69fa      	ldr	r2, [r7, #28]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d058      	beq.n	800cfa4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cef2:	69bb      	ldr	r3, [r7, #24]
 800cef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cef6:	697a      	ldr	r2, [r7, #20]
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d153      	bne.n	800cfa4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cefc:	4b2b      	ldr	r3, [pc, #172]	; (800cfac <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	69ba      	ldr	r2, [r7, #24]
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d10a      	bne.n	800cf1c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800cf06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0a:	f383 8811 	msr	BASEPRI, r3
 800cf0e:	f3bf 8f6f 	isb	sy
 800cf12:	f3bf 8f4f 	dsb	sy
 800cf16:	60bb      	str	r3, [r7, #8]
}
 800cf18:	bf00      	nop
 800cf1a:	e7fe      	b.n	800cf1a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cf1c:	69bb      	ldr	r3, [r7, #24]
 800cf1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf20:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cf22:	69bb      	ldr	r3, [r7, #24]
 800cf24:	69fa      	ldr	r2, [r7, #28]
 800cf26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cf28:	69bb      	ldr	r3, [r7, #24]
 800cf2a:	699b      	ldr	r3, [r3, #24]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	db04      	blt.n	800cf3a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf30:	69fb      	ldr	r3, [r7, #28]
 800cf32:	f1c3 0207 	rsb	r2, r3, #7
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cf3a:	69bb      	ldr	r3, [r7, #24]
 800cf3c:	6959      	ldr	r1, [r3, #20]
 800cf3e:	693a      	ldr	r2, [r7, #16]
 800cf40:	4613      	mov	r3, r2
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	4413      	add	r3, r2
 800cf46:	009b      	lsls	r3, r3, #2
 800cf48:	4a19      	ldr	r2, [pc, #100]	; (800cfb0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800cf4a:	4413      	add	r3, r2
 800cf4c:	4299      	cmp	r1, r3
 800cf4e:	d129      	bne.n	800cfa4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf50:	69bb      	ldr	r3, [r7, #24]
 800cf52:	3304      	adds	r3, #4
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7fe fb76 	bl	800b646 <uxListRemove>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d10a      	bne.n	800cf76 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800cf60:	69bb      	ldr	r3, [r7, #24]
 800cf62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf64:	2201      	movs	r2, #1
 800cf66:	fa02 f303 	lsl.w	r3, r2, r3
 800cf6a:	43da      	mvns	r2, r3
 800cf6c:	4b11      	ldr	r3, [pc, #68]	; (800cfb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4013      	ands	r3, r2
 800cf72:	4a10      	ldr	r2, [pc, #64]	; (800cfb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cf74:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	409a      	lsls	r2, r3
 800cf7e:	4b0d      	ldr	r3, [pc, #52]	; (800cfb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4313      	orrs	r3, r2
 800cf84:	4a0b      	ldr	r2, [pc, #44]	; (800cfb4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cf86:	6013      	str	r3, [r2, #0]
 800cf88:	69bb      	ldr	r3, [r7, #24]
 800cf8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf8c:	4613      	mov	r3, r2
 800cf8e:	009b      	lsls	r3, r3, #2
 800cf90:	4413      	add	r3, r2
 800cf92:	009b      	lsls	r3, r3, #2
 800cf94:	4a06      	ldr	r2, [pc, #24]	; (800cfb0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800cf96:	441a      	add	r2, r3
 800cf98:	69bb      	ldr	r3, [r7, #24]
 800cf9a:	3304      	adds	r3, #4
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	4610      	mov	r0, r2
 800cfa0:	f7fe faf4 	bl	800b58c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cfa4:	bf00      	nop
 800cfa6:	3720      	adds	r7, #32
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}
 800cfac:	20000294 	.word	0x20000294
 800cfb0:	20000298 	.word	0x20000298
 800cfb4:	2000039c 	.word	0x2000039c

0800cfb8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cfb8:	b480      	push	{r7}
 800cfba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cfbc:	4b07      	ldr	r3, [pc, #28]	; (800cfdc <pvTaskIncrementMutexHeldCount+0x24>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d004      	beq.n	800cfce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cfc4:	4b05      	ldr	r3, [pc, #20]	; (800cfdc <pvTaskIncrementMutexHeldCount+0x24>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cfca:	3201      	adds	r2, #1
 800cfcc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800cfce:	4b03      	ldr	r3, [pc, #12]	; (800cfdc <pvTaskIncrementMutexHeldCount+0x24>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
	}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr
 800cfdc:	20000294 	.word	0x20000294

0800cfe0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cfea:	4b29      	ldr	r3, [pc, #164]	; (800d090 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cff0:	4b28      	ldr	r3, [pc, #160]	; (800d094 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	3304      	adds	r3, #4
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7fe fb25 	bl	800b646 <uxListRemove>
 800cffc:	4603      	mov	r3, r0
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d10b      	bne.n	800d01a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d002:	4b24      	ldr	r3, [pc, #144]	; (800d094 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d008:	2201      	movs	r2, #1
 800d00a:	fa02 f303 	lsl.w	r3, r2, r3
 800d00e:	43da      	mvns	r2, r3
 800d010:	4b21      	ldr	r3, [pc, #132]	; (800d098 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4013      	ands	r3, r2
 800d016:	4a20      	ldr	r2, [pc, #128]	; (800d098 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d018:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d020:	d10a      	bne.n	800d038 <prvAddCurrentTaskToDelayedList+0x58>
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d007      	beq.n	800d038 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d028:	4b1a      	ldr	r3, [pc, #104]	; (800d094 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	3304      	adds	r3, #4
 800d02e:	4619      	mov	r1, r3
 800d030:	481a      	ldr	r0, [pc, #104]	; (800d09c <prvAddCurrentTaskToDelayedList+0xbc>)
 800d032:	f7fe faab 	bl	800b58c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d036:	e026      	b.n	800d086 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d038:	68fa      	ldr	r2, [r7, #12]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	4413      	add	r3, r2
 800d03e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d040:	4b14      	ldr	r3, [pc, #80]	; (800d094 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	68ba      	ldr	r2, [r7, #8]
 800d046:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d048:	68ba      	ldr	r2, [r7, #8]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d209      	bcs.n	800d064 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d050:	4b13      	ldr	r3, [pc, #76]	; (800d0a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d052:	681a      	ldr	r2, [r3, #0]
 800d054:	4b0f      	ldr	r3, [pc, #60]	; (800d094 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	3304      	adds	r3, #4
 800d05a:	4619      	mov	r1, r3
 800d05c:	4610      	mov	r0, r2
 800d05e:	f7fe fab9 	bl	800b5d4 <vListInsert>
}
 800d062:	e010      	b.n	800d086 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d064:	4b0f      	ldr	r3, [pc, #60]	; (800d0a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	4b0a      	ldr	r3, [pc, #40]	; (800d094 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	3304      	adds	r3, #4
 800d06e:	4619      	mov	r1, r3
 800d070:	4610      	mov	r0, r2
 800d072:	f7fe faaf 	bl	800b5d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d076:	4b0c      	ldr	r3, [pc, #48]	; (800d0a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	68ba      	ldr	r2, [r7, #8]
 800d07c:	429a      	cmp	r2, r3
 800d07e:	d202      	bcs.n	800d086 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d080:	4a09      	ldr	r2, [pc, #36]	; (800d0a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	6013      	str	r3, [r2, #0]
}
 800d086:	bf00      	nop
 800d088:	3710      	adds	r7, #16
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	20000398 	.word	0x20000398
 800d094:	20000294 	.word	0x20000294
 800d098:	2000039c 	.word	0x2000039c
 800d09c:	20000380 	.word	0x20000380
 800d0a0:	20000350 	.word	0x20000350
 800d0a4:	2000034c 	.word	0x2000034c
 800d0a8:	200003b4 	.word	0x200003b4

0800d0ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b085      	sub	sp, #20
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	60f8      	str	r0, [r7, #12]
 800d0b4:	60b9      	str	r1, [r7, #8]
 800d0b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	3b04      	subs	r3, #4
 800d0bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d0c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	3b04      	subs	r3, #4
 800d0ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	f023 0201 	bic.w	r2, r3, #1
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	3b04      	subs	r3, #4
 800d0da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d0dc:	4a0c      	ldr	r2, [pc, #48]	; (800d110 <pxPortInitialiseStack+0x64>)
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	3b14      	subs	r3, #20
 800d0e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	3b04      	subs	r3, #4
 800d0f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f06f 0202 	mvn.w	r2, #2
 800d0fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	3b20      	subs	r3, #32
 800d100:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d102:	68fb      	ldr	r3, [r7, #12]
}
 800d104:	4618      	mov	r0, r3
 800d106:	3714      	adds	r7, #20
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr
 800d110:	0800d115 	.word	0x0800d115

0800d114 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d114:	b480      	push	{r7}
 800d116:	b085      	sub	sp, #20
 800d118:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d11a:	2300      	movs	r3, #0
 800d11c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d11e:	4b12      	ldr	r3, [pc, #72]	; (800d168 <prvTaskExitError+0x54>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d126:	d00a      	beq.n	800d13e <prvTaskExitError+0x2a>
	__asm volatile
 800d128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d12c:	f383 8811 	msr	BASEPRI, r3
 800d130:	f3bf 8f6f 	isb	sy
 800d134:	f3bf 8f4f 	dsb	sy
 800d138:	60fb      	str	r3, [r7, #12]
}
 800d13a:	bf00      	nop
 800d13c:	e7fe      	b.n	800d13c <prvTaskExitError+0x28>
	__asm volatile
 800d13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d142:	f383 8811 	msr	BASEPRI, r3
 800d146:	f3bf 8f6f 	isb	sy
 800d14a:	f3bf 8f4f 	dsb	sy
 800d14e:	60bb      	str	r3, [r7, #8]
}
 800d150:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d152:	bf00      	nop
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d0fc      	beq.n	800d154 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d15a:	bf00      	nop
 800d15c:	bf00      	nop
 800d15e:	3714      	adds	r7, #20
 800d160:	46bd      	mov	sp, r7
 800d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d166:	4770      	bx	lr
 800d168:	20000010 	.word	0x20000010
 800d16c:	00000000 	.word	0x00000000

0800d170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d170:	4b07      	ldr	r3, [pc, #28]	; (800d190 <pxCurrentTCBConst2>)
 800d172:	6819      	ldr	r1, [r3, #0]
 800d174:	6808      	ldr	r0, [r1, #0]
 800d176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d17a:	f380 8809 	msr	PSP, r0
 800d17e:	f3bf 8f6f 	isb	sy
 800d182:	f04f 0000 	mov.w	r0, #0
 800d186:	f380 8811 	msr	BASEPRI, r0
 800d18a:	4770      	bx	lr
 800d18c:	f3af 8000 	nop.w

0800d190 <pxCurrentTCBConst2>:
 800d190:	20000294 	.word	0x20000294
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d194:	bf00      	nop
 800d196:	bf00      	nop

0800d198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d198:	4808      	ldr	r0, [pc, #32]	; (800d1bc <prvPortStartFirstTask+0x24>)
 800d19a:	6800      	ldr	r0, [r0, #0]
 800d19c:	6800      	ldr	r0, [r0, #0]
 800d19e:	f380 8808 	msr	MSP, r0
 800d1a2:	f04f 0000 	mov.w	r0, #0
 800d1a6:	f380 8814 	msr	CONTROL, r0
 800d1aa:	b662      	cpsie	i
 800d1ac:	b661      	cpsie	f
 800d1ae:	f3bf 8f4f 	dsb	sy
 800d1b2:	f3bf 8f6f 	isb	sy
 800d1b6:	df00      	svc	0
 800d1b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d1ba:	bf00      	nop
 800d1bc:	e000ed08 	.word	0xe000ed08

0800d1c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b086      	sub	sp, #24
 800d1c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d1c6:	4b46      	ldr	r3, [pc, #280]	; (800d2e0 <xPortStartScheduler+0x120>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	4a46      	ldr	r2, [pc, #280]	; (800d2e4 <xPortStartScheduler+0x124>)
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	d10a      	bne.n	800d1e6 <xPortStartScheduler+0x26>
	__asm volatile
 800d1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d4:	f383 8811 	msr	BASEPRI, r3
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	f3bf 8f4f 	dsb	sy
 800d1e0:	613b      	str	r3, [r7, #16]
}
 800d1e2:	bf00      	nop
 800d1e4:	e7fe      	b.n	800d1e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d1e6:	4b3e      	ldr	r3, [pc, #248]	; (800d2e0 <xPortStartScheduler+0x120>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	4a3f      	ldr	r2, [pc, #252]	; (800d2e8 <xPortStartScheduler+0x128>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d10a      	bne.n	800d206 <xPortStartScheduler+0x46>
	__asm volatile
 800d1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f4:	f383 8811 	msr	BASEPRI, r3
 800d1f8:	f3bf 8f6f 	isb	sy
 800d1fc:	f3bf 8f4f 	dsb	sy
 800d200:	60fb      	str	r3, [r7, #12]
}
 800d202:	bf00      	nop
 800d204:	e7fe      	b.n	800d204 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d206:	4b39      	ldr	r3, [pc, #228]	; (800d2ec <xPortStartScheduler+0x12c>)
 800d208:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	b2db      	uxtb	r3, r3
 800d210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	22ff      	movs	r2, #255	; 0xff
 800d216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	b2db      	uxtb	r3, r3
 800d21e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d220:	78fb      	ldrb	r3, [r7, #3]
 800d222:	b2db      	uxtb	r3, r3
 800d224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d228:	b2da      	uxtb	r2, r3
 800d22a:	4b31      	ldr	r3, [pc, #196]	; (800d2f0 <xPortStartScheduler+0x130>)
 800d22c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d22e:	4b31      	ldr	r3, [pc, #196]	; (800d2f4 <xPortStartScheduler+0x134>)
 800d230:	2207      	movs	r2, #7
 800d232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d234:	e009      	b.n	800d24a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d236:	4b2f      	ldr	r3, [pc, #188]	; (800d2f4 <xPortStartScheduler+0x134>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	3b01      	subs	r3, #1
 800d23c:	4a2d      	ldr	r2, [pc, #180]	; (800d2f4 <xPortStartScheduler+0x134>)
 800d23e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d240:	78fb      	ldrb	r3, [r7, #3]
 800d242:	b2db      	uxtb	r3, r3
 800d244:	005b      	lsls	r3, r3, #1
 800d246:	b2db      	uxtb	r3, r3
 800d248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d24a:	78fb      	ldrb	r3, [r7, #3]
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d252:	2b80      	cmp	r3, #128	; 0x80
 800d254:	d0ef      	beq.n	800d236 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d256:	4b27      	ldr	r3, [pc, #156]	; (800d2f4 <xPortStartScheduler+0x134>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f1c3 0307 	rsb	r3, r3, #7
 800d25e:	2b04      	cmp	r3, #4
 800d260:	d00a      	beq.n	800d278 <xPortStartScheduler+0xb8>
	__asm volatile
 800d262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d266:	f383 8811 	msr	BASEPRI, r3
 800d26a:	f3bf 8f6f 	isb	sy
 800d26e:	f3bf 8f4f 	dsb	sy
 800d272:	60bb      	str	r3, [r7, #8]
}
 800d274:	bf00      	nop
 800d276:	e7fe      	b.n	800d276 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d278:	4b1e      	ldr	r3, [pc, #120]	; (800d2f4 <xPortStartScheduler+0x134>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	021b      	lsls	r3, r3, #8
 800d27e:	4a1d      	ldr	r2, [pc, #116]	; (800d2f4 <xPortStartScheduler+0x134>)
 800d280:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d282:	4b1c      	ldr	r3, [pc, #112]	; (800d2f4 <xPortStartScheduler+0x134>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d28a:	4a1a      	ldr	r2, [pc, #104]	; (800d2f4 <xPortStartScheduler+0x134>)
 800d28c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	b2da      	uxtb	r2, r3
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d296:	4b18      	ldr	r3, [pc, #96]	; (800d2f8 <xPortStartScheduler+0x138>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	4a17      	ldr	r2, [pc, #92]	; (800d2f8 <xPortStartScheduler+0x138>)
 800d29c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d2a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d2a2:	4b15      	ldr	r3, [pc, #84]	; (800d2f8 <xPortStartScheduler+0x138>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	4a14      	ldr	r2, [pc, #80]	; (800d2f8 <xPortStartScheduler+0x138>)
 800d2a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d2ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d2ae:	f000 f8dd 	bl	800d46c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d2b2:	4b12      	ldr	r3, [pc, #72]	; (800d2fc <xPortStartScheduler+0x13c>)
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d2b8:	f000 f8fc 	bl	800d4b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d2bc:	4b10      	ldr	r3, [pc, #64]	; (800d300 <xPortStartScheduler+0x140>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4a0f      	ldr	r2, [pc, #60]	; (800d300 <xPortStartScheduler+0x140>)
 800d2c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d2c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d2c8:	f7ff ff66 	bl	800d198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d2cc:	f7ff fa90 	bl	800c7f0 <vTaskSwitchContext>
	prvTaskExitError();
 800d2d0:	f7ff ff20 	bl	800d114 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d2d4:	2300      	movs	r3, #0
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3718      	adds	r7, #24
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	e000ed00 	.word	0xe000ed00
 800d2e4:	410fc271 	.word	0x410fc271
 800d2e8:	410fc270 	.word	0x410fc270
 800d2ec:	e000e400 	.word	0xe000e400
 800d2f0:	200003c0 	.word	0x200003c0
 800d2f4:	200003c4 	.word	0x200003c4
 800d2f8:	e000ed20 	.word	0xe000ed20
 800d2fc:	20000010 	.word	0x20000010
 800d300:	e000ef34 	.word	0xe000ef34

0800d304 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d304:	b480      	push	{r7}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
	__asm volatile
 800d30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d30e:	f383 8811 	msr	BASEPRI, r3
 800d312:	f3bf 8f6f 	isb	sy
 800d316:	f3bf 8f4f 	dsb	sy
 800d31a:	607b      	str	r3, [r7, #4]
}
 800d31c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d31e:	4b0f      	ldr	r3, [pc, #60]	; (800d35c <vPortEnterCritical+0x58>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	3301      	adds	r3, #1
 800d324:	4a0d      	ldr	r2, [pc, #52]	; (800d35c <vPortEnterCritical+0x58>)
 800d326:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d328:	4b0c      	ldr	r3, [pc, #48]	; (800d35c <vPortEnterCritical+0x58>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d10f      	bne.n	800d350 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d330:	4b0b      	ldr	r3, [pc, #44]	; (800d360 <vPortEnterCritical+0x5c>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	b2db      	uxtb	r3, r3
 800d336:	2b00      	cmp	r3, #0
 800d338:	d00a      	beq.n	800d350 <vPortEnterCritical+0x4c>
	__asm volatile
 800d33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d33e:	f383 8811 	msr	BASEPRI, r3
 800d342:	f3bf 8f6f 	isb	sy
 800d346:	f3bf 8f4f 	dsb	sy
 800d34a:	603b      	str	r3, [r7, #0]
}
 800d34c:	bf00      	nop
 800d34e:	e7fe      	b.n	800d34e <vPortEnterCritical+0x4a>
	}
}
 800d350:	bf00      	nop
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr
 800d35c:	20000010 	.word	0x20000010
 800d360:	e000ed04 	.word	0xe000ed04

0800d364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d364:	b480      	push	{r7}
 800d366:	b083      	sub	sp, #12
 800d368:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d36a:	4b12      	ldr	r3, [pc, #72]	; (800d3b4 <vPortExitCritical+0x50>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d10a      	bne.n	800d388 <vPortExitCritical+0x24>
	__asm volatile
 800d372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d376:	f383 8811 	msr	BASEPRI, r3
 800d37a:	f3bf 8f6f 	isb	sy
 800d37e:	f3bf 8f4f 	dsb	sy
 800d382:	607b      	str	r3, [r7, #4]
}
 800d384:	bf00      	nop
 800d386:	e7fe      	b.n	800d386 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d388:	4b0a      	ldr	r3, [pc, #40]	; (800d3b4 <vPortExitCritical+0x50>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	3b01      	subs	r3, #1
 800d38e:	4a09      	ldr	r2, [pc, #36]	; (800d3b4 <vPortExitCritical+0x50>)
 800d390:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d392:	4b08      	ldr	r3, [pc, #32]	; (800d3b4 <vPortExitCritical+0x50>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d105      	bne.n	800d3a6 <vPortExitCritical+0x42>
 800d39a:	2300      	movs	r3, #0
 800d39c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	f383 8811 	msr	BASEPRI, r3
}
 800d3a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d3a6:	bf00      	nop
 800d3a8:	370c      	adds	r7, #12
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b0:	4770      	bx	lr
 800d3b2:	bf00      	nop
 800d3b4:	20000010 	.word	0x20000010
	...

0800d3c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d3c0:	f3ef 8009 	mrs	r0, PSP
 800d3c4:	f3bf 8f6f 	isb	sy
 800d3c8:	4b15      	ldr	r3, [pc, #84]	; (800d420 <pxCurrentTCBConst>)
 800d3ca:	681a      	ldr	r2, [r3, #0]
 800d3cc:	f01e 0f10 	tst.w	lr, #16
 800d3d0:	bf08      	it	eq
 800d3d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d3d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3da:	6010      	str	r0, [r2, #0]
 800d3dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d3e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d3e4:	f380 8811 	msr	BASEPRI, r0
 800d3e8:	f3bf 8f4f 	dsb	sy
 800d3ec:	f3bf 8f6f 	isb	sy
 800d3f0:	f7ff f9fe 	bl	800c7f0 <vTaskSwitchContext>
 800d3f4:	f04f 0000 	mov.w	r0, #0
 800d3f8:	f380 8811 	msr	BASEPRI, r0
 800d3fc:	bc09      	pop	{r0, r3}
 800d3fe:	6819      	ldr	r1, [r3, #0]
 800d400:	6808      	ldr	r0, [r1, #0]
 800d402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d406:	f01e 0f10 	tst.w	lr, #16
 800d40a:	bf08      	it	eq
 800d40c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d410:	f380 8809 	msr	PSP, r0
 800d414:	f3bf 8f6f 	isb	sy
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop
 800d41c:	f3af 8000 	nop.w

0800d420 <pxCurrentTCBConst>:
 800d420:	20000294 	.word	0x20000294
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d424:	bf00      	nop
 800d426:	bf00      	nop

0800d428 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b082      	sub	sp, #8
 800d42c:	af00      	add	r7, sp, #0
	__asm volatile
 800d42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d432:	f383 8811 	msr	BASEPRI, r3
 800d436:	f3bf 8f6f 	isb	sy
 800d43a:	f3bf 8f4f 	dsb	sy
 800d43e:	607b      	str	r3, [r7, #4]
}
 800d440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d442:	f7ff f91d 	bl	800c680 <xTaskIncrementTick>
 800d446:	4603      	mov	r3, r0
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d003      	beq.n	800d454 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d44c:	4b06      	ldr	r3, [pc, #24]	; (800d468 <SysTick_Handler+0x40>)
 800d44e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d452:	601a      	str	r2, [r3, #0]
 800d454:	2300      	movs	r3, #0
 800d456:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	f383 8811 	msr	BASEPRI, r3
}
 800d45e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d460:	bf00      	nop
 800d462:	3708      	adds	r7, #8
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}
 800d468:	e000ed04 	.word	0xe000ed04

0800d46c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d46c:	b480      	push	{r7}
 800d46e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d470:	4b0b      	ldr	r3, [pc, #44]	; (800d4a0 <vPortSetupTimerInterrupt+0x34>)
 800d472:	2200      	movs	r2, #0
 800d474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d476:	4b0b      	ldr	r3, [pc, #44]	; (800d4a4 <vPortSetupTimerInterrupt+0x38>)
 800d478:	2200      	movs	r2, #0
 800d47a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d47c:	4b0a      	ldr	r3, [pc, #40]	; (800d4a8 <vPortSetupTimerInterrupt+0x3c>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a0a      	ldr	r2, [pc, #40]	; (800d4ac <vPortSetupTimerInterrupt+0x40>)
 800d482:	fba2 2303 	umull	r2, r3, r2, r3
 800d486:	099b      	lsrs	r3, r3, #6
 800d488:	4a09      	ldr	r2, [pc, #36]	; (800d4b0 <vPortSetupTimerInterrupt+0x44>)
 800d48a:	3b01      	subs	r3, #1
 800d48c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d48e:	4b04      	ldr	r3, [pc, #16]	; (800d4a0 <vPortSetupTimerInterrupt+0x34>)
 800d490:	2207      	movs	r2, #7
 800d492:	601a      	str	r2, [r3, #0]
}
 800d494:	bf00      	nop
 800d496:	46bd      	mov	sp, r7
 800d498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49c:	4770      	bx	lr
 800d49e:	bf00      	nop
 800d4a0:	e000e010 	.word	0xe000e010
 800d4a4:	e000e018 	.word	0xe000e018
 800d4a8:	20000000 	.word	0x20000000
 800d4ac:	10624dd3 	.word	0x10624dd3
 800d4b0:	e000e014 	.word	0xe000e014

0800d4b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d4b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d4c4 <vPortEnableVFP+0x10>
 800d4b8:	6801      	ldr	r1, [r0, #0]
 800d4ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d4be:	6001      	str	r1, [r0, #0]
 800d4c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d4c2:	bf00      	nop
 800d4c4:	e000ed88 	.word	0xe000ed88

0800d4c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b085      	sub	sp, #20
 800d4cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d4ce:	f3ef 8305 	mrs	r3, IPSR
 800d4d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2b0f      	cmp	r3, #15
 800d4d8:	d914      	bls.n	800d504 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d4da:	4a17      	ldr	r2, [pc, #92]	; (800d538 <vPortValidateInterruptPriority+0x70>)
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	4413      	add	r3, r2
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d4e4:	4b15      	ldr	r3, [pc, #84]	; (800d53c <vPortValidateInterruptPriority+0x74>)
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	7afa      	ldrb	r2, [r7, #11]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d20a      	bcs.n	800d504 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f2:	f383 8811 	msr	BASEPRI, r3
 800d4f6:	f3bf 8f6f 	isb	sy
 800d4fa:	f3bf 8f4f 	dsb	sy
 800d4fe:	607b      	str	r3, [r7, #4]
}
 800d500:	bf00      	nop
 800d502:	e7fe      	b.n	800d502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d504:	4b0e      	ldr	r3, [pc, #56]	; (800d540 <vPortValidateInterruptPriority+0x78>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d50c:	4b0d      	ldr	r3, [pc, #52]	; (800d544 <vPortValidateInterruptPriority+0x7c>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	429a      	cmp	r2, r3
 800d512:	d90a      	bls.n	800d52a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d518:	f383 8811 	msr	BASEPRI, r3
 800d51c:	f3bf 8f6f 	isb	sy
 800d520:	f3bf 8f4f 	dsb	sy
 800d524:	603b      	str	r3, [r7, #0]
}
 800d526:	bf00      	nop
 800d528:	e7fe      	b.n	800d528 <vPortValidateInterruptPriority+0x60>
	}
 800d52a:	bf00      	nop
 800d52c:	3714      	adds	r7, #20
 800d52e:	46bd      	mov	sp, r7
 800d530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d534:	4770      	bx	lr
 800d536:	bf00      	nop
 800d538:	e000e3f0 	.word	0xe000e3f0
 800d53c:	200003c0 	.word	0x200003c0
 800d540:	e000ed0c 	.word	0xe000ed0c
 800d544:	200003c4 	.word	0x200003c4

0800d548 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b08a      	sub	sp, #40	; 0x28
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d550:	2300      	movs	r3, #0
 800d552:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d554:	f7fe ffea 	bl	800c52c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d558:	4b5b      	ldr	r3, [pc, #364]	; (800d6c8 <pvPortMalloc+0x180>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d101      	bne.n	800d564 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d560:	f000 f920 	bl	800d7a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d564:	4b59      	ldr	r3, [pc, #356]	; (800d6cc <pvPortMalloc+0x184>)
 800d566:	681a      	ldr	r2, [r3, #0]
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	4013      	ands	r3, r2
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	f040 8093 	bne.w	800d698 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d01d      	beq.n	800d5b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d578:	2208      	movs	r2, #8
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	4413      	add	r3, r2
 800d57e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f003 0307 	and.w	r3, r3, #7
 800d586:	2b00      	cmp	r3, #0
 800d588:	d014      	beq.n	800d5b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f023 0307 	bic.w	r3, r3, #7
 800d590:	3308      	adds	r3, #8
 800d592:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f003 0307 	and.w	r3, r3, #7
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d00a      	beq.n	800d5b4 <pvPortMalloc+0x6c>
	__asm volatile
 800d59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a2:	f383 8811 	msr	BASEPRI, r3
 800d5a6:	f3bf 8f6f 	isb	sy
 800d5aa:	f3bf 8f4f 	dsb	sy
 800d5ae:	617b      	str	r3, [r7, #20]
}
 800d5b0:	bf00      	nop
 800d5b2:	e7fe      	b.n	800d5b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d06e      	beq.n	800d698 <pvPortMalloc+0x150>
 800d5ba:	4b45      	ldr	r3, [pc, #276]	; (800d6d0 <pvPortMalloc+0x188>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d869      	bhi.n	800d698 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d5c4:	4b43      	ldr	r3, [pc, #268]	; (800d6d4 <pvPortMalloc+0x18c>)
 800d5c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d5c8:	4b42      	ldr	r3, [pc, #264]	; (800d6d4 <pvPortMalloc+0x18c>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d5ce:	e004      	b.n	800d5da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5dc:	685b      	ldr	r3, [r3, #4]
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d903      	bls.n	800d5ec <pvPortMalloc+0xa4>
 800d5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d1f1      	bne.n	800d5d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d5ec:	4b36      	ldr	r3, [pc, #216]	; (800d6c8 <pvPortMalloc+0x180>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d050      	beq.n	800d698 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d5f6:	6a3b      	ldr	r3, [r7, #32]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	2208      	movs	r2, #8
 800d5fc:	4413      	add	r3, r2
 800d5fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d602:	681a      	ldr	r2, [r3, #0]
 800d604:	6a3b      	ldr	r3, [r7, #32]
 800d606:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60a:	685a      	ldr	r2, [r3, #4]
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	1ad2      	subs	r2, r2, r3
 800d610:	2308      	movs	r3, #8
 800d612:	005b      	lsls	r3, r3, #1
 800d614:	429a      	cmp	r2, r3
 800d616:	d91f      	bls.n	800d658 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	4413      	add	r3, r2
 800d61e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d620:	69bb      	ldr	r3, [r7, #24]
 800d622:	f003 0307 	and.w	r3, r3, #7
 800d626:	2b00      	cmp	r3, #0
 800d628:	d00a      	beq.n	800d640 <pvPortMalloc+0xf8>
	__asm volatile
 800d62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d62e:	f383 8811 	msr	BASEPRI, r3
 800d632:	f3bf 8f6f 	isb	sy
 800d636:	f3bf 8f4f 	dsb	sy
 800d63a:	613b      	str	r3, [r7, #16]
}
 800d63c:	bf00      	nop
 800d63e:	e7fe      	b.n	800d63e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d642:	685a      	ldr	r2, [r3, #4]
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	1ad2      	subs	r2, r2, r3
 800d648:	69bb      	ldr	r3, [r7, #24]
 800d64a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d64e:	687a      	ldr	r2, [r7, #4]
 800d650:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d652:	69b8      	ldr	r0, [r7, #24]
 800d654:	f000 f908 	bl	800d868 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d658:	4b1d      	ldr	r3, [pc, #116]	; (800d6d0 <pvPortMalloc+0x188>)
 800d65a:	681a      	ldr	r2, [r3, #0]
 800d65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65e:	685b      	ldr	r3, [r3, #4]
 800d660:	1ad3      	subs	r3, r2, r3
 800d662:	4a1b      	ldr	r2, [pc, #108]	; (800d6d0 <pvPortMalloc+0x188>)
 800d664:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d666:	4b1a      	ldr	r3, [pc, #104]	; (800d6d0 <pvPortMalloc+0x188>)
 800d668:	681a      	ldr	r2, [r3, #0]
 800d66a:	4b1b      	ldr	r3, [pc, #108]	; (800d6d8 <pvPortMalloc+0x190>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	429a      	cmp	r2, r3
 800d670:	d203      	bcs.n	800d67a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d672:	4b17      	ldr	r3, [pc, #92]	; (800d6d0 <pvPortMalloc+0x188>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	4a18      	ldr	r2, [pc, #96]	; (800d6d8 <pvPortMalloc+0x190>)
 800d678:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67c:	685a      	ldr	r2, [r3, #4]
 800d67e:	4b13      	ldr	r3, [pc, #76]	; (800d6cc <pvPortMalloc+0x184>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	431a      	orrs	r2, r3
 800d684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d686:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d68a:	2200      	movs	r2, #0
 800d68c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d68e:	4b13      	ldr	r3, [pc, #76]	; (800d6dc <pvPortMalloc+0x194>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	3301      	adds	r3, #1
 800d694:	4a11      	ldr	r2, [pc, #68]	; (800d6dc <pvPortMalloc+0x194>)
 800d696:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d698:	f7fe ff56 	bl	800c548 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d69c:	69fb      	ldr	r3, [r7, #28]
 800d69e:	f003 0307 	and.w	r3, r3, #7
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d00a      	beq.n	800d6bc <pvPortMalloc+0x174>
	__asm volatile
 800d6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6aa:	f383 8811 	msr	BASEPRI, r3
 800d6ae:	f3bf 8f6f 	isb	sy
 800d6b2:	f3bf 8f4f 	dsb	sy
 800d6b6:	60fb      	str	r3, [r7, #12]
}
 800d6b8:	bf00      	nop
 800d6ba:	e7fe      	b.n	800d6ba <pvPortMalloc+0x172>
	return pvReturn;
 800d6bc:	69fb      	ldr	r3, [r7, #28]
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3728      	adds	r7, #40	; 0x28
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	20003fd0 	.word	0x20003fd0
 800d6cc:	20003fe4 	.word	0x20003fe4
 800d6d0:	20003fd4 	.word	0x20003fd4
 800d6d4:	20003fc8 	.word	0x20003fc8
 800d6d8:	20003fd8 	.word	0x20003fd8
 800d6dc:	20003fdc 	.word	0x20003fdc

0800d6e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b086      	sub	sp, #24
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d04d      	beq.n	800d78e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d6f2:	2308      	movs	r3, #8
 800d6f4:	425b      	negs	r3, r3
 800d6f6:	697a      	ldr	r2, [r7, #20]
 800d6f8:	4413      	add	r3, r2
 800d6fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	685a      	ldr	r2, [r3, #4]
 800d704:	4b24      	ldr	r3, [pc, #144]	; (800d798 <vPortFree+0xb8>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	4013      	ands	r3, r2
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d10a      	bne.n	800d724 <vPortFree+0x44>
	__asm volatile
 800d70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d712:	f383 8811 	msr	BASEPRI, r3
 800d716:	f3bf 8f6f 	isb	sy
 800d71a:	f3bf 8f4f 	dsb	sy
 800d71e:	60fb      	str	r3, [r7, #12]
}
 800d720:	bf00      	nop
 800d722:	e7fe      	b.n	800d722 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d00a      	beq.n	800d742 <vPortFree+0x62>
	__asm volatile
 800d72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d730:	f383 8811 	msr	BASEPRI, r3
 800d734:	f3bf 8f6f 	isb	sy
 800d738:	f3bf 8f4f 	dsb	sy
 800d73c:	60bb      	str	r3, [r7, #8]
}
 800d73e:	bf00      	nop
 800d740:	e7fe      	b.n	800d740 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	685a      	ldr	r2, [r3, #4]
 800d746:	4b14      	ldr	r3, [pc, #80]	; (800d798 <vPortFree+0xb8>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	4013      	ands	r3, r2
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d01e      	beq.n	800d78e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d11a      	bne.n	800d78e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	685a      	ldr	r2, [r3, #4]
 800d75c:	4b0e      	ldr	r3, [pc, #56]	; (800d798 <vPortFree+0xb8>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	43db      	mvns	r3, r3
 800d762:	401a      	ands	r2, r3
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d768:	f7fe fee0 	bl	800c52c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	685a      	ldr	r2, [r3, #4]
 800d770:	4b0a      	ldr	r3, [pc, #40]	; (800d79c <vPortFree+0xbc>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	4413      	add	r3, r2
 800d776:	4a09      	ldr	r2, [pc, #36]	; (800d79c <vPortFree+0xbc>)
 800d778:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d77a:	6938      	ldr	r0, [r7, #16]
 800d77c:	f000 f874 	bl	800d868 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d780:	4b07      	ldr	r3, [pc, #28]	; (800d7a0 <vPortFree+0xc0>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	3301      	adds	r3, #1
 800d786:	4a06      	ldr	r2, [pc, #24]	; (800d7a0 <vPortFree+0xc0>)
 800d788:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d78a:	f7fe fedd 	bl	800c548 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d78e:	bf00      	nop
 800d790:	3718      	adds	r7, #24
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
 800d796:	bf00      	nop
 800d798:	20003fe4 	.word	0x20003fe4
 800d79c:	20003fd4 	.word	0x20003fd4
 800d7a0:	20003fe0 	.word	0x20003fe0

0800d7a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b085      	sub	sp, #20
 800d7a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d7aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d7ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d7b0:	4b27      	ldr	r3, [pc, #156]	; (800d850 <prvHeapInit+0xac>)
 800d7b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	f003 0307 	and.w	r3, r3, #7
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d00c      	beq.n	800d7d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	3307      	adds	r3, #7
 800d7c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f023 0307 	bic.w	r3, r3, #7
 800d7ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d7cc:	68ba      	ldr	r2, [r7, #8]
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	1ad3      	subs	r3, r2, r3
 800d7d2:	4a1f      	ldr	r2, [pc, #124]	; (800d850 <prvHeapInit+0xac>)
 800d7d4:	4413      	add	r3, r2
 800d7d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d7dc:	4a1d      	ldr	r2, [pc, #116]	; (800d854 <prvHeapInit+0xb0>)
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d7e2:	4b1c      	ldr	r3, [pc, #112]	; (800d854 <prvHeapInit+0xb0>)
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	68ba      	ldr	r2, [r7, #8]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d7f0:	2208      	movs	r2, #8
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	1a9b      	subs	r3, r3, r2
 800d7f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f023 0307 	bic.w	r3, r3, #7
 800d7fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	4a15      	ldr	r2, [pc, #84]	; (800d858 <prvHeapInit+0xb4>)
 800d804:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d806:	4b14      	ldr	r3, [pc, #80]	; (800d858 <prvHeapInit+0xb4>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	2200      	movs	r2, #0
 800d80c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d80e:	4b12      	ldr	r3, [pc, #72]	; (800d858 <prvHeapInit+0xb4>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	2200      	movs	r2, #0
 800d814:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	68fa      	ldr	r2, [r7, #12]
 800d81e:	1ad2      	subs	r2, r2, r3
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d824:	4b0c      	ldr	r3, [pc, #48]	; (800d858 <prvHeapInit+0xb4>)
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	4a0a      	ldr	r2, [pc, #40]	; (800d85c <prvHeapInit+0xb8>)
 800d832:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	4a09      	ldr	r2, [pc, #36]	; (800d860 <prvHeapInit+0xbc>)
 800d83a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d83c:	4b09      	ldr	r3, [pc, #36]	; (800d864 <prvHeapInit+0xc0>)
 800d83e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d842:	601a      	str	r2, [r3, #0]
}
 800d844:	bf00      	nop
 800d846:	3714      	adds	r7, #20
 800d848:	46bd      	mov	sp, r7
 800d84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84e:	4770      	bx	lr
 800d850:	200003c8 	.word	0x200003c8
 800d854:	20003fc8 	.word	0x20003fc8
 800d858:	20003fd0 	.word	0x20003fd0
 800d85c:	20003fd8 	.word	0x20003fd8
 800d860:	20003fd4 	.word	0x20003fd4
 800d864:	20003fe4 	.word	0x20003fe4

0800d868 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d868:	b480      	push	{r7}
 800d86a:	b085      	sub	sp, #20
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d870:	4b28      	ldr	r3, [pc, #160]	; (800d914 <prvInsertBlockIntoFreeList+0xac>)
 800d872:	60fb      	str	r3, [r7, #12]
 800d874:	e002      	b.n	800d87c <prvInsertBlockIntoFreeList+0x14>
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	60fb      	str	r3, [r7, #12]
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	687a      	ldr	r2, [r7, #4]
 800d882:	429a      	cmp	r2, r3
 800d884:	d8f7      	bhi.n	800d876 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	68ba      	ldr	r2, [r7, #8]
 800d890:	4413      	add	r3, r2
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	429a      	cmp	r2, r3
 800d896:	d108      	bne.n	800d8aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	685a      	ldr	r2, [r3, #4]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	685b      	ldr	r3, [r3, #4]
 800d8a0:	441a      	add	r2, r3
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	68ba      	ldr	r2, [r7, #8]
 800d8b4:	441a      	add	r2, r3
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d118      	bne.n	800d8f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	4b15      	ldr	r3, [pc, #84]	; (800d918 <prvInsertBlockIntoFreeList+0xb0>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d00d      	beq.n	800d8e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	685a      	ldr	r2, [r3, #4]
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	685b      	ldr	r3, [r3, #4]
 800d8d4:	441a      	add	r2, r3
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	681a      	ldr	r2, [r3, #0]
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	601a      	str	r2, [r3, #0]
 800d8e4:	e008      	b.n	800d8f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d8e6:	4b0c      	ldr	r3, [pc, #48]	; (800d918 <prvInsertBlockIntoFreeList+0xb0>)
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	601a      	str	r2, [r3, #0]
 800d8ee:	e003      	b.n	800d8f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	681a      	ldr	r2, [r3, #0]
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d8f8:	68fa      	ldr	r2, [r7, #12]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d002      	beq.n	800d906 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d906:	bf00      	nop
 800d908:	3714      	adds	r7, #20
 800d90a:	46bd      	mov	sp, r7
 800d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d910:	4770      	bx	lr
 800d912:	bf00      	nop
 800d914:	20003fc8 	.word	0x20003fc8
 800d918:	20003fd0 	.word	0x20003fd0

0800d91c <__libc_init_array>:
 800d91c:	b570      	push	{r4, r5, r6, lr}
 800d91e:	4d0d      	ldr	r5, [pc, #52]	; (800d954 <__libc_init_array+0x38>)
 800d920:	4c0d      	ldr	r4, [pc, #52]	; (800d958 <__libc_init_array+0x3c>)
 800d922:	1b64      	subs	r4, r4, r5
 800d924:	10a4      	asrs	r4, r4, #2
 800d926:	2600      	movs	r6, #0
 800d928:	42a6      	cmp	r6, r4
 800d92a:	d109      	bne.n	800d940 <__libc_init_array+0x24>
 800d92c:	4d0b      	ldr	r5, [pc, #44]	; (800d95c <__libc_init_array+0x40>)
 800d92e:	4c0c      	ldr	r4, [pc, #48]	; (800d960 <__libc_init_array+0x44>)
 800d930:	f000 f82e 	bl	800d990 <_init>
 800d934:	1b64      	subs	r4, r4, r5
 800d936:	10a4      	asrs	r4, r4, #2
 800d938:	2600      	movs	r6, #0
 800d93a:	42a6      	cmp	r6, r4
 800d93c:	d105      	bne.n	800d94a <__libc_init_array+0x2e>
 800d93e:	bd70      	pop	{r4, r5, r6, pc}
 800d940:	f855 3b04 	ldr.w	r3, [r5], #4
 800d944:	4798      	blx	r3
 800d946:	3601      	adds	r6, #1
 800d948:	e7ee      	b.n	800d928 <__libc_init_array+0xc>
 800d94a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d94e:	4798      	blx	r3
 800d950:	3601      	adds	r6, #1
 800d952:	e7f2      	b.n	800d93a <__libc_init_array+0x1e>
 800d954:	0800daa0 	.word	0x0800daa0
 800d958:	0800daa0 	.word	0x0800daa0
 800d95c:	0800daa0 	.word	0x0800daa0
 800d960:	0800daa4 	.word	0x0800daa4

0800d964 <memcpy>:
 800d964:	440a      	add	r2, r1
 800d966:	4291      	cmp	r1, r2
 800d968:	f100 33ff 	add.w	r3, r0, #4294967295
 800d96c:	d100      	bne.n	800d970 <memcpy+0xc>
 800d96e:	4770      	bx	lr
 800d970:	b510      	push	{r4, lr}
 800d972:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d976:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d97a:	4291      	cmp	r1, r2
 800d97c:	d1f9      	bne.n	800d972 <memcpy+0xe>
 800d97e:	bd10      	pop	{r4, pc}

0800d980 <memset>:
 800d980:	4402      	add	r2, r0
 800d982:	4603      	mov	r3, r0
 800d984:	4293      	cmp	r3, r2
 800d986:	d100      	bne.n	800d98a <memset+0xa>
 800d988:	4770      	bx	lr
 800d98a:	f803 1b01 	strb.w	r1, [r3], #1
 800d98e:	e7f9      	b.n	800d984 <memset+0x4>

0800d990 <_init>:
 800d990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d992:	bf00      	nop
 800d994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d996:	bc08      	pop	{r3}
 800d998:	469e      	mov	lr, r3
 800d99a:	4770      	bx	lr

0800d99c <_fini>:
 800d99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d99e:	bf00      	nop
 800d9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9a2:	bc08      	pop	{r3}
 800d9a4:	469e      	mov	lr, r3
 800d9a6:	4770      	bx	lr
