
file_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d758  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800d9f8  0800d9f8  0001d9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dae8  0800dae8  0001dae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800daf0  0800daf0  0001daf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800daf4  0800daf4  0001daf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  0800daf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004994  20000014  0800db0c  00020014  2**2
                  ALLOC
  8 .RAM_D1       00000118  24000000  0800db0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 ._user_heap_stack 00000600  200049a8  200049a8  000349a8  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002c6da  00000000  00000000  00030146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004a91  00000000  00000000  0005c820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000017a0  00000000  00000000  000612b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001628  00000000  00000000  00062a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000395ee  00000000  00000000  00064080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001dc5f  00000000  00000000  0009d66e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016c1e1  00000000  00000000  000bb2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  002274ae  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006274  00000000  00000000  00227504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000014 	.word	0x20000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d9e0 	.word	0x0800d9e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000018 	.word	0x20000018
 80002dc:	0800d9e0 	.word	0x0800d9e0

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <CaptureDownData>:
/**
 * @brief 捕获上位机向下位机发送的指令
 * @return DownDataDef 上位机向下位机发送的指令
 */
DownDataDef CaptureDownData(void)
{
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b090      	sub	sp, #64	; 0x40
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	DownDataDef CaptureData;

	CaptureData.StraightNum = ((DownDataReceive[1] << 8) | DownDataReceive[2]);
 80005e0:	4b4a      	ldr	r3, [pc, #296]	; (800070c <CaptureDownData+0x134>)
 80005e2:	785b      	ldrb	r3, [r3, #1]
 80005e4:	021b      	lsls	r3, r3, #8
 80005e6:	b21a      	sxth	r2, r3
 80005e8:	4b48      	ldr	r3, [pc, #288]	; (800070c <CaptureDownData+0x134>)
 80005ea:	789b      	ldrb	r3, [r3, #2]
 80005ec:	b21b      	sxth	r3, r3
 80005ee:	4313      	orrs	r3, r2
 80005f0:	b21b      	sxth	r3, r3
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	81bb      	strh	r3, [r7, #12]
	CaptureData.RotateNum = ((DownDataReceive[3] << 8) | DownDataReceive[4]);
 80005f6:	4b45      	ldr	r3, [pc, #276]	; (800070c <CaptureDownData+0x134>)
 80005f8:	78db      	ldrb	r3, [r3, #3]
 80005fa:	021b      	lsls	r3, r3, #8
 80005fc:	b21a      	sxth	r2, r3
 80005fe:	4b43      	ldr	r3, [pc, #268]	; (800070c <CaptureDownData+0x134>)
 8000600:	791b      	ldrb	r3, [r3, #4]
 8000602:	b21b      	sxth	r3, r3
 8000604:	4313      	orrs	r3, r2
 8000606:	b21b      	sxth	r3, r3
 8000608:	b29b      	uxth	r3, r3
 800060a:	81fb      	strh	r3, [r7, #14]
	CaptureData.VerticalNum = ((DownDataReceive[5] << 8) | DownDataReceive[6]);
 800060c:	4b3f      	ldr	r3, [pc, #252]	; (800070c <CaptureDownData+0x134>)
 800060e:	795b      	ldrb	r3, [r3, #5]
 8000610:	021b      	lsls	r3, r3, #8
 8000612:	b21a      	sxth	r2, r3
 8000614:	4b3d      	ldr	r3, [pc, #244]	; (800070c <CaptureDownData+0x134>)
 8000616:	799b      	ldrb	r3, [r3, #6]
 8000618:	b21b      	sxth	r3, r3
 800061a:	4313      	orrs	r3, r2
 800061c:	b21b      	sxth	r3, r3
 800061e:	b29b      	uxth	r3, r3
 8000620:	823b      	strh	r3, [r7, #16]
	CaptureData.LightPWM = ((DownDataReceive[7] << 8) | DownDataReceive[8]);
 8000622:	4b3a      	ldr	r3, [pc, #232]	; (800070c <CaptureDownData+0x134>)
 8000624:	79db      	ldrb	r3, [r3, #7]
 8000626:	021b      	lsls	r3, r3, #8
 8000628:	4a38      	ldr	r2, [pc, #224]	; (800070c <CaptureDownData+0x134>)
 800062a:	7a12      	ldrb	r2, [r2, #8]
 800062c:	4313      	orrs	r3, r2
 800062e:	617b      	str	r3, [r7, #20]
	CaptureData.THPWM = ((DownDataReceive[9] << 8) | DownDataReceive[10]);
 8000630:	4b36      	ldr	r3, [pc, #216]	; (800070c <CaptureDownData+0x134>)
 8000632:	7a5b      	ldrb	r3, [r3, #9]
 8000634:	021b      	lsls	r3, r3, #8
 8000636:	4a35      	ldr	r2, [pc, #212]	; (800070c <CaptureDownData+0x134>)
 8000638:	7a92      	ldrb	r2, [r2, #10]
 800063a:	4313      	orrs	r3, r2
 800063c:	61bb      	str	r3, [r7, #24]
	CaptureData.TranspPWM = ((DownDataReceive[11] << 8) | DownDataReceive[12]);
 800063e:	4b33      	ldr	r3, [pc, #204]	; (800070c <CaptureDownData+0x134>)
 8000640:	7adb      	ldrb	r3, [r3, #11]
 8000642:	021b      	lsls	r3, r3, #8
 8000644:	4a31      	ldr	r2, [pc, #196]	; (800070c <CaptureDownData+0x134>)
 8000646:	7b12      	ldrb	r2, [r2, #12]
 8000648:	4313      	orrs	r3, r2
 800064a:	61fb      	str	r3, [r7, #28]
	CaptureData.ArmPWM[0] = ((DownDataReceive[13] << 8) | DownDataReceive[14]);
 800064c:	4b2f      	ldr	r3, [pc, #188]	; (800070c <CaptureDownData+0x134>)
 800064e:	7b5b      	ldrb	r3, [r3, #13]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	4a2e      	ldr	r2, [pc, #184]	; (800070c <CaptureDownData+0x134>)
 8000654:	7b92      	ldrb	r2, [r2, #14]
 8000656:	4313      	orrs	r3, r2
 8000658:	623b      	str	r3, [r7, #32]
	CaptureData.ArmPWM[1] = ((DownDataReceive[15] << 8) | DownDataReceive[16]);
 800065a:	4b2c      	ldr	r3, [pc, #176]	; (800070c <CaptureDownData+0x134>)
 800065c:	7bdb      	ldrb	r3, [r3, #15]
 800065e:	021b      	lsls	r3, r3, #8
 8000660:	4a2a      	ldr	r2, [pc, #168]	; (800070c <CaptureDownData+0x134>)
 8000662:	7c12      	ldrb	r2, [r2, #16]
 8000664:	4313      	orrs	r3, r2
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
	CaptureData.ArmPWM[2] = ((DownDataReceive[17] << 8) | DownDataReceive[18]);
 8000668:	4b28      	ldr	r3, [pc, #160]	; (800070c <CaptureDownData+0x134>)
 800066a:	7c5b      	ldrb	r3, [r3, #17]
 800066c:	021b      	lsls	r3, r3, #8
 800066e:	4a27      	ldr	r2, [pc, #156]	; (800070c <CaptureDownData+0x134>)
 8000670:	7c92      	ldrb	r2, [r2, #18]
 8000672:	4313      	orrs	r3, r2
 8000674:	62bb      	str	r3, [r7, #40]	; 0x28
	CaptureData.ArmPWM[3] = ((DownDataReceive[19] << 8) | DownDataReceive[20]);
 8000676:	4b25      	ldr	r3, [pc, #148]	; (800070c <CaptureDownData+0x134>)
 8000678:	7cdb      	ldrb	r3, [r3, #19]
 800067a:	021b      	lsls	r3, r3, #8
 800067c:	4a23      	ldr	r2, [pc, #140]	; (800070c <CaptureDownData+0x134>)
 800067e:	7d12      	ldrb	r2, [r2, #20]
 8000680:	4313      	orrs	r3, r2
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
	CaptureData.ArmPWM[4] = ((DownDataReceive[21] << 8) | DownDataReceive[22]);
 8000684:	4b21      	ldr	r3, [pc, #132]	; (800070c <CaptureDownData+0x134>)
 8000686:	7d5b      	ldrb	r3, [r3, #21]
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	4a20      	ldr	r2, [pc, #128]	; (800070c <CaptureDownData+0x134>)
 800068c:	7d92      	ldrb	r2, [r2, #22]
 800068e:	4313      	orrs	r3, r2
 8000690:	633b      	str	r3, [r7, #48]	; 0x30
	CaptureData.ArmPWM[5] = ((DownDataReceive[23] << 8) | DownDataReceive[24]);
 8000692:	4b1e      	ldr	r3, [pc, #120]	; (800070c <CaptureDownData+0x134>)
 8000694:	7ddb      	ldrb	r3, [r3, #23]
 8000696:	021b      	lsls	r3, r3, #8
 8000698:	4a1c      	ldr	r2, [pc, #112]	; (800070c <CaptureDownData+0x134>)
 800069a:	7e12      	ldrb	r2, [r2, #24]
 800069c:	4313      	orrs	r3, r2
 800069e:	637b      	str	r3, [r7, #52]	; 0x34
	CaptureData.ResPWM = ((DownDataReceive[25] << 8) | DownDataReceive[26]);
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <CaptureDownData+0x134>)
 80006a2:	7e5b      	ldrb	r3, [r3, #25]
 80006a4:	021b      	lsls	r3, r3, #8
 80006a6:	4a19      	ldr	r2, [pc, #100]	; (800070c <CaptureDownData+0x134>)
 80006a8:	7e92      	ldrb	r2, [r2, #26]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
#ifdef CtrlSide
	CaptureData.Mode = (DownDataReceive[27]); //方便数据下传与中途获取
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <CaptureDownData+0x134>)
 80006b0:	7edb      	ldrb	r3, [r3, #27]
 80006b2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	CaptureData.Relay = (DownDataReceive[27]);
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <CaptureDownData+0x134>)
 80006b8:	7edb      	ldrb	r3, [r3, #27]
 80006ba:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
#else
	CaptureData.Mode = (DownDataReceive[27] & 0b0001);
	CaptureData.Relay = (DownDataReceive[27] & 0b1000);
#endif
#endif
	CaptureData.IdTest = IdTest(DownDataReceive, 0, 44, 28);
 80006be:	231c      	movs	r3, #28
 80006c0:	222c      	movs	r2, #44	; 0x2c
 80006c2:	2100      	movs	r1, #0
 80006c4:	4811      	ldr	r0, [pc, #68]	; (800070c <CaptureDownData+0x134>)
 80006c6:	f000 fbcd 	bl	8000e64 <IdTest>
 80006ca:	4603      	mov	r3, r0
 80006cc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	__HAL_UART_ENABLE_IT(&Up_UART, UART_IT_IDLE);
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <CaptureDownData+0x138>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <CaptureDownData+0x138>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f042 0210 	orr.w	r2, r2, #16
 80006de:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Up_UART, DownDataReceive, Up_UART_RXLen);
 80006e0:	221e      	movs	r2, #30
 80006e2:	490a      	ldr	r1, [pc, #40]	; (800070c <CaptureDownData+0x134>)
 80006e4:	480a      	ldr	r0, [pc, #40]	; (8000710 <CaptureDownData+0x138>)
 80006e6:	f009 f91b 	bl	8009920 <HAL_UART_Receive_DMA>

	return CaptureData;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	461d      	mov	r5, r3
 80006ee:	f107 040c 	add.w	r4, r7, #12
 80006f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006fe:	6823      	ldr	r3, [r4, #0]
 8000700:	602b      	str	r3, [r5, #0]
}
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	3740      	adds	r7, #64	; 0x40
 8000706:	46bd      	mov	sp, r7
 8000708:	bdb0      	pop	{r4, r5, r7, pc}
 800070a:	bf00      	nop
 800070c:	24000000 	.word	0x24000000
 8000710:	200044d0 	.word	0x200044d0

08000714 <SendDownData>:
 * @brief 向下位机发送数据
 * @param  SendData         待发送的数据结构体
 * @note 已完成Debug
 */
void SendDownData(DownDataDef SendData)
{
 8000714:	b084      	sub	sp, #16
 8000716:	b580      	push	{r7, lr}
 8000718:	af00      	add	r7, sp, #0
 800071a:	f107 0c08 	add.w	ip, r7, #8
 800071e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	DownDataSend[0] = 0x25;
 8000722:	4b4a      	ldr	r3, [pc, #296]	; (800084c <SendDownData+0x138>)
 8000724:	2225      	movs	r2, #37	; 0x25
 8000726:	701a      	strb	r2, [r3, #0]
	DownDataSend[1] = SendData.StraightNum >> 8;
 8000728:	893b      	ldrh	r3, [r7, #8]
 800072a:	0a1b      	lsrs	r3, r3, #8
 800072c:	b29b      	uxth	r3, r3
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b46      	ldr	r3, [pc, #280]	; (800084c <SendDownData+0x138>)
 8000732:	705a      	strb	r2, [r3, #1]
	DownDataSend[2] = SendData.StraightNum;
 8000734:	893b      	ldrh	r3, [r7, #8]
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b44      	ldr	r3, [pc, #272]	; (800084c <SendDownData+0x138>)
 800073a:	709a      	strb	r2, [r3, #2]
	DownDataSend[3] = SendData.RotateNum >> 8;
 800073c:	897b      	ldrh	r3, [r7, #10]
 800073e:	0a1b      	lsrs	r3, r3, #8
 8000740:	b29b      	uxth	r3, r3
 8000742:	b2da      	uxtb	r2, r3
 8000744:	4b41      	ldr	r3, [pc, #260]	; (800084c <SendDownData+0x138>)
 8000746:	70da      	strb	r2, [r3, #3]
	DownDataSend[4] = SendData.RotateNum;
 8000748:	897b      	ldrh	r3, [r7, #10]
 800074a:	b2da      	uxtb	r2, r3
 800074c:	4b3f      	ldr	r3, [pc, #252]	; (800084c <SendDownData+0x138>)
 800074e:	711a      	strb	r2, [r3, #4]
	DownDataSend[5] = SendData.VerticalNum >> 8;
 8000750:	89bb      	ldrh	r3, [r7, #12]
 8000752:	0a1b      	lsrs	r3, r3, #8
 8000754:	b29b      	uxth	r3, r3
 8000756:	b2da      	uxtb	r2, r3
 8000758:	4b3c      	ldr	r3, [pc, #240]	; (800084c <SendDownData+0x138>)
 800075a:	715a      	strb	r2, [r3, #5]
	DownDataSend[6] = SendData.VerticalNum;
 800075c:	89bb      	ldrh	r3, [r7, #12]
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b3a      	ldr	r3, [pc, #232]	; (800084c <SendDownData+0x138>)
 8000762:	719a      	strb	r2, [r3, #6]
	DownDataSend[7] = SendData.LightPWM >> 8;
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	0a1b      	lsrs	r3, r3, #8
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4b38      	ldr	r3, [pc, #224]	; (800084c <SendDownData+0x138>)
 800076c:	71da      	strb	r2, [r3, #7]
	DownDataSend[8] = SendData.LightPWM;
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b36      	ldr	r3, [pc, #216]	; (800084c <SendDownData+0x138>)
 8000774:	721a      	strb	r2, [r3, #8]
	DownDataSend[9] = SendData.THPWM >> 8;
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	b2da      	uxtb	r2, r3
 800077c:	4b33      	ldr	r3, [pc, #204]	; (800084c <SendDownData+0x138>)
 800077e:	725a      	strb	r2, [r3, #9]
	DownDataSend[10] = SendData.THPWM;
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	b2da      	uxtb	r2, r3
 8000784:	4b31      	ldr	r3, [pc, #196]	; (800084c <SendDownData+0x138>)
 8000786:	729a      	strb	r2, [r3, #10]
	DownDataSend[11] = SendData.TranspPWM >> 8;
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	0a1b      	lsrs	r3, r3, #8
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4b2f      	ldr	r3, [pc, #188]	; (800084c <SendDownData+0x138>)
 8000790:	72da      	strb	r2, [r3, #11]
	DownDataSend[12] = SendData.TranspPWM;
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b2d      	ldr	r3, [pc, #180]	; (800084c <SendDownData+0x138>)
 8000798:	731a      	strb	r2, [r3, #12]
	DownDataSend[13] = SendData.ArmPWM[0] >> 8;
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	0a1b      	lsrs	r3, r3, #8
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4b2a      	ldr	r3, [pc, #168]	; (800084c <SendDownData+0x138>)
 80007a2:	735a      	strb	r2, [r3, #13]
	DownDataSend[14] = SendData.ArmPWM[0];
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b28      	ldr	r3, [pc, #160]	; (800084c <SendDownData+0x138>)
 80007aa:	739a      	strb	r2, [r3, #14]
	DownDataSend[15] = SendData.ArmPWM[1] >> 8;
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	0a1b      	lsrs	r3, r3, #8
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <SendDownData+0x138>)
 80007b4:	73da      	strb	r2, [r3, #15]
	DownDataSend[16] = SendData.ArmPWM[1];
 80007b6:	6a3b      	ldr	r3, [r7, #32]
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b24      	ldr	r3, [pc, #144]	; (800084c <SendDownData+0x138>)
 80007bc:	741a      	strb	r2, [r3, #16]
	DownDataSend[17] = SendData.ArmPWM[2] >> 8;
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b21      	ldr	r3, [pc, #132]	; (800084c <SendDownData+0x138>)
 80007c6:	745a      	strb	r2, [r3, #17]
	DownDataSend[18] = SendData.ArmPWM[2];
 80007c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <SendDownData+0x138>)
 80007ce:	749a      	strb	r2, [r3, #18]
	DownDataSend[19] = SendData.ArmPWM[3] >> 8;
 80007d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d2:	0a1b      	lsrs	r3, r3, #8
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b1d      	ldr	r3, [pc, #116]	; (800084c <SendDownData+0x138>)
 80007d8:	74da      	strb	r2, [r3, #19]
	DownDataSend[20] = SendData.ArmPWM[3];
 80007da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4b1b      	ldr	r3, [pc, #108]	; (800084c <SendDownData+0x138>)
 80007e0:	751a      	strb	r2, [r3, #20]
	DownDataSend[21] = SendData.ArmPWM[4] >> 8;
 80007e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007e4:	0a1b      	lsrs	r3, r3, #8
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <SendDownData+0x138>)
 80007ea:	755a      	strb	r2, [r3, #21]
	DownDataSend[22] = SendData.ArmPWM[4];
 80007ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b16      	ldr	r3, [pc, #88]	; (800084c <SendDownData+0x138>)
 80007f2:	759a      	strb	r2, [r3, #22]
	DownDataSend[23] = SendData.ArmPWM[5] >> 8;
 80007f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007f6:	0a1b      	lsrs	r3, r3, #8
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <SendDownData+0x138>)
 80007fc:	75da      	strb	r2, [r3, #23]
	DownDataSend[24] = SendData.ArmPWM[5];
 80007fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <SendDownData+0x138>)
 8000804:	761a      	strb	r2, [r3, #24]
	DownDataSend[25] = SendData.ResPWM >> 8;
 8000806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000808:	0a1b      	lsrs	r3, r3, #8
 800080a:	b2da      	uxtb	r2, r3
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <SendDownData+0x138>)
 800080e:	765a      	strb	r2, [r3, #25]
	DownDataSend[26] = SendData.ResPWM;
 8000810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b0d      	ldr	r3, [pc, #52]	; (800084c <SendDownData+0x138>)
 8000816:	769a      	strb	r2, [r3, #26]
	DownDataSend[27] = SendData.Relay; //直接下传数据
 8000818:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800081c:	4b0b      	ldr	r3, [pc, #44]	; (800084c <SendDownData+0x138>)
 800081e:	76da      	strb	r2, [r3, #27]
	DownDataSend[28] = XorCaculate(DownDataSend, 28);
 8000820:	211c      	movs	r1, #28
 8000822:	480a      	ldr	r0, [pc, #40]	; (800084c <SendDownData+0x138>)
 8000824:	f000 fb32 	bl	8000e8c <XorCaculate>
 8000828:	4603      	mov	r3, r0
 800082a:	461a      	mov	r2, r3
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <SendDownData+0x138>)
 800082e:	771a      	strb	r2, [r3, #28]
	DownDataSend[29] = 0x21;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <SendDownData+0x138>)
 8000832:	2221      	movs	r2, #33	; 0x21
 8000834:	775a      	strb	r2, [r3, #29]

	HAL_UART_Transmit_DMA(&Down_UART, DownDataSend, Down_UART_TXLEN);
 8000836:	221e      	movs	r2, #30
 8000838:	4904      	ldr	r1, [pc, #16]	; (800084c <SendDownData+0x138>)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <SendDownData+0x13c>)
 800083c:	f008 fff0 	bl	8009820 <HAL_UART_Transmit_DMA>
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000848:	b004      	add	sp, #16
 800084a:	4770      	bx	lr
 800084c:	24000020 	.word	0x24000020
 8000850:	200045ec 	.word	0x200045ec

08000854 <CaptureUpData>:
/**
 * @brief 捕获下位向上位发送的数据
 * @return UpDataDef 下位机上传的数据结构体
 */
UpDataDef CaptureUpData(void)
{
 8000854:	b5b0      	push	{r4, r5, r7, lr}
 8000856:	b08e      	sub	sp, #56	; 0x38
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	UpDataDef CaptureData;

	CaptureData.CabinNum = (UpDataReceive[1] & 0b0001); //0b0000控制仓，0b0001==1电源仓
 800085c:	4b8b      	ldr	r3, [pc, #556]	; (8000a8c <CaptureUpData+0x238>)
 800085e:	785b      	ldrb	r3, [r3, #1]
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	b2db      	uxtb	r3, r3
 8000866:	723b      	strb	r3, [r7, #8]
	CaptureData.WaterDetect = (UpDataReceive[1] & 0b0010); //0b0000正常，0b0010==2漏水
 8000868:	4b88      	ldr	r3, [pc, #544]	; (8000a8c <CaptureUpData+0x238>)
 800086a:	785b      	ldrb	r3, [r3, #1]
 800086c:	f003 0302 	and.w	r3, r3, #2
 8000870:	b2db      	uxtb	r3, r3
 8000872:	727b      	strb	r3, [r7, #9]
	CaptureData.CabinTemperature = ((UpDataReceive[3] << 8) | UpDataReceive[2]);
 8000874:	4b85      	ldr	r3, [pc, #532]	; (8000a8c <CaptureUpData+0x238>)
 8000876:	78db      	ldrb	r3, [r3, #3]
 8000878:	021b      	lsls	r3, r3, #8
 800087a:	b21a      	sxth	r2, r3
 800087c:	4b83      	ldr	r3, [pc, #524]	; (8000a8c <CaptureUpData+0x238>)
 800087e:	789b      	ldrb	r3, [r3, #2]
 8000880:	b21b      	sxth	r3, r3
 8000882:	4313      	orrs	r3, r2
 8000884:	b21b      	sxth	r3, r3
 8000886:	b29b      	uxth	r3, r3
 8000888:	817b      	strh	r3, [r7, #10]
	CaptureData.CabinBaro = ((UpDataReceive[7] << 24) | (UpDataReceive[6] << 16)
 800088a:	4b80      	ldr	r3, [pc, #512]	; (8000a8c <CaptureUpData+0x238>)
 800088c:	79db      	ldrb	r3, [r3, #7]
 800088e:	061a      	lsls	r2, r3, #24
 8000890:	4b7e      	ldr	r3, [pc, #504]	; (8000a8c <CaptureUpData+0x238>)
 8000892:	799b      	ldrb	r3, [r3, #6]
 8000894:	041b      	lsls	r3, r3, #16
 8000896:	431a      	orrs	r2, r3
			| (UpDataReceive[5] << 8) | UpDataReceive[4]);
 8000898:	4b7c      	ldr	r3, [pc, #496]	; (8000a8c <CaptureUpData+0x238>)
 800089a:	795b      	ldrb	r3, [r3, #5]
 800089c:	021b      	lsls	r3, r3, #8
 800089e:	4313      	orrs	r3, r2
 80008a0:	4a7a      	ldr	r2, [pc, #488]	; (8000a8c <CaptureUpData+0x238>)
 80008a2:	7912      	ldrb	r2, [r2, #4]
 80008a4:	4313      	orrs	r3, r2
	CaptureData.CabinBaro = ((UpDataReceive[7] << 24) | (UpDataReceive[6] << 16)
 80008a6:	60fb      	str	r3, [r7, #12]
	CaptureData.CabinHum = ((UpDataReceive[9] << 8) | UpDataReceive[8]);
 80008a8:	4b78      	ldr	r3, [pc, #480]	; (8000a8c <CaptureUpData+0x238>)
 80008aa:	7a5b      	ldrb	r3, [r3, #9]
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	4b76      	ldr	r3, [pc, #472]	; (8000a8c <CaptureUpData+0x238>)
 80008b2:	7a1b      	ldrb	r3, [r3, #8]
 80008b4:	b21b      	sxth	r3, r3
 80008b6:	4313      	orrs	r3, r2
 80008b8:	b21b      	sxth	r3, r3
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	823b      	strh	r3, [r7, #16]
	CaptureData.AccNum[0] = ((UpDataReceive[11] << 8) | UpDataReceive[10]);
 80008be:	4b73      	ldr	r3, [pc, #460]	; (8000a8c <CaptureUpData+0x238>)
 80008c0:	7adb      	ldrb	r3, [r3, #11]
 80008c2:	021b      	lsls	r3, r3, #8
 80008c4:	b21a      	sxth	r2, r3
 80008c6:	4b71      	ldr	r3, [pc, #452]	; (8000a8c <CaptureUpData+0x238>)
 80008c8:	7a9b      	ldrb	r3, [r3, #10]
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	827b      	strh	r3, [r7, #18]
	CaptureData.AccNum[1] = ((UpDataReceive[13] << 8) | UpDataReceive[12]);
 80008d4:	4b6d      	ldr	r3, [pc, #436]	; (8000a8c <CaptureUpData+0x238>)
 80008d6:	7b5b      	ldrb	r3, [r3, #13]
 80008d8:	021b      	lsls	r3, r3, #8
 80008da:	b21a      	sxth	r2, r3
 80008dc:	4b6b      	ldr	r3, [pc, #428]	; (8000a8c <CaptureUpData+0x238>)
 80008de:	7b1b      	ldrb	r3, [r3, #12]
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	82bb      	strh	r3, [r7, #20]
	CaptureData.AccNum[2] = ((UpDataReceive[15] << 8) | UpDataReceive[14]);
 80008ea:	4b68      	ldr	r3, [pc, #416]	; (8000a8c <CaptureUpData+0x238>)
 80008ec:	7bdb      	ldrb	r3, [r3, #15]
 80008ee:	021b      	lsls	r3, r3, #8
 80008f0:	b21a      	sxth	r2, r3
 80008f2:	4b66      	ldr	r3, [pc, #408]	; (8000a8c <CaptureUpData+0x238>)
 80008f4:	7b9b      	ldrb	r3, [r3, #14]
 80008f6:	b21b      	sxth	r3, r3
 80008f8:	4313      	orrs	r3, r2
 80008fa:	b21b      	sxth	r3, r3
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	82fb      	strh	r3, [r7, #22]
	CaptureData.RotNum[0] = ((UpDataReceive[17] << 8) | UpDataReceive[16]);
 8000900:	4b62      	ldr	r3, [pc, #392]	; (8000a8c <CaptureUpData+0x238>)
 8000902:	7c5b      	ldrb	r3, [r3, #17]
 8000904:	021b      	lsls	r3, r3, #8
 8000906:	b21a      	sxth	r2, r3
 8000908:	4b60      	ldr	r3, [pc, #384]	; (8000a8c <CaptureUpData+0x238>)
 800090a:	7c1b      	ldrb	r3, [r3, #16]
 800090c:	b21b      	sxth	r3, r3
 800090e:	4313      	orrs	r3, r2
 8000910:	b21b      	sxth	r3, r3
 8000912:	b29b      	uxth	r3, r3
 8000914:	833b      	strh	r3, [r7, #24]
	CaptureData.RotNum[1] = ((UpDataReceive[19] << 8) | UpDataReceive[18]);
 8000916:	4b5d      	ldr	r3, [pc, #372]	; (8000a8c <CaptureUpData+0x238>)
 8000918:	7cdb      	ldrb	r3, [r3, #19]
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	b21a      	sxth	r2, r3
 800091e:	4b5b      	ldr	r3, [pc, #364]	; (8000a8c <CaptureUpData+0x238>)
 8000920:	7c9b      	ldrb	r3, [r3, #18]
 8000922:	b21b      	sxth	r3, r3
 8000924:	4313      	orrs	r3, r2
 8000926:	b21b      	sxth	r3, r3
 8000928:	b29b      	uxth	r3, r3
 800092a:	837b      	strh	r3, [r7, #26]
	CaptureData.RotNum[2] = ((UpDataReceive[21] << 8) | UpDataReceive[20]);
 800092c:	4b57      	ldr	r3, [pc, #348]	; (8000a8c <CaptureUpData+0x238>)
 800092e:	7d5b      	ldrb	r3, [r3, #21]
 8000930:	021b      	lsls	r3, r3, #8
 8000932:	b21a      	sxth	r2, r3
 8000934:	4b55      	ldr	r3, [pc, #340]	; (8000a8c <CaptureUpData+0x238>)
 8000936:	7d1b      	ldrb	r3, [r3, #20]
 8000938:	b21b      	sxth	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b21b      	sxth	r3, r3
 800093e:	b29b      	uxth	r3, r3
 8000940:	83bb      	strh	r3, [r7, #28]
	CaptureData.EulNum[0] = ((UpDataReceive[23] << 8) | UpDataReceive[22]);
 8000942:	4b52      	ldr	r3, [pc, #328]	; (8000a8c <CaptureUpData+0x238>)
 8000944:	7ddb      	ldrb	r3, [r3, #23]
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b21a      	sxth	r2, r3
 800094a:	4b50      	ldr	r3, [pc, #320]	; (8000a8c <CaptureUpData+0x238>)
 800094c:	7d9b      	ldrb	r3, [r3, #22]
 800094e:	b21b      	sxth	r3, r3
 8000950:	4313      	orrs	r3, r2
 8000952:	b21b      	sxth	r3, r3
 8000954:	b29b      	uxth	r3, r3
 8000956:	83fb      	strh	r3, [r7, #30]
	CaptureData.EulNum[1] = ((UpDataReceive[25] << 8) | UpDataReceive[24]);
 8000958:	4b4c      	ldr	r3, [pc, #304]	; (8000a8c <CaptureUpData+0x238>)
 800095a:	7e5b      	ldrb	r3, [r3, #25]
 800095c:	021b      	lsls	r3, r3, #8
 800095e:	b21a      	sxth	r2, r3
 8000960:	4b4a      	ldr	r3, [pc, #296]	; (8000a8c <CaptureUpData+0x238>)
 8000962:	7e1b      	ldrb	r3, [r3, #24]
 8000964:	b21b      	sxth	r3, r3
 8000966:	4313      	orrs	r3, r2
 8000968:	b21b      	sxth	r3, r3
 800096a:	b29b      	uxth	r3, r3
 800096c:	843b      	strh	r3, [r7, #32]
	CaptureData.EulNum[2] = ((UpDataReceive[27] << 8) | UpDataReceive[26]);
 800096e:	4b47      	ldr	r3, [pc, #284]	; (8000a8c <CaptureUpData+0x238>)
 8000970:	7edb      	ldrb	r3, [r3, #27]
 8000972:	021b      	lsls	r3, r3, #8
 8000974:	b21a      	sxth	r2, r3
 8000976:	4b45      	ldr	r3, [pc, #276]	; (8000a8c <CaptureUpData+0x238>)
 8000978:	7e9b      	ldrb	r3, [r3, #26]
 800097a:	b21b      	sxth	r3, r3
 800097c:	4313      	orrs	r3, r2
 800097e:	b21b      	sxth	r3, r3
 8000980:	b29b      	uxth	r3, r3
 8000982:	847b      	strh	r3, [r7, #34]	; 0x22
	CaptureData.MagNum[0] = ((UpDataReceive[29] << 8) | UpDataReceive[28]);
 8000984:	4b41      	ldr	r3, [pc, #260]	; (8000a8c <CaptureUpData+0x238>)
 8000986:	7f5b      	ldrb	r3, [r3, #29]
 8000988:	021b      	lsls	r3, r3, #8
 800098a:	b21a      	sxth	r2, r3
 800098c:	4b3f      	ldr	r3, [pc, #252]	; (8000a8c <CaptureUpData+0x238>)
 800098e:	7f1b      	ldrb	r3, [r3, #28]
 8000990:	b21b      	sxth	r3, r3
 8000992:	4313      	orrs	r3, r2
 8000994:	b21b      	sxth	r3, r3
 8000996:	b29b      	uxth	r3, r3
 8000998:	84bb      	strh	r3, [r7, #36]	; 0x24
	CaptureData.MagNum[1] = ((UpDataReceive[31] << 8) | UpDataReceive[30]);
 800099a:	4b3c      	ldr	r3, [pc, #240]	; (8000a8c <CaptureUpData+0x238>)
 800099c:	7fdb      	ldrb	r3, [r3, #31]
 800099e:	021b      	lsls	r3, r3, #8
 80009a0:	b21a      	sxth	r2, r3
 80009a2:	4b3a      	ldr	r3, [pc, #232]	; (8000a8c <CaptureUpData+0x238>)
 80009a4:	7f9b      	ldrb	r3, [r3, #30]
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	4313      	orrs	r3, r2
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	84fb      	strh	r3, [r7, #38]	; 0x26
	CaptureData.MagNum[2] = ((UpDataReceive[33] << 8) | UpDataReceive[32]);
 80009b0:	4b36      	ldr	r3, [pc, #216]	; (8000a8c <CaptureUpData+0x238>)
 80009b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009b6:	021b      	lsls	r3, r3, #8
 80009b8:	b21a      	sxth	r2, r3
 80009ba:	4b34      	ldr	r3, [pc, #208]	; (8000a8c <CaptureUpData+0x238>)
 80009bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009c0:	b21b      	sxth	r3, r3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	853b      	strh	r3, [r7, #40]	; 0x28
	CaptureData.DepthToBottom = ((UpDataReceive[37] << 24)
 80009ca:	4b30      	ldr	r3, [pc, #192]	; (8000a8c <CaptureUpData+0x238>)
 80009cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80009d0:	061a      	lsls	r2, r3, #24
			| (UpDataReceive[36] << 16) | (UpDataReceive[35] << 8)
 80009d2:	4b2e      	ldr	r3, [pc, #184]	; (8000a8c <CaptureUpData+0x238>)
 80009d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80009d8:	041b      	lsls	r3, r3, #16
 80009da:	431a      	orrs	r2, r3
 80009dc:	4b2b      	ldr	r3, [pc, #172]	; (8000a8c <CaptureUpData+0x238>)
 80009de:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80009e2:	021b      	lsls	r3, r3, #8
 80009e4:	4313      	orrs	r3, r2
			| UpDataReceive[34]);
 80009e6:	4a29      	ldr	r2, [pc, #164]	; (8000a8c <CaptureUpData+0x238>)
 80009e8:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 80009ec:	4313      	orrs	r3, r2
	CaptureData.DepthToBottom = ((UpDataReceive[37] << 24)
 80009ee:	633b      	str	r3, [r7, #48]	; 0x30
	CaptureData.Confidence = ((UpDataReceive[39] << 8) | UpDataReceive[38]);
 80009f0:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <CaptureUpData+0x238>)
 80009f2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80009f6:	021b      	lsls	r3, r3, #8
 80009f8:	b21a      	sxth	r2, r3
 80009fa:	4b24      	ldr	r3, [pc, #144]	; (8000a8c <CaptureUpData+0x238>)
 80009fc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000a00:	b21b      	sxth	r3, r3
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b21b      	sxth	r3, r3
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	85fb      	strh	r3, [r7, #46]	; 0x2e
	CaptureData.WaterTemperature =
			((UpDataReceive[40] << 8) | UpDataReceive[41]);
 8000a0a:	4b20      	ldr	r3, [pc, #128]	; (8000a8c <CaptureUpData+0x238>)
 8000a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000a10:	021b      	lsls	r3, r3, #8
 8000a12:	b21a      	sxth	r2, r3
 8000a14:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <CaptureUpData+0x238>)
 8000a16:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000a1a:	b21b      	sxth	r3, r3
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	b21b      	sxth	r3, r3
 8000a20:	b29b      	uxth	r3, r3
	CaptureData.WaterTemperature =
 8000a22:	857b      	strh	r3, [r7, #42]	; 0x2a
	CaptureData.WaterDepth = ((UpDataReceive[42] << 8) | UpDataReceive[43]);
 8000a24:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <CaptureUpData+0x238>)
 8000a26:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000a2a:	021b      	lsls	r3, r3, #8
 8000a2c:	b21a      	sxth	r2, r3
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <CaptureUpData+0x238>)
 8000a30:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000a34:	b21b      	sxth	r3, r3
 8000a36:	4313      	orrs	r3, r2
 8000a38:	b21b      	sxth	r3, r3
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	CaptureData.IdTest = IdTest(UpDataReceive, 1, 44, 28);
 8000a3e:	231c      	movs	r3, #28
 8000a40:	222c      	movs	r2, #44	; 0x2c
 8000a42:	2101      	movs	r1, #1
 8000a44:	4811      	ldr	r0, [pc, #68]	; (8000a8c <CaptureUpData+0x238>)
 8000a46:	f000 fa0d 	bl	8000e64 <IdTest>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	__HAL_UART_ENABLE_IT(&Down_UART, UART_IT_IDLE);
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <CaptureUpData+0x23c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <CaptureUpData+0x23c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f042 0210 	orr.w	r2, r2, #16
 8000a5e:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Down_UART, DownDataReceive, Down_UART_RXLen);
 8000a60:	222f      	movs	r2, #47	; 0x2f
 8000a62:	490c      	ldr	r1, [pc, #48]	; (8000a94 <CaptureUpData+0x240>)
 8000a64:	480a      	ldr	r0, [pc, #40]	; (8000a90 <CaptureUpData+0x23c>)
 8000a66:	f008 ff5b 	bl	8009920 <HAL_UART_Receive_DMA>

	return CaptureData;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	461d      	mov	r5, r3
 8000a6e:	f107 0408 	add.w	r4, r7, #8
 8000a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a7a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a7e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	3738      	adds	r7, #56	; 0x38
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bdb0      	pop	{r4, r5, r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	24000040 	.word	0x24000040
 8000a90:	200045ec 	.word	0x200045ec
 8000a94:	24000000 	.word	0x24000000

08000a98 <SendUpData>:
/**
 * @brief 向上位机发送数据
 * @param  SendData         待发送的数据结构体
 */
void SendUpData(UpDataDef SendData)
{
 8000a98:	b084      	sub	sp, #16
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	f107 0c08 	add.w	ip, r7, #8
 8000aa2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	UpDataSend[0] = 0x25;
 8000aa6:	4b80      	ldr	r3, [pc, #512]	; (8000ca8 <SendUpData+0x210>)
 8000aa8:	2225      	movs	r2, #37	; 0x25
 8000aaa:	701a      	strb	r2, [r3, #0]
	UpDataSend[1] = ((SendData.WaterDetect) | (SendData.CabinNum));
 8000aac:	7a7a      	ldrb	r2, [r7, #9]
 8000aae:	7a3b      	ldrb	r3, [r7, #8]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	4b7c      	ldr	r3, [pc, #496]	; (8000ca8 <SendUpData+0x210>)
 8000ab6:	705a      	strb	r2, [r3, #1]
	UpDataSend[2] = SendData.CabinTemperature >> 8;
 8000ab8:	897b      	ldrh	r3, [r7, #10]
 8000aba:	0a1b      	lsrs	r3, r3, #8
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	4b79      	ldr	r3, [pc, #484]	; (8000ca8 <SendUpData+0x210>)
 8000ac2:	709a      	strb	r2, [r3, #2]
	UpDataSend[3] = SendData.CabinTemperature;
 8000ac4:	897b      	ldrh	r3, [r7, #10]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b77      	ldr	r3, [pc, #476]	; (8000ca8 <SendUpData+0x210>)
 8000aca:	70da      	strb	r2, [r3, #3]
	UpDataSend[4] = SendData.CabinBaro >> 16;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	0c1b      	lsrs	r3, r3, #16
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4b75      	ldr	r3, [pc, #468]	; (8000ca8 <SendUpData+0x210>)
 8000ad4:	711a      	strb	r2, [r3, #4]
	UpDataSend[5] = SendData.CabinBaro >> 24;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	0e1b      	lsrs	r3, r3, #24
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b72      	ldr	r3, [pc, #456]	; (8000ca8 <SendUpData+0x210>)
 8000ade:	715a      	strb	r2, [r3, #5]
	UpDataSend[6] = SendData.CabinBaro;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	4b70      	ldr	r3, [pc, #448]	; (8000ca8 <SendUpData+0x210>)
 8000ae6:	719a      	strb	r2, [r3, #6]
	UpDataSend[7] = SendData.CabinBaro >> 8;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	0a1b      	lsrs	r3, r3, #8
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b6e      	ldr	r3, [pc, #440]	; (8000ca8 <SendUpData+0x210>)
 8000af0:	71da      	strb	r2, [r3, #7]
	UpDataSend[8] = SendData.CabinHum;
 8000af2:	8a3b      	ldrh	r3, [r7, #16]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b6c      	ldr	r3, [pc, #432]	; (8000ca8 <SendUpData+0x210>)
 8000af8:	721a      	strb	r2, [r3, #8]
	UpDataSend[9] = SendData.CabinHum >> 8;
 8000afa:	8a3b      	ldrh	r3, [r7, #16]
 8000afc:	0a1b      	lsrs	r3, r3, #8
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4b69      	ldr	r3, [pc, #420]	; (8000ca8 <SendUpData+0x210>)
 8000b04:	725a      	strb	r2, [r3, #9]
	UpDataSend[10] = SendData.AccNum[0]; //DEBUG:数据位反转
 8000b06:	8a7b      	ldrh	r3, [r7, #18]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4b67      	ldr	r3, [pc, #412]	; (8000ca8 <SendUpData+0x210>)
 8000b0c:	729a      	strb	r2, [r3, #10]
	UpDataSend[11] = SendData.AccNum[0] >> 8;
 8000b0e:	8a7b      	ldrh	r3, [r7, #18]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4b64      	ldr	r3, [pc, #400]	; (8000ca8 <SendUpData+0x210>)
 8000b18:	72da      	strb	r2, [r3, #11]
	UpDataSend[12] = SendData.AccNum[1];
 8000b1a:	8abb      	ldrh	r3, [r7, #20]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4b62      	ldr	r3, [pc, #392]	; (8000ca8 <SendUpData+0x210>)
 8000b20:	731a      	strb	r2, [r3, #12]
	UpDataSend[13] = SendData.AccNum[1] >> 8;
 8000b22:	8abb      	ldrh	r3, [r7, #20]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b5f      	ldr	r3, [pc, #380]	; (8000ca8 <SendUpData+0x210>)
 8000b2c:	735a      	strb	r2, [r3, #13]
	UpDataSend[14] = SendData.AccNum[2];
 8000b2e:	8afb      	ldrh	r3, [r7, #22]
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4b5d      	ldr	r3, [pc, #372]	; (8000ca8 <SendUpData+0x210>)
 8000b34:	739a      	strb	r2, [r3, #14]
	UpDataSend[15] = SendData.AccNum[2] >> 8;
 8000b36:	8afb      	ldrh	r3, [r7, #22]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4b5a      	ldr	r3, [pc, #360]	; (8000ca8 <SendUpData+0x210>)
 8000b40:	73da      	strb	r2, [r3, #15]
	UpDataSend[16] = SendData.RotNum[0];
 8000b42:	8b3b      	ldrh	r3, [r7, #24]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4b58      	ldr	r3, [pc, #352]	; (8000ca8 <SendUpData+0x210>)
 8000b48:	741a      	strb	r2, [r3, #16]
	UpDataSend[17] = SendData.RotNum[0] >> 8;
 8000b4a:	8b3b      	ldrh	r3, [r7, #24]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4b55      	ldr	r3, [pc, #340]	; (8000ca8 <SendUpData+0x210>)
 8000b54:	745a      	strb	r2, [r3, #17]
	UpDataSend[18] = SendData.RotNum[1];
 8000b56:	8b7b      	ldrh	r3, [r7, #26]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4b53      	ldr	r3, [pc, #332]	; (8000ca8 <SendUpData+0x210>)
 8000b5c:	749a      	strb	r2, [r3, #18]
	UpDataSend[19] = SendData.RotNum[1] >> 8;
 8000b5e:	8b7b      	ldrh	r3, [r7, #26]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4b50      	ldr	r3, [pc, #320]	; (8000ca8 <SendUpData+0x210>)
 8000b68:	74da      	strb	r2, [r3, #19]
	UpDataSend[20] = SendData.RotNum[2];
 8000b6a:	8bbb      	ldrh	r3, [r7, #28]
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4b4e      	ldr	r3, [pc, #312]	; (8000ca8 <SendUpData+0x210>)
 8000b70:	751a      	strb	r2, [r3, #20]
	UpDataSend[21] = SendData.RotNum[2] >> 8;
 8000b72:	8bbb      	ldrh	r3, [r7, #28]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4b4b      	ldr	r3, [pc, #300]	; (8000ca8 <SendUpData+0x210>)
 8000b7c:	755a      	strb	r2, [r3, #21]
	UpDataSend[22] = SendData.EulNum[0];
 8000b7e:	8bfb      	ldrh	r3, [r7, #30]
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4b49      	ldr	r3, [pc, #292]	; (8000ca8 <SendUpData+0x210>)
 8000b84:	759a      	strb	r2, [r3, #22]
	UpDataSend[23] = SendData.EulNum[0] >> 8;
 8000b86:	8bfb      	ldrh	r3, [r7, #30]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4b46      	ldr	r3, [pc, #280]	; (8000ca8 <SendUpData+0x210>)
 8000b90:	75da      	strb	r2, [r3, #23]
	UpDataSend[24] = SendData.EulNum[1];
 8000b92:	8c3b      	ldrh	r3, [r7, #32]
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4b44      	ldr	r3, [pc, #272]	; (8000ca8 <SendUpData+0x210>)
 8000b98:	761a      	strb	r2, [r3, #24]
	UpDataSend[25] = SendData.EulNum[1] >> 8;
 8000b9a:	8c3b      	ldrh	r3, [r7, #32]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b41      	ldr	r3, [pc, #260]	; (8000ca8 <SendUpData+0x210>)
 8000ba4:	765a      	strb	r2, [r3, #25]
	UpDataSend[26] = SendData.EulNum[2];
 8000ba6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b3f      	ldr	r3, [pc, #252]	; (8000ca8 <SendUpData+0x210>)
 8000bac:	769a      	strb	r2, [r3, #26]
	UpDataSend[27] = SendData.EulNum[2] >> 8;
 8000bae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4b3c      	ldr	r3, [pc, #240]	; (8000ca8 <SendUpData+0x210>)
 8000bb8:	76da      	strb	r2, [r3, #27]
	UpDataSend[28] = SendData.MagNum[0];
 8000bba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4b3a      	ldr	r3, [pc, #232]	; (8000ca8 <SendUpData+0x210>)
 8000bc0:	771a      	strb	r2, [r3, #28]
	UpDataSend[29] = SendData.MagNum[0] >> 8;
 8000bc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4b37      	ldr	r3, [pc, #220]	; (8000ca8 <SendUpData+0x210>)
 8000bcc:	775a      	strb	r2, [r3, #29]
	UpDataSend[30] = SendData.MagNum[1];
 8000bce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b35      	ldr	r3, [pc, #212]	; (8000ca8 <SendUpData+0x210>)
 8000bd4:	779a      	strb	r2, [r3, #30]
	UpDataSend[31] = SendData.MagNum[1] >> 8;
 8000bd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4b32      	ldr	r3, [pc, #200]	; (8000ca8 <SendUpData+0x210>)
 8000be0:	77da      	strb	r2, [r3, #31]
	UpDataSend[32] = SendData.MagNum[2];
 8000be2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <SendUpData+0x210>)
 8000be8:	f883 2020 	strb.w	r2, [r3, #32]
	UpDataSend[33] = SendData.MagNum[2] >> 8;
 8000bec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bee:	0a1b      	lsrs	r3, r3, #8
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	4b2c      	ldr	r3, [pc, #176]	; (8000ca8 <SendUpData+0x210>)
 8000bf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	UpDataSend[34] = SendData.DepthToBottom >> 24;
 8000bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bfc:	0e1b      	lsrs	r3, r3, #24
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <SendUpData+0x210>)
 8000c02:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	UpDataSend[35] = SendData.DepthToBottom >> 16;
 8000c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c08:	0c1b      	lsrs	r3, r3, #16
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <SendUpData+0x210>)
 8000c0e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	UpDataSend[36] = SendData.DepthToBottom >> 8;
 8000c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <SendUpData+0x210>)
 8000c1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	UpDataSend[37] = SendData.DepthToBottom;
 8000c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <SendUpData+0x210>)
 8000c24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UpDataSend[38] = SendData.Confidence >> 8;
 8000c28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c2a:	0a1b      	lsrs	r3, r3, #8
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <SendUpData+0x210>)
 8000c32:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	UpDataSend[39] = SendData.Confidence;
 8000c36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <SendUpData+0x210>)
 8000c3c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	UpDataSend[40] = SendData.WaterTemperature; //DEBUG:98 08
 8000c40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <SendUpData+0x210>)
 8000c46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	UpDataSend[41] = SendData.WaterTemperature >> 8;
 8000c4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <SendUpData+0x210>)
 8000c54:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	UpDataSend[42] = SendData.WaterDepth >> 8; //BUG:E2 40
 8000c58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c5a:	0a1b      	lsrs	r3, r3, #8
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <SendUpData+0x210>)
 8000c62:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	UpDataSend[43] = SendData.WaterDepth;
 8000c66:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <SendUpData+0x210>)
 8000c6c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	UpDataSend[44] = XorCaculate(UpDataSend, 38);
 8000c70:	2126      	movs	r1, #38	; 0x26
 8000c72:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <SendUpData+0x210>)
 8000c74:	f000 f90a 	bl	8000e8c <XorCaculate>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <SendUpData+0x210>)
 8000c7e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	UpDataSend[45] = 0xff;
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <SendUpData+0x210>)
 8000c84:	22ff      	movs	r2, #255	; 0xff
 8000c86:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	UpDataSend[46] = 0xff;
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <SendUpData+0x210>)
 8000c8c:	22ff      	movs	r2, #255	; 0xff
 8000c8e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	HAL_UART_Transmit_DMA(&Up_UART, UpDataSend, Up_UART_TXLen);
 8000c92:	222f      	movs	r2, #47	; 0x2f
 8000c94:	4904      	ldr	r1, [pc, #16]	; (8000ca8 <SendUpData+0x210>)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <SendUpData+0x214>)
 8000c98:	f008 fdc2 	bl	8009820 <HAL_UART_Transmit_DMA>
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr
 8000ca8:	24000070 	.word	0x24000070
 8000cac:	200044d0 	.word	0x200044d0

08000cb0 <SpecialMovePID>:
 * @param  SetValue         目标值
 * @param  ActualValue      当前值
 * @return u16 位置PID数据
 */
u16 SpecialMovePID(u8 ModeType, u16 SetValue, u16 ActualValue)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b08d      	sub	sp, #52	; 0x34
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	80bb      	strh	r3, [r7, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	807b      	strh	r3, [r7, #2]
	//累计积分位置
	static float LocSum;
	//数据清空标志位
	static u8 PIDData = 0;

	if (ModeType == 4) //定深模式
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	2b04      	cmp	r3, #4
 8000cc6:	d151      	bne.n	8000d6c <SpecialMovePID+0xbc>
	{
		PIDData = 0;
 8000cc8:	4b5d      	ldr	r3, [pc, #372]	; (8000e40 <SpecialMovePID+0x190>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
		u16 PIDLoc;
		Ek = (float) (SetValue - ActualValue);
 8000cce:	88ba      	ldrh	r2, [r7, #4]
 8000cd0:	887b      	ldrh	r3, [r7, #2]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	ee07 3a90 	vmov	s15, r3
 8000cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cdc:	4b59      	ldr	r3, [pc, #356]	; (8000e44 <SpecialMovePID+0x194>)
 8000cde:	edc3 7a00 	vstr	s15, [r3]
		LocSum += Ek;
 8000ce2:	4b59      	ldr	r3, [pc, #356]	; (8000e48 <SpecialMovePID+0x198>)
 8000ce4:	ed93 7a00 	vldr	s14, [r3]
 8000ce8:	4b56      	ldr	r3, [pc, #344]	; (8000e44 <SpecialMovePID+0x194>)
 8000cea:	edd3 7a00 	vldr	s15, [r3]
 8000cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cf2:	4b55      	ldr	r3, [pc, #340]	; (8000e48 <SpecialMovePID+0x198>)
 8000cf4:	edc3 7a00 	vstr	s15, [r3]
		PIDLoc =
				(u16) (1500
						+ BASICCTRL_RANGE(
 8000cf8:	4b52      	ldr	r3, [pc, #328]	; (8000e44 <SpecialMovePID+0x194>)
 8000cfa:	edd3 7a00 	vldr	s15, [r3]
 8000cfe:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8000e4c <SpecialMovePID+0x19c>
 8000d02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d06:	4b50      	ldr	r3, [pc, #320]	; (8000e48 <SpecialMovePID+0x198>)
 8000d08:	edd3 7a00 	vldr	s15, [r3]
 8000d0c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d14:	4b4e      	ldr	r3, [pc, #312]	; (8000e50 <SpecialMovePID+0x1a0>)
 8000d16:	edd3 6a00 	vldr	s13, [r3]
 8000d1a:	4b4a      	ldr	r3, [pc, #296]	; (8000e44 <SpecialMovePID+0x194>)
 8000d1c:	edd3 7a00 	vldr	s15, [r3]
 8000d20:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000d24:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8000e54 <SpecialMovePID+0x1a4>
 8000d28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d34:	ee17 3a90 	vmov	r3, s15
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	847b      	strh	r3, [r7, #34]	; 0x22
 8000d3c:	4b46      	ldr	r3, [pc, #280]	; (8000e58 <SpecialMovePID+0x1a8>)
 8000d3e:	61fb      	str	r3, [r7, #28]
 8000d40:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000d44:	461a      	mov	r2, r3
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	bfb8      	it	lt
 8000d4c:	4613      	movlt	r3, r2
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
 8000d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	bfa8      	it	ge
 8000d5e:	4613      	movge	r3, r2
				(u16) (1500
 8000d60:	b29b      	uxth	r3, r3
		PIDLoc =
 8000d62:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000d66:	85bb      	strh	r3, [r7, #44]	; 0x2c
								(int16_t)(PID_D_Kp * Ek + (PID_D_Ki * LocSum) + PID_D_Kd * (Ek1 - Ek)),
								-1000, 1000));
		return PIDLoc;
 8000d68:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000d6a:	e062      	b.n	8000e32 <SpecialMovePID+0x182>
	}
	else if (ModeType == 2) //定向模式
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d14f      	bne.n	8000e12 <SpecialMovePID+0x162>
	{
		PIDData = 0;
 8000d72:	4b33      	ldr	r3, [pc, #204]	; (8000e40 <SpecialMovePID+0x190>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
		u16 PIDLoc;
		Ek = (float) (SetValue - ActualValue);
 8000d78:	88ba      	ldrh	r2, [r7, #4]
 8000d7a:	887b      	ldrh	r3, [r7, #2]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	ee07 3a90 	vmov	s15, r3
 8000d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d86:	4b2f      	ldr	r3, [pc, #188]	; (8000e44 <SpecialMovePID+0x194>)
 8000d88:	edc3 7a00 	vstr	s15, [r3]
		LocSum += Ek;
 8000d8c:	4b2e      	ldr	r3, [pc, #184]	; (8000e48 <SpecialMovePID+0x198>)
 8000d8e:	ed93 7a00 	vldr	s14, [r3]
 8000d92:	4b2c      	ldr	r3, [pc, #176]	; (8000e44 <SpecialMovePID+0x194>)
 8000d94:	edd3 7a00 	vldr	s15, [r3]
 8000d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d9c:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <SpecialMovePID+0x198>)
 8000d9e:	edc3 7a00 	vstr	s15, [r3]
		PIDLoc =
				(u16) (1500
						+ BASICCTRL_RANGE(
 8000da2:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <SpecialMovePID+0x194>)
 8000da4:	edd3 7a00 	vldr	s15, [r3]
 8000da8:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000e5c <SpecialMovePID+0x1ac>
 8000dac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000db0:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <SpecialMovePID+0x198>)
 8000db2:	edd3 7a00 	vldr	s15, [r3]
 8000db6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dba:	4b25      	ldr	r3, [pc, #148]	; (8000e50 <SpecialMovePID+0x1a0>)
 8000dbc:	edd3 6a00 	vldr	s13, [r3]
 8000dc0:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <SpecialMovePID+0x194>)
 8000dc2:	edd3 7a00 	vldr	s15, [r3]
 8000dc6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000dca:	eddf 6a25 	vldr	s13, [pc, #148]	; 8000e60 <SpecialMovePID+0x1b0>
 8000dce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dda:	ee17 3a90 	vmov	r3, s15
 8000dde:	b21b      	sxth	r3, r3
 8000de0:	827b      	strh	r3, [r7, #18]
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <SpecialMovePID+0x1a8>)
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000dea:	461a      	mov	r2, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4293      	cmp	r3, r2
 8000df0:	bfb8      	it	lt
 8000df2:	4613      	movlt	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
 8000df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	697a      	ldr	r2, [r7, #20]
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	4293      	cmp	r3, r2
 8000e02:	bfa8      	it	ge
 8000e04:	4613      	movge	r3, r2
				(u16) (1500
 8000e06:	b29b      	uxth	r3, r3
		PIDLoc =
 8000e08:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8000e0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
								(int16_t)(PID_O_Kp * Ek + (PID_O_Ki * LocSum) + PID_O_Kd * (Ek1 - Ek)),
								-1000, 1000));
		return PIDLoc;
 8000e0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e10:	e00f      	b.n	8000e32 <SpecialMovePID+0x182>
	}
	else
	{
		if (!PIDData)
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <SpecialMovePID+0x190>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d10a      	bne.n	8000e30 <SpecialMovePID+0x180>
		{
			PIDData = 1;
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <SpecialMovePID+0x190>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
			Ek = 0;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <SpecialMovePID+0x194>)
 8000e22:	f04f 0200 	mov.w	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
			LocSum = 0;
 8000e28:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <SpecialMovePID+0x198>)
 8000e2a:	f04f 0200 	mov.w	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
		}
		return 0;
 8000e30:	2300      	movs	r3, #0
	}
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3734      	adds	r7, #52	; 0x34
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000030 	.word	0x20000030
 8000e44:	20000034 	.word	0x20000034
 8000e48:	20000038 	.word	0x20000038
 8000e4c:	43480000 	.word	0x43480000
 8000e50:	2000003c 	.word	0x2000003c
 8000e54:	43960000 	.word	0x43960000
 8000e58:	fffffc18 	.word	0xfffffc18
 8000e5c:	42c80000 	.word	0x42c80000
 8000e60:	43160000 	.word	0x43160000

08000e64 <IdTest>:
 * @param  SendUpLength     上传数据长度
 * @param  SendDownLength   下传指令长度
 * @return u8 正确为1；错误为0，如果不开启奇偶校验默认为1
 */
static u8 IdTest(u8 *String, u8 Format, u8 SendUpLength, u8 SendDownLength)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	4608      	mov	r0, r1
 8000e6e:	4611      	mov	r1, r2
 8000e70:	461a      	mov	r2, r3
 8000e72:	4603      	mov	r3, r0
 8000e74:	70fb      	strb	r3, [r7, #3]
 8000e76:	460b      	mov	r3, r1
 8000e78:	70bb      	strb	r3, [r7, #2]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	707b      	strb	r3, [r7, #1]
			return 0;
		}
	}
	return 1;
#else
	return 1; //不开启奇偶校验时默认成功
 8000e7e:	2301      	movs	r3, #1
#endif
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <XorCaculate>:
 * @param  CacString        待校验数据
 * @param  CacStringSize    待校验数据长度
 * @return u8 异或运算结果，如果不开启数据校验则默认返回0
 */
static u8 XorCaculate(u8 *CacString, u8 CacStringSize)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	460b      	mov	r3, r1
 8000e96:	70fb      	strb	r3, [r7, #3]
	{
		CacResult ^= CacString[i];
	}
	return CacResult;
#else
	return 0;
 8000e98:	2300      	movs	r3, #0
#endif
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <InitGY39>:

/**
 * @brief GY39温湿度大气压传感器初始化
 */
void InitGY39(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	GY39Send[0] = 0xa5;
 8000eac:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <InitGY39+0x24>)
 8000eae:	22a5      	movs	r2, #165	; 0xa5
 8000eb0:	701a      	strb	r2, [r3, #0]
	GY39Send[1] = 0x82;
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <InitGY39+0x24>)
 8000eb4:	2282      	movs	r2, #130	; 0x82
 8000eb6:	705a      	strb	r2, [r3, #1]
	GY39Send[2] = 0x27;
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <InitGY39+0x24>)
 8000eba:	2227      	movs	r2, #39	; 0x27
 8000ebc:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_DMA(&GY39_UART, GY39Send, GY39_UART_TXLen);
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	4902      	ldr	r1, [pc, #8]	; (8000ecc <InitGY39+0x24>)
 8000ec2:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <InitGY39+0x28>)
 8000ec4:	f008 fcac 	bl	8009820 <HAL_UART_Transmit_DMA>
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	240000cc 	.word	0x240000cc
 8000ed0:	20004718 	.word	0x20004718

08000ed4 <ReceiveGY39>:
/**
 * @brief 接收GY39温湿度大气压传感器数据
 * @return GY39Data GY39传感器数据接收结构体
 */
GY39Data ReceiveGY39(void)
{
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	GY39Data RevGY39;

	RevGY39.Temperature = ((GY39Receive[3] << 8) | GY39Receive[2]);
 8000edc:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <ReceiveGY39+0x84>)
 8000ede:	78db      	ldrb	r3, [r3, #3]
 8000ee0:	021b      	lsls	r3, r3, #8
 8000ee2:	b21a      	sxth	r2, r3
 8000ee4:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <ReceiveGY39+0x84>)
 8000ee6:	789b      	ldrb	r3, [r3, #2]
 8000ee8:	b21b      	sxth	r3, r3
 8000eea:	4313      	orrs	r3, r2
 8000eec:	b21b      	sxth	r3, r3
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	81bb      	strh	r3, [r7, #12]
	RevGY39.Baro = ((GY39Receive[7] << 24) | (GY39Receive[6] << 16)
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <ReceiveGY39+0x84>)
 8000ef4:	79db      	ldrb	r3, [r3, #7]
 8000ef6:	061a      	lsls	r2, r3, #24
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <ReceiveGY39+0x84>)
 8000efa:	799b      	ldrb	r3, [r3, #6]
 8000efc:	041b      	lsls	r3, r3, #16
 8000efe:	431a      	orrs	r2, r3
			| (GY39Receive[5] << 8) | GY39Receive[4]);
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <ReceiveGY39+0x84>)
 8000f02:	795b      	ldrb	r3, [r3, #5]
 8000f04:	021b      	lsls	r3, r3, #8
 8000f06:	4313      	orrs	r3, r2
 8000f08:	4a13      	ldr	r2, [pc, #76]	; (8000f58 <ReceiveGY39+0x84>)
 8000f0a:	7912      	ldrb	r2, [r2, #4]
 8000f0c:	4313      	orrs	r3, r2
	RevGY39.Baro = ((GY39Receive[7] << 24) | (GY39Receive[6] << 16)
 8000f0e:	613b      	str	r3, [r7, #16]
	RevGY39.Hum = ((GY39Receive[9] << 8) | GY39Receive[8]);
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <ReceiveGY39+0x84>)
 8000f12:	7a5b      	ldrb	r3, [r3, #9]
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	b21a      	sxth	r2, r3
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <ReceiveGY39+0x84>)
 8000f1a:	7a1b      	ldrb	r3, [r3, #8]
 8000f1c:	b21b      	sxth	r3, r3
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	82bb      	strh	r3, [r7, #20]

	__HAL_UART_ENABLE_IT(&GY39_UART, UART_IT_IDLE);
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <ReceiveGY39+0x88>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <ReceiveGY39+0x88>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f042 0210 	orr.w	r2, r2, #16
 8000f34:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&GY39_UART, GY39Receive, GY39_UART_RXLen);
 8000f36:	2212      	movs	r2, #18
 8000f38:	4907      	ldr	r1, [pc, #28]	; (8000f58 <ReceiveGY39+0x84>)
 8000f3a:	4808      	ldr	r0, [pc, #32]	; (8000f5c <ReceiveGY39+0x88>)
 8000f3c:	f008 fcf0 	bl	8009920 <HAL_UART_Receive_DMA>

	return RevGY39;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	461c      	mov	r4, r3
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	371c      	adds	r7, #28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd90      	pop	{r4, r7, pc}
 8000f58:	240000d0 	.word	0x240000d0
 8000f5c:	20004718 	.word	0x20004718

08000f60 <ReceiveWT931>:
/**
 * @brief 接收WT931九轴传感器数据
 * @return WT931Data WT931九轴传感器数据结构体
 */
WT931Data ReceiveWT931(void)
{
 8000f60:	b5b0      	push	{r4, r5, r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	WT931Data RevWT931;

	RevWT931.AccNum[0] = ((WT931Receive[3] << 8) | WT931Receive[2]);
 8000f68:	4b53      	ldr	r3, [pc, #332]	; (80010b8 <ReceiveWT931+0x158>)
 8000f6a:	78db      	ldrb	r3, [r3, #3]
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	4b51      	ldr	r3, [pc, #324]	; (80010b8 <ReceiveWT931+0x158>)
 8000f72:	789b      	ldrb	r3, [r3, #2]
 8000f74:	b21b      	sxth	r3, r3
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	813b      	strh	r3, [r7, #8]
	RevWT931.AccNum[1] = ((WT931Receive[5] << 8) | WT931Receive[4]);
 8000f7e:	4b4e      	ldr	r3, [pc, #312]	; (80010b8 <ReceiveWT931+0x158>)
 8000f80:	795b      	ldrb	r3, [r3, #5]
 8000f82:	021b      	lsls	r3, r3, #8
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	4b4c      	ldr	r3, [pc, #304]	; (80010b8 <ReceiveWT931+0x158>)
 8000f88:	791b      	ldrb	r3, [r3, #4]
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	817b      	strh	r3, [r7, #10]
	RevWT931.AccNum[2] = ((WT931Receive[7] << 8) | WT931Receive[6]);
 8000f94:	4b48      	ldr	r3, [pc, #288]	; (80010b8 <ReceiveWT931+0x158>)
 8000f96:	79db      	ldrb	r3, [r3, #7]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	b21a      	sxth	r2, r3
 8000f9c:	4b46      	ldr	r3, [pc, #280]	; (80010b8 <ReceiveWT931+0x158>)
 8000f9e:	799b      	ldrb	r3, [r3, #6]
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	b21b      	sxth	r3, r3
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	81bb      	strh	r3, [r7, #12]
	RevWT931.RotNum[0] = ((WT931Receive[14] << 8) | WT931Receive[13]);
 8000faa:	4b43      	ldr	r3, [pc, #268]	; (80010b8 <ReceiveWT931+0x158>)
 8000fac:	7b9b      	ldrb	r3, [r3, #14]
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	b21a      	sxth	r2, r3
 8000fb2:	4b41      	ldr	r3, [pc, #260]	; (80010b8 <ReceiveWT931+0x158>)
 8000fb4:	7b5b      	ldrb	r3, [r3, #13]
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	81fb      	strh	r3, [r7, #14]
	RevWT931.RotNum[1] = ((WT931Receive[16] << 8) | WT931Receive[15]);
 8000fc0:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <ReceiveWT931+0x158>)
 8000fc2:	7c1b      	ldrb	r3, [r3, #16]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	4b3b      	ldr	r3, [pc, #236]	; (80010b8 <ReceiveWT931+0x158>)
 8000fca:	7bdb      	ldrb	r3, [r3, #15]
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	823b      	strh	r3, [r7, #16]
	RevWT931.RotNum[2] = ((WT931Receive[18] << 8) | WT931Receive[17]);
 8000fd6:	4b38      	ldr	r3, [pc, #224]	; (80010b8 <ReceiveWT931+0x158>)
 8000fd8:	7c9b      	ldrb	r3, [r3, #18]
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	b21a      	sxth	r2, r3
 8000fde:	4b36      	ldr	r3, [pc, #216]	; (80010b8 <ReceiveWT931+0x158>)
 8000fe0:	7c5b      	ldrb	r3, [r3, #17]
 8000fe2:	b21b      	sxth	r3, r3
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	b21b      	sxth	r3, r3
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	827b      	strh	r3, [r7, #18]
	RevWT931.EulNum[0] = ((WT931Receive[25] << 8) | WT931Receive[24]);
 8000fec:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <ReceiveWT931+0x158>)
 8000fee:	7e5b      	ldrb	r3, [r3, #25]
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	4b30      	ldr	r3, [pc, #192]	; (80010b8 <ReceiveWT931+0x158>)
 8000ff6:	7e1b      	ldrb	r3, [r3, #24]
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	82bb      	strh	r3, [r7, #20]
	RevWT931.EulNum[1] = ((WT931Receive[27] << 8) | WT931Receive[26]);
 8001002:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <ReceiveWT931+0x158>)
 8001004:	7edb      	ldrb	r3, [r3, #27]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	b21a      	sxth	r2, r3
 800100a:	4b2b      	ldr	r3, [pc, #172]	; (80010b8 <ReceiveWT931+0x158>)
 800100c:	7e9b      	ldrb	r3, [r3, #26]
 800100e:	b21b      	sxth	r3, r3
 8001010:	4313      	orrs	r3, r2
 8001012:	b21b      	sxth	r3, r3
 8001014:	b29b      	uxth	r3, r3
 8001016:	82fb      	strh	r3, [r7, #22]
	RevWT931.EulNum[2] = ((WT931Receive[29] << 8) | WT931Receive[28]);
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <ReceiveWT931+0x158>)
 800101a:	7f5b      	ldrb	r3, [r3, #29]
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	b21a      	sxth	r2, r3
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <ReceiveWT931+0x158>)
 8001022:	7f1b      	ldrb	r3, [r3, #28]
 8001024:	b21b      	sxth	r3, r3
 8001026:	4313      	orrs	r3, r2
 8001028:	b21b      	sxth	r3, r3
 800102a:	b29b      	uxth	r3, r3
 800102c:	833b      	strh	r3, [r7, #24]
	RevWT931.MagNum[0] = ((WT931Receive[36] << 8) | WT931Receive[35]);
 800102e:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <ReceiveWT931+0x158>)
 8001030:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	b21a      	sxth	r2, r3
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <ReceiveWT931+0x158>)
 800103a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800103e:	b21b      	sxth	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b21b      	sxth	r3, r3
 8001044:	b29b      	uxth	r3, r3
 8001046:	837b      	strh	r3, [r7, #26]
	RevWT931.MagNum[1] = ((WT931Receive[38] << 8) | WT931Receive[37]);
 8001048:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <ReceiveWT931+0x158>)
 800104a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b21a      	sxth	r2, r3
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <ReceiveWT931+0x158>)
 8001054:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001058:	b21b      	sxth	r3, r3
 800105a:	4313      	orrs	r3, r2
 800105c:	b21b      	sxth	r3, r3
 800105e:	b29b      	uxth	r3, r3
 8001060:	83bb      	strh	r3, [r7, #28]
	RevWT931.MagNum[2] = ((WT931Receive[40] << 8) | WT931Receive[39]);
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <ReceiveWT931+0x158>)
 8001064:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	b21a      	sxth	r2, r3
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <ReceiveWT931+0x158>)
 800106e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001072:	b21b      	sxth	r3, r3
 8001074:	4313      	orrs	r3, r2
 8001076:	b21b      	sxth	r3, r3
 8001078:	b29b      	uxth	r3, r3
 800107a:	83fb      	strh	r3, [r7, #30]

	__HAL_UART_ENABLE_IT(&WT931_UART, UART_IT_IDLE);
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <ReceiveWT931+0x15c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <ReceiveWT931+0x15c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f042 0210 	orr.w	r2, r2, #16
 800108a:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&WT931_UART, WT931Receive, WT931_UART_RXLen);
 800108c:	222c      	movs	r2, #44	; 0x2c
 800108e:	490a      	ldr	r1, [pc, #40]	; (80010b8 <ReceiveWT931+0x158>)
 8001090:	480a      	ldr	r0, [pc, #40]	; (80010bc <ReceiveWT931+0x15c>)
 8001092:	f008 fc45 	bl	8009920 <HAL_UART_Receive_DMA>

	return RevWT931;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	461d      	mov	r5, r3
 800109a:	f107 0408 	add.w	r4, r7, #8
 800109e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010a0:	6028      	str	r0, [r5, #0]
 80010a2:	6069      	str	r1, [r5, #4]
 80010a4:	60aa      	str	r2, [r5, #8]
 80010a6:	60eb      	str	r3, [r5, #12]
 80010a8:	cc03      	ldmia	r4!, {r0, r1}
 80010aa:	6128      	str	r0, [r5, #16]
 80010ac:	6169      	str	r1, [r5, #20]
}
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	3720      	adds	r7, #32
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bdb0      	pop	{r4, r5, r7, pc}
 80010b6:	bf00      	nop
 80010b8:	240000a0 	.word	0x240000a0
 80010bc:	2000416c 	.word	0x2000416c

080010c0 <ReceiveDeep>:
/**
 * @brief 接收水深水温传感器数据
 * @return DeepData 水深水温传感器数据结构体
 */
DeepData ReceiveDeep(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
	DeepData RevDeep;

	RevDeep.WaterDepth = ((DeepReceive[1] << 8) | DeepReceive[0]);
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <ReceiveDeep+0x68>)
 80010c8:	785b      	ldrb	r3, [r3, #1]
 80010ca:	021b      	lsls	r3, r3, #8
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <ReceiveDeep+0x68>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b21b      	sxth	r3, r3
 80010d8:	b29b      	uxth	r3, r3
 80010da:	807b      	strh	r3, [r7, #2]
	RevDeep.WaterTemperature = ((DeepReceive[3] << 8) | DeepReceive[2]);
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <ReceiveDeep+0x68>)
 80010de:	78db      	ldrb	r3, [r3, #3]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <ReceiveDeep+0x68>)
 80010e6:	789b      	ldrb	r3, [r3, #2]
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	803b      	strh	r3, [r7, #0]

	__HAL_UART_ENABLE_IT(&Deep_UART, UART_IT_IDLE);
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <ReceiveDeep+0x6c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <ReceiveDeep+0x6c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f042 0210 	orr.w	r2, r2, #16
 8001100:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&Deep_UART, DeepReceive, Deep_UART_RXLen);
 8001102:	2204      	movs	r2, #4
 8001104:	4908      	ldr	r1, [pc, #32]	; (8001128 <ReceiveDeep+0x68>)
 8001106:	4809      	ldr	r0, [pc, #36]	; (800112c <ReceiveDeep+0x6c>)
 8001108:	f008 fc0a 	bl	8009920 <HAL_UART_Receive_DMA>
	return RevDeep;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	2300      	movs	r3, #0
 8001112:	88ba      	ldrh	r2, [r7, #4]
 8001114:	f362 030f 	bfi	r3, r2, #0, #16
 8001118:	88fa      	ldrh	r2, [r7, #6]
 800111a:	f362 431f 	bfi	r3, r2, #16, #16
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	240000e4 	.word	0x240000e4
 800112c:	20004680 	.word	0x20004680

08001130 <InitP30>:

/**
 * @brief 声呐传感器初始化
 */
void InitP30(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	//42 52 02 00 78 05 00 00 BB 04 D2 01
	P30Send[0] = 0x42;
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <InitP30+0x5c>)
 8001136:	2242      	movs	r2, #66	; 0x42
 8001138:	701a      	strb	r2, [r3, #0]
	P30Send[1] = 0x52;
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <InitP30+0x5c>)
 800113c:	2252      	movs	r2, #82	; 0x52
 800113e:	705a      	strb	r2, [r3, #1]
	P30Send[2] = 0x02;
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <InitP30+0x5c>)
 8001142:	2202      	movs	r2, #2
 8001144:	709a      	strb	r2, [r3, #2]
	P30Send[3] = 0x00;
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <InitP30+0x5c>)
 8001148:	2200      	movs	r2, #0
 800114a:	70da      	strb	r2, [r3, #3]
	P30Send[4] = 0x05;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <InitP30+0x5c>)
 800114e:	2205      	movs	r2, #5
 8001150:	711a      	strb	r2, [r3, #4]
	P30Send[5] = 0x00;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <InitP30+0x5c>)
 8001154:	2200      	movs	r2, #0
 8001156:	715a      	strb	r2, [r3, #5]
	P30Send[6] = 0x00;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <InitP30+0x5c>)
 800115a:	2200      	movs	r2, #0
 800115c:	719a      	strb	r2, [r3, #6]
	P30Send[7] = 0x00;
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <InitP30+0x5c>)
 8001160:	2200      	movs	r2, #0
 8001162:	71da      	strb	r2, [r3, #7]
	P30Send[8] = 0xBB;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <InitP30+0x5c>)
 8001166:	22bb      	movs	r2, #187	; 0xbb
 8001168:	721a      	strb	r2, [r3, #8]
	P30Send[9] = 0x04;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <InitP30+0x5c>)
 800116c:	2204      	movs	r2, #4
 800116e:	725a      	strb	r2, [r3, #9]
	P30Send[10] = 0xD2;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <InitP30+0x5c>)
 8001172:	22d2      	movs	r2, #210	; 0xd2
 8001174:	729a      	strb	r2, [r3, #10]
	P30Send[11] = 0x01;
 8001176:	4b05      	ldr	r3, [pc, #20]	; (800118c <InitP30+0x5c>)
 8001178:	2201      	movs	r2, #1
 800117a:	72da      	strb	r2, [r3, #11]

	HAL_UART_Transmit_DMA(&GP30_UART, P30Send, P30_UART_TXLen);
 800117c:	220c      	movs	r2, #12
 800117e:	4903      	ldr	r1, [pc, #12]	; (800118c <InitP30+0x5c>)
 8001180:	4803      	ldr	r0, [pc, #12]	; (8001190 <InitP30+0x60>)
 8001182:	f008 fb4d 	bl	8009820 <HAL_UART_Transmit_DMA>
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	240000e8 	.word	0x240000e8
 8001190:	200042d4 	.word	0x200042d4

08001194 <ReceiveP30>:
/**
 * @brief 接收声呐传感器数据
 * @return P30Data 声呐传感器数据结构体
 */
P30Data ReceiveP30(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	P30Data RevP30;

	uint8_t FrameState = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	77fb      	strb	r3, [r7, #31]
	uint8_t Bytenum = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	77bb      	strb	r3, [r7, #30]
	uint8_t CheckSum = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	777b      	strb	r3, [r7, #29]
	uint8_t datahex[11];

	for (uint8_t i = 0; i < 33; i++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	773b      	strb	r3, [r7, #28]
 80011ac:	e069      	b.n	8001282 <ReceiveP30+0xee>
	{
		if (FrameState == 0)
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d121      	bne.n	80011f8 <ReceiveP30+0x64>
		{
			if ((P30Receive[i] == 0x42) && (Bytenum == 0))
 80011b4:	7f3b      	ldrb	r3, [r7, #28]
 80011b6:	4a41      	ldr	r2, [pc, #260]	; (80012bc <ReceiveP30+0x128>)
 80011b8:	5cd3      	ldrb	r3, [r2, r3]
 80011ba:	2b42      	cmp	r3, #66	; 0x42
 80011bc:	d109      	bne.n	80011d2 <ReceiveP30+0x3e>
 80011be:	7fbb      	ldrb	r3, [r7, #30]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d106      	bne.n	80011d2 <ReceiveP30+0x3e>
			{
				CheckSum = P30Receive[i];
 80011c4:	7f3b      	ldrb	r3, [r7, #28]
 80011c6:	4a3d      	ldr	r2, [pc, #244]	; (80012bc <ReceiveP30+0x128>)
 80011c8:	5cd3      	ldrb	r3, [r2, r3]
 80011ca:	777b      	strb	r3, [r7, #29]
				Bytenum = 1;
 80011cc:	2301      	movs	r3, #1
 80011ce:	77bb      	strb	r3, [r7, #30]
				continue;
 80011d0:	e054      	b.n	800127c <ReceiveP30+0xe8>
			}
			else if ((P30Receive[i] == 0x52) && (Bytenum == 1))
 80011d2:	7f3b      	ldrb	r3, [r7, #28]
 80011d4:	4a39      	ldr	r2, [pc, #228]	; (80012bc <ReceiveP30+0x128>)
 80011d6:	5cd3      	ldrb	r3, [r2, r3]
 80011d8:	2b52      	cmp	r3, #82	; 0x52
 80011da:	d14f      	bne.n	800127c <ReceiveP30+0xe8>
 80011dc:	7fbb      	ldrb	r3, [r7, #30]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d14c      	bne.n	800127c <ReceiveP30+0xe8>
			{
				CheckSum += P30Receive[i];
 80011e2:	7f3b      	ldrb	r3, [r7, #28]
 80011e4:	4a35      	ldr	r2, [pc, #212]	; (80012bc <ReceiveP30+0x128>)
 80011e6:	5cd2      	ldrb	r2, [r2, r3]
 80011e8:	7f7b      	ldrb	r3, [r7, #29]
 80011ea:	4413      	add	r3, r2
 80011ec:	777b      	strb	r3, [r7, #29]
				Bytenum = 2;
 80011ee:	2302      	movs	r3, #2
 80011f0:	77bb      	strb	r3, [r7, #30]
				FrameState = 1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	77fb      	strb	r3, [r7, #31]
				continue;
 80011f6:	e041      	b.n	800127c <ReceiveP30+0xe8>
			}
		}
		else if (FrameState == 1)
 80011f8:	7ffb      	ldrb	r3, [r7, #31]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d13e      	bne.n	800127c <ReceiveP30+0xe8>
		{
			if (Bytenum < 13)
 80011fe:	7fbb      	ldrb	r3, [r7, #30]
 8001200:	2b0c      	cmp	r3, #12
 8001202:	d813      	bhi.n	800122c <ReceiveP30+0x98>
			{
				datahex[Bytenum - 2] = P30Receive[i];
 8001204:	7f3a      	ldrb	r2, [r7, #28]
 8001206:	7fbb      	ldrb	r3, [r7, #30]
 8001208:	3b02      	subs	r3, #2
 800120a:	492c      	ldr	r1, [pc, #176]	; (80012bc <ReceiveP30+0x128>)
 800120c:	5c8a      	ldrb	r2, [r1, r2]
 800120e:	f107 0120 	add.w	r1, r7, #32
 8001212:	440b      	add	r3, r1
 8001214:	f803 2c18 	strb.w	r2, [r3, #-24]
				CheckSum += P30Receive[i];
 8001218:	7f3b      	ldrb	r3, [r7, #28]
 800121a:	4a28      	ldr	r2, [pc, #160]	; (80012bc <ReceiveP30+0x128>)
 800121c:	5cd2      	ldrb	r2, [r2, r3]
 800121e:	7f7b      	ldrb	r3, [r7, #29]
 8001220:	4413      	add	r3, r2
 8001222:	777b      	strb	r3, [r7, #29]
				Bytenum++;
 8001224:	7fbb      	ldrb	r3, [r7, #30]
 8001226:	3301      	adds	r3, #1
 8001228:	77bb      	strb	r3, [r7, #30]
 800122a:	e027      	b.n	800127c <ReceiveP30+0xe8>
			}
			else
			{
				if (P30Receive[i] == (CheckSum & 0xFF))
 800122c:	7f3b      	ldrb	r3, [r7, #28]
 800122e:	4a23      	ldr	r2, [pc, #140]	; (80012bc <ReceiveP30+0x128>)
 8001230:	5cd3      	ldrb	r3, [r2, r3]
 8001232:	7f7a      	ldrb	r2, [r7, #29]
 8001234:	429a      	cmp	r2, r3
 8001236:	d11b      	bne.n	8001270 <ReceiveP30+0xdc>
				{
					RevP30.Confidence = datahex[10];
 8001238:	7cbb      	ldrb	r3, [r7, #18]
 800123a:	b29b      	uxth	r3, r3
 800123c:	833b      	strh	r3, [r7, #24]
					RevP30.DepthToBottom = (float) ((datahex[6] | datahex[7]
 800123e:	7bba      	ldrb	r2, [r7, #14]
 8001240:	7bfb      	ldrb	r3, [r7, #15]
							| datahex[8] | datahex[9]) / 1000);
 8001242:	4313      	orrs	r3, r2
 8001244:	b2da      	uxtb	r2, r3
 8001246:	7c3b      	ldrb	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	b2da      	uxtb	r2, r3
 800124c:	7c7b      	ldrb	r3, [r7, #17]
 800124e:	4313      	orrs	r3, r2
 8001250:	b2db      	uxtb	r3, r3
 8001252:	4a1b      	ldr	r2, [pc, #108]	; (80012c0 <ReceiveP30+0x12c>)
 8001254:	fb82 1203 	smull	r1, r2, r2, r3
 8001258:	1192      	asrs	r2, r2, #6
 800125a:	17db      	asrs	r3, r3, #31
 800125c:	1ad3      	subs	r3, r2, r3
					RevP30.DepthToBottom = (float) ((datahex[6] | datahex[7]
 800125e:	ee07 3a90 	vmov	s15, r3
 8001262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800126a:	ee17 3a90 	vmov	r3, s15
 800126e:	617b      	str	r3, [r7, #20]
				}
				CheckSum = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	777b      	strb	r3, [r7, #29]
				Bytenum = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	77bb      	strb	r3, [r7, #30]
				FrameState = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	77fb      	strb	r3, [r7, #31]
	for (uint8_t i = 0; i < 33; i++)
 800127c:	7f3b      	ldrb	r3, [r7, #28]
 800127e:	3301      	adds	r3, #1
 8001280:	773b      	strb	r3, [r7, #28]
 8001282:	7f3b      	ldrb	r3, [r7, #28]
 8001284:	2b20      	cmp	r3, #32
 8001286:	d992      	bls.n	80011ae <ReceiveP30+0x1a>
			}
		}
	}

	__HAL_UART_ENABLE_IT(&GP30_UART, UART_IT_IDLE);
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <ReceiveP30+0x130>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <ReceiveP30+0x130>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 0210 	orr.w	r2, r2, #16
 8001296:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&GP30_UART, P30Receive, P30_UART_RXLen);
 8001298:	2221      	movs	r2, #33	; 0x21
 800129a:	4908      	ldr	r1, [pc, #32]	; (80012bc <ReceiveP30+0x128>)
 800129c:	4809      	ldr	r0, [pc, #36]	; (80012c4 <ReceiveP30+0x130>)
 800129e:	f008 fb3f 	bl	8009920 <HAL_UART_Receive_DMA>

	return RevP30;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	461a      	mov	r2, r3
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012ae:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	3720      	adds	r7, #32
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	240000f4 	.word	0x240000f4
 80012c0:	10624dd3 	.word	0x10624dd3
 80012c4:	200042d4 	.word	0x200042d4

080012c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80012d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <vApplicationGetIdleTaskMemory+0x30>)
 80012de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000040 	.word	0x20000040
 80012f8:	20000094 	.word	0x20000094

080012fc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80012fc:	b5b0      	push	{r4, r5, r7, lr}
 80012fe:	b0b8      	sub	sp, #224	; 0xe0
 8001300:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001302:	f002 f9ff 	bl	8003704 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001306:	f000 f975 	bl	80015f4 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 800130a:	f000 f9f9 	bl	8001700 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800130e:	f000 fc89 	bl	8001c24 <MX_GPIO_Init>
	MX_DMA_Init();
 8001312:	f000 fc07 	bl	8001b24 <MX_DMA_Init>
	MX_IWDG1_Init();
 8001316:	f000 fa1f 	bl	8001758 <MX_IWDG1_Init>
	MX_USART1_UART_Init();
 800131a:	f000 fb1f 	bl	800195c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800131e:	f000 fb69 	bl	80019f4 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001322:	f000 fbb3 	bl	8001a8c <MX_USART3_UART_Init>
	MX_UART4_Init();
 8001326:	f000 fa35 	bl	8001794 <MX_UART4_Init>
	MX_UART8_Init();
 800132a:	f000 facb 	bl	80018c4 <MX_UART8_Init>
	MX_UART5_Init();
 800132e:	f000 fa7d 	bl	800182c <MX_UART5_Init>
	/* USER CODE BEGIN 2 */
	HAL_IWDG_Refresh(&hiwdg1);
 8001332:	4899      	ldr	r0, [pc, #612]	; (8001598 <main+0x29c>)
 8001334:	f005 fbc8 	bl	8006ac8 <HAL_IWDG_Refresh>
	//初始化下位机

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	2110      	movs	r1, #16
 800133c:	4897      	ldr	r0, [pc, #604]	; (800159c <main+0x2a0>)
 800133e:	f005 fb5b 	bl	80069f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8001342:	2201      	movs	r2, #1
 8001344:	2110      	movs	r1, #16
 8001346:	4895      	ldr	r0, [pc, #596]	; (800159c <main+0x2a0>)
 8001348:	f005 fb56 	bl	80069f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	2110      	movs	r1, #16
 8001350:	4892      	ldr	r0, [pc, #584]	; (800159c <main+0x2a0>)
 8001352:	f005 fb51 	bl	80069f8 <HAL_GPIO_WritePin>

	for (int i = 0; i < 60; i++) //跳过openwrt开机时间
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800135c:	e008      	b.n	8001370 <main+0x74>
	{
		HAL_Delay(1000);
 800135e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001362:	f002 fa2b 	bl	80037bc <HAL_Delay>
	for (int i = 0; i < 60; i++) //跳过openwrt开机时间
 8001366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800136a:	3301      	adds	r3, #1
 800136c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001374:	2b3b      	cmp	r3, #59	; 0x3b
 8001376:	ddf2      	ble.n	800135e <main+0x62>
	}
	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of UptoBaseDataRWFlag */
	osMutexDef(UptoBaseDataRWFlag);
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800137e:	2300      	movs	r3, #0
 8001380:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	UptoBaseDataRWFlagHandle = osMutexCreate(osMutex(UptoBaseDataRWFlag));
 8001384:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001388:	4618      	mov	r0, r3
 800138a:	f00a f8b0 	bl	800b4ee <osMutexCreate>
 800138e:	4603      	mov	r3, r0
 8001390:	4a83      	ldr	r2, [pc, #524]	; (80015a0 <main+0x2a4>)
 8001392:	6013      	str	r3, [r2, #0]

	/* definition and creation of BasetoUpDataRWFlag */
	osMutexDef(BasetoUpDataRWFlag);
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	BasetoUpDataRWFlagHandle = osMutexCreate(osMutex(BasetoUpDataRWFlag));
 80013a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013a4:	4618      	mov	r0, r3
 80013a6:	f00a f8a2 	bl	800b4ee <osMutexCreate>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4a7d      	ldr	r2, [pc, #500]	; (80015a4 <main+0x2a8>)
 80013ae:	6013      	str	r3, [r2, #0]

	/* definition and creation of WT931SensorDataRWFlag */
	osMutexDef(WT931SensorDataRWFlag);
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80013b6:	2300      	movs	r3, #0
 80013b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	WT931SensorDataRWFlagHandle = osMutexCreate(osMutex(WT931SensorDataRWFlag));
 80013bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013c0:	4618      	mov	r0, r3
 80013c2:	f00a f894 	bl	800b4ee <osMutexCreate>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4a77      	ldr	r2, [pc, #476]	; (80015a8 <main+0x2ac>)
 80013ca:	6013      	str	r3, [r2, #0]

	/* definition and creation of GY39SensorDataRWFlag */
	osMutexDef(GY39SensorDataRWFlag);
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	GY39SensorDataRWFlagHandle = osMutexCreate(osMutex(GY39SensorDataRWFlag));
 80013d8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80013dc:	4618      	mov	r0, r3
 80013de:	f00a f886 	bl	800b4ee <osMutexCreate>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4a71      	ldr	r2, [pc, #452]	; (80015ac <main+0x2b0>)
 80013e6:	6013      	str	r3, [r2, #0]

	/* definition and creation of DeepSensorDataRWFlag */
	osMutexDef(DeepSensorDataRWFlag);
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	DeepSensorDataRWFlagHandle = osMutexCreate(osMutex(DeepSensorDataRWFlag));
 80013f4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80013f8:	4618      	mov	r0, r3
 80013fa:	f00a f878 	bl	800b4ee <osMutexCreate>
 80013fe:	4603      	mov	r3, r0
 8001400:	4a6b      	ldr	r2, [pc, #428]	; (80015b0 <main+0x2b4>)
 8001402:	6013      	str	r3, [r2, #0]

	/* definition and creation of BaseControlEnableFlag */
	osMutexDef(BaseControlEnableFlag);
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800140a:	2300      	movs	r3, #0
 800140c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	BaseControlEnableFlagHandle = osMutexCreate(osMutex(BaseControlEnableFlag));
 8001410:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001414:	4618      	mov	r0, r3
 8001416:	f00a f86a 	bl	800b4ee <osMutexCreate>
 800141a:	4603      	mov	r3, r0
 800141c:	4a65      	ldr	r2, [pc, #404]	; (80015b4 <main+0x2b8>)
 800141e:	6013      	str	r3, [r2, #0]

	/* definition and creation of P30SensorDataRWFlag */
	osMutexDef(P30SensorDataRWFlag);
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001426:	2300      	movs	r3, #0
 8001428:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	P30SensorDataRWFlagHandle = osMutexCreate(osMutex(P30SensorDataRWFlag));
 800142c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001430:	4618      	mov	r0, r3
 8001432:	f00a f85c 	bl	800b4ee <osMutexCreate>
 8001436:	4603      	mov	r3, r0
 8001438:	4a5f      	ldr	r2, [pc, #380]	; (80015b8 <main+0x2bc>)
 800143a:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_MUTEX */
	HAL_IWDG_Refresh(&hiwdg1);
 800143c:	4856      	ldr	r0, [pc, #344]	; (8001598 <main+0x29c>)
 800143e:	f005 fb43 	bl	8006ac8 <HAL_IWDG_Refresh>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of UptoBaseTransFinish */
	osSemaphoreDef(UptoBaseTransFinish);
 8001442:	2300      	movs	r3, #0
 8001444:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001448:	2300      	movs	r3, #0
 800144a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	UptoBaseTransFinishHandle = osSemaphoreCreate(
 800144e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001452:	2101      	movs	r1, #1
 8001454:	4618      	mov	r0, r3
 8001456:	f00a f862 	bl	800b51e <osSemaphoreCreate>
 800145a:	4603      	mov	r3, r0
 800145c:	4a57      	ldr	r2, [pc, #348]	; (80015bc <main+0x2c0>)
 800145e:	6013      	str	r3, [r2, #0]
			osSemaphore(UptoBaseTransFinish), 1);

	/* definition and creation of WT931TransFinish */
	osSemaphoreDef(WT931TransFinish);
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	WT931TransFinishHandle = osSemaphoreCreate(osSemaphore(WT931TransFinish),
 800146c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001470:	2101      	movs	r1, #1
 8001472:	4618      	mov	r0, r3
 8001474:	f00a f853 	bl	800b51e <osSemaphoreCreate>
 8001478:	4603      	mov	r3, r0
 800147a:	4a51      	ldr	r2, [pc, #324]	; (80015c0 <main+0x2c4>)
 800147c:	6013      	str	r3, [r2, #0]
			1);

	/* definition and creation of GY39TransFinish */
	osSemaphoreDef(GY39TransFinish);
 800147e:	2300      	movs	r3, #0
 8001480:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	GY39TransFinishHandle = osSemaphoreCreate(osSemaphore(GY39TransFinish), 1);
 800148a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800148e:	2101      	movs	r1, #1
 8001490:	4618      	mov	r0, r3
 8001492:	f00a f844 	bl	800b51e <osSemaphoreCreate>
 8001496:	4603      	mov	r3, r0
 8001498:	4a4a      	ldr	r2, [pc, #296]	; (80015c4 <main+0x2c8>)
 800149a:	6013      	str	r3, [r2, #0]

	/* definition and creation of BasetoUpTransFinishHandle */
	osSemaphoreDef(BasetoUpTransFinishHandle);
 800149c:	2300      	movs	r3, #0
 800149e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	BasetoUpTransFinishHandleHandle = osSemaphoreCreate(
 80014a8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80014ac:	2101      	movs	r1, #1
 80014ae:	4618      	mov	r0, r3
 80014b0:	f00a f835 	bl	800b51e <osSemaphoreCreate>
 80014b4:	4603      	mov	r3, r0
 80014b6:	4a44      	ldr	r2, [pc, #272]	; (80015c8 <main+0x2cc>)
 80014b8:	6013      	str	r3, [r2, #0]
			osSemaphore(BasetoUpTransFinishHandle), 1);

	/* definition and creation of DeepTransFinishHandle */
	osSemaphoreDef(DeepTransFinishHandle);
 80014ba:	2300      	movs	r3, #0
 80014bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80014be:	2300      	movs	r3, #0
 80014c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	DeepTransFinishHandleHandle = osSemaphoreCreate(
 80014c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80014c8:	2101      	movs	r1, #1
 80014ca:	4618      	mov	r0, r3
 80014cc:	f00a f827 	bl	800b51e <osSemaphoreCreate>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4a3e      	ldr	r2, [pc, #248]	; (80015cc <main+0x2d0>)
 80014d4:	6013      	str	r3, [r2, #0]
			osSemaphore(DeepTransFinishHandle), 1);

	/* definition and creation of P30TransFinish */
	osSemaphoreDef(P30TransFinish);
 80014d6:	2300      	movs	r3, #0
 80014d8:	677b      	str	r3, [r7, #116]	; 0x74
 80014da:	2300      	movs	r3, #0
 80014dc:	67bb      	str	r3, [r7, #120]	; 0x78
	P30TransFinishHandle = osSemaphoreCreate(osSemaphore(P30TransFinish), 1);
 80014de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014e2:	2101      	movs	r1, #1
 80014e4:	4618      	mov	r0, r3
 80014e6:	f00a f81a 	bl	800b51e <osSemaphoreCreate>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4a38      	ldr	r2, [pc, #224]	; (80015d0 <main+0x2d4>)
 80014ee:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_SEMAPHORES */
	HAL_IWDG_Refresh(&hiwdg1);
 80014f0:	4829      	ldr	r0, [pc, #164]	; (8001598 <main+0x29c>)
 80014f2:	f005 fae9 	bl	8006ac8 <HAL_IWDG_Refresh>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of CtrlTask */
	osThreadDef(CtrlTask, CtrlTaskF, osPriorityNormal, 0, 128);
 80014f6:	4b37      	ldr	r3, [pc, #220]	; (80015d4 <main+0x2d8>)
 80014f8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80014fc:	461d      	mov	r5, r3
 80014fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001502:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001506:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	CtrlTaskHandle = osThreadCreate(osThread(CtrlTask), NULL);
 800150a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f009 ff8c 	bl	800b42e <osThreadCreate>
 8001516:	4603      	mov	r3, r0
 8001518:	4a2f      	ldr	r2, [pc, #188]	; (80015d8 <main+0x2dc>)
 800151a:	6013      	str	r3, [r2, #0]

	/* definition and creation of SensorTask */
	osThreadDef(SensorTask, SensorTaskF, osPriorityNormal, 0, 128);
 800151c:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <main+0x2e0>)
 800151e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001522:	461d      	mov	r5, r3
 8001524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001528:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800152c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	SensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 8001530:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f009 ff79 	bl	800b42e <osThreadCreate>
 800153c:	4603      	mov	r3, r0
 800153e:	4a28      	ldr	r2, [pc, #160]	; (80015e0 <main+0x2e4>)
 8001540:	6013      	str	r3, [r2, #0]

	/* definition and creation of UptoBaseTask */
	osThreadDef(UptoBaseTask, UtBF, osPriorityNormal, 0, 128);
 8001542:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <main+0x2e8>)
 8001544:	f107 0420 	add.w	r4, r7, #32
 8001548:	461d      	mov	r5, r3
 800154a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800154c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800154e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001552:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	UptoBaseTaskHandle = osThreadCreate(osThread(UptoBaseTask), NULL);
 8001556:	f107 0320 	add.w	r3, r7, #32
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f009 ff66 	bl	800b42e <osThreadCreate>
 8001562:	4603      	mov	r3, r0
 8001564:	4a20      	ldr	r2, [pc, #128]	; (80015e8 <main+0x2ec>)
 8001566:	6013      	str	r3, [r2, #0]

	/* definition and creation of BasetoUpTask */
	osThreadDef(BasetoUpTask, BtUF, osPriorityNormal, 0, 128);
 8001568:	4b20      	ldr	r3, [pc, #128]	; (80015ec <main+0x2f0>)
 800156a:	1d3c      	adds	r4, r7, #4
 800156c:	461d      	mov	r5, r3
 800156e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001572:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001576:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	BasetoUpTaskHandle = osThreadCreate(osThread(BasetoUpTask), NULL);
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f009 ff55 	bl	800b42e <osThreadCreate>
 8001584:	4603      	mov	r3, r0
 8001586:	4a1a      	ldr	r2, [pc, #104]	; (80015f0 <main+0x2f4>)
 8001588:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	HAL_IWDG_Refresh(&hiwdg1);
 800158a:	4803      	ldr	r0, [pc, #12]	; (8001598 <main+0x29c>)
 800158c:	f005 fa9c 	bl	8006ac8 <HAL_IWDG_Refresh>
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8001590:	f009 ff46 	bl	800b420 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001594:	e7fe      	b.n	8001594 <main+0x298>
 8001596:	bf00      	nop
 8001598:	200040e4 	.word	0x200040e4
 800159c:	58021000 	.word	0x58021000
 80015a0:	20004560 	.word	0x20004560
 80015a4:	20004828 	.word	0x20004828
 80015a8:	20004364 	.word	0x20004364
 80015ac:	2000423c 	.word	0x2000423c
 80015b0:	20004200 	.word	0x20004200
 80015b4:	20004258 	.word	0x20004258
 80015b8:	200041fc 	.word	0x200041fc
 80015bc:	20003fec 	.word	0x20003fec
 80015c0:	20004920 	.word	0x20004920
 80015c4:	20004204 	.word	0x20004204
 80015c8:	200045e8 	.word	0x200045e8
 80015cc:	2000482c 	.word	0x2000482c
 80015d0:	20003fe8 	.word	0x20003fe8
 80015d4:	0800da30 	.word	0x0800da30
 80015d8:	20004208 	.word	0x20004208
 80015dc:	0800da4c 	.word	0x0800da4c
 80015e0:	20003ff0 	.word	0x20003ff0
 80015e4:	0800da68 	.word	0x0800da68
 80015e8:	20004710 	.word	0x20004710
 80015ec:	0800da84 	.word	0x0800da84
 80015f0:	20004714 	.word	0x20004714

080015f4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b09c      	sub	sp, #112	; 0x70
 80015f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80015fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fe:	224c      	movs	r2, #76	; 0x4c
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f00c f9e4 	bl	800d9d0 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	2220      	movs	r2, #32
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f00c f9de 	bl	800d9d0 <memset>
	{ 0 };

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001614:	2002      	movs	r0, #2
 8001616:	f005 fa67 	bl	8006ae8 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800161a:	2300      	movs	r3, #0
 800161c:	603b      	str	r3, [r7, #0]
 800161e:	4b35      	ldr	r3, [pc, #212]	; (80016f4 <SystemClock_Config+0x100>)
 8001620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001622:	4a34      	ldr	r2, [pc, #208]	; (80016f4 <SystemClock_Config+0x100>)
 8001624:	f023 0301 	bic.w	r3, r3, #1
 8001628:	62d3      	str	r3, [r2, #44]	; 0x2c
 800162a:	4b32      	ldr	r3, [pc, #200]	; (80016f4 <SystemClock_Config+0x100>)
 800162c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	4b30      	ldr	r3, [pc, #192]	; (80016f8 <SystemClock_Config+0x104>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	4a2f      	ldr	r2, [pc, #188]	; (80016f8 <SystemClock_Config+0x104>)
 800163a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800163e:	6193      	str	r3, [r2, #24]
 8001640:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <SystemClock_Config+0x104>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 800164c:	bf00      	nop
 800164e:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <SystemClock_Config+0x104>)
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800165a:	d1f8      	bne.n	800164e <SystemClock_Config+0x5a>
	{
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800165c:	4b27      	ldr	r3, [pc, #156]	; (80016fc <SystemClock_Config+0x108>)
 800165e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001660:	f023 0303 	bic.w	r3, r3, #3
 8001664:	4a25      	ldr	r2, [pc, #148]	; (80016fc <SystemClock_Config+0x108>)
 8001666:	f043 0302 	orr.w	r3, r3, #2
 800166a:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 800166c:	2309      	movs	r3, #9
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001670:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001676:	2301      	movs	r3, #1
 8001678:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800167a:	2302      	movs	r3, #2
 800167c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800167e:	2302      	movs	r3, #2
 8001680:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 8001682:	2305      	movs	r3, #5
 8001684:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 160;
 8001686:	23a0      	movs	r3, #160	; 0xa0
 8001688:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 800168a:	2302      	movs	r3, #2
 800168c:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800168e:	2302      	movs	r3, #2
 8001690:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001692:	2302      	movs	r3, #2
 8001694:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001696:	2308      	movs	r3, #8
 8001698:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800169a:	2300      	movs	r3, #0
 800169c:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a6:	4618      	mov	r0, r3
 80016a8:	f005 fa58 	bl	8006b5c <HAL_RCC_OscConfig>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80016b2:	f000 fe91 	bl	80023d8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80016b6:	233f      	movs	r3, #63	; 0x3f
 80016b8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ba:	2303      	movs	r3, #3
 80016bc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80016c2:	2308      	movs	r3, #8
 80016c4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016c6:	2340      	movs	r3, #64	; 0x40
 80016c8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016ca:	2340      	movs	r3, #64	; 0x40
 80016cc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016d2:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80016d4:	2340      	movs	r3, #64	; 0x40
 80016d6:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	2102      	movs	r1, #2
 80016dc:	4618      	mov	r0, r3
 80016de:	f005 fe4d 	bl	800737c <HAL_RCC_ClockConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <SystemClock_Config+0xf8>
	{
		Error_Handler();
 80016e8:	f000 fe76 	bl	80023d8 <Error_Handler>
	}
}
 80016ec:	bf00      	nop
 80016ee:	3770      	adds	r7, #112	; 0x70
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	58000400 	.word	0x58000400
 80016f8:	58024800 	.word	0x58024800
 80016fc:	58024400 	.word	0x58024400

08001700 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b0b0      	sub	sp, #192	; 0xc0
 8001704:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	22bc      	movs	r2, #188	; 0xbc
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f00c f95f 	bl	800d9d0 <memset>
	{ 0 };

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5
 8001712:	2303      	movs	r3, #3
 8001714:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_UART8 | RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_UART4
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3;
	PeriphClkInitStruct.PLL3.PLL3M = 25;
 8001716:	2319      	movs	r3, #25
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLL3.PLL3N = 192;
 800171a:	23c0      	movs	r3, #192	; 0xc0
 800171c:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLL3.PLL3P = 2;
 800171e:	2302      	movs	r3, #2
 8001720:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001722:	2302      	movs	r3, #2
 8001724:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001726:	2302      	movs	r3, #2
 8001728:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800172a:	2300      	movs	r3, #0
 800172c:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800172e:	2300      	movs	r3, #0
 8001730:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInitStruct.Usart234578ClockSelection =
 8001736:	2302      	movs	r3, #2
 8001738:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_USART234578CLKSOURCE_PLL3;
	PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 800173a:	2310      	movs	r3, #16
 800173c:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	4618      	mov	r0, r3
 8001742:	f006 f9e9 	bl	8007b18 <HAL_RCCEx_PeriphCLKConfig>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <PeriphCommonClock_Config+0x50>
	{
		Error_Handler();
 800174c:	f000 fe44 	bl	80023d8 <Error_Handler>
	}
}
 8001750:	bf00      	nop
 8001752:	37c0      	adds	r7, #192	; 0xc0
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <MX_IWDG1_Init>:
 * @brief IWDG1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG1_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	/* USER CODE END IWDG1_Init 0 */

	/* USER CODE BEGIN IWDG1_Init 1 */

	/* USER CODE END IWDG1_Init 1 */
	hiwdg1.Instance = IWDG1;
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <MX_IWDG1_Init+0x34>)
 800175e:	4a0c      	ldr	r2, [pc, #48]	; (8001790 <MX_IWDG1_Init+0x38>)
 8001760:	601a      	str	r2, [r3, #0]
	hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <MX_IWDG1_Init+0x34>)
 8001764:	2200      	movs	r2, #0
 8001766:	605a      	str	r2, [r3, #4]
	hiwdg1.Init.Window = 4095;
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <MX_IWDG1_Init+0x34>)
 800176a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800176e:	60da      	str	r2, [r3, #12]
	hiwdg1.Init.Reload = 4095;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_IWDG1_Init+0x34>)
 8001772:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001776:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8001778:	4804      	ldr	r0, [pc, #16]	; (800178c <MX_IWDG1_Init+0x34>)
 800177a:	f005 f956 	bl	8006a2a <HAL_IWDG_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_IWDG1_Init+0x30>
	{
		Error_Handler();
 8001784:	f000 fe28 	bl	80023d8 <Error_Handler>
	}
	/* USER CODE BEGIN IWDG1_Init 2 */

	/* USER CODE END IWDG1_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200040e4 	.word	0x200040e4
 8001790:	58004800 	.word	0x58004800

08001794 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001798:	4b22      	ldr	r3, [pc, #136]	; (8001824 <MX_UART4_Init+0x90>)
 800179a:	4a23      	ldr	r2, [pc, #140]	; (8001828 <MX_UART4_Init+0x94>)
 800179c:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 921600;
 800179e:	4b21      	ldr	r3, [pc, #132]	; (8001824 <MX_UART4_Init+0x90>)
 80017a0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80017a4:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80017a6:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <MX_UART4_Init+0x90>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <MX_UART4_Init+0x90>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80017b2:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <MX_UART4_Init+0x90>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80017b8:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <MX_UART4_Init+0x90>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <MX_UART4_Init+0x90>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c4:	4b17      	ldr	r3, [pc, #92]	; (8001824 <MX_UART4_Init+0x90>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ca:	4b16      	ldr	r3, [pc, #88]	; (8001824 <MX_UART4_Init+0x90>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <MX_UART4_Init+0x90>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <MX_UART4_Init+0x90>)
 80017d8:	2200      	movs	r2, #0
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK)
 80017dc:	4811      	ldr	r0, [pc, #68]	; (8001824 <MX_UART4_Init+0x90>)
 80017de:	f007 ffcf 	bl	8009780 <HAL_UART_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_UART4_Init+0x58>
	{
		Error_Handler();
 80017e8:	f000 fdf6 	bl	80023d8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 80017ec:	2100      	movs	r1, #0
 80017ee:	480d      	ldr	r0, [pc, #52]	; (8001824 <MX_UART4_Init+0x90>)
 80017f0:	f009 fd34 	bl	800b25c <HAL_UARTEx_SetTxFifoThreshold>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_UART4_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 80017fa:	f000 fded 	bl	80023d8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 80017fe:	2100      	movs	r1, #0
 8001800:	4808      	ldr	r0, [pc, #32]	; (8001824 <MX_UART4_Init+0x90>)
 8001802:	f009 fd69 	bl	800b2d8 <HAL_UARTEx_SetRxFifoThreshold>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_UART4_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 800180c:	f000 fde4 	bl	80023d8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001810:	4804      	ldr	r0, [pc, #16]	; (8001824 <MX_UART4_Init+0x90>)
 8001812:	f009 fcea 	bl	800b1ea <HAL_UARTEx_DisableFifoMode>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_UART4_Init+0x8c>
	{
		Error_Handler();
 800181c:	f000 fddc 	bl	80023d8 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20004680 	.word	0x20004680
 8001828:	40004c00 	.word	0x40004c00

0800182c <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8001830:	4b22      	ldr	r3, [pc, #136]	; (80018bc <MX_UART5_Init+0x90>)
 8001832:	4a23      	ldr	r2, [pc, #140]	; (80018c0 <MX_UART5_Init+0x94>)
 8001834:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8001836:	4b21      	ldr	r3, [pc, #132]	; (80018bc <MX_UART5_Init+0x90>)
 8001838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800183c:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800183e:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <MX_UART5_Init+0x90>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001844:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <MX_UART5_Init+0x90>)
 8001846:	2200      	movs	r2, #0
 8001848:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 800184a:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <MX_UART5_Init+0x90>)
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001850:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <MX_UART5_Init+0x90>)
 8001852:	220c      	movs	r2, #12
 8001854:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001856:	4b19      	ldr	r3, [pc, #100]	; (80018bc <MX_UART5_Init+0x90>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <MX_UART5_Init+0x90>)
 800185e:	2200      	movs	r2, #0
 8001860:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <MX_UART5_Init+0x90>)
 8001864:	2200      	movs	r2, #0
 8001866:	621a      	str	r2, [r3, #32]
	huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <MX_UART5_Init+0x90>)
 800186a:	2200      	movs	r2, #0
 800186c:	625a      	str	r2, [r3, #36]	; 0x24
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800186e:	4b13      	ldr	r3, [pc, #76]	; (80018bc <MX_UART5_Init+0x90>)
 8001870:	2200      	movs	r2, #0
 8001872:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart5) != HAL_OK)
 8001874:	4811      	ldr	r0, [pc, #68]	; (80018bc <MX_UART5_Init+0x90>)
 8001876:	f007 ff83 	bl	8009780 <HAL_UART_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_UART5_Init+0x58>
	{
		Error_Handler();
 8001880:	f000 fdaa 	bl	80023d8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8)
 8001884:	2100      	movs	r1, #0
 8001886:	480d      	ldr	r0, [pc, #52]	; (80018bc <MX_UART5_Init+0x90>)
 8001888:	f009 fce8 	bl	800b25c <HAL_UARTEx_SetTxFifoThreshold>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_UART5_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 8001892:	f000 fda1 	bl	80023d8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8)
 8001896:	2100      	movs	r1, #0
 8001898:	4808      	ldr	r0, [pc, #32]	; (80018bc <MX_UART5_Init+0x90>)
 800189a:	f009 fd1d 	bl	800b2d8 <HAL_UARTEx_SetRxFifoThreshold>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_UART5_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 80018a4:	f000 fd98 	bl	80023d8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80018a8:	4804      	ldr	r0, [pc, #16]	; (80018bc <MX_UART5_Init+0x90>)
 80018aa:	f009 fc9e 	bl	800b1ea <HAL_UARTEx_DisableFifoMode>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_UART5_Init+0x8c>
	{
		Error_Handler();
 80018b4:	f000 fd90 	bl	80023d8 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200042d4 	.word	0x200042d4
 80018c0:	40005000 	.word	0x40005000

080018c4 <MX_UART8_Init>:
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 80018c8:	4b22      	ldr	r3, [pc, #136]	; (8001954 <MX_UART8_Init+0x90>)
 80018ca:	4a23      	ldr	r2, [pc, #140]	; (8001958 <MX_UART8_Init+0x94>)
 80018cc:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 80018ce:	4b21      	ldr	r3, [pc, #132]	; (8001954 <MX_UART8_Init+0x90>)
 80018d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d4:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80018d6:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <MX_UART8_Init+0x90>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 80018dc:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <MX_UART8_Init+0x90>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 80018e2:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <MX_UART8_Init+0x90>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 80018e8:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <MX_UART8_Init+0x90>)
 80018ea:	220c      	movs	r2, #12
 80018ec:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ee:	4b19      	ldr	r3, [pc, #100]	; (8001954 <MX_UART8_Init+0x90>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f4:	4b17      	ldr	r3, [pc, #92]	; (8001954 <MX_UART8_Init+0x90>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018fa:	4b16      	ldr	r3, [pc, #88]	; (8001954 <MX_UART8_Init+0x90>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001900:	4b14      	ldr	r3, [pc, #80]	; (8001954 <MX_UART8_Init+0x90>)
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <MX_UART8_Init+0x90>)
 8001908:	2200      	movs	r2, #0
 800190a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart8) != HAL_OK)
 800190c:	4811      	ldr	r0, [pc, #68]	; (8001954 <MX_UART8_Init+0x90>)
 800190e:	f007 ff37 	bl	8009780 <HAL_UART_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_UART8_Init+0x58>
	{
		Error_Handler();
 8001918:	f000 fd5e 	bl	80023d8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8)
 800191c:	2100      	movs	r1, #0
 800191e:	480d      	ldr	r0, [pc, #52]	; (8001954 <MX_UART8_Init+0x90>)
 8001920:	f009 fc9c 	bl	800b25c <HAL_UARTEx_SetTxFifoThreshold>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_UART8_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 800192a:	f000 fd55 	bl	80023d8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8)
 800192e:	2100      	movs	r1, #0
 8001930:	4808      	ldr	r0, [pc, #32]	; (8001954 <MX_UART8_Init+0x90>)
 8001932:	f009 fcd1 	bl	800b2d8 <HAL_UARTEx_SetRxFifoThreshold>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_UART8_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 800193c:	f000 fd4c 	bl	80023d8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001940:	4804      	ldr	r0, [pc, #16]	; (8001954 <MX_UART8_Init+0x90>)
 8001942:	f009 fc52 	bl	800b1ea <HAL_UARTEx_DisableFifoMode>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_UART8_Init+0x8c>
	{
		Error_Handler();
 800194c:	f000 fd44 	bl	80023d8 <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	200045ec 	.word	0x200045ec
 8001958:	40007c00 	.word	0x40007c00

0800195c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001960:	4b22      	ldr	r3, [pc, #136]	; (80019ec <MX_USART1_UART_Init+0x90>)
 8001962:	4a23      	ldr	r2, [pc, #140]	; (80019f0 <MX_USART1_UART_Init+0x94>)
 8001964:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001966:	4b21      	ldr	r3, [pc, #132]	; (80019ec <MX_USART1_UART_Init+0x90>)
 8001968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800196c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800196e:	4b1f      	ldr	r3, [pc, #124]	; (80019ec <MX_USART1_UART_Init+0x90>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001974:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <MX_USART1_UART_Init+0x90>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800197a:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <MX_USART1_UART_Init+0x90>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001980:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <MX_USART1_UART_Init+0x90>)
 8001982:	220c      	movs	r2, #12
 8001984:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <MX_USART1_UART_Init+0x90>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800198c:	4b17      	ldr	r3, [pc, #92]	; (80019ec <MX_USART1_UART_Init+0x90>)
 800198e:	2200      	movs	r2, #0
 8001990:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <MX_USART1_UART_Init+0x90>)
 8001994:	2200      	movs	r2, #0
 8001996:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <MX_USART1_UART_Init+0x90>)
 800199a:	2200      	movs	r2, #0
 800199c:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800199e:	4b13      	ldr	r3, [pc, #76]	; (80019ec <MX_USART1_UART_Init+0x90>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80019a4:	4811      	ldr	r0, [pc, #68]	; (80019ec <MX_USART1_UART_Init+0x90>)
 80019a6:	f007 feeb 	bl	8009780 <HAL_UART_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 80019b0:	f000 fd12 	bl	80023d8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 80019b4:	2100      	movs	r1, #0
 80019b6:	480d      	ldr	r0, [pc, #52]	; (80019ec <MX_USART1_UART_Init+0x90>)
 80019b8:	f009 fc50 	bl	800b25c <HAL_UARTEx_SetTxFifoThreshold>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_USART1_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 80019c2:	f000 fd09 	bl	80023d8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 80019c6:	2100      	movs	r1, #0
 80019c8:	4808      	ldr	r0, [pc, #32]	; (80019ec <MX_USART1_UART_Init+0x90>)
 80019ca:	f009 fc85 	bl	800b2d8 <HAL_UARTEx_SetRxFifoThreshold>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 80019d4:	f000 fd00 	bl	80023d8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80019d8:	4804      	ldr	r0, [pc, #16]	; (80019ec <MX_USART1_UART_Init+0x90>)
 80019da:	f009 fc06 	bl	800b1ea <HAL_UARTEx_DisableFifoMode>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 80019e4:	f000 fcf8 	bl	80023d8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	200044d0 	.word	0x200044d0
 80019f0:	40011000 	.word	0x40011000

080019f4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80019f8:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <MX_USART2_UART_Init+0x90>)
 80019fa:	4a23      	ldr	r2, [pc, #140]	; (8001a88 <MX_USART2_UART_Init+0x94>)
 80019fc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80019fe:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <MX_USART2_UART_Init+0x90>)
 8001a00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a04:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a06:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <MX_USART2_UART_Init+0x90>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <MX_USART2_UART_Init+0x90>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001a12:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <MX_USART2_UART_Init+0x90>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001a18:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <MX_USART2_UART_Init+0x90>)
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1e:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <MX_USART2_UART_Init+0x90>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a24:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <MX_USART2_UART_Init+0x90>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a2a:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <MX_USART2_UART_Init+0x90>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a30:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <MX_USART2_UART_Init+0x90>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a36:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <MX_USART2_UART_Init+0x90>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a3c:	4811      	ldr	r0, [pc, #68]	; (8001a84 <MX_USART2_UART_Init+0x90>)
 8001a3e:	f007 fe9f 	bl	8009780 <HAL_UART_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8001a48:	f000 fcc6 	bl	80023d8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	480d      	ldr	r0, [pc, #52]	; (8001a84 <MX_USART2_UART_Init+0x90>)
 8001a50:	f009 fc04 	bl	800b25c <HAL_UARTEx_SetTxFifoThreshold>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_USART2_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 8001a5a:	f000 fcbd 	bl	80023d8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4808      	ldr	r0, [pc, #32]	; (8001a84 <MX_USART2_UART_Init+0x90>)
 8001a62:	f009 fc39 	bl	800b2d8 <HAL_UARTEx_SetRxFifoThreshold>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001a6c:	f000 fcb4 	bl	80023d8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <MX_USART2_UART_Init+0x90>)
 8001a72:	f009 fbba 	bl	800b1ea <HAL_UARTEx_DisableFifoMode>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 8001a7c:	f000 fcac 	bl	80023d8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20004718 	.word	0x20004718
 8001a88:	40004400 	.word	0x40004400

08001a8c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001a90:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <MX_USART3_UART_Init+0x90>)
 8001a92:	4a23      	ldr	r2, [pc, #140]	; (8001b20 <MX_USART3_UART_Init+0x94>)
 8001a94:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 921600;
 8001a96:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <MX_USART3_UART_Init+0x90>)
 8001a98:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001a9c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9e:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <MX_USART3_UART_Init+0x90>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <MX_USART3_UART_Init+0x90>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <MX_USART3_UART_Init+0x90>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <MX_USART3_UART_Init+0x90>)
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab6:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <MX_USART3_UART_Init+0x90>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001abc:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <MX_USART3_UART_Init+0x90>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ac2:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <MX_USART3_UART_Init+0x90>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ac8:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <MX_USART3_UART_Init+0x90>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ace:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <MX_USART3_UART_Init+0x90>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ad4:	4811      	ldr	r0, [pc, #68]	; (8001b1c <MX_USART3_UART_Init+0x90>)
 8001ad6:	f007 fe53 	bl	8009780 <HAL_UART_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 8001ae0:	f000 fc7a 	bl	80023d8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	480d      	ldr	r0, [pc, #52]	; (8001b1c <MX_USART3_UART_Init+0x90>)
 8001ae8:	f009 fbb8 	bl	800b25c <HAL_UARTEx_SetTxFifoThreshold>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_USART3_UART_Init+0x6a>
			!= HAL_OK)
	{
		Error_Handler();
 8001af2:	f000 fc71 	bl	80023d8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8001af6:	2100      	movs	r1, #0
 8001af8:	4808      	ldr	r0, [pc, #32]	; (8001b1c <MX_USART3_UART_Init+0x90>)
 8001afa:	f009 fbed 	bl	800b2d8 <HAL_UARTEx_SetRxFifoThreshold>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_USART3_UART_Init+0x7c>
			!= HAL_OK)
	{
		Error_Handler();
 8001b04:	f000 fc68 	bl	80023d8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001b08:	4804      	ldr	r0, [pc, #16]	; (8001b1c <MX_USART3_UART_Init+0x90>)
 8001b0a:	f009 fb6e 	bl	800b1ea <HAL_UARTEx_DisableFifoMode>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 8001b14:	f000 fc60 	bl	80023d8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	2000416c 	.word	0x2000416c
 8001b20:	40004800 	.word	0x40004800

08001b24 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	; (8001c20 <MX_DMA_Init+0xfc>)
 8001b2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b30:	4a3b      	ldr	r2, [pc, #236]	; (8001c20 <MX_DMA_Init+0xfc>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b3a:	4b39      	ldr	r3, [pc, #228]	; (8001c20 <MX_DMA_Init+0xfc>)
 8001b3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001b48:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <MX_DMA_Init+0xfc>)
 8001b4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b4e:	4a34      	ldr	r2, [pc, #208]	; (8001c20 <MX_DMA_Init+0xfc>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b58:	4b31      	ldr	r3, [pc, #196]	; (8001c20 <MX_DMA_Init+0xfc>)
 8001b5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2105      	movs	r1, #5
 8001b6a:	200b      	movs	r0, #11
 8001b6c:	f001 ff0e 	bl	800398c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b70:	200b      	movs	r0, #11
 8001b72:	f001 ff25 	bl	80039c0 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2105      	movs	r1, #5
 8001b7a:	200c      	movs	r0, #12
 8001b7c:	f001 ff06 	bl	800398c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b80:	200c      	movs	r0, #12
 8001b82:	f001 ff1d 	bl	80039c0 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2105      	movs	r1, #5
 8001b8a:	200d      	movs	r0, #13
 8001b8c:	f001 fefe 	bl	800398c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001b90:	200d      	movs	r0, #13
 8001b92:	f001 ff15 	bl	80039c0 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2105      	movs	r1, #5
 8001b9a:	200e      	movs	r0, #14
 8001b9c:	f001 fef6 	bl	800398c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001ba0:	200e      	movs	r0, #14
 8001ba2:	f001 ff0d 	bl	80039c0 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2105      	movs	r1, #5
 8001baa:	200f      	movs	r0, #15
 8001bac:	f001 feee 	bl	800398c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001bb0:	200f      	movs	r0, #15
 8001bb2:	f001 ff05 	bl	80039c0 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2105      	movs	r1, #5
 8001bba:	2010      	movs	r0, #16
 8001bbc:	f001 fee6 	bl	800398c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001bc0:	2010      	movs	r0, #16
 8001bc2:	f001 fefd 	bl	80039c0 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2105      	movs	r1, #5
 8001bca:	2011      	movs	r0, #17
 8001bcc:	f001 fede 	bl	800398c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001bd0:	2011      	movs	r0, #17
 8001bd2:	f001 fef5 	bl	80039c0 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2105      	movs	r1, #5
 8001bda:	202f      	movs	r0, #47	; 0x2f
 8001bdc:	f001 fed6 	bl	800398c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001be0:	202f      	movs	r0, #47	; 0x2f
 8001be2:	f001 feed 	bl	80039c0 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2105      	movs	r1, #5
 8001bea:	2038      	movs	r0, #56	; 0x38
 8001bec:	f001 fece 	bl	800398c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001bf0:	2038      	movs	r0, #56	; 0x38
 8001bf2:	f001 fee5 	bl	80039c0 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2105      	movs	r1, #5
 8001bfa:	2039      	movs	r0, #57	; 0x39
 8001bfc:	f001 fec6 	bl	800398c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001c00:	2039      	movs	r0, #57	; 0x39
 8001c02:	f001 fedd 	bl	80039c0 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2105      	movs	r1, #5
 8001c0a:	203a      	movs	r0, #58	; 0x3a
 8001c0c:	f001 febe 	bl	800398c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001c10:	203a      	movs	r0, #58	; 0x3a
 8001c12:	f001 fed5 	bl	80039c0 <HAL_NVIC_EnableIRQ>

}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	58024400 	.word	0x58024400

08001c24 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
 8001c38:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001c3a:	4b3f      	ldr	r3, [pc, #252]	; (8001d38 <MX_GPIO_Init+0x114>)
 8001c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c40:	4a3d      	ldr	r2, [pc, #244]	; (8001d38 <MX_GPIO_Init+0x114>)
 8001c42:	f043 0310 	orr.w	r3, r3, #16
 8001c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c4a:	4b3b      	ldr	r3, [pc, #236]	; (8001d38 <MX_GPIO_Init+0x114>)
 8001c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c58:	4b37      	ldr	r3, [pc, #220]	; (8001d38 <MX_GPIO_Init+0x114>)
 8001c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5e:	4a36      	ldr	r2, [pc, #216]	; (8001d38 <MX_GPIO_Init+0x114>)
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c68:	4b33      	ldr	r3, [pc, #204]	; (8001d38 <MX_GPIO_Init+0x114>)
 8001c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001c76:	4b30      	ldr	r3, [pc, #192]	; (8001d38 <MX_GPIO_Init+0x114>)
 8001c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7c:	4a2e      	ldr	r2, [pc, #184]	; (8001d38 <MX_GPIO_Init+0x114>)
 8001c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c86:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <MX_GPIO_Init+0x114>)
 8001c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c94:	4b28      	ldr	r3, [pc, #160]	; (8001d38 <MX_GPIO_Init+0x114>)
 8001c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9a:	4a27      	ldr	r2, [pc, #156]	; (8001d38 <MX_GPIO_Init+0x114>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ca4:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <MX_GPIO_Init+0x114>)
 8001ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb2:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <MX_GPIO_Init+0x114>)
 8001cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb8:	4a1f      	ldr	r2, [pc, #124]	; (8001d38 <MX_GPIO_Init+0x114>)
 8001cba:	f043 0302 	orr.w	r3, r3, #2
 8001cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cc2:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <MX_GPIO_Init+0x114>)
 8001cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2110      	movs	r1, #16
 8001cd4:	4819      	ldr	r0, [pc, #100]	; (8001d3c <MX_GPIO_Init+0x118>)
 8001cd6:	f004 fe8f 	bl	80069f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cda:	2310      	movs	r3, #16
 8001cdc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cea:	f107 0314 	add.w	r3, r7, #20
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4812      	ldr	r0, [pc, #72]	; (8001d3c <MX_GPIO_Init+0x118>)
 8001cf2:	f004 fcb9 	bl	8006668 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cf6:	2340      	movs	r3, #64	; 0x40
 8001cf8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	4619      	mov	r1, r3
 8001d08:	480c      	ldr	r0, [pc, #48]	; (8001d3c <MX_GPIO_Init+0x118>)
 8001d0a:	f004 fcad 	bl	8006668 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d12:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d20:	2301      	movs	r3, #1
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4805      	ldr	r0, [pc, #20]	; (8001d40 <MX_GPIO_Init+0x11c>)
 8001d2c:	f004 fc9c 	bl	8006668 <HAL_GPIO_Init>

}
 8001d30:	bf00      	nop
 8001d32:	3728      	adds	r7, #40	; 0x28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	58024400 	.word	0x58024400
 8001d3c:	58021000 	.word	0x58021000
 8001d40:	58020000 	.word	0x58020000

08001d44 <CtrlTaskF>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_CtrlTaskF */
void CtrlTaskF(void const *argument)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for (;;)
	{
		/* 该任务作为空任务 */
		HAL_IWDG_Refresh(&hiwdg1);
 8001d4c:	4801      	ldr	r0, [pc, #4]	; (8001d54 <CtrlTaskF+0x10>)
 8001d4e:	f004 febb 	bl	8006ac8 <HAL_IWDG_Refresh>
 8001d52:	e7fb      	b.n	8001d4c <CtrlTaskF+0x8>
 8001d54:	200040e4 	.word	0x200040e4

08001d58 <SensorTaskF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SensorTaskF */
void SensorTaskF(void const *argument)
{
 8001d58:	b5b0      	push	{r4, r5, r7, lr}
 8001d5a:	b08c      	sub	sp, #48	; 0x30
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	62f8      	str	r0, [r7, #44]	; 0x2c
	/* USER CODE BEGIN SensorTaskF */
	InitGY39();
 8001d60:	f7ff f8a2 	bl	8000ea8 <InitGY39>
	InitP30();
 8001d64:	f7ff f9e4 	bl	8001130 <InitP30>
	ReceiveDeep();
 8001d68:	f7ff f9aa 	bl	80010c0 <ReceiveDeep>
	ReceiveGY39();
 8001d6c:	f107 0318 	add.w	r3, r7, #24
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff f8af 	bl	8000ed4 <ReceiveGY39>
	ReceiveWT931();
 8001d76:	463b      	mov	r3, r7
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff f8f1 	bl	8000f60 <ReceiveWT931>
	ReceiveP30();
 8001d7e:	463b      	mov	r3, r7
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fa07 	bl	8001194 <ReceiveP30>
	osDelay(200);
 8001d86:	20c8      	movs	r0, #200	; 0xc8
 8001d88:	f009 fb9d 	bl	800b4c6 <osDelay>
	DeepSensorData = ReceiveDeep();
 8001d8c:	f7ff f998 	bl	80010c0 <ReceiveDeep>
 8001d90:	4602      	mov	r2, r0
 8001d92:	4b71      	ldr	r3, [pc, #452]	; (8001f58 <SensorTaskF+0x200>)
 8001d94:	4611      	mov	r1, r2
 8001d96:	8019      	strh	r1, [r3, #0]
 8001d98:	f3c2 420f 	ubfx	r2, r2, #16, #16
 8001d9c:	805a      	strh	r2, [r3, #2]
	GY39SensorData = ReceiveGY39();
 8001d9e:	4c6f      	ldr	r4, [pc, #444]	; (8001f5c <SensorTaskF+0x204>)
 8001da0:	463b      	mov	r3, r7
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff f896 	bl	8000ed4 <ReceiveGY39>
 8001da8:	463b      	mov	r3, r7
 8001daa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001dae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	WT931SensorData = ReceiveWT931();
 8001db2:	4c6b      	ldr	r4, [pc, #428]	; (8001f60 <SensorTaskF+0x208>)
 8001db4:	463b      	mov	r3, r7
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff f8d2 	bl	8000f60 <ReceiveWT931>
 8001dbc:	4622      	mov	r2, r4
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	6859      	ldr	r1, [r3, #4]
 8001dc4:	689d      	ldr	r5, [r3, #8]
 8001dc6:	68dc      	ldr	r4, [r3, #12]
 8001dc8:	6010      	str	r0, [r2, #0]
 8001dca:	6051      	str	r1, [r2, #4]
 8001dcc:	6095      	str	r5, [r2, #8]
 8001dce:	60d4      	str	r4, [r2, #12]
 8001dd0:	6918      	ldr	r0, [r3, #16]
 8001dd2:	6959      	ldr	r1, [r3, #20]
 8001dd4:	6110      	str	r0, [r2, #16]
 8001dd6:	6151      	str	r1, [r2, #20]
	P30SensorData = ReceiveP30();
 8001dd8:	4c62      	ldr	r4, [pc, #392]	; (8001f64 <SensorTaskF+0x20c>)
 8001dda:	463b      	mov	r3, r7
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff f9d9 	bl	8001194 <ReceiveP30>
 8001de2:	4622      	mov	r2, r4
 8001de4:	463b      	mov	r3, r7
 8001de6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001dea:	e882 0003 	stmia.w	r2, {r0, r1}
	xSemaphoreGive(DeepSensorDataRWFlagHandle);
 8001dee:	4b5e      	ldr	r3, [pc, #376]	; (8001f68 <SensorTaskF+0x210>)
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	2300      	movs	r3, #0
 8001df4:	2200      	movs	r2, #0
 8001df6:	2100      	movs	r1, #0
 8001df8:	f009 fdfe 	bl	800b9f8 <xQueueGenericSend>
	xSemaphoreGive(GY39SensorDataRWFlagHandle);
 8001dfc:	4b5b      	ldr	r3, [pc, #364]	; (8001f6c <SensorTaskF+0x214>)
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	2300      	movs	r3, #0
 8001e02:	2200      	movs	r2, #0
 8001e04:	2100      	movs	r1, #0
 8001e06:	f009 fdf7 	bl	800b9f8 <xQueueGenericSend>
	xSemaphoreGive(WT931SensorDataRWFlagHandle);
 8001e0a:	4b59      	ldr	r3, [pc, #356]	; (8001f70 <SensorTaskF+0x218>)
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	2200      	movs	r2, #0
 8001e12:	2100      	movs	r1, #0
 8001e14:	f009 fdf0 	bl	800b9f8 <xQueueGenericSend>
	xSemaphoreGive(P30SensorDataRWFlagHandle);
 8001e18:	4b56      	ldr	r3, [pc, #344]	; (8001f74 <SensorTaskF+0x21c>)
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2100      	movs	r1, #0
 8001e22:	f009 fde9 	bl	800b9f8 <xQueueGenericSend>
	/* Infinite loop */
	for (;;)
	{
		//收取深度数据
		if (xSemaphoreTake(DeepTransFinishHandleHandle,
 8001e26:	4b54      	ldr	r3, [pc, #336]	; (8001f78 <SensorTaskF+0x220>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f009 ff6f 	bl	800bd10 <xQueueSemaphoreTake>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d118      	bne.n	8001e6a <SensorTaskF+0x112>
				portTICK_PERIOD_MS) == pdTRUE)
		{
			if (xSemaphoreTake(DeepSensorDataRWFlagHandle,
 8001e38:	4b4b      	ldr	r3, [pc, #300]	; (8001f68 <SensorTaskF+0x210>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f009 ff66 	bl	800bd10 <xQueueSemaphoreTake>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d10f      	bne.n	8001e6a <SensorTaskF+0x112>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				DeepSensorData = ReceiveDeep();
 8001e4a:	f7ff f939 	bl	80010c0 <ReceiveDeep>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	4b41      	ldr	r3, [pc, #260]	; (8001f58 <SensorTaskF+0x200>)
 8001e52:	4611      	mov	r1, r2
 8001e54:	8019      	strh	r1, [r3, #0]
 8001e56:	f3c2 420f 	ubfx	r2, r2, #16, #16
 8001e5a:	805a      	strh	r2, [r3, #2]
				xSemaphoreGive(DeepSensorDataRWFlagHandle);
 8001e5c:	4b42      	ldr	r3, [pc, #264]	; (8001f68 <SensorTaskF+0x210>)
 8001e5e:	6818      	ldr	r0, [r3, #0]
 8001e60:	2300      	movs	r3, #0
 8001e62:	2200      	movs	r2, #0
 8001e64:	2100      	movs	r1, #0
 8001e66:	f009 fdc7 	bl	800b9f8 <xQueueGenericSend>
			}
		}
		//收取九轴数据
		if (xSemaphoreTake(WT931TransFinishHandle,portTICK_PERIOD_MS) == pdTRUE)
 8001e6a:	4b44      	ldr	r3, [pc, #272]	; (8001f7c <SensorTaskF+0x224>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2101      	movs	r1, #1
 8001e70:	4618      	mov	r0, r3
 8001e72:	f009 ff4d 	bl	800bd10 <xQueueSemaphoreTake>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d122      	bne.n	8001ec2 <SensorTaskF+0x16a>
		{
			if (xSemaphoreTake(WT931SensorDataRWFlagHandle,
 8001e7c:	4b3c      	ldr	r3, [pc, #240]	; (8001f70 <SensorTaskF+0x218>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2101      	movs	r1, #1
 8001e82:	4618      	mov	r0, r3
 8001e84:	f009 ff44 	bl	800bd10 <xQueueSemaphoreTake>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d119      	bne.n	8001ec2 <SensorTaskF+0x16a>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				WT931SensorData = ReceiveWT931();
 8001e8e:	4c34      	ldr	r4, [pc, #208]	; (8001f60 <SensorTaskF+0x208>)
 8001e90:	463b      	mov	r3, r7
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff f864 	bl	8000f60 <ReceiveWT931>
 8001e98:	4622      	mov	r2, r4
 8001e9a:	463b      	mov	r3, r7
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	6859      	ldr	r1, [r3, #4]
 8001ea0:	689d      	ldr	r5, [r3, #8]
 8001ea2:	68dc      	ldr	r4, [r3, #12]
 8001ea4:	6010      	str	r0, [r2, #0]
 8001ea6:	6051      	str	r1, [r2, #4]
 8001ea8:	6095      	str	r5, [r2, #8]
 8001eaa:	60d4      	str	r4, [r2, #12]
 8001eac:	6918      	ldr	r0, [r3, #16]
 8001eae:	6959      	ldr	r1, [r3, #20]
 8001eb0:	6110      	str	r0, [r2, #16]
 8001eb2:	6151      	str	r1, [r2, #20]
				xSemaphoreGive(WT931SensorDataRWFlagHandle);
 8001eb4:	4b2e      	ldr	r3, [pc, #184]	; (8001f70 <SensorTaskF+0x218>)
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	2300      	movs	r3, #0
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	f009 fd9b 	bl	800b9f8 <xQueueGenericSend>
			}
		}
		//收取温湿度数�?????
		if (xSemaphoreTake(GY39TransFinishHandle,portTICK_PERIOD_MS) == pdTRUE)
 8001ec2:	4b2f      	ldr	r3, [pc, #188]	; (8001f80 <SensorTaskF+0x228>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f009 ff21 	bl	800bd10 <xQueueSemaphoreTake>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d119      	bne.n	8001f08 <SensorTaskF+0x1b0>
		{
			if (xSemaphoreTake(GY39SensorDataRWFlagHandle,
 8001ed4:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <SensorTaskF+0x214>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2101      	movs	r1, #1
 8001eda:	4618      	mov	r0, r3
 8001edc:	f009 ff18 	bl	800bd10 <xQueueSemaphoreTake>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d110      	bne.n	8001f08 <SensorTaskF+0x1b0>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				GY39SensorData = ReceiveGY39();
 8001ee6:	4c1d      	ldr	r4, [pc, #116]	; (8001f5c <SensorTaskF+0x204>)
 8001ee8:	463b      	mov	r3, r7
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fff2 	bl	8000ed4 <ReceiveGY39>
 8001ef0:	463b      	mov	r3, r7
 8001ef2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ef6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				xSemaphoreGive(GY39SensorDataRWFlagHandle);
 8001efa:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <SensorTaskF+0x214>)
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	2300      	movs	r3, #0
 8001f00:	2200      	movs	r2, #0
 8001f02:	2100      	movs	r1, #0
 8001f04:	f009 fd78 	bl	800b9f8 <xQueueGenericSend>
			}
		}
		//收取声呐数据
		if (xSemaphoreTake(P30TransFinishHandle,portTICK_PERIOD_MS) == pdTRUE)
 8001f08:	4b1e      	ldr	r3, [pc, #120]	; (8001f84 <SensorTaskF+0x22c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f009 fefe 	bl	800bd10 <xQueueSemaphoreTake>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d11a      	bne.n	8001f50 <SensorTaskF+0x1f8>
		{
			if (xSemaphoreTake(P30SensorDataRWFlagHandle,
 8001f1a:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <SensorTaskF+0x21c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2101      	movs	r1, #1
 8001f20:	4618      	mov	r0, r3
 8001f22:	f009 fef5 	bl	800bd10 <xQueueSemaphoreTake>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d111      	bne.n	8001f50 <SensorTaskF+0x1f8>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				P30SensorData = ReceiveP30();
 8001f2c:	4c0d      	ldr	r4, [pc, #52]	; (8001f64 <SensorTaskF+0x20c>)
 8001f2e:	463b      	mov	r3, r7
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f92f 	bl	8001194 <ReceiveP30>
 8001f36:	4622      	mov	r2, r4
 8001f38:	463b      	mov	r3, r7
 8001f3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f3e:	e882 0003 	stmia.w	r2, {r0, r1}
				xSemaphoreGive(P30SensorDataRWFlagHandle);
 8001f42:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <SensorTaskF+0x21c>)
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	2300      	movs	r3, #0
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	f009 fd54 	bl	800b9f8 <xQueueGenericSend>
			}
		}
		HAL_IWDG_Refresh(&hiwdg1);
 8001f50:	480d      	ldr	r0, [pc, #52]	; (8001f88 <SensorTaskF+0x230>)
 8001f52:	f004 fdb9 	bl	8006ac8 <HAL_IWDG_Refresh>
		if (xSemaphoreTake(DeepTransFinishHandleHandle,
 8001f56:	e766      	b.n	8001e26 <SensorTaskF+0xce>
 8001f58:	2000467c 	.word	0x2000467c
 8001f5c:	20004564 	.word	0x20004564
 8001f60:	20004240 	.word	0x20004240
 8001f64:	20004820 	.word	0x20004820
 8001f68:	20004200 	.word	0x20004200
 8001f6c:	2000423c 	.word	0x2000423c
 8001f70:	20004364 	.word	0x20004364
 8001f74:	200041fc 	.word	0x200041fc
 8001f78:	2000482c 	.word	0x2000482c
 8001f7c:	20004920 	.word	0x20004920
 8001f80:	20004204 	.word	0x20004204
 8001f84:	20003fe8 	.word	0x20003fe8
 8001f88:	200040e4 	.word	0x200040e4

08001f8c <UtBF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UtBF */
void UtBF(void const *argument)
{
 8001f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8e:	b09b      	sub	sp, #108	; 0x6c
 8001f90:	af0a      	add	r7, sp, #40	; 0x28
 8001f92:	6378      	str	r0, [r7, #52]	; 0x34
	/* USER CODE BEGIN UtBF */
	u8 DIPFlag = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	u16 DIPStartNum = 0; //PID定向定深预期�??????????
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	87bb      	strh	r3, [r7, #60]	; 0x3c

	CaptureUpData();
 8001f9e:	463b      	mov	r3, r7
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fc57 	bl	8000854 <CaptureUpData>
	CaptureDownData();
 8001fa6:	463b      	mov	r3, r7
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fb15 	bl	80005d8 <CaptureDownData>
	osDelay(200);
 8001fae:	20c8      	movs	r0, #200	; 0xc8
 8001fb0:	f009 fa89 	bl	800b4c6 <osDelay>
	//打开串口接收
	BasetoUpData = CaptureUpData();
 8001fb4:	4c55      	ldr	r4, [pc, #340]	; (800210c <UtBF+0x180>)
 8001fb6:	463b      	mov	r3, r7
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fc4b 	bl	8000854 <CaptureUpData>
 8001fbe:	4625      	mov	r5, r4
 8001fc0:	463c      	mov	r4, r7
 8001fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001fce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	UptoBaseData = CaptureDownData();
 8001fd2:	4c4f      	ldr	r4, [pc, #316]	; (8002110 <UtBF+0x184>)
 8001fd4:	463b      	mov	r3, r7
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fafe 	bl	80005d8 <CaptureDownData>
 8001fdc:	4625      	mov	r5, r4
 8001fde:	463c      	mov	r4, r7
 8001fe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fec:	6823      	ldr	r3, [r4, #0]
 8001fee:	602b      	str	r3, [r5, #0]
	xSemaphoreGive(BasetoUpDataRWFlagHandle);
 8001ff0:	4b48      	ldr	r3, [pc, #288]	; (8002114 <UtBF+0x188>)
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	f009 fcfd 	bl	800b9f8 <xQueueGenericSend>
	xSemaphoreGive(UptoBaseDataRWFlagHandle);
 8001ffe:	4b46      	ldr	r3, [pc, #280]	; (8002118 <UtBF+0x18c>)
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	2300      	movs	r3, #0
 8002004:	2200      	movs	r2, #0
 8002006:	2100      	movs	r1, #0
 8002008:	f009 fcf6 	bl	800b9f8 <xQueueGenericSend>

	/* Infinite loop */
	for (;;)
	{
		//根据控制位判断是否执行自主定向定�?????
		if (UptoBaseData.Mode & 0x02 == 0x02) //0b0010,使用定向模式
 800200c:	4b40      	ldr	r3, [pc, #256]	; (8002110 <UtBF+0x184>)
 800200e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d011      	beq.n	800203e <UtBF+0xb2>
		{
			if (DIPFlag == 0)
 800201a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800201e:	2b00      	cmp	r3, #0
 8002020:	d105      	bne.n	800202e <UtBF+0xa2>
			{
				DIPFlag = 1;
 8002022:	2301      	movs	r3, #1
 8002024:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				DIPStartNum = WT931SensorData.EulNum[2];
 8002028:	4b3c      	ldr	r3, [pc, #240]	; (800211c <UtBF+0x190>)
 800202a:	8a1b      	ldrh	r3, [r3, #16]
 800202c:	87bb      	strh	r3, [r7, #60]	; 0x3c
			}
			SpecialMovePID(2, DIPStartNum, WT931SensorData.EulNum[2]); //PID定向
 800202e:	4b3b      	ldr	r3, [pc, #236]	; (800211c <UtBF+0x190>)
 8002030:	8a1a      	ldrh	r2, [r3, #16]
 8002032:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002034:	4619      	mov	r1, r3
 8002036:	2002      	movs	r0, #2
 8002038:	f7fe fe3a 	bl	8000cb0 <SpecialMovePID>
 800203c:	e01b      	b.n	8002076 <UtBF+0xea>
		}
		else if (UptoBaseData.Mode & 0x04 == 0x04) //0b0100,使用定深模式
 800203e:	4b34      	ldr	r3, [pc, #208]	; (8002110 <UtBF+0x184>)
 8002040:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d011      	beq.n	8002070 <UtBF+0xe4>
		{
			if (DIPFlag == 0)
 800204c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002050:	2b00      	cmp	r3, #0
 8002052:	d105      	bne.n	8002060 <UtBF+0xd4>
			{
				DIPFlag = 1;
 8002054:	2301      	movs	r3, #1
 8002056:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				DIPStartNum = DeepSensorData.WaterDepth;
 800205a:	4b31      	ldr	r3, [pc, #196]	; (8002120 <UtBF+0x194>)
 800205c:	885b      	ldrh	r3, [r3, #2]
 800205e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			}
			SpecialMovePID(4, DIPStartNum, DeepSensorData.WaterDepth); //PID定深
 8002060:	4b2f      	ldr	r3, [pc, #188]	; (8002120 <UtBF+0x194>)
 8002062:	885a      	ldrh	r2, [r3, #2]
 8002064:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002066:	4619      	mov	r1, r3
 8002068:	2004      	movs	r0, #4
 800206a:	f7fe fe21 	bl	8000cb0 <SpecialMovePID>
 800206e:	e002      	b.n	8002076 <UtBF+0xea>
		}
		else
		{
			DIPFlag = 0; //不开启定向定�?
 8002070:	2300      	movs	r3, #0
 8002072:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}

		//收取上位机指�????
		if (xSemaphoreTake(UptoBaseTransFinishHandle,
 8002076:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <UtBF+0x198>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2101      	movs	r1, #1
 800207c:	4618      	mov	r0, r3
 800207e:	f009 fe47 	bl	800bd10 <xQueueSemaphoreTake>
 8002082:	4603      	mov	r3, r0
 8002084:	2b01      	cmp	r3, #1
 8002086:	d11e      	bne.n	80020c6 <UtBF+0x13a>
				portTICK_PERIOD_MS) == pdTRUE)
		{
			if (xSemaphoreTake(UptoBaseDataRWFlagHandle,
 8002088:	4b23      	ldr	r3, [pc, #140]	; (8002118 <UtBF+0x18c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2101      	movs	r1, #1
 800208e:	4618      	mov	r0, r3
 8002090:	f009 fe3e 	bl	800bd10 <xQueueSemaphoreTake>
 8002094:	4603      	mov	r3, r0
 8002096:	2b01      	cmp	r3, #1
 8002098:	d115      	bne.n	80020c6 <UtBF+0x13a>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				UptoBaseData = CaptureDownData();
 800209a:	4c1d      	ldr	r4, [pc, #116]	; (8002110 <UtBF+0x184>)
 800209c:	463b      	mov	r3, r7
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fa9a 	bl	80005d8 <CaptureDownData>
 80020a4:	4625      	mov	r5, r4
 80020a6:	463c      	mov	r4, r7
 80020a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b4:	6823      	ldr	r3, [r4, #0]
 80020b6:	602b      	str	r3, [r5, #0]
				xSemaphoreGive(UptoBaseDataRWFlagHandle);
 80020b8:	4b17      	ldr	r3, [pc, #92]	; (8002118 <UtBF+0x18c>)
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	2300      	movs	r3, #0
 80020be:	2200      	movs	r2, #0
 80020c0:	2100      	movs	r1, #0
 80020c2:	f009 fc99 	bl	800b9f8 <xQueueGenericSend>
			}
		}

		//下传指令
		if (xSemaphoreTake(BasetoUpDataRWFlagHandle,
 80020c6:	4b13      	ldr	r3, [pc, #76]	; (8002114 <UtBF+0x188>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2101      	movs	r1, #1
 80020cc:	4618      	mov	r0, r3
 80020ce:	f009 fe1f 	bl	800bd10 <xQueueSemaphoreTake>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d114      	bne.n	8002102 <UtBF+0x176>
				portTICK_PERIOD_MS) == pdTRUE)
		{
			SendDownData(UptoBaseData);
 80020d8:	4e0d      	ldr	r6, [pc, #52]	; (8002110 <UtBF+0x184>)
 80020da:	466d      	mov	r5, sp
 80020dc:	f106 0410 	add.w	r4, r6, #16
 80020e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	602b      	str	r3, [r5, #0]
 80020ec:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80020f0:	f7fe fb10 	bl	8000714 <SendDownData>
			xSemaphoreGive(BasetoUpDataRWFlagHandle);
 80020f4:	4b07      	ldr	r3, [pc, #28]	; (8002114 <UtBF+0x188>)
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	2300      	movs	r3, #0
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	f009 fc7b 	bl	800b9f8 <xQueueGenericSend>
		}

		HAL_IWDG_Refresh(&hiwdg1);
 8002102:	4809      	ldr	r0, [pc, #36]	; (8002128 <UtBF+0x19c>)
 8002104:	f004 fce0 	bl	8006ac8 <HAL_IWDG_Refresh>
		if (UptoBaseData.Mode & 0x02 == 0x02) //0b0010,使用定向模式
 8002108:	e780      	b.n	800200c <UtBF+0x80>
 800210a:	bf00      	nop
 800210c:	2000420c 	.word	0x2000420c
 8002110:	20004924 	.word	0x20004924
 8002114:	20004828 	.word	0x20004828
 8002118:	20004560 	.word	0x20004560
 800211c:	20004240 	.word	0x20004240
 8002120:	2000467c 	.word	0x2000467c
 8002124:	20003fec 	.word	0x20003fec
 8002128:	200040e4 	.word	0x200040e4

0800212c <BtUF>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_BtUF */
void BtUF(void const *argument)
{
 800212c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212e:	b099      	sub	sp, #100	; 0x64
 8002130:	af08      	add	r7, sp, #32
 8002132:	6378      	str	r0, [r7, #52]	; 0x34
	/* USER CODE BEGIN BtUF */
//	xSemaphoreGive(BaseControlEnableFlagHandle);
	//用于指示当前传输数据是哪个仓位的标志
	//置为1的时候表示推进器控制�??????????
	//置为0的时候表示主控仓
	u8 SensorCarbin = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	/* Infinite loop */
	for (;;)
	{
		if (SensorCarbin % 2 == 1) //发�?�推进器控制仓数�?????
 800213a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d04d      	beq.n	80021e4 <BtUF+0xb8>
		{
			//接收下位仓回传的数据
			if (xSemaphoreTake(BasetoUpTransFinishHandleHandle,
 8002148:	4b8c      	ldr	r3, [pc, #560]	; (800237c <BtUF+0x250>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2101      	movs	r1, #1
 800214e:	4618      	mov	r0, r3
 8002150:	f009 fdde 	bl	800bd10 <xQueueSemaphoreTake>
 8002154:	4603      	mov	r3, r0
 8002156:	2b01      	cmp	r3, #1
 8002158:	f040 8106 	bne.w	8002368 <BtUF+0x23c>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				if (xSemaphoreTake(BasetoUpDataRWFlagHandle,
 800215c:	4b88      	ldr	r3, [pc, #544]	; (8002380 <BtUF+0x254>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2101      	movs	r1, #1
 8002162:	4618      	mov	r0, r3
 8002164:	f009 fdd4 	bl	800bd10 <xQueueSemaphoreTake>
 8002168:	4603      	mov	r3, r0
 800216a:	2b01      	cmp	r3, #1
 800216c:	f040 80fc 	bne.w	8002368 <BtUF+0x23c>
						portTICK_PERIOD_MS) == pdTRUE)
				{
					BasetoUpData = CaptureUpData();
 8002170:	4c84      	ldr	r4, [pc, #528]	; (8002384 <BtUF+0x258>)
 8002172:	463b      	mov	r3, r7
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe fb6d 	bl	8000854 <CaptureUpData>
 800217a:	4625      	mov	r5, r4
 800217c:	463c      	mov	r4, r7
 800217e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002184:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002186:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800218a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
					if (BasetoUpData.CabinNum == 1)
 800218e:	4b7d      	ldr	r3, [pc, #500]	; (8002384 <BtUF+0x258>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b01      	cmp	r3, #1
 8002194:	f000 80e5 	beq.w	8002362 <BtUF+0x236>
					{
						goto BAD_CABIN_NUM;
					}
					//上传数据
					if (xSemaphoreTake(UptoBaseDataRWFlagHandle,
 8002198:	4b7b      	ldr	r3, [pc, #492]	; (8002388 <BtUF+0x25c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2101      	movs	r1, #1
 800219e:	4618      	mov	r0, r3
 80021a0:	f009 fdb6 	bl	800bd10 <xQueueSemaphoreTake>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d114      	bne.n	80021d4 <BtUF+0xa8>
							portTICK_PERIOD_MS) == pdTRUE)
					{
						SendUpData(BasetoUpData);
 80021aa:	4e76      	ldr	r6, [pc, #472]	; (8002384 <BtUF+0x258>)
 80021ac:	466d      	mov	r5, sp
 80021ae:	f106 0410 	add.w	r4, r6, #16
 80021b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021ba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80021be:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80021c2:	f7fe fc69 	bl	8000a98 <SendUpData>
						xSemaphoreGive(UptoBaseDataRWFlagHandle);
 80021c6:	4b70      	ldr	r3, [pc, #448]	; (8002388 <BtUF+0x25c>)
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	2300      	movs	r3, #0
 80021cc:	2200      	movs	r2, #0
 80021ce:	2100      	movs	r1, #0
 80021d0:	f009 fc12 	bl	800b9f8 <xQueueGenericSend>
					}
					xSemaphoreGive(BasetoUpDataRWFlagHandle);
 80021d4:	4b6a      	ldr	r3, [pc, #424]	; (8002380 <BtUF+0x254>)
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	2300      	movs	r3, #0
 80021da:	2200      	movs	r2, #0
 80021dc:	2100      	movs	r1, #0
 80021de:	f009 fc0b 	bl	800b9f8 <xQueueGenericSend>
 80021e2:	e0c1      	b.n	8002368 <BtUF+0x23c>
				}
			}
		}
		else if (SensorCarbin % 2 == 0)	//发�?�主控仓数据
 80021e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f040 80b9 	bne.w	8002366 <BtUF+0x23a>
		{
			//汇�?�本仓传感器数据
			//仓位数据
			BasetoUpData.CabinNum = 0;
 80021f4:	4b63      	ldr	r3, [pc, #396]	; (8002384 <BtUF+0x258>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
			//漏水�?????�?????
			BasetoUpData.WaterDetect = HAL_GPIO_ReadPin(GPIOE,
 80021fa:	2140      	movs	r1, #64	; 0x40
 80021fc:	4863      	ldr	r0, [pc, #396]	; (800238c <BtUF+0x260>)
 80021fe:	f004 fbe3 	bl	80069c8 <HAL_GPIO_ReadPin>
 8002202:	4603      	mov	r3, r0
			GPIO_PIN_6) << 1;
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	b2da      	uxtb	r2, r3
			BasetoUpData.WaterDetect = HAL_GPIO_ReadPin(GPIOE,
 8002208:	4b5e      	ldr	r3, [pc, #376]	; (8002384 <BtUF+0x258>)
 800220a:	705a      	strb	r2, [r3, #1]
			//九轴数据
			if (xSemaphoreTake(WT931SensorDataRWFlagHandle,
 800220c:	4b60      	ldr	r3, [pc, #384]	; (8002390 <BtUF+0x264>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2101      	movs	r1, #1
 8002212:	4618      	mov	r0, r3
 8002214:	f009 fd7c 	bl	800bd10 <xQueueSemaphoreTake>
 8002218:	4603      	mov	r3, r0
 800221a:	2b01      	cmp	r3, #1
 800221c:	d136      	bne.n	800228c <BtUF+0x160>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				BasetoUpData.AccNum[0] = WT931SensorData.AccNum[0];
 800221e:	4b5d      	ldr	r3, [pc, #372]	; (8002394 <BtUF+0x268>)
 8002220:	881a      	ldrh	r2, [r3, #0]
 8002222:	4b58      	ldr	r3, [pc, #352]	; (8002384 <BtUF+0x258>)
 8002224:	815a      	strh	r2, [r3, #10]
				BasetoUpData.AccNum[1] = WT931SensorData.AccNum[1];
 8002226:	4b5b      	ldr	r3, [pc, #364]	; (8002394 <BtUF+0x268>)
 8002228:	885a      	ldrh	r2, [r3, #2]
 800222a:	4b56      	ldr	r3, [pc, #344]	; (8002384 <BtUF+0x258>)
 800222c:	819a      	strh	r2, [r3, #12]
				BasetoUpData.AccNum[2] = WT931SensorData.AccNum[2];
 800222e:	4b59      	ldr	r3, [pc, #356]	; (8002394 <BtUF+0x268>)
 8002230:	889a      	ldrh	r2, [r3, #4]
 8002232:	4b54      	ldr	r3, [pc, #336]	; (8002384 <BtUF+0x258>)
 8002234:	81da      	strh	r2, [r3, #14]
				BasetoUpData.RotNum[0] = WT931SensorData.RotNum[0];
 8002236:	4b57      	ldr	r3, [pc, #348]	; (8002394 <BtUF+0x268>)
 8002238:	88da      	ldrh	r2, [r3, #6]
 800223a:	4b52      	ldr	r3, [pc, #328]	; (8002384 <BtUF+0x258>)
 800223c:	821a      	strh	r2, [r3, #16]
				BasetoUpData.RotNum[1] = WT931SensorData.RotNum[1];
 800223e:	4b55      	ldr	r3, [pc, #340]	; (8002394 <BtUF+0x268>)
 8002240:	891a      	ldrh	r2, [r3, #8]
 8002242:	4b50      	ldr	r3, [pc, #320]	; (8002384 <BtUF+0x258>)
 8002244:	825a      	strh	r2, [r3, #18]
				BasetoUpData.RotNum[2] = WT931SensorData.RotNum[2];
 8002246:	4b53      	ldr	r3, [pc, #332]	; (8002394 <BtUF+0x268>)
 8002248:	895a      	ldrh	r2, [r3, #10]
 800224a:	4b4e      	ldr	r3, [pc, #312]	; (8002384 <BtUF+0x258>)
 800224c:	829a      	strh	r2, [r3, #20]
				BasetoUpData.EulNum[0] = WT931SensorData.EulNum[0];
 800224e:	4b51      	ldr	r3, [pc, #324]	; (8002394 <BtUF+0x268>)
 8002250:	899a      	ldrh	r2, [r3, #12]
 8002252:	4b4c      	ldr	r3, [pc, #304]	; (8002384 <BtUF+0x258>)
 8002254:	82da      	strh	r2, [r3, #22]
				BasetoUpData.EulNum[1] = WT931SensorData.EulNum[1];
 8002256:	4b4f      	ldr	r3, [pc, #316]	; (8002394 <BtUF+0x268>)
 8002258:	89da      	ldrh	r2, [r3, #14]
 800225a:	4b4a      	ldr	r3, [pc, #296]	; (8002384 <BtUF+0x258>)
 800225c:	831a      	strh	r2, [r3, #24]
				BasetoUpData.EulNum[2] = WT931SensorData.EulNum[2];
 800225e:	4b4d      	ldr	r3, [pc, #308]	; (8002394 <BtUF+0x268>)
 8002260:	8a1a      	ldrh	r2, [r3, #16]
 8002262:	4b48      	ldr	r3, [pc, #288]	; (8002384 <BtUF+0x258>)
 8002264:	835a      	strh	r2, [r3, #26]
				BasetoUpData.MagNum[0] = WT931SensorData.MagNum[0];
 8002266:	4b4b      	ldr	r3, [pc, #300]	; (8002394 <BtUF+0x268>)
 8002268:	8a5a      	ldrh	r2, [r3, #18]
 800226a:	4b46      	ldr	r3, [pc, #280]	; (8002384 <BtUF+0x258>)
 800226c:	839a      	strh	r2, [r3, #28]
				BasetoUpData.MagNum[1] = WT931SensorData.MagNum[1];
 800226e:	4b49      	ldr	r3, [pc, #292]	; (8002394 <BtUF+0x268>)
 8002270:	8a9a      	ldrh	r2, [r3, #20]
 8002272:	4b44      	ldr	r3, [pc, #272]	; (8002384 <BtUF+0x258>)
 8002274:	83da      	strh	r2, [r3, #30]
				BasetoUpData.MagNum[2] = WT931SensorData.MagNum[2];
 8002276:	4b47      	ldr	r3, [pc, #284]	; (8002394 <BtUF+0x268>)
 8002278:	8ada      	ldrh	r2, [r3, #22]
 800227a:	4b42      	ldr	r3, [pc, #264]	; (8002384 <BtUF+0x258>)
 800227c:	841a      	strh	r2, [r3, #32]
				xSemaphoreGive(WT931SensorDataRWFlagHandle);
 800227e:	4b44      	ldr	r3, [pc, #272]	; (8002390 <BtUF+0x264>)
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	2300      	movs	r3, #0
 8002284:	2200      	movs	r2, #0
 8002286:	2100      	movs	r1, #0
 8002288:	f009 fbb6 	bl	800b9f8 <xQueueGenericSend>
			}
			//温湿度大气压数据
			if (xSemaphoreTake(GY39SensorDataRWFlagHandle,
 800228c:	4b42      	ldr	r3, [pc, #264]	; (8002398 <BtUF+0x26c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2101      	movs	r1, #1
 8002292:	4618      	mov	r0, r3
 8002294:	f009 fd3c 	bl	800bd10 <xQueueSemaphoreTake>
 8002298:	4603      	mov	r3, r0
 800229a:	2b01      	cmp	r3, #1
 800229c:	d112      	bne.n	80022c4 <BtUF+0x198>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				BasetoUpData.CabinBaro = GY39SensorData.Baro;
 800229e:	4b3f      	ldr	r3, [pc, #252]	; (800239c <BtUF+0x270>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4a38      	ldr	r2, [pc, #224]	; (8002384 <BtUF+0x258>)
 80022a4:	6053      	str	r3, [r2, #4]
				BasetoUpData.CabinHum = GY39SensorData.Hum;
 80022a6:	4b3d      	ldr	r3, [pc, #244]	; (800239c <BtUF+0x270>)
 80022a8:	891a      	ldrh	r2, [r3, #8]
 80022aa:	4b36      	ldr	r3, [pc, #216]	; (8002384 <BtUF+0x258>)
 80022ac:	811a      	strh	r2, [r3, #8]
				BasetoUpData.CabinTemperature = GY39SensorData.Temperature;
 80022ae:	4b3b      	ldr	r3, [pc, #236]	; (800239c <BtUF+0x270>)
 80022b0:	881a      	ldrh	r2, [r3, #0]
 80022b2:	4b34      	ldr	r3, [pc, #208]	; (8002384 <BtUF+0x258>)
 80022b4:	805a      	strh	r2, [r3, #2]
				xSemaphoreGive(GY39SensorDataRWFlagHandle);
 80022b6:	4b38      	ldr	r3, [pc, #224]	; (8002398 <BtUF+0x26c>)
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	2300      	movs	r3, #0
 80022bc:	2200      	movs	r2, #0
 80022be:	2100      	movs	r1, #0
 80022c0:	f009 fb9a 	bl	800b9f8 <xQueueGenericSend>
			}
			//水深水温数据
			if (xSemaphoreTake(DeepSensorDataRWFlagHandle,
 80022c4:	4b36      	ldr	r3, [pc, #216]	; (80023a0 <BtUF+0x274>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2101      	movs	r1, #1
 80022ca:	4618      	mov	r0, r3
 80022cc:	f009 fd20 	bl	800bd10 <xQueueSemaphoreTake>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d10e      	bne.n	80022f4 <BtUF+0x1c8>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				BasetoUpData.WaterDepth = DeepSensorData.WaterDepth;
 80022d6:	4b33      	ldr	r3, [pc, #204]	; (80023a4 <BtUF+0x278>)
 80022d8:	885a      	ldrh	r2, [r3, #2]
 80022da:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <BtUF+0x258>)
 80022dc:	849a      	strh	r2, [r3, #36]	; 0x24
				BasetoUpData.WaterTemperature = DeepSensorData.WaterTemperature;
 80022de:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <BtUF+0x278>)
 80022e0:	881a      	ldrh	r2, [r3, #0]
 80022e2:	4b28      	ldr	r3, [pc, #160]	; (8002384 <BtUF+0x258>)
 80022e4:	845a      	strh	r2, [r3, #34]	; 0x22
				xSemaphoreGive(DeepSensorDataRWFlagHandle);
 80022e6:	4b2e      	ldr	r3, [pc, #184]	; (80023a0 <BtUF+0x274>)
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	2300      	movs	r3, #0
 80022ec:	2200      	movs	r2, #0
 80022ee:	2100      	movs	r1, #0
 80022f0:	f009 fb82 	bl	800b9f8 <xQueueGenericSend>
			}
			//声呐数据
			if (xSemaphoreTake(P30SensorDataRWFlagHandle,
 80022f4:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <BtUF+0x27c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2101      	movs	r1, #1
 80022fa:	4618      	mov	r0, r3
 80022fc:	f009 fd08 	bl	800bd10 <xQueueSemaphoreTake>
 8002300:	4603      	mov	r3, r0
 8002302:	2b01      	cmp	r3, #1
 8002304:	d10e      	bne.n	8002324 <BtUF+0x1f8>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				BasetoUpData.DepthToBottom = P30SensorData.DepthToBottom;
 8002306:	4b29      	ldr	r3, [pc, #164]	; (80023ac <BtUF+0x280>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a1e      	ldr	r2, [pc, #120]	; (8002384 <BtUF+0x258>)
 800230c:	6293      	str	r3, [r2, #40]	; 0x28
				BasetoUpData.Confidence = P30SensorData.Confidence;
 800230e:	4b27      	ldr	r3, [pc, #156]	; (80023ac <BtUF+0x280>)
 8002310:	889a      	ldrh	r2, [r3, #4]
 8002312:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <BtUF+0x258>)
 8002314:	84da      	strh	r2, [r3, #38]	; 0x26
				xSemaphoreGive(P30SensorDataRWFlagHandle);
 8002316:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <BtUF+0x27c>)
 8002318:	6818      	ldr	r0, [r3, #0]
 800231a:	2300      	movs	r3, #0
 800231c:	2200      	movs	r2, #0
 800231e:	2100      	movs	r1, #0
 8002320:	f009 fb6a 	bl	800b9f8 <xQueueGenericSend>
			}
			//上传数据
			if (xSemaphoreTake(UptoBaseDataRWFlagHandle,
 8002324:	4b18      	ldr	r3, [pc, #96]	; (8002388 <BtUF+0x25c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2101      	movs	r1, #1
 800232a:	4618      	mov	r0, r3
 800232c:	f009 fcf0 	bl	800bd10 <xQueueSemaphoreTake>
 8002330:	4603      	mov	r3, r0
 8002332:	2b01      	cmp	r3, #1
 8002334:	d117      	bne.n	8002366 <BtUF+0x23a>
					portTICK_PERIOD_MS) == pdTRUE)
			{
				SendUpData(BasetoUpData);
 8002336:	4e13      	ldr	r6, [pc, #76]	; (8002384 <BtUF+0x258>)
 8002338:	466d      	mov	r5, sp
 800233a:	f106 0410 	add.w	r4, r6, #16
 800233e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002342:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002346:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800234a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800234e:	f7fe fba3 	bl	8000a98 <SendUpData>
				xSemaphoreGive(UptoBaseDataRWFlagHandle);
 8002352:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <BtUF+0x25c>)
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	2300      	movs	r3, #0
 8002358:	2200      	movs	r2, #0
 800235a:	2100      	movs	r1, #0
 800235c:	f009 fb4c 	bl	800b9f8 <xQueueGenericSend>
 8002360:	e002      	b.n	8002368 <BtUF+0x23c>
						goto BAD_CABIN_NUM;
 8002362:	bf00      	nop
 8002364:	e000      	b.n	8002368 <BtUF+0x23c>
			}
		}
		BAD_CABIN_NUM: SensorCarbin++;
 8002366:	bf00      	nop
 8002368:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800236c:	3301      	adds	r3, #1
 800236e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		HAL_IWDG_Refresh(&hiwdg1);
 8002372:	480f      	ldr	r0, [pc, #60]	; (80023b0 <BtUF+0x284>)
 8002374:	f004 fba8 	bl	8006ac8 <HAL_IWDG_Refresh>
		if (SensorCarbin % 2 == 1) //发�?�推进器控制仓数�?????
 8002378:	e6df      	b.n	800213a <BtUF+0xe>
 800237a:	bf00      	nop
 800237c:	200045e8 	.word	0x200045e8
 8002380:	20004828 	.word	0x20004828
 8002384:	2000420c 	.word	0x2000420c
 8002388:	20004560 	.word	0x20004560
 800238c:	58021000 	.word	0x58021000
 8002390:	20004364 	.word	0x20004364
 8002394:	20004240 	.word	0x20004240
 8002398:	2000423c 	.word	0x2000423c
 800239c:	20004564 	.word	0x20004564
 80023a0:	20004200 	.word	0x20004200
 80023a4:	2000467c 	.word	0x2000467c
 80023a8:	200041fc 	.word	0x200041fc
 80023ac:	20004820 	.word	0x20004820
 80023b0:	200040e4 	.word	0x200040e4

080023b4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d101      	bne.n	80023ca <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 80023c6:	f001 f9d9 	bl	800377c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40001000 	.word	0x40001000

080023d8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023dc:	b672      	cpsid	i
}
 80023de:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80023e0:	e7fe      	b.n	80023e0 <Error_Handler+0x8>
	...

080023e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ea:	4b0c      	ldr	r3, [pc, #48]	; (800241c <HAL_MspInit+0x38>)
 80023ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023f0:	4a0a      	ldr	r2, [pc, #40]	; (800241c <HAL_MspInit+0x38>)
 80023f2:	f043 0302 	orr.w	r3, r3, #2
 80023f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <HAL_MspInit+0x38>)
 80023fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002408:	2200      	movs	r2, #0
 800240a:	210f      	movs	r1, #15
 800240c:	f06f 0001 	mvn.w	r0, #1
 8002410:	f001 fabc 	bl	800398c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	58024400 	.word	0x58024400

08002420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b094      	sub	sp, #80	; 0x50
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a96      	ldr	r2, [pc, #600]	; (8002698 <HAL_UART_MspInit+0x278>)
 800243e:	4293      	cmp	r3, r2
 8002440:	f040 8091 	bne.w	8002566 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002444:	4b95      	ldr	r3, [pc, #596]	; (800269c <HAL_UART_MspInit+0x27c>)
 8002446:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800244a:	4a94      	ldr	r2, [pc, #592]	; (800269c <HAL_UART_MspInit+0x27c>)
 800244c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002450:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002454:	4b91      	ldr	r3, [pc, #580]	; (800269c <HAL_UART_MspInit+0x27c>)
 8002456:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800245a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800245e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002460:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002462:	4b8e      	ldr	r3, [pc, #568]	; (800269c <HAL_UART_MspInit+0x27c>)
 8002464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002468:	4a8c      	ldr	r2, [pc, #560]	; (800269c <HAL_UART_MspInit+0x27c>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002472:	4b8a      	ldr	r3, [pc, #552]	; (800269c <HAL_UART_MspInit+0x27c>)
 8002474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	637b      	str	r3, [r7, #52]	; 0x34
 800247e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002480:	2303      	movs	r3, #3
 8002482:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002490:	2308      	movs	r3, #8
 8002492:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002494:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002498:	4619      	mov	r1, r3
 800249a:	4881      	ldr	r0, [pc, #516]	; (80026a0 <HAL_UART_MspInit+0x280>)
 800249c:	f004 f8e4 	bl	8006668 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream5;
 80024a0:	4b80      	ldr	r3, [pc, #512]	; (80026a4 <HAL_UART_MspInit+0x284>)
 80024a2:	4a81      	ldr	r2, [pc, #516]	; (80026a8 <HAL_UART_MspInit+0x288>)
 80024a4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80024a6:	4b7f      	ldr	r3, [pc, #508]	; (80026a4 <HAL_UART_MspInit+0x284>)
 80024a8:	223f      	movs	r2, #63	; 0x3f
 80024aa:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024ac:	4b7d      	ldr	r3, [pc, #500]	; (80026a4 <HAL_UART_MspInit+0x284>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024b2:	4b7c      	ldr	r3, [pc, #496]	; (80026a4 <HAL_UART_MspInit+0x284>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024b8:	4b7a      	ldr	r3, [pc, #488]	; (80026a4 <HAL_UART_MspInit+0x284>)
 80024ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024be:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024c0:	4b78      	ldr	r3, [pc, #480]	; (80026a4 <HAL_UART_MspInit+0x284>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024c6:	4b77      	ldr	r3, [pc, #476]	; (80026a4 <HAL_UART_MspInit+0x284>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80024cc:	4b75      	ldr	r3, [pc, #468]	; (80026a4 <HAL_UART_MspInit+0x284>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024d2:	4b74      	ldr	r3, [pc, #464]	; (80026a4 <HAL_UART_MspInit+0x284>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024d8:	4b72      	ldr	r3, [pc, #456]	; (80026a4 <HAL_UART_MspInit+0x284>)
 80024da:	2200      	movs	r2, #0
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80024de:	4871      	ldr	r0, [pc, #452]	; (80026a4 <HAL_UART_MspInit+0x284>)
 80024e0:	f001 fa7c 	bl	80039dc <HAL_DMA_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80024ea:	f7ff ff75 	bl	80023d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a6c      	ldr	r2, [pc, #432]	; (80026a4 <HAL_UART_MspInit+0x284>)
 80024f2:	67da      	str	r2, [r3, #124]	; 0x7c
 80024f4:	4a6b      	ldr	r2, [pc, #428]	; (80026a4 <HAL_UART_MspInit+0x284>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream6;
 80024fa:	4b6c      	ldr	r3, [pc, #432]	; (80026ac <HAL_UART_MspInit+0x28c>)
 80024fc:	4a6c      	ldr	r2, [pc, #432]	; (80026b0 <HAL_UART_MspInit+0x290>)
 80024fe:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8002500:	4b6a      	ldr	r3, [pc, #424]	; (80026ac <HAL_UART_MspInit+0x28c>)
 8002502:	2240      	movs	r2, #64	; 0x40
 8002504:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002506:	4b69      	ldr	r3, [pc, #420]	; (80026ac <HAL_UART_MspInit+0x28c>)
 8002508:	2240      	movs	r2, #64	; 0x40
 800250a:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800250c:	4b67      	ldr	r3, [pc, #412]	; (80026ac <HAL_UART_MspInit+0x28c>)
 800250e:	2200      	movs	r2, #0
 8002510:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002512:	4b66      	ldr	r3, [pc, #408]	; (80026ac <HAL_UART_MspInit+0x28c>)
 8002514:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002518:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800251a:	4b64      	ldr	r3, [pc, #400]	; (80026ac <HAL_UART_MspInit+0x28c>)
 800251c:	2200      	movs	r2, #0
 800251e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002520:	4b62      	ldr	r3, [pc, #392]	; (80026ac <HAL_UART_MspInit+0x28c>)
 8002522:	2200      	movs	r2, #0
 8002524:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002526:	4b61      	ldr	r3, [pc, #388]	; (80026ac <HAL_UART_MspInit+0x28c>)
 8002528:	2200      	movs	r2, #0
 800252a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800252c:	4b5f      	ldr	r3, [pc, #380]	; (80026ac <HAL_UART_MspInit+0x28c>)
 800252e:	2200      	movs	r2, #0
 8002530:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002532:	4b5e      	ldr	r3, [pc, #376]	; (80026ac <HAL_UART_MspInit+0x28c>)
 8002534:	2200      	movs	r2, #0
 8002536:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002538:	485c      	ldr	r0, [pc, #368]	; (80026ac <HAL_UART_MspInit+0x28c>)
 800253a:	f001 fa4f 	bl	80039dc <HAL_DMA_Init>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002544:	f7ff ff48 	bl	80023d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a58      	ldr	r2, [pc, #352]	; (80026ac <HAL_UART_MspInit+0x28c>)
 800254c:	679a      	str	r2, [r3, #120]	; 0x78
 800254e:	4a57      	ldr	r2, [pc, #348]	; (80026ac <HAL_UART_MspInit+0x28c>)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002554:	2200      	movs	r2, #0
 8002556:	2105      	movs	r1, #5
 8002558:	2034      	movs	r0, #52	; 0x34
 800255a:	f001 fa17 	bl	800398c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800255e:	2034      	movs	r0, #52	; 0x34
 8002560:	f001 fa2e 	bl	80039c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002564:	e2fc      	b.n	8002b60 <HAL_UART_MspInit+0x740>
  else if(huart->Instance==UART5)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a52      	ldr	r2, [pc, #328]	; (80026b4 <HAL_UART_MspInit+0x294>)
 800256c:	4293      	cmp	r3, r2
 800256e:	f040 80ad 	bne.w	80026cc <HAL_UART_MspInit+0x2ac>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002572:	4b4a      	ldr	r3, [pc, #296]	; (800269c <HAL_UART_MspInit+0x27c>)
 8002574:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002578:	4a48      	ldr	r2, [pc, #288]	; (800269c <HAL_UART_MspInit+0x27c>)
 800257a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800257e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002582:	4b46      	ldr	r3, [pc, #280]	; (800269c <HAL_UART_MspInit+0x27c>)
 8002584:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002588:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800258c:	633b      	str	r3, [r7, #48]	; 0x30
 800258e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002590:	4b42      	ldr	r3, [pc, #264]	; (800269c <HAL_UART_MspInit+0x27c>)
 8002592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002596:	4a41      	ldr	r2, [pc, #260]	; (800269c <HAL_UART_MspInit+0x27c>)
 8002598:	f043 0302 	orr.w	r3, r3, #2
 800259c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025a0:	4b3e      	ldr	r3, [pc, #248]	; (800269c <HAL_UART_MspInit+0x27c>)
 80025a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80025ae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80025b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b4:	2302      	movs	r3, #2
 80025b6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025bc:	2300      	movs	r3, #0
 80025be:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80025c0:	230e      	movs	r3, #14
 80025c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025c8:	4619      	mov	r1, r3
 80025ca:	483b      	ldr	r0, [pc, #236]	; (80026b8 <HAL_UART_MspInit+0x298>)
 80025cc:	f004 f84c 	bl	8006668 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream4;
 80025d0:	4b3a      	ldr	r3, [pc, #232]	; (80026bc <HAL_UART_MspInit+0x29c>)
 80025d2:	4a3b      	ldr	r2, [pc, #236]	; (80026c0 <HAL_UART_MspInit+0x2a0>)
 80025d4:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 80025d6:	4b39      	ldr	r3, [pc, #228]	; (80026bc <HAL_UART_MspInit+0x29c>)
 80025d8:	2241      	movs	r2, #65	; 0x41
 80025da:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025dc:	4b37      	ldr	r3, [pc, #220]	; (80026bc <HAL_UART_MspInit+0x29c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025e2:	4b36      	ldr	r3, [pc, #216]	; (80026bc <HAL_UART_MspInit+0x29c>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025e8:	4b34      	ldr	r3, [pc, #208]	; (80026bc <HAL_UART_MspInit+0x29c>)
 80025ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025ee:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025f0:	4b32      	ldr	r3, [pc, #200]	; (80026bc <HAL_UART_MspInit+0x29c>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025f6:	4b31      	ldr	r3, [pc, #196]	; (80026bc <HAL_UART_MspInit+0x29c>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80025fc:	4b2f      	ldr	r3, [pc, #188]	; (80026bc <HAL_UART_MspInit+0x29c>)
 80025fe:	2200      	movs	r2, #0
 8002600:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002602:	4b2e      	ldr	r3, [pc, #184]	; (80026bc <HAL_UART_MspInit+0x29c>)
 8002604:	2200      	movs	r2, #0
 8002606:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002608:	4b2c      	ldr	r3, [pc, #176]	; (80026bc <HAL_UART_MspInit+0x29c>)
 800260a:	2200      	movs	r2, #0
 800260c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800260e:	482b      	ldr	r0, [pc, #172]	; (80026bc <HAL_UART_MspInit+0x29c>)
 8002610:	f001 f9e4 	bl	80039dc <HAL_DMA_Init>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 800261a:	f7ff fedd 	bl	80023d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a26      	ldr	r2, [pc, #152]	; (80026bc <HAL_UART_MspInit+0x29c>)
 8002622:	67da      	str	r2, [r3, #124]	; 0x7c
 8002624:	4a25      	ldr	r2, [pc, #148]	; (80026bc <HAL_UART_MspInit+0x29c>)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA2_Stream2;
 800262a:	4b26      	ldr	r3, [pc, #152]	; (80026c4 <HAL_UART_MspInit+0x2a4>)
 800262c:	4a26      	ldr	r2, [pc, #152]	; (80026c8 <HAL_UART_MspInit+0x2a8>)
 800262e:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8002630:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <HAL_UART_MspInit+0x2a4>)
 8002632:	2242      	movs	r2, #66	; 0x42
 8002634:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002636:	4b23      	ldr	r3, [pc, #140]	; (80026c4 <HAL_UART_MspInit+0x2a4>)
 8002638:	2240      	movs	r2, #64	; 0x40
 800263a:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800263c:	4b21      	ldr	r3, [pc, #132]	; (80026c4 <HAL_UART_MspInit+0x2a4>)
 800263e:	2200      	movs	r2, #0
 8002640:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002642:	4b20      	ldr	r3, [pc, #128]	; (80026c4 <HAL_UART_MspInit+0x2a4>)
 8002644:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002648:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800264a:	4b1e      	ldr	r3, [pc, #120]	; (80026c4 <HAL_UART_MspInit+0x2a4>)
 800264c:	2200      	movs	r2, #0
 800264e:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002650:	4b1c      	ldr	r3, [pc, #112]	; (80026c4 <HAL_UART_MspInit+0x2a4>)
 8002652:	2200      	movs	r2, #0
 8002654:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8002656:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <HAL_UART_MspInit+0x2a4>)
 8002658:	2200      	movs	r2, #0
 800265a:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 800265c:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <HAL_UART_MspInit+0x2a4>)
 800265e:	2200      	movs	r2, #0
 8002660:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002662:	4b18      	ldr	r3, [pc, #96]	; (80026c4 <HAL_UART_MspInit+0x2a4>)
 8002664:	2200      	movs	r2, #0
 8002666:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8002668:	4816      	ldr	r0, [pc, #88]	; (80026c4 <HAL_UART_MspInit+0x2a4>)
 800266a:	f001 f9b7 	bl	80039dc <HAL_DMA_Init>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8002674:	f7ff feb0 	bl	80023d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a12      	ldr	r2, [pc, #72]	; (80026c4 <HAL_UART_MspInit+0x2a4>)
 800267c:	679a      	str	r2, [r3, #120]	; 0x78
 800267e:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <HAL_UART_MspInit+0x2a4>)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002684:	2200      	movs	r2, #0
 8002686:	2105      	movs	r1, #5
 8002688:	2035      	movs	r0, #53	; 0x35
 800268a:	f001 f97f 	bl	800398c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800268e:	2035      	movs	r0, #53	; 0x35
 8002690:	f001 f996 	bl	80039c0 <HAL_NVIC_EnableIRQ>
}
 8002694:	e264      	b.n	8002b60 <HAL_UART_MspInit+0x740>
 8002696:	bf00      	nop
 8002698:	40004c00 	.word	0x40004c00
 800269c:	58024400 	.word	0x58024400
 80026a0:	58020000 	.word	0x58020000
 80026a4:	20003ff4 	.word	0x20003ff4
 80026a8:	40020088 	.word	0x40020088
 80026ac:	20004830 	.word	0x20004830
 80026b0:	400200a0 	.word	0x400200a0
 80026b4:	40005000 	.word	0x40005000
 80026b8:	58020400 	.word	0x58020400
 80026bc:	200047a8 	.word	0x200047a8
 80026c0:	40020070 	.word	0x40020070
 80026c4:	200048a8 	.word	0x200048a8
 80026c8:	40020440 	.word	0x40020440
  else if(huart->Instance==UART8)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a96      	ldr	r2, [pc, #600]	; (800292c <HAL_UART_MspInit+0x50c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	f040 8091 	bne.w	80027fa <HAL_UART_MspInit+0x3da>
    __HAL_RCC_UART8_CLK_ENABLE();
 80026d8:	4b95      	ldr	r3, [pc, #596]	; (8002930 <HAL_UART_MspInit+0x510>)
 80026da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026de:	4a94      	ldr	r2, [pc, #592]	; (8002930 <HAL_UART_MspInit+0x510>)
 80026e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026e8:	4b91      	ldr	r3, [pc, #580]	; (8002930 <HAL_UART_MspInit+0x510>)
 80026ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80026f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026f6:	4b8e      	ldr	r3, [pc, #568]	; (8002930 <HAL_UART_MspInit+0x510>)
 80026f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026fc:	4a8c      	ldr	r2, [pc, #560]	; (8002930 <HAL_UART_MspInit+0x510>)
 80026fe:	f043 0310 	orr.w	r3, r3, #16
 8002702:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002706:	4b8a      	ldr	r3, [pc, #552]	; (8002930 <HAL_UART_MspInit+0x510>)
 8002708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002714:	2303      	movs	r3, #3
 8002716:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002718:	2302      	movs	r3, #2
 800271a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002720:	2300      	movs	r3, #0
 8002722:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002724:	2308      	movs	r3, #8
 8002726:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002728:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800272c:	4619      	mov	r1, r3
 800272e:	4881      	ldr	r0, [pc, #516]	; (8002934 <HAL_UART_MspInit+0x514>)
 8002730:	f003 ff9a 	bl	8006668 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream7;
 8002734:	4b80      	ldr	r3, [pc, #512]	; (8002938 <HAL_UART_MspInit+0x518>)
 8002736:	4a81      	ldr	r2, [pc, #516]	; (800293c <HAL_UART_MspInit+0x51c>)
 8002738:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 800273a:	4b7f      	ldr	r3, [pc, #508]	; (8002938 <HAL_UART_MspInit+0x518>)
 800273c:	2251      	movs	r2, #81	; 0x51
 800273e:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002740:	4b7d      	ldr	r3, [pc, #500]	; (8002938 <HAL_UART_MspInit+0x518>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002746:	4b7c      	ldr	r3, [pc, #496]	; (8002938 <HAL_UART_MspInit+0x518>)
 8002748:	2200      	movs	r2, #0
 800274a:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 800274c:	4b7a      	ldr	r3, [pc, #488]	; (8002938 <HAL_UART_MspInit+0x518>)
 800274e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002752:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002754:	4b78      	ldr	r3, [pc, #480]	; (8002938 <HAL_UART_MspInit+0x518>)
 8002756:	2200      	movs	r2, #0
 8002758:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800275a:	4b77      	ldr	r3, [pc, #476]	; (8002938 <HAL_UART_MspInit+0x518>)
 800275c:	2200      	movs	r2, #0
 800275e:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8002760:	4b75      	ldr	r3, [pc, #468]	; (8002938 <HAL_UART_MspInit+0x518>)
 8002762:	2200      	movs	r2, #0
 8002764:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002766:	4b74      	ldr	r3, [pc, #464]	; (8002938 <HAL_UART_MspInit+0x518>)
 8002768:	2200      	movs	r2, #0
 800276a:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800276c:	4b72      	ldr	r3, [pc, #456]	; (8002938 <HAL_UART_MspInit+0x518>)
 800276e:	2200      	movs	r2, #0
 8002770:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8002772:	4871      	ldr	r0, [pc, #452]	; (8002938 <HAL_UART_MspInit+0x518>)
 8002774:	f001 f932 	bl	80039dc <HAL_DMA_Init>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_UART_MspInit+0x362>
      Error_Handler();
 800277e:	f7ff fe2b 	bl	80023d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a6c      	ldr	r2, [pc, #432]	; (8002938 <HAL_UART_MspInit+0x518>)
 8002786:	67da      	str	r2, [r3, #124]	; 0x7c
 8002788:	4a6b      	ldr	r2, [pc, #428]	; (8002938 <HAL_UART_MspInit+0x518>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart8_tx.Instance = DMA2_Stream0;
 800278e:	4b6c      	ldr	r3, [pc, #432]	; (8002940 <HAL_UART_MspInit+0x520>)
 8002790:	4a6c      	ldr	r2, [pc, #432]	; (8002944 <HAL_UART_MspInit+0x524>)
 8002792:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8002794:	4b6a      	ldr	r3, [pc, #424]	; (8002940 <HAL_UART_MspInit+0x520>)
 8002796:	2252      	movs	r2, #82	; 0x52
 8002798:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800279a:	4b69      	ldr	r3, [pc, #420]	; (8002940 <HAL_UART_MspInit+0x520>)
 800279c:	2240      	movs	r2, #64	; 0x40
 800279e:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027a0:	4b67      	ldr	r3, [pc, #412]	; (8002940 <HAL_UART_MspInit+0x520>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027a6:	4b66      	ldr	r3, [pc, #408]	; (8002940 <HAL_UART_MspInit+0x520>)
 80027a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027ac:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027ae:	4b64      	ldr	r3, [pc, #400]	; (8002940 <HAL_UART_MspInit+0x520>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027b4:	4b62      	ldr	r3, [pc, #392]	; (8002940 <HAL_UART_MspInit+0x520>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 80027ba:	4b61      	ldr	r3, [pc, #388]	; (8002940 <HAL_UART_MspInit+0x520>)
 80027bc:	2200      	movs	r2, #0
 80027be:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027c0:	4b5f      	ldr	r3, [pc, #380]	; (8002940 <HAL_UART_MspInit+0x520>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027c6:	4b5e      	ldr	r3, [pc, #376]	; (8002940 <HAL_UART_MspInit+0x520>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 80027cc:	485c      	ldr	r0, [pc, #368]	; (8002940 <HAL_UART_MspInit+0x520>)
 80027ce:	f001 f905 	bl	80039dc <HAL_DMA_Init>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_UART_MspInit+0x3bc>
      Error_Handler();
 80027d8:	f7ff fdfe 	bl	80023d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a58      	ldr	r2, [pc, #352]	; (8002940 <HAL_UART_MspInit+0x520>)
 80027e0:	679a      	str	r2, [r3, #120]	; 0x78
 80027e2:	4a57      	ldr	r2, [pc, #348]	; (8002940 <HAL_UART_MspInit+0x520>)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 80027e8:	2200      	movs	r2, #0
 80027ea:	2105      	movs	r1, #5
 80027ec:	2053      	movs	r0, #83	; 0x53
 80027ee:	f001 f8cd 	bl	800398c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80027f2:	2053      	movs	r0, #83	; 0x53
 80027f4:	f001 f8e4 	bl	80039c0 <HAL_NVIC_EnableIRQ>
}
 80027f8:	e1b2      	b.n	8002b60 <HAL_UART_MspInit+0x740>
  else if(huart->Instance==USART1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a52      	ldr	r2, [pc, #328]	; (8002948 <HAL_UART_MspInit+0x528>)
 8002800:	4293      	cmp	r3, r2
 8002802:	f040 80ad 	bne.w	8002960 <HAL_UART_MspInit+0x540>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002806:	4b4a      	ldr	r3, [pc, #296]	; (8002930 <HAL_UART_MspInit+0x510>)
 8002808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800280c:	4a48      	ldr	r2, [pc, #288]	; (8002930 <HAL_UART_MspInit+0x510>)
 800280e:	f043 0310 	orr.w	r3, r3, #16
 8002812:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002816:	4b46      	ldr	r3, [pc, #280]	; (8002930 <HAL_UART_MspInit+0x510>)
 8002818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	623b      	str	r3, [r7, #32]
 8002822:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002824:	4b42      	ldr	r3, [pc, #264]	; (8002930 <HAL_UART_MspInit+0x510>)
 8002826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800282a:	4a41      	ldr	r2, [pc, #260]	; (8002930 <HAL_UART_MspInit+0x510>)
 800282c:	f043 0302 	orr.w	r3, r3, #2
 8002830:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002834:	4b3e      	ldr	r3, [pc, #248]	; (8002930 <HAL_UART_MspInit+0x510>)
 8002836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	61fb      	str	r3, [r7, #28]
 8002840:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002842:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002846:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002848:	2302      	movs	r3, #2
 800284a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002850:	2300      	movs	r3, #0
 8002852:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002854:	2304      	movs	r3, #4
 8002856:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002858:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800285c:	4619      	mov	r1, r3
 800285e:	483b      	ldr	r0, [pc, #236]	; (800294c <HAL_UART_MspInit+0x52c>)
 8002860:	f003 ff02 	bl	8006668 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8002864:	4b3a      	ldr	r3, [pc, #232]	; (8002950 <HAL_UART_MspInit+0x530>)
 8002866:	4a3b      	ldr	r2, [pc, #236]	; (8002954 <HAL_UART_MspInit+0x534>)
 8002868:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800286a:	4b39      	ldr	r3, [pc, #228]	; (8002950 <HAL_UART_MspInit+0x530>)
 800286c:	2229      	movs	r2, #41	; 0x29
 800286e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002870:	4b37      	ldr	r3, [pc, #220]	; (8002950 <HAL_UART_MspInit+0x530>)
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002876:	4b36      	ldr	r3, [pc, #216]	; (8002950 <HAL_UART_MspInit+0x530>)
 8002878:	2200      	movs	r2, #0
 800287a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800287c:	4b34      	ldr	r3, [pc, #208]	; (8002950 <HAL_UART_MspInit+0x530>)
 800287e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002882:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002884:	4b32      	ldr	r3, [pc, #200]	; (8002950 <HAL_UART_MspInit+0x530>)
 8002886:	2200      	movs	r2, #0
 8002888:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800288a:	4b31      	ldr	r3, [pc, #196]	; (8002950 <HAL_UART_MspInit+0x530>)
 800288c:	2200      	movs	r2, #0
 800288e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002890:	4b2f      	ldr	r3, [pc, #188]	; (8002950 <HAL_UART_MspInit+0x530>)
 8002892:	2200      	movs	r2, #0
 8002894:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002896:	4b2e      	ldr	r3, [pc, #184]	; (8002950 <HAL_UART_MspInit+0x530>)
 8002898:	2200      	movs	r2, #0
 800289a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800289c:	4b2c      	ldr	r3, [pc, #176]	; (8002950 <HAL_UART_MspInit+0x530>)
 800289e:	2200      	movs	r2, #0
 80028a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80028a2:	482b      	ldr	r0, [pc, #172]	; (8002950 <HAL_UART_MspInit+0x530>)
 80028a4:	f001 f89a 	bl	80039dc <HAL_DMA_Init>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_UART_MspInit+0x492>
      Error_Handler();
 80028ae:	f7ff fd93 	bl	80023d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a26      	ldr	r2, [pc, #152]	; (8002950 <HAL_UART_MspInit+0x530>)
 80028b6:	67da      	str	r2, [r3, #124]	; 0x7c
 80028b8:	4a25      	ldr	r2, [pc, #148]	; (8002950 <HAL_UART_MspInit+0x530>)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80028be:	4b26      	ldr	r3, [pc, #152]	; (8002958 <HAL_UART_MspInit+0x538>)
 80028c0:	4a26      	ldr	r2, [pc, #152]	; (800295c <HAL_UART_MspInit+0x53c>)
 80028c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80028c4:	4b24      	ldr	r3, [pc, #144]	; (8002958 <HAL_UART_MspInit+0x538>)
 80028c6:	222a      	movs	r2, #42	; 0x2a
 80028c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028ca:	4b23      	ldr	r3, [pc, #140]	; (8002958 <HAL_UART_MspInit+0x538>)
 80028cc:	2240      	movs	r2, #64	; 0x40
 80028ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028d0:	4b21      	ldr	r3, [pc, #132]	; (8002958 <HAL_UART_MspInit+0x538>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028d6:	4b20      	ldr	r3, [pc, #128]	; (8002958 <HAL_UART_MspInit+0x538>)
 80028d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028dc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028de:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <HAL_UART_MspInit+0x538>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028e4:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <HAL_UART_MspInit+0x538>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80028ea:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <HAL_UART_MspInit+0x538>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028f0:	4b19      	ldr	r3, [pc, #100]	; (8002958 <HAL_UART_MspInit+0x538>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028f6:	4b18      	ldr	r3, [pc, #96]	; (8002958 <HAL_UART_MspInit+0x538>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80028fc:	4816      	ldr	r0, [pc, #88]	; (8002958 <HAL_UART_MspInit+0x538>)
 80028fe:	f001 f86d 	bl	80039dc <HAL_DMA_Init>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <HAL_UART_MspInit+0x4ec>
      Error_Handler();
 8002908:	f7ff fd66 	bl	80023d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a12      	ldr	r2, [pc, #72]	; (8002958 <HAL_UART_MspInit+0x538>)
 8002910:	679a      	str	r2, [r3, #120]	; 0x78
 8002912:	4a11      	ldr	r2, [pc, #68]	; (8002958 <HAL_UART_MspInit+0x538>)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002918:	2200      	movs	r2, #0
 800291a:	2105      	movs	r1, #5
 800291c:	2025      	movs	r0, #37	; 0x25
 800291e:	f001 f835 	bl	800398c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002922:	2025      	movs	r0, #37	; 0x25
 8002924:	f001 f84c 	bl	80039c0 <HAL_NVIC_EnableIRQ>
}
 8002928:	e11a      	b.n	8002b60 <HAL_UART_MspInit+0x740>
 800292a:	bf00      	nop
 800292c:	40007c00 	.word	0x40007c00
 8002930:	58024400 	.word	0x58024400
 8002934:	58021000 	.word	0x58021000
 8002938:	20004458 	.word	0x20004458
 800293c:	400200b8 	.word	0x400200b8
 8002940:	20004570 	.word	0x20004570
 8002944:	40020410 	.word	0x40020410
 8002948:	40011000 	.word	0x40011000
 800294c:	58020400 	.word	0x58020400
 8002950:	20004368 	.word	0x20004368
 8002954:	40020010 	.word	0x40020010
 8002958:	2000425c 	.word	0x2000425c
 800295c:	40020028 	.word	0x40020028
  else if(huart->Instance==USART2)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a80      	ldr	r2, [pc, #512]	; (8002b68 <HAL_UART_MspInit+0x748>)
 8002966:	4293      	cmp	r3, r2
 8002968:	f040 8091 	bne.w	8002a8e <HAL_UART_MspInit+0x66e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800296c:	4b7f      	ldr	r3, [pc, #508]	; (8002b6c <HAL_UART_MspInit+0x74c>)
 800296e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002972:	4a7e      	ldr	r2, [pc, #504]	; (8002b6c <HAL_UART_MspInit+0x74c>)
 8002974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002978:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800297c:	4b7b      	ldr	r3, [pc, #492]	; (8002b6c <HAL_UART_MspInit+0x74c>)
 800297e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002986:	61bb      	str	r3, [r7, #24]
 8002988:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800298a:	4b78      	ldr	r3, [pc, #480]	; (8002b6c <HAL_UART_MspInit+0x74c>)
 800298c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002990:	4a76      	ldr	r2, [pc, #472]	; (8002b6c <HAL_UART_MspInit+0x74c>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800299a:	4b74      	ldr	r3, [pc, #464]	; (8002b6c <HAL_UART_MspInit+0x74c>)
 800299c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029a8:	230c      	movs	r3, #12
 80029aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ac:	2302      	movs	r3, #2
 80029ae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b4:	2300      	movs	r3, #0
 80029b6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029b8:	2307      	movs	r3, #7
 80029ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029c0:	4619      	mov	r1, r3
 80029c2:	486b      	ldr	r0, [pc, #428]	; (8002b70 <HAL_UART_MspInit+0x750>)
 80029c4:	f003 fe50 	bl	8006668 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream2;
 80029c8:	4b6a      	ldr	r3, [pc, #424]	; (8002b74 <HAL_UART_MspInit+0x754>)
 80029ca:	4a6b      	ldr	r2, [pc, #428]	; (8002b78 <HAL_UART_MspInit+0x758>)
 80029cc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80029ce:	4b69      	ldr	r3, [pc, #420]	; (8002b74 <HAL_UART_MspInit+0x754>)
 80029d0:	222b      	movs	r2, #43	; 0x2b
 80029d2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029d4:	4b67      	ldr	r3, [pc, #412]	; (8002b74 <HAL_UART_MspInit+0x754>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029da:	4b66      	ldr	r3, [pc, #408]	; (8002b74 <HAL_UART_MspInit+0x754>)
 80029dc:	2200      	movs	r2, #0
 80029de:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029e0:	4b64      	ldr	r3, [pc, #400]	; (8002b74 <HAL_UART_MspInit+0x754>)
 80029e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029e6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029e8:	4b62      	ldr	r3, [pc, #392]	; (8002b74 <HAL_UART_MspInit+0x754>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029ee:	4b61      	ldr	r3, [pc, #388]	; (8002b74 <HAL_UART_MspInit+0x754>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80029f4:	4b5f      	ldr	r3, [pc, #380]	; (8002b74 <HAL_UART_MspInit+0x754>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029fa:	4b5e      	ldr	r3, [pc, #376]	; (8002b74 <HAL_UART_MspInit+0x754>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a00:	4b5c      	ldr	r3, [pc, #368]	; (8002b74 <HAL_UART_MspInit+0x754>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a06:	485b      	ldr	r0, [pc, #364]	; (8002b74 <HAL_UART_MspInit+0x754>)
 8002a08:	f000 ffe8 	bl	80039dc <HAL_DMA_Init>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_UART_MspInit+0x5f6>
      Error_Handler();
 8002a12:	f7ff fce1 	bl	80023d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a56      	ldr	r2, [pc, #344]	; (8002b74 <HAL_UART_MspInit+0x754>)
 8002a1a:	67da      	str	r2, [r3, #124]	; 0x7c
 8002a1c:	4a55      	ldr	r2, [pc, #340]	; (8002b74 <HAL_UART_MspInit+0x754>)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA2_Stream1;
 8002a22:	4b56      	ldr	r3, [pc, #344]	; (8002b7c <HAL_UART_MspInit+0x75c>)
 8002a24:	4a56      	ldr	r2, [pc, #344]	; (8002b80 <HAL_UART_MspInit+0x760>)
 8002a26:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002a28:	4b54      	ldr	r3, [pc, #336]	; (8002b7c <HAL_UART_MspInit+0x75c>)
 8002a2a:	222c      	movs	r2, #44	; 0x2c
 8002a2c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a2e:	4b53      	ldr	r3, [pc, #332]	; (8002b7c <HAL_UART_MspInit+0x75c>)
 8002a30:	2240      	movs	r2, #64	; 0x40
 8002a32:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a34:	4b51      	ldr	r3, [pc, #324]	; (8002b7c <HAL_UART_MspInit+0x75c>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a3a:	4b50      	ldr	r3, [pc, #320]	; (8002b7c <HAL_UART_MspInit+0x75c>)
 8002a3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a40:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a42:	4b4e      	ldr	r3, [pc, #312]	; (8002b7c <HAL_UART_MspInit+0x75c>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a48:	4b4c      	ldr	r3, [pc, #304]	; (8002b7c <HAL_UART_MspInit+0x75c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002a4e:	4b4b      	ldr	r3, [pc, #300]	; (8002b7c <HAL_UART_MspInit+0x75c>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a54:	4b49      	ldr	r3, [pc, #292]	; (8002b7c <HAL_UART_MspInit+0x75c>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a5a:	4b48      	ldr	r3, [pc, #288]	; (8002b7c <HAL_UART_MspInit+0x75c>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002a60:	4846      	ldr	r0, [pc, #280]	; (8002b7c <HAL_UART_MspInit+0x75c>)
 8002a62:	f000 ffbb 	bl	80039dc <HAL_DMA_Init>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_UART_MspInit+0x650>
      Error_Handler();
 8002a6c:	f7ff fcb4 	bl	80023d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a42      	ldr	r2, [pc, #264]	; (8002b7c <HAL_UART_MspInit+0x75c>)
 8002a74:	679a      	str	r2, [r3, #120]	; 0x78
 8002a76:	4a41      	ldr	r2, [pc, #260]	; (8002b7c <HAL_UART_MspInit+0x75c>)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2105      	movs	r1, #5
 8002a80:	2026      	movs	r0, #38	; 0x26
 8002a82:	f000 ff83 	bl	800398c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a86:	2026      	movs	r0, #38	; 0x26
 8002a88:	f000 ff9a 	bl	80039c0 <HAL_NVIC_EnableIRQ>
}
 8002a8c:	e068      	b.n	8002b60 <HAL_UART_MspInit+0x740>
  else if(huart->Instance==USART3)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a3c      	ldr	r2, [pc, #240]	; (8002b84 <HAL_UART_MspInit+0x764>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d163      	bne.n	8002b60 <HAL_UART_MspInit+0x740>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a98:	4b34      	ldr	r3, [pc, #208]	; (8002b6c <HAL_UART_MspInit+0x74c>)
 8002a9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a9e:	4a33      	ldr	r2, [pc, #204]	; (8002b6c <HAL_UART_MspInit+0x74c>)
 8002aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aa4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002aa8:	4b30      	ldr	r3, [pc, #192]	; (8002b6c <HAL_UART_MspInit+0x74c>)
 8002aaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab6:	4b2d      	ldr	r3, [pc, #180]	; (8002b6c <HAL_UART_MspInit+0x74c>)
 8002ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002abc:	4a2b      	ldr	r2, [pc, #172]	; (8002b6c <HAL_UART_MspInit+0x74c>)
 8002abe:	f043 0302 	orr.w	r3, r3, #2
 8002ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ac6:	4b29      	ldr	r3, [pc, #164]	; (8002b6c <HAL_UART_MspInit+0x74c>)
 8002ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ad4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	2302      	movs	r3, #2
 8002adc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ae6:	2307      	movs	r3, #7
 8002ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002aee:	4619      	mov	r1, r3
 8002af0:	4825      	ldr	r0, [pc, #148]	; (8002b88 <HAL_UART_MspInit+0x768>)
 8002af2:	f003 fdb9 	bl	8006668 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream3;
 8002af6:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <HAL_UART_MspInit+0x76c>)
 8002af8:	4a25      	ldr	r2, [pc, #148]	; (8002b90 <HAL_UART_MspInit+0x770>)
 8002afa:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002afc:	4b23      	ldr	r3, [pc, #140]	; (8002b8c <HAL_UART_MspInit+0x76c>)
 8002afe:	222d      	movs	r2, #45	; 0x2d
 8002b00:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b02:	4b22      	ldr	r3, [pc, #136]	; (8002b8c <HAL_UART_MspInit+0x76c>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b08:	4b20      	ldr	r3, [pc, #128]	; (8002b8c <HAL_UART_MspInit+0x76c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b0e:	4b1f      	ldr	r3, [pc, #124]	; (8002b8c <HAL_UART_MspInit+0x76c>)
 8002b10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b14:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b16:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HAL_UART_MspInit+0x76c>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <HAL_UART_MspInit+0x76c>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002b22:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <HAL_UART_MspInit+0x76c>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b28:	4b18      	ldr	r3, [pc, #96]	; (8002b8c <HAL_UART_MspInit+0x76c>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b2e:	4b17      	ldr	r3, [pc, #92]	; (8002b8c <HAL_UART_MspInit+0x76c>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002b34:	4815      	ldr	r0, [pc, #84]	; (8002b8c <HAL_UART_MspInit+0x76c>)
 8002b36:	f000 ff51 	bl	80039dc <HAL_DMA_Init>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_UART_MspInit+0x724>
      Error_Handler();
 8002b40:	f7ff fc4a 	bl	80023d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a11      	ldr	r2, [pc, #68]	; (8002b8c <HAL_UART_MspInit+0x76c>)
 8002b48:	67da      	str	r2, [r3, #124]	; 0x7c
 8002b4a:	4a10      	ldr	r2, [pc, #64]	; (8002b8c <HAL_UART_MspInit+0x76c>)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002b50:	2200      	movs	r2, #0
 8002b52:	2105      	movs	r1, #5
 8002b54:	2027      	movs	r0, #39	; 0x27
 8002b56:	f000 ff19 	bl	800398c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b5a:	2027      	movs	r0, #39	; 0x27
 8002b5c:	f000 ff30 	bl	80039c0 <HAL_NVIC_EnableIRQ>
}
 8002b60:	bf00      	nop
 8002b62:	3750      	adds	r7, #80	; 0x50
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40004400 	.word	0x40004400
 8002b6c:	58024400 	.word	0x58024400
 8002b70:	58020000 	.word	0x58020000
 8002b74:	2000406c 	.word	0x2000406c
 8002b78:	40020040 	.word	0x40020040
 8002b7c:	200043e0 	.word	0x200043e0
 8002b80:	40020428 	.word	0x40020428
 8002b84:	40004800 	.word	0x40004800
 8002b88:	58020400 	.word	0x58020400
 8002b8c:	200040f4 	.word	0x200040f4
 8002b90:	40020058 	.word	0x40020058

08002b94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b090      	sub	sp, #64	; 0x40
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b0f      	cmp	r3, #15
 8002ba0:	d827      	bhi.n	8002bf2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	2036      	movs	r0, #54	; 0x36
 8002ba8:	f000 fef0 	bl	800398c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002bac:	2036      	movs	r0, #54	; 0x36
 8002bae:	f000 ff07 	bl	80039c0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002bb2:	4a29      	ldr	r2, [pc, #164]	; (8002c58 <HAL_InitTick+0xc4>)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002bb8:	4b28      	ldr	r3, [pc, #160]	; (8002c5c <HAL_InitTick+0xc8>)
 8002bba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bbe:	4a27      	ldr	r2, [pc, #156]	; (8002c5c <HAL_InitTick+0xc8>)
 8002bc0:	f043 0310 	orr.w	r3, r3, #16
 8002bc4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bc8:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <HAL_InitTick+0xc8>)
 8002bca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bd6:	f107 0210 	add.w	r2, r7, #16
 8002bda:	f107 0314 	add.w	r3, r7, #20
 8002bde:	4611      	mov	r1, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f004 ff57 	bl	8007a94 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d106      	bne.n	8002bfe <HAL_InitTick+0x6a>
 8002bf0:	e001      	b.n	8002bf6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e02b      	b.n	8002c4e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002bf6:	f004 ff21 	bl	8007a3c <HAL_RCC_GetPCLK1Freq>
 8002bfa:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002bfc:	e004      	b.n	8002c08 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002bfe:	f004 ff1d 	bl	8007a3c <HAL_RCC_GetPCLK1Freq>
 8002c02:	4603      	mov	r3, r0
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c0a:	4a15      	ldr	r2, [pc, #84]	; (8002c60 <HAL_InitTick+0xcc>)
 8002c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c10:	0c9b      	lsrs	r3, r3, #18
 8002c12:	3b01      	subs	r3, #1
 8002c14:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c16:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <HAL_InitTick+0xd0>)
 8002c18:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <HAL_InitTick+0xd4>)
 8002c1a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002c1c:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <HAL_InitTick+0xd0>)
 8002c1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c22:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c24:	4a0f      	ldr	r2, [pc, #60]	; (8002c64 <HAL_InitTick+0xd0>)
 8002c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c28:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <HAL_InitTick+0xd0>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <HAL_InitTick+0xd0>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002c36:	480b      	ldr	r0, [pc, #44]	; (8002c64 <HAL_InitTick+0xd0>)
 8002c38:	f006 fad0 	bl	80091dc <HAL_TIM_Base_Init>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d104      	bne.n	8002c4c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002c42:	4808      	ldr	r0, [pc, #32]	; (8002c64 <HAL_InitTick+0xd0>)
 8002c44:	f006 fb2c 	bl	80092a0 <HAL_TIM_Base_Start_IT>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	e000      	b.n	8002c4e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3740      	adds	r7, #64	; 0x40
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000008 	.word	0x20000008
 8002c5c:	58024400 	.word	0x58024400
 8002c60:	431bde83 	.word	0x431bde83
 8002c64:	20004958 	.word	0x20004958
 8002c68:	40001000 	.word	0x40001000

08002c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8002c70:	e7fe      	b.n	8002c70 <NMI_Handler+0x4>

08002c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c76:	e7fe      	b.n	8002c76 <HardFault_Handler+0x4>

08002c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c7c:	e7fe      	b.n	8002c7c <MemManage_Handler+0x4>

08002c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c82:	e7fe      	b.n	8002c82 <BusFault_Handler+0x4>

08002c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c88:	e7fe      	b.n	8002c88 <UsageFault_Handler+0x4>

08002c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c9c:	4802      	ldr	r0, [pc, #8]	; (8002ca8 <DMA1_Stream0_IRQHandler+0x10>)
 8002c9e:	f002 f9c5 	bl	800502c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20004368 	.word	0x20004368

08002cac <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002cb0:	4802      	ldr	r0, [pc, #8]	; (8002cbc <DMA1_Stream1_IRQHandler+0x10>)
 8002cb2:	f002 f9bb 	bl	800502c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	2000425c 	.word	0x2000425c

08002cc0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002cc4:	4802      	ldr	r0, [pc, #8]	; (8002cd0 <DMA1_Stream2_IRQHandler+0x10>)
 8002cc6:	f002 f9b1 	bl	800502c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	2000406c 	.word	0x2000406c

08002cd4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002cd8:	4802      	ldr	r0, [pc, #8]	; (8002ce4 <DMA1_Stream3_IRQHandler+0x10>)
 8002cda:	f002 f9a7 	bl	800502c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	200040f4 	.word	0x200040f4

08002ce8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002cec:	4802      	ldr	r0, [pc, #8]	; (8002cf8 <DMA1_Stream4_IRQHandler+0x10>)
 8002cee:	f002 f99d 	bl	800502c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	200047a8 	.word	0x200047a8

08002cfc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002d00:	4802      	ldr	r0, [pc, #8]	; (8002d0c <DMA1_Stream5_IRQHandler+0x10>)
 8002d02:	f002 f993 	bl	800502c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20003ff4 	.word	0x20003ff4

08002d10 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002d14:	4802      	ldr	r0, [pc, #8]	; (8002d20 <DMA1_Stream6_IRQHandler+0x10>)
 8002d16:	f002 f989 	bl	800502c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20004830 	.word	0x20004830

08002d24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE);
 8002d2e:	4b40      	ldr	r3, [pc, #256]	; (8002e30 <USART1_IRQHandler+0x10c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b10      	cmp	r3, #16
 8002d3a:	bf0c      	ite	eq
 8002d3c:	2301      	moveq	r3, #1
 8002d3e:	2300      	movne	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d06b      	beq.n	8002e22 <USART1_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8002d4a:	4b39      	ldr	r3, [pc, #228]	; (8002e30 <USART1_IRQHandler+0x10c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2210      	movs	r2, #16
 8002d50:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart1);
 8002d52:	4837      	ldr	r0, [pc, #220]	; (8002e30 <USART1_IRQHandler+0x10c>)
 8002d54:	f006 fe2a 	bl	80099ac <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8002d58:	4b36      	ldr	r3, [pc, #216]	; (8002e34 <USART1_IRQHandler+0x110>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a36      	ldr	r2, [pc, #216]	; (8002e38 <USART1_IRQHandler+0x114>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d04a      	beq.n	8002df8 <USART1_IRQHandler+0xd4>
 8002d62:	4b34      	ldr	r3, [pc, #208]	; (8002e34 <USART1_IRQHandler+0x110>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a35      	ldr	r2, [pc, #212]	; (8002e3c <USART1_IRQHandler+0x118>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d045      	beq.n	8002df8 <USART1_IRQHandler+0xd4>
 8002d6c:	4b31      	ldr	r3, [pc, #196]	; (8002e34 <USART1_IRQHandler+0x110>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a33      	ldr	r2, [pc, #204]	; (8002e40 <USART1_IRQHandler+0x11c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d040      	beq.n	8002df8 <USART1_IRQHandler+0xd4>
 8002d76:	4b2f      	ldr	r3, [pc, #188]	; (8002e34 <USART1_IRQHandler+0x110>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a32      	ldr	r2, [pc, #200]	; (8002e44 <USART1_IRQHandler+0x120>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d03b      	beq.n	8002df8 <USART1_IRQHandler+0xd4>
 8002d80:	4b2c      	ldr	r3, [pc, #176]	; (8002e34 <USART1_IRQHandler+0x110>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a30      	ldr	r2, [pc, #192]	; (8002e48 <USART1_IRQHandler+0x124>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d036      	beq.n	8002df8 <USART1_IRQHandler+0xd4>
 8002d8a:	4b2a      	ldr	r3, [pc, #168]	; (8002e34 <USART1_IRQHandler+0x110>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a2f      	ldr	r2, [pc, #188]	; (8002e4c <USART1_IRQHandler+0x128>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d031      	beq.n	8002df8 <USART1_IRQHandler+0xd4>
 8002d94:	4b27      	ldr	r3, [pc, #156]	; (8002e34 <USART1_IRQHandler+0x110>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a2d      	ldr	r2, [pc, #180]	; (8002e50 <USART1_IRQHandler+0x12c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d02c      	beq.n	8002df8 <USART1_IRQHandler+0xd4>
 8002d9e:	4b25      	ldr	r3, [pc, #148]	; (8002e34 <USART1_IRQHandler+0x110>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a2c      	ldr	r2, [pc, #176]	; (8002e54 <USART1_IRQHandler+0x130>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d027      	beq.n	8002df8 <USART1_IRQHandler+0xd4>
 8002da8:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <USART1_IRQHandler+0x110>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a2a      	ldr	r2, [pc, #168]	; (8002e58 <USART1_IRQHandler+0x134>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d022      	beq.n	8002df8 <USART1_IRQHandler+0xd4>
 8002db2:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <USART1_IRQHandler+0x110>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a29      	ldr	r2, [pc, #164]	; (8002e5c <USART1_IRQHandler+0x138>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d01d      	beq.n	8002df8 <USART1_IRQHandler+0xd4>
 8002dbc:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <USART1_IRQHandler+0x110>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a27      	ldr	r2, [pc, #156]	; (8002e60 <USART1_IRQHandler+0x13c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d018      	beq.n	8002df8 <USART1_IRQHandler+0xd4>
 8002dc6:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <USART1_IRQHandler+0x110>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a26      	ldr	r2, [pc, #152]	; (8002e64 <USART1_IRQHandler+0x140>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d013      	beq.n	8002df8 <USART1_IRQHandler+0xd4>
 8002dd0:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <USART1_IRQHandler+0x110>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a24      	ldr	r2, [pc, #144]	; (8002e68 <USART1_IRQHandler+0x144>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00e      	beq.n	8002df8 <USART1_IRQHandler+0xd4>
 8002dda:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <USART1_IRQHandler+0x110>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a23      	ldr	r2, [pc, #140]	; (8002e6c <USART1_IRQHandler+0x148>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d009      	beq.n	8002df8 <USART1_IRQHandler+0xd4>
 8002de4:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <USART1_IRQHandler+0x110>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a21      	ldr	r2, [pc, #132]	; (8002e70 <USART1_IRQHandler+0x14c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d004      	beq.n	8002df8 <USART1_IRQHandler+0xd4>
 8002dee:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <USART1_IRQHandler+0x110>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a20      	ldr	r2, [pc, #128]	; (8002e74 <USART1_IRQHandler+0x150>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d103      	bne.n	8002e00 <USART1_IRQHandler+0xdc>
 8002df8:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <USART1_IRQHandler+0x110>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	e002      	b.n	8002e06 <USART1_IRQHandler+0xe2>
 8002e00:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <USART1_IRQHandler+0x110>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8002e06:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <USART1_IRQHandler+0x10c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <USART1_IRQHandler+0x10c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0210 	bic.w	r2, r2, #16
 8002e14:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(UptoBaseTransFinishHandle, pdFALSE);
 8002e16:	4b18      	ldr	r3, [pc, #96]	; (8002e78 <USART1_IRQHandler+0x154>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f008 fee9 	bl	800bbf4 <xQueueGiveFromISR>
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e22:	4803      	ldr	r0, [pc, #12]	; (8002e30 <USART1_IRQHandler+0x10c>)
 8002e24:	f006 fe32 	bl	8009a8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	200044d0 	.word	0x200044d0
 8002e34:	20004368 	.word	0x20004368
 8002e38:	40020010 	.word	0x40020010
 8002e3c:	40020028 	.word	0x40020028
 8002e40:	40020040 	.word	0x40020040
 8002e44:	40020058 	.word	0x40020058
 8002e48:	40020070 	.word	0x40020070
 8002e4c:	40020088 	.word	0x40020088
 8002e50:	400200a0 	.word	0x400200a0
 8002e54:	400200b8 	.word	0x400200b8
 8002e58:	40020410 	.word	0x40020410
 8002e5c:	40020428 	.word	0x40020428
 8002e60:	40020440 	.word	0x40020440
 8002e64:	40020458 	.word	0x40020458
 8002e68:	40020470 	.word	0x40020470
 8002e6c:	40020488 	.word	0x40020488
 8002e70:	400204a0 	.word	0x400204a0
 8002e74:	400204b8 	.word	0x400204b8
 8002e78:	20003fec 	.word	0x20003fec

08002e7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE);
 8002e86:	4b40      	ldr	r3, [pc, #256]	; (8002f88 <USART2_IRQHandler+0x10c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	2b10      	cmp	r3, #16
 8002e92:	bf0c      	ite	eq
 8002e94:	2301      	moveq	r3, #1
 8002e96:	2300      	movne	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d06b      	beq.n	8002f7a <USART2_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8002ea2:	4b39      	ldr	r3, [pc, #228]	; (8002f88 <USART2_IRQHandler+0x10c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2210      	movs	r2, #16
 8002ea8:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart2);
 8002eaa:	4837      	ldr	r0, [pc, #220]	; (8002f88 <USART2_IRQHandler+0x10c>)
 8002eac:	f006 fd7e 	bl	80099ac <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8002eb0:	4b36      	ldr	r3, [pc, #216]	; (8002f8c <USART2_IRQHandler+0x110>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a36      	ldr	r2, [pc, #216]	; (8002f90 <USART2_IRQHandler+0x114>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d04a      	beq.n	8002f50 <USART2_IRQHandler+0xd4>
 8002eba:	4b34      	ldr	r3, [pc, #208]	; (8002f8c <USART2_IRQHandler+0x110>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a35      	ldr	r2, [pc, #212]	; (8002f94 <USART2_IRQHandler+0x118>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d045      	beq.n	8002f50 <USART2_IRQHandler+0xd4>
 8002ec4:	4b31      	ldr	r3, [pc, #196]	; (8002f8c <USART2_IRQHandler+0x110>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a33      	ldr	r2, [pc, #204]	; (8002f98 <USART2_IRQHandler+0x11c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d040      	beq.n	8002f50 <USART2_IRQHandler+0xd4>
 8002ece:	4b2f      	ldr	r3, [pc, #188]	; (8002f8c <USART2_IRQHandler+0x110>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a32      	ldr	r2, [pc, #200]	; (8002f9c <USART2_IRQHandler+0x120>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d03b      	beq.n	8002f50 <USART2_IRQHandler+0xd4>
 8002ed8:	4b2c      	ldr	r3, [pc, #176]	; (8002f8c <USART2_IRQHandler+0x110>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a30      	ldr	r2, [pc, #192]	; (8002fa0 <USART2_IRQHandler+0x124>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d036      	beq.n	8002f50 <USART2_IRQHandler+0xd4>
 8002ee2:	4b2a      	ldr	r3, [pc, #168]	; (8002f8c <USART2_IRQHandler+0x110>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a2f      	ldr	r2, [pc, #188]	; (8002fa4 <USART2_IRQHandler+0x128>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d031      	beq.n	8002f50 <USART2_IRQHandler+0xd4>
 8002eec:	4b27      	ldr	r3, [pc, #156]	; (8002f8c <USART2_IRQHandler+0x110>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a2d      	ldr	r2, [pc, #180]	; (8002fa8 <USART2_IRQHandler+0x12c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d02c      	beq.n	8002f50 <USART2_IRQHandler+0xd4>
 8002ef6:	4b25      	ldr	r3, [pc, #148]	; (8002f8c <USART2_IRQHandler+0x110>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a2c      	ldr	r2, [pc, #176]	; (8002fac <USART2_IRQHandler+0x130>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d027      	beq.n	8002f50 <USART2_IRQHandler+0xd4>
 8002f00:	4b22      	ldr	r3, [pc, #136]	; (8002f8c <USART2_IRQHandler+0x110>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a2a      	ldr	r2, [pc, #168]	; (8002fb0 <USART2_IRQHandler+0x134>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d022      	beq.n	8002f50 <USART2_IRQHandler+0xd4>
 8002f0a:	4b20      	ldr	r3, [pc, #128]	; (8002f8c <USART2_IRQHandler+0x110>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a29      	ldr	r2, [pc, #164]	; (8002fb4 <USART2_IRQHandler+0x138>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d01d      	beq.n	8002f50 <USART2_IRQHandler+0xd4>
 8002f14:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <USART2_IRQHandler+0x110>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a27      	ldr	r2, [pc, #156]	; (8002fb8 <USART2_IRQHandler+0x13c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d018      	beq.n	8002f50 <USART2_IRQHandler+0xd4>
 8002f1e:	4b1b      	ldr	r3, [pc, #108]	; (8002f8c <USART2_IRQHandler+0x110>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a26      	ldr	r2, [pc, #152]	; (8002fbc <USART2_IRQHandler+0x140>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d013      	beq.n	8002f50 <USART2_IRQHandler+0xd4>
 8002f28:	4b18      	ldr	r3, [pc, #96]	; (8002f8c <USART2_IRQHandler+0x110>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a24      	ldr	r2, [pc, #144]	; (8002fc0 <USART2_IRQHandler+0x144>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00e      	beq.n	8002f50 <USART2_IRQHandler+0xd4>
 8002f32:	4b16      	ldr	r3, [pc, #88]	; (8002f8c <USART2_IRQHandler+0x110>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a23      	ldr	r2, [pc, #140]	; (8002fc4 <USART2_IRQHandler+0x148>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d009      	beq.n	8002f50 <USART2_IRQHandler+0xd4>
 8002f3c:	4b13      	ldr	r3, [pc, #76]	; (8002f8c <USART2_IRQHandler+0x110>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a21      	ldr	r2, [pc, #132]	; (8002fc8 <USART2_IRQHandler+0x14c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d004      	beq.n	8002f50 <USART2_IRQHandler+0xd4>
 8002f46:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <USART2_IRQHandler+0x110>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a20      	ldr	r2, [pc, #128]	; (8002fcc <USART2_IRQHandler+0x150>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d103      	bne.n	8002f58 <USART2_IRQHandler+0xdc>
 8002f50:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <USART2_IRQHandler+0x110>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	e002      	b.n	8002f5e <USART2_IRQHandler+0xe2>
 8002f58:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <USART2_IRQHandler+0x110>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_IDLE);
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <USART2_IRQHandler+0x10c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <USART2_IRQHandler+0x10c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0210 	bic.w	r2, r2, #16
 8002f6c:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(GY39TransFinishHandle, pdFALSE);
 8002f6e:	4b18      	ldr	r3, [pc, #96]	; (8002fd0 <USART2_IRQHandler+0x154>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2100      	movs	r1, #0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f008 fe3d 	bl	800bbf4 <xQueueGiveFromISR>
	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f7a:	4803      	ldr	r0, [pc, #12]	; (8002f88 <USART2_IRQHandler+0x10c>)
 8002f7c:	f006 fd86 	bl	8009a8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20004718 	.word	0x20004718
 8002f8c:	2000406c 	.word	0x2000406c
 8002f90:	40020010 	.word	0x40020010
 8002f94:	40020028 	.word	0x40020028
 8002f98:	40020040 	.word	0x40020040
 8002f9c:	40020058 	.word	0x40020058
 8002fa0:	40020070 	.word	0x40020070
 8002fa4:	40020088 	.word	0x40020088
 8002fa8:	400200a0 	.word	0x400200a0
 8002fac:	400200b8 	.word	0x400200b8
 8002fb0:	40020410 	.word	0x40020410
 8002fb4:	40020428 	.word	0x40020428
 8002fb8:	40020440 	.word	0x40020440
 8002fbc:	40020458 	.word	0x40020458
 8002fc0:	40020470 	.word	0x40020470
 8002fc4:	40020488 	.word	0x40020488
 8002fc8:	400204a0 	.word	0x400204a0
 8002fcc:	400204b8 	.word	0x400204b8
 8002fd0:	20004204 	.word	0x20004204

08002fd4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	uint32_t tmp_flag = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE);
 8002fde:	4b40      	ldr	r3, [pc, #256]	; (80030e0 <USART3_IRQHandler+0x10c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	bf0c      	ite	eq
 8002fec:	2301      	moveq	r3, #1
 8002fee:	2300      	movne	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d06b      	beq.n	80030d2 <USART3_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8002ffa:	4b39      	ldr	r3, [pc, #228]	; (80030e0 <USART3_IRQHandler+0x10c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2210      	movs	r2, #16
 8003000:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart3);
 8003002:	4837      	ldr	r0, [pc, #220]	; (80030e0 <USART3_IRQHandler+0x10c>)
 8003004:	f006 fcd2 	bl	80099ac <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 8003008:	4b36      	ldr	r3, [pc, #216]	; (80030e4 <USART3_IRQHandler+0x110>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a36      	ldr	r2, [pc, #216]	; (80030e8 <USART3_IRQHandler+0x114>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d04a      	beq.n	80030a8 <USART3_IRQHandler+0xd4>
 8003012:	4b34      	ldr	r3, [pc, #208]	; (80030e4 <USART3_IRQHandler+0x110>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a35      	ldr	r2, [pc, #212]	; (80030ec <USART3_IRQHandler+0x118>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d045      	beq.n	80030a8 <USART3_IRQHandler+0xd4>
 800301c:	4b31      	ldr	r3, [pc, #196]	; (80030e4 <USART3_IRQHandler+0x110>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a33      	ldr	r2, [pc, #204]	; (80030f0 <USART3_IRQHandler+0x11c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d040      	beq.n	80030a8 <USART3_IRQHandler+0xd4>
 8003026:	4b2f      	ldr	r3, [pc, #188]	; (80030e4 <USART3_IRQHandler+0x110>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a32      	ldr	r2, [pc, #200]	; (80030f4 <USART3_IRQHandler+0x120>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d03b      	beq.n	80030a8 <USART3_IRQHandler+0xd4>
 8003030:	4b2c      	ldr	r3, [pc, #176]	; (80030e4 <USART3_IRQHandler+0x110>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a30      	ldr	r2, [pc, #192]	; (80030f8 <USART3_IRQHandler+0x124>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d036      	beq.n	80030a8 <USART3_IRQHandler+0xd4>
 800303a:	4b2a      	ldr	r3, [pc, #168]	; (80030e4 <USART3_IRQHandler+0x110>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a2f      	ldr	r2, [pc, #188]	; (80030fc <USART3_IRQHandler+0x128>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d031      	beq.n	80030a8 <USART3_IRQHandler+0xd4>
 8003044:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <USART3_IRQHandler+0x110>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a2d      	ldr	r2, [pc, #180]	; (8003100 <USART3_IRQHandler+0x12c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d02c      	beq.n	80030a8 <USART3_IRQHandler+0xd4>
 800304e:	4b25      	ldr	r3, [pc, #148]	; (80030e4 <USART3_IRQHandler+0x110>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a2c      	ldr	r2, [pc, #176]	; (8003104 <USART3_IRQHandler+0x130>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d027      	beq.n	80030a8 <USART3_IRQHandler+0xd4>
 8003058:	4b22      	ldr	r3, [pc, #136]	; (80030e4 <USART3_IRQHandler+0x110>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a2a      	ldr	r2, [pc, #168]	; (8003108 <USART3_IRQHandler+0x134>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d022      	beq.n	80030a8 <USART3_IRQHandler+0xd4>
 8003062:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <USART3_IRQHandler+0x110>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a29      	ldr	r2, [pc, #164]	; (800310c <USART3_IRQHandler+0x138>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d01d      	beq.n	80030a8 <USART3_IRQHandler+0xd4>
 800306c:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <USART3_IRQHandler+0x110>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a27      	ldr	r2, [pc, #156]	; (8003110 <USART3_IRQHandler+0x13c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d018      	beq.n	80030a8 <USART3_IRQHandler+0xd4>
 8003076:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <USART3_IRQHandler+0x110>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a26      	ldr	r2, [pc, #152]	; (8003114 <USART3_IRQHandler+0x140>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d013      	beq.n	80030a8 <USART3_IRQHandler+0xd4>
 8003080:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <USART3_IRQHandler+0x110>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a24      	ldr	r2, [pc, #144]	; (8003118 <USART3_IRQHandler+0x144>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00e      	beq.n	80030a8 <USART3_IRQHandler+0xd4>
 800308a:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <USART3_IRQHandler+0x110>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a23      	ldr	r2, [pc, #140]	; (800311c <USART3_IRQHandler+0x148>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d009      	beq.n	80030a8 <USART3_IRQHandler+0xd4>
 8003094:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <USART3_IRQHandler+0x110>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a21      	ldr	r2, [pc, #132]	; (8003120 <USART3_IRQHandler+0x14c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d004      	beq.n	80030a8 <USART3_IRQHandler+0xd4>
 800309e:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <USART3_IRQHandler+0x110>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a20      	ldr	r2, [pc, #128]	; (8003124 <USART3_IRQHandler+0x150>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d103      	bne.n	80030b0 <USART3_IRQHandler+0xdc>
 80030a8:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <USART3_IRQHandler+0x110>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	e002      	b.n	80030b6 <USART3_IRQHandler+0xe2>
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <USART3_IRQHandler+0x110>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart3, UART_IT_IDLE);
 80030b6:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <USART3_IRQHandler+0x10c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <USART3_IRQHandler+0x10c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0210 	bic.w	r2, r2, #16
 80030c4:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(WT931TransFinishHandle, pdFALSE);
 80030c6:	4b18      	ldr	r3, [pc, #96]	; (8003128 <USART3_IRQHandler+0x154>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2100      	movs	r1, #0
 80030cc:	4618      	mov	r0, r3
 80030ce:	f008 fd91 	bl	800bbf4 <xQueueGiveFromISR>
	}
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80030d2:	4803      	ldr	r0, [pc, #12]	; (80030e0 <USART3_IRQHandler+0x10c>)
 80030d4:	f006 fcda 	bl	8009a8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80030d8:	bf00      	nop
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	2000416c 	.word	0x2000416c
 80030e4:	200040f4 	.word	0x200040f4
 80030e8:	40020010 	.word	0x40020010
 80030ec:	40020028 	.word	0x40020028
 80030f0:	40020040 	.word	0x40020040
 80030f4:	40020058 	.word	0x40020058
 80030f8:	40020070 	.word	0x40020070
 80030fc:	40020088 	.word	0x40020088
 8003100:	400200a0 	.word	0x400200a0
 8003104:	400200b8 	.word	0x400200b8
 8003108:	40020410 	.word	0x40020410
 800310c:	40020428 	.word	0x40020428
 8003110:	40020440 	.word	0x40020440
 8003114:	40020458 	.word	0x40020458
 8003118:	40020470 	.word	0x40020470
 800311c:	40020488 	.word	0x40020488
 8003120:	400204a0 	.word	0x400204a0
 8003124:	400204b8 	.word	0x400204b8
 8003128:	20004920 	.word	0x20004920

0800312c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8003130:	4802      	ldr	r0, [pc, #8]	; (800313c <DMA1_Stream7_IRQHandler+0x10>)
 8003132:	f001 ff7b 	bl	800502c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20004458 	.word	0x20004458

08003140 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	uint32_t tmp_flag = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE);
 800314a:	4b40      	ldr	r3, [pc, #256]	; (800324c <UART4_IRQHandler+0x10c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	f003 0310 	and.w	r3, r3, #16
 8003154:	2b10      	cmp	r3, #16
 8003156:	bf0c      	ite	eq
 8003158:	2301      	moveq	r3, #1
 800315a:	2300      	movne	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d06b      	beq.n	800323e <UART4_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 8003166:	4b39      	ldr	r3, [pc, #228]	; (800324c <UART4_IRQHandler+0x10c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2210      	movs	r2, #16
 800316c:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart4);
 800316e:	4837      	ldr	r0, [pc, #220]	; (800324c <UART4_IRQHandler+0x10c>)
 8003170:	f006 fc1c 	bl	80099ac <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart4_rx);
 8003174:	4b36      	ldr	r3, [pc, #216]	; (8003250 <UART4_IRQHandler+0x110>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a36      	ldr	r2, [pc, #216]	; (8003254 <UART4_IRQHandler+0x114>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d04a      	beq.n	8003214 <UART4_IRQHandler+0xd4>
 800317e:	4b34      	ldr	r3, [pc, #208]	; (8003250 <UART4_IRQHandler+0x110>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a35      	ldr	r2, [pc, #212]	; (8003258 <UART4_IRQHandler+0x118>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d045      	beq.n	8003214 <UART4_IRQHandler+0xd4>
 8003188:	4b31      	ldr	r3, [pc, #196]	; (8003250 <UART4_IRQHandler+0x110>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a33      	ldr	r2, [pc, #204]	; (800325c <UART4_IRQHandler+0x11c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d040      	beq.n	8003214 <UART4_IRQHandler+0xd4>
 8003192:	4b2f      	ldr	r3, [pc, #188]	; (8003250 <UART4_IRQHandler+0x110>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a32      	ldr	r2, [pc, #200]	; (8003260 <UART4_IRQHandler+0x120>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d03b      	beq.n	8003214 <UART4_IRQHandler+0xd4>
 800319c:	4b2c      	ldr	r3, [pc, #176]	; (8003250 <UART4_IRQHandler+0x110>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a30      	ldr	r2, [pc, #192]	; (8003264 <UART4_IRQHandler+0x124>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d036      	beq.n	8003214 <UART4_IRQHandler+0xd4>
 80031a6:	4b2a      	ldr	r3, [pc, #168]	; (8003250 <UART4_IRQHandler+0x110>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a2f      	ldr	r2, [pc, #188]	; (8003268 <UART4_IRQHandler+0x128>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d031      	beq.n	8003214 <UART4_IRQHandler+0xd4>
 80031b0:	4b27      	ldr	r3, [pc, #156]	; (8003250 <UART4_IRQHandler+0x110>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a2d      	ldr	r2, [pc, #180]	; (800326c <UART4_IRQHandler+0x12c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d02c      	beq.n	8003214 <UART4_IRQHandler+0xd4>
 80031ba:	4b25      	ldr	r3, [pc, #148]	; (8003250 <UART4_IRQHandler+0x110>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a2c      	ldr	r2, [pc, #176]	; (8003270 <UART4_IRQHandler+0x130>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d027      	beq.n	8003214 <UART4_IRQHandler+0xd4>
 80031c4:	4b22      	ldr	r3, [pc, #136]	; (8003250 <UART4_IRQHandler+0x110>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a2a      	ldr	r2, [pc, #168]	; (8003274 <UART4_IRQHandler+0x134>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d022      	beq.n	8003214 <UART4_IRQHandler+0xd4>
 80031ce:	4b20      	ldr	r3, [pc, #128]	; (8003250 <UART4_IRQHandler+0x110>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a29      	ldr	r2, [pc, #164]	; (8003278 <UART4_IRQHandler+0x138>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d01d      	beq.n	8003214 <UART4_IRQHandler+0xd4>
 80031d8:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <UART4_IRQHandler+0x110>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a27      	ldr	r2, [pc, #156]	; (800327c <UART4_IRQHandler+0x13c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d018      	beq.n	8003214 <UART4_IRQHandler+0xd4>
 80031e2:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <UART4_IRQHandler+0x110>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a26      	ldr	r2, [pc, #152]	; (8003280 <UART4_IRQHandler+0x140>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d013      	beq.n	8003214 <UART4_IRQHandler+0xd4>
 80031ec:	4b18      	ldr	r3, [pc, #96]	; (8003250 <UART4_IRQHandler+0x110>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a24      	ldr	r2, [pc, #144]	; (8003284 <UART4_IRQHandler+0x144>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d00e      	beq.n	8003214 <UART4_IRQHandler+0xd4>
 80031f6:	4b16      	ldr	r3, [pc, #88]	; (8003250 <UART4_IRQHandler+0x110>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a23      	ldr	r2, [pc, #140]	; (8003288 <UART4_IRQHandler+0x148>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d009      	beq.n	8003214 <UART4_IRQHandler+0xd4>
 8003200:	4b13      	ldr	r3, [pc, #76]	; (8003250 <UART4_IRQHandler+0x110>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a21      	ldr	r2, [pc, #132]	; (800328c <UART4_IRQHandler+0x14c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d004      	beq.n	8003214 <UART4_IRQHandler+0xd4>
 800320a:	4b11      	ldr	r3, [pc, #68]	; (8003250 <UART4_IRQHandler+0x110>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a20      	ldr	r2, [pc, #128]	; (8003290 <UART4_IRQHandler+0x150>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d103      	bne.n	800321c <UART4_IRQHandler+0xdc>
 8003214:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <UART4_IRQHandler+0x110>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	e002      	b.n	8003222 <UART4_IRQHandler+0xe2>
 800321c:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <UART4_IRQHandler+0x110>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart4, UART_IT_IDLE);
 8003222:	4b0a      	ldr	r3, [pc, #40]	; (800324c <UART4_IRQHandler+0x10c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b08      	ldr	r3, [pc, #32]	; (800324c <UART4_IRQHandler+0x10c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0210 	bic.w	r2, r2, #16
 8003230:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(DeepTransFinishHandleHandle, pdFALSE);
 8003232:	4b18      	ldr	r3, [pc, #96]	; (8003294 <UART4_IRQHandler+0x154>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2100      	movs	r1, #0
 8003238:	4618      	mov	r0, r3
 800323a:	f008 fcdb 	bl	800bbf4 <xQueueGiveFromISR>
	}
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800323e:	4803      	ldr	r0, [pc, #12]	; (800324c <UART4_IRQHandler+0x10c>)
 8003240:	f006 fc24 	bl	8009a8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003244:	bf00      	nop
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	20004680 	.word	0x20004680
 8003250:	20003ff4 	.word	0x20003ff4
 8003254:	40020010 	.word	0x40020010
 8003258:	40020028 	.word	0x40020028
 800325c:	40020040 	.word	0x40020040
 8003260:	40020058 	.word	0x40020058
 8003264:	40020070 	.word	0x40020070
 8003268:	40020088 	.word	0x40020088
 800326c:	400200a0 	.word	0x400200a0
 8003270:	400200b8 	.word	0x400200b8
 8003274:	40020410 	.word	0x40020410
 8003278:	40020428 	.word	0x40020428
 800327c:	40020440 	.word	0x40020440
 8003280:	40020458 	.word	0x40020458
 8003284:	40020470 	.word	0x40020470
 8003288:	40020488 	.word	0x40020488
 800328c:	400204a0 	.word	0x400204a0
 8003290:	400204b8 	.word	0x400204b8
 8003294:	2000482c 	.word	0x2000482c

08003298 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	uint32_t tmp_flag = 0;
 800329e:	2300      	movs	r3, #0
 80032a0:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart5, UART_FLAG_IDLE);
 80032a2:	4b40      	ldr	r3, [pc, #256]	; (80033a4 <UART5_IRQHandler+0x10c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b10      	cmp	r3, #16
 80032ae:	bf0c      	ite	eq
 80032b0:	2301      	moveq	r3, #1
 80032b2:	2300      	movne	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d06b      	beq.n	8003396 <UART5_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart5);
 80032be:	4b39      	ldr	r3, [pc, #228]	; (80033a4 <UART5_IRQHandler+0x10c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2210      	movs	r2, #16
 80032c4:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart5);
 80032c6:	4837      	ldr	r0, [pc, #220]	; (80033a4 <UART5_IRQHandler+0x10c>)
 80032c8:	f006 fb70 	bl	80099ac <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart5_rx);
 80032cc:	4b36      	ldr	r3, [pc, #216]	; (80033a8 <UART5_IRQHandler+0x110>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a36      	ldr	r2, [pc, #216]	; (80033ac <UART5_IRQHandler+0x114>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d04a      	beq.n	800336c <UART5_IRQHandler+0xd4>
 80032d6:	4b34      	ldr	r3, [pc, #208]	; (80033a8 <UART5_IRQHandler+0x110>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a35      	ldr	r2, [pc, #212]	; (80033b0 <UART5_IRQHandler+0x118>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d045      	beq.n	800336c <UART5_IRQHandler+0xd4>
 80032e0:	4b31      	ldr	r3, [pc, #196]	; (80033a8 <UART5_IRQHandler+0x110>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a33      	ldr	r2, [pc, #204]	; (80033b4 <UART5_IRQHandler+0x11c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d040      	beq.n	800336c <UART5_IRQHandler+0xd4>
 80032ea:	4b2f      	ldr	r3, [pc, #188]	; (80033a8 <UART5_IRQHandler+0x110>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a32      	ldr	r2, [pc, #200]	; (80033b8 <UART5_IRQHandler+0x120>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d03b      	beq.n	800336c <UART5_IRQHandler+0xd4>
 80032f4:	4b2c      	ldr	r3, [pc, #176]	; (80033a8 <UART5_IRQHandler+0x110>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a30      	ldr	r2, [pc, #192]	; (80033bc <UART5_IRQHandler+0x124>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d036      	beq.n	800336c <UART5_IRQHandler+0xd4>
 80032fe:	4b2a      	ldr	r3, [pc, #168]	; (80033a8 <UART5_IRQHandler+0x110>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a2f      	ldr	r2, [pc, #188]	; (80033c0 <UART5_IRQHandler+0x128>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d031      	beq.n	800336c <UART5_IRQHandler+0xd4>
 8003308:	4b27      	ldr	r3, [pc, #156]	; (80033a8 <UART5_IRQHandler+0x110>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a2d      	ldr	r2, [pc, #180]	; (80033c4 <UART5_IRQHandler+0x12c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d02c      	beq.n	800336c <UART5_IRQHandler+0xd4>
 8003312:	4b25      	ldr	r3, [pc, #148]	; (80033a8 <UART5_IRQHandler+0x110>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a2c      	ldr	r2, [pc, #176]	; (80033c8 <UART5_IRQHandler+0x130>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d027      	beq.n	800336c <UART5_IRQHandler+0xd4>
 800331c:	4b22      	ldr	r3, [pc, #136]	; (80033a8 <UART5_IRQHandler+0x110>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a2a      	ldr	r2, [pc, #168]	; (80033cc <UART5_IRQHandler+0x134>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d022      	beq.n	800336c <UART5_IRQHandler+0xd4>
 8003326:	4b20      	ldr	r3, [pc, #128]	; (80033a8 <UART5_IRQHandler+0x110>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a29      	ldr	r2, [pc, #164]	; (80033d0 <UART5_IRQHandler+0x138>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d01d      	beq.n	800336c <UART5_IRQHandler+0xd4>
 8003330:	4b1d      	ldr	r3, [pc, #116]	; (80033a8 <UART5_IRQHandler+0x110>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a27      	ldr	r2, [pc, #156]	; (80033d4 <UART5_IRQHandler+0x13c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d018      	beq.n	800336c <UART5_IRQHandler+0xd4>
 800333a:	4b1b      	ldr	r3, [pc, #108]	; (80033a8 <UART5_IRQHandler+0x110>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a26      	ldr	r2, [pc, #152]	; (80033d8 <UART5_IRQHandler+0x140>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d013      	beq.n	800336c <UART5_IRQHandler+0xd4>
 8003344:	4b18      	ldr	r3, [pc, #96]	; (80033a8 <UART5_IRQHandler+0x110>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a24      	ldr	r2, [pc, #144]	; (80033dc <UART5_IRQHandler+0x144>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00e      	beq.n	800336c <UART5_IRQHandler+0xd4>
 800334e:	4b16      	ldr	r3, [pc, #88]	; (80033a8 <UART5_IRQHandler+0x110>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a23      	ldr	r2, [pc, #140]	; (80033e0 <UART5_IRQHandler+0x148>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d009      	beq.n	800336c <UART5_IRQHandler+0xd4>
 8003358:	4b13      	ldr	r3, [pc, #76]	; (80033a8 <UART5_IRQHandler+0x110>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a21      	ldr	r2, [pc, #132]	; (80033e4 <UART5_IRQHandler+0x14c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d004      	beq.n	800336c <UART5_IRQHandler+0xd4>
 8003362:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <UART5_IRQHandler+0x110>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a20      	ldr	r2, [pc, #128]	; (80033e8 <UART5_IRQHandler+0x150>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d103      	bne.n	8003374 <UART5_IRQHandler+0xdc>
 800336c:	4b0e      	ldr	r3, [pc, #56]	; (80033a8 <UART5_IRQHandler+0x110>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	e002      	b.n	800337a <UART5_IRQHandler+0xe2>
 8003374:	4b0c      	ldr	r3, [pc, #48]	; (80033a8 <UART5_IRQHandler+0x110>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart5, UART_IT_IDLE);
 800337a:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <UART5_IRQHandler+0x10c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <UART5_IRQHandler+0x10c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0210 	bic.w	r2, r2, #16
 8003388:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(P30TransFinishHandle, pdFALSE);
 800338a:	4b18      	ldr	r3, [pc, #96]	; (80033ec <UART5_IRQHandler+0x154>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2100      	movs	r1, #0
 8003390:	4618      	mov	r0, r3
 8003392:	f008 fc2f 	bl	800bbf4 <xQueueGiveFromISR>
	}
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003396:	4803      	ldr	r0, [pc, #12]	; (80033a4 <UART5_IRQHandler+0x10c>)
 8003398:	f006 fb78 	bl	8009a8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	200042d4 	.word	0x200042d4
 80033a8:	200047a8 	.word	0x200047a8
 80033ac:	40020010 	.word	0x40020010
 80033b0:	40020028 	.word	0x40020028
 80033b4:	40020040 	.word	0x40020040
 80033b8:	40020058 	.word	0x40020058
 80033bc:	40020070 	.word	0x40020070
 80033c0:	40020088 	.word	0x40020088
 80033c4:	400200a0 	.word	0x400200a0
 80033c8:	400200b8 	.word	0x400200b8
 80033cc:	40020410 	.word	0x40020410
 80033d0:	40020428 	.word	0x40020428
 80033d4:	40020440 	.word	0x40020440
 80033d8:	40020458 	.word	0x40020458
 80033dc:	40020470 	.word	0x40020470
 80033e0:	40020488 	.word	0x40020488
 80033e4:	400204a0 	.word	0x400204a0
 80033e8:	400204b8 	.word	0x400204b8
 80033ec:	20003fe8 	.word	0x20003fe8

080033f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80033f4:	4802      	ldr	r0, [pc, #8]	; (8003400 <TIM6_DAC_IRQHandler+0x10>)
 80033f6:	f005 ffc3 	bl	8009380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20004958 	.word	0x20004958

08003404 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8003408:	4802      	ldr	r0, [pc, #8]	; (8003414 <DMA2_Stream0_IRQHandler+0x10>)
 800340a:	f001 fe0f 	bl	800502c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20004570 	.word	0x20004570

08003418 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800341c:	4802      	ldr	r0, [pc, #8]	; (8003428 <DMA2_Stream1_IRQHandler+0x10>)
 800341e:	f001 fe05 	bl	800502c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	200043e0 	.word	0x200043e0

0800342c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8003430:	4802      	ldr	r0, [pc, #8]	; (800343c <DMA2_Stream2_IRQHandler+0x10>)
 8003432:	f001 fdfb 	bl	800502c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	200048a8 	.word	0x200048a8

08003440 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */
	uint32_t tmp_flag = 0;
 8003446:	2300      	movs	r3, #0
 8003448:	607b      	str	r3, [r7, #4]
	tmp_flag = __HAL_UART_GET_FLAG(&huart8, UART_FLAG_IDLE);
 800344a:	4b40      	ldr	r3, [pc, #256]	; (800354c <UART8_IRQHandler+0x10c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b10      	cmp	r3, #16
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d06b      	beq.n	800353e <UART8_IRQHandler+0xfe>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart8);
 8003466:	4b39      	ldr	r3, [pc, #228]	; (800354c <UART8_IRQHandler+0x10c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2210      	movs	r2, #16
 800346c:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(&huart8);
 800346e:	4837      	ldr	r0, [pc, #220]	; (800354c <UART8_IRQHandler+0x10c>)
 8003470:	f006 fa9c 	bl	80099ac <HAL_UART_DMAStop>
		__HAL_DMA_GET_COUNTER(&hdma_uart8_rx);
 8003474:	4b36      	ldr	r3, [pc, #216]	; (8003550 <UART8_IRQHandler+0x110>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a36      	ldr	r2, [pc, #216]	; (8003554 <UART8_IRQHandler+0x114>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d04a      	beq.n	8003514 <UART8_IRQHandler+0xd4>
 800347e:	4b34      	ldr	r3, [pc, #208]	; (8003550 <UART8_IRQHandler+0x110>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a35      	ldr	r2, [pc, #212]	; (8003558 <UART8_IRQHandler+0x118>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d045      	beq.n	8003514 <UART8_IRQHandler+0xd4>
 8003488:	4b31      	ldr	r3, [pc, #196]	; (8003550 <UART8_IRQHandler+0x110>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a33      	ldr	r2, [pc, #204]	; (800355c <UART8_IRQHandler+0x11c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d040      	beq.n	8003514 <UART8_IRQHandler+0xd4>
 8003492:	4b2f      	ldr	r3, [pc, #188]	; (8003550 <UART8_IRQHandler+0x110>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a32      	ldr	r2, [pc, #200]	; (8003560 <UART8_IRQHandler+0x120>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d03b      	beq.n	8003514 <UART8_IRQHandler+0xd4>
 800349c:	4b2c      	ldr	r3, [pc, #176]	; (8003550 <UART8_IRQHandler+0x110>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a30      	ldr	r2, [pc, #192]	; (8003564 <UART8_IRQHandler+0x124>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d036      	beq.n	8003514 <UART8_IRQHandler+0xd4>
 80034a6:	4b2a      	ldr	r3, [pc, #168]	; (8003550 <UART8_IRQHandler+0x110>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a2f      	ldr	r2, [pc, #188]	; (8003568 <UART8_IRQHandler+0x128>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d031      	beq.n	8003514 <UART8_IRQHandler+0xd4>
 80034b0:	4b27      	ldr	r3, [pc, #156]	; (8003550 <UART8_IRQHandler+0x110>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a2d      	ldr	r2, [pc, #180]	; (800356c <UART8_IRQHandler+0x12c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d02c      	beq.n	8003514 <UART8_IRQHandler+0xd4>
 80034ba:	4b25      	ldr	r3, [pc, #148]	; (8003550 <UART8_IRQHandler+0x110>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a2c      	ldr	r2, [pc, #176]	; (8003570 <UART8_IRQHandler+0x130>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d027      	beq.n	8003514 <UART8_IRQHandler+0xd4>
 80034c4:	4b22      	ldr	r3, [pc, #136]	; (8003550 <UART8_IRQHandler+0x110>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a2a      	ldr	r2, [pc, #168]	; (8003574 <UART8_IRQHandler+0x134>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d022      	beq.n	8003514 <UART8_IRQHandler+0xd4>
 80034ce:	4b20      	ldr	r3, [pc, #128]	; (8003550 <UART8_IRQHandler+0x110>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a29      	ldr	r2, [pc, #164]	; (8003578 <UART8_IRQHandler+0x138>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d01d      	beq.n	8003514 <UART8_IRQHandler+0xd4>
 80034d8:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <UART8_IRQHandler+0x110>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a27      	ldr	r2, [pc, #156]	; (800357c <UART8_IRQHandler+0x13c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d018      	beq.n	8003514 <UART8_IRQHandler+0xd4>
 80034e2:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <UART8_IRQHandler+0x110>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a26      	ldr	r2, [pc, #152]	; (8003580 <UART8_IRQHandler+0x140>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d013      	beq.n	8003514 <UART8_IRQHandler+0xd4>
 80034ec:	4b18      	ldr	r3, [pc, #96]	; (8003550 <UART8_IRQHandler+0x110>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a24      	ldr	r2, [pc, #144]	; (8003584 <UART8_IRQHandler+0x144>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00e      	beq.n	8003514 <UART8_IRQHandler+0xd4>
 80034f6:	4b16      	ldr	r3, [pc, #88]	; (8003550 <UART8_IRQHandler+0x110>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a23      	ldr	r2, [pc, #140]	; (8003588 <UART8_IRQHandler+0x148>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d009      	beq.n	8003514 <UART8_IRQHandler+0xd4>
 8003500:	4b13      	ldr	r3, [pc, #76]	; (8003550 <UART8_IRQHandler+0x110>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a21      	ldr	r2, [pc, #132]	; (800358c <UART8_IRQHandler+0x14c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d004      	beq.n	8003514 <UART8_IRQHandler+0xd4>
 800350a:	4b11      	ldr	r3, [pc, #68]	; (8003550 <UART8_IRQHandler+0x110>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a20      	ldr	r2, [pc, #128]	; (8003590 <UART8_IRQHandler+0x150>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d103      	bne.n	800351c <UART8_IRQHandler+0xdc>
 8003514:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <UART8_IRQHandler+0x110>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	e002      	b.n	8003522 <UART8_IRQHandler+0xe2>
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <UART8_IRQHandler+0x110>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
		__HAL_UART_DISABLE_IT(&huart8, UART_IT_IDLE);
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <UART8_IRQHandler+0x10c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	4b08      	ldr	r3, [pc, #32]	; (800354c <UART8_IRQHandler+0x10c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0210 	bic.w	r2, r2, #16
 8003530:	601a      	str	r2, [r3, #0]
		xSemaphoreGiveFromISR(BasetoUpTransFinishHandleHandle, pdFALSE);
 8003532:	4b18      	ldr	r3, [pc, #96]	; (8003594 <UART8_IRQHandler+0x154>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f008 fb5b 	bl	800bbf4 <xQueueGiveFromISR>
	}
  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 800353e:	4803      	ldr	r0, [pc, #12]	; (800354c <UART8_IRQHandler+0x10c>)
 8003540:	f006 faa4 	bl	8009a8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8003544:	bf00      	nop
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	200045ec 	.word	0x200045ec
 8003550:	20004458 	.word	0x20004458
 8003554:	40020010 	.word	0x40020010
 8003558:	40020028 	.word	0x40020028
 800355c:	40020040 	.word	0x40020040
 8003560:	40020058 	.word	0x40020058
 8003564:	40020070 	.word	0x40020070
 8003568:	40020088 	.word	0x40020088
 800356c:	400200a0 	.word	0x400200a0
 8003570:	400200b8 	.word	0x400200b8
 8003574:	40020410 	.word	0x40020410
 8003578:	40020428 	.word	0x40020428
 800357c:	40020440 	.word	0x40020440
 8003580:	40020458 	.word	0x40020458
 8003584:	40020470 	.word	0x40020470
 8003588:	40020488 	.word	0x40020488
 800358c:	400204a0 	.word	0x400204a0
 8003590:	400204b8 	.word	0x400204b8
 8003594:	200045e8 	.word	0x200045e8

08003598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800359c:	4b39      	ldr	r3, [pc, #228]	; (8003684 <SystemInit+0xec>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a2:	4a38      	ldr	r2, [pc, #224]	; (8003684 <SystemInit+0xec>)
 80035a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80035ac:	4b36      	ldr	r3, [pc, #216]	; (8003688 <SystemInit+0xf0>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	2b06      	cmp	r3, #6
 80035b6:	d807      	bhi.n	80035c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80035b8:	4b33      	ldr	r3, [pc, #204]	; (8003688 <SystemInit+0xf0>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f023 030f 	bic.w	r3, r3, #15
 80035c0:	4a31      	ldr	r2, [pc, #196]	; (8003688 <SystemInit+0xf0>)
 80035c2:	f043 0307 	orr.w	r3, r3, #7
 80035c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80035c8:	4b30      	ldr	r3, [pc, #192]	; (800368c <SystemInit+0xf4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a2f      	ldr	r2, [pc, #188]	; (800368c <SystemInit+0xf4>)
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80035d4:	4b2d      	ldr	r3, [pc, #180]	; (800368c <SystemInit+0xf4>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80035da:	4b2c      	ldr	r3, [pc, #176]	; (800368c <SystemInit+0xf4>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	492b      	ldr	r1, [pc, #172]	; (800368c <SystemInit+0xf4>)
 80035e0:	4b2b      	ldr	r3, [pc, #172]	; (8003690 <SystemInit+0xf8>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80035e6:	4b28      	ldr	r3, [pc, #160]	; (8003688 <SystemInit+0xf0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d007      	beq.n	8003602 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80035f2:	4b25      	ldr	r3, [pc, #148]	; (8003688 <SystemInit+0xf0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 030f 	bic.w	r3, r3, #15
 80035fa:	4a23      	ldr	r2, [pc, #140]	; (8003688 <SystemInit+0xf0>)
 80035fc:	f043 0307 	orr.w	r3, r3, #7
 8003600:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003602:	4b22      	ldr	r3, [pc, #136]	; (800368c <SystemInit+0xf4>)
 8003604:	2200      	movs	r2, #0
 8003606:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003608:	4b20      	ldr	r3, [pc, #128]	; (800368c <SystemInit+0xf4>)
 800360a:	2200      	movs	r2, #0
 800360c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800360e:	4b1f      	ldr	r3, [pc, #124]	; (800368c <SystemInit+0xf4>)
 8003610:	2200      	movs	r2, #0
 8003612:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003614:	4b1d      	ldr	r3, [pc, #116]	; (800368c <SystemInit+0xf4>)
 8003616:	4a1f      	ldr	r2, [pc, #124]	; (8003694 <SystemInit+0xfc>)
 8003618:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800361a:	4b1c      	ldr	r3, [pc, #112]	; (800368c <SystemInit+0xf4>)
 800361c:	4a1e      	ldr	r2, [pc, #120]	; (8003698 <SystemInit+0x100>)
 800361e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003620:	4b1a      	ldr	r3, [pc, #104]	; (800368c <SystemInit+0xf4>)
 8003622:	4a1e      	ldr	r2, [pc, #120]	; (800369c <SystemInit+0x104>)
 8003624:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003626:	4b19      	ldr	r3, [pc, #100]	; (800368c <SystemInit+0xf4>)
 8003628:	2200      	movs	r2, #0
 800362a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800362c:	4b17      	ldr	r3, [pc, #92]	; (800368c <SystemInit+0xf4>)
 800362e:	4a1b      	ldr	r2, [pc, #108]	; (800369c <SystemInit+0x104>)
 8003630:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003632:	4b16      	ldr	r3, [pc, #88]	; (800368c <SystemInit+0xf4>)
 8003634:	2200      	movs	r2, #0
 8003636:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003638:	4b14      	ldr	r3, [pc, #80]	; (800368c <SystemInit+0xf4>)
 800363a:	4a18      	ldr	r2, [pc, #96]	; (800369c <SystemInit+0x104>)
 800363c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800363e:	4b13      	ldr	r3, [pc, #76]	; (800368c <SystemInit+0xf4>)
 8003640:	2200      	movs	r2, #0
 8003642:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003644:	4b11      	ldr	r3, [pc, #68]	; (800368c <SystemInit+0xf4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a10      	ldr	r2, [pc, #64]	; (800368c <SystemInit+0xf4>)
 800364a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800364e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003650:	4b0e      	ldr	r3, [pc, #56]	; (800368c <SystemInit+0xf4>)
 8003652:	2200      	movs	r2, #0
 8003654:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003656:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <SystemInit+0x108>)
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <SystemInit+0x10c>)
 800365c:	4013      	ands	r3, r2
 800365e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003662:	d202      	bcs.n	800366a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003664:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <SystemInit+0x110>)
 8003666:	2201      	movs	r2, #1
 8003668:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800366a:	4b10      	ldr	r3, [pc, #64]	; (80036ac <SystemInit+0x114>)
 800366c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003670:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003672:	4b04      	ldr	r3, [pc, #16]	; (8003684 <SystemInit+0xec>)
 8003674:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003678:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800367a:	bf00      	nop
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	e000ed00 	.word	0xe000ed00
 8003688:	52002000 	.word	0x52002000
 800368c:	58024400 	.word	0x58024400
 8003690:	eaf6ed7f 	.word	0xeaf6ed7f
 8003694:	02020200 	.word	0x02020200
 8003698:	01ff0000 	.word	0x01ff0000
 800369c:	01010280 	.word	0x01010280
 80036a0:	5c001000 	.word	0x5c001000
 80036a4:	ffff0000 	.word	0xffff0000
 80036a8:	51008108 	.word	0x51008108
 80036ac:	52004000 	.word	0x52004000

080036b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80036b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80036b4:	f7ff ff70 	bl	8003598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036b8:	480c      	ldr	r0, [pc, #48]	; (80036ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036ba:	490d      	ldr	r1, [pc, #52]	; (80036f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036bc:	4a0d      	ldr	r2, [pc, #52]	; (80036f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036c0:	e002      	b.n	80036c8 <LoopCopyDataInit>

080036c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036c6:	3304      	adds	r3, #4

080036c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036cc:	d3f9      	bcc.n	80036c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036ce:	4a0a      	ldr	r2, [pc, #40]	; (80036f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036d0:	4c0a      	ldr	r4, [pc, #40]	; (80036fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80036d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036d4:	e001      	b.n	80036da <LoopFillZerobss>

080036d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036d8:	3204      	adds	r2, #4

080036da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036dc:	d3fb      	bcc.n	80036d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036de:	f00a f945 	bl	800d96c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036e2:	f7fd fe0b 	bl	80012fc <main>
  bx  lr
 80036e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036f0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80036f4:	0800daf8 	.word	0x0800daf8
  ldr r2, =_sbss
 80036f8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80036fc:	200049a8 	.word	0x200049a8

08003700 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003700:	e7fe      	b.n	8003700 <ADC3_IRQHandler>
	...

08003704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800370a:	2003      	movs	r0, #3
 800370c:	f000 f933 	bl	8003976 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003710:	f003 ffea 	bl	80076e8 <HAL_RCC_GetSysClockFreq>
 8003714:	4602      	mov	r2, r0
 8003716:	4b15      	ldr	r3, [pc, #84]	; (800376c <HAL_Init+0x68>)
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	0a1b      	lsrs	r3, r3, #8
 800371c:	f003 030f 	and.w	r3, r3, #15
 8003720:	4913      	ldr	r1, [pc, #76]	; (8003770 <HAL_Init+0x6c>)
 8003722:	5ccb      	ldrb	r3, [r1, r3]
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	fa22 f303 	lsr.w	r3, r2, r3
 800372c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800372e:	4b0f      	ldr	r3, [pc, #60]	; (800376c <HAL_Init+0x68>)
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	4a0e      	ldr	r2, [pc, #56]	; (8003770 <HAL_Init+0x6c>)
 8003738:	5cd3      	ldrb	r3, [r2, r3]
 800373a:	f003 031f 	and.w	r3, r3, #31
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	fa22 f303 	lsr.w	r3, r2, r3
 8003744:	4a0b      	ldr	r2, [pc, #44]	; (8003774 <HAL_Init+0x70>)
 8003746:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003748:	4a0b      	ldr	r2, [pc, #44]	; (8003778 <HAL_Init+0x74>)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800374e:	2000      	movs	r0, #0
 8003750:	f7ff fa20 	bl	8002b94 <HAL_InitTick>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e002      	b.n	8003764 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800375e:	f7fe fe41 	bl	80023e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	58024400 	.word	0x58024400
 8003770:	0800daa8 	.word	0x0800daa8
 8003774:	20000004 	.word	0x20000004
 8003778:	20000000 	.word	0x20000000

0800377c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003780:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_IncTick+0x20>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	461a      	mov	r2, r3
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <HAL_IncTick+0x24>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4413      	add	r3, r2
 800378c:	4a04      	ldr	r2, [pc, #16]	; (80037a0 <HAL_IncTick+0x24>)
 800378e:	6013      	str	r3, [r2, #0]
}
 8003790:	bf00      	nop
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	2000000c 	.word	0x2000000c
 80037a0:	200049a4 	.word	0x200049a4

080037a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return uwTick;
 80037a8:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <HAL_GetTick+0x14>)
 80037aa:	681b      	ldr	r3, [r3, #0]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	200049a4 	.word	0x200049a4

080037bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037c4:	f7ff ffee 	bl	80037a4 <HAL_GetTick>
 80037c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d4:	d005      	beq.n	80037e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037d6:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <HAL_Delay+0x44>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4413      	add	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037e2:	bf00      	nop
 80037e4:	f7ff ffde 	bl	80037a4 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d8f7      	bhi.n	80037e4 <HAL_Delay+0x28>
  {
  }
}
 80037f4:	bf00      	nop
 80037f6:	bf00      	nop
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	2000000c 	.word	0x2000000c

08003804 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003808:	4b03      	ldr	r3, [pc, #12]	; (8003818 <HAL_GetREVID+0x14>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	0c1b      	lsrs	r3, r3, #16
}
 800380e:	4618      	mov	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	5c001000 	.word	0x5c001000

0800381c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800382c:	4b0b      	ldr	r3, [pc, #44]	; (800385c <__NVIC_SetPriorityGrouping+0x40>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003838:	4013      	ands	r3, r2
 800383a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <__NVIC_SetPriorityGrouping+0x44>)
 8003846:	4313      	orrs	r3, r2
 8003848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800384a:	4a04      	ldr	r2, [pc, #16]	; (800385c <__NVIC_SetPriorityGrouping+0x40>)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	60d3      	str	r3, [r2, #12]
}
 8003850:	bf00      	nop
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	e000ed00 	.word	0xe000ed00
 8003860:	05fa0000 	.word	0x05fa0000

08003864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003868:	4b04      	ldr	r3, [pc, #16]	; (800387c <__NVIC_GetPriorityGrouping+0x18>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	0a1b      	lsrs	r3, r3, #8
 800386e:	f003 0307 	and.w	r3, r3, #7
}
 8003872:	4618      	mov	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	e000ed00 	.word	0xe000ed00

08003880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800388a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800388e:	2b00      	cmp	r3, #0
 8003890:	db0b      	blt.n	80038aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003892:	88fb      	ldrh	r3, [r7, #6]
 8003894:	f003 021f 	and.w	r2, r3, #31
 8003898:	4907      	ldr	r1, [pc, #28]	; (80038b8 <__NVIC_EnableIRQ+0x38>)
 800389a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	2001      	movs	r0, #1
 80038a2:	fa00 f202 	lsl.w	r2, r0, r2
 80038a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	e000e100 	.word	0xe000e100

080038bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	6039      	str	r1, [r7, #0]
 80038c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80038c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	db0a      	blt.n	80038e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	490c      	ldr	r1, [pc, #48]	; (8003908 <__NVIC_SetPriority+0x4c>)
 80038d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038da:	0112      	lsls	r2, r2, #4
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	440b      	add	r3, r1
 80038e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038e4:	e00a      	b.n	80038fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	4908      	ldr	r1, [pc, #32]	; (800390c <__NVIC_SetPriority+0x50>)
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	3b04      	subs	r3, #4
 80038f4:	0112      	lsls	r2, r2, #4
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	440b      	add	r3, r1
 80038fa:	761a      	strb	r2, [r3, #24]
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	e000e100 	.word	0xe000e100
 800390c:	e000ed00 	.word	0xe000ed00

08003910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003910:	b480      	push	{r7}
 8003912:	b089      	sub	sp, #36	; 0x24
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f1c3 0307 	rsb	r3, r3, #7
 800392a:	2b04      	cmp	r3, #4
 800392c:	bf28      	it	cs
 800392e:	2304      	movcs	r3, #4
 8003930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3304      	adds	r3, #4
 8003936:	2b06      	cmp	r3, #6
 8003938:	d902      	bls.n	8003940 <NVIC_EncodePriority+0x30>
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	3b03      	subs	r3, #3
 800393e:	e000      	b.n	8003942 <NVIC_EncodePriority+0x32>
 8003940:	2300      	movs	r3, #0
 8003942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003944:	f04f 32ff 	mov.w	r2, #4294967295
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	43da      	mvns	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	401a      	ands	r2, r3
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003958:	f04f 31ff 	mov.w	r1, #4294967295
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	fa01 f303 	lsl.w	r3, r1, r3
 8003962:	43d9      	mvns	r1, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003968:	4313      	orrs	r3, r2
         );
}
 800396a:	4618      	mov	r0, r3
 800396c:	3724      	adds	r7, #36	; 0x24
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b082      	sub	sp, #8
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff ff4c 	bl	800381c <__NVIC_SetPriorityGrouping>
}
 8003984:	bf00      	nop
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800399a:	f7ff ff63 	bl	8003864 <__NVIC_GetPriorityGrouping>
 800399e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	68b9      	ldr	r1, [r7, #8]
 80039a4:	6978      	ldr	r0, [r7, #20]
 80039a6:	f7ff ffb3 	bl	8003910 <NVIC_EncodePriority>
 80039aa:	4602      	mov	r2, r0
 80039ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039b0:	4611      	mov	r1, r2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff ff82 	bl	80038bc <__NVIC_SetPriority>
}
 80039b8:	bf00      	nop
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff ff56 	bl	8003880 <__NVIC_EnableIRQ>
}
 80039d4:	bf00      	nop
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80039e4:	f7ff fede 	bl	80037a4 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e316      	b.n	8004022 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a66      	ldr	r2, [pc, #408]	; (8003b94 <HAL_DMA_Init+0x1b8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d04a      	beq.n	8003a94 <HAL_DMA_Init+0xb8>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a65      	ldr	r2, [pc, #404]	; (8003b98 <HAL_DMA_Init+0x1bc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d045      	beq.n	8003a94 <HAL_DMA_Init+0xb8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a63      	ldr	r2, [pc, #396]	; (8003b9c <HAL_DMA_Init+0x1c0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d040      	beq.n	8003a94 <HAL_DMA_Init+0xb8>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a62      	ldr	r2, [pc, #392]	; (8003ba0 <HAL_DMA_Init+0x1c4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d03b      	beq.n	8003a94 <HAL_DMA_Init+0xb8>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a60      	ldr	r2, [pc, #384]	; (8003ba4 <HAL_DMA_Init+0x1c8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d036      	beq.n	8003a94 <HAL_DMA_Init+0xb8>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a5f      	ldr	r2, [pc, #380]	; (8003ba8 <HAL_DMA_Init+0x1cc>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d031      	beq.n	8003a94 <HAL_DMA_Init+0xb8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a5d      	ldr	r2, [pc, #372]	; (8003bac <HAL_DMA_Init+0x1d0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d02c      	beq.n	8003a94 <HAL_DMA_Init+0xb8>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a5c      	ldr	r2, [pc, #368]	; (8003bb0 <HAL_DMA_Init+0x1d4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d027      	beq.n	8003a94 <HAL_DMA_Init+0xb8>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a5a      	ldr	r2, [pc, #360]	; (8003bb4 <HAL_DMA_Init+0x1d8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d022      	beq.n	8003a94 <HAL_DMA_Init+0xb8>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a59      	ldr	r2, [pc, #356]	; (8003bb8 <HAL_DMA_Init+0x1dc>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d01d      	beq.n	8003a94 <HAL_DMA_Init+0xb8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a57      	ldr	r2, [pc, #348]	; (8003bbc <HAL_DMA_Init+0x1e0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d018      	beq.n	8003a94 <HAL_DMA_Init+0xb8>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a56      	ldr	r2, [pc, #344]	; (8003bc0 <HAL_DMA_Init+0x1e4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d013      	beq.n	8003a94 <HAL_DMA_Init+0xb8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a54      	ldr	r2, [pc, #336]	; (8003bc4 <HAL_DMA_Init+0x1e8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00e      	beq.n	8003a94 <HAL_DMA_Init+0xb8>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a53      	ldr	r2, [pc, #332]	; (8003bc8 <HAL_DMA_Init+0x1ec>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d009      	beq.n	8003a94 <HAL_DMA_Init+0xb8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a51      	ldr	r2, [pc, #324]	; (8003bcc <HAL_DMA_Init+0x1f0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d004      	beq.n	8003a94 <HAL_DMA_Init+0xb8>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a50      	ldr	r2, [pc, #320]	; (8003bd0 <HAL_DMA_Init+0x1f4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d101      	bne.n	8003a98 <HAL_DMA_Init+0xbc>
 8003a94:	2301      	movs	r3, #1
 8003a96:	e000      	b.n	8003a9a <HAL_DMA_Init+0xbe>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 813b 	beq.w	8003d16 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a37      	ldr	r2, [pc, #220]	; (8003b94 <HAL_DMA_Init+0x1b8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d04a      	beq.n	8003b50 <HAL_DMA_Init+0x174>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a36      	ldr	r2, [pc, #216]	; (8003b98 <HAL_DMA_Init+0x1bc>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d045      	beq.n	8003b50 <HAL_DMA_Init+0x174>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a34      	ldr	r2, [pc, #208]	; (8003b9c <HAL_DMA_Init+0x1c0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d040      	beq.n	8003b50 <HAL_DMA_Init+0x174>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a33      	ldr	r2, [pc, #204]	; (8003ba0 <HAL_DMA_Init+0x1c4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d03b      	beq.n	8003b50 <HAL_DMA_Init+0x174>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a31      	ldr	r2, [pc, #196]	; (8003ba4 <HAL_DMA_Init+0x1c8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d036      	beq.n	8003b50 <HAL_DMA_Init+0x174>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a30      	ldr	r2, [pc, #192]	; (8003ba8 <HAL_DMA_Init+0x1cc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d031      	beq.n	8003b50 <HAL_DMA_Init+0x174>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a2e      	ldr	r2, [pc, #184]	; (8003bac <HAL_DMA_Init+0x1d0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d02c      	beq.n	8003b50 <HAL_DMA_Init+0x174>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a2d      	ldr	r2, [pc, #180]	; (8003bb0 <HAL_DMA_Init+0x1d4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d027      	beq.n	8003b50 <HAL_DMA_Init+0x174>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a2b      	ldr	r2, [pc, #172]	; (8003bb4 <HAL_DMA_Init+0x1d8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d022      	beq.n	8003b50 <HAL_DMA_Init+0x174>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a2a      	ldr	r2, [pc, #168]	; (8003bb8 <HAL_DMA_Init+0x1dc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d01d      	beq.n	8003b50 <HAL_DMA_Init+0x174>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a28      	ldr	r2, [pc, #160]	; (8003bbc <HAL_DMA_Init+0x1e0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d018      	beq.n	8003b50 <HAL_DMA_Init+0x174>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a27      	ldr	r2, [pc, #156]	; (8003bc0 <HAL_DMA_Init+0x1e4>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d013      	beq.n	8003b50 <HAL_DMA_Init+0x174>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a25      	ldr	r2, [pc, #148]	; (8003bc4 <HAL_DMA_Init+0x1e8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00e      	beq.n	8003b50 <HAL_DMA_Init+0x174>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a24      	ldr	r2, [pc, #144]	; (8003bc8 <HAL_DMA_Init+0x1ec>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d009      	beq.n	8003b50 <HAL_DMA_Init+0x174>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a22      	ldr	r2, [pc, #136]	; (8003bcc <HAL_DMA_Init+0x1f0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d004      	beq.n	8003b50 <HAL_DMA_Init+0x174>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a21      	ldr	r2, [pc, #132]	; (8003bd0 <HAL_DMA_Init+0x1f4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d108      	bne.n	8003b62 <HAL_DMA_Init+0x186>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0201 	bic.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	e007      	b.n	8003b72 <HAL_DMA_Init+0x196>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0201 	bic.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b72:	e02f      	b.n	8003bd4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b74:	f7ff fe16 	bl	80037a4 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b05      	cmp	r3, #5
 8003b80:	d928      	bls.n	8003bd4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e246      	b.n	8004022 <HAL_DMA_Init+0x646>
 8003b94:	40020010 	.word	0x40020010
 8003b98:	40020028 	.word	0x40020028
 8003b9c:	40020040 	.word	0x40020040
 8003ba0:	40020058 	.word	0x40020058
 8003ba4:	40020070 	.word	0x40020070
 8003ba8:	40020088 	.word	0x40020088
 8003bac:	400200a0 	.word	0x400200a0
 8003bb0:	400200b8 	.word	0x400200b8
 8003bb4:	40020410 	.word	0x40020410
 8003bb8:	40020428 	.word	0x40020428
 8003bbc:	40020440 	.word	0x40020440
 8003bc0:	40020458 	.word	0x40020458
 8003bc4:	40020470 	.word	0x40020470
 8003bc8:	40020488 	.word	0x40020488
 8003bcc:	400204a0 	.word	0x400204a0
 8003bd0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1c8      	bne.n	8003b74 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4b83      	ldr	r3, [pc, #524]	; (8003dfc <HAL_DMA_Init+0x420>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003bfa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c06:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c12:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d107      	bne.n	8003c38 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c30:	4313      	orrs	r3, r2
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003c38:	4b71      	ldr	r3, [pc, #452]	; (8003e00 <HAL_DMA_Init+0x424>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4b71      	ldr	r3, [pc, #452]	; (8003e04 <HAL_DMA_Init+0x428>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c44:	d328      	bcc.n	8003c98 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b28      	cmp	r3, #40	; 0x28
 8003c4c:	d903      	bls.n	8003c56 <HAL_DMA_Init+0x27a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b2e      	cmp	r3, #46	; 0x2e
 8003c54:	d917      	bls.n	8003c86 <HAL_DMA_Init+0x2aa>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b3e      	cmp	r3, #62	; 0x3e
 8003c5c:	d903      	bls.n	8003c66 <HAL_DMA_Init+0x28a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b42      	cmp	r3, #66	; 0x42
 8003c64:	d90f      	bls.n	8003c86 <HAL_DMA_Init+0x2aa>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b46      	cmp	r3, #70	; 0x46
 8003c6c:	d903      	bls.n	8003c76 <HAL_DMA_Init+0x29a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b48      	cmp	r3, #72	; 0x48
 8003c74:	d907      	bls.n	8003c86 <HAL_DMA_Init+0x2aa>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b4e      	cmp	r3, #78	; 0x4e
 8003c7c:	d905      	bls.n	8003c8a <HAL_DMA_Init+0x2ae>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b52      	cmp	r3, #82	; 0x52
 8003c84:	d801      	bhi.n	8003c8a <HAL_DMA_Init+0x2ae>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <HAL_DMA_Init+0x2b0>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c96:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f023 0307 	bic.w	r3, r3, #7
 8003cae:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d117      	bne.n	8003cf2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00e      	beq.n	8003cf2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f002 fb3d 	bl	8006354 <DMA_CheckFifoParam>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2240      	movs	r2, #64	; 0x40
 8003ce4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e197      	b.n	8004022 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f002 fa78 	bl	80061f0 <DMA_CalcBaseAndBitshift>
 8003d00:	4603      	mov	r3, r0
 8003d02:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d08:	f003 031f 	and.w	r3, r3, #31
 8003d0c:	223f      	movs	r2, #63	; 0x3f
 8003d0e:	409a      	lsls	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	e0cd      	b.n	8003eb2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a3b      	ldr	r2, [pc, #236]	; (8003e08 <HAL_DMA_Init+0x42c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d022      	beq.n	8003d66 <HAL_DMA_Init+0x38a>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a39      	ldr	r2, [pc, #228]	; (8003e0c <HAL_DMA_Init+0x430>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d01d      	beq.n	8003d66 <HAL_DMA_Init+0x38a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a38      	ldr	r2, [pc, #224]	; (8003e10 <HAL_DMA_Init+0x434>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d018      	beq.n	8003d66 <HAL_DMA_Init+0x38a>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a36      	ldr	r2, [pc, #216]	; (8003e14 <HAL_DMA_Init+0x438>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d013      	beq.n	8003d66 <HAL_DMA_Init+0x38a>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a35      	ldr	r2, [pc, #212]	; (8003e18 <HAL_DMA_Init+0x43c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d00e      	beq.n	8003d66 <HAL_DMA_Init+0x38a>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a33      	ldr	r2, [pc, #204]	; (8003e1c <HAL_DMA_Init+0x440>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d009      	beq.n	8003d66 <HAL_DMA_Init+0x38a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a32      	ldr	r2, [pc, #200]	; (8003e20 <HAL_DMA_Init+0x444>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d004      	beq.n	8003d66 <HAL_DMA_Init+0x38a>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a30      	ldr	r2, [pc, #192]	; (8003e24 <HAL_DMA_Init+0x448>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d101      	bne.n	8003d6a <HAL_DMA_Init+0x38e>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <HAL_DMA_Init+0x390>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 8097 	beq.w	8003ea0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a24      	ldr	r2, [pc, #144]	; (8003e08 <HAL_DMA_Init+0x42c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d021      	beq.n	8003dc0 <HAL_DMA_Init+0x3e4>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a22      	ldr	r2, [pc, #136]	; (8003e0c <HAL_DMA_Init+0x430>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d01c      	beq.n	8003dc0 <HAL_DMA_Init+0x3e4>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a21      	ldr	r2, [pc, #132]	; (8003e10 <HAL_DMA_Init+0x434>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d017      	beq.n	8003dc0 <HAL_DMA_Init+0x3e4>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a1f      	ldr	r2, [pc, #124]	; (8003e14 <HAL_DMA_Init+0x438>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d012      	beq.n	8003dc0 <HAL_DMA_Init+0x3e4>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a1e      	ldr	r2, [pc, #120]	; (8003e18 <HAL_DMA_Init+0x43c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d00d      	beq.n	8003dc0 <HAL_DMA_Init+0x3e4>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a1c      	ldr	r2, [pc, #112]	; (8003e1c <HAL_DMA_Init+0x440>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d008      	beq.n	8003dc0 <HAL_DMA_Init+0x3e4>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a1b      	ldr	r2, [pc, #108]	; (8003e20 <HAL_DMA_Init+0x444>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d003      	beq.n	8003dc0 <HAL_DMA_Init+0x3e4>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a19      	ldr	r2, [pc, #100]	; (8003e24 <HAL_DMA_Init+0x448>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2202      	movs	r2, #2
 8003dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <HAL_DMA_Init+0x44c>)
 8003dde:	4013      	ands	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	2b40      	cmp	r3, #64	; 0x40
 8003de8:	d020      	beq.n	8003e2c <HAL_DMA_Init+0x450>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b80      	cmp	r3, #128	; 0x80
 8003df0:	d102      	bne.n	8003df8 <HAL_DMA_Init+0x41c>
 8003df2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003df6:	e01a      	b.n	8003e2e <HAL_DMA_Init+0x452>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e018      	b.n	8003e2e <HAL_DMA_Init+0x452>
 8003dfc:	fe10803f 	.word	0xfe10803f
 8003e00:	5c001000 	.word	0x5c001000
 8003e04:	ffff0000 	.word	0xffff0000
 8003e08:	58025408 	.word	0x58025408
 8003e0c:	5802541c 	.word	0x5802541c
 8003e10:	58025430 	.word	0x58025430
 8003e14:	58025444 	.word	0x58025444
 8003e18:	58025458 	.word	0x58025458
 8003e1c:	5802546c 	.word	0x5802546c
 8003e20:	58025480 	.word	0x58025480
 8003e24:	58025494 	.word	0x58025494
 8003e28:	fffe000f 	.word	0xfffe000f
 8003e2c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68d2      	ldr	r2, [r2, #12]
 8003e32:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e5c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	461a      	mov	r2, r3
 8003e72:	4b6e      	ldr	r3, [pc, #440]	; (800402c <HAL_DMA_Init+0x650>)
 8003e74:	4413      	add	r3, r2
 8003e76:	4a6e      	ldr	r2, [pc, #440]	; (8004030 <HAL_DMA_Init+0x654>)
 8003e78:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7c:	091b      	lsrs	r3, r3, #4
 8003e7e:	009a      	lsls	r2, r3, #2
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f002 f9b3 	bl	80061f0 <DMA_CalcBaseAndBitshift>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e92:	f003 031f 	and.w	r3, r3, #31
 8003e96:	2201      	movs	r2, #1
 8003e98:	409a      	lsls	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	605a      	str	r2, [r3, #4]
 8003e9e:	e008      	b.n	8003eb2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2240      	movs	r2, #64	; 0x40
 8003ea4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e0b7      	b.n	8004022 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a5f      	ldr	r2, [pc, #380]	; (8004034 <HAL_DMA_Init+0x658>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d072      	beq.n	8003fa2 <HAL_DMA_Init+0x5c6>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a5d      	ldr	r2, [pc, #372]	; (8004038 <HAL_DMA_Init+0x65c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d06d      	beq.n	8003fa2 <HAL_DMA_Init+0x5c6>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a5c      	ldr	r2, [pc, #368]	; (800403c <HAL_DMA_Init+0x660>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d068      	beq.n	8003fa2 <HAL_DMA_Init+0x5c6>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a5a      	ldr	r2, [pc, #360]	; (8004040 <HAL_DMA_Init+0x664>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d063      	beq.n	8003fa2 <HAL_DMA_Init+0x5c6>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a59      	ldr	r2, [pc, #356]	; (8004044 <HAL_DMA_Init+0x668>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d05e      	beq.n	8003fa2 <HAL_DMA_Init+0x5c6>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a57      	ldr	r2, [pc, #348]	; (8004048 <HAL_DMA_Init+0x66c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d059      	beq.n	8003fa2 <HAL_DMA_Init+0x5c6>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a56      	ldr	r2, [pc, #344]	; (800404c <HAL_DMA_Init+0x670>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d054      	beq.n	8003fa2 <HAL_DMA_Init+0x5c6>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a54      	ldr	r2, [pc, #336]	; (8004050 <HAL_DMA_Init+0x674>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d04f      	beq.n	8003fa2 <HAL_DMA_Init+0x5c6>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a53      	ldr	r2, [pc, #332]	; (8004054 <HAL_DMA_Init+0x678>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d04a      	beq.n	8003fa2 <HAL_DMA_Init+0x5c6>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a51      	ldr	r2, [pc, #324]	; (8004058 <HAL_DMA_Init+0x67c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d045      	beq.n	8003fa2 <HAL_DMA_Init+0x5c6>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a50      	ldr	r2, [pc, #320]	; (800405c <HAL_DMA_Init+0x680>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d040      	beq.n	8003fa2 <HAL_DMA_Init+0x5c6>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a4e      	ldr	r2, [pc, #312]	; (8004060 <HAL_DMA_Init+0x684>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d03b      	beq.n	8003fa2 <HAL_DMA_Init+0x5c6>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a4d      	ldr	r2, [pc, #308]	; (8004064 <HAL_DMA_Init+0x688>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d036      	beq.n	8003fa2 <HAL_DMA_Init+0x5c6>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a4b      	ldr	r2, [pc, #300]	; (8004068 <HAL_DMA_Init+0x68c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d031      	beq.n	8003fa2 <HAL_DMA_Init+0x5c6>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a4a      	ldr	r2, [pc, #296]	; (800406c <HAL_DMA_Init+0x690>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d02c      	beq.n	8003fa2 <HAL_DMA_Init+0x5c6>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a48      	ldr	r2, [pc, #288]	; (8004070 <HAL_DMA_Init+0x694>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d027      	beq.n	8003fa2 <HAL_DMA_Init+0x5c6>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a47      	ldr	r2, [pc, #284]	; (8004074 <HAL_DMA_Init+0x698>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d022      	beq.n	8003fa2 <HAL_DMA_Init+0x5c6>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a45      	ldr	r2, [pc, #276]	; (8004078 <HAL_DMA_Init+0x69c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d01d      	beq.n	8003fa2 <HAL_DMA_Init+0x5c6>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a44      	ldr	r2, [pc, #272]	; (800407c <HAL_DMA_Init+0x6a0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d018      	beq.n	8003fa2 <HAL_DMA_Init+0x5c6>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a42      	ldr	r2, [pc, #264]	; (8004080 <HAL_DMA_Init+0x6a4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d013      	beq.n	8003fa2 <HAL_DMA_Init+0x5c6>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a41      	ldr	r2, [pc, #260]	; (8004084 <HAL_DMA_Init+0x6a8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00e      	beq.n	8003fa2 <HAL_DMA_Init+0x5c6>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a3f      	ldr	r2, [pc, #252]	; (8004088 <HAL_DMA_Init+0x6ac>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d009      	beq.n	8003fa2 <HAL_DMA_Init+0x5c6>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a3e      	ldr	r2, [pc, #248]	; (800408c <HAL_DMA_Init+0x6b0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d004      	beq.n	8003fa2 <HAL_DMA_Init+0x5c6>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a3c      	ldr	r2, [pc, #240]	; (8004090 <HAL_DMA_Init+0x6b4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d101      	bne.n	8003fa6 <HAL_DMA_Init+0x5ca>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <HAL_DMA_Init+0x5cc>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d032      	beq.n	8004012 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f002 fa4d 	bl	800644c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2b80      	cmp	r3, #128	; 0x80
 8003fb8:	d102      	bne.n	8003fc0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003fd4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d010      	beq.n	8004000 <HAL_DMA_Init+0x624>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d80c      	bhi.n	8004000 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f002 faca 	bl	8006580 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ffc:	605a      	str	r2, [r3, #4]
 8003ffe:	e008      	b.n	8004012 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	a7fdabf8 	.word	0xa7fdabf8
 8004030:	cccccccd 	.word	0xcccccccd
 8004034:	40020010 	.word	0x40020010
 8004038:	40020028 	.word	0x40020028
 800403c:	40020040 	.word	0x40020040
 8004040:	40020058 	.word	0x40020058
 8004044:	40020070 	.word	0x40020070
 8004048:	40020088 	.word	0x40020088
 800404c:	400200a0 	.word	0x400200a0
 8004050:	400200b8 	.word	0x400200b8
 8004054:	40020410 	.word	0x40020410
 8004058:	40020428 	.word	0x40020428
 800405c:	40020440 	.word	0x40020440
 8004060:	40020458 	.word	0x40020458
 8004064:	40020470 	.word	0x40020470
 8004068:	40020488 	.word	0x40020488
 800406c:	400204a0 	.word	0x400204a0
 8004070:	400204b8 	.word	0x400204b8
 8004074:	58025408 	.word	0x58025408
 8004078:	5802541c 	.word	0x5802541c
 800407c:	58025430 	.word	0x58025430
 8004080:	58025444 	.word	0x58025444
 8004084:	58025458 	.word	0x58025458
 8004088:	5802546c 	.word	0x5802546c
 800408c:	58025480 	.word	0x58025480
 8004090:	58025494 	.word	0x58025494

08004094 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e226      	b.n	80044fe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_DMA_Start_IT+0x2a>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e21f      	b.n	80044fe <HAL_DMA_Start_IT+0x46a>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	f040 820a 	bne.w	80044e8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a68      	ldr	r2, [pc, #416]	; (8004288 <HAL_DMA_Start_IT+0x1f4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d04a      	beq.n	8004182 <HAL_DMA_Start_IT+0xee>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a66      	ldr	r2, [pc, #408]	; (800428c <HAL_DMA_Start_IT+0x1f8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d045      	beq.n	8004182 <HAL_DMA_Start_IT+0xee>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a65      	ldr	r2, [pc, #404]	; (8004290 <HAL_DMA_Start_IT+0x1fc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d040      	beq.n	8004182 <HAL_DMA_Start_IT+0xee>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a63      	ldr	r2, [pc, #396]	; (8004294 <HAL_DMA_Start_IT+0x200>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d03b      	beq.n	8004182 <HAL_DMA_Start_IT+0xee>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a62      	ldr	r2, [pc, #392]	; (8004298 <HAL_DMA_Start_IT+0x204>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d036      	beq.n	8004182 <HAL_DMA_Start_IT+0xee>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a60      	ldr	r2, [pc, #384]	; (800429c <HAL_DMA_Start_IT+0x208>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d031      	beq.n	8004182 <HAL_DMA_Start_IT+0xee>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a5f      	ldr	r2, [pc, #380]	; (80042a0 <HAL_DMA_Start_IT+0x20c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d02c      	beq.n	8004182 <HAL_DMA_Start_IT+0xee>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a5d      	ldr	r2, [pc, #372]	; (80042a4 <HAL_DMA_Start_IT+0x210>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d027      	beq.n	8004182 <HAL_DMA_Start_IT+0xee>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a5c      	ldr	r2, [pc, #368]	; (80042a8 <HAL_DMA_Start_IT+0x214>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d022      	beq.n	8004182 <HAL_DMA_Start_IT+0xee>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a5a      	ldr	r2, [pc, #360]	; (80042ac <HAL_DMA_Start_IT+0x218>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d01d      	beq.n	8004182 <HAL_DMA_Start_IT+0xee>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a59      	ldr	r2, [pc, #356]	; (80042b0 <HAL_DMA_Start_IT+0x21c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d018      	beq.n	8004182 <HAL_DMA_Start_IT+0xee>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a57      	ldr	r2, [pc, #348]	; (80042b4 <HAL_DMA_Start_IT+0x220>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d013      	beq.n	8004182 <HAL_DMA_Start_IT+0xee>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a56      	ldr	r2, [pc, #344]	; (80042b8 <HAL_DMA_Start_IT+0x224>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d00e      	beq.n	8004182 <HAL_DMA_Start_IT+0xee>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a54      	ldr	r2, [pc, #336]	; (80042bc <HAL_DMA_Start_IT+0x228>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d009      	beq.n	8004182 <HAL_DMA_Start_IT+0xee>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a53      	ldr	r2, [pc, #332]	; (80042c0 <HAL_DMA_Start_IT+0x22c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d004      	beq.n	8004182 <HAL_DMA_Start_IT+0xee>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a51      	ldr	r2, [pc, #324]	; (80042c4 <HAL_DMA_Start_IT+0x230>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d108      	bne.n	8004194 <HAL_DMA_Start_IT+0x100>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0201 	bic.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	e007      	b.n	80041a4 <HAL_DMA_Start_IT+0x110>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0201 	bic.w	r2, r2, #1
 80041a2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f001 fe74 	bl	8005e98 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a34      	ldr	r2, [pc, #208]	; (8004288 <HAL_DMA_Start_IT+0x1f4>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d04a      	beq.n	8004250 <HAL_DMA_Start_IT+0x1bc>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a33      	ldr	r2, [pc, #204]	; (800428c <HAL_DMA_Start_IT+0x1f8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d045      	beq.n	8004250 <HAL_DMA_Start_IT+0x1bc>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a31      	ldr	r2, [pc, #196]	; (8004290 <HAL_DMA_Start_IT+0x1fc>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d040      	beq.n	8004250 <HAL_DMA_Start_IT+0x1bc>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a30      	ldr	r2, [pc, #192]	; (8004294 <HAL_DMA_Start_IT+0x200>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d03b      	beq.n	8004250 <HAL_DMA_Start_IT+0x1bc>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a2e      	ldr	r2, [pc, #184]	; (8004298 <HAL_DMA_Start_IT+0x204>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d036      	beq.n	8004250 <HAL_DMA_Start_IT+0x1bc>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a2d      	ldr	r2, [pc, #180]	; (800429c <HAL_DMA_Start_IT+0x208>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d031      	beq.n	8004250 <HAL_DMA_Start_IT+0x1bc>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a2b      	ldr	r2, [pc, #172]	; (80042a0 <HAL_DMA_Start_IT+0x20c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d02c      	beq.n	8004250 <HAL_DMA_Start_IT+0x1bc>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a2a      	ldr	r2, [pc, #168]	; (80042a4 <HAL_DMA_Start_IT+0x210>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d027      	beq.n	8004250 <HAL_DMA_Start_IT+0x1bc>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a28      	ldr	r2, [pc, #160]	; (80042a8 <HAL_DMA_Start_IT+0x214>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d022      	beq.n	8004250 <HAL_DMA_Start_IT+0x1bc>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a27      	ldr	r2, [pc, #156]	; (80042ac <HAL_DMA_Start_IT+0x218>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d01d      	beq.n	8004250 <HAL_DMA_Start_IT+0x1bc>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a25      	ldr	r2, [pc, #148]	; (80042b0 <HAL_DMA_Start_IT+0x21c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d018      	beq.n	8004250 <HAL_DMA_Start_IT+0x1bc>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a24      	ldr	r2, [pc, #144]	; (80042b4 <HAL_DMA_Start_IT+0x220>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d013      	beq.n	8004250 <HAL_DMA_Start_IT+0x1bc>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a22      	ldr	r2, [pc, #136]	; (80042b8 <HAL_DMA_Start_IT+0x224>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d00e      	beq.n	8004250 <HAL_DMA_Start_IT+0x1bc>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a21      	ldr	r2, [pc, #132]	; (80042bc <HAL_DMA_Start_IT+0x228>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d009      	beq.n	8004250 <HAL_DMA_Start_IT+0x1bc>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a1f      	ldr	r2, [pc, #124]	; (80042c0 <HAL_DMA_Start_IT+0x22c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d004      	beq.n	8004250 <HAL_DMA_Start_IT+0x1bc>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a1e      	ldr	r2, [pc, #120]	; (80042c4 <HAL_DMA_Start_IT+0x230>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d101      	bne.n	8004254 <HAL_DMA_Start_IT+0x1c0>
 8004250:	2301      	movs	r3, #1
 8004252:	e000      	b.n	8004256 <HAL_DMA_Start_IT+0x1c2>
 8004254:	2300      	movs	r3, #0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d036      	beq.n	80042c8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f023 021e 	bic.w	r2, r3, #30
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f042 0216 	orr.w	r2, r2, #22
 800426c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	2b00      	cmp	r3, #0
 8004274:	d03e      	beq.n	80042f4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 0208 	orr.w	r2, r2, #8
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	e035      	b.n	80042f4 <HAL_DMA_Start_IT+0x260>
 8004288:	40020010 	.word	0x40020010
 800428c:	40020028 	.word	0x40020028
 8004290:	40020040 	.word	0x40020040
 8004294:	40020058 	.word	0x40020058
 8004298:	40020070 	.word	0x40020070
 800429c:	40020088 	.word	0x40020088
 80042a0:	400200a0 	.word	0x400200a0
 80042a4:	400200b8 	.word	0x400200b8
 80042a8:	40020410 	.word	0x40020410
 80042ac:	40020428 	.word	0x40020428
 80042b0:	40020440 	.word	0x40020440
 80042b4:	40020458 	.word	0x40020458
 80042b8:	40020470 	.word	0x40020470
 80042bc:	40020488 	.word	0x40020488
 80042c0:	400204a0 	.word	0x400204a0
 80042c4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f023 020e 	bic.w	r2, r3, #14
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 020a 	orr.w	r2, r2, #10
 80042da:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d007      	beq.n	80042f4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0204 	orr.w	r2, r2, #4
 80042f2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a83      	ldr	r2, [pc, #524]	; (8004508 <HAL_DMA_Start_IT+0x474>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d072      	beq.n	80043e4 <HAL_DMA_Start_IT+0x350>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a82      	ldr	r2, [pc, #520]	; (800450c <HAL_DMA_Start_IT+0x478>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d06d      	beq.n	80043e4 <HAL_DMA_Start_IT+0x350>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a80      	ldr	r2, [pc, #512]	; (8004510 <HAL_DMA_Start_IT+0x47c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d068      	beq.n	80043e4 <HAL_DMA_Start_IT+0x350>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a7f      	ldr	r2, [pc, #508]	; (8004514 <HAL_DMA_Start_IT+0x480>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d063      	beq.n	80043e4 <HAL_DMA_Start_IT+0x350>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a7d      	ldr	r2, [pc, #500]	; (8004518 <HAL_DMA_Start_IT+0x484>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d05e      	beq.n	80043e4 <HAL_DMA_Start_IT+0x350>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a7c      	ldr	r2, [pc, #496]	; (800451c <HAL_DMA_Start_IT+0x488>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d059      	beq.n	80043e4 <HAL_DMA_Start_IT+0x350>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a7a      	ldr	r2, [pc, #488]	; (8004520 <HAL_DMA_Start_IT+0x48c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d054      	beq.n	80043e4 <HAL_DMA_Start_IT+0x350>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a79      	ldr	r2, [pc, #484]	; (8004524 <HAL_DMA_Start_IT+0x490>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d04f      	beq.n	80043e4 <HAL_DMA_Start_IT+0x350>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a77      	ldr	r2, [pc, #476]	; (8004528 <HAL_DMA_Start_IT+0x494>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d04a      	beq.n	80043e4 <HAL_DMA_Start_IT+0x350>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a76      	ldr	r2, [pc, #472]	; (800452c <HAL_DMA_Start_IT+0x498>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d045      	beq.n	80043e4 <HAL_DMA_Start_IT+0x350>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a74      	ldr	r2, [pc, #464]	; (8004530 <HAL_DMA_Start_IT+0x49c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d040      	beq.n	80043e4 <HAL_DMA_Start_IT+0x350>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a73      	ldr	r2, [pc, #460]	; (8004534 <HAL_DMA_Start_IT+0x4a0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d03b      	beq.n	80043e4 <HAL_DMA_Start_IT+0x350>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a71      	ldr	r2, [pc, #452]	; (8004538 <HAL_DMA_Start_IT+0x4a4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d036      	beq.n	80043e4 <HAL_DMA_Start_IT+0x350>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a70      	ldr	r2, [pc, #448]	; (800453c <HAL_DMA_Start_IT+0x4a8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d031      	beq.n	80043e4 <HAL_DMA_Start_IT+0x350>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a6e      	ldr	r2, [pc, #440]	; (8004540 <HAL_DMA_Start_IT+0x4ac>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d02c      	beq.n	80043e4 <HAL_DMA_Start_IT+0x350>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a6d      	ldr	r2, [pc, #436]	; (8004544 <HAL_DMA_Start_IT+0x4b0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d027      	beq.n	80043e4 <HAL_DMA_Start_IT+0x350>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a6b      	ldr	r2, [pc, #428]	; (8004548 <HAL_DMA_Start_IT+0x4b4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d022      	beq.n	80043e4 <HAL_DMA_Start_IT+0x350>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a6a      	ldr	r2, [pc, #424]	; (800454c <HAL_DMA_Start_IT+0x4b8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d01d      	beq.n	80043e4 <HAL_DMA_Start_IT+0x350>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a68      	ldr	r2, [pc, #416]	; (8004550 <HAL_DMA_Start_IT+0x4bc>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d018      	beq.n	80043e4 <HAL_DMA_Start_IT+0x350>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a67      	ldr	r2, [pc, #412]	; (8004554 <HAL_DMA_Start_IT+0x4c0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d013      	beq.n	80043e4 <HAL_DMA_Start_IT+0x350>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a65      	ldr	r2, [pc, #404]	; (8004558 <HAL_DMA_Start_IT+0x4c4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00e      	beq.n	80043e4 <HAL_DMA_Start_IT+0x350>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a64      	ldr	r2, [pc, #400]	; (800455c <HAL_DMA_Start_IT+0x4c8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d009      	beq.n	80043e4 <HAL_DMA_Start_IT+0x350>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a62      	ldr	r2, [pc, #392]	; (8004560 <HAL_DMA_Start_IT+0x4cc>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d004      	beq.n	80043e4 <HAL_DMA_Start_IT+0x350>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a61      	ldr	r2, [pc, #388]	; (8004564 <HAL_DMA_Start_IT+0x4d0>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d101      	bne.n	80043e8 <HAL_DMA_Start_IT+0x354>
 80043e4:	2301      	movs	r3, #1
 80043e6:	e000      	b.n	80043ea <HAL_DMA_Start_IT+0x356>
 80043e8:	2300      	movs	r3, #0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d01a      	beq.n	8004424 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d007      	beq.n	800440c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800440a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004410:	2b00      	cmp	r3, #0
 8004412:	d007      	beq.n	8004424 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800441e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004422:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a37      	ldr	r2, [pc, #220]	; (8004508 <HAL_DMA_Start_IT+0x474>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d04a      	beq.n	80044c4 <HAL_DMA_Start_IT+0x430>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a36      	ldr	r2, [pc, #216]	; (800450c <HAL_DMA_Start_IT+0x478>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d045      	beq.n	80044c4 <HAL_DMA_Start_IT+0x430>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a34      	ldr	r2, [pc, #208]	; (8004510 <HAL_DMA_Start_IT+0x47c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d040      	beq.n	80044c4 <HAL_DMA_Start_IT+0x430>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a33      	ldr	r2, [pc, #204]	; (8004514 <HAL_DMA_Start_IT+0x480>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d03b      	beq.n	80044c4 <HAL_DMA_Start_IT+0x430>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a31      	ldr	r2, [pc, #196]	; (8004518 <HAL_DMA_Start_IT+0x484>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d036      	beq.n	80044c4 <HAL_DMA_Start_IT+0x430>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a30      	ldr	r2, [pc, #192]	; (800451c <HAL_DMA_Start_IT+0x488>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d031      	beq.n	80044c4 <HAL_DMA_Start_IT+0x430>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a2e      	ldr	r2, [pc, #184]	; (8004520 <HAL_DMA_Start_IT+0x48c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d02c      	beq.n	80044c4 <HAL_DMA_Start_IT+0x430>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a2d      	ldr	r2, [pc, #180]	; (8004524 <HAL_DMA_Start_IT+0x490>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d027      	beq.n	80044c4 <HAL_DMA_Start_IT+0x430>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a2b      	ldr	r2, [pc, #172]	; (8004528 <HAL_DMA_Start_IT+0x494>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d022      	beq.n	80044c4 <HAL_DMA_Start_IT+0x430>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a2a      	ldr	r2, [pc, #168]	; (800452c <HAL_DMA_Start_IT+0x498>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d01d      	beq.n	80044c4 <HAL_DMA_Start_IT+0x430>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a28      	ldr	r2, [pc, #160]	; (8004530 <HAL_DMA_Start_IT+0x49c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d018      	beq.n	80044c4 <HAL_DMA_Start_IT+0x430>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a27      	ldr	r2, [pc, #156]	; (8004534 <HAL_DMA_Start_IT+0x4a0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d013      	beq.n	80044c4 <HAL_DMA_Start_IT+0x430>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a25      	ldr	r2, [pc, #148]	; (8004538 <HAL_DMA_Start_IT+0x4a4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00e      	beq.n	80044c4 <HAL_DMA_Start_IT+0x430>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a24      	ldr	r2, [pc, #144]	; (800453c <HAL_DMA_Start_IT+0x4a8>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d009      	beq.n	80044c4 <HAL_DMA_Start_IT+0x430>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a22      	ldr	r2, [pc, #136]	; (8004540 <HAL_DMA_Start_IT+0x4ac>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <HAL_DMA_Start_IT+0x430>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a21      	ldr	r2, [pc, #132]	; (8004544 <HAL_DMA_Start_IT+0x4b0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d108      	bne.n	80044d6 <HAL_DMA_Start_IT+0x442>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	e012      	b.n	80044fc <HAL_DMA_Start_IT+0x468>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0201 	orr.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	e009      	b.n	80044fc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80044fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	40020010 	.word	0x40020010
 800450c:	40020028 	.word	0x40020028
 8004510:	40020040 	.word	0x40020040
 8004514:	40020058 	.word	0x40020058
 8004518:	40020070 	.word	0x40020070
 800451c:	40020088 	.word	0x40020088
 8004520:	400200a0 	.word	0x400200a0
 8004524:	400200b8 	.word	0x400200b8
 8004528:	40020410 	.word	0x40020410
 800452c:	40020428 	.word	0x40020428
 8004530:	40020440 	.word	0x40020440
 8004534:	40020458 	.word	0x40020458
 8004538:	40020470 	.word	0x40020470
 800453c:	40020488 	.word	0x40020488
 8004540:	400204a0 	.word	0x400204a0
 8004544:	400204b8 	.word	0x400204b8
 8004548:	58025408 	.word	0x58025408
 800454c:	5802541c 	.word	0x5802541c
 8004550:	58025430 	.word	0x58025430
 8004554:	58025444 	.word	0x58025444
 8004558:	58025458 	.word	0x58025458
 800455c:	5802546c 	.word	0x5802546c
 8004560:	58025480 	.word	0x58025480
 8004564:	58025494 	.word	0x58025494

08004568 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004570:	f7ff f918 	bl	80037a4 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e2dc      	b.n	8004b3a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d008      	beq.n	800459e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2280      	movs	r2, #128	; 0x80
 8004590:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e2cd      	b.n	8004b3a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a76      	ldr	r2, [pc, #472]	; (800477c <HAL_DMA_Abort+0x214>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d04a      	beq.n	800463e <HAL_DMA_Abort+0xd6>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a74      	ldr	r2, [pc, #464]	; (8004780 <HAL_DMA_Abort+0x218>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d045      	beq.n	800463e <HAL_DMA_Abort+0xd6>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a73      	ldr	r2, [pc, #460]	; (8004784 <HAL_DMA_Abort+0x21c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d040      	beq.n	800463e <HAL_DMA_Abort+0xd6>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a71      	ldr	r2, [pc, #452]	; (8004788 <HAL_DMA_Abort+0x220>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d03b      	beq.n	800463e <HAL_DMA_Abort+0xd6>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a70      	ldr	r2, [pc, #448]	; (800478c <HAL_DMA_Abort+0x224>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d036      	beq.n	800463e <HAL_DMA_Abort+0xd6>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a6e      	ldr	r2, [pc, #440]	; (8004790 <HAL_DMA_Abort+0x228>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d031      	beq.n	800463e <HAL_DMA_Abort+0xd6>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a6d      	ldr	r2, [pc, #436]	; (8004794 <HAL_DMA_Abort+0x22c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d02c      	beq.n	800463e <HAL_DMA_Abort+0xd6>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a6b      	ldr	r2, [pc, #428]	; (8004798 <HAL_DMA_Abort+0x230>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d027      	beq.n	800463e <HAL_DMA_Abort+0xd6>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a6a      	ldr	r2, [pc, #424]	; (800479c <HAL_DMA_Abort+0x234>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d022      	beq.n	800463e <HAL_DMA_Abort+0xd6>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a68      	ldr	r2, [pc, #416]	; (80047a0 <HAL_DMA_Abort+0x238>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d01d      	beq.n	800463e <HAL_DMA_Abort+0xd6>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a67      	ldr	r2, [pc, #412]	; (80047a4 <HAL_DMA_Abort+0x23c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d018      	beq.n	800463e <HAL_DMA_Abort+0xd6>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a65      	ldr	r2, [pc, #404]	; (80047a8 <HAL_DMA_Abort+0x240>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d013      	beq.n	800463e <HAL_DMA_Abort+0xd6>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a64      	ldr	r2, [pc, #400]	; (80047ac <HAL_DMA_Abort+0x244>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00e      	beq.n	800463e <HAL_DMA_Abort+0xd6>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a62      	ldr	r2, [pc, #392]	; (80047b0 <HAL_DMA_Abort+0x248>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d009      	beq.n	800463e <HAL_DMA_Abort+0xd6>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a61      	ldr	r2, [pc, #388]	; (80047b4 <HAL_DMA_Abort+0x24c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d004      	beq.n	800463e <HAL_DMA_Abort+0xd6>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a5f      	ldr	r2, [pc, #380]	; (80047b8 <HAL_DMA_Abort+0x250>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d101      	bne.n	8004642 <HAL_DMA_Abort+0xda>
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <HAL_DMA_Abort+0xdc>
 8004642:	2300      	movs	r3, #0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d013      	beq.n	8004670 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 021e 	bic.w	r2, r2, #30
 8004656:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695a      	ldr	r2, [r3, #20]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004666:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	617b      	str	r3, [r7, #20]
 800466e:	e00a      	b.n	8004686 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 020e 	bic.w	r2, r2, #14
 800467e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a3c      	ldr	r2, [pc, #240]	; (800477c <HAL_DMA_Abort+0x214>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d072      	beq.n	8004776 <HAL_DMA_Abort+0x20e>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a3a      	ldr	r2, [pc, #232]	; (8004780 <HAL_DMA_Abort+0x218>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d06d      	beq.n	8004776 <HAL_DMA_Abort+0x20e>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a39      	ldr	r2, [pc, #228]	; (8004784 <HAL_DMA_Abort+0x21c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d068      	beq.n	8004776 <HAL_DMA_Abort+0x20e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a37      	ldr	r2, [pc, #220]	; (8004788 <HAL_DMA_Abort+0x220>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d063      	beq.n	8004776 <HAL_DMA_Abort+0x20e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a36      	ldr	r2, [pc, #216]	; (800478c <HAL_DMA_Abort+0x224>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d05e      	beq.n	8004776 <HAL_DMA_Abort+0x20e>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a34      	ldr	r2, [pc, #208]	; (8004790 <HAL_DMA_Abort+0x228>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d059      	beq.n	8004776 <HAL_DMA_Abort+0x20e>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a33      	ldr	r2, [pc, #204]	; (8004794 <HAL_DMA_Abort+0x22c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d054      	beq.n	8004776 <HAL_DMA_Abort+0x20e>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a31      	ldr	r2, [pc, #196]	; (8004798 <HAL_DMA_Abort+0x230>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d04f      	beq.n	8004776 <HAL_DMA_Abort+0x20e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a30      	ldr	r2, [pc, #192]	; (800479c <HAL_DMA_Abort+0x234>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d04a      	beq.n	8004776 <HAL_DMA_Abort+0x20e>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a2e      	ldr	r2, [pc, #184]	; (80047a0 <HAL_DMA_Abort+0x238>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d045      	beq.n	8004776 <HAL_DMA_Abort+0x20e>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a2d      	ldr	r2, [pc, #180]	; (80047a4 <HAL_DMA_Abort+0x23c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d040      	beq.n	8004776 <HAL_DMA_Abort+0x20e>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a2b      	ldr	r2, [pc, #172]	; (80047a8 <HAL_DMA_Abort+0x240>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d03b      	beq.n	8004776 <HAL_DMA_Abort+0x20e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a2a      	ldr	r2, [pc, #168]	; (80047ac <HAL_DMA_Abort+0x244>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d036      	beq.n	8004776 <HAL_DMA_Abort+0x20e>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a28      	ldr	r2, [pc, #160]	; (80047b0 <HAL_DMA_Abort+0x248>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d031      	beq.n	8004776 <HAL_DMA_Abort+0x20e>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a27      	ldr	r2, [pc, #156]	; (80047b4 <HAL_DMA_Abort+0x24c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d02c      	beq.n	8004776 <HAL_DMA_Abort+0x20e>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a25      	ldr	r2, [pc, #148]	; (80047b8 <HAL_DMA_Abort+0x250>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d027      	beq.n	8004776 <HAL_DMA_Abort+0x20e>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a24      	ldr	r2, [pc, #144]	; (80047bc <HAL_DMA_Abort+0x254>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d022      	beq.n	8004776 <HAL_DMA_Abort+0x20e>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a22      	ldr	r2, [pc, #136]	; (80047c0 <HAL_DMA_Abort+0x258>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d01d      	beq.n	8004776 <HAL_DMA_Abort+0x20e>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a21      	ldr	r2, [pc, #132]	; (80047c4 <HAL_DMA_Abort+0x25c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d018      	beq.n	8004776 <HAL_DMA_Abort+0x20e>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a1f      	ldr	r2, [pc, #124]	; (80047c8 <HAL_DMA_Abort+0x260>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d013      	beq.n	8004776 <HAL_DMA_Abort+0x20e>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a1e      	ldr	r2, [pc, #120]	; (80047cc <HAL_DMA_Abort+0x264>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00e      	beq.n	8004776 <HAL_DMA_Abort+0x20e>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a1c      	ldr	r2, [pc, #112]	; (80047d0 <HAL_DMA_Abort+0x268>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d009      	beq.n	8004776 <HAL_DMA_Abort+0x20e>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a1b      	ldr	r2, [pc, #108]	; (80047d4 <HAL_DMA_Abort+0x26c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d004      	beq.n	8004776 <HAL_DMA_Abort+0x20e>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a19      	ldr	r2, [pc, #100]	; (80047d8 <HAL_DMA_Abort+0x270>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d132      	bne.n	80047dc <HAL_DMA_Abort+0x274>
 8004776:	2301      	movs	r3, #1
 8004778:	e031      	b.n	80047de <HAL_DMA_Abort+0x276>
 800477a:	bf00      	nop
 800477c:	40020010 	.word	0x40020010
 8004780:	40020028 	.word	0x40020028
 8004784:	40020040 	.word	0x40020040
 8004788:	40020058 	.word	0x40020058
 800478c:	40020070 	.word	0x40020070
 8004790:	40020088 	.word	0x40020088
 8004794:	400200a0 	.word	0x400200a0
 8004798:	400200b8 	.word	0x400200b8
 800479c:	40020410 	.word	0x40020410
 80047a0:	40020428 	.word	0x40020428
 80047a4:	40020440 	.word	0x40020440
 80047a8:	40020458 	.word	0x40020458
 80047ac:	40020470 	.word	0x40020470
 80047b0:	40020488 	.word	0x40020488
 80047b4:	400204a0 	.word	0x400204a0
 80047b8:	400204b8 	.word	0x400204b8
 80047bc:	58025408 	.word	0x58025408
 80047c0:	5802541c 	.word	0x5802541c
 80047c4:	58025430 	.word	0x58025430
 80047c8:	58025444 	.word	0x58025444
 80047cc:	58025458 	.word	0x58025458
 80047d0:	5802546c 	.word	0x5802546c
 80047d4:	58025480 	.word	0x58025480
 80047d8:	58025494 	.word	0x58025494
 80047dc:	2300      	movs	r3, #0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d007      	beq.n	80047f2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a6d      	ldr	r2, [pc, #436]	; (80049ac <HAL_DMA_Abort+0x444>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d04a      	beq.n	8004892 <HAL_DMA_Abort+0x32a>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a6b      	ldr	r2, [pc, #428]	; (80049b0 <HAL_DMA_Abort+0x448>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d045      	beq.n	8004892 <HAL_DMA_Abort+0x32a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a6a      	ldr	r2, [pc, #424]	; (80049b4 <HAL_DMA_Abort+0x44c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d040      	beq.n	8004892 <HAL_DMA_Abort+0x32a>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a68      	ldr	r2, [pc, #416]	; (80049b8 <HAL_DMA_Abort+0x450>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d03b      	beq.n	8004892 <HAL_DMA_Abort+0x32a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a67      	ldr	r2, [pc, #412]	; (80049bc <HAL_DMA_Abort+0x454>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d036      	beq.n	8004892 <HAL_DMA_Abort+0x32a>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a65      	ldr	r2, [pc, #404]	; (80049c0 <HAL_DMA_Abort+0x458>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d031      	beq.n	8004892 <HAL_DMA_Abort+0x32a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a64      	ldr	r2, [pc, #400]	; (80049c4 <HAL_DMA_Abort+0x45c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d02c      	beq.n	8004892 <HAL_DMA_Abort+0x32a>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a62      	ldr	r2, [pc, #392]	; (80049c8 <HAL_DMA_Abort+0x460>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d027      	beq.n	8004892 <HAL_DMA_Abort+0x32a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a61      	ldr	r2, [pc, #388]	; (80049cc <HAL_DMA_Abort+0x464>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d022      	beq.n	8004892 <HAL_DMA_Abort+0x32a>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a5f      	ldr	r2, [pc, #380]	; (80049d0 <HAL_DMA_Abort+0x468>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d01d      	beq.n	8004892 <HAL_DMA_Abort+0x32a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a5e      	ldr	r2, [pc, #376]	; (80049d4 <HAL_DMA_Abort+0x46c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d018      	beq.n	8004892 <HAL_DMA_Abort+0x32a>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a5c      	ldr	r2, [pc, #368]	; (80049d8 <HAL_DMA_Abort+0x470>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d013      	beq.n	8004892 <HAL_DMA_Abort+0x32a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a5b      	ldr	r2, [pc, #364]	; (80049dc <HAL_DMA_Abort+0x474>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00e      	beq.n	8004892 <HAL_DMA_Abort+0x32a>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a59      	ldr	r2, [pc, #356]	; (80049e0 <HAL_DMA_Abort+0x478>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d009      	beq.n	8004892 <HAL_DMA_Abort+0x32a>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a58      	ldr	r2, [pc, #352]	; (80049e4 <HAL_DMA_Abort+0x47c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d004      	beq.n	8004892 <HAL_DMA_Abort+0x32a>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a56      	ldr	r2, [pc, #344]	; (80049e8 <HAL_DMA_Abort+0x480>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d108      	bne.n	80048a4 <HAL_DMA_Abort+0x33c>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0201 	bic.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	e007      	b.n	80048b4 <HAL_DMA_Abort+0x34c>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0201 	bic.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80048b4:	e013      	b.n	80048de <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048b6:	f7fe ff75 	bl	80037a4 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b05      	cmp	r3, #5
 80048c2:	d90c      	bls.n	80048de <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2220      	movs	r2, #32
 80048c8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2203      	movs	r2, #3
 80048d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e12d      	b.n	8004b3a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1e5      	bne.n	80048b6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a2f      	ldr	r2, [pc, #188]	; (80049ac <HAL_DMA_Abort+0x444>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d04a      	beq.n	800498a <HAL_DMA_Abort+0x422>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a2d      	ldr	r2, [pc, #180]	; (80049b0 <HAL_DMA_Abort+0x448>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d045      	beq.n	800498a <HAL_DMA_Abort+0x422>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a2c      	ldr	r2, [pc, #176]	; (80049b4 <HAL_DMA_Abort+0x44c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d040      	beq.n	800498a <HAL_DMA_Abort+0x422>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a2a      	ldr	r2, [pc, #168]	; (80049b8 <HAL_DMA_Abort+0x450>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d03b      	beq.n	800498a <HAL_DMA_Abort+0x422>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a29      	ldr	r2, [pc, #164]	; (80049bc <HAL_DMA_Abort+0x454>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d036      	beq.n	800498a <HAL_DMA_Abort+0x422>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a27      	ldr	r2, [pc, #156]	; (80049c0 <HAL_DMA_Abort+0x458>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d031      	beq.n	800498a <HAL_DMA_Abort+0x422>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a26      	ldr	r2, [pc, #152]	; (80049c4 <HAL_DMA_Abort+0x45c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d02c      	beq.n	800498a <HAL_DMA_Abort+0x422>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a24      	ldr	r2, [pc, #144]	; (80049c8 <HAL_DMA_Abort+0x460>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d027      	beq.n	800498a <HAL_DMA_Abort+0x422>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a23      	ldr	r2, [pc, #140]	; (80049cc <HAL_DMA_Abort+0x464>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d022      	beq.n	800498a <HAL_DMA_Abort+0x422>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a21      	ldr	r2, [pc, #132]	; (80049d0 <HAL_DMA_Abort+0x468>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d01d      	beq.n	800498a <HAL_DMA_Abort+0x422>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a20      	ldr	r2, [pc, #128]	; (80049d4 <HAL_DMA_Abort+0x46c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d018      	beq.n	800498a <HAL_DMA_Abort+0x422>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1e      	ldr	r2, [pc, #120]	; (80049d8 <HAL_DMA_Abort+0x470>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d013      	beq.n	800498a <HAL_DMA_Abort+0x422>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1d      	ldr	r2, [pc, #116]	; (80049dc <HAL_DMA_Abort+0x474>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d00e      	beq.n	800498a <HAL_DMA_Abort+0x422>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a1b      	ldr	r2, [pc, #108]	; (80049e0 <HAL_DMA_Abort+0x478>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d009      	beq.n	800498a <HAL_DMA_Abort+0x422>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1a      	ldr	r2, [pc, #104]	; (80049e4 <HAL_DMA_Abort+0x47c>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d004      	beq.n	800498a <HAL_DMA_Abort+0x422>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a18      	ldr	r2, [pc, #96]	; (80049e8 <HAL_DMA_Abort+0x480>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d101      	bne.n	800498e <HAL_DMA_Abort+0x426>
 800498a:	2301      	movs	r3, #1
 800498c:	e000      	b.n	8004990 <HAL_DMA_Abort+0x428>
 800498e:	2300      	movs	r3, #0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d02b      	beq.n	80049ec <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004998:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499e:	f003 031f 	and.w	r3, r3, #31
 80049a2:	223f      	movs	r2, #63	; 0x3f
 80049a4:	409a      	lsls	r2, r3
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	609a      	str	r2, [r3, #8]
 80049aa:	e02a      	b.n	8004a02 <HAL_DMA_Abort+0x49a>
 80049ac:	40020010 	.word	0x40020010
 80049b0:	40020028 	.word	0x40020028
 80049b4:	40020040 	.word	0x40020040
 80049b8:	40020058 	.word	0x40020058
 80049bc:	40020070 	.word	0x40020070
 80049c0:	40020088 	.word	0x40020088
 80049c4:	400200a0 	.word	0x400200a0
 80049c8:	400200b8 	.word	0x400200b8
 80049cc:	40020410 	.word	0x40020410
 80049d0:	40020428 	.word	0x40020428
 80049d4:	40020440 	.word	0x40020440
 80049d8:	40020458 	.word	0x40020458
 80049dc:	40020470 	.word	0x40020470
 80049e0:	40020488 	.word	0x40020488
 80049e4:	400204a0 	.word	0x400204a0
 80049e8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f6:	f003 031f 	and.w	r3, r3, #31
 80049fa:	2201      	movs	r2, #1
 80049fc:	409a      	lsls	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a4f      	ldr	r2, [pc, #316]	; (8004b44 <HAL_DMA_Abort+0x5dc>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d072      	beq.n	8004af2 <HAL_DMA_Abort+0x58a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a4d      	ldr	r2, [pc, #308]	; (8004b48 <HAL_DMA_Abort+0x5e0>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d06d      	beq.n	8004af2 <HAL_DMA_Abort+0x58a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a4c      	ldr	r2, [pc, #304]	; (8004b4c <HAL_DMA_Abort+0x5e4>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d068      	beq.n	8004af2 <HAL_DMA_Abort+0x58a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a4a      	ldr	r2, [pc, #296]	; (8004b50 <HAL_DMA_Abort+0x5e8>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d063      	beq.n	8004af2 <HAL_DMA_Abort+0x58a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a49      	ldr	r2, [pc, #292]	; (8004b54 <HAL_DMA_Abort+0x5ec>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d05e      	beq.n	8004af2 <HAL_DMA_Abort+0x58a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a47      	ldr	r2, [pc, #284]	; (8004b58 <HAL_DMA_Abort+0x5f0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d059      	beq.n	8004af2 <HAL_DMA_Abort+0x58a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a46      	ldr	r2, [pc, #280]	; (8004b5c <HAL_DMA_Abort+0x5f4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d054      	beq.n	8004af2 <HAL_DMA_Abort+0x58a>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a44      	ldr	r2, [pc, #272]	; (8004b60 <HAL_DMA_Abort+0x5f8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d04f      	beq.n	8004af2 <HAL_DMA_Abort+0x58a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a43      	ldr	r2, [pc, #268]	; (8004b64 <HAL_DMA_Abort+0x5fc>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d04a      	beq.n	8004af2 <HAL_DMA_Abort+0x58a>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a41      	ldr	r2, [pc, #260]	; (8004b68 <HAL_DMA_Abort+0x600>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d045      	beq.n	8004af2 <HAL_DMA_Abort+0x58a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a40      	ldr	r2, [pc, #256]	; (8004b6c <HAL_DMA_Abort+0x604>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d040      	beq.n	8004af2 <HAL_DMA_Abort+0x58a>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a3e      	ldr	r2, [pc, #248]	; (8004b70 <HAL_DMA_Abort+0x608>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d03b      	beq.n	8004af2 <HAL_DMA_Abort+0x58a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a3d      	ldr	r2, [pc, #244]	; (8004b74 <HAL_DMA_Abort+0x60c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d036      	beq.n	8004af2 <HAL_DMA_Abort+0x58a>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a3b      	ldr	r2, [pc, #236]	; (8004b78 <HAL_DMA_Abort+0x610>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d031      	beq.n	8004af2 <HAL_DMA_Abort+0x58a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a3a      	ldr	r2, [pc, #232]	; (8004b7c <HAL_DMA_Abort+0x614>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d02c      	beq.n	8004af2 <HAL_DMA_Abort+0x58a>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a38      	ldr	r2, [pc, #224]	; (8004b80 <HAL_DMA_Abort+0x618>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d027      	beq.n	8004af2 <HAL_DMA_Abort+0x58a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a37      	ldr	r2, [pc, #220]	; (8004b84 <HAL_DMA_Abort+0x61c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d022      	beq.n	8004af2 <HAL_DMA_Abort+0x58a>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a35      	ldr	r2, [pc, #212]	; (8004b88 <HAL_DMA_Abort+0x620>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d01d      	beq.n	8004af2 <HAL_DMA_Abort+0x58a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a34      	ldr	r2, [pc, #208]	; (8004b8c <HAL_DMA_Abort+0x624>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d018      	beq.n	8004af2 <HAL_DMA_Abort+0x58a>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a32      	ldr	r2, [pc, #200]	; (8004b90 <HAL_DMA_Abort+0x628>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d013      	beq.n	8004af2 <HAL_DMA_Abort+0x58a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a31      	ldr	r2, [pc, #196]	; (8004b94 <HAL_DMA_Abort+0x62c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00e      	beq.n	8004af2 <HAL_DMA_Abort+0x58a>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a2f      	ldr	r2, [pc, #188]	; (8004b98 <HAL_DMA_Abort+0x630>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d009      	beq.n	8004af2 <HAL_DMA_Abort+0x58a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a2e      	ldr	r2, [pc, #184]	; (8004b9c <HAL_DMA_Abort+0x634>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d004      	beq.n	8004af2 <HAL_DMA_Abort+0x58a>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a2c      	ldr	r2, [pc, #176]	; (8004ba0 <HAL_DMA_Abort+0x638>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d101      	bne.n	8004af6 <HAL_DMA_Abort+0x58e>
 8004af2:	2301      	movs	r3, #1
 8004af4:	e000      	b.n	8004af8 <HAL_DMA_Abort+0x590>
 8004af6:	2300      	movs	r3, #0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d015      	beq.n	8004b28 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004b04:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00c      	beq.n	8004b28 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b1c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004b26:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	40020010 	.word	0x40020010
 8004b48:	40020028 	.word	0x40020028
 8004b4c:	40020040 	.word	0x40020040
 8004b50:	40020058 	.word	0x40020058
 8004b54:	40020070 	.word	0x40020070
 8004b58:	40020088 	.word	0x40020088
 8004b5c:	400200a0 	.word	0x400200a0
 8004b60:	400200b8 	.word	0x400200b8
 8004b64:	40020410 	.word	0x40020410
 8004b68:	40020428 	.word	0x40020428
 8004b6c:	40020440 	.word	0x40020440
 8004b70:	40020458 	.word	0x40020458
 8004b74:	40020470 	.word	0x40020470
 8004b78:	40020488 	.word	0x40020488
 8004b7c:	400204a0 	.word	0x400204a0
 8004b80:	400204b8 	.word	0x400204b8
 8004b84:	58025408 	.word	0x58025408
 8004b88:	5802541c 	.word	0x5802541c
 8004b8c:	58025430 	.word	0x58025430
 8004b90:	58025444 	.word	0x58025444
 8004b94:	58025458 	.word	0x58025458
 8004b98:	5802546c 	.word	0x5802546c
 8004b9c:	58025480 	.word	0x58025480
 8004ba0:	58025494 	.word	0x58025494

08004ba4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e205      	b.n	8004fc2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d004      	beq.n	8004bcc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2280      	movs	r2, #128	; 0x80
 8004bc6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e1fa      	b.n	8004fc2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a8c      	ldr	r2, [pc, #560]	; (8004e04 <HAL_DMA_Abort_IT+0x260>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d04a      	beq.n	8004c6c <HAL_DMA_Abort_IT+0xc8>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a8b      	ldr	r2, [pc, #556]	; (8004e08 <HAL_DMA_Abort_IT+0x264>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d045      	beq.n	8004c6c <HAL_DMA_Abort_IT+0xc8>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a89      	ldr	r2, [pc, #548]	; (8004e0c <HAL_DMA_Abort_IT+0x268>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d040      	beq.n	8004c6c <HAL_DMA_Abort_IT+0xc8>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a88      	ldr	r2, [pc, #544]	; (8004e10 <HAL_DMA_Abort_IT+0x26c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d03b      	beq.n	8004c6c <HAL_DMA_Abort_IT+0xc8>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a86      	ldr	r2, [pc, #536]	; (8004e14 <HAL_DMA_Abort_IT+0x270>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d036      	beq.n	8004c6c <HAL_DMA_Abort_IT+0xc8>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a85      	ldr	r2, [pc, #532]	; (8004e18 <HAL_DMA_Abort_IT+0x274>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d031      	beq.n	8004c6c <HAL_DMA_Abort_IT+0xc8>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a83      	ldr	r2, [pc, #524]	; (8004e1c <HAL_DMA_Abort_IT+0x278>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d02c      	beq.n	8004c6c <HAL_DMA_Abort_IT+0xc8>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a82      	ldr	r2, [pc, #520]	; (8004e20 <HAL_DMA_Abort_IT+0x27c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d027      	beq.n	8004c6c <HAL_DMA_Abort_IT+0xc8>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a80      	ldr	r2, [pc, #512]	; (8004e24 <HAL_DMA_Abort_IT+0x280>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d022      	beq.n	8004c6c <HAL_DMA_Abort_IT+0xc8>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a7f      	ldr	r2, [pc, #508]	; (8004e28 <HAL_DMA_Abort_IT+0x284>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d01d      	beq.n	8004c6c <HAL_DMA_Abort_IT+0xc8>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a7d      	ldr	r2, [pc, #500]	; (8004e2c <HAL_DMA_Abort_IT+0x288>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d018      	beq.n	8004c6c <HAL_DMA_Abort_IT+0xc8>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a7c      	ldr	r2, [pc, #496]	; (8004e30 <HAL_DMA_Abort_IT+0x28c>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d013      	beq.n	8004c6c <HAL_DMA_Abort_IT+0xc8>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a7a      	ldr	r2, [pc, #488]	; (8004e34 <HAL_DMA_Abort_IT+0x290>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d00e      	beq.n	8004c6c <HAL_DMA_Abort_IT+0xc8>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a79      	ldr	r2, [pc, #484]	; (8004e38 <HAL_DMA_Abort_IT+0x294>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d009      	beq.n	8004c6c <HAL_DMA_Abort_IT+0xc8>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a77      	ldr	r2, [pc, #476]	; (8004e3c <HAL_DMA_Abort_IT+0x298>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d004      	beq.n	8004c6c <HAL_DMA_Abort_IT+0xc8>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a76      	ldr	r2, [pc, #472]	; (8004e40 <HAL_DMA_Abort_IT+0x29c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d101      	bne.n	8004c70 <HAL_DMA_Abort_IT+0xcc>
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e000      	b.n	8004c72 <HAL_DMA_Abort_IT+0xce>
 8004c70:	2300      	movs	r3, #0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d065      	beq.n	8004d42 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2204      	movs	r2, #4
 8004c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a60      	ldr	r2, [pc, #384]	; (8004e04 <HAL_DMA_Abort_IT+0x260>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d04a      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x17a>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a5e      	ldr	r2, [pc, #376]	; (8004e08 <HAL_DMA_Abort_IT+0x264>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d045      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x17a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a5d      	ldr	r2, [pc, #372]	; (8004e0c <HAL_DMA_Abort_IT+0x268>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d040      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x17a>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a5b      	ldr	r2, [pc, #364]	; (8004e10 <HAL_DMA_Abort_IT+0x26c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d03b      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x17a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a5a      	ldr	r2, [pc, #360]	; (8004e14 <HAL_DMA_Abort_IT+0x270>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d036      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x17a>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a58      	ldr	r2, [pc, #352]	; (8004e18 <HAL_DMA_Abort_IT+0x274>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d031      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x17a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a57      	ldr	r2, [pc, #348]	; (8004e1c <HAL_DMA_Abort_IT+0x278>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d02c      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x17a>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a55      	ldr	r2, [pc, #340]	; (8004e20 <HAL_DMA_Abort_IT+0x27c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d027      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x17a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a54      	ldr	r2, [pc, #336]	; (8004e24 <HAL_DMA_Abort_IT+0x280>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d022      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x17a>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a52      	ldr	r2, [pc, #328]	; (8004e28 <HAL_DMA_Abort_IT+0x284>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d01d      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x17a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a51      	ldr	r2, [pc, #324]	; (8004e2c <HAL_DMA_Abort_IT+0x288>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d018      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x17a>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a4f      	ldr	r2, [pc, #316]	; (8004e30 <HAL_DMA_Abort_IT+0x28c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d013      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x17a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a4e      	ldr	r2, [pc, #312]	; (8004e34 <HAL_DMA_Abort_IT+0x290>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00e      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x17a>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a4c      	ldr	r2, [pc, #304]	; (8004e38 <HAL_DMA_Abort_IT+0x294>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d009      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x17a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a4b      	ldr	r2, [pc, #300]	; (8004e3c <HAL_DMA_Abort_IT+0x298>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d004      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x17a>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a49      	ldr	r2, [pc, #292]	; (8004e40 <HAL_DMA_Abort_IT+0x29c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d108      	bne.n	8004d30 <HAL_DMA_Abort_IT+0x18c>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0201 	bic.w	r2, r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	e147      	b.n	8004fc0 <HAL_DMA_Abort_IT+0x41c>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0201 	bic.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	e13e      	b.n	8004fc0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 020e 	bic.w	r2, r2, #14
 8004d50:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a2b      	ldr	r2, [pc, #172]	; (8004e04 <HAL_DMA_Abort_IT+0x260>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d04a      	beq.n	8004df2 <HAL_DMA_Abort_IT+0x24e>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a29      	ldr	r2, [pc, #164]	; (8004e08 <HAL_DMA_Abort_IT+0x264>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d045      	beq.n	8004df2 <HAL_DMA_Abort_IT+0x24e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a28      	ldr	r2, [pc, #160]	; (8004e0c <HAL_DMA_Abort_IT+0x268>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d040      	beq.n	8004df2 <HAL_DMA_Abort_IT+0x24e>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a26      	ldr	r2, [pc, #152]	; (8004e10 <HAL_DMA_Abort_IT+0x26c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d03b      	beq.n	8004df2 <HAL_DMA_Abort_IT+0x24e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a25      	ldr	r2, [pc, #148]	; (8004e14 <HAL_DMA_Abort_IT+0x270>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d036      	beq.n	8004df2 <HAL_DMA_Abort_IT+0x24e>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a23      	ldr	r2, [pc, #140]	; (8004e18 <HAL_DMA_Abort_IT+0x274>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d031      	beq.n	8004df2 <HAL_DMA_Abort_IT+0x24e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a22      	ldr	r2, [pc, #136]	; (8004e1c <HAL_DMA_Abort_IT+0x278>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d02c      	beq.n	8004df2 <HAL_DMA_Abort_IT+0x24e>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a20      	ldr	r2, [pc, #128]	; (8004e20 <HAL_DMA_Abort_IT+0x27c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d027      	beq.n	8004df2 <HAL_DMA_Abort_IT+0x24e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a1f      	ldr	r2, [pc, #124]	; (8004e24 <HAL_DMA_Abort_IT+0x280>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d022      	beq.n	8004df2 <HAL_DMA_Abort_IT+0x24e>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a1d      	ldr	r2, [pc, #116]	; (8004e28 <HAL_DMA_Abort_IT+0x284>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d01d      	beq.n	8004df2 <HAL_DMA_Abort_IT+0x24e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a1c      	ldr	r2, [pc, #112]	; (8004e2c <HAL_DMA_Abort_IT+0x288>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d018      	beq.n	8004df2 <HAL_DMA_Abort_IT+0x24e>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a1a      	ldr	r2, [pc, #104]	; (8004e30 <HAL_DMA_Abort_IT+0x28c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d013      	beq.n	8004df2 <HAL_DMA_Abort_IT+0x24e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a19      	ldr	r2, [pc, #100]	; (8004e34 <HAL_DMA_Abort_IT+0x290>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d00e      	beq.n	8004df2 <HAL_DMA_Abort_IT+0x24e>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a17      	ldr	r2, [pc, #92]	; (8004e38 <HAL_DMA_Abort_IT+0x294>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d009      	beq.n	8004df2 <HAL_DMA_Abort_IT+0x24e>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a16      	ldr	r2, [pc, #88]	; (8004e3c <HAL_DMA_Abort_IT+0x298>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d004      	beq.n	8004df2 <HAL_DMA_Abort_IT+0x24e>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a14      	ldr	r2, [pc, #80]	; (8004e40 <HAL_DMA_Abort_IT+0x29c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d128      	bne.n	8004e44 <HAL_DMA_Abort_IT+0x2a0>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0201 	bic.w	r2, r2, #1
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	e027      	b.n	8004e54 <HAL_DMA_Abort_IT+0x2b0>
 8004e04:	40020010 	.word	0x40020010
 8004e08:	40020028 	.word	0x40020028
 8004e0c:	40020040 	.word	0x40020040
 8004e10:	40020058 	.word	0x40020058
 8004e14:	40020070 	.word	0x40020070
 8004e18:	40020088 	.word	0x40020088
 8004e1c:	400200a0 	.word	0x400200a0
 8004e20:	400200b8 	.word	0x400200b8
 8004e24:	40020410 	.word	0x40020410
 8004e28:	40020428 	.word	0x40020428
 8004e2c:	40020440 	.word	0x40020440
 8004e30:	40020458 	.word	0x40020458
 8004e34:	40020470 	.word	0x40020470
 8004e38:	40020488 	.word	0x40020488
 8004e3c:	400204a0 	.word	0x400204a0
 8004e40:	400204b8 	.word	0x400204b8
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0201 	bic.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a5c      	ldr	r2, [pc, #368]	; (8004fcc <HAL_DMA_Abort_IT+0x428>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d072      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x3a0>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a5b      	ldr	r2, [pc, #364]	; (8004fd0 <HAL_DMA_Abort_IT+0x42c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d06d      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x3a0>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a59      	ldr	r2, [pc, #356]	; (8004fd4 <HAL_DMA_Abort_IT+0x430>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d068      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x3a0>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a58      	ldr	r2, [pc, #352]	; (8004fd8 <HAL_DMA_Abort_IT+0x434>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d063      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x3a0>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a56      	ldr	r2, [pc, #344]	; (8004fdc <HAL_DMA_Abort_IT+0x438>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d05e      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x3a0>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a55      	ldr	r2, [pc, #340]	; (8004fe0 <HAL_DMA_Abort_IT+0x43c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d059      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x3a0>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a53      	ldr	r2, [pc, #332]	; (8004fe4 <HAL_DMA_Abort_IT+0x440>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d054      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x3a0>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a52      	ldr	r2, [pc, #328]	; (8004fe8 <HAL_DMA_Abort_IT+0x444>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d04f      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x3a0>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a50      	ldr	r2, [pc, #320]	; (8004fec <HAL_DMA_Abort_IT+0x448>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d04a      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x3a0>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a4f      	ldr	r2, [pc, #316]	; (8004ff0 <HAL_DMA_Abort_IT+0x44c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d045      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x3a0>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a4d      	ldr	r2, [pc, #308]	; (8004ff4 <HAL_DMA_Abort_IT+0x450>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d040      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x3a0>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a4c      	ldr	r2, [pc, #304]	; (8004ff8 <HAL_DMA_Abort_IT+0x454>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d03b      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x3a0>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a4a      	ldr	r2, [pc, #296]	; (8004ffc <HAL_DMA_Abort_IT+0x458>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d036      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x3a0>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a49      	ldr	r2, [pc, #292]	; (8005000 <HAL_DMA_Abort_IT+0x45c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d031      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x3a0>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a47      	ldr	r2, [pc, #284]	; (8005004 <HAL_DMA_Abort_IT+0x460>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d02c      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x3a0>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a46      	ldr	r2, [pc, #280]	; (8005008 <HAL_DMA_Abort_IT+0x464>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d027      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x3a0>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a44      	ldr	r2, [pc, #272]	; (800500c <HAL_DMA_Abort_IT+0x468>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d022      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x3a0>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a43      	ldr	r2, [pc, #268]	; (8005010 <HAL_DMA_Abort_IT+0x46c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d01d      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x3a0>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a41      	ldr	r2, [pc, #260]	; (8005014 <HAL_DMA_Abort_IT+0x470>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d018      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x3a0>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a40      	ldr	r2, [pc, #256]	; (8005018 <HAL_DMA_Abort_IT+0x474>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d013      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x3a0>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a3e      	ldr	r2, [pc, #248]	; (800501c <HAL_DMA_Abort_IT+0x478>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00e      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x3a0>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a3d      	ldr	r2, [pc, #244]	; (8005020 <HAL_DMA_Abort_IT+0x47c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d009      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x3a0>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a3b      	ldr	r2, [pc, #236]	; (8005024 <HAL_DMA_Abort_IT+0x480>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d004      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x3a0>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a3a      	ldr	r2, [pc, #232]	; (8005028 <HAL_DMA_Abort_IT+0x484>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d101      	bne.n	8004f48 <HAL_DMA_Abort_IT+0x3a4>
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <HAL_DMA_Abort_IT+0x3a6>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d028      	beq.n	8004fa0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f5c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f62:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f68:	f003 031f 	and.w	r3, r3, #31
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	409a      	lsls	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f7c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00c      	beq.n	8004fa0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f94:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f9e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	40020010 	.word	0x40020010
 8004fd0:	40020028 	.word	0x40020028
 8004fd4:	40020040 	.word	0x40020040
 8004fd8:	40020058 	.word	0x40020058
 8004fdc:	40020070 	.word	0x40020070
 8004fe0:	40020088 	.word	0x40020088
 8004fe4:	400200a0 	.word	0x400200a0
 8004fe8:	400200b8 	.word	0x400200b8
 8004fec:	40020410 	.word	0x40020410
 8004ff0:	40020428 	.word	0x40020428
 8004ff4:	40020440 	.word	0x40020440
 8004ff8:	40020458 	.word	0x40020458
 8004ffc:	40020470 	.word	0x40020470
 8005000:	40020488 	.word	0x40020488
 8005004:	400204a0 	.word	0x400204a0
 8005008:	400204b8 	.word	0x400204b8
 800500c:	58025408 	.word	0x58025408
 8005010:	5802541c 	.word	0x5802541c
 8005014:	58025430 	.word	0x58025430
 8005018:	58025444 	.word	0x58025444
 800501c:	58025458 	.word	0x58025458
 8005020:	5802546c 	.word	0x5802546c
 8005024:	58025480 	.word	0x58025480
 8005028:	58025494 	.word	0x58025494

0800502c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b08a      	sub	sp, #40	; 0x28
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005038:	4b67      	ldr	r3, [pc, #412]	; (80051d8 <HAL_DMA_IRQHandler+0x1ac>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a67      	ldr	r2, [pc, #412]	; (80051dc <HAL_DMA_IRQHandler+0x1b0>)
 800503e:	fba2 2303 	umull	r2, r3, r2, r3
 8005042:	0a9b      	lsrs	r3, r3, #10
 8005044:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005050:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a5f      	ldr	r2, [pc, #380]	; (80051e0 <HAL_DMA_IRQHandler+0x1b4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d04a      	beq.n	80050fe <HAL_DMA_IRQHandler+0xd2>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a5d      	ldr	r2, [pc, #372]	; (80051e4 <HAL_DMA_IRQHandler+0x1b8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d045      	beq.n	80050fe <HAL_DMA_IRQHandler+0xd2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a5c      	ldr	r2, [pc, #368]	; (80051e8 <HAL_DMA_IRQHandler+0x1bc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d040      	beq.n	80050fe <HAL_DMA_IRQHandler+0xd2>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a5a      	ldr	r2, [pc, #360]	; (80051ec <HAL_DMA_IRQHandler+0x1c0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d03b      	beq.n	80050fe <HAL_DMA_IRQHandler+0xd2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a59      	ldr	r2, [pc, #356]	; (80051f0 <HAL_DMA_IRQHandler+0x1c4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d036      	beq.n	80050fe <HAL_DMA_IRQHandler+0xd2>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a57      	ldr	r2, [pc, #348]	; (80051f4 <HAL_DMA_IRQHandler+0x1c8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d031      	beq.n	80050fe <HAL_DMA_IRQHandler+0xd2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a56      	ldr	r2, [pc, #344]	; (80051f8 <HAL_DMA_IRQHandler+0x1cc>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d02c      	beq.n	80050fe <HAL_DMA_IRQHandler+0xd2>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a54      	ldr	r2, [pc, #336]	; (80051fc <HAL_DMA_IRQHandler+0x1d0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d027      	beq.n	80050fe <HAL_DMA_IRQHandler+0xd2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a53      	ldr	r2, [pc, #332]	; (8005200 <HAL_DMA_IRQHandler+0x1d4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d022      	beq.n	80050fe <HAL_DMA_IRQHandler+0xd2>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a51      	ldr	r2, [pc, #324]	; (8005204 <HAL_DMA_IRQHandler+0x1d8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d01d      	beq.n	80050fe <HAL_DMA_IRQHandler+0xd2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a50      	ldr	r2, [pc, #320]	; (8005208 <HAL_DMA_IRQHandler+0x1dc>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d018      	beq.n	80050fe <HAL_DMA_IRQHandler+0xd2>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a4e      	ldr	r2, [pc, #312]	; (800520c <HAL_DMA_IRQHandler+0x1e0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d013      	beq.n	80050fe <HAL_DMA_IRQHandler+0xd2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a4d      	ldr	r2, [pc, #308]	; (8005210 <HAL_DMA_IRQHandler+0x1e4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00e      	beq.n	80050fe <HAL_DMA_IRQHandler+0xd2>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a4b      	ldr	r2, [pc, #300]	; (8005214 <HAL_DMA_IRQHandler+0x1e8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d009      	beq.n	80050fe <HAL_DMA_IRQHandler+0xd2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a4a      	ldr	r2, [pc, #296]	; (8005218 <HAL_DMA_IRQHandler+0x1ec>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d004      	beq.n	80050fe <HAL_DMA_IRQHandler+0xd2>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a48      	ldr	r2, [pc, #288]	; (800521c <HAL_DMA_IRQHandler+0x1f0>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d101      	bne.n	8005102 <HAL_DMA_IRQHandler+0xd6>
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <HAL_DMA_IRQHandler+0xd8>
 8005102:	2300      	movs	r3, #0
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 842b 	beq.w	8005960 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800510e:	f003 031f 	and.w	r3, r3, #31
 8005112:	2208      	movs	r2, #8
 8005114:	409a      	lsls	r2, r3
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	4013      	ands	r3, r2
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 80a2 	beq.w	8005264 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a2e      	ldr	r2, [pc, #184]	; (80051e0 <HAL_DMA_IRQHandler+0x1b4>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d04a      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x194>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a2d      	ldr	r2, [pc, #180]	; (80051e4 <HAL_DMA_IRQHandler+0x1b8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d045      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x194>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a2b      	ldr	r2, [pc, #172]	; (80051e8 <HAL_DMA_IRQHandler+0x1bc>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d040      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x194>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a2a      	ldr	r2, [pc, #168]	; (80051ec <HAL_DMA_IRQHandler+0x1c0>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d03b      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x194>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a28      	ldr	r2, [pc, #160]	; (80051f0 <HAL_DMA_IRQHandler+0x1c4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d036      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x194>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a27      	ldr	r2, [pc, #156]	; (80051f4 <HAL_DMA_IRQHandler+0x1c8>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d031      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x194>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a25      	ldr	r2, [pc, #148]	; (80051f8 <HAL_DMA_IRQHandler+0x1cc>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d02c      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x194>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a24      	ldr	r2, [pc, #144]	; (80051fc <HAL_DMA_IRQHandler+0x1d0>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d027      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x194>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a22      	ldr	r2, [pc, #136]	; (8005200 <HAL_DMA_IRQHandler+0x1d4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d022      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x194>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a21      	ldr	r2, [pc, #132]	; (8005204 <HAL_DMA_IRQHandler+0x1d8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d01d      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x194>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a1f      	ldr	r2, [pc, #124]	; (8005208 <HAL_DMA_IRQHandler+0x1dc>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d018      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x194>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a1e      	ldr	r2, [pc, #120]	; (800520c <HAL_DMA_IRQHandler+0x1e0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d013      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x194>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1c      	ldr	r2, [pc, #112]	; (8005210 <HAL_DMA_IRQHandler+0x1e4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00e      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x194>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1b      	ldr	r2, [pc, #108]	; (8005214 <HAL_DMA_IRQHandler+0x1e8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d009      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x194>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a19      	ldr	r2, [pc, #100]	; (8005218 <HAL_DMA_IRQHandler+0x1ec>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d004      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x194>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a18      	ldr	r2, [pc, #96]	; (800521c <HAL_DMA_IRQHandler+0x1f0>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d12f      	bne.n	8005220 <HAL_DMA_IRQHandler+0x1f4>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	bf14      	ite	ne
 80051ce:	2301      	movne	r3, #1
 80051d0:	2300      	moveq	r3, #0
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	e02e      	b.n	8005234 <HAL_DMA_IRQHandler+0x208>
 80051d6:	bf00      	nop
 80051d8:	20000000 	.word	0x20000000
 80051dc:	1b4e81b5 	.word	0x1b4e81b5
 80051e0:	40020010 	.word	0x40020010
 80051e4:	40020028 	.word	0x40020028
 80051e8:	40020040 	.word	0x40020040
 80051ec:	40020058 	.word	0x40020058
 80051f0:	40020070 	.word	0x40020070
 80051f4:	40020088 	.word	0x40020088
 80051f8:	400200a0 	.word	0x400200a0
 80051fc:	400200b8 	.word	0x400200b8
 8005200:	40020410 	.word	0x40020410
 8005204:	40020428 	.word	0x40020428
 8005208:	40020440 	.word	0x40020440
 800520c:	40020458 	.word	0x40020458
 8005210:	40020470 	.word	0x40020470
 8005214:	40020488 	.word	0x40020488
 8005218:	400204a0 	.word	0x400204a0
 800521c:	400204b8 	.word	0x400204b8
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b00      	cmp	r3, #0
 800522c:	bf14      	ite	ne
 800522e:	2301      	movne	r3, #1
 8005230:	2300      	moveq	r3, #0
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d015      	beq.n	8005264 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0204 	bic.w	r2, r2, #4
 8005246:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524c:	f003 031f 	and.w	r3, r3, #31
 8005250:	2208      	movs	r2, #8
 8005252:	409a      	lsls	r2, r3
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525c:	f043 0201 	orr.w	r2, r3, #1
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005268:	f003 031f 	and.w	r3, r3, #31
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	fa22 f303 	lsr.w	r3, r2, r3
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d06e      	beq.n	8005358 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a69      	ldr	r2, [pc, #420]	; (8005424 <HAL_DMA_IRQHandler+0x3f8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d04a      	beq.n	800531a <HAL_DMA_IRQHandler+0x2ee>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a67      	ldr	r2, [pc, #412]	; (8005428 <HAL_DMA_IRQHandler+0x3fc>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d045      	beq.n	800531a <HAL_DMA_IRQHandler+0x2ee>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a66      	ldr	r2, [pc, #408]	; (800542c <HAL_DMA_IRQHandler+0x400>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d040      	beq.n	800531a <HAL_DMA_IRQHandler+0x2ee>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a64      	ldr	r2, [pc, #400]	; (8005430 <HAL_DMA_IRQHandler+0x404>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d03b      	beq.n	800531a <HAL_DMA_IRQHandler+0x2ee>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a63      	ldr	r2, [pc, #396]	; (8005434 <HAL_DMA_IRQHandler+0x408>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d036      	beq.n	800531a <HAL_DMA_IRQHandler+0x2ee>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a61      	ldr	r2, [pc, #388]	; (8005438 <HAL_DMA_IRQHandler+0x40c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d031      	beq.n	800531a <HAL_DMA_IRQHandler+0x2ee>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a60      	ldr	r2, [pc, #384]	; (800543c <HAL_DMA_IRQHandler+0x410>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d02c      	beq.n	800531a <HAL_DMA_IRQHandler+0x2ee>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a5e      	ldr	r2, [pc, #376]	; (8005440 <HAL_DMA_IRQHandler+0x414>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d027      	beq.n	800531a <HAL_DMA_IRQHandler+0x2ee>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a5d      	ldr	r2, [pc, #372]	; (8005444 <HAL_DMA_IRQHandler+0x418>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d022      	beq.n	800531a <HAL_DMA_IRQHandler+0x2ee>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a5b      	ldr	r2, [pc, #364]	; (8005448 <HAL_DMA_IRQHandler+0x41c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d01d      	beq.n	800531a <HAL_DMA_IRQHandler+0x2ee>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a5a      	ldr	r2, [pc, #360]	; (800544c <HAL_DMA_IRQHandler+0x420>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d018      	beq.n	800531a <HAL_DMA_IRQHandler+0x2ee>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a58      	ldr	r2, [pc, #352]	; (8005450 <HAL_DMA_IRQHandler+0x424>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d013      	beq.n	800531a <HAL_DMA_IRQHandler+0x2ee>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a57      	ldr	r2, [pc, #348]	; (8005454 <HAL_DMA_IRQHandler+0x428>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d00e      	beq.n	800531a <HAL_DMA_IRQHandler+0x2ee>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a55      	ldr	r2, [pc, #340]	; (8005458 <HAL_DMA_IRQHandler+0x42c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d009      	beq.n	800531a <HAL_DMA_IRQHandler+0x2ee>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a54      	ldr	r2, [pc, #336]	; (800545c <HAL_DMA_IRQHandler+0x430>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d004      	beq.n	800531a <HAL_DMA_IRQHandler+0x2ee>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a52      	ldr	r2, [pc, #328]	; (8005460 <HAL_DMA_IRQHandler+0x434>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d10a      	bne.n	8005330 <HAL_DMA_IRQHandler+0x304>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005324:	2b00      	cmp	r3, #0
 8005326:	bf14      	ite	ne
 8005328:	2301      	movne	r3, #1
 800532a:	2300      	moveq	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	e003      	b.n	8005338 <HAL_DMA_IRQHandler+0x30c>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2300      	movs	r3, #0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00d      	beq.n	8005358 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005340:	f003 031f 	and.w	r3, r3, #31
 8005344:	2201      	movs	r2, #1
 8005346:	409a      	lsls	r2, r3
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005350:	f043 0202 	orr.w	r2, r3, #2
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800535c:	f003 031f 	and.w	r3, r3, #31
 8005360:	2204      	movs	r2, #4
 8005362:	409a      	lsls	r2, r3
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	4013      	ands	r3, r2
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 808f 	beq.w	800548c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a2c      	ldr	r2, [pc, #176]	; (8005424 <HAL_DMA_IRQHandler+0x3f8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d04a      	beq.n	800540e <HAL_DMA_IRQHandler+0x3e2>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a2a      	ldr	r2, [pc, #168]	; (8005428 <HAL_DMA_IRQHandler+0x3fc>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d045      	beq.n	800540e <HAL_DMA_IRQHandler+0x3e2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a29      	ldr	r2, [pc, #164]	; (800542c <HAL_DMA_IRQHandler+0x400>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d040      	beq.n	800540e <HAL_DMA_IRQHandler+0x3e2>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a27      	ldr	r2, [pc, #156]	; (8005430 <HAL_DMA_IRQHandler+0x404>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d03b      	beq.n	800540e <HAL_DMA_IRQHandler+0x3e2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a26      	ldr	r2, [pc, #152]	; (8005434 <HAL_DMA_IRQHandler+0x408>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d036      	beq.n	800540e <HAL_DMA_IRQHandler+0x3e2>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a24      	ldr	r2, [pc, #144]	; (8005438 <HAL_DMA_IRQHandler+0x40c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d031      	beq.n	800540e <HAL_DMA_IRQHandler+0x3e2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a23      	ldr	r2, [pc, #140]	; (800543c <HAL_DMA_IRQHandler+0x410>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d02c      	beq.n	800540e <HAL_DMA_IRQHandler+0x3e2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a21      	ldr	r2, [pc, #132]	; (8005440 <HAL_DMA_IRQHandler+0x414>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d027      	beq.n	800540e <HAL_DMA_IRQHandler+0x3e2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a20      	ldr	r2, [pc, #128]	; (8005444 <HAL_DMA_IRQHandler+0x418>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d022      	beq.n	800540e <HAL_DMA_IRQHandler+0x3e2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1e      	ldr	r2, [pc, #120]	; (8005448 <HAL_DMA_IRQHandler+0x41c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d01d      	beq.n	800540e <HAL_DMA_IRQHandler+0x3e2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a1d      	ldr	r2, [pc, #116]	; (800544c <HAL_DMA_IRQHandler+0x420>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d018      	beq.n	800540e <HAL_DMA_IRQHandler+0x3e2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a1b      	ldr	r2, [pc, #108]	; (8005450 <HAL_DMA_IRQHandler+0x424>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d013      	beq.n	800540e <HAL_DMA_IRQHandler+0x3e2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a1a      	ldr	r2, [pc, #104]	; (8005454 <HAL_DMA_IRQHandler+0x428>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00e      	beq.n	800540e <HAL_DMA_IRQHandler+0x3e2>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a18      	ldr	r2, [pc, #96]	; (8005458 <HAL_DMA_IRQHandler+0x42c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d009      	beq.n	800540e <HAL_DMA_IRQHandler+0x3e2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a17      	ldr	r2, [pc, #92]	; (800545c <HAL_DMA_IRQHandler+0x430>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d004      	beq.n	800540e <HAL_DMA_IRQHandler+0x3e2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a15      	ldr	r2, [pc, #84]	; (8005460 <HAL_DMA_IRQHandler+0x434>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d12a      	bne.n	8005464 <HAL_DMA_IRQHandler+0x438>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	bf14      	ite	ne
 800541c:	2301      	movne	r3, #1
 800541e:	2300      	moveq	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	e023      	b.n	800546c <HAL_DMA_IRQHandler+0x440>
 8005424:	40020010 	.word	0x40020010
 8005428:	40020028 	.word	0x40020028
 800542c:	40020040 	.word	0x40020040
 8005430:	40020058 	.word	0x40020058
 8005434:	40020070 	.word	0x40020070
 8005438:	40020088 	.word	0x40020088
 800543c:	400200a0 	.word	0x400200a0
 8005440:	400200b8 	.word	0x400200b8
 8005444:	40020410 	.word	0x40020410
 8005448:	40020428 	.word	0x40020428
 800544c:	40020440 	.word	0x40020440
 8005450:	40020458 	.word	0x40020458
 8005454:	40020470 	.word	0x40020470
 8005458:	40020488 	.word	0x40020488
 800545c:	400204a0 	.word	0x400204a0
 8005460:	400204b8 	.word	0x400204b8
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2300      	movs	r3, #0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00d      	beq.n	800548c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005474:	f003 031f 	and.w	r3, r3, #31
 8005478:	2204      	movs	r2, #4
 800547a:	409a      	lsls	r2, r3
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005484:	f043 0204 	orr.w	r2, r3, #4
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005490:	f003 031f 	and.w	r3, r3, #31
 8005494:	2210      	movs	r2, #16
 8005496:	409a      	lsls	r2, r3
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	4013      	ands	r3, r2
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 80a6 	beq.w	80055ee <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a85      	ldr	r2, [pc, #532]	; (80056bc <HAL_DMA_IRQHandler+0x690>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d04a      	beq.n	8005542 <HAL_DMA_IRQHandler+0x516>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a83      	ldr	r2, [pc, #524]	; (80056c0 <HAL_DMA_IRQHandler+0x694>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d045      	beq.n	8005542 <HAL_DMA_IRQHandler+0x516>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a82      	ldr	r2, [pc, #520]	; (80056c4 <HAL_DMA_IRQHandler+0x698>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d040      	beq.n	8005542 <HAL_DMA_IRQHandler+0x516>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a80      	ldr	r2, [pc, #512]	; (80056c8 <HAL_DMA_IRQHandler+0x69c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d03b      	beq.n	8005542 <HAL_DMA_IRQHandler+0x516>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a7f      	ldr	r2, [pc, #508]	; (80056cc <HAL_DMA_IRQHandler+0x6a0>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d036      	beq.n	8005542 <HAL_DMA_IRQHandler+0x516>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a7d      	ldr	r2, [pc, #500]	; (80056d0 <HAL_DMA_IRQHandler+0x6a4>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d031      	beq.n	8005542 <HAL_DMA_IRQHandler+0x516>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a7c      	ldr	r2, [pc, #496]	; (80056d4 <HAL_DMA_IRQHandler+0x6a8>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d02c      	beq.n	8005542 <HAL_DMA_IRQHandler+0x516>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a7a      	ldr	r2, [pc, #488]	; (80056d8 <HAL_DMA_IRQHandler+0x6ac>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d027      	beq.n	8005542 <HAL_DMA_IRQHandler+0x516>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a79      	ldr	r2, [pc, #484]	; (80056dc <HAL_DMA_IRQHandler+0x6b0>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d022      	beq.n	8005542 <HAL_DMA_IRQHandler+0x516>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a77      	ldr	r2, [pc, #476]	; (80056e0 <HAL_DMA_IRQHandler+0x6b4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d01d      	beq.n	8005542 <HAL_DMA_IRQHandler+0x516>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a76      	ldr	r2, [pc, #472]	; (80056e4 <HAL_DMA_IRQHandler+0x6b8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d018      	beq.n	8005542 <HAL_DMA_IRQHandler+0x516>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a74      	ldr	r2, [pc, #464]	; (80056e8 <HAL_DMA_IRQHandler+0x6bc>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d013      	beq.n	8005542 <HAL_DMA_IRQHandler+0x516>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a73      	ldr	r2, [pc, #460]	; (80056ec <HAL_DMA_IRQHandler+0x6c0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d00e      	beq.n	8005542 <HAL_DMA_IRQHandler+0x516>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a71      	ldr	r2, [pc, #452]	; (80056f0 <HAL_DMA_IRQHandler+0x6c4>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d009      	beq.n	8005542 <HAL_DMA_IRQHandler+0x516>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a70      	ldr	r2, [pc, #448]	; (80056f4 <HAL_DMA_IRQHandler+0x6c8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d004      	beq.n	8005542 <HAL_DMA_IRQHandler+0x516>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a6e      	ldr	r2, [pc, #440]	; (80056f8 <HAL_DMA_IRQHandler+0x6cc>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d10a      	bne.n	8005558 <HAL_DMA_IRQHandler+0x52c>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0308 	and.w	r3, r3, #8
 800554c:	2b00      	cmp	r3, #0
 800554e:	bf14      	ite	ne
 8005550:	2301      	movne	r3, #1
 8005552:	2300      	moveq	r3, #0
 8005554:	b2db      	uxtb	r3, r3
 8005556:	e009      	b.n	800556c <HAL_DMA_IRQHandler+0x540>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	bf14      	ite	ne
 8005566:	2301      	movne	r3, #1
 8005568:	2300      	moveq	r3, #0
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d03e      	beq.n	80055ee <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005574:	f003 031f 	and.w	r3, r3, #31
 8005578:	2210      	movs	r2, #16
 800557a:	409a      	lsls	r2, r3
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d018      	beq.n	80055c0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d108      	bne.n	80055ae <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d024      	beq.n	80055ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	4798      	blx	r3
 80055ac:	e01f      	b.n	80055ee <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d01b      	beq.n	80055ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	4798      	blx	r3
 80055be:	e016      	b.n	80055ee <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d107      	bne.n	80055de <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0208 	bic.w	r2, r2, #8
 80055dc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f2:	f003 031f 	and.w	r3, r3, #31
 80055f6:	2220      	movs	r2, #32
 80055f8:	409a      	lsls	r2, r3
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	4013      	ands	r3, r2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 8110 	beq.w	8005824 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a2c      	ldr	r2, [pc, #176]	; (80056bc <HAL_DMA_IRQHandler+0x690>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d04a      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x678>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a2b      	ldr	r2, [pc, #172]	; (80056c0 <HAL_DMA_IRQHandler+0x694>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d045      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x678>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a29      	ldr	r2, [pc, #164]	; (80056c4 <HAL_DMA_IRQHandler+0x698>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d040      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x678>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a28      	ldr	r2, [pc, #160]	; (80056c8 <HAL_DMA_IRQHandler+0x69c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d03b      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x678>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a26      	ldr	r2, [pc, #152]	; (80056cc <HAL_DMA_IRQHandler+0x6a0>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d036      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x678>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a25      	ldr	r2, [pc, #148]	; (80056d0 <HAL_DMA_IRQHandler+0x6a4>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d031      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x678>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a23      	ldr	r2, [pc, #140]	; (80056d4 <HAL_DMA_IRQHandler+0x6a8>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d02c      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x678>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a22      	ldr	r2, [pc, #136]	; (80056d8 <HAL_DMA_IRQHandler+0x6ac>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d027      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x678>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a20      	ldr	r2, [pc, #128]	; (80056dc <HAL_DMA_IRQHandler+0x6b0>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d022      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x678>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a1f      	ldr	r2, [pc, #124]	; (80056e0 <HAL_DMA_IRQHandler+0x6b4>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d01d      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x678>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a1d      	ldr	r2, [pc, #116]	; (80056e4 <HAL_DMA_IRQHandler+0x6b8>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d018      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x678>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a1c      	ldr	r2, [pc, #112]	; (80056e8 <HAL_DMA_IRQHandler+0x6bc>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d013      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x678>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a1a      	ldr	r2, [pc, #104]	; (80056ec <HAL_DMA_IRQHandler+0x6c0>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d00e      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x678>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a19      	ldr	r2, [pc, #100]	; (80056f0 <HAL_DMA_IRQHandler+0x6c4>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d009      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x678>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a17      	ldr	r2, [pc, #92]	; (80056f4 <HAL_DMA_IRQHandler+0x6c8>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d004      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x678>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a16      	ldr	r2, [pc, #88]	; (80056f8 <HAL_DMA_IRQHandler+0x6cc>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d12b      	bne.n	80056fc <HAL_DMA_IRQHandler+0x6d0>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0310 	and.w	r3, r3, #16
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	bf14      	ite	ne
 80056b2:	2301      	movne	r3, #1
 80056b4:	2300      	moveq	r3, #0
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	e02a      	b.n	8005710 <HAL_DMA_IRQHandler+0x6e4>
 80056ba:	bf00      	nop
 80056bc:	40020010 	.word	0x40020010
 80056c0:	40020028 	.word	0x40020028
 80056c4:	40020040 	.word	0x40020040
 80056c8:	40020058 	.word	0x40020058
 80056cc:	40020070 	.word	0x40020070
 80056d0:	40020088 	.word	0x40020088
 80056d4:	400200a0 	.word	0x400200a0
 80056d8:	400200b8 	.word	0x400200b8
 80056dc:	40020410 	.word	0x40020410
 80056e0:	40020428 	.word	0x40020428
 80056e4:	40020440 	.word	0x40020440
 80056e8:	40020458 	.word	0x40020458
 80056ec:	40020470 	.word	0x40020470
 80056f0:	40020488 	.word	0x40020488
 80056f4:	400204a0 	.word	0x400204a0
 80056f8:	400204b8 	.word	0x400204b8
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	bf14      	ite	ne
 800570a:	2301      	movne	r3, #1
 800570c:	2300      	moveq	r3, #0
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 8087 	beq.w	8005824 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800571a:	f003 031f 	and.w	r3, r3, #31
 800571e:	2220      	movs	r2, #32
 8005720:	409a      	lsls	r2, r3
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b04      	cmp	r3, #4
 8005730:	d139      	bne.n	80057a6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0216 	bic.w	r2, r2, #22
 8005740:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	695a      	ldr	r2, [r3, #20]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005750:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	2b00      	cmp	r3, #0
 8005758:	d103      	bne.n	8005762 <HAL_DMA_IRQHandler+0x736>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800575e:	2b00      	cmp	r3, #0
 8005760:	d007      	beq.n	8005772 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0208 	bic.w	r2, r2, #8
 8005770:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005776:	f003 031f 	and.w	r3, r3, #31
 800577a:	223f      	movs	r2, #63	; 0x3f
 800577c:	409a      	lsls	r2, r3
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 834a 	beq.w	8005e30 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	4798      	blx	r3
          }
          return;
 80057a4:	e344      	b.n	8005e30 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d018      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d108      	bne.n	80057d4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d02c      	beq.n	8005824 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	4798      	blx	r3
 80057d2:	e027      	b.n	8005824 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d023      	beq.n	8005824 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	4798      	blx	r3
 80057e4:	e01e      	b.n	8005824 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10f      	bne.n	8005814 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0210 	bic.w	r2, r2, #16
 8005802:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 8306 	beq.w	8005e3a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 8088 	beq.w	800594c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2204      	movs	r2, #4
 8005840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a7a      	ldr	r2, [pc, #488]	; (8005a34 <HAL_DMA_IRQHandler+0xa08>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d04a      	beq.n	80058e4 <HAL_DMA_IRQHandler+0x8b8>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a79      	ldr	r2, [pc, #484]	; (8005a38 <HAL_DMA_IRQHandler+0xa0c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d045      	beq.n	80058e4 <HAL_DMA_IRQHandler+0x8b8>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a77      	ldr	r2, [pc, #476]	; (8005a3c <HAL_DMA_IRQHandler+0xa10>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d040      	beq.n	80058e4 <HAL_DMA_IRQHandler+0x8b8>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a76      	ldr	r2, [pc, #472]	; (8005a40 <HAL_DMA_IRQHandler+0xa14>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d03b      	beq.n	80058e4 <HAL_DMA_IRQHandler+0x8b8>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a74      	ldr	r2, [pc, #464]	; (8005a44 <HAL_DMA_IRQHandler+0xa18>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d036      	beq.n	80058e4 <HAL_DMA_IRQHandler+0x8b8>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a73      	ldr	r2, [pc, #460]	; (8005a48 <HAL_DMA_IRQHandler+0xa1c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d031      	beq.n	80058e4 <HAL_DMA_IRQHandler+0x8b8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a71      	ldr	r2, [pc, #452]	; (8005a4c <HAL_DMA_IRQHandler+0xa20>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d02c      	beq.n	80058e4 <HAL_DMA_IRQHandler+0x8b8>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a70      	ldr	r2, [pc, #448]	; (8005a50 <HAL_DMA_IRQHandler+0xa24>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d027      	beq.n	80058e4 <HAL_DMA_IRQHandler+0x8b8>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a6e      	ldr	r2, [pc, #440]	; (8005a54 <HAL_DMA_IRQHandler+0xa28>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d022      	beq.n	80058e4 <HAL_DMA_IRQHandler+0x8b8>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a6d      	ldr	r2, [pc, #436]	; (8005a58 <HAL_DMA_IRQHandler+0xa2c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d01d      	beq.n	80058e4 <HAL_DMA_IRQHandler+0x8b8>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a6b      	ldr	r2, [pc, #428]	; (8005a5c <HAL_DMA_IRQHandler+0xa30>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d018      	beq.n	80058e4 <HAL_DMA_IRQHandler+0x8b8>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a6a      	ldr	r2, [pc, #424]	; (8005a60 <HAL_DMA_IRQHandler+0xa34>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d013      	beq.n	80058e4 <HAL_DMA_IRQHandler+0x8b8>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a68      	ldr	r2, [pc, #416]	; (8005a64 <HAL_DMA_IRQHandler+0xa38>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d00e      	beq.n	80058e4 <HAL_DMA_IRQHandler+0x8b8>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a67      	ldr	r2, [pc, #412]	; (8005a68 <HAL_DMA_IRQHandler+0xa3c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d009      	beq.n	80058e4 <HAL_DMA_IRQHandler+0x8b8>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a65      	ldr	r2, [pc, #404]	; (8005a6c <HAL_DMA_IRQHandler+0xa40>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d004      	beq.n	80058e4 <HAL_DMA_IRQHandler+0x8b8>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a64      	ldr	r2, [pc, #400]	; (8005a70 <HAL_DMA_IRQHandler+0xa44>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d108      	bne.n	80058f6 <HAL_DMA_IRQHandler+0x8ca>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0201 	bic.w	r2, r2, #1
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	e007      	b.n	8005906 <HAL_DMA_IRQHandler+0x8da>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0201 	bic.w	r2, r2, #1
 8005904:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3301      	adds	r3, #1
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800590e:	429a      	cmp	r2, r3
 8005910:	d307      	bcc.n	8005922 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1f2      	bne.n	8005906 <HAL_DMA_IRQHandler+0x8da>
 8005920:	e000      	b.n	8005924 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005922:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d004      	beq.n	8005944 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2203      	movs	r2, #3
 800593e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005942:	e003      	b.n	800594c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 8272 	beq.w	8005e3a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	4798      	blx	r3
 800595e:	e26c      	b.n	8005e3a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a43      	ldr	r2, [pc, #268]	; (8005a74 <HAL_DMA_IRQHandler+0xa48>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d022      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x984>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a42      	ldr	r2, [pc, #264]	; (8005a78 <HAL_DMA_IRQHandler+0xa4c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d01d      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x984>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a40      	ldr	r2, [pc, #256]	; (8005a7c <HAL_DMA_IRQHandler+0xa50>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d018      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x984>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a3f      	ldr	r2, [pc, #252]	; (8005a80 <HAL_DMA_IRQHandler+0xa54>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d013      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x984>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a3d      	ldr	r2, [pc, #244]	; (8005a84 <HAL_DMA_IRQHandler+0xa58>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00e      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x984>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a3c      	ldr	r2, [pc, #240]	; (8005a88 <HAL_DMA_IRQHandler+0xa5c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d009      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x984>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a3a      	ldr	r2, [pc, #232]	; (8005a8c <HAL_DMA_IRQHandler+0xa60>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d004      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x984>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a39      	ldr	r2, [pc, #228]	; (8005a90 <HAL_DMA_IRQHandler+0xa64>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d101      	bne.n	80059b4 <HAL_DMA_IRQHandler+0x988>
 80059b0:	2301      	movs	r3, #1
 80059b2:	e000      	b.n	80059b6 <HAL_DMA_IRQHandler+0x98a>
 80059b4:	2300      	movs	r3, #0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 823f 	beq.w	8005e3a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c8:	f003 031f 	and.w	r3, r3, #31
 80059cc:	2204      	movs	r2, #4
 80059ce:	409a      	lsls	r2, r3
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	4013      	ands	r3, r2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 80cd 	beq.w	8005b74 <HAL_DMA_IRQHandler+0xb48>
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 80c7 	beq.w	8005b74 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ea:	f003 031f 	and.w	r3, r3, #31
 80059ee:	2204      	movs	r2, #4
 80059f0:	409a      	lsls	r2, r3
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d049      	beq.n	8005a94 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d109      	bne.n	8005a1e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 8210 	beq.w	8005e34 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a1c:	e20a      	b.n	8005e34 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 8206 	beq.w	8005e34 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a30:	e200      	b.n	8005e34 <HAL_DMA_IRQHandler+0xe08>
 8005a32:	bf00      	nop
 8005a34:	40020010 	.word	0x40020010
 8005a38:	40020028 	.word	0x40020028
 8005a3c:	40020040 	.word	0x40020040
 8005a40:	40020058 	.word	0x40020058
 8005a44:	40020070 	.word	0x40020070
 8005a48:	40020088 	.word	0x40020088
 8005a4c:	400200a0 	.word	0x400200a0
 8005a50:	400200b8 	.word	0x400200b8
 8005a54:	40020410 	.word	0x40020410
 8005a58:	40020428 	.word	0x40020428
 8005a5c:	40020440 	.word	0x40020440
 8005a60:	40020458 	.word	0x40020458
 8005a64:	40020470 	.word	0x40020470
 8005a68:	40020488 	.word	0x40020488
 8005a6c:	400204a0 	.word	0x400204a0
 8005a70:	400204b8 	.word	0x400204b8
 8005a74:	58025408 	.word	0x58025408
 8005a78:	5802541c 	.word	0x5802541c
 8005a7c:	58025430 	.word	0x58025430
 8005a80:	58025444 	.word	0x58025444
 8005a84:	58025458 	.word	0x58025458
 8005a88:	5802546c 	.word	0x5802546c
 8005a8c:	58025480 	.word	0x58025480
 8005a90:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d160      	bne.n	8005b60 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a8c      	ldr	r2, [pc, #560]	; (8005cd4 <HAL_DMA_IRQHandler+0xca8>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d04a      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xb12>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a8a      	ldr	r2, [pc, #552]	; (8005cd8 <HAL_DMA_IRQHandler+0xcac>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d045      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xb12>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a89      	ldr	r2, [pc, #548]	; (8005cdc <HAL_DMA_IRQHandler+0xcb0>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d040      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xb12>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a87      	ldr	r2, [pc, #540]	; (8005ce0 <HAL_DMA_IRQHandler+0xcb4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d03b      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xb12>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a86      	ldr	r2, [pc, #536]	; (8005ce4 <HAL_DMA_IRQHandler+0xcb8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d036      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xb12>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a84      	ldr	r2, [pc, #528]	; (8005ce8 <HAL_DMA_IRQHandler+0xcbc>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d031      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xb12>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a83      	ldr	r2, [pc, #524]	; (8005cec <HAL_DMA_IRQHandler+0xcc0>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d02c      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xb12>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a81      	ldr	r2, [pc, #516]	; (8005cf0 <HAL_DMA_IRQHandler+0xcc4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d027      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xb12>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a80      	ldr	r2, [pc, #512]	; (8005cf4 <HAL_DMA_IRQHandler+0xcc8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d022      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xb12>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a7e      	ldr	r2, [pc, #504]	; (8005cf8 <HAL_DMA_IRQHandler+0xccc>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d01d      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xb12>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a7d      	ldr	r2, [pc, #500]	; (8005cfc <HAL_DMA_IRQHandler+0xcd0>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d018      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xb12>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a7b      	ldr	r2, [pc, #492]	; (8005d00 <HAL_DMA_IRQHandler+0xcd4>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d013      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xb12>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a7a      	ldr	r2, [pc, #488]	; (8005d04 <HAL_DMA_IRQHandler+0xcd8>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00e      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xb12>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a78      	ldr	r2, [pc, #480]	; (8005d08 <HAL_DMA_IRQHandler+0xcdc>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d009      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xb12>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a77      	ldr	r2, [pc, #476]	; (8005d0c <HAL_DMA_IRQHandler+0xce0>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d004      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xb12>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a75      	ldr	r2, [pc, #468]	; (8005d10 <HAL_DMA_IRQHandler+0xce4>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d108      	bne.n	8005b50 <HAL_DMA_IRQHandler+0xb24>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0208 	bic.w	r2, r2, #8
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	e007      	b.n	8005b60 <HAL_DMA_IRQHandler+0xb34>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0204 	bic.w	r2, r2, #4
 8005b5e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 8165 	beq.w	8005e34 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b72:	e15f      	b.n	8005e34 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b78:	f003 031f 	and.w	r3, r3, #31
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	409a      	lsls	r2, r3
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	4013      	ands	r3, r2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 80c5 	beq.w	8005d14 <HAL_DMA_IRQHandler+0xce8>
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f003 0302 	and.w	r3, r3, #2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 80bf 	beq.w	8005d14 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b9a:	f003 031f 	and.w	r3, r3, #31
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	409a      	lsls	r2, r3
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d018      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d109      	bne.n	8005bce <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 813a 	beq.w	8005e38 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bcc:	e134      	b.n	8005e38 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 8130 	beq.w	8005e38 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005be0:	e12a      	b.n	8005e38 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d168      	bne.n	8005cbe <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a38      	ldr	r2, [pc, #224]	; (8005cd4 <HAL_DMA_IRQHandler+0xca8>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d04a      	beq.n	8005c8c <HAL_DMA_IRQHandler+0xc60>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a37      	ldr	r2, [pc, #220]	; (8005cd8 <HAL_DMA_IRQHandler+0xcac>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d045      	beq.n	8005c8c <HAL_DMA_IRQHandler+0xc60>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a35      	ldr	r2, [pc, #212]	; (8005cdc <HAL_DMA_IRQHandler+0xcb0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d040      	beq.n	8005c8c <HAL_DMA_IRQHandler+0xc60>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a34      	ldr	r2, [pc, #208]	; (8005ce0 <HAL_DMA_IRQHandler+0xcb4>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d03b      	beq.n	8005c8c <HAL_DMA_IRQHandler+0xc60>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a32      	ldr	r2, [pc, #200]	; (8005ce4 <HAL_DMA_IRQHandler+0xcb8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d036      	beq.n	8005c8c <HAL_DMA_IRQHandler+0xc60>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a31      	ldr	r2, [pc, #196]	; (8005ce8 <HAL_DMA_IRQHandler+0xcbc>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d031      	beq.n	8005c8c <HAL_DMA_IRQHandler+0xc60>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a2f      	ldr	r2, [pc, #188]	; (8005cec <HAL_DMA_IRQHandler+0xcc0>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d02c      	beq.n	8005c8c <HAL_DMA_IRQHandler+0xc60>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a2e      	ldr	r2, [pc, #184]	; (8005cf0 <HAL_DMA_IRQHandler+0xcc4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d027      	beq.n	8005c8c <HAL_DMA_IRQHandler+0xc60>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a2c      	ldr	r2, [pc, #176]	; (8005cf4 <HAL_DMA_IRQHandler+0xcc8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d022      	beq.n	8005c8c <HAL_DMA_IRQHandler+0xc60>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a2b      	ldr	r2, [pc, #172]	; (8005cf8 <HAL_DMA_IRQHandler+0xccc>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d01d      	beq.n	8005c8c <HAL_DMA_IRQHandler+0xc60>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a29      	ldr	r2, [pc, #164]	; (8005cfc <HAL_DMA_IRQHandler+0xcd0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d018      	beq.n	8005c8c <HAL_DMA_IRQHandler+0xc60>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a28      	ldr	r2, [pc, #160]	; (8005d00 <HAL_DMA_IRQHandler+0xcd4>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d013      	beq.n	8005c8c <HAL_DMA_IRQHandler+0xc60>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a26      	ldr	r2, [pc, #152]	; (8005d04 <HAL_DMA_IRQHandler+0xcd8>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d00e      	beq.n	8005c8c <HAL_DMA_IRQHandler+0xc60>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a25      	ldr	r2, [pc, #148]	; (8005d08 <HAL_DMA_IRQHandler+0xcdc>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d009      	beq.n	8005c8c <HAL_DMA_IRQHandler+0xc60>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a23      	ldr	r2, [pc, #140]	; (8005d0c <HAL_DMA_IRQHandler+0xce0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d004      	beq.n	8005c8c <HAL_DMA_IRQHandler+0xc60>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a22      	ldr	r2, [pc, #136]	; (8005d10 <HAL_DMA_IRQHandler+0xce4>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d108      	bne.n	8005c9e <HAL_DMA_IRQHandler+0xc72>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0214 	bic.w	r2, r2, #20
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	e007      	b.n	8005cae <HAL_DMA_IRQHandler+0xc82>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 020a 	bic.w	r2, r2, #10
 8005cac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 80b8 	beq.w	8005e38 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cd0:	e0b2      	b.n	8005e38 <HAL_DMA_IRQHandler+0xe0c>
 8005cd2:	bf00      	nop
 8005cd4:	40020010 	.word	0x40020010
 8005cd8:	40020028 	.word	0x40020028
 8005cdc:	40020040 	.word	0x40020040
 8005ce0:	40020058 	.word	0x40020058
 8005ce4:	40020070 	.word	0x40020070
 8005ce8:	40020088 	.word	0x40020088
 8005cec:	400200a0 	.word	0x400200a0
 8005cf0:	400200b8 	.word	0x400200b8
 8005cf4:	40020410 	.word	0x40020410
 8005cf8:	40020428 	.word	0x40020428
 8005cfc:	40020440 	.word	0x40020440
 8005d00:	40020458 	.word	0x40020458
 8005d04:	40020470 	.word	0x40020470
 8005d08:	40020488 	.word	0x40020488
 8005d0c:	400204a0 	.word	0x400204a0
 8005d10:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d18:	f003 031f 	and.w	r3, r3, #31
 8005d1c:	2208      	movs	r2, #8
 8005d1e:	409a      	lsls	r2, r3
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	4013      	ands	r3, r2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 8088 	beq.w	8005e3a <HAL_DMA_IRQHandler+0xe0e>
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f003 0308 	and.w	r3, r3, #8
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 8082 	beq.w	8005e3a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a41      	ldr	r2, [pc, #260]	; (8005e40 <HAL_DMA_IRQHandler+0xe14>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d04a      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xdaa>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a3f      	ldr	r2, [pc, #252]	; (8005e44 <HAL_DMA_IRQHandler+0xe18>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d045      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xdaa>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a3e      	ldr	r2, [pc, #248]	; (8005e48 <HAL_DMA_IRQHandler+0xe1c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d040      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xdaa>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a3c      	ldr	r2, [pc, #240]	; (8005e4c <HAL_DMA_IRQHandler+0xe20>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d03b      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xdaa>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a3b      	ldr	r2, [pc, #236]	; (8005e50 <HAL_DMA_IRQHandler+0xe24>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d036      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xdaa>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a39      	ldr	r2, [pc, #228]	; (8005e54 <HAL_DMA_IRQHandler+0xe28>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d031      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xdaa>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a38      	ldr	r2, [pc, #224]	; (8005e58 <HAL_DMA_IRQHandler+0xe2c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d02c      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xdaa>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a36      	ldr	r2, [pc, #216]	; (8005e5c <HAL_DMA_IRQHandler+0xe30>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d027      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xdaa>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a35      	ldr	r2, [pc, #212]	; (8005e60 <HAL_DMA_IRQHandler+0xe34>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d022      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xdaa>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a33      	ldr	r2, [pc, #204]	; (8005e64 <HAL_DMA_IRQHandler+0xe38>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d01d      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xdaa>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a32      	ldr	r2, [pc, #200]	; (8005e68 <HAL_DMA_IRQHandler+0xe3c>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d018      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xdaa>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a30      	ldr	r2, [pc, #192]	; (8005e6c <HAL_DMA_IRQHandler+0xe40>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d013      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xdaa>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a2f      	ldr	r2, [pc, #188]	; (8005e70 <HAL_DMA_IRQHandler+0xe44>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d00e      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xdaa>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a2d      	ldr	r2, [pc, #180]	; (8005e74 <HAL_DMA_IRQHandler+0xe48>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d009      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xdaa>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a2c      	ldr	r2, [pc, #176]	; (8005e78 <HAL_DMA_IRQHandler+0xe4c>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d004      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xdaa>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a2a      	ldr	r2, [pc, #168]	; (8005e7c <HAL_DMA_IRQHandler+0xe50>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d108      	bne.n	8005de8 <HAL_DMA_IRQHandler+0xdbc>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 021c 	bic.w	r2, r2, #28
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	e007      	b.n	8005df8 <HAL_DMA_IRQHandler+0xdcc>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 020e 	bic.w	r2, r2, #14
 8005df6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dfc:	f003 031f 	and.w	r3, r3, #31
 8005e00:	2201      	movs	r2, #1
 8005e02:	409a      	lsls	r2, r3
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d009      	beq.n	8005e3a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	4798      	blx	r3
 8005e2e:	e004      	b.n	8005e3a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005e30:	bf00      	nop
 8005e32:	e002      	b.n	8005e3a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e34:	bf00      	nop
 8005e36:	e000      	b.n	8005e3a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e38:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005e3a:	3728      	adds	r7, #40	; 0x28
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	40020010 	.word	0x40020010
 8005e44:	40020028 	.word	0x40020028
 8005e48:	40020040 	.word	0x40020040
 8005e4c:	40020058 	.word	0x40020058
 8005e50:	40020070 	.word	0x40020070
 8005e54:	40020088 	.word	0x40020088
 8005e58:	400200a0 	.word	0x400200a0
 8005e5c:	400200b8 	.word	0x400200b8
 8005e60:	40020410 	.word	0x40020410
 8005e64:	40020428 	.word	0x40020428
 8005e68:	40020440 	.word	0x40020440
 8005e6c:	40020458 	.word	0x40020458
 8005e70:	40020470 	.word	0x40020470
 8005e74:	40020488 	.word	0x40020488
 8005e78:	400204a0 	.word	0x400204a0
 8005e7c:	400204b8 	.word	0x400204b8

08005e80 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eaa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a84      	ldr	r2, [pc, #528]	; (80060c8 <DMA_SetConfig+0x230>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d072      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a82      	ldr	r2, [pc, #520]	; (80060cc <DMA_SetConfig+0x234>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d06d      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a81      	ldr	r2, [pc, #516]	; (80060d0 <DMA_SetConfig+0x238>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d068      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a7f      	ldr	r2, [pc, #508]	; (80060d4 <DMA_SetConfig+0x23c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d063      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a7e      	ldr	r2, [pc, #504]	; (80060d8 <DMA_SetConfig+0x240>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d05e      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a7c      	ldr	r2, [pc, #496]	; (80060dc <DMA_SetConfig+0x244>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d059      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a7b      	ldr	r2, [pc, #492]	; (80060e0 <DMA_SetConfig+0x248>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d054      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a79      	ldr	r2, [pc, #484]	; (80060e4 <DMA_SetConfig+0x24c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d04f      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a78      	ldr	r2, [pc, #480]	; (80060e8 <DMA_SetConfig+0x250>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d04a      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a76      	ldr	r2, [pc, #472]	; (80060ec <DMA_SetConfig+0x254>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d045      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a75      	ldr	r2, [pc, #468]	; (80060f0 <DMA_SetConfig+0x258>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d040      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a73      	ldr	r2, [pc, #460]	; (80060f4 <DMA_SetConfig+0x25c>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d03b      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a72      	ldr	r2, [pc, #456]	; (80060f8 <DMA_SetConfig+0x260>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d036      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a70      	ldr	r2, [pc, #448]	; (80060fc <DMA_SetConfig+0x264>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d031      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a6f      	ldr	r2, [pc, #444]	; (8006100 <DMA_SetConfig+0x268>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d02c      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a6d      	ldr	r2, [pc, #436]	; (8006104 <DMA_SetConfig+0x26c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d027      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a6c      	ldr	r2, [pc, #432]	; (8006108 <DMA_SetConfig+0x270>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d022      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a6a      	ldr	r2, [pc, #424]	; (800610c <DMA_SetConfig+0x274>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d01d      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a69      	ldr	r2, [pc, #420]	; (8006110 <DMA_SetConfig+0x278>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d018      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a67      	ldr	r2, [pc, #412]	; (8006114 <DMA_SetConfig+0x27c>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d013      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a66      	ldr	r2, [pc, #408]	; (8006118 <DMA_SetConfig+0x280>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00e      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a64      	ldr	r2, [pc, #400]	; (800611c <DMA_SetConfig+0x284>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d009      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a63      	ldr	r2, [pc, #396]	; (8006120 <DMA_SetConfig+0x288>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d004      	beq.n	8005fa2 <DMA_SetConfig+0x10a>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a61      	ldr	r2, [pc, #388]	; (8006124 <DMA_SetConfig+0x28c>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d101      	bne.n	8005fa6 <DMA_SetConfig+0x10e>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e000      	b.n	8005fa8 <DMA_SetConfig+0x110>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00d      	beq.n	8005fc8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005fb4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d004      	beq.n	8005fc8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005fc6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a3e      	ldr	r2, [pc, #248]	; (80060c8 <DMA_SetConfig+0x230>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d04a      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a3d      	ldr	r2, [pc, #244]	; (80060cc <DMA_SetConfig+0x234>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d045      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a3b      	ldr	r2, [pc, #236]	; (80060d0 <DMA_SetConfig+0x238>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d040      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a3a      	ldr	r2, [pc, #232]	; (80060d4 <DMA_SetConfig+0x23c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d03b      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a38      	ldr	r2, [pc, #224]	; (80060d8 <DMA_SetConfig+0x240>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d036      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a37      	ldr	r2, [pc, #220]	; (80060dc <DMA_SetConfig+0x244>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d031      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a35      	ldr	r2, [pc, #212]	; (80060e0 <DMA_SetConfig+0x248>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d02c      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a34      	ldr	r2, [pc, #208]	; (80060e4 <DMA_SetConfig+0x24c>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d027      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a32      	ldr	r2, [pc, #200]	; (80060e8 <DMA_SetConfig+0x250>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d022      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a31      	ldr	r2, [pc, #196]	; (80060ec <DMA_SetConfig+0x254>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d01d      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a2f      	ldr	r2, [pc, #188]	; (80060f0 <DMA_SetConfig+0x258>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d018      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a2e      	ldr	r2, [pc, #184]	; (80060f4 <DMA_SetConfig+0x25c>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d013      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a2c      	ldr	r2, [pc, #176]	; (80060f8 <DMA_SetConfig+0x260>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00e      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a2b      	ldr	r2, [pc, #172]	; (80060fc <DMA_SetConfig+0x264>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d009      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a29      	ldr	r2, [pc, #164]	; (8006100 <DMA_SetConfig+0x268>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d004      	beq.n	8006068 <DMA_SetConfig+0x1d0>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a28      	ldr	r2, [pc, #160]	; (8006104 <DMA_SetConfig+0x26c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d101      	bne.n	800606c <DMA_SetConfig+0x1d4>
 8006068:	2301      	movs	r3, #1
 800606a:	e000      	b.n	800606e <DMA_SetConfig+0x1d6>
 800606c:	2300      	movs	r3, #0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d05a      	beq.n	8006128 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	223f      	movs	r2, #63	; 0x3f
 800607c:	409a      	lsls	r2, r3
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006090:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	2b40      	cmp	r3, #64	; 0x40
 80060a0:	d108      	bne.n	80060b4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80060b2:	e087      	b.n	80061c4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	60da      	str	r2, [r3, #12]
}
 80060c4:	e07e      	b.n	80061c4 <DMA_SetConfig+0x32c>
 80060c6:	bf00      	nop
 80060c8:	40020010 	.word	0x40020010
 80060cc:	40020028 	.word	0x40020028
 80060d0:	40020040 	.word	0x40020040
 80060d4:	40020058 	.word	0x40020058
 80060d8:	40020070 	.word	0x40020070
 80060dc:	40020088 	.word	0x40020088
 80060e0:	400200a0 	.word	0x400200a0
 80060e4:	400200b8 	.word	0x400200b8
 80060e8:	40020410 	.word	0x40020410
 80060ec:	40020428 	.word	0x40020428
 80060f0:	40020440 	.word	0x40020440
 80060f4:	40020458 	.word	0x40020458
 80060f8:	40020470 	.word	0x40020470
 80060fc:	40020488 	.word	0x40020488
 8006100:	400204a0 	.word	0x400204a0
 8006104:	400204b8 	.word	0x400204b8
 8006108:	58025408 	.word	0x58025408
 800610c:	5802541c 	.word	0x5802541c
 8006110:	58025430 	.word	0x58025430
 8006114:	58025444 	.word	0x58025444
 8006118:	58025458 	.word	0x58025458
 800611c:	5802546c 	.word	0x5802546c
 8006120:	58025480 	.word	0x58025480
 8006124:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a28      	ldr	r2, [pc, #160]	; (80061d0 <DMA_SetConfig+0x338>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d022      	beq.n	8006178 <DMA_SetConfig+0x2e0>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a27      	ldr	r2, [pc, #156]	; (80061d4 <DMA_SetConfig+0x33c>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d01d      	beq.n	8006178 <DMA_SetConfig+0x2e0>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a25      	ldr	r2, [pc, #148]	; (80061d8 <DMA_SetConfig+0x340>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d018      	beq.n	8006178 <DMA_SetConfig+0x2e0>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a24      	ldr	r2, [pc, #144]	; (80061dc <DMA_SetConfig+0x344>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d013      	beq.n	8006178 <DMA_SetConfig+0x2e0>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a22      	ldr	r2, [pc, #136]	; (80061e0 <DMA_SetConfig+0x348>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00e      	beq.n	8006178 <DMA_SetConfig+0x2e0>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a21      	ldr	r2, [pc, #132]	; (80061e4 <DMA_SetConfig+0x34c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d009      	beq.n	8006178 <DMA_SetConfig+0x2e0>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a1f      	ldr	r2, [pc, #124]	; (80061e8 <DMA_SetConfig+0x350>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d004      	beq.n	8006178 <DMA_SetConfig+0x2e0>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a1e      	ldr	r2, [pc, #120]	; (80061ec <DMA_SetConfig+0x354>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d101      	bne.n	800617c <DMA_SetConfig+0x2e4>
 8006178:	2301      	movs	r3, #1
 800617a:	e000      	b.n	800617e <DMA_SetConfig+0x2e6>
 800617c:	2300      	movs	r3, #0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d020      	beq.n	80061c4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006186:	f003 031f 	and.w	r3, r3, #31
 800618a:	2201      	movs	r2, #1
 800618c:	409a      	lsls	r2, r3
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	2b40      	cmp	r3, #64	; 0x40
 80061a0:	d108      	bne.n	80061b4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	60da      	str	r2, [r3, #12]
}
 80061b2:	e007      	b.n	80061c4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	60da      	str	r2, [r3, #12]
}
 80061c4:	bf00      	nop
 80061c6:	371c      	adds	r7, #28
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	58025408 	.word	0x58025408
 80061d4:	5802541c 	.word	0x5802541c
 80061d8:	58025430 	.word	0x58025430
 80061dc:	58025444 	.word	0x58025444
 80061e0:	58025458 	.word	0x58025458
 80061e4:	5802546c 	.word	0x5802546c
 80061e8:	58025480 	.word	0x58025480
 80061ec:	58025494 	.word	0x58025494

080061f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a42      	ldr	r2, [pc, #264]	; (8006308 <DMA_CalcBaseAndBitshift+0x118>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d04a      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a41      	ldr	r2, [pc, #260]	; (800630c <DMA_CalcBaseAndBitshift+0x11c>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d045      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a3f      	ldr	r2, [pc, #252]	; (8006310 <DMA_CalcBaseAndBitshift+0x120>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d040      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a3e      	ldr	r2, [pc, #248]	; (8006314 <DMA_CalcBaseAndBitshift+0x124>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d03b      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a3c      	ldr	r2, [pc, #240]	; (8006318 <DMA_CalcBaseAndBitshift+0x128>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d036      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a3b      	ldr	r2, [pc, #236]	; (800631c <DMA_CalcBaseAndBitshift+0x12c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d031      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a39      	ldr	r2, [pc, #228]	; (8006320 <DMA_CalcBaseAndBitshift+0x130>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d02c      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a38      	ldr	r2, [pc, #224]	; (8006324 <DMA_CalcBaseAndBitshift+0x134>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d027      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a36      	ldr	r2, [pc, #216]	; (8006328 <DMA_CalcBaseAndBitshift+0x138>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d022      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a35      	ldr	r2, [pc, #212]	; (800632c <DMA_CalcBaseAndBitshift+0x13c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d01d      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a33      	ldr	r2, [pc, #204]	; (8006330 <DMA_CalcBaseAndBitshift+0x140>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d018      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a32      	ldr	r2, [pc, #200]	; (8006334 <DMA_CalcBaseAndBitshift+0x144>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d013      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a30      	ldr	r2, [pc, #192]	; (8006338 <DMA_CalcBaseAndBitshift+0x148>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00e      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a2f      	ldr	r2, [pc, #188]	; (800633c <DMA_CalcBaseAndBitshift+0x14c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d009      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a2d      	ldr	r2, [pc, #180]	; (8006340 <DMA_CalcBaseAndBitshift+0x150>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d004      	beq.n	8006298 <DMA_CalcBaseAndBitshift+0xa8>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a2c      	ldr	r2, [pc, #176]	; (8006344 <DMA_CalcBaseAndBitshift+0x154>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d101      	bne.n	800629c <DMA_CalcBaseAndBitshift+0xac>
 8006298:	2301      	movs	r3, #1
 800629a:	e000      	b.n	800629e <DMA_CalcBaseAndBitshift+0xae>
 800629c:	2300      	movs	r3, #0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d024      	beq.n	80062ec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	3b10      	subs	r3, #16
 80062aa:	4a27      	ldr	r2, [pc, #156]	; (8006348 <DMA_CalcBaseAndBitshift+0x158>)
 80062ac:	fba2 2303 	umull	r2, r3, r2, r3
 80062b0:	091b      	lsrs	r3, r3, #4
 80062b2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f003 0307 	and.w	r3, r3, #7
 80062ba:	4a24      	ldr	r2, [pc, #144]	; (800634c <DMA_CalcBaseAndBitshift+0x15c>)
 80062bc:	5cd3      	ldrb	r3, [r2, r3]
 80062be:	461a      	mov	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d908      	bls.n	80062dc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	4b1f      	ldr	r3, [pc, #124]	; (8006350 <DMA_CalcBaseAndBitshift+0x160>)
 80062d2:	4013      	ands	r3, r2
 80062d4:	1d1a      	adds	r2, r3, #4
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	659a      	str	r2, [r3, #88]	; 0x58
 80062da:	e00d      	b.n	80062f8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	461a      	mov	r2, r3
 80062e2:	4b1b      	ldr	r3, [pc, #108]	; (8006350 <DMA_CalcBaseAndBitshift+0x160>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6593      	str	r3, [r2, #88]	; 0x58
 80062ea:	e005      	b.n	80062f8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	40020010 	.word	0x40020010
 800630c:	40020028 	.word	0x40020028
 8006310:	40020040 	.word	0x40020040
 8006314:	40020058 	.word	0x40020058
 8006318:	40020070 	.word	0x40020070
 800631c:	40020088 	.word	0x40020088
 8006320:	400200a0 	.word	0x400200a0
 8006324:	400200b8 	.word	0x400200b8
 8006328:	40020410 	.word	0x40020410
 800632c:	40020428 	.word	0x40020428
 8006330:	40020440 	.word	0x40020440
 8006334:	40020458 	.word	0x40020458
 8006338:	40020470 	.word	0x40020470
 800633c:	40020488 	.word	0x40020488
 8006340:	400204a0 	.word	0x400204a0
 8006344:	400204b8 	.word	0x400204b8
 8006348:	aaaaaaab 	.word	0xaaaaaaab
 800634c:	0800dab8 	.word	0x0800dab8
 8006350:	fffffc00 	.word	0xfffffc00

08006354 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800635c:	2300      	movs	r3, #0
 800635e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d120      	bne.n	80063aa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636c:	2b03      	cmp	r3, #3
 800636e:	d858      	bhi.n	8006422 <DMA_CheckFifoParam+0xce>
 8006370:	a201      	add	r2, pc, #4	; (adr r2, 8006378 <DMA_CheckFifoParam+0x24>)
 8006372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006376:	bf00      	nop
 8006378:	08006389 	.word	0x08006389
 800637c:	0800639b 	.word	0x0800639b
 8006380:	08006389 	.word	0x08006389
 8006384:	08006423 	.word	0x08006423
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d048      	beq.n	8006426 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006398:	e045      	b.n	8006426 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063a2:	d142      	bne.n	800642a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063a8:	e03f      	b.n	800642a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063b2:	d123      	bne.n	80063fc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	d838      	bhi.n	800642e <DMA_CheckFifoParam+0xda>
 80063bc:	a201      	add	r2, pc, #4	; (adr r2, 80063c4 <DMA_CheckFifoParam+0x70>)
 80063be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c2:	bf00      	nop
 80063c4:	080063d5 	.word	0x080063d5
 80063c8:	080063db 	.word	0x080063db
 80063cc:	080063d5 	.word	0x080063d5
 80063d0:	080063ed 	.word	0x080063ed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	73fb      	strb	r3, [r7, #15]
        break;
 80063d8:	e030      	b.n	800643c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d025      	beq.n	8006432 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063ea:	e022      	b.n	8006432 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063f4:	d11f      	bne.n	8006436 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063fa:	e01c      	b.n	8006436 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006400:	2b02      	cmp	r3, #2
 8006402:	d902      	bls.n	800640a <DMA_CheckFifoParam+0xb6>
 8006404:	2b03      	cmp	r3, #3
 8006406:	d003      	beq.n	8006410 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006408:	e018      	b.n	800643c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	73fb      	strb	r3, [r7, #15]
        break;
 800640e:	e015      	b.n	800643c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00e      	beq.n	800643a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	73fb      	strb	r3, [r7, #15]
    break;
 8006420:	e00b      	b.n	800643a <DMA_CheckFifoParam+0xe6>
        break;
 8006422:	bf00      	nop
 8006424:	e00a      	b.n	800643c <DMA_CheckFifoParam+0xe8>
        break;
 8006426:	bf00      	nop
 8006428:	e008      	b.n	800643c <DMA_CheckFifoParam+0xe8>
        break;
 800642a:	bf00      	nop
 800642c:	e006      	b.n	800643c <DMA_CheckFifoParam+0xe8>
        break;
 800642e:	bf00      	nop
 8006430:	e004      	b.n	800643c <DMA_CheckFifoParam+0xe8>
        break;
 8006432:	bf00      	nop
 8006434:	e002      	b.n	800643c <DMA_CheckFifoParam+0xe8>
        break;
 8006436:	bf00      	nop
 8006438:	e000      	b.n	800643c <DMA_CheckFifoParam+0xe8>
    break;
 800643a:	bf00      	nop
    }
  }

  return status;
 800643c:	7bfb      	ldrb	r3, [r7, #15]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop

0800644c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a38      	ldr	r2, [pc, #224]	; (8006540 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d022      	beq.n	80064aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a36      	ldr	r2, [pc, #216]	; (8006544 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d01d      	beq.n	80064aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a35      	ldr	r2, [pc, #212]	; (8006548 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d018      	beq.n	80064aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a33      	ldr	r2, [pc, #204]	; (800654c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d013      	beq.n	80064aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a32      	ldr	r2, [pc, #200]	; (8006550 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d00e      	beq.n	80064aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a30      	ldr	r2, [pc, #192]	; (8006554 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d009      	beq.n	80064aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a2f      	ldr	r2, [pc, #188]	; (8006558 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d004      	beq.n	80064aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a2d      	ldr	r2, [pc, #180]	; (800655c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d101      	bne.n	80064ae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80064aa:	2301      	movs	r3, #1
 80064ac:	e000      	b.n	80064b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80064ae:	2300      	movs	r3, #0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01a      	beq.n	80064ea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	3b08      	subs	r3, #8
 80064bc:	4a28      	ldr	r2, [pc, #160]	; (8006560 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80064be:	fba2 2303 	umull	r2, r3, r2, r3
 80064c2:	091b      	lsrs	r3, r3, #4
 80064c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	4b26      	ldr	r3, [pc, #152]	; (8006564 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	461a      	mov	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a24      	ldr	r2, [pc, #144]	; (8006568 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80064d8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f003 031f 	and.w	r3, r3, #31
 80064e0:	2201      	movs	r2, #1
 80064e2:	409a      	lsls	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80064e8:	e024      	b.n	8006534 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	3b10      	subs	r3, #16
 80064f2:	4a1e      	ldr	r2, [pc, #120]	; (800656c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80064f4:	fba2 2303 	umull	r2, r3, r2, r3
 80064f8:	091b      	lsrs	r3, r3, #4
 80064fa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	4a1c      	ldr	r2, [pc, #112]	; (8006570 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d806      	bhi.n	8006512 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	4a1b      	ldr	r2, [pc, #108]	; (8006574 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d902      	bls.n	8006512 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	3308      	adds	r3, #8
 8006510:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	4b18      	ldr	r3, [pc, #96]	; (8006578 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006516:	4413      	add	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	461a      	mov	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a16      	ldr	r2, [pc, #88]	; (800657c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006524:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f003 031f 	and.w	r3, r3, #31
 800652c:	2201      	movs	r2, #1
 800652e:	409a      	lsls	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006534:	bf00      	nop
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	58025408 	.word	0x58025408
 8006544:	5802541c 	.word	0x5802541c
 8006548:	58025430 	.word	0x58025430
 800654c:	58025444 	.word	0x58025444
 8006550:	58025458 	.word	0x58025458
 8006554:	5802546c 	.word	0x5802546c
 8006558:	58025480 	.word	0x58025480
 800655c:	58025494 	.word	0x58025494
 8006560:	cccccccd 	.word	0xcccccccd
 8006564:	16009600 	.word	0x16009600
 8006568:	58025880 	.word	0x58025880
 800656c:	aaaaaaab 	.word	0xaaaaaaab
 8006570:	400204b8 	.word	0x400204b8
 8006574:	4002040f 	.word	0x4002040f
 8006578:	10008200 	.word	0x10008200
 800657c:	40020880 	.word	0x40020880

08006580 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	b2db      	uxtb	r3, r3
 800658e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d04a      	beq.n	800662c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b08      	cmp	r3, #8
 800659a:	d847      	bhi.n	800662c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a25      	ldr	r2, [pc, #148]	; (8006638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d022      	beq.n	80065ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a24      	ldr	r2, [pc, #144]	; (800663c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d01d      	beq.n	80065ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a22      	ldr	r2, [pc, #136]	; (8006640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d018      	beq.n	80065ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a21      	ldr	r2, [pc, #132]	; (8006644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d013      	beq.n	80065ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a1f      	ldr	r2, [pc, #124]	; (8006648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00e      	beq.n	80065ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a1e      	ldr	r2, [pc, #120]	; (800664c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d009      	beq.n	80065ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a1c      	ldr	r2, [pc, #112]	; (8006650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d004      	beq.n	80065ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a1b      	ldr	r2, [pc, #108]	; (8006654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d101      	bne.n	80065f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80065ec:	2301      	movs	r3, #1
 80065ee:	e000      	b.n	80065f2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80065f0:	2300      	movs	r3, #0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	4b17      	ldr	r3, [pc, #92]	; (8006658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80065fa:	4413      	add	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	461a      	mov	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a15      	ldr	r2, [pc, #84]	; (800665c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006608:	671a      	str	r2, [r3, #112]	; 0x70
 800660a:	e009      	b.n	8006620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	4b14      	ldr	r3, [pc, #80]	; (8006660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006610:	4413      	add	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	461a      	mov	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a11      	ldr	r2, [pc, #68]	; (8006664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800661e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3b01      	subs	r3, #1
 8006624:	2201      	movs	r2, #1
 8006626:	409a      	lsls	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800662c:	bf00      	nop
 800662e:	3714      	adds	r7, #20
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	58025408 	.word	0x58025408
 800663c:	5802541c 	.word	0x5802541c
 8006640:	58025430 	.word	0x58025430
 8006644:	58025444 	.word	0x58025444
 8006648:	58025458 	.word	0x58025458
 800664c:	5802546c 	.word	0x5802546c
 8006650:	58025480 	.word	0x58025480
 8006654:	58025494 	.word	0x58025494
 8006658:	1600963f 	.word	0x1600963f
 800665c:	58025940 	.word	0x58025940
 8006660:	1000823f 	.word	0x1000823f
 8006664:	40020940 	.word	0x40020940

08006668 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006668:	b480      	push	{r7}
 800666a:	b089      	sub	sp, #36	; 0x24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006672:	2300      	movs	r3, #0
 8006674:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006676:	4b89      	ldr	r3, [pc, #548]	; (800689c <HAL_GPIO_Init+0x234>)
 8006678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800667a:	e194      	b.n	80069a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	2101      	movs	r1, #1
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	fa01 f303 	lsl.w	r3, r1, r3
 8006688:	4013      	ands	r3, r2
 800668a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 8186 	beq.w	80069a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d00b      	beq.n	80066b4 <HAL_GPIO_Init+0x4c>
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d007      	beq.n	80066b4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80066a8:	2b11      	cmp	r3, #17
 80066aa:	d003      	beq.n	80066b4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	2b12      	cmp	r3, #18
 80066b2:	d130      	bne.n	8006716 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	2203      	movs	r2, #3
 80066c0:	fa02 f303 	lsl.w	r3, r2, r3
 80066c4:	43db      	mvns	r3, r3
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	4013      	ands	r3, r2
 80066ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	fa02 f303 	lsl.w	r3, r2, r3
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	4313      	orrs	r3, r2
 80066dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066ea:	2201      	movs	r2, #1
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	fa02 f303 	lsl.w	r3, r2, r3
 80066f2:	43db      	mvns	r3, r3
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	4013      	ands	r3, r2
 80066f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	091b      	lsrs	r3, r3, #4
 8006700:	f003 0201 	and.w	r2, r3, #1
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	fa02 f303 	lsl.w	r3, r2, r3
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	4313      	orrs	r3, r2
 800670e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	005b      	lsls	r3, r3, #1
 8006720:	2203      	movs	r2, #3
 8006722:	fa02 f303 	lsl.w	r3, r2, r3
 8006726:	43db      	mvns	r3, r3
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	4013      	ands	r3, r2
 800672c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	689a      	ldr	r2, [r3, #8]
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	fa02 f303 	lsl.w	r3, r2, r3
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	4313      	orrs	r3, r2
 800673e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	2b02      	cmp	r3, #2
 800674c:	d003      	beq.n	8006756 <HAL_GPIO_Init+0xee>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	2b12      	cmp	r3, #18
 8006754:	d123      	bne.n	800679e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	08da      	lsrs	r2, r3, #3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3208      	adds	r2, #8
 800675e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006762:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	220f      	movs	r2, #15
 800676e:	fa02 f303 	lsl.w	r3, r2, r3
 8006772:	43db      	mvns	r3, r3
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	4013      	ands	r3, r2
 8006778:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	691a      	ldr	r2, [r3, #16]
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	f003 0307 	and.w	r3, r3, #7
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	fa02 f303 	lsl.w	r3, r2, r3
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	4313      	orrs	r3, r2
 800678e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	08da      	lsrs	r2, r3, #3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	3208      	adds	r2, #8
 8006798:	69b9      	ldr	r1, [r7, #24]
 800679a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	005b      	lsls	r3, r3, #1
 80067a8:	2203      	movs	r2, #3
 80067aa:	fa02 f303 	lsl.w	r3, r2, r3
 80067ae:	43db      	mvns	r3, r3
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	4013      	ands	r3, r2
 80067b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f003 0203 	and.w	r2, r3, #3
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	005b      	lsls	r3, r3, #1
 80067c2:	fa02 f303 	lsl.w	r3, r2, r3
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	69ba      	ldr	r2, [r7, #24]
 80067d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 80e0 	beq.w	80069a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067e0:	4b2f      	ldr	r3, [pc, #188]	; (80068a0 <HAL_GPIO_Init+0x238>)
 80067e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067e6:	4a2e      	ldr	r2, [pc, #184]	; (80068a0 <HAL_GPIO_Init+0x238>)
 80067e8:	f043 0302 	orr.w	r3, r3, #2
 80067ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80067f0:	4b2b      	ldr	r3, [pc, #172]	; (80068a0 <HAL_GPIO_Init+0x238>)
 80067f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80067fe:	4a29      	ldr	r2, [pc, #164]	; (80068a4 <HAL_GPIO_Init+0x23c>)
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	089b      	lsrs	r3, r3, #2
 8006804:	3302      	adds	r3, #2
 8006806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800680a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	220f      	movs	r2, #15
 8006816:	fa02 f303 	lsl.w	r3, r2, r3
 800681a:	43db      	mvns	r3, r3
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	4013      	ands	r3, r2
 8006820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a20      	ldr	r2, [pc, #128]	; (80068a8 <HAL_GPIO_Init+0x240>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d052      	beq.n	80068d0 <HAL_GPIO_Init+0x268>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a1f      	ldr	r2, [pc, #124]	; (80068ac <HAL_GPIO_Init+0x244>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d031      	beq.n	8006896 <HAL_GPIO_Init+0x22e>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a1e      	ldr	r2, [pc, #120]	; (80068b0 <HAL_GPIO_Init+0x248>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d02b      	beq.n	8006892 <HAL_GPIO_Init+0x22a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a1d      	ldr	r2, [pc, #116]	; (80068b4 <HAL_GPIO_Init+0x24c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d025      	beq.n	800688e <HAL_GPIO_Init+0x226>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a1c      	ldr	r2, [pc, #112]	; (80068b8 <HAL_GPIO_Init+0x250>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d01f      	beq.n	800688a <HAL_GPIO_Init+0x222>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a1b      	ldr	r2, [pc, #108]	; (80068bc <HAL_GPIO_Init+0x254>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d019      	beq.n	8006886 <HAL_GPIO_Init+0x21e>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a1a      	ldr	r2, [pc, #104]	; (80068c0 <HAL_GPIO_Init+0x258>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d013      	beq.n	8006882 <HAL_GPIO_Init+0x21a>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a19      	ldr	r2, [pc, #100]	; (80068c4 <HAL_GPIO_Init+0x25c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d00d      	beq.n	800687e <HAL_GPIO_Init+0x216>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a18      	ldr	r2, [pc, #96]	; (80068c8 <HAL_GPIO_Init+0x260>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d007      	beq.n	800687a <HAL_GPIO_Init+0x212>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a17      	ldr	r2, [pc, #92]	; (80068cc <HAL_GPIO_Init+0x264>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d101      	bne.n	8006876 <HAL_GPIO_Init+0x20e>
 8006872:	2309      	movs	r3, #9
 8006874:	e02d      	b.n	80068d2 <HAL_GPIO_Init+0x26a>
 8006876:	230a      	movs	r3, #10
 8006878:	e02b      	b.n	80068d2 <HAL_GPIO_Init+0x26a>
 800687a:	2308      	movs	r3, #8
 800687c:	e029      	b.n	80068d2 <HAL_GPIO_Init+0x26a>
 800687e:	2307      	movs	r3, #7
 8006880:	e027      	b.n	80068d2 <HAL_GPIO_Init+0x26a>
 8006882:	2306      	movs	r3, #6
 8006884:	e025      	b.n	80068d2 <HAL_GPIO_Init+0x26a>
 8006886:	2305      	movs	r3, #5
 8006888:	e023      	b.n	80068d2 <HAL_GPIO_Init+0x26a>
 800688a:	2304      	movs	r3, #4
 800688c:	e021      	b.n	80068d2 <HAL_GPIO_Init+0x26a>
 800688e:	2303      	movs	r3, #3
 8006890:	e01f      	b.n	80068d2 <HAL_GPIO_Init+0x26a>
 8006892:	2302      	movs	r3, #2
 8006894:	e01d      	b.n	80068d2 <HAL_GPIO_Init+0x26a>
 8006896:	2301      	movs	r3, #1
 8006898:	e01b      	b.n	80068d2 <HAL_GPIO_Init+0x26a>
 800689a:	bf00      	nop
 800689c:	58000080 	.word	0x58000080
 80068a0:	58024400 	.word	0x58024400
 80068a4:	58000400 	.word	0x58000400
 80068a8:	58020000 	.word	0x58020000
 80068ac:	58020400 	.word	0x58020400
 80068b0:	58020800 	.word	0x58020800
 80068b4:	58020c00 	.word	0x58020c00
 80068b8:	58021000 	.word	0x58021000
 80068bc:	58021400 	.word	0x58021400
 80068c0:	58021800 	.word	0x58021800
 80068c4:	58021c00 	.word	0x58021c00
 80068c8:	58022000 	.word	0x58022000
 80068cc:	58022400 	.word	0x58022400
 80068d0:	2300      	movs	r3, #0
 80068d2:	69fa      	ldr	r2, [r7, #28]
 80068d4:	f002 0203 	and.w	r2, r2, #3
 80068d8:	0092      	lsls	r2, r2, #2
 80068da:	4093      	lsls	r3, r2
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	4313      	orrs	r3, r2
 80068e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80068e2:	4938      	ldr	r1, [pc, #224]	; (80069c4 <HAL_GPIO_Init+0x35c>)
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	089b      	lsrs	r3, r3, #2
 80068e8:	3302      	adds	r3, #2
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	43db      	mvns	r3, r3
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	4013      	ands	r3, r2
 80068fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	43db      	mvns	r3, r3
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	4013      	ands	r3, r2
 8006928:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006936:	69ba      	ldr	r2, [r7, #24]
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	4313      	orrs	r3, r2
 800693c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	43db      	mvns	r3, r3
 8006950:	69ba      	ldr	r2, [r7, #24]
 8006952:	4013      	ands	r3, r2
 8006954:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	4313      	orrs	r3, r2
 8006968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800696a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	43db      	mvns	r3, r3
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	4013      	ands	r3, r2
 8006982:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006990:	69ba      	ldr	r2, [r7, #24]
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	4313      	orrs	r3, r2
 8006996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006998:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	3301      	adds	r3, #1
 80069a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	fa22 f303 	lsr.w	r3, r2, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f47f ae63 	bne.w	800667c <HAL_GPIO_Init+0x14>
  }
}
 80069b6:	bf00      	nop
 80069b8:	bf00      	nop
 80069ba:	3724      	adds	r7, #36	; 0x24
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	58000400 	.word	0x58000400

080069c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	460b      	mov	r3, r1
 80069d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	691a      	ldr	r2, [r3, #16]
 80069d8:	887b      	ldrh	r3, [r7, #2]
 80069da:	4013      	ands	r3, r2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d002      	beq.n	80069e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80069e0:	2301      	movs	r3, #1
 80069e2:	73fb      	strb	r3, [r7, #15]
 80069e4:	e001      	b.n	80069ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80069e6:	2300      	movs	r3, #0
 80069e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	460b      	mov	r3, r1
 8006a02:	807b      	strh	r3, [r7, #2]
 8006a04:	4613      	mov	r3, r2
 8006a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a08:	787b      	ldrb	r3, [r7, #1]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a0e:	887a      	ldrh	r2, [r7, #2]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006a14:	e003      	b.n	8006a1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006a16:	887b      	ldrh	r3, [r7, #2]
 8006a18:	041a      	lsls	r2, r3, #16
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	619a      	str	r2, [r3, #24]
}
 8006a1e:	bf00      	nop
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e041      	b.n	8006ac0 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006a44:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f245 5255 	movw	r2, #21845	; 0x5555
 8006a4e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	6852      	ldr	r2, [r2, #4]
 8006a58:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	6892      	ldr	r2, [r2, #8]
 8006a62:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006a64:	f7fc fe9e 	bl	80037a4 <HAL_GetTick>
 8006a68:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006a6a:	e00f      	b.n	8006a8c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006a6c:	f7fc fe9a 	bl	80037a4 <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	2b30      	cmp	r3, #48	; 0x30
 8006a78:	d908      	bls.n	8006a8c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f003 0307 	and.w	r3, r3, #7
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e019      	b.n	8006ac0 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f003 0307 	and.w	r3, r3, #7
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1e8      	bne.n	8006a6c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	691a      	ldr	r2, [r3, #16]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d005      	beq.n	8006ab4 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	68d2      	ldr	r2, [r2, #12]
 8006ab0:	611a      	str	r2, [r3, #16]
 8006ab2:	e004      	b.n	8006abe <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006abc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006ad8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006af0:	4b19      	ldr	r3, [pc, #100]	; (8006b58 <HAL_PWREx_ConfigSupply+0x70>)
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f003 0304 	and.w	r3, r3, #4
 8006af8:	2b04      	cmp	r3, #4
 8006afa:	d00a      	beq.n	8006b12 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006afc:	4b16      	ldr	r3, [pc, #88]	; (8006b58 <HAL_PWREx_ConfigSupply+0x70>)
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f003 0307 	and.w	r3, r3, #7
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d001      	beq.n	8006b0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e01f      	b.n	8006b4e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e01d      	b.n	8006b4e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006b12:	4b11      	ldr	r3, [pc, #68]	; (8006b58 <HAL_PWREx_ConfigSupply+0x70>)
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	f023 0207 	bic.w	r2, r3, #7
 8006b1a:	490f      	ldr	r1, [pc, #60]	; (8006b58 <HAL_PWREx_ConfigSupply+0x70>)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006b22:	f7fc fe3f 	bl	80037a4 <HAL_GetTick>
 8006b26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b28:	e009      	b.n	8006b3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006b2a:	f7fc fe3b 	bl	80037a4 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b38:	d901      	bls.n	8006b3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e007      	b.n	8006b4e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b3e:	4b06      	ldr	r3, [pc, #24]	; (8006b58 <HAL_PWREx_ConfigSupply+0x70>)
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b4a:	d1ee      	bne.n	8006b2a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	58024800 	.word	0x58024800

08006b5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b08c      	sub	sp, #48	; 0x30
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e3ff      	b.n	800736e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f000 8087 	beq.w	8006c8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b7c:	4b99      	ldr	r3, [pc, #612]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b86:	4b97      	ldr	r3, [pc, #604]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8e:	2b10      	cmp	r3, #16
 8006b90:	d007      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x46>
 8006b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b94:	2b18      	cmp	r3, #24
 8006b96:	d110      	bne.n	8006bba <HAL_RCC_OscConfig+0x5e>
 8006b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9a:	f003 0303 	and.w	r3, r3, #3
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d10b      	bne.n	8006bba <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ba2:	4b90      	ldr	r3, [pc, #576]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d06c      	beq.n	8006c88 <HAL_RCC_OscConfig+0x12c>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d168      	bne.n	8006c88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e3d9      	b.n	800736e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bc2:	d106      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x76>
 8006bc4:	4b87      	ldr	r3, [pc, #540]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a86      	ldr	r2, [pc, #536]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bce:	6013      	str	r3, [r2, #0]
 8006bd0:	e02e      	b.n	8006c30 <HAL_RCC_OscConfig+0xd4>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10c      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x98>
 8006bda:	4b82      	ldr	r3, [pc, #520]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a81      	ldr	r2, [pc, #516]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	4b7f      	ldr	r3, [pc, #508]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a7e      	ldr	r2, [pc, #504]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	e01d      	b.n	8006c30 <HAL_RCC_OscConfig+0xd4>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bfc:	d10c      	bne.n	8006c18 <HAL_RCC_OscConfig+0xbc>
 8006bfe:	4b79      	ldr	r3, [pc, #484]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a78      	ldr	r2, [pc, #480]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	4b76      	ldr	r3, [pc, #472]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a75      	ldr	r2, [pc, #468]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	e00b      	b.n	8006c30 <HAL_RCC_OscConfig+0xd4>
 8006c18:	4b72      	ldr	r3, [pc, #456]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a71      	ldr	r2, [pc, #452]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	4b6f      	ldr	r3, [pc, #444]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a6e      	ldr	r2, [pc, #440]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d013      	beq.n	8006c60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c38:	f7fc fdb4 	bl	80037a4 <HAL_GetTick>
 8006c3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c3e:	e008      	b.n	8006c52 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c40:	f7fc fdb0 	bl	80037a4 <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	2b64      	cmp	r3, #100	; 0x64
 8006c4c:	d901      	bls.n	8006c52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e38d      	b.n	800736e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c52:	4b64      	ldr	r3, [pc, #400]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d0f0      	beq.n	8006c40 <HAL_RCC_OscConfig+0xe4>
 8006c5e:	e014      	b.n	8006c8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c60:	f7fc fda0 	bl	80037a4 <HAL_GetTick>
 8006c64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c66:	e008      	b.n	8006c7a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c68:	f7fc fd9c 	bl	80037a4 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b64      	cmp	r3, #100	; 0x64
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e379      	b.n	800736e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c7a:	4b5a      	ldr	r3, [pc, #360]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1f0      	bne.n	8006c68 <HAL_RCC_OscConfig+0x10c>
 8006c86:	e000      	b.n	8006c8a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 80ae 	beq.w	8006df4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c98:	4b52      	ldr	r3, [pc, #328]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ca0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ca2:	4b50      	ldr	r3, [pc, #320]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d007      	beq.n	8006cbe <HAL_RCC_OscConfig+0x162>
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	2b18      	cmp	r3, #24
 8006cb2:	d13a      	bne.n	8006d2a <HAL_RCC_OscConfig+0x1ce>
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	f003 0303 	and.w	r3, r3, #3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d135      	bne.n	8006d2a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cbe:	4b49      	ldr	r3, [pc, #292]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0304 	and.w	r3, r3, #4
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d005      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x17a>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e34b      	b.n	800736e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cd6:	f7fc fd95 	bl	8003804 <HAL_GetREVID>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d817      	bhi.n	8006d14 <HAL_RCC_OscConfig+0x1b8>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	2b40      	cmp	r3, #64	; 0x40
 8006cea:	d108      	bne.n	8006cfe <HAL_RCC_OscConfig+0x1a2>
 8006cec:	4b3d      	ldr	r3, [pc, #244]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006cf4:	4a3b      	ldr	r2, [pc, #236]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cfa:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cfc:	e07a      	b.n	8006df4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cfe:	4b39      	ldr	r3, [pc, #228]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	031b      	lsls	r3, r3, #12
 8006d0c:	4935      	ldr	r1, [pc, #212]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d12:	e06f      	b.n	8006df4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d14:	4b33      	ldr	r3, [pc, #204]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	061b      	lsls	r3, r3, #24
 8006d22:	4930      	ldr	r1, [pc, #192]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d28:	e064      	b.n	8006df4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d045      	beq.n	8006dbe <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d32:	4b2c      	ldr	r3, [pc, #176]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f023 0219 	bic.w	r2, r3, #25
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	4929      	ldr	r1, [pc, #164]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d44:	f7fc fd2e 	bl	80037a4 <HAL_GetTick>
 8006d48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d4a:	e008      	b.n	8006d5e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d4c:	f7fc fd2a 	bl	80037a4 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d901      	bls.n	8006d5e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e307      	b.n	800736e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d5e:	4b21      	ldr	r3, [pc, #132]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0304 	and.w	r3, r3, #4
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0f0      	beq.n	8006d4c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d6a:	f7fc fd4b 	bl	8003804 <HAL_GetREVID>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	f241 0203 	movw	r2, #4099	; 0x1003
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d817      	bhi.n	8006da8 <HAL_RCC_OscConfig+0x24c>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	2b40      	cmp	r3, #64	; 0x40
 8006d7e:	d108      	bne.n	8006d92 <HAL_RCC_OscConfig+0x236>
 8006d80:	4b18      	ldr	r3, [pc, #96]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006d88:	4a16      	ldr	r2, [pc, #88]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d8e:	6053      	str	r3, [r2, #4]
 8006d90:	e030      	b.n	8006df4 <HAL_RCC_OscConfig+0x298>
 8006d92:	4b14      	ldr	r3, [pc, #80]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	031b      	lsls	r3, r3, #12
 8006da0:	4910      	ldr	r1, [pc, #64]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	604b      	str	r3, [r1, #4]
 8006da6:	e025      	b.n	8006df4 <HAL_RCC_OscConfig+0x298>
 8006da8:	4b0e      	ldr	r3, [pc, #56]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	061b      	lsls	r3, r3, #24
 8006db6:	490b      	ldr	r1, [pc, #44]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	604b      	str	r3, [r1, #4]
 8006dbc:	e01a      	b.n	8006df4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dbe:	4b09      	ldr	r3, [pc, #36]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a08      	ldr	r2, [pc, #32]	; (8006de4 <HAL_RCC_OscConfig+0x288>)
 8006dc4:	f023 0301 	bic.w	r3, r3, #1
 8006dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dca:	f7fc fceb 	bl	80037a4 <HAL_GetTick>
 8006dce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006dd0:	e00a      	b.n	8006de8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006dd2:	f7fc fce7 	bl	80037a4 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d903      	bls.n	8006de8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e2c4      	b.n	800736e <HAL_RCC_OscConfig+0x812>
 8006de4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006de8:	4ba4      	ldr	r3, [pc, #656]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0304 	and.w	r3, r3, #4
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1ee      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0310 	and.w	r3, r3, #16
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 80a9 	beq.w	8006f54 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e02:	4b9e      	ldr	r3, [pc, #632]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e0a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e0c:	4b9b      	ldr	r3, [pc, #620]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e10:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d007      	beq.n	8006e28 <HAL_RCC_OscConfig+0x2cc>
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	2b18      	cmp	r3, #24
 8006e1c:	d13a      	bne.n	8006e94 <HAL_RCC_OscConfig+0x338>
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f003 0303 	and.w	r3, r3, #3
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d135      	bne.n	8006e94 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e28:	4b94      	ldr	r3, [pc, #592]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d005      	beq.n	8006e40 <HAL_RCC_OscConfig+0x2e4>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	2b80      	cmp	r3, #128	; 0x80
 8006e3a:	d001      	beq.n	8006e40 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e296      	b.n	800736e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e40:	f7fc fce0 	bl	8003804 <HAL_GetREVID>
 8006e44:	4603      	mov	r3, r0
 8006e46:	f241 0203 	movw	r2, #4099	; 0x1003
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d817      	bhi.n	8006e7e <HAL_RCC_OscConfig+0x322>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	2b20      	cmp	r3, #32
 8006e54:	d108      	bne.n	8006e68 <HAL_RCC_OscConfig+0x30c>
 8006e56:	4b89      	ldr	r3, [pc, #548]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006e5e:	4a87      	ldr	r2, [pc, #540]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006e60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e64:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e66:	e075      	b.n	8006f54 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e68:	4b84      	ldr	r3, [pc, #528]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a1b      	ldr	r3, [r3, #32]
 8006e74:	069b      	lsls	r3, r3, #26
 8006e76:	4981      	ldr	r1, [pc, #516]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e7c:	e06a      	b.n	8006f54 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e7e:	4b7f      	ldr	r3, [pc, #508]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	061b      	lsls	r3, r3, #24
 8006e8c:	497b      	ldr	r1, [pc, #492]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e92:	e05f      	b.n	8006f54 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	69db      	ldr	r3, [r3, #28]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d042      	beq.n	8006f22 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006e9c:	4b77      	ldr	r3, [pc, #476]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a76      	ldr	r2, [pc, #472]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea8:	f7fc fc7c 	bl	80037a4 <HAL_GetTick>
 8006eac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006eae:	e008      	b.n	8006ec2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006eb0:	f7fc fc78 	bl	80037a4 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e255      	b.n	800736e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ec2:	4b6e      	ldr	r3, [pc, #440]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d0f0      	beq.n	8006eb0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ece:	f7fc fc99 	bl	8003804 <HAL_GetREVID>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d817      	bhi.n	8006f0c <HAL_RCC_OscConfig+0x3b0>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	2b20      	cmp	r3, #32
 8006ee2:	d108      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x39a>
 8006ee4:	4b65      	ldr	r3, [pc, #404]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006eec:	4a63      	ldr	r2, [pc, #396]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006eee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ef2:	6053      	str	r3, [r2, #4]
 8006ef4:	e02e      	b.n	8006f54 <HAL_RCC_OscConfig+0x3f8>
 8006ef6:	4b61      	ldr	r3, [pc, #388]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	069b      	lsls	r3, r3, #26
 8006f04:	495d      	ldr	r1, [pc, #372]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	604b      	str	r3, [r1, #4]
 8006f0a:	e023      	b.n	8006f54 <HAL_RCC_OscConfig+0x3f8>
 8006f0c:	4b5b      	ldr	r3, [pc, #364]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	061b      	lsls	r3, r3, #24
 8006f1a:	4958      	ldr	r1, [pc, #352]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	60cb      	str	r3, [r1, #12]
 8006f20:	e018      	b.n	8006f54 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006f22:	4b56      	ldr	r3, [pc, #344]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a55      	ldr	r2, [pc, #340]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006f28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f2e:	f7fc fc39 	bl	80037a4 <HAL_GetTick>
 8006f32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f34:	e008      	b.n	8006f48 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006f36:	f7fc fc35 	bl	80037a4 <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d901      	bls.n	8006f48 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e212      	b.n	800736e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f48:	4b4c      	ldr	r3, [pc, #304]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1f0      	bne.n	8006f36 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0308 	and.w	r3, r3, #8
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d036      	beq.n	8006fce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d019      	beq.n	8006f9c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f68:	4b44      	ldr	r3, [pc, #272]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f6c:	4a43      	ldr	r2, [pc, #268]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006f6e:	f043 0301 	orr.w	r3, r3, #1
 8006f72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f74:	f7fc fc16 	bl	80037a4 <HAL_GetTick>
 8006f78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f7a:	e008      	b.n	8006f8e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f7c:	f7fc fc12 	bl	80037a4 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e1ef      	b.n	800736e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f8e:	4b3b      	ldr	r3, [pc, #236]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d0f0      	beq.n	8006f7c <HAL_RCC_OscConfig+0x420>
 8006f9a:	e018      	b.n	8006fce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f9c:	4b37      	ldr	r3, [pc, #220]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fa0:	4a36      	ldr	r2, [pc, #216]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006fa2:	f023 0301 	bic.w	r3, r3, #1
 8006fa6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fa8:	f7fc fbfc 	bl	80037a4 <HAL_GetTick>
 8006fac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006fae:	e008      	b.n	8006fc2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fb0:	f7fc fbf8 	bl	80037a4 <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d901      	bls.n	8006fc2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e1d5      	b.n	800736e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006fc2:	4b2e      	ldr	r3, [pc, #184]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fc6:	f003 0302 	and.w	r3, r3, #2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1f0      	bne.n	8006fb0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0320 	and.w	r3, r3, #32
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d036      	beq.n	8007048 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d019      	beq.n	8007016 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006fe2:	4b26      	ldr	r3, [pc, #152]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a25      	ldr	r2, [pc, #148]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8006fe8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006fec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006fee:	f7fc fbd9 	bl	80037a4 <HAL_GetTick>
 8006ff2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006ff4:	e008      	b.n	8007008 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006ff6:	f7fc fbd5 	bl	80037a4 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	2b02      	cmp	r3, #2
 8007002:	d901      	bls.n	8007008 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e1b2      	b.n	800736e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007008:	4b1c      	ldr	r3, [pc, #112]	; (800707c <HAL_RCC_OscConfig+0x520>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d0f0      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x49a>
 8007014:	e018      	b.n	8007048 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007016:	4b19      	ldr	r3, [pc, #100]	; (800707c <HAL_RCC_OscConfig+0x520>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a18      	ldr	r2, [pc, #96]	; (800707c <HAL_RCC_OscConfig+0x520>)
 800701c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007020:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007022:	f7fc fbbf 	bl	80037a4 <HAL_GetTick>
 8007026:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007028:	e008      	b.n	800703c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800702a:	f7fc fbbb 	bl	80037a4 <HAL_GetTick>
 800702e:	4602      	mov	r2, r0
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	2b02      	cmp	r3, #2
 8007036:	d901      	bls.n	800703c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e198      	b.n	800736e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800703c:	4b0f      	ldr	r3, [pc, #60]	; (800707c <HAL_RCC_OscConfig+0x520>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1f0      	bne.n	800702a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0304 	and.w	r3, r3, #4
 8007050:	2b00      	cmp	r3, #0
 8007052:	f000 8085 	beq.w	8007160 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007056:	4b0a      	ldr	r3, [pc, #40]	; (8007080 <HAL_RCC_OscConfig+0x524>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a09      	ldr	r2, [pc, #36]	; (8007080 <HAL_RCC_OscConfig+0x524>)
 800705c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007060:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007062:	f7fc fb9f 	bl	80037a4 <HAL_GetTick>
 8007066:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007068:	e00c      	b.n	8007084 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800706a:	f7fc fb9b 	bl	80037a4 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	2b64      	cmp	r3, #100	; 0x64
 8007076:	d905      	bls.n	8007084 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e178      	b.n	800736e <HAL_RCC_OscConfig+0x812>
 800707c:	58024400 	.word	0x58024400
 8007080:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007084:	4b96      	ldr	r3, [pc, #600]	; (80072e0 <HAL_RCC_OscConfig+0x784>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800708c:	2b00      	cmp	r3, #0
 800708e:	d0ec      	beq.n	800706a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d106      	bne.n	80070a6 <HAL_RCC_OscConfig+0x54a>
 8007098:	4b92      	ldr	r3, [pc, #584]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 800709a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709c:	4a91      	ldr	r2, [pc, #580]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 800709e:	f043 0301 	orr.w	r3, r3, #1
 80070a2:	6713      	str	r3, [r2, #112]	; 0x70
 80070a4:	e02d      	b.n	8007102 <HAL_RCC_OscConfig+0x5a6>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10c      	bne.n	80070c8 <HAL_RCC_OscConfig+0x56c>
 80070ae:	4b8d      	ldr	r3, [pc, #564]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 80070b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b2:	4a8c      	ldr	r2, [pc, #560]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 80070b4:	f023 0301 	bic.w	r3, r3, #1
 80070b8:	6713      	str	r3, [r2, #112]	; 0x70
 80070ba:	4b8a      	ldr	r3, [pc, #552]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 80070bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070be:	4a89      	ldr	r2, [pc, #548]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 80070c0:	f023 0304 	bic.w	r3, r3, #4
 80070c4:	6713      	str	r3, [r2, #112]	; 0x70
 80070c6:	e01c      	b.n	8007102 <HAL_RCC_OscConfig+0x5a6>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	2b05      	cmp	r3, #5
 80070ce:	d10c      	bne.n	80070ea <HAL_RCC_OscConfig+0x58e>
 80070d0:	4b84      	ldr	r3, [pc, #528]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 80070d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d4:	4a83      	ldr	r2, [pc, #524]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 80070d6:	f043 0304 	orr.w	r3, r3, #4
 80070da:	6713      	str	r3, [r2, #112]	; 0x70
 80070dc:	4b81      	ldr	r3, [pc, #516]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 80070de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e0:	4a80      	ldr	r2, [pc, #512]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 80070e2:	f043 0301 	orr.w	r3, r3, #1
 80070e6:	6713      	str	r3, [r2, #112]	; 0x70
 80070e8:	e00b      	b.n	8007102 <HAL_RCC_OscConfig+0x5a6>
 80070ea:	4b7e      	ldr	r3, [pc, #504]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 80070ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ee:	4a7d      	ldr	r2, [pc, #500]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 80070f0:	f023 0301 	bic.w	r3, r3, #1
 80070f4:	6713      	str	r3, [r2, #112]	; 0x70
 80070f6:	4b7b      	ldr	r3, [pc, #492]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 80070f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070fa:	4a7a      	ldr	r2, [pc, #488]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 80070fc:	f023 0304 	bic.w	r3, r3, #4
 8007100:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d015      	beq.n	8007136 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800710a:	f7fc fb4b 	bl	80037a4 <HAL_GetTick>
 800710e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007110:	e00a      	b.n	8007128 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007112:	f7fc fb47 	bl	80037a4 <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007120:	4293      	cmp	r3, r2
 8007122:	d901      	bls.n	8007128 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e122      	b.n	800736e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007128:	4b6e      	ldr	r3, [pc, #440]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 800712a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800712c:	f003 0302 	and.w	r3, r3, #2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d0ee      	beq.n	8007112 <HAL_RCC_OscConfig+0x5b6>
 8007134:	e014      	b.n	8007160 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007136:	f7fc fb35 	bl	80037a4 <HAL_GetTick>
 800713a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800713c:	e00a      	b.n	8007154 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800713e:	f7fc fb31 	bl	80037a4 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	f241 3288 	movw	r2, #5000	; 0x1388
 800714c:	4293      	cmp	r3, r2
 800714e:	d901      	bls.n	8007154 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e10c      	b.n	800736e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007154:	4b63      	ldr	r3, [pc, #396]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 8007156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1ee      	bne.n	800713e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 8101 	beq.w	800736c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800716a:	4b5e      	ldr	r3, [pc, #376]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007172:	2b18      	cmp	r3, #24
 8007174:	f000 80bc 	beq.w	80072f0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	2b02      	cmp	r3, #2
 800717e:	f040 8095 	bne.w	80072ac <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007182:	4b58      	ldr	r3, [pc, #352]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a57      	ldr	r2, [pc, #348]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 8007188:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800718c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718e:	f7fc fb09 	bl	80037a4 <HAL_GetTick>
 8007192:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007194:	e008      	b.n	80071a8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007196:	f7fc fb05 	bl	80037a4 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d901      	bls.n	80071a8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e0e2      	b.n	800736e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80071a8:	4b4e      	ldr	r3, [pc, #312]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1f0      	bne.n	8007196 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071b4:	4b4b      	ldr	r3, [pc, #300]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 80071b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071b8:	4b4b      	ldr	r3, [pc, #300]	; (80072e8 <HAL_RCC_OscConfig+0x78c>)
 80071ba:	4013      	ands	r3, r2
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80071c4:	0112      	lsls	r2, r2, #4
 80071c6:	430a      	orrs	r2, r1
 80071c8:	4946      	ldr	r1, [pc, #280]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	628b      	str	r3, [r1, #40]	; 0x28
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d2:	3b01      	subs	r3, #1
 80071d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071dc:	3b01      	subs	r3, #1
 80071de:	025b      	lsls	r3, r3, #9
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	431a      	orrs	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e8:	3b01      	subs	r3, #1
 80071ea:	041b      	lsls	r3, r3, #16
 80071ec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80071f0:	431a      	orrs	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f6:	3b01      	subs	r3, #1
 80071f8:	061b      	lsls	r3, r3, #24
 80071fa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80071fe:	4939      	ldr	r1, [pc, #228]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 8007200:	4313      	orrs	r3, r2
 8007202:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007204:	4b37      	ldr	r3, [pc, #220]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 8007206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007208:	4a36      	ldr	r2, [pc, #216]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 800720a:	f023 0301 	bic.w	r3, r3, #1
 800720e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007210:	4b34      	ldr	r3, [pc, #208]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 8007212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007214:	4b35      	ldr	r3, [pc, #212]	; (80072ec <HAL_RCC_OscConfig+0x790>)
 8007216:	4013      	ands	r3, r2
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800721c:	00d2      	lsls	r2, r2, #3
 800721e:	4931      	ldr	r1, [pc, #196]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 8007220:	4313      	orrs	r3, r2
 8007222:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007224:	4b2f      	ldr	r3, [pc, #188]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 8007226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007228:	f023 020c 	bic.w	r2, r3, #12
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007230:	492c      	ldr	r1, [pc, #176]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 8007232:	4313      	orrs	r3, r2
 8007234:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007236:	4b2b      	ldr	r3, [pc, #172]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 8007238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723a:	f023 0202 	bic.w	r2, r3, #2
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007242:	4928      	ldr	r1, [pc, #160]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 8007244:	4313      	orrs	r3, r2
 8007246:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007248:	4b26      	ldr	r3, [pc, #152]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 800724a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724c:	4a25      	ldr	r2, [pc, #148]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 800724e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007252:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007254:	4b23      	ldr	r3, [pc, #140]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 8007256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007258:	4a22      	ldr	r2, [pc, #136]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 800725a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800725e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007260:	4b20      	ldr	r3, [pc, #128]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 8007262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007264:	4a1f      	ldr	r2, [pc, #124]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 8007266:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800726a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800726c:	4b1d      	ldr	r3, [pc, #116]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 800726e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007270:	4a1c      	ldr	r2, [pc, #112]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 8007272:	f043 0301 	orr.w	r3, r3, #1
 8007276:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007278:	4b1a      	ldr	r3, [pc, #104]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a19      	ldr	r2, [pc, #100]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 800727e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007284:	f7fc fa8e 	bl	80037a4 <HAL_GetTick>
 8007288:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800728a:	e008      	b.n	800729e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800728c:	f7fc fa8a 	bl	80037a4 <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	2b02      	cmp	r3, #2
 8007298:	d901      	bls.n	800729e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e067      	b.n	800736e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800729e:	4b11      	ldr	r3, [pc, #68]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d0f0      	beq.n	800728c <HAL_RCC_OscConfig+0x730>
 80072aa:	e05f      	b.n	800736c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072ac:	4b0d      	ldr	r3, [pc, #52]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a0c      	ldr	r2, [pc, #48]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 80072b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072b8:	f7fc fa74 	bl	80037a4 <HAL_GetTick>
 80072bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072be:	e008      	b.n	80072d2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072c0:	f7fc fa70 	bl	80037a4 <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d901      	bls.n	80072d2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e04d      	b.n	800736e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072d2:	4b04      	ldr	r3, [pc, #16]	; (80072e4 <HAL_RCC_OscConfig+0x788>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1f0      	bne.n	80072c0 <HAL_RCC_OscConfig+0x764>
 80072de:	e045      	b.n	800736c <HAL_RCC_OscConfig+0x810>
 80072e0:	58024800 	.word	0x58024800
 80072e4:	58024400 	.word	0x58024400
 80072e8:	fffffc0c 	.word	0xfffffc0c
 80072ec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80072f0:	4b21      	ldr	r3, [pc, #132]	; (8007378 <HAL_RCC_OscConfig+0x81c>)
 80072f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80072f6:	4b20      	ldr	r3, [pc, #128]	; (8007378 <HAL_RCC_OscConfig+0x81c>)
 80072f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007300:	2b01      	cmp	r3, #1
 8007302:	d031      	beq.n	8007368 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	f003 0203 	and.w	r2, r3, #3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800730e:	429a      	cmp	r2, r3
 8007310:	d12a      	bne.n	8007368 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	091b      	lsrs	r3, r3, #4
 8007316:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800731e:	429a      	cmp	r2, r3
 8007320:	d122      	bne.n	8007368 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800732e:	429a      	cmp	r2, r3
 8007330:	d11a      	bne.n	8007368 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	0a5b      	lsrs	r3, r3, #9
 8007336:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007340:	429a      	cmp	r2, r3
 8007342:	d111      	bne.n	8007368 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	0c1b      	lsrs	r3, r3, #16
 8007348:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007350:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007352:	429a      	cmp	r2, r3
 8007354:	d108      	bne.n	8007368 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	0e1b      	lsrs	r3, r3, #24
 800735a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007362:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007364:	429a      	cmp	r2, r3
 8007366:	d001      	beq.n	800736c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e000      	b.n	800736e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3730      	adds	r7, #48	; 0x30
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	58024400 	.word	0x58024400

0800737c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e19c      	b.n	80076ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007390:	4b8a      	ldr	r3, [pc, #552]	; (80075bc <HAL_RCC_ClockConfig+0x240>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 030f 	and.w	r3, r3, #15
 8007398:	683a      	ldr	r2, [r7, #0]
 800739a:	429a      	cmp	r2, r3
 800739c:	d910      	bls.n	80073c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800739e:	4b87      	ldr	r3, [pc, #540]	; (80075bc <HAL_RCC_ClockConfig+0x240>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f023 020f 	bic.w	r2, r3, #15
 80073a6:	4985      	ldr	r1, [pc, #532]	; (80075bc <HAL_RCC_ClockConfig+0x240>)
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073ae:	4b83      	ldr	r3, [pc, #524]	; (80075bc <HAL_RCC_ClockConfig+0x240>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 030f 	and.w	r3, r3, #15
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d001      	beq.n	80073c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e184      	b.n	80076ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0304 	and.w	r3, r3, #4
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d010      	beq.n	80073ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	691a      	ldr	r2, [r3, #16]
 80073d0:	4b7b      	ldr	r3, [pc, #492]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073d8:	429a      	cmp	r2, r3
 80073da:	d908      	bls.n	80073ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073dc:	4b78      	ldr	r3, [pc, #480]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	4975      	ldr	r1, [pc, #468]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0308 	and.w	r3, r3, #8
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d010      	beq.n	800741c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	695a      	ldr	r2, [r3, #20]
 80073fe:	4b70      	ldr	r3, [pc, #448]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007406:	429a      	cmp	r2, r3
 8007408:	d908      	bls.n	800741c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800740a:	4b6d      	ldr	r3, [pc, #436]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 800740c:	69db      	ldr	r3, [r3, #28]
 800740e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	496a      	ldr	r1, [pc, #424]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 8007418:	4313      	orrs	r3, r2
 800741a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0310 	and.w	r3, r3, #16
 8007424:	2b00      	cmp	r3, #0
 8007426:	d010      	beq.n	800744a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	699a      	ldr	r2, [r3, #24]
 800742c:	4b64      	ldr	r3, [pc, #400]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007434:	429a      	cmp	r2, r3
 8007436:	d908      	bls.n	800744a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007438:	4b61      	ldr	r3, [pc, #388]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 800743a:	69db      	ldr	r3, [r3, #28]
 800743c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	495e      	ldr	r1, [pc, #376]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 8007446:	4313      	orrs	r3, r2
 8007448:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0320 	and.w	r3, r3, #32
 8007452:	2b00      	cmp	r3, #0
 8007454:	d010      	beq.n	8007478 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	69da      	ldr	r2, [r3, #28]
 800745a:	4b59      	ldr	r3, [pc, #356]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007462:	429a      	cmp	r2, r3
 8007464:	d908      	bls.n	8007478 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007466:	4b56      	ldr	r3, [pc, #344]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	4953      	ldr	r1, [pc, #332]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 8007474:	4313      	orrs	r3, r2
 8007476:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0302 	and.w	r3, r3, #2
 8007480:	2b00      	cmp	r3, #0
 8007482:	d010      	beq.n	80074a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68da      	ldr	r2, [r3, #12]
 8007488:	4b4d      	ldr	r3, [pc, #308]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	f003 030f 	and.w	r3, r3, #15
 8007490:	429a      	cmp	r2, r3
 8007492:	d908      	bls.n	80074a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007494:	4b4a      	ldr	r3, [pc, #296]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	f023 020f 	bic.w	r2, r3, #15
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	4947      	ldr	r1, [pc, #284]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d055      	beq.n	800755e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80074b2:	4b43      	ldr	r3, [pc, #268]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	4940      	ldr	r1, [pc, #256]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d107      	bne.n	80074dc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074cc:	4b3c      	ldr	r3, [pc, #240]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d121      	bne.n	800751c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e0f6      	b.n	80076ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	2b03      	cmp	r3, #3
 80074e2:	d107      	bne.n	80074f4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074e4:	4b36      	ldr	r3, [pc, #216]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d115      	bne.n	800751c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e0ea      	b.n	80076ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d107      	bne.n	800750c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80074fc:	4b30      	ldr	r3, [pc, #192]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007504:	2b00      	cmp	r3, #0
 8007506:	d109      	bne.n	800751c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e0de      	b.n	80076ca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800750c:	4b2c      	ldr	r3, [pc, #176]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0304 	and.w	r3, r3, #4
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e0d6      	b.n	80076ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800751c:	4b28      	ldr	r3, [pc, #160]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	f023 0207 	bic.w	r2, r3, #7
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	4925      	ldr	r1, [pc, #148]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 800752a:	4313      	orrs	r3, r2
 800752c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800752e:	f7fc f939 	bl	80037a4 <HAL_GetTick>
 8007532:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007534:	e00a      	b.n	800754c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007536:	f7fc f935 	bl	80037a4 <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	f241 3288 	movw	r2, #5000	; 0x1388
 8007544:	4293      	cmp	r3, r2
 8007546:	d901      	bls.n	800754c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e0be      	b.n	80076ca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800754c:	4b1c      	ldr	r3, [pc, #112]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	00db      	lsls	r3, r3, #3
 800755a:	429a      	cmp	r2, r3
 800755c:	d1eb      	bne.n	8007536 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0302 	and.w	r3, r3, #2
 8007566:	2b00      	cmp	r3, #0
 8007568:	d010      	beq.n	800758c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68da      	ldr	r2, [r3, #12]
 800756e:	4b14      	ldr	r3, [pc, #80]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	f003 030f 	and.w	r3, r3, #15
 8007576:	429a      	cmp	r2, r3
 8007578:	d208      	bcs.n	800758c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800757a:	4b11      	ldr	r3, [pc, #68]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	f023 020f 	bic.w	r2, r3, #15
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	490e      	ldr	r1, [pc, #56]	; (80075c0 <HAL_RCC_ClockConfig+0x244>)
 8007588:	4313      	orrs	r3, r2
 800758a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800758c:	4b0b      	ldr	r3, [pc, #44]	; (80075bc <HAL_RCC_ClockConfig+0x240>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 030f 	and.w	r3, r3, #15
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	429a      	cmp	r2, r3
 8007598:	d214      	bcs.n	80075c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800759a:	4b08      	ldr	r3, [pc, #32]	; (80075bc <HAL_RCC_ClockConfig+0x240>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f023 020f 	bic.w	r2, r3, #15
 80075a2:	4906      	ldr	r1, [pc, #24]	; (80075bc <HAL_RCC_ClockConfig+0x240>)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075aa:	4b04      	ldr	r3, [pc, #16]	; (80075bc <HAL_RCC_ClockConfig+0x240>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 030f 	and.w	r3, r3, #15
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d005      	beq.n	80075c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e086      	b.n	80076ca <HAL_RCC_ClockConfig+0x34e>
 80075bc:	52002000 	.word	0x52002000
 80075c0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0304 	and.w	r3, r3, #4
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d010      	beq.n	80075f2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	691a      	ldr	r2, [r3, #16]
 80075d4:	4b3f      	ldr	r3, [pc, #252]	; (80076d4 <HAL_RCC_ClockConfig+0x358>)
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075dc:	429a      	cmp	r2, r3
 80075de:	d208      	bcs.n	80075f2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80075e0:	4b3c      	ldr	r3, [pc, #240]	; (80076d4 <HAL_RCC_ClockConfig+0x358>)
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	4939      	ldr	r1, [pc, #228]	; (80076d4 <HAL_RCC_ClockConfig+0x358>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0308 	and.w	r3, r3, #8
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d010      	beq.n	8007620 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	695a      	ldr	r2, [r3, #20]
 8007602:	4b34      	ldr	r3, [pc, #208]	; (80076d4 <HAL_RCC_ClockConfig+0x358>)
 8007604:	69db      	ldr	r3, [r3, #28]
 8007606:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800760a:	429a      	cmp	r2, r3
 800760c:	d208      	bcs.n	8007620 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800760e:	4b31      	ldr	r3, [pc, #196]	; (80076d4 <HAL_RCC_ClockConfig+0x358>)
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	492e      	ldr	r1, [pc, #184]	; (80076d4 <HAL_RCC_ClockConfig+0x358>)
 800761c:	4313      	orrs	r3, r2
 800761e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0310 	and.w	r3, r3, #16
 8007628:	2b00      	cmp	r3, #0
 800762a:	d010      	beq.n	800764e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	699a      	ldr	r2, [r3, #24]
 8007630:	4b28      	ldr	r3, [pc, #160]	; (80076d4 <HAL_RCC_ClockConfig+0x358>)
 8007632:	69db      	ldr	r3, [r3, #28]
 8007634:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007638:	429a      	cmp	r2, r3
 800763a:	d208      	bcs.n	800764e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800763c:	4b25      	ldr	r3, [pc, #148]	; (80076d4 <HAL_RCC_ClockConfig+0x358>)
 800763e:	69db      	ldr	r3, [r3, #28]
 8007640:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	4922      	ldr	r1, [pc, #136]	; (80076d4 <HAL_RCC_ClockConfig+0x358>)
 800764a:	4313      	orrs	r3, r2
 800764c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0320 	and.w	r3, r3, #32
 8007656:	2b00      	cmp	r3, #0
 8007658:	d010      	beq.n	800767c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	69da      	ldr	r2, [r3, #28]
 800765e:	4b1d      	ldr	r3, [pc, #116]	; (80076d4 <HAL_RCC_ClockConfig+0x358>)
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007666:	429a      	cmp	r2, r3
 8007668:	d208      	bcs.n	800767c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800766a:	4b1a      	ldr	r3, [pc, #104]	; (80076d4 <HAL_RCC_ClockConfig+0x358>)
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	69db      	ldr	r3, [r3, #28]
 8007676:	4917      	ldr	r1, [pc, #92]	; (80076d4 <HAL_RCC_ClockConfig+0x358>)
 8007678:	4313      	orrs	r3, r2
 800767a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800767c:	f000 f834 	bl	80076e8 <HAL_RCC_GetSysClockFreq>
 8007680:	4602      	mov	r2, r0
 8007682:	4b14      	ldr	r3, [pc, #80]	; (80076d4 <HAL_RCC_ClockConfig+0x358>)
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	0a1b      	lsrs	r3, r3, #8
 8007688:	f003 030f 	and.w	r3, r3, #15
 800768c:	4912      	ldr	r1, [pc, #72]	; (80076d8 <HAL_RCC_ClockConfig+0x35c>)
 800768e:	5ccb      	ldrb	r3, [r1, r3]
 8007690:	f003 031f 	and.w	r3, r3, #31
 8007694:	fa22 f303 	lsr.w	r3, r2, r3
 8007698:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800769a:	4b0e      	ldr	r3, [pc, #56]	; (80076d4 <HAL_RCC_ClockConfig+0x358>)
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	f003 030f 	and.w	r3, r3, #15
 80076a2:	4a0d      	ldr	r2, [pc, #52]	; (80076d8 <HAL_RCC_ClockConfig+0x35c>)
 80076a4:	5cd3      	ldrb	r3, [r2, r3]
 80076a6:	f003 031f 	and.w	r3, r3, #31
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	fa22 f303 	lsr.w	r3, r2, r3
 80076b0:	4a0a      	ldr	r2, [pc, #40]	; (80076dc <HAL_RCC_ClockConfig+0x360>)
 80076b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80076b4:	4a0a      	ldr	r2, [pc, #40]	; (80076e0 <HAL_RCC_ClockConfig+0x364>)
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80076ba:	4b0a      	ldr	r3, [pc, #40]	; (80076e4 <HAL_RCC_ClockConfig+0x368>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4618      	mov	r0, r3
 80076c0:	f7fb fa68 	bl	8002b94 <HAL_InitTick>
 80076c4:	4603      	mov	r3, r0
 80076c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3718      	adds	r7, #24
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	58024400 	.word	0x58024400
 80076d8:	0800daa8 	.word	0x0800daa8
 80076dc:	20000004 	.word	0x20000004
 80076e0:	20000000 	.word	0x20000000
 80076e4:	20000008 	.word	0x20000008

080076e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b089      	sub	sp, #36	; 0x24
 80076ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076ee:	4bb3      	ldr	r3, [pc, #716]	; (80079bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076f6:	2b18      	cmp	r3, #24
 80076f8:	f200 8155 	bhi.w	80079a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80076fc:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <HAL_RCC_GetSysClockFreq+0x1c>)
 80076fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007702:	bf00      	nop
 8007704:	08007769 	.word	0x08007769
 8007708:	080079a7 	.word	0x080079a7
 800770c:	080079a7 	.word	0x080079a7
 8007710:	080079a7 	.word	0x080079a7
 8007714:	080079a7 	.word	0x080079a7
 8007718:	080079a7 	.word	0x080079a7
 800771c:	080079a7 	.word	0x080079a7
 8007720:	080079a7 	.word	0x080079a7
 8007724:	0800778f 	.word	0x0800778f
 8007728:	080079a7 	.word	0x080079a7
 800772c:	080079a7 	.word	0x080079a7
 8007730:	080079a7 	.word	0x080079a7
 8007734:	080079a7 	.word	0x080079a7
 8007738:	080079a7 	.word	0x080079a7
 800773c:	080079a7 	.word	0x080079a7
 8007740:	080079a7 	.word	0x080079a7
 8007744:	08007795 	.word	0x08007795
 8007748:	080079a7 	.word	0x080079a7
 800774c:	080079a7 	.word	0x080079a7
 8007750:	080079a7 	.word	0x080079a7
 8007754:	080079a7 	.word	0x080079a7
 8007758:	080079a7 	.word	0x080079a7
 800775c:	080079a7 	.word	0x080079a7
 8007760:	080079a7 	.word	0x080079a7
 8007764:	0800779b 	.word	0x0800779b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007768:	4b94      	ldr	r3, [pc, #592]	; (80079bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0320 	and.w	r3, r3, #32
 8007770:	2b00      	cmp	r3, #0
 8007772:	d009      	beq.n	8007788 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007774:	4b91      	ldr	r3, [pc, #580]	; (80079bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	08db      	lsrs	r3, r3, #3
 800777a:	f003 0303 	and.w	r3, r3, #3
 800777e:	4a90      	ldr	r2, [pc, #576]	; (80079c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007780:	fa22 f303 	lsr.w	r3, r2, r3
 8007784:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007786:	e111      	b.n	80079ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007788:	4b8d      	ldr	r3, [pc, #564]	; (80079c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800778a:	61bb      	str	r3, [r7, #24]
    break;
 800778c:	e10e      	b.n	80079ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800778e:	4b8d      	ldr	r3, [pc, #564]	; (80079c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007790:	61bb      	str	r3, [r7, #24]
    break;
 8007792:	e10b      	b.n	80079ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007794:	4b8c      	ldr	r3, [pc, #560]	; (80079c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007796:	61bb      	str	r3, [r7, #24]
    break;
 8007798:	e108      	b.n	80079ac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800779a:	4b88      	ldr	r3, [pc, #544]	; (80079bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800779c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779e:	f003 0303 	and.w	r3, r3, #3
 80077a2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80077a4:	4b85      	ldr	r3, [pc, #532]	; (80079bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a8:	091b      	lsrs	r3, r3, #4
 80077aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077ae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80077b0:	4b82      	ldr	r3, [pc, #520]	; (80079bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80077ba:	4b80      	ldr	r3, [pc, #512]	; (80079bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077be:	08db      	lsrs	r3, r3, #3
 80077c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	fb02 f303 	mul.w	r3, r2, r3
 80077ca:	ee07 3a90 	vmov	s15, r3
 80077ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 80e1 	beq.w	80079a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	f000 8083 	beq.w	80078ec <HAL_RCC_GetSysClockFreq+0x204>
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	f200 80a1 	bhi.w	8007930 <HAL_RCC_GetSysClockFreq+0x248>
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d003      	beq.n	80077fc <HAL_RCC_GetSysClockFreq+0x114>
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d056      	beq.n	80078a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80077fa:	e099      	b.n	8007930 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077fc:	4b6f      	ldr	r3, [pc, #444]	; (80079bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0320 	and.w	r3, r3, #32
 8007804:	2b00      	cmp	r3, #0
 8007806:	d02d      	beq.n	8007864 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007808:	4b6c      	ldr	r3, [pc, #432]	; (80079bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	08db      	lsrs	r3, r3, #3
 800780e:	f003 0303 	and.w	r3, r3, #3
 8007812:	4a6b      	ldr	r2, [pc, #428]	; (80079c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007814:	fa22 f303 	lsr.w	r3, r2, r3
 8007818:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	ee07 3a90 	vmov	s15, r3
 8007820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	ee07 3a90 	vmov	s15, r3
 800782a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800782e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007832:	4b62      	ldr	r3, [pc, #392]	; (80079bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800783a:	ee07 3a90 	vmov	s15, r3
 800783e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007842:	ed97 6a02 	vldr	s12, [r7, #8]
 8007846:	eddf 5a61 	vldr	s11, [pc, #388]	; 80079cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800784a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800784e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800785a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800785e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007862:	e087      	b.n	8007974 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	ee07 3a90 	vmov	s15, r3
 800786a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800786e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80079d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007876:	4b51      	ldr	r3, [pc, #324]	; (80079bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800787e:	ee07 3a90 	vmov	s15, r3
 8007882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007886:	ed97 6a02 	vldr	s12, [r7, #8]
 800788a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80079cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800788e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800789a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800789e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078a6:	e065      	b.n	8007974 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	ee07 3a90 	vmov	s15, r3
 80078ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80079d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80078b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ba:	4b40      	ldr	r3, [pc, #256]	; (80079bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c2:	ee07 3a90 	vmov	s15, r3
 80078c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80078ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80079cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80078d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078ea:	e043      	b.n	8007974 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	ee07 3a90 	vmov	s15, r3
 80078f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80079d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80078fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078fe:	4b2f      	ldr	r3, [pc, #188]	; (80079bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007906:	ee07 3a90 	vmov	s15, r3
 800790a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800790e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007912:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80079cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800791a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800791e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800792a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800792e:	e021      	b.n	8007974 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	ee07 3a90 	vmov	s15, r3
 8007936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800793a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80079d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800793e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007942:	4b1e      	ldr	r3, [pc, #120]	; (80079bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800794a:	ee07 3a90 	vmov	s15, r3
 800794e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007952:	ed97 6a02 	vldr	s12, [r7, #8]
 8007956:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80079cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800795a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800795e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800796a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800796e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007972:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007974:	4b11      	ldr	r3, [pc, #68]	; (80079bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007978:	0a5b      	lsrs	r3, r3, #9
 800797a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800797e:	3301      	adds	r3, #1
 8007980:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	ee07 3a90 	vmov	s15, r3
 8007988:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800798c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007998:	ee17 3a90 	vmov	r3, s15
 800799c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800799e:	e005      	b.n	80079ac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80079a0:	2300      	movs	r3, #0
 80079a2:	61bb      	str	r3, [r7, #24]
    break;
 80079a4:	e002      	b.n	80079ac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80079a6:	4b07      	ldr	r3, [pc, #28]	; (80079c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80079a8:	61bb      	str	r3, [r7, #24]
    break;
 80079aa:	bf00      	nop
  }

  return sysclockfreq;
 80079ac:	69bb      	ldr	r3, [r7, #24]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3724      	adds	r7, #36	; 0x24
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	58024400 	.word	0x58024400
 80079c0:	03d09000 	.word	0x03d09000
 80079c4:	003d0900 	.word	0x003d0900
 80079c8:	017d7840 	.word	0x017d7840
 80079cc:	46000000 	.word	0x46000000
 80079d0:	4c742400 	.word	0x4c742400
 80079d4:	4a742400 	.word	0x4a742400
 80079d8:	4bbebc20 	.word	0x4bbebc20

080079dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80079e2:	f7ff fe81 	bl	80076e8 <HAL_RCC_GetSysClockFreq>
 80079e6:	4602      	mov	r2, r0
 80079e8:	4b10      	ldr	r3, [pc, #64]	; (8007a2c <HAL_RCC_GetHCLKFreq+0x50>)
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	0a1b      	lsrs	r3, r3, #8
 80079ee:	f003 030f 	and.w	r3, r3, #15
 80079f2:	490f      	ldr	r1, [pc, #60]	; (8007a30 <HAL_RCC_GetHCLKFreq+0x54>)
 80079f4:	5ccb      	ldrb	r3, [r1, r3]
 80079f6:	f003 031f 	and.w	r3, r3, #31
 80079fa:	fa22 f303 	lsr.w	r3, r2, r3
 80079fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a00:	4b0a      	ldr	r3, [pc, #40]	; (8007a2c <HAL_RCC_GetHCLKFreq+0x50>)
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	f003 030f 	and.w	r3, r3, #15
 8007a08:	4a09      	ldr	r2, [pc, #36]	; (8007a30 <HAL_RCC_GetHCLKFreq+0x54>)
 8007a0a:	5cd3      	ldrb	r3, [r2, r3]
 8007a0c:	f003 031f 	and.w	r3, r3, #31
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	fa22 f303 	lsr.w	r3, r2, r3
 8007a16:	4a07      	ldr	r2, [pc, #28]	; (8007a34 <HAL_RCC_GetHCLKFreq+0x58>)
 8007a18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a1a:	4a07      	ldr	r2, [pc, #28]	; (8007a38 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007a20:	4b04      	ldr	r3, [pc, #16]	; (8007a34 <HAL_RCC_GetHCLKFreq+0x58>)
 8007a22:	681b      	ldr	r3, [r3, #0]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3708      	adds	r7, #8
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	58024400 	.word	0x58024400
 8007a30:	0800daa8 	.word	0x0800daa8
 8007a34:	20000004 	.word	0x20000004
 8007a38:	20000000 	.word	0x20000000

08007a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007a40:	f7ff ffcc 	bl	80079dc <HAL_RCC_GetHCLKFreq>
 8007a44:	4602      	mov	r2, r0
 8007a46:	4b06      	ldr	r3, [pc, #24]	; (8007a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	091b      	lsrs	r3, r3, #4
 8007a4c:	f003 0307 	and.w	r3, r3, #7
 8007a50:	4904      	ldr	r1, [pc, #16]	; (8007a64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a52:	5ccb      	ldrb	r3, [r1, r3]
 8007a54:	f003 031f 	and.w	r3, r3, #31
 8007a58:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	58024400 	.word	0x58024400
 8007a64:	0800daa8 	.word	0x0800daa8

08007a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007a6c:	f7ff ffb6 	bl	80079dc <HAL_RCC_GetHCLKFreq>
 8007a70:	4602      	mov	r2, r0
 8007a72:	4b06      	ldr	r3, [pc, #24]	; (8007a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a74:	69db      	ldr	r3, [r3, #28]
 8007a76:	0a1b      	lsrs	r3, r3, #8
 8007a78:	f003 0307 	and.w	r3, r3, #7
 8007a7c:	4904      	ldr	r1, [pc, #16]	; (8007a90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a7e:	5ccb      	ldrb	r3, [r1, r3]
 8007a80:	f003 031f 	and.w	r3, r3, #31
 8007a84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	58024400 	.word	0x58024400
 8007a90:	0800daa8 	.word	0x0800daa8

08007a94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	223f      	movs	r2, #63	; 0x3f
 8007aa2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007aa4:	4b1a      	ldr	r3, [pc, #104]	; (8007b10 <HAL_RCC_GetClockConfig+0x7c>)
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	f003 0207 	and.w	r2, r3, #7
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007ab0:	4b17      	ldr	r3, [pc, #92]	; (8007b10 <HAL_RCC_GetClockConfig+0x7c>)
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007abc:	4b14      	ldr	r3, [pc, #80]	; (8007b10 <HAL_RCC_GetClockConfig+0x7c>)
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	f003 020f 	and.w	r2, r3, #15
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007ac8:	4b11      	ldr	r3, [pc, #68]	; (8007b10 <HAL_RCC_GetClockConfig+0x7c>)
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007ad4:	4b0e      	ldr	r3, [pc, #56]	; (8007b10 <HAL_RCC_GetClockConfig+0x7c>)
 8007ad6:	69db      	ldr	r3, [r3, #28]
 8007ad8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007ae0:	4b0b      	ldr	r3, [pc, #44]	; (8007b10 <HAL_RCC_GetClockConfig+0x7c>)
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007aec:	4b08      	ldr	r3, [pc, #32]	; (8007b10 <HAL_RCC_GetClockConfig+0x7c>)
 8007aee:	6a1b      	ldr	r3, [r3, #32]
 8007af0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007af8:	4b06      	ldr	r3, [pc, #24]	; (8007b14 <HAL_RCC_GetClockConfig+0x80>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 020f 	and.w	r2, r3, #15
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	601a      	str	r2, [r3, #0]
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	58024400 	.word	0x58024400
 8007b14:	52002000 	.word	0x52002000

08007b18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b20:	2300      	movs	r3, #0
 8007b22:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b24:	2300      	movs	r3, #0
 8007b26:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d03f      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b3c:	d02a      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007b3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b42:	d824      	bhi.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007b44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b48:	d018      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007b4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b4e:	d81e      	bhi.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d003      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007b54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b58:	d007      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007b5a:	e018      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b5c:	4bab      	ldr	r3, [pc, #684]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b60:	4aaa      	ldr	r2, [pc, #680]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007b68:	e015      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	2102      	movs	r1, #2
 8007b70:	4618      	mov	r0, r3
 8007b72:	f001 f9cf 	bl	8008f14 <RCCEx_PLL2_Config>
 8007b76:	4603      	mov	r3, r0
 8007b78:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007b7a:	e00c      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	3324      	adds	r3, #36	; 0x24
 8007b80:	2102      	movs	r1, #2
 8007b82:	4618      	mov	r0, r3
 8007b84:	f001 fa78 	bl	8009078 <RCCEx_PLL3_Config>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007b8c:	e003      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	75fb      	strb	r3, [r7, #23]
      break;
 8007b92:	e000      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d109      	bne.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007b9c:	4b9b      	ldr	r3, [pc, #620]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ba8:	4998      	ldr	r1, [pc, #608]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	650b      	str	r3, [r1, #80]	; 0x50
 8007bae:	e001      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb0:	7dfb      	ldrb	r3, [r7, #23]
 8007bb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d03d      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc4:	2b04      	cmp	r3, #4
 8007bc6:	d826      	bhi.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007bc8:	a201      	add	r2, pc, #4	; (adr r2, 8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bce:	bf00      	nop
 8007bd0:	08007be5 	.word	0x08007be5
 8007bd4:	08007bf3 	.word	0x08007bf3
 8007bd8:	08007c05 	.word	0x08007c05
 8007bdc:	08007c1d 	.word	0x08007c1d
 8007be0:	08007c1d 	.word	0x08007c1d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007be4:	4b89      	ldr	r3, [pc, #548]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be8:	4a88      	ldr	r2, [pc, #544]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bf0:	e015      	b.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f001 f98b 	bl	8008f14 <RCCEx_PLL2_Config>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c02:	e00c      	b.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	3324      	adds	r3, #36	; 0x24
 8007c08:	2100      	movs	r1, #0
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f001 fa34 	bl	8009078 <RCCEx_PLL3_Config>
 8007c10:	4603      	mov	r3, r0
 8007c12:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c14:	e003      	b.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	75fb      	strb	r3, [r7, #23]
      break;
 8007c1a:	e000      	b.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007c1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c1e:	7dfb      	ldrb	r3, [r7, #23]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d109      	bne.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c24:	4b79      	ldr	r3, [pc, #484]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c28:	f023 0207 	bic.w	r2, r3, #7
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c30:	4976      	ldr	r1, [pc, #472]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c32:	4313      	orrs	r3, r2
 8007c34:	650b      	str	r3, [r1, #80]	; 0x50
 8007c36:	e001      	b.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
 8007c3a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d042      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c50:	d02b      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c56:	d825      	bhi.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007c58:	2bc0      	cmp	r3, #192	; 0xc0
 8007c5a:	d028      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007c5c:	2bc0      	cmp	r3, #192	; 0xc0
 8007c5e:	d821      	bhi.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007c60:	2b80      	cmp	r3, #128	; 0x80
 8007c62:	d016      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007c64:	2b80      	cmp	r3, #128	; 0x80
 8007c66:	d81d      	bhi.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d002      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007c6c:	2b40      	cmp	r3, #64	; 0x40
 8007c6e:	d007      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007c70:	e018      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c72:	4b66      	ldr	r3, [pc, #408]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c76:	4a65      	ldr	r2, [pc, #404]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007c7e:	e017      	b.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	3304      	adds	r3, #4
 8007c84:	2100      	movs	r1, #0
 8007c86:	4618      	mov	r0, r3
 8007c88:	f001 f944 	bl	8008f14 <RCCEx_PLL2_Config>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007c90:	e00e      	b.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	3324      	adds	r3, #36	; 0x24
 8007c96:	2100      	movs	r1, #0
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f001 f9ed 	bl	8009078 <RCCEx_PLL3_Config>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007ca2:	e005      	b.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ca8:	e002      	b.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007caa:	bf00      	nop
 8007cac:	e000      	b.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007cae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cb0:	7dfb      	ldrb	r3, [r7, #23]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d109      	bne.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007cb6:	4b55      	ldr	r3, [pc, #340]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cba:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc2:	4952      	ldr	r1, [pc, #328]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	650b      	str	r3, [r1, #80]	; 0x50
 8007cc8:	e001      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cca:	7dfb      	ldrb	r3, [r7, #23]
 8007ccc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d049      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ce0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ce4:	d030      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007ce6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007cea:	d82a      	bhi.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007cec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007cf0:	d02c      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007cf2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007cf6:	d824      	bhi.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007cf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cfc:	d018      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007cfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d02:	d81e      	bhi.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d003      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007d08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d0c:	d007      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007d0e:	e018      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d10:	4b3e      	ldr	r3, [pc, #248]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d14:	4a3d      	ldr	r2, [pc, #244]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d1c:	e017      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	3304      	adds	r3, #4
 8007d22:	2100      	movs	r1, #0
 8007d24:	4618      	mov	r0, r3
 8007d26:	f001 f8f5 	bl	8008f14 <RCCEx_PLL2_Config>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007d2e:	e00e      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	3324      	adds	r3, #36	; 0x24
 8007d34:	2100      	movs	r1, #0
 8007d36:	4618      	mov	r0, r3
 8007d38:	f001 f99e 	bl	8009078 <RCCEx_PLL3_Config>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d40:	e005      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	75fb      	strb	r3, [r7, #23]
      break;
 8007d46:	e002      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007d48:	bf00      	nop
 8007d4a:	e000      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007d4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d10a      	bne.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007d54:	4b2d      	ldr	r3, [pc, #180]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d58:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007d62:	492a      	ldr	r1, [pc, #168]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d64:	4313      	orrs	r3, r2
 8007d66:	658b      	str	r3, [r1, #88]	; 0x58
 8007d68:	e001      	b.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d6a:	7dfb      	ldrb	r3, [r7, #23]
 8007d6c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d04c      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007d80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d84:	d030      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007d86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d8a:	d82a      	bhi.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007d8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d90:	d02c      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007d92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d96:	d824      	bhi.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007d98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d9c:	d018      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007d9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007da2:	d81e      	bhi.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d003      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007dac:	d007      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007dae:	e018      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007db0:	4b16      	ldr	r3, [pc, #88]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db4:	4a15      	ldr	r2, [pc, #84]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007dbc:	e017      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f001 f8a5 	bl	8008f14 <RCCEx_PLL2_Config>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007dce:	e00e      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3324      	adds	r3, #36	; 0x24
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f001 f94e 	bl	8009078 <RCCEx_PLL3_Config>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007de0:	e005      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	75fb      	strb	r3, [r7, #23]
      break;
 8007de6:	e002      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007de8:	bf00      	nop
 8007dea:	e000      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10d      	bne.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007df4:	4b05      	ldr	r3, [pc, #20]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007df8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007e02:	4902      	ldr	r1, [pc, #8]	; (8007e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	658b      	str	r3, [r1, #88]	; 0x58
 8007e08:	e004      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007e0a:	bf00      	nop
 8007e0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e10:	7dfb      	ldrb	r3, [r7, #23]
 8007e12:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d032      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e24:	2b30      	cmp	r3, #48	; 0x30
 8007e26:	d01c      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007e28:	2b30      	cmp	r3, #48	; 0x30
 8007e2a:	d817      	bhi.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007e2c:	2b20      	cmp	r3, #32
 8007e2e:	d00c      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007e30:	2b20      	cmp	r3, #32
 8007e32:	d813      	bhi.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d016      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007e38:	2b10      	cmp	r3, #16
 8007e3a:	d10f      	bne.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e3c:	4baf      	ldr	r3, [pc, #700]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e40:	4aae      	ldr	r2, [pc, #696]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007e48:	e00e      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	2102      	movs	r1, #2
 8007e50:	4618      	mov	r0, r3
 8007e52:	f001 f85f 	bl	8008f14 <RCCEx_PLL2_Config>
 8007e56:	4603      	mov	r3, r0
 8007e58:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007e5a:	e005      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e60:	e002      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007e62:	bf00      	nop
 8007e64:	e000      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007e66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e68:	7dfb      	ldrb	r3, [r7, #23]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d109      	bne.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007e6e:	4ba3      	ldr	r3, [pc, #652]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e72:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e7a:	49a0      	ldr	r1, [pc, #640]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007e80:	e001      	b.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e82:	7dfb      	ldrb	r3, [r7, #23]
 8007e84:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d047      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e9a:	d030      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ea0:	d82a      	bhi.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007ea2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ea6:	d02c      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007ea8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007eac:	d824      	bhi.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eb2:	d018      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eb8:	d81e      	bhi.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec2:	d007      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007ec4:	e018      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ec6:	4b8d      	ldr	r3, [pc, #564]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eca:	4a8c      	ldr	r2, [pc, #560]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ed2:	e017      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	2100      	movs	r1, #0
 8007eda:	4618      	mov	r0, r3
 8007edc:	f001 f81a 	bl	8008f14 <RCCEx_PLL2_Config>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ee4:	e00e      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	3324      	adds	r3, #36	; 0x24
 8007eea:	2100      	movs	r1, #0
 8007eec:	4618      	mov	r0, r3
 8007eee:	f001 f8c3 	bl	8009078 <RCCEx_PLL3_Config>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ef6:	e005      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	75fb      	strb	r3, [r7, #23]
      break;
 8007efc:	e002      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007efe:	bf00      	nop
 8007f00:	e000      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f04:	7dfb      	ldrb	r3, [r7, #23]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d109      	bne.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007f0a:	4b7c      	ldr	r3, [pc, #496]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f0e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f16:	4979      	ldr	r1, [pc, #484]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	650b      	str	r3, [r1, #80]	; 0x50
 8007f1c:	e001      	b.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f1e:	7dfb      	ldrb	r3, [r7, #23]
 8007f20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d049      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f36:	d02e      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f3c:	d828      	bhi.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007f3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f42:	d02a      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007f44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f48:	d822      	bhi.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007f4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f4e:	d026      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007f50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f54:	d81c      	bhi.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007f56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f5a:	d010      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007f5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f60:	d816      	bhi.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d01d      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f6a:	d111      	bne.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	3304      	adds	r3, #4
 8007f70:	2101      	movs	r1, #1
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 ffce 	bl	8008f14 <RCCEx_PLL2_Config>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007f7c:	e012      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	3324      	adds	r3, #36	; 0x24
 8007f82:	2101      	movs	r1, #1
 8007f84:	4618      	mov	r0, r3
 8007f86:	f001 f877 	bl	8009078 <RCCEx_PLL3_Config>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007f8e:	e009      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	75fb      	strb	r3, [r7, #23]
      break;
 8007f94:	e006      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007f96:	bf00      	nop
 8007f98:	e004      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007f9a:	bf00      	nop
 8007f9c:	e002      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007f9e:	bf00      	nop
 8007fa0:	e000      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007fa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fa4:	7dfb      	ldrb	r3, [r7, #23]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d109      	bne.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007faa:	4b54      	ldr	r3, [pc, #336]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fae:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fb6:	4951      	ldr	r1, [pc, #324]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	650b      	str	r3, [r1, #80]	; 0x50
 8007fbc:	e001      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fbe:	7dfb      	ldrb	r3, [r7, #23]
 8007fc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d04b      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007fd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007fd8:	d02e      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007fda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007fde:	d828      	bhi.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fe4:	d02a      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fea:	d822      	bhi.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007fec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ff0:	d026      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007ff2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ff6:	d81c      	bhi.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ffc:	d010      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007ffe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008002:	d816      	bhi.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008004:	2b00      	cmp	r3, #0
 8008006:	d01d      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008008:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800800c:	d111      	bne.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	3304      	adds	r3, #4
 8008012:	2101      	movs	r1, #1
 8008014:	4618      	mov	r0, r3
 8008016:	f000 ff7d 	bl	8008f14 <RCCEx_PLL2_Config>
 800801a:	4603      	mov	r3, r0
 800801c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800801e:	e012      	b.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	3324      	adds	r3, #36	; 0x24
 8008024:	2101      	movs	r1, #1
 8008026:	4618      	mov	r0, r3
 8008028:	f001 f826 	bl	8009078 <RCCEx_PLL3_Config>
 800802c:	4603      	mov	r3, r0
 800802e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008030:	e009      	b.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	75fb      	strb	r3, [r7, #23]
      break;
 8008036:	e006      	b.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008038:	bf00      	nop
 800803a:	e004      	b.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800803c:	bf00      	nop
 800803e:	e002      	b.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008040:	bf00      	nop
 8008042:	e000      	b.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008044:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008046:	7dfb      	ldrb	r3, [r7, #23]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10a      	bne.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800804c:	4b2b      	ldr	r3, [pc, #172]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800804e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008050:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800805a:	4928      	ldr	r1, [pc, #160]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800805c:	4313      	orrs	r3, r2
 800805e:	658b      	str	r3, [r1, #88]	; 0x58
 8008060:	e001      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008062:	7dfb      	ldrb	r3, [r7, #23]
 8008064:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d02f      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800807a:	d00e      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800807c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008080:	d814      	bhi.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008082:	2b00      	cmp	r3, #0
 8008084:	d015      	beq.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008086:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800808a:	d10f      	bne.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800808c:	4b1b      	ldr	r3, [pc, #108]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800808e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008090:	4a1a      	ldr	r2, [pc, #104]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008096:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008098:	e00c      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	3304      	adds	r3, #4
 800809e:	2101      	movs	r1, #1
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 ff37 	bl	8008f14 <RCCEx_PLL2_Config>
 80080a6:	4603      	mov	r3, r0
 80080a8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80080aa:	e003      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	75fb      	strb	r3, [r7, #23]
      break;
 80080b0:	e000      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80080b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080b4:	7dfb      	ldrb	r3, [r7, #23]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d109      	bne.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80080ba:	4b10      	ldr	r3, [pc, #64]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80080bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080c6:	490d      	ldr	r1, [pc, #52]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	650b      	str	r3, [r1, #80]	; 0x50
 80080cc:	e001      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ce:	7dfb      	ldrb	r3, [r7, #23]
 80080d0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d033      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080e2:	2b03      	cmp	r3, #3
 80080e4:	d81c      	bhi.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80080e6:	a201      	add	r2, pc, #4	; (adr r2, 80080ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80080e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ec:	08008127 	.word	0x08008127
 80080f0:	08008101 	.word	0x08008101
 80080f4:	0800810f 	.word	0x0800810f
 80080f8:	08008127 	.word	0x08008127
 80080fc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008100:	4bb8      	ldr	r3, [pc, #736]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008104:	4ab7      	ldr	r2, [pc, #732]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800810a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800810c:	e00c      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	3304      	adds	r3, #4
 8008112:	2102      	movs	r1, #2
 8008114:	4618      	mov	r0, r3
 8008116:	f000 fefd 	bl	8008f14 <RCCEx_PLL2_Config>
 800811a:	4603      	mov	r3, r0
 800811c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800811e:	e003      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	75fb      	strb	r3, [r7, #23]
      break;
 8008124:	e000      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008128:	7dfb      	ldrb	r3, [r7, #23]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d109      	bne.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800812e:	4bad      	ldr	r3, [pc, #692]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008132:	f023 0203 	bic.w	r2, r3, #3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800813a:	49aa      	ldr	r1, [pc, #680]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800813c:	4313      	orrs	r3, r2
 800813e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008140:	e001      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008142:	7dfb      	ldrb	r3, [r7, #23]
 8008144:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800814e:	2b00      	cmp	r3, #0
 8008150:	f000 8086 	beq.w	8008260 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008154:	4ba4      	ldr	r3, [pc, #656]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4aa3      	ldr	r2, [pc, #652]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800815a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800815e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008160:	f7fb fb20 	bl	80037a4 <HAL_GetTick>
 8008164:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008166:	e009      	b.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008168:	f7fb fb1c 	bl	80037a4 <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	2b64      	cmp	r3, #100	; 0x64
 8008174:	d902      	bls.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	75fb      	strb	r3, [r7, #23]
        break;
 800817a:	e005      	b.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800817c:	4b9a      	ldr	r3, [pc, #616]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008184:	2b00      	cmp	r3, #0
 8008186:	d0ef      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008188:	7dfb      	ldrb	r3, [r7, #23]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d166      	bne.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800818e:	4b95      	ldr	r3, [pc, #596]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008190:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008198:	4053      	eors	r3, r2
 800819a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d013      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80081a2:	4b90      	ldr	r3, [pc, #576]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081aa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80081ac:	4b8d      	ldr	r3, [pc, #564]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b0:	4a8c      	ldr	r2, [pc, #560]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081b6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80081b8:	4b8a      	ldr	r3, [pc, #552]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081bc:	4a89      	ldr	r2, [pc, #548]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081c2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80081c4:	4a87      	ldr	r2, [pc, #540]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80081d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081d4:	d115      	bne.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081d6:	f7fb fae5 	bl	80037a4 <HAL_GetTick>
 80081da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081dc:	e00b      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081de:	f7fb fae1 	bl	80037a4 <HAL_GetTick>
 80081e2:	4602      	mov	r2, r0
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d902      	bls.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80081f0:	2303      	movs	r3, #3
 80081f2:	75fb      	strb	r3, [r7, #23]
            break;
 80081f4:	e005      	b.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081f6:	4b7b      	ldr	r3, [pc, #492]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081fa:	f003 0302 	and.w	r3, r3, #2
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d0ed      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008202:	7dfb      	ldrb	r3, [r7, #23]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d126      	bne.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800820e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008212:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008216:	d10d      	bne.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008218:	4b72      	ldr	r3, [pc, #456]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008226:	0919      	lsrs	r1, r3, #4
 8008228:	4b70      	ldr	r3, [pc, #448]	; (80083ec <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800822a:	400b      	ands	r3, r1
 800822c:	496d      	ldr	r1, [pc, #436]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800822e:	4313      	orrs	r3, r2
 8008230:	610b      	str	r3, [r1, #16]
 8008232:	e005      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008234:	4b6b      	ldr	r3, [pc, #428]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	4a6a      	ldr	r2, [pc, #424]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800823a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800823e:	6113      	str	r3, [r2, #16]
 8008240:	4b68      	ldr	r3, [pc, #416]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008242:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800824a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800824e:	4965      	ldr	r1, [pc, #404]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008250:	4313      	orrs	r3, r2
 8008252:	670b      	str	r3, [r1, #112]	; 0x70
 8008254:	e004      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008256:	7dfb      	ldrb	r3, [r7, #23]
 8008258:	75bb      	strb	r3, [r7, #22]
 800825a:	e001      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800825c:	7dfb      	ldrb	r3, [r7, #23]
 800825e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 0301 	and.w	r3, r3, #1
 8008268:	2b00      	cmp	r3, #0
 800826a:	d07e      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008270:	2b28      	cmp	r3, #40	; 0x28
 8008272:	d867      	bhi.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008274:	a201      	add	r2, pc, #4	; (adr r2, 800827c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827a:	bf00      	nop
 800827c:	0800834b 	.word	0x0800834b
 8008280:	08008345 	.word	0x08008345
 8008284:	08008345 	.word	0x08008345
 8008288:	08008345 	.word	0x08008345
 800828c:	08008345 	.word	0x08008345
 8008290:	08008345 	.word	0x08008345
 8008294:	08008345 	.word	0x08008345
 8008298:	08008345 	.word	0x08008345
 800829c:	08008321 	.word	0x08008321
 80082a0:	08008345 	.word	0x08008345
 80082a4:	08008345 	.word	0x08008345
 80082a8:	08008345 	.word	0x08008345
 80082ac:	08008345 	.word	0x08008345
 80082b0:	08008345 	.word	0x08008345
 80082b4:	08008345 	.word	0x08008345
 80082b8:	08008345 	.word	0x08008345
 80082bc:	08008333 	.word	0x08008333
 80082c0:	08008345 	.word	0x08008345
 80082c4:	08008345 	.word	0x08008345
 80082c8:	08008345 	.word	0x08008345
 80082cc:	08008345 	.word	0x08008345
 80082d0:	08008345 	.word	0x08008345
 80082d4:	08008345 	.word	0x08008345
 80082d8:	08008345 	.word	0x08008345
 80082dc:	0800834b 	.word	0x0800834b
 80082e0:	08008345 	.word	0x08008345
 80082e4:	08008345 	.word	0x08008345
 80082e8:	08008345 	.word	0x08008345
 80082ec:	08008345 	.word	0x08008345
 80082f0:	08008345 	.word	0x08008345
 80082f4:	08008345 	.word	0x08008345
 80082f8:	08008345 	.word	0x08008345
 80082fc:	0800834b 	.word	0x0800834b
 8008300:	08008345 	.word	0x08008345
 8008304:	08008345 	.word	0x08008345
 8008308:	08008345 	.word	0x08008345
 800830c:	08008345 	.word	0x08008345
 8008310:	08008345 	.word	0x08008345
 8008314:	08008345 	.word	0x08008345
 8008318:	08008345 	.word	0x08008345
 800831c:	0800834b 	.word	0x0800834b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	3304      	adds	r3, #4
 8008324:	2101      	movs	r1, #1
 8008326:	4618      	mov	r0, r3
 8008328:	f000 fdf4 	bl	8008f14 <RCCEx_PLL2_Config>
 800832c:	4603      	mov	r3, r0
 800832e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008330:	e00c      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	3324      	adds	r3, #36	; 0x24
 8008336:	2101      	movs	r1, #1
 8008338:	4618      	mov	r0, r3
 800833a:	f000 fe9d 	bl	8009078 <RCCEx_PLL3_Config>
 800833e:	4603      	mov	r3, r0
 8008340:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008342:	e003      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	75fb      	strb	r3, [r7, #23]
      break;
 8008348:	e000      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800834a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800834c:	7dfb      	ldrb	r3, [r7, #23]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d109      	bne.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008352:	4b24      	ldr	r3, [pc, #144]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008356:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800835e:	4921      	ldr	r1, [pc, #132]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008360:	4313      	orrs	r3, r2
 8008362:	654b      	str	r3, [r1, #84]	; 0x54
 8008364:	e001      	b.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008366:	7dfb      	ldrb	r3, [r7, #23]
 8008368:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 0302 	and.w	r3, r3, #2
 8008372:	2b00      	cmp	r3, #0
 8008374:	d03e      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800837a:	2b05      	cmp	r3, #5
 800837c:	d820      	bhi.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800837e:	a201      	add	r2, pc, #4	; (adr r2, 8008384 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008384:	080083c7 	.word	0x080083c7
 8008388:	0800839d 	.word	0x0800839d
 800838c:	080083af 	.word	0x080083af
 8008390:	080083c7 	.word	0x080083c7
 8008394:	080083c7 	.word	0x080083c7
 8008398:	080083c7 	.word	0x080083c7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	3304      	adds	r3, #4
 80083a0:	2101      	movs	r1, #1
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 fdb6 	bl	8008f14 <RCCEx_PLL2_Config>
 80083a8:	4603      	mov	r3, r0
 80083aa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80083ac:	e00c      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	3324      	adds	r3, #36	; 0x24
 80083b2:	2101      	movs	r1, #1
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 fe5f 	bl	8009078 <RCCEx_PLL3_Config>
 80083ba:	4603      	mov	r3, r0
 80083bc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80083be:	e003      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	75fb      	strb	r3, [r7, #23]
      break;
 80083c4:	e000      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80083c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083c8:	7dfb      	ldrb	r3, [r7, #23]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d110      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80083ce:	4b05      	ldr	r3, [pc, #20]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d2:	f023 0207 	bic.w	r2, r3, #7
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083da:	4902      	ldr	r1, [pc, #8]	; (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083dc:	4313      	orrs	r3, r2
 80083de:	654b      	str	r3, [r1, #84]	; 0x54
 80083e0:	e008      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80083e2:	bf00      	nop
 80083e4:	58024400 	.word	0x58024400
 80083e8:	58024800 	.word	0x58024800
 80083ec:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083f0:	7dfb      	ldrb	r3, [r7, #23]
 80083f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0304 	and.w	r3, r3, #4
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d039      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008406:	2b05      	cmp	r3, #5
 8008408:	d820      	bhi.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800840a:	a201      	add	r2, pc, #4	; (adr r2, 8008410 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800840c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008410:	08008453 	.word	0x08008453
 8008414:	08008429 	.word	0x08008429
 8008418:	0800843b 	.word	0x0800843b
 800841c:	08008453 	.word	0x08008453
 8008420:	08008453 	.word	0x08008453
 8008424:	08008453 	.word	0x08008453
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	3304      	adds	r3, #4
 800842c:	2101      	movs	r1, #1
 800842e:	4618      	mov	r0, r3
 8008430:	f000 fd70 	bl	8008f14 <RCCEx_PLL2_Config>
 8008434:	4603      	mov	r3, r0
 8008436:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008438:	e00c      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	3324      	adds	r3, #36	; 0x24
 800843e:	2101      	movs	r1, #1
 8008440:	4618      	mov	r0, r3
 8008442:	f000 fe19 	bl	8009078 <RCCEx_PLL3_Config>
 8008446:	4603      	mov	r3, r0
 8008448:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800844a:	e003      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	75fb      	strb	r3, [r7, #23]
      break;
 8008450:	e000      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008452:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008454:	7dfb      	ldrb	r3, [r7, #23]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10a      	bne.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800845a:	4bb7      	ldr	r3, [pc, #732]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800845c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800845e:	f023 0207 	bic.w	r2, r3, #7
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008468:	49b3      	ldr	r1, [pc, #716]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800846a:	4313      	orrs	r3, r2
 800846c:	658b      	str	r3, [r1, #88]	; 0x58
 800846e:	e001      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008470:	7dfb      	ldrb	r3, [r7, #23]
 8008472:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0320 	and.w	r3, r3, #32
 800847c:	2b00      	cmp	r3, #0
 800847e:	d04b      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008486:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800848a:	d02e      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800848c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008490:	d828      	bhi.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008496:	d02a      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800849c:	d822      	bhi.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800849e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084a2:	d026      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80084a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084a8:	d81c      	bhi.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80084aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084ae:	d010      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80084b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084b4:	d816      	bhi.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d01d      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80084ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084be:	d111      	bne.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	3304      	adds	r3, #4
 80084c4:	2100      	movs	r1, #0
 80084c6:	4618      	mov	r0, r3
 80084c8:	f000 fd24 	bl	8008f14 <RCCEx_PLL2_Config>
 80084cc:	4603      	mov	r3, r0
 80084ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80084d0:	e012      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	3324      	adds	r3, #36	; 0x24
 80084d6:	2102      	movs	r1, #2
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 fdcd 	bl	8009078 <RCCEx_PLL3_Config>
 80084de:	4603      	mov	r3, r0
 80084e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80084e2:	e009      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	75fb      	strb	r3, [r7, #23]
      break;
 80084e8:	e006      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80084ea:	bf00      	nop
 80084ec:	e004      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80084ee:	bf00      	nop
 80084f0:	e002      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80084f2:	bf00      	nop
 80084f4:	e000      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80084f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084f8:	7dfb      	ldrb	r3, [r7, #23]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10a      	bne.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084fe:	4b8e      	ldr	r3, [pc, #568]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008502:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800850c:	498a      	ldr	r1, [pc, #552]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800850e:	4313      	orrs	r3, r2
 8008510:	654b      	str	r3, [r1, #84]	; 0x54
 8008512:	e001      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008514:	7dfb      	ldrb	r3, [r7, #23]
 8008516:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008520:	2b00      	cmp	r3, #0
 8008522:	d04b      	beq.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800852a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800852e:	d02e      	beq.n	800858e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008530:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008534:	d828      	bhi.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800853a:	d02a      	beq.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800853c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008540:	d822      	bhi.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008542:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008546:	d026      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008548:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800854c:	d81c      	bhi.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800854e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008552:	d010      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008554:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008558:	d816      	bhi.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800855a:	2b00      	cmp	r3, #0
 800855c:	d01d      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800855e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008562:	d111      	bne.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	3304      	adds	r3, #4
 8008568:	2100      	movs	r1, #0
 800856a:	4618      	mov	r0, r3
 800856c:	f000 fcd2 	bl	8008f14 <RCCEx_PLL2_Config>
 8008570:	4603      	mov	r3, r0
 8008572:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008574:	e012      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	3324      	adds	r3, #36	; 0x24
 800857a:	2102      	movs	r1, #2
 800857c:	4618      	mov	r0, r3
 800857e:	f000 fd7b 	bl	8009078 <RCCEx_PLL3_Config>
 8008582:	4603      	mov	r3, r0
 8008584:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008586:	e009      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	75fb      	strb	r3, [r7, #23]
      break;
 800858c:	e006      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800858e:	bf00      	nop
 8008590:	e004      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008592:	bf00      	nop
 8008594:	e002      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008596:	bf00      	nop
 8008598:	e000      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800859a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800859c:	7dfb      	ldrb	r3, [r7, #23]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10a      	bne.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80085a2:	4b65      	ldr	r3, [pc, #404]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80085a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085b0:	4961      	ldr	r1, [pc, #388]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80085b2:	4313      	orrs	r3, r2
 80085b4:	658b      	str	r3, [r1, #88]	; 0x58
 80085b6:	e001      	b.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085b8:	7dfb      	ldrb	r3, [r7, #23]
 80085ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d04b      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085ce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80085d2:	d02e      	beq.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80085d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80085d8:	d828      	bhi.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80085da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085de:	d02a      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80085e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085e4:	d822      	bhi.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80085e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80085ea:	d026      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80085ec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80085f0:	d81c      	bhi.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80085f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085f6:	d010      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80085f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085fc:	d816      	bhi.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d01d      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008606:	d111      	bne.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	3304      	adds	r3, #4
 800860c:	2100      	movs	r1, #0
 800860e:	4618      	mov	r0, r3
 8008610:	f000 fc80 	bl	8008f14 <RCCEx_PLL2_Config>
 8008614:	4603      	mov	r3, r0
 8008616:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008618:	e012      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	3324      	adds	r3, #36	; 0x24
 800861e:	2102      	movs	r1, #2
 8008620:	4618      	mov	r0, r3
 8008622:	f000 fd29 	bl	8009078 <RCCEx_PLL3_Config>
 8008626:	4603      	mov	r3, r0
 8008628:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800862a:	e009      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	75fb      	strb	r3, [r7, #23]
      break;
 8008630:	e006      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008632:	bf00      	nop
 8008634:	e004      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008636:	bf00      	nop
 8008638:	e002      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800863a:	bf00      	nop
 800863c:	e000      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800863e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008640:	7dfb      	ldrb	r3, [r7, #23]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10a      	bne.n	800865c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008646:	4b3c      	ldr	r3, [pc, #240]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800864a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008654:	4938      	ldr	r1, [pc, #224]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008656:	4313      	orrs	r3, r2
 8008658:	658b      	str	r3, [r1, #88]	; 0x58
 800865a:	e001      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800865c:	7dfb      	ldrb	r3, [r7, #23]
 800865e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0308 	and.w	r3, r3, #8
 8008668:	2b00      	cmp	r3, #0
 800866a:	d01a      	beq.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008676:	d10a      	bne.n	800868e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	3324      	adds	r3, #36	; 0x24
 800867c:	2102      	movs	r1, #2
 800867e:	4618      	mov	r0, r3
 8008680:	f000 fcfa 	bl	8009078 <RCCEx_PLL3_Config>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d001      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800868e:	4b2a      	ldr	r3, [pc, #168]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008692:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800869c:	4926      	ldr	r1, [pc, #152]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800869e:	4313      	orrs	r3, r2
 80086a0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 0310 	and.w	r3, r3, #16
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d01a      	beq.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086b8:	d10a      	bne.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	3324      	adds	r3, #36	; 0x24
 80086be:	2102      	movs	r1, #2
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 fcd9 	bl	8009078 <RCCEx_PLL3_Config>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d001      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80086d0:	4b19      	ldr	r3, [pc, #100]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80086d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086de:	4916      	ldr	r1, [pc, #88]	; (8008738 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80086e0:	4313      	orrs	r3, r2
 80086e2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d036      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80086f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086fa:	d01f      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80086fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008700:	d817      	bhi.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008702:	2b00      	cmp	r3, #0
 8008704:	d003      	beq.n	800870e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800870a:	d009      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800870c:	e011      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	3304      	adds	r3, #4
 8008712:	2100      	movs	r1, #0
 8008714:	4618      	mov	r0, r3
 8008716:	f000 fbfd 	bl	8008f14 <RCCEx_PLL2_Config>
 800871a:	4603      	mov	r3, r0
 800871c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800871e:	e00e      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	3324      	adds	r3, #36	; 0x24
 8008724:	2102      	movs	r1, #2
 8008726:	4618      	mov	r0, r3
 8008728:	f000 fca6 	bl	8009078 <RCCEx_PLL3_Config>
 800872c:	4603      	mov	r3, r0
 800872e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008730:	e005      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	75fb      	strb	r3, [r7, #23]
      break;
 8008736:	e002      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008738:	58024400 	.word	0x58024400
      break;
 800873c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800873e:	7dfb      	ldrb	r3, [r7, #23]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10a      	bne.n	800875a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008744:	4b93      	ldr	r3, [pc, #588]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008748:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008752:	4990      	ldr	r1, [pc, #576]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008754:	4313      	orrs	r3, r2
 8008756:	658b      	str	r3, [r1, #88]	; 0x58
 8008758:	e001      	b.n	800875e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800875a:	7dfb      	ldrb	r3, [r7, #23]
 800875c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d033      	beq.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008770:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008774:	d01c      	beq.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008776:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800877a:	d816      	bhi.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800877c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008780:	d003      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008782:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008786:	d007      	beq.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008788:	e00f      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800878a:	4b82      	ldr	r3, [pc, #520]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800878c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878e:	4a81      	ldr	r2, [pc, #516]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008794:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008796:	e00c      	b.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	3324      	adds	r3, #36	; 0x24
 800879c:	2101      	movs	r1, #1
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 fc6a 	bl	8009078 <RCCEx_PLL3_Config>
 80087a4:	4603      	mov	r3, r0
 80087a6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80087a8:	e003      	b.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	75fb      	strb	r3, [r7, #23]
      break;
 80087ae:	e000      	b.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80087b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087b2:	7dfb      	ldrb	r3, [r7, #23]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10a      	bne.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087b8:	4b76      	ldr	r3, [pc, #472]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087c6:	4973      	ldr	r1, [pc, #460]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087c8:	4313      	orrs	r3, r2
 80087ca:	654b      	str	r3, [r1, #84]	; 0x54
 80087cc:	e001      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ce:	7dfb      	ldrb	r3, [r7, #23]
 80087d0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d029      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80087e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087ea:	d007      	beq.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80087ec:	e00f      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087ee:	4b69      	ldr	r3, [pc, #420]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f2:	4a68      	ldr	r2, [pc, #416]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80087fa:	e00b      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	3304      	adds	r3, #4
 8008800:	2102      	movs	r1, #2
 8008802:	4618      	mov	r0, r3
 8008804:	f000 fb86 	bl	8008f14 <RCCEx_PLL2_Config>
 8008808:	4603      	mov	r3, r0
 800880a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800880c:	e002      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	75fb      	strb	r3, [r7, #23]
      break;
 8008812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008814:	7dfb      	ldrb	r3, [r7, #23]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d109      	bne.n	800882e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800881a:	4b5e      	ldr	r3, [pc, #376]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800881c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800881e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008826:	495b      	ldr	r1, [pc, #364]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008828:	4313      	orrs	r3, r2
 800882a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800882c:	e001      	b.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800882e:	7dfb      	ldrb	r3, [r7, #23]
 8008830:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00a      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	3324      	adds	r3, #36	; 0x24
 8008842:	2102      	movs	r1, #2
 8008844:	4618      	mov	r0, r3
 8008846:	f000 fc17 	bl	8009078 <RCCEx_PLL3_Config>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d001      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800885c:	2b00      	cmp	r3, #0
 800885e:	d030      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008864:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008868:	d017      	beq.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800886a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800886e:	d811      	bhi.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008874:	d013      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800887a:	d80b      	bhi.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800887c:	2b00      	cmp	r3, #0
 800887e:	d010      	beq.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008884:	d106      	bne.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008886:	4b43      	ldr	r3, [pc, #268]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888a:	4a42      	ldr	r2, [pc, #264]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800888c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008890:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008892:	e007      	b.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	75fb      	strb	r3, [r7, #23]
      break;
 8008898:	e004      	b.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800889a:	bf00      	nop
 800889c:	e002      	b.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800889e:	bf00      	nop
 80088a0:	e000      	b.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80088a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088a4:	7dfb      	ldrb	r3, [r7, #23]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d109      	bne.n	80088be <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80088aa:	4b3a      	ldr	r3, [pc, #232]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088b6:	4937      	ldr	r1, [pc, #220]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088b8:	4313      	orrs	r3, r2
 80088ba:	654b      	str	r3, [r1, #84]	; 0x54
 80088bc:	e001      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d008      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80088ce:	4b31      	ldr	r3, [pc, #196]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088da:	492e      	ldr	r1, [pc, #184]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088dc:	4313      	orrs	r3, r2
 80088de:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d009      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80088ec:	4b29      	ldr	r3, [pc, #164]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80088fa:	4926      	ldr	r1, [pc, #152]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088fc:	4313      	orrs	r3, r2
 80088fe:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008908:	2b00      	cmp	r3, #0
 800890a:	d008      	beq.n	800891e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800890c:	4b21      	ldr	r3, [pc, #132]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800890e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008910:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008918:	491e      	ldr	r1, [pc, #120]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800891a:	4313      	orrs	r3, r2
 800891c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00d      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800892a:	4b1a      	ldr	r3, [pc, #104]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	4a19      	ldr	r2, [pc, #100]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008930:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008934:	6113      	str	r3, [r2, #16]
 8008936:	4b17      	ldr	r3, [pc, #92]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008938:	691a      	ldr	r2, [r3, #16]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008940:	4914      	ldr	r1, [pc, #80]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008942:	4313      	orrs	r3, r2
 8008944:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	da08      	bge.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800894e:	4b11      	ldr	r3, [pc, #68]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008952:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800895a:	490e      	ldr	r1, [pc, #56]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800895c:	4313      	orrs	r3, r2
 800895e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008968:	2b00      	cmp	r3, #0
 800896a:	d009      	beq.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800896c:	4b09      	ldr	r3, [pc, #36]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800896e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008970:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800897a:	4906      	ldr	r1, [pc, #24]	; (8008994 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800897c:	4313      	orrs	r3, r2
 800897e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008980:	7dbb      	ldrb	r3, [r7, #22]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d101      	bne.n	800898a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	e000      	b.n	800898c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
}
 800898c:	4618      	mov	r0, r3
 800898e:	3718      	adds	r7, #24
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	58024400 	.word	0x58024400

08008998 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800899c:	f7ff f81e 	bl	80079dc <HAL_RCC_GetHCLKFreq>
 80089a0:	4602      	mov	r2, r0
 80089a2:	4b06      	ldr	r3, [pc, #24]	; (80089bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	091b      	lsrs	r3, r3, #4
 80089a8:	f003 0307 	and.w	r3, r3, #7
 80089ac:	4904      	ldr	r1, [pc, #16]	; (80089c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80089ae:	5ccb      	ldrb	r3, [r1, r3]
 80089b0:	f003 031f 	and.w	r3, r3, #31
 80089b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	58024400 	.word	0x58024400
 80089c0:	0800daa8 	.word	0x0800daa8

080089c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b089      	sub	sp, #36	; 0x24
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089cc:	4ba1      	ldr	r3, [pc, #644]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d0:	f003 0303 	and.w	r3, r3, #3
 80089d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80089d6:	4b9f      	ldr	r3, [pc, #636]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089da:	0b1b      	lsrs	r3, r3, #12
 80089dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80089e2:	4b9c      	ldr	r3, [pc, #624]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e6:	091b      	lsrs	r3, r3, #4
 80089e8:	f003 0301 	and.w	r3, r3, #1
 80089ec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80089ee:	4b99      	ldr	r3, [pc, #612]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f2:	08db      	lsrs	r3, r3, #3
 80089f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	fb02 f303 	mul.w	r3, r2, r3
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f000 8111 	beq.w	8008c34 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	f000 8083 	beq.w	8008b20 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	f200 80a1 	bhi.w	8008b64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d003      	beq.n	8008a30 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d056      	beq.n	8008adc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008a2e:	e099      	b.n	8008b64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a30:	4b88      	ldr	r3, [pc, #544]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 0320 	and.w	r3, r3, #32
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d02d      	beq.n	8008a98 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a3c:	4b85      	ldr	r3, [pc, #532]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	08db      	lsrs	r3, r3, #3
 8008a42:	f003 0303 	and.w	r3, r3, #3
 8008a46:	4a84      	ldr	r2, [pc, #528]	; (8008c58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008a48:	fa22 f303 	lsr.w	r3, r2, r3
 8008a4c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	ee07 3a90 	vmov	s15, r3
 8008a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	ee07 3a90 	vmov	s15, r3
 8008a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a66:	4b7b      	ldr	r3, [pc, #492]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a6e:	ee07 3a90 	vmov	s15, r3
 8008a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008c5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a92:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008a96:	e087      	b.n	8008ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	ee07 3a90 	vmov	s15, r3
 8008a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aa2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008c60 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aaa:	4b6a      	ldr	r3, [pc, #424]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ab2:	ee07 3a90 	vmov	s15, r3
 8008ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8008abe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008c5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ad6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ada:	e065      	b.n	8008ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	ee07 3a90 	vmov	s15, r3
 8008ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008c64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aee:	4b59      	ldr	r3, [pc, #356]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008af6:	ee07 3a90 	vmov	s15, r3
 8008afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b02:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008c5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b1e:	e043      	b.n	8008ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	ee07 3a90 	vmov	s15, r3
 8008b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008c68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b32:	4b48      	ldr	r3, [pc, #288]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b3a:	ee07 3a90 	vmov	s15, r3
 8008b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b46:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008c5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b62:	e021      	b.n	8008ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	ee07 3a90 	vmov	s15, r3
 8008b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008c64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b76:	4b37      	ldr	r3, [pc, #220]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b7e:	ee07 3a90 	vmov	s15, r3
 8008b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008c5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ba6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008ba8:	4b2a      	ldr	r3, [pc, #168]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bac:	0a5b      	lsrs	r3, r3, #9
 8008bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bb2:	ee07 3a90 	vmov	s15, r3
 8008bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bce:	ee17 2a90 	vmov	r2, s15
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008bd6:	4b1f      	ldr	r3, [pc, #124]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bda:	0c1b      	lsrs	r3, r3, #16
 8008bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008be0:	ee07 3a90 	vmov	s15, r3
 8008be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bfc:	ee17 2a90 	vmov	r2, s15
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008c04:	4b13      	ldr	r3, [pc, #76]	; (8008c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c08:	0e1b      	lsrs	r3, r3, #24
 8008c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c0e:	ee07 3a90 	vmov	s15, r3
 8008c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c2a:	ee17 2a90 	vmov	r2, s15
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008c32:	e008      	b.n	8008c46 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	609a      	str	r2, [r3, #8]
}
 8008c46:	bf00      	nop
 8008c48:	3724      	adds	r7, #36	; 0x24
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	58024400 	.word	0x58024400
 8008c58:	03d09000 	.word	0x03d09000
 8008c5c:	46000000 	.word	0x46000000
 8008c60:	4c742400 	.word	0x4c742400
 8008c64:	4a742400 	.word	0x4a742400
 8008c68:	4bbebc20 	.word	0x4bbebc20

08008c6c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b089      	sub	sp, #36	; 0x24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c74:	4ba1      	ldr	r3, [pc, #644]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c78:	f003 0303 	and.w	r3, r3, #3
 8008c7c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008c7e:	4b9f      	ldr	r3, [pc, #636]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c82:	0d1b      	lsrs	r3, r3, #20
 8008c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c88:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008c8a:	4b9c      	ldr	r3, [pc, #624]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8e:	0a1b      	lsrs	r3, r3, #8
 8008c90:	f003 0301 	and.w	r3, r3, #1
 8008c94:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008c96:	4b99      	ldr	r3, [pc, #612]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c9a:	08db      	lsrs	r3, r3, #3
 8008c9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	fb02 f303 	mul.w	r3, r2, r3
 8008ca6:	ee07 3a90 	vmov	s15, r3
 8008caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f000 8111 	beq.w	8008edc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	f000 8083 	beq.w	8008dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	f200 80a1 	bhi.w	8008e0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d003      	beq.n	8008cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d056      	beq.n	8008d84 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008cd6:	e099      	b.n	8008e0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cd8:	4b88      	ldr	r3, [pc, #544]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0320 	and.w	r3, r3, #32
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d02d      	beq.n	8008d40 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ce4:	4b85      	ldr	r3, [pc, #532]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	08db      	lsrs	r3, r3, #3
 8008cea:	f003 0303 	and.w	r3, r3, #3
 8008cee:	4a84      	ldr	r2, [pc, #528]	; (8008f00 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8008cf4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	ee07 3a90 	vmov	s15, r3
 8008cfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	ee07 3a90 	vmov	s15, r3
 8008d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d0e:	4b7b      	ldr	r3, [pc, #492]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d16:	ee07 3a90 	vmov	s15, r3
 8008d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d22:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008f04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d3a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008d3e:	e087      	b.n	8008e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	ee07 3a90 	vmov	s15, r3
 8008d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d4a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008f08 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d52:	4b6a      	ldr	r3, [pc, #424]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d5a:	ee07 3a90 	vmov	s15, r3
 8008d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d66:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008f04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d82:	e065      	b.n	8008e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	ee07 3a90 	vmov	s15, r3
 8008d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d8e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008f0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d96:	4b59      	ldr	r3, [pc, #356]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d9e:	ee07 3a90 	vmov	s15, r3
 8008da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008daa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008f04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008dc6:	e043      	b.n	8008e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	ee07 3a90 	vmov	s15, r3
 8008dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008f10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dda:	4b48      	ldr	r3, [pc, #288]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008de2:	ee07 3a90 	vmov	s15, r3
 8008de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008f04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e0a:	e021      	b.n	8008e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	ee07 3a90 	vmov	s15, r3
 8008e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e16:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008f0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e1e:	4b37      	ldr	r3, [pc, #220]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e26:	ee07 3a90 	vmov	s15, r3
 8008e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e32:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008f04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e4e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008e50:	4b2a      	ldr	r3, [pc, #168]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e54:	0a5b      	lsrs	r3, r3, #9
 8008e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e5a:	ee07 3a90 	vmov	s15, r3
 8008e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e76:	ee17 2a90 	vmov	r2, s15
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008e7e:	4b1f      	ldr	r3, [pc, #124]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e82:	0c1b      	lsrs	r3, r3, #16
 8008e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e88:	ee07 3a90 	vmov	s15, r3
 8008e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e98:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ea4:	ee17 2a90 	vmov	r2, s15
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008eac:	4b13      	ldr	r3, [pc, #76]	; (8008efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb0:	0e1b      	lsrs	r3, r3, #24
 8008eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eb6:	ee07 3a90 	vmov	s15, r3
 8008eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ebe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ec2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ec6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ed2:	ee17 2a90 	vmov	r2, s15
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008eda:	e008      	b.n	8008eee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	609a      	str	r2, [r3, #8]
}
 8008eee:	bf00      	nop
 8008ef0:	3724      	adds	r7, #36	; 0x24
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	58024400 	.word	0x58024400
 8008f00:	03d09000 	.word	0x03d09000
 8008f04:	46000000 	.word	0x46000000
 8008f08:	4c742400 	.word	0x4c742400
 8008f0c:	4a742400 	.word	0x4a742400
 8008f10:	4bbebc20 	.word	0x4bbebc20

08008f14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f22:	4b53      	ldr	r3, [pc, #332]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 8008f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f26:	f003 0303 	and.w	r3, r3, #3
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	d101      	bne.n	8008f32 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e099      	b.n	8009066 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008f32:	4b4f      	ldr	r3, [pc, #316]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a4e      	ldr	r2, [pc, #312]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 8008f38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008f3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f3e:	f7fa fc31 	bl	80037a4 <HAL_GetTick>
 8008f42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f44:	e008      	b.n	8008f58 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008f46:	f7fa fc2d 	bl	80037a4 <HAL_GetTick>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	1ad3      	subs	r3, r2, r3
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d901      	bls.n	8008f58 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e086      	b.n	8009066 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f58:	4b45      	ldr	r3, [pc, #276]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1f0      	bne.n	8008f46 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008f64:	4b42      	ldr	r3, [pc, #264]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 8008f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f68:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	031b      	lsls	r3, r3, #12
 8008f72:	493f      	ldr	r1, [pc, #252]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 8008f74:	4313      	orrs	r3, r2
 8008f76:	628b      	str	r3, [r1, #40]	; 0x28
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	3b01      	subs	r3, #1
 8008f88:	025b      	lsls	r3, r3, #9
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	431a      	orrs	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	3b01      	subs	r3, #1
 8008f94:	041b      	lsls	r3, r3, #16
 8008f96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f9a:	431a      	orrs	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	061b      	lsls	r3, r3, #24
 8008fa4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008fa8:	4931      	ldr	r1, [pc, #196]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 8008faa:	4313      	orrs	r3, r2
 8008fac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008fae:	4b30      	ldr	r3, [pc, #192]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 8008fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	695b      	ldr	r3, [r3, #20]
 8008fba:	492d      	ldr	r1, [pc, #180]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008fc0:	4b2b      	ldr	r3, [pc, #172]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 8008fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc4:	f023 0220 	bic.w	r2, r3, #32
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	4928      	ldr	r1, [pc, #160]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008fd2:	4b27      	ldr	r3, [pc, #156]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 8008fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd6:	4a26      	ldr	r2, [pc, #152]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 8008fd8:	f023 0310 	bic.w	r3, r3, #16
 8008fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008fde:	4b24      	ldr	r3, [pc, #144]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 8008fe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fe2:	4b24      	ldr	r3, [pc, #144]	; (8009074 <RCCEx_PLL2_Config+0x160>)
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	69d2      	ldr	r2, [r2, #28]
 8008fea:	00d2      	lsls	r2, r2, #3
 8008fec:	4920      	ldr	r1, [pc, #128]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008ff2:	4b1f      	ldr	r3, [pc, #124]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 8008ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff6:	4a1e      	ldr	r2, [pc, #120]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 8008ff8:	f043 0310 	orr.w	r3, r3, #16
 8008ffc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d106      	bne.n	8009012 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009004:	4b1a      	ldr	r3, [pc, #104]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 8009006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009008:	4a19      	ldr	r2, [pc, #100]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 800900a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800900e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009010:	e00f      	b.n	8009032 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d106      	bne.n	8009026 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009018:	4b15      	ldr	r3, [pc, #84]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 800901a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800901c:	4a14      	ldr	r2, [pc, #80]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 800901e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009022:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009024:	e005      	b.n	8009032 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009026:	4b12      	ldr	r3, [pc, #72]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 8009028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902a:	4a11      	ldr	r2, [pc, #68]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 800902c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009030:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009032:	4b0f      	ldr	r3, [pc, #60]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a0e      	ldr	r2, [pc, #56]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 8009038:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800903c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800903e:	f7fa fbb1 	bl	80037a4 <HAL_GetTick>
 8009042:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009044:	e008      	b.n	8009058 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009046:	f7fa fbad 	bl	80037a4 <HAL_GetTick>
 800904a:	4602      	mov	r2, r0
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	2b02      	cmp	r3, #2
 8009052:	d901      	bls.n	8009058 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009054:	2303      	movs	r3, #3
 8009056:	e006      	b.n	8009066 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009058:	4b05      	ldr	r3, [pc, #20]	; (8009070 <RCCEx_PLL2_Config+0x15c>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d0f0      	beq.n	8009046 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009064:	7bfb      	ldrb	r3, [r7, #15]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	58024400 	.word	0x58024400
 8009074:	ffff0007 	.word	0xffff0007

08009078 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009082:	2300      	movs	r3, #0
 8009084:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009086:	4b53      	ldr	r3, [pc, #332]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 8009088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800908a:	f003 0303 	and.w	r3, r3, #3
 800908e:	2b03      	cmp	r3, #3
 8009090:	d101      	bne.n	8009096 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	e099      	b.n	80091ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009096:	4b4f      	ldr	r3, [pc, #316]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a4e      	ldr	r2, [pc, #312]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 800909c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090a2:	f7fa fb7f 	bl	80037a4 <HAL_GetTick>
 80090a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80090a8:	e008      	b.n	80090bc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80090aa:	f7fa fb7b 	bl	80037a4 <HAL_GetTick>
 80090ae:	4602      	mov	r2, r0
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d901      	bls.n	80090bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80090b8:	2303      	movs	r3, #3
 80090ba:	e086      	b.n	80091ca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80090bc:	4b45      	ldr	r3, [pc, #276]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d1f0      	bne.n	80090aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80090c8:	4b42      	ldr	r3, [pc, #264]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 80090ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090cc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	051b      	lsls	r3, r3, #20
 80090d6:	493f      	ldr	r1, [pc, #252]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 80090d8:	4313      	orrs	r3, r2
 80090da:	628b      	str	r3, [r1, #40]	; 0x28
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	3b01      	subs	r3, #1
 80090e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	3b01      	subs	r3, #1
 80090ec:	025b      	lsls	r3, r3, #9
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	431a      	orrs	r2, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	3b01      	subs	r3, #1
 80090f8:	041b      	lsls	r3, r3, #16
 80090fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80090fe:	431a      	orrs	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	691b      	ldr	r3, [r3, #16]
 8009104:	3b01      	subs	r3, #1
 8009106:	061b      	lsls	r3, r3, #24
 8009108:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800910c:	4931      	ldr	r1, [pc, #196]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 800910e:	4313      	orrs	r3, r2
 8009110:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009112:	4b30      	ldr	r3, [pc, #192]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 8009114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009116:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	492d      	ldr	r1, [pc, #180]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 8009120:	4313      	orrs	r3, r2
 8009122:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009124:	4b2b      	ldr	r3, [pc, #172]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 8009126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009128:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	699b      	ldr	r3, [r3, #24]
 8009130:	4928      	ldr	r1, [pc, #160]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 8009132:	4313      	orrs	r3, r2
 8009134:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009136:	4b27      	ldr	r3, [pc, #156]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 8009138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913a:	4a26      	ldr	r2, [pc, #152]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 800913c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009140:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009142:	4b24      	ldr	r3, [pc, #144]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 8009144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009146:	4b24      	ldr	r3, [pc, #144]	; (80091d8 <RCCEx_PLL3_Config+0x160>)
 8009148:	4013      	ands	r3, r2
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	69d2      	ldr	r2, [r2, #28]
 800914e:	00d2      	lsls	r2, r2, #3
 8009150:	4920      	ldr	r1, [pc, #128]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 8009152:	4313      	orrs	r3, r2
 8009154:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009156:	4b1f      	ldr	r3, [pc, #124]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 8009158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800915a:	4a1e      	ldr	r2, [pc, #120]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 800915c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009160:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d106      	bne.n	8009176 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009168:	4b1a      	ldr	r3, [pc, #104]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 800916a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916c:	4a19      	ldr	r2, [pc, #100]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 800916e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009172:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009174:	e00f      	b.n	8009196 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	2b01      	cmp	r3, #1
 800917a:	d106      	bne.n	800918a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800917c:	4b15      	ldr	r3, [pc, #84]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 800917e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009180:	4a14      	ldr	r2, [pc, #80]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 8009182:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009186:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009188:	e005      	b.n	8009196 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800918a:	4b12      	ldr	r3, [pc, #72]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 800918c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800918e:	4a11      	ldr	r2, [pc, #68]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 8009190:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009194:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009196:	4b0f      	ldr	r3, [pc, #60]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a0e      	ldr	r2, [pc, #56]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 800919c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091a2:	f7fa faff 	bl	80037a4 <HAL_GetTick>
 80091a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80091a8:	e008      	b.n	80091bc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80091aa:	f7fa fafb 	bl	80037a4 <HAL_GetTick>
 80091ae:	4602      	mov	r2, r0
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d901      	bls.n	80091bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80091b8:	2303      	movs	r3, #3
 80091ba:	e006      	b.n	80091ca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80091bc:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <RCCEx_PLL3_Config+0x15c>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d0f0      	beq.n	80091aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80091c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	58024400 	.word	0x58024400
 80091d8:	ffff0007 	.word	0xffff0007

080091dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d101      	bne.n	80091ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e049      	b.n	8009282 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d106      	bne.n	8009208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f841 	bl	800928a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2202      	movs	r2, #2
 800920c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	3304      	adds	r3, #4
 8009218:	4619      	mov	r1, r3
 800921a:	4610      	mov	r0, r2
 800921c:	f000 f9f8 	bl	8009610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3708      	adds	r7, #8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800928a:	b480      	push	{r7}
 800928c:	b083      	sub	sp, #12
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009292:	bf00      	nop
 8009294:	370c      	adds	r7, #12
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
	...

080092a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d001      	beq.n	80092b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	e04f      	b.n	8009358 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2202      	movs	r2, #2
 80092bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	68da      	ldr	r2, [r3, #12]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f042 0201 	orr.w	r2, r2, #1
 80092ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a23      	ldr	r2, [pc, #140]	; (8009364 <HAL_TIM_Base_Start_IT+0xc4>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d01d      	beq.n	8009316 <HAL_TIM_Base_Start_IT+0x76>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092e2:	d018      	beq.n	8009316 <HAL_TIM_Base_Start_IT+0x76>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a1f      	ldr	r2, [pc, #124]	; (8009368 <HAL_TIM_Base_Start_IT+0xc8>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d013      	beq.n	8009316 <HAL_TIM_Base_Start_IT+0x76>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a1e      	ldr	r2, [pc, #120]	; (800936c <HAL_TIM_Base_Start_IT+0xcc>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d00e      	beq.n	8009316 <HAL_TIM_Base_Start_IT+0x76>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a1c      	ldr	r2, [pc, #112]	; (8009370 <HAL_TIM_Base_Start_IT+0xd0>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d009      	beq.n	8009316 <HAL_TIM_Base_Start_IT+0x76>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a1b      	ldr	r2, [pc, #108]	; (8009374 <HAL_TIM_Base_Start_IT+0xd4>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d004      	beq.n	8009316 <HAL_TIM_Base_Start_IT+0x76>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a19      	ldr	r2, [pc, #100]	; (8009378 <HAL_TIM_Base_Start_IT+0xd8>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d115      	bne.n	8009342 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	689a      	ldr	r2, [r3, #8]
 800931c:	4b17      	ldr	r3, [pc, #92]	; (800937c <HAL_TIM_Base_Start_IT+0xdc>)
 800931e:	4013      	ands	r3, r2
 8009320:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2b06      	cmp	r3, #6
 8009326:	d015      	beq.n	8009354 <HAL_TIM_Base_Start_IT+0xb4>
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800932e:	d011      	beq.n	8009354 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f042 0201 	orr.w	r2, r2, #1
 800933e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009340:	e008      	b.n	8009354 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f042 0201 	orr.w	r2, r2, #1
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	e000      	b.n	8009356 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009354:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3714      	adds	r7, #20
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr
 8009364:	40010000 	.word	0x40010000
 8009368:	40000400 	.word	0x40000400
 800936c:	40000800 	.word	0x40000800
 8009370:	40000c00 	.word	0x40000c00
 8009374:	40010400 	.word	0x40010400
 8009378:	40001800 	.word	0x40001800
 800937c:	00010007 	.word	0x00010007

08009380 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	f003 0302 	and.w	r3, r3, #2
 8009392:	2b02      	cmp	r3, #2
 8009394:	d122      	bne.n	80093dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	f003 0302 	and.w	r3, r3, #2
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d11b      	bne.n	80093dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f06f 0202 	mvn.w	r2, #2
 80093ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2201      	movs	r2, #1
 80093b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	f003 0303 	and.w	r3, r3, #3
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d003      	beq.n	80093ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f905 	bl	80095d2 <HAL_TIM_IC_CaptureCallback>
 80093c8:	e005      	b.n	80093d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f8f7 	bl	80095be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f908 	bl	80095e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	691b      	ldr	r3, [r3, #16]
 80093e2:	f003 0304 	and.w	r3, r3, #4
 80093e6:	2b04      	cmp	r3, #4
 80093e8:	d122      	bne.n	8009430 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	f003 0304 	and.w	r3, r3, #4
 80093f4:	2b04      	cmp	r3, #4
 80093f6:	d11b      	bne.n	8009430 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f06f 0204 	mvn.w	r2, #4
 8009400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2202      	movs	r2, #2
 8009406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	699b      	ldr	r3, [r3, #24]
 800940e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009412:	2b00      	cmp	r3, #0
 8009414:	d003      	beq.n	800941e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 f8db 	bl	80095d2 <HAL_TIM_IC_CaptureCallback>
 800941c:	e005      	b.n	800942a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 f8cd 	bl	80095be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f8de 	bl	80095e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	691b      	ldr	r3, [r3, #16]
 8009436:	f003 0308 	and.w	r3, r3, #8
 800943a:	2b08      	cmp	r3, #8
 800943c:	d122      	bne.n	8009484 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	f003 0308 	and.w	r3, r3, #8
 8009448:	2b08      	cmp	r3, #8
 800944a:	d11b      	bne.n	8009484 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f06f 0208 	mvn.w	r2, #8
 8009454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2204      	movs	r2, #4
 800945a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	69db      	ldr	r3, [r3, #28]
 8009462:	f003 0303 	and.w	r3, r3, #3
 8009466:	2b00      	cmp	r3, #0
 8009468:	d003      	beq.n	8009472 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f8b1 	bl	80095d2 <HAL_TIM_IC_CaptureCallback>
 8009470:	e005      	b.n	800947e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f8a3 	bl	80095be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 f8b4 	bl	80095e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	691b      	ldr	r3, [r3, #16]
 800948a:	f003 0310 	and.w	r3, r3, #16
 800948e:	2b10      	cmp	r3, #16
 8009490:	d122      	bne.n	80094d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	f003 0310 	and.w	r3, r3, #16
 800949c:	2b10      	cmp	r3, #16
 800949e:	d11b      	bne.n	80094d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f06f 0210 	mvn.w	r2, #16
 80094a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2208      	movs	r2, #8
 80094ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	69db      	ldr	r3, [r3, #28]
 80094b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d003      	beq.n	80094c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f887 	bl	80095d2 <HAL_TIM_IC_CaptureCallback>
 80094c4:	e005      	b.n	80094d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f879 	bl	80095be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 f88a 	bl	80095e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	f003 0301 	and.w	r3, r3, #1
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d10e      	bne.n	8009504 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	f003 0301 	and.w	r3, r3, #1
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d107      	bne.n	8009504 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f06f 0201 	mvn.w	r2, #1
 80094fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f7f8 ff58 	bl	80023b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800950e:	2b80      	cmp	r3, #128	; 0x80
 8009510:	d10e      	bne.n	8009530 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800951c:	2b80      	cmp	r3, #128	; 0x80
 800951e:	d107      	bne.n	8009530 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f914 	bl	8009758 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800953a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800953e:	d10e      	bne.n	800955e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800954a:	2b80      	cmp	r3, #128	; 0x80
 800954c:	d107      	bne.n	800955e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f907 	bl	800976c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009568:	2b40      	cmp	r3, #64	; 0x40
 800956a:	d10e      	bne.n	800958a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009576:	2b40      	cmp	r3, #64	; 0x40
 8009578:	d107      	bne.n	800958a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f838 	bl	80095fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	691b      	ldr	r3, [r3, #16]
 8009590:	f003 0320 	and.w	r3, r3, #32
 8009594:	2b20      	cmp	r3, #32
 8009596:	d10e      	bne.n	80095b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	f003 0320 	and.w	r3, r3, #32
 80095a2:	2b20      	cmp	r3, #32
 80095a4:	d107      	bne.n	80095b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f06f 0220 	mvn.w	r2, #32
 80095ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 f8c7 	bl	8009744 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095b6:	bf00      	nop
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095be:	b480      	push	{r7}
 80095c0:	b083      	sub	sp, #12
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80095c6:	bf00      	nop
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80095d2:	b480      	push	{r7}
 80095d4:	b083      	sub	sp, #12
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80095da:	bf00      	nop
 80095dc:	370c      	adds	r7, #12
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr

080095e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095e6:	b480      	push	{r7}
 80095e8:	b083      	sub	sp, #12
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095ee:	bf00      	nop
 80095f0:	370c      	adds	r7, #12
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr

080095fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095fa:	b480      	push	{r7}
 80095fc:	b083      	sub	sp, #12
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009602:	bf00      	nop
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
	...

08009610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009610:	b480      	push	{r7}
 8009612:	b085      	sub	sp, #20
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a40      	ldr	r2, [pc, #256]	; (8009724 <TIM_Base_SetConfig+0x114>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d013      	beq.n	8009650 <TIM_Base_SetConfig+0x40>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800962e:	d00f      	beq.n	8009650 <TIM_Base_SetConfig+0x40>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4a3d      	ldr	r2, [pc, #244]	; (8009728 <TIM_Base_SetConfig+0x118>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d00b      	beq.n	8009650 <TIM_Base_SetConfig+0x40>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a3c      	ldr	r2, [pc, #240]	; (800972c <TIM_Base_SetConfig+0x11c>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d007      	beq.n	8009650 <TIM_Base_SetConfig+0x40>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a3b      	ldr	r2, [pc, #236]	; (8009730 <TIM_Base_SetConfig+0x120>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d003      	beq.n	8009650 <TIM_Base_SetConfig+0x40>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4a3a      	ldr	r2, [pc, #232]	; (8009734 <TIM_Base_SetConfig+0x124>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d108      	bne.n	8009662 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	4313      	orrs	r3, r2
 8009660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a2f      	ldr	r2, [pc, #188]	; (8009724 <TIM_Base_SetConfig+0x114>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d01f      	beq.n	80096aa <TIM_Base_SetConfig+0x9a>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009670:	d01b      	beq.n	80096aa <TIM_Base_SetConfig+0x9a>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a2c      	ldr	r2, [pc, #176]	; (8009728 <TIM_Base_SetConfig+0x118>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d017      	beq.n	80096aa <TIM_Base_SetConfig+0x9a>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a2b      	ldr	r2, [pc, #172]	; (800972c <TIM_Base_SetConfig+0x11c>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d013      	beq.n	80096aa <TIM_Base_SetConfig+0x9a>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a2a      	ldr	r2, [pc, #168]	; (8009730 <TIM_Base_SetConfig+0x120>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d00f      	beq.n	80096aa <TIM_Base_SetConfig+0x9a>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a29      	ldr	r2, [pc, #164]	; (8009734 <TIM_Base_SetConfig+0x124>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d00b      	beq.n	80096aa <TIM_Base_SetConfig+0x9a>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a28      	ldr	r2, [pc, #160]	; (8009738 <TIM_Base_SetConfig+0x128>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d007      	beq.n	80096aa <TIM_Base_SetConfig+0x9a>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a27      	ldr	r2, [pc, #156]	; (800973c <TIM_Base_SetConfig+0x12c>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d003      	beq.n	80096aa <TIM_Base_SetConfig+0x9a>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a26      	ldr	r2, [pc, #152]	; (8009740 <TIM_Base_SetConfig+0x130>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d108      	bne.n	80096bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	4313      	orrs	r3, r2
 80096ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	695b      	ldr	r3, [r3, #20]
 80096c6:	4313      	orrs	r3, r2
 80096c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	689a      	ldr	r2, [r3, #8]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4a10      	ldr	r2, [pc, #64]	; (8009724 <TIM_Base_SetConfig+0x114>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d00f      	beq.n	8009708 <TIM_Base_SetConfig+0xf8>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	4a12      	ldr	r2, [pc, #72]	; (8009734 <TIM_Base_SetConfig+0x124>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d00b      	beq.n	8009708 <TIM_Base_SetConfig+0xf8>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4a11      	ldr	r2, [pc, #68]	; (8009738 <TIM_Base_SetConfig+0x128>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d007      	beq.n	8009708 <TIM_Base_SetConfig+0xf8>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a10      	ldr	r2, [pc, #64]	; (800973c <TIM_Base_SetConfig+0x12c>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d003      	beq.n	8009708 <TIM_Base_SetConfig+0xf8>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4a0f      	ldr	r2, [pc, #60]	; (8009740 <TIM_Base_SetConfig+0x130>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d103      	bne.n	8009710 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	691a      	ldr	r2, [r3, #16]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	615a      	str	r2, [r3, #20]
}
 8009716:	bf00      	nop
 8009718:	3714      	adds	r7, #20
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	40010000 	.word	0x40010000
 8009728:	40000400 	.word	0x40000400
 800972c:	40000800 	.word	0x40000800
 8009730:	40000c00 	.word	0x40000c00
 8009734:	40010400 	.word	0x40010400
 8009738:	40014000 	.word	0x40014000
 800973c:	40014400 	.word	0x40014400
 8009740:	40014800 	.word	0x40014800

08009744 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d101      	bne.n	8009792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e042      	b.n	8009818 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009798:	2b00      	cmp	r3, #0
 800979a:	d106      	bne.n	80097aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f7f8 fe3b 	bl	8002420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2224      	movs	r2, #36	; 0x24
 80097ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f022 0201 	bic.w	r2, r2, #1
 80097c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fc5a 	bl	800a07c <UART_SetConfig>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d101      	bne.n	80097d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e022      	b.n	8009818 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d002      	beq.n	80097e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f001 f9ae 	bl	800ab3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	685a      	ldr	r2, [r3, #4]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80097ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	689a      	ldr	r2, [r3, #8]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80097fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f042 0201 	orr.w	r2, r2, #1
 800980e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f001 fa35 	bl	800ac80 <UART_CheckIdleState>
 8009816:	4603      	mov	r3, r0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	4613      	mov	r3, r2
 800982c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009834:	2b20      	cmp	r3, #32
 8009836:	d168      	bne.n	800990a <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d002      	beq.n	8009844 <HAL_UART_Transmit_DMA+0x24>
 800983e:	88fb      	ldrh	r3, [r7, #6]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d101      	bne.n	8009848 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	e061      	b.n	800990c <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800984e:	2b01      	cmp	r3, #1
 8009850:	d101      	bne.n	8009856 <HAL_UART_Transmit_DMA+0x36>
 8009852:	2302      	movs	r3, #2
 8009854:	e05a      	b.n	800990c <HAL_UART_Transmit_DMA+0xec>
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2201      	movs	r2, #1
 800985a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	68ba      	ldr	r2, [r7, #8]
 8009862:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	88fa      	ldrh	r2, [r7, #6]
 8009868:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	88fa      	ldrh	r2, [r7, #6]
 8009870:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2200      	movs	r2, #0
 8009878:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2221      	movs	r2, #33	; 0x21
 8009880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009888:	2b00      	cmp	r3, #0
 800988a:	d02c      	beq.n	80098e6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009890:	4a20      	ldr	r2, [pc, #128]	; (8009914 <HAL_UART_Transmit_DMA+0xf4>)
 8009892:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009898:	4a1f      	ldr	r2, [pc, #124]	; (8009918 <HAL_UART_Transmit_DMA+0xf8>)
 800989a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098a0:	4a1e      	ldr	r2, [pc, #120]	; (800991c <HAL_UART_Transmit_DMA+0xfc>)
 80098a2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098a8:	2200      	movs	r2, #0
 80098aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098b4:	4619      	mov	r1, r3
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	3328      	adds	r3, #40	; 0x28
 80098bc:	461a      	mov	r2, r3
 80098be:	88fb      	ldrh	r3, [r7, #6]
 80098c0:	f7fa fbe8 	bl	8004094 <HAL_DMA_Start_IT>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00d      	beq.n	80098e6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2210      	movs	r2, #16
 80098ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2200      	movs	r2, #0
 80098d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2220      	movs	r2, #32
 80098de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	e012      	b.n	800990c <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	2240      	movs	r2, #64	; 0x40
 80098ec:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	689a      	ldr	r2, [r3, #8]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009904:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8009906:	2300      	movs	r3, #0
 8009908:	e000      	b.n	800990c <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800990a:	2302      	movs	r3, #2
  }
}
 800990c:	4618      	mov	r0, r3
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	0800af95 	.word	0x0800af95
 8009918:	0800afe5 	.word	0x0800afe5
 800991c:	0800b0cf 	.word	0x0800b0cf

08009920 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	4613      	mov	r3, r2
 800992c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009934:	2b20      	cmp	r3, #32
 8009936:	d131      	bne.n	800999c <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d002      	beq.n	8009944 <HAL_UART_Receive_DMA+0x24>
 800993e:	88fb      	ldrh	r3, [r7, #6]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d101      	bne.n	8009948 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e02a      	b.n	800999e <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800994e:	2b01      	cmp	r3, #1
 8009950:	d101      	bne.n	8009956 <HAL_UART_Receive_DMA+0x36>
 8009952:	2302      	movs	r3, #2
 8009954:	e023      	b.n	800999e <HAL_UART_Receive_DMA+0x7e>
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2201      	movs	r2, #1
 800995a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2200      	movs	r2, #0
 8009962:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a0f      	ldr	r2, [pc, #60]	; (80099a8 <HAL_UART_Receive_DMA+0x88>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d00e      	beq.n	800998c <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009978:	2b00      	cmp	r3, #0
 800997a:	d007      	beq.n	800998c <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800998a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800998c:	88fb      	ldrh	r3, [r7, #6]
 800998e:	461a      	mov	r2, r3
 8009990:	68b9      	ldr	r1, [r7, #8]
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f001 fa40 	bl	800ae18 <UART_Start_Receive_DMA>
 8009998:	4603      	mov	r3, r0
 800999a:	e000      	b.n	800999e <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800999c:	2302      	movs	r3, #2
  }
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	58000c00 	.word	0x58000c00

080099ac <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099ba:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099c2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099ce:	2b80      	cmp	r3, #128	; 0x80
 80099d0:	d127      	bne.n	8009a22 <HAL_UART_DMAStop+0x76>
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2b21      	cmp	r3, #33	; 0x21
 80099d6:	d124      	bne.n	8009a22 <HAL_UART_DMAStop+0x76>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	689a      	ldr	r2, [r3, #8]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099e6:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d015      	beq.n	8009a1c <HAL_UART_DMAStop+0x70>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7fa fdb7 	bl	8004568 <HAL_DMA_Abort>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00d      	beq.n	8009a1c <HAL_UART_DMAStop+0x70>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7fc fa3b 	bl	8005e80 <HAL_DMA_GetError>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b20      	cmp	r3, #32
 8009a0e:	d105      	bne.n	8009a1c <HAL_UART_DMAStop+0x70>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2210      	movs	r2, #16
 8009a14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8009a18:	2303      	movs	r3, #3
 8009a1a:	e032      	b.n	8009a82 <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f001 fa69 	bl	800aef4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a2c:	2b40      	cmp	r3, #64	; 0x40
 8009a2e:	d127      	bne.n	8009a80 <HAL_UART_DMAStop+0xd4>
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	2b22      	cmp	r3, #34	; 0x22
 8009a34:	d124      	bne.n	8009a80 <HAL_UART_DMAStop+0xd4>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	689a      	ldr	r2, [r3, #8]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a44:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d015      	beq.n	8009a7a <HAL_UART_DMAStop+0xce>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7fa fd88 	bl	8004568 <HAL_DMA_Abort>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00d      	beq.n	8009a7a <HAL_UART_DMAStop+0xce>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fc fa0c 	bl	8005e80 <HAL_DMA_GetError>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b20      	cmp	r3, #32
 8009a6c:	d105      	bne.n	8009a7a <HAL_UART_DMAStop+0xce>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2210      	movs	r2, #16
 8009a72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8009a76:	2303      	movs	r3, #3
 8009a78:	e003      	b.n	8009a82 <HAL_UART_DMAStop+0xd6>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f001 fa58 	bl	800af30 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
	...

08009a8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b088      	sub	sp, #32
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	69db      	ldr	r3, [r3, #28]
 8009a9a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009aac:	69fa      	ldr	r2, [r7, #28]
 8009aae:	f640 030f 	movw	r3, #2063	; 0x80f
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d118      	bne.n	8009aee <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	f003 0320 	and.w	r3, r3, #32
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d013      	beq.n	8009aee <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	f003 0320 	and.w	r3, r3, #32
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d104      	bne.n	8009ada <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d009      	beq.n	8009aee <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f000 8282 	beq.w	8009fe8 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	4798      	blx	r3
      }
      return;
 8009aec:	e27c      	b.n	8009fe8 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f000 80ef 	beq.w	8009cd4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009af6:	697a      	ldr	r2, [r7, #20]
 8009af8:	4b73      	ldr	r3, [pc, #460]	; (8009cc8 <HAL_UART_IRQHandler+0x23c>)
 8009afa:	4013      	ands	r3, r2
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d105      	bne.n	8009b0c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009b00:	69ba      	ldr	r2, [r7, #24]
 8009b02:	4b72      	ldr	r3, [pc, #456]	; (8009ccc <HAL_UART_IRQHandler+0x240>)
 8009b04:	4013      	ands	r3, r2
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f000 80e4 	beq.w	8009cd4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	f003 0301 	and.w	r3, r3, #1
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d010      	beq.n	8009b38 <HAL_UART_IRQHandler+0xac>
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d00b      	beq.n	8009b38 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2201      	movs	r2, #1
 8009b26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b2e:	f043 0201 	orr.w	r2, r3, #1
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	f003 0302 	and.w	r3, r3, #2
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d010      	beq.n	8009b64 <HAL_UART_IRQHandler+0xd8>
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	f003 0301 	and.w	r3, r3, #1
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00b      	beq.n	8009b64 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2202      	movs	r2, #2
 8009b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b5a:	f043 0204 	orr.w	r2, r3, #4
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	f003 0304 	and.w	r3, r3, #4
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d010      	beq.n	8009b90 <HAL_UART_IRQHandler+0x104>
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	f003 0301 	and.w	r3, r3, #1
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00b      	beq.n	8009b90 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2204      	movs	r2, #4
 8009b7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b86:	f043 0202 	orr.w	r2, r3, #2
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	f003 0308 	and.w	r3, r3, #8
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d015      	beq.n	8009bc6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	f003 0320 	and.w	r3, r3, #32
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d104      	bne.n	8009bae <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009ba4:	697a      	ldr	r2, [r7, #20]
 8009ba6:	4b48      	ldr	r3, [pc, #288]	; (8009cc8 <HAL_UART_IRQHandler+0x23c>)
 8009ba8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00b      	beq.n	8009bc6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2208      	movs	r2, #8
 8009bb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bbc:	f043 0208 	orr.w	r2, r3, #8
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d011      	beq.n	8009bf4 <HAL_UART_IRQHandler+0x168>
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00c      	beq.n	8009bf4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bea:	f043 0220 	orr.w	r2, r3, #32
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f000 81f6 	beq.w	8009fec <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	f003 0320 	and.w	r3, r3, #32
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d011      	beq.n	8009c2e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	f003 0320 	and.w	r3, r3, #32
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d104      	bne.n	8009c1e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d007      	beq.n	8009c2e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d003      	beq.n	8009c2e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c34:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c40:	2b40      	cmp	r3, #64	; 0x40
 8009c42:	d004      	beq.n	8009c4e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d031      	beq.n	8009cb2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f001 f96e 	bl	800af30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c5e:	2b40      	cmp	r3, #64	; 0x40
 8009c60:	d123      	bne.n	8009caa <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	689a      	ldr	r2, [r3, #8]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c70:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d013      	beq.n	8009ca2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c7e:	4a14      	ldr	r2, [pc, #80]	; (8009cd0 <HAL_UART_IRQHandler+0x244>)
 8009c80:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7fa ff8c 	bl	8004ba4 <HAL_DMA_Abort_IT>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d017      	beq.n	8009cc2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009c9c:	4610      	mov	r0, r2
 8009c9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ca0:	e00f      	b.n	8009cc2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f9d4 	bl	800a050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ca8:	e00b      	b.n	8009cc2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 f9d0 	bl	800a050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cb0:	e007      	b.n	8009cc2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 f9cc 	bl	800a050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009cc0:	e194      	b.n	8009fec <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cc2:	bf00      	nop
    return;
 8009cc4:	e192      	b.n	8009fec <HAL_UART_IRQHandler+0x560>
 8009cc6:	bf00      	nop
 8009cc8:	10000001 	.word	0x10000001
 8009ccc:	04000120 	.word	0x04000120
 8009cd0:	0800b14f 	.word	0x0800b14f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	f040 810f 	bne.w	8009efc <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	f003 0310 	and.w	r3, r3, #16
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	f000 8109 	beq.w	8009efc <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	f003 0310 	and.w	r3, r3, #16
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f000 8103 	beq.w	8009efc <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2210      	movs	r2, #16
 8009cfc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d08:	2b40      	cmp	r3, #64	; 0x40
 8009d0a:	f040 80bb 	bne.w	8009e84 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a96      	ldr	r2, [pc, #600]	; (8009f70 <HAL_UART_IRQHandler+0x4e4>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d059      	beq.n	8009dce <HAL_UART_IRQHandler+0x342>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a94      	ldr	r2, [pc, #592]	; (8009f74 <HAL_UART_IRQHandler+0x4e8>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d053      	beq.n	8009dce <HAL_UART_IRQHandler+0x342>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a92      	ldr	r2, [pc, #584]	; (8009f78 <HAL_UART_IRQHandler+0x4ec>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d04d      	beq.n	8009dce <HAL_UART_IRQHandler+0x342>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a90      	ldr	r2, [pc, #576]	; (8009f7c <HAL_UART_IRQHandler+0x4f0>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d047      	beq.n	8009dce <HAL_UART_IRQHandler+0x342>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a8e      	ldr	r2, [pc, #568]	; (8009f80 <HAL_UART_IRQHandler+0x4f4>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d041      	beq.n	8009dce <HAL_UART_IRQHandler+0x342>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a8c      	ldr	r2, [pc, #560]	; (8009f84 <HAL_UART_IRQHandler+0x4f8>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d03b      	beq.n	8009dce <HAL_UART_IRQHandler+0x342>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a8a      	ldr	r2, [pc, #552]	; (8009f88 <HAL_UART_IRQHandler+0x4fc>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d035      	beq.n	8009dce <HAL_UART_IRQHandler+0x342>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a88      	ldr	r2, [pc, #544]	; (8009f8c <HAL_UART_IRQHandler+0x500>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d02f      	beq.n	8009dce <HAL_UART_IRQHandler+0x342>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a86      	ldr	r2, [pc, #536]	; (8009f90 <HAL_UART_IRQHandler+0x504>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d029      	beq.n	8009dce <HAL_UART_IRQHandler+0x342>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a84      	ldr	r2, [pc, #528]	; (8009f94 <HAL_UART_IRQHandler+0x508>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d023      	beq.n	8009dce <HAL_UART_IRQHandler+0x342>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a82      	ldr	r2, [pc, #520]	; (8009f98 <HAL_UART_IRQHandler+0x50c>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d01d      	beq.n	8009dce <HAL_UART_IRQHandler+0x342>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a80      	ldr	r2, [pc, #512]	; (8009f9c <HAL_UART_IRQHandler+0x510>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d017      	beq.n	8009dce <HAL_UART_IRQHandler+0x342>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a7e      	ldr	r2, [pc, #504]	; (8009fa0 <HAL_UART_IRQHandler+0x514>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d011      	beq.n	8009dce <HAL_UART_IRQHandler+0x342>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a7c      	ldr	r2, [pc, #496]	; (8009fa4 <HAL_UART_IRQHandler+0x518>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d00b      	beq.n	8009dce <HAL_UART_IRQHandler+0x342>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a7a      	ldr	r2, [pc, #488]	; (8009fa8 <HAL_UART_IRQHandler+0x51c>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d005      	beq.n	8009dce <HAL_UART_IRQHandler+0x342>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a78      	ldr	r2, [pc, #480]	; (8009fac <HAL_UART_IRQHandler+0x520>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d105      	bne.n	8009dda <HAL_UART_IRQHandler+0x34e>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	e004      	b.n	8009de4 <HAL_UART_IRQHandler+0x358>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8009de6:	893b      	ldrh	r3, [r7, #8]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 8101 	beq.w	8009ff0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009df4:	893a      	ldrh	r2, [r7, #8]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	f080 80fa 	bcs.w	8009ff0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	893a      	ldrh	r2, [r7, #8]
 8009e00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e08:	69db      	ldr	r3, [r3, #28]
 8009e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e0e:	d02b      	beq.n	8009e68 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e1e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	689a      	ldr	r2, [r3, #8]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f022 0201 	bic.w	r2, r2, #1
 8009e2e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	689a      	ldr	r2, [r3, #8]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e3e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2220      	movs	r2, #32
 8009e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f022 0210 	bic.w	r2, r2, #16
 8009e5c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fa fb80 	bl	8004568 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	1ad3      	subs	r3, r2, r3
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 f8f1 	bl	800a064 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e82:	e0b5      	b.n	8009ff0 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	1ad3      	subs	r3, r2, r3
 8009e94:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	f000 80a8 	beq.w	8009ff4 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8009ea4:	897b      	ldrh	r3, [r7, #10]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	f000 80a4 	beq.w	8009ff4 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009eba:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	6899      	ldr	r1, [r3, #8]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	4b3a      	ldr	r3, [pc, #232]	; (8009fb0 <HAL_UART_IRQHandler+0x524>)
 8009ec8:	400b      	ands	r3, r1
 8009eca:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2220      	movs	r2, #32
 8009ed0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f022 0210 	bic.w	r2, r2, #16
 8009eee:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ef0:	897b      	ldrh	r3, [r7, #10]
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f8b5 	bl	800a064 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009efa:	e07b      	b.n	8009ff4 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d00d      	beq.n	8009f22 <HAL_UART_IRQHandler+0x496>
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d008      	beq.n	8009f22 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009f18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f001 f947 	bl	800b1ae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f20:	e06b      	b.n	8009ffa <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009f22:	69fb      	ldr	r3, [r7, #28]
 8009f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d012      	beq.n	8009f52 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d104      	bne.n	8009f40 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d008      	beq.n	8009f52 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d057      	beq.n	8009ff8 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	4798      	blx	r3
    }
    return;
 8009f50:	e052      	b.n	8009ff8 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d02b      	beq.n	8009fb4 <HAL_UART_IRQHandler+0x528>
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d026      	beq.n	8009fb4 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f001 f907 	bl	800b17a <UART_EndTransmit_IT>
    return;
 8009f6c:	e045      	b.n	8009ffa <HAL_UART_IRQHandler+0x56e>
 8009f6e:	bf00      	nop
 8009f70:	40020010 	.word	0x40020010
 8009f74:	40020028 	.word	0x40020028
 8009f78:	40020040 	.word	0x40020040
 8009f7c:	40020058 	.word	0x40020058
 8009f80:	40020070 	.word	0x40020070
 8009f84:	40020088 	.word	0x40020088
 8009f88:	400200a0 	.word	0x400200a0
 8009f8c:	400200b8 	.word	0x400200b8
 8009f90:	40020410 	.word	0x40020410
 8009f94:	40020428 	.word	0x40020428
 8009f98:	40020440 	.word	0x40020440
 8009f9c:	40020458 	.word	0x40020458
 8009fa0:	40020470 	.word	0x40020470
 8009fa4:	40020488 	.word	0x40020488
 8009fa8:	400204a0 	.word	0x400204a0
 8009fac:	400204b8 	.word	0x400204b8
 8009fb0:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d008      	beq.n	8009fd0 <HAL_UART_IRQHandler+0x544>
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d003      	beq.n	8009fd0 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f001 f904 	bl	800b1d6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fce:	e014      	b.n	8009ffa <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00f      	beq.n	8009ffa <HAL_UART_IRQHandler+0x56e>
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	da0c      	bge.n	8009ffa <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f001 f8ee 	bl	800b1c2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009fe6:	e008      	b.n	8009ffa <HAL_UART_IRQHandler+0x56e>
      return;
 8009fe8:	bf00      	nop
 8009fea:	e006      	b.n	8009ffa <HAL_UART_IRQHandler+0x56e>
    return;
 8009fec:	bf00      	nop
 8009fee:	e004      	b.n	8009ffa <HAL_UART_IRQHandler+0x56e>
      return;
 8009ff0:	bf00      	nop
 8009ff2:	e002      	b.n	8009ffa <HAL_UART_IRQHandler+0x56e>
      return;
 8009ff4:	bf00      	nop
 8009ff6:	e000      	b.n	8009ffa <HAL_UART_IRQHandler+0x56e>
    return;
 8009ff8:	bf00      	nop
  }
}
 8009ffa:	3720      	adds	r7, #32
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a008:	bf00      	nop
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a01c:	bf00      	nop
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a044:	bf00      	nop
 800a046:	370c      	adds	r7, #12
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a058:	bf00      	nop
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	460b      	mov	r3, r1
 800a06e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a070:	bf00      	nop
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a07c:	b5b0      	push	{r4, r5, r7, lr}
 800a07e:	b08e      	sub	sp, #56	; 0x38
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a084:	2300      	movs	r3, #0
 800a086:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	689a      	ldr	r2, [r3, #8]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	431a      	orrs	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	695b      	ldr	r3, [r3, #20]
 800a098:	431a      	orrs	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	69db      	ldr	r3, [r3, #28]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	4bbf      	ldr	r3, [pc, #764]	; (800a3a8 <UART_SetConfig+0x32c>)
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	6812      	ldr	r2, [r2, #0]
 800a0b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a0b2:	430b      	orrs	r3, r1
 800a0b4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	68da      	ldr	r2, [r3, #12]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	430a      	orrs	r2, r1
 800a0ca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4ab5      	ldr	r2, [pc, #724]	; (800a3ac <UART_SetConfig+0x330>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d004      	beq.n	800a0e6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6a1b      	ldr	r3, [r3, #32]
 800a0e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	689a      	ldr	r2, [r3, #8]
 800a0ec:	4bb0      	ldr	r3, [pc, #704]	; (800a3b0 <UART_SetConfig+0x334>)
 800a0ee:	4013      	ands	r3, r2
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	6812      	ldr	r2, [r2, #0]
 800a0f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a0f6:	430b      	orrs	r3, r1
 800a0f8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a100:	f023 010f 	bic.w	r1, r3, #15
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	430a      	orrs	r2, r1
 800a10e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4aa7      	ldr	r2, [pc, #668]	; (800a3b4 <UART_SetConfig+0x338>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d176      	bne.n	800a208 <UART_SetConfig+0x18c>
 800a11a:	4ba7      	ldr	r3, [pc, #668]	; (800a3b8 <UART_SetConfig+0x33c>)
 800a11c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a11e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a122:	2b28      	cmp	r3, #40	; 0x28
 800a124:	d86c      	bhi.n	800a200 <UART_SetConfig+0x184>
 800a126:	a201      	add	r2, pc, #4	; (adr r2, 800a12c <UART_SetConfig+0xb0>)
 800a128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12c:	0800a1d1 	.word	0x0800a1d1
 800a130:	0800a201 	.word	0x0800a201
 800a134:	0800a201 	.word	0x0800a201
 800a138:	0800a201 	.word	0x0800a201
 800a13c:	0800a201 	.word	0x0800a201
 800a140:	0800a201 	.word	0x0800a201
 800a144:	0800a201 	.word	0x0800a201
 800a148:	0800a201 	.word	0x0800a201
 800a14c:	0800a1d9 	.word	0x0800a1d9
 800a150:	0800a201 	.word	0x0800a201
 800a154:	0800a201 	.word	0x0800a201
 800a158:	0800a201 	.word	0x0800a201
 800a15c:	0800a201 	.word	0x0800a201
 800a160:	0800a201 	.word	0x0800a201
 800a164:	0800a201 	.word	0x0800a201
 800a168:	0800a201 	.word	0x0800a201
 800a16c:	0800a1e1 	.word	0x0800a1e1
 800a170:	0800a201 	.word	0x0800a201
 800a174:	0800a201 	.word	0x0800a201
 800a178:	0800a201 	.word	0x0800a201
 800a17c:	0800a201 	.word	0x0800a201
 800a180:	0800a201 	.word	0x0800a201
 800a184:	0800a201 	.word	0x0800a201
 800a188:	0800a201 	.word	0x0800a201
 800a18c:	0800a1e9 	.word	0x0800a1e9
 800a190:	0800a201 	.word	0x0800a201
 800a194:	0800a201 	.word	0x0800a201
 800a198:	0800a201 	.word	0x0800a201
 800a19c:	0800a201 	.word	0x0800a201
 800a1a0:	0800a201 	.word	0x0800a201
 800a1a4:	0800a201 	.word	0x0800a201
 800a1a8:	0800a201 	.word	0x0800a201
 800a1ac:	0800a1f1 	.word	0x0800a1f1
 800a1b0:	0800a201 	.word	0x0800a201
 800a1b4:	0800a201 	.word	0x0800a201
 800a1b8:	0800a201 	.word	0x0800a201
 800a1bc:	0800a201 	.word	0x0800a201
 800a1c0:	0800a201 	.word	0x0800a201
 800a1c4:	0800a201 	.word	0x0800a201
 800a1c8:	0800a201 	.word	0x0800a201
 800a1cc:	0800a1f9 	.word	0x0800a1f9
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1d6:	e222      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a1d8:	2304      	movs	r3, #4
 800a1da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1de:	e21e      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a1e0:	2308      	movs	r3, #8
 800a1e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1e6:	e21a      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a1e8:	2310      	movs	r3, #16
 800a1ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ee:	e216      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a1f0:	2320      	movs	r3, #32
 800a1f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1f6:	e212      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a1f8:	2340      	movs	r3, #64	; 0x40
 800a1fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1fe:	e20e      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a200:	2380      	movs	r3, #128	; 0x80
 800a202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a206:	e20a      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a6b      	ldr	r2, [pc, #428]	; (800a3bc <UART_SetConfig+0x340>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d130      	bne.n	800a274 <UART_SetConfig+0x1f8>
 800a212:	4b69      	ldr	r3, [pc, #420]	; (800a3b8 <UART_SetConfig+0x33c>)
 800a214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a216:	f003 0307 	and.w	r3, r3, #7
 800a21a:	2b05      	cmp	r3, #5
 800a21c:	d826      	bhi.n	800a26c <UART_SetConfig+0x1f0>
 800a21e:	a201      	add	r2, pc, #4	; (adr r2, 800a224 <UART_SetConfig+0x1a8>)
 800a220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a224:	0800a23d 	.word	0x0800a23d
 800a228:	0800a245 	.word	0x0800a245
 800a22c:	0800a24d 	.word	0x0800a24d
 800a230:	0800a255 	.word	0x0800a255
 800a234:	0800a25d 	.word	0x0800a25d
 800a238:	0800a265 	.word	0x0800a265
 800a23c:	2300      	movs	r3, #0
 800a23e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a242:	e1ec      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a244:	2304      	movs	r3, #4
 800a246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a24a:	e1e8      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a24c:	2308      	movs	r3, #8
 800a24e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a252:	e1e4      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a254:	2310      	movs	r3, #16
 800a256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a25a:	e1e0      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a25c:	2320      	movs	r3, #32
 800a25e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a262:	e1dc      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a264:	2340      	movs	r3, #64	; 0x40
 800a266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a26a:	e1d8      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a26c:	2380      	movs	r3, #128	; 0x80
 800a26e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a272:	e1d4      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a51      	ldr	r2, [pc, #324]	; (800a3c0 <UART_SetConfig+0x344>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d130      	bne.n	800a2e0 <UART_SetConfig+0x264>
 800a27e:	4b4e      	ldr	r3, [pc, #312]	; (800a3b8 <UART_SetConfig+0x33c>)
 800a280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a282:	f003 0307 	and.w	r3, r3, #7
 800a286:	2b05      	cmp	r3, #5
 800a288:	d826      	bhi.n	800a2d8 <UART_SetConfig+0x25c>
 800a28a:	a201      	add	r2, pc, #4	; (adr r2, 800a290 <UART_SetConfig+0x214>)
 800a28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a290:	0800a2a9 	.word	0x0800a2a9
 800a294:	0800a2b1 	.word	0x0800a2b1
 800a298:	0800a2b9 	.word	0x0800a2b9
 800a29c:	0800a2c1 	.word	0x0800a2c1
 800a2a0:	0800a2c9 	.word	0x0800a2c9
 800a2a4:	0800a2d1 	.word	0x0800a2d1
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ae:	e1b6      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a2b0:	2304      	movs	r3, #4
 800a2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2b6:	e1b2      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a2b8:	2308      	movs	r3, #8
 800a2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2be:	e1ae      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a2c0:	2310      	movs	r3, #16
 800a2c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2c6:	e1aa      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a2c8:	2320      	movs	r3, #32
 800a2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ce:	e1a6      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a2d0:	2340      	movs	r3, #64	; 0x40
 800a2d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2d6:	e1a2      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a2d8:	2380      	movs	r3, #128	; 0x80
 800a2da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2de:	e19e      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a37      	ldr	r2, [pc, #220]	; (800a3c4 <UART_SetConfig+0x348>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d130      	bne.n	800a34c <UART_SetConfig+0x2d0>
 800a2ea:	4b33      	ldr	r3, [pc, #204]	; (800a3b8 <UART_SetConfig+0x33c>)
 800a2ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ee:	f003 0307 	and.w	r3, r3, #7
 800a2f2:	2b05      	cmp	r3, #5
 800a2f4:	d826      	bhi.n	800a344 <UART_SetConfig+0x2c8>
 800a2f6:	a201      	add	r2, pc, #4	; (adr r2, 800a2fc <UART_SetConfig+0x280>)
 800a2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2fc:	0800a315 	.word	0x0800a315
 800a300:	0800a31d 	.word	0x0800a31d
 800a304:	0800a325 	.word	0x0800a325
 800a308:	0800a32d 	.word	0x0800a32d
 800a30c:	0800a335 	.word	0x0800a335
 800a310:	0800a33d 	.word	0x0800a33d
 800a314:	2300      	movs	r3, #0
 800a316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a31a:	e180      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a31c:	2304      	movs	r3, #4
 800a31e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a322:	e17c      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a324:	2308      	movs	r3, #8
 800a326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a32a:	e178      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a32c:	2310      	movs	r3, #16
 800a32e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a332:	e174      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a334:	2320      	movs	r3, #32
 800a336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a33a:	e170      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a33c:	2340      	movs	r3, #64	; 0x40
 800a33e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a342:	e16c      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a344:	2380      	movs	r3, #128	; 0x80
 800a346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a34a:	e168      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a1d      	ldr	r2, [pc, #116]	; (800a3c8 <UART_SetConfig+0x34c>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d142      	bne.n	800a3dc <UART_SetConfig+0x360>
 800a356:	4b18      	ldr	r3, [pc, #96]	; (800a3b8 <UART_SetConfig+0x33c>)
 800a358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a35a:	f003 0307 	and.w	r3, r3, #7
 800a35e:	2b05      	cmp	r3, #5
 800a360:	d838      	bhi.n	800a3d4 <UART_SetConfig+0x358>
 800a362:	a201      	add	r2, pc, #4	; (adr r2, 800a368 <UART_SetConfig+0x2ec>)
 800a364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a368:	0800a381 	.word	0x0800a381
 800a36c:	0800a389 	.word	0x0800a389
 800a370:	0800a391 	.word	0x0800a391
 800a374:	0800a399 	.word	0x0800a399
 800a378:	0800a3a1 	.word	0x0800a3a1
 800a37c:	0800a3cd 	.word	0x0800a3cd
 800a380:	2300      	movs	r3, #0
 800a382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a386:	e14a      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a388:	2304      	movs	r3, #4
 800a38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a38e:	e146      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a390:	2308      	movs	r3, #8
 800a392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a396:	e142      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a398:	2310      	movs	r3, #16
 800a39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a39e:	e13e      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a3a0:	2320      	movs	r3, #32
 800a3a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3a6:	e13a      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a3a8:	cfff69f3 	.word	0xcfff69f3
 800a3ac:	58000c00 	.word	0x58000c00
 800a3b0:	11fff4ff 	.word	0x11fff4ff
 800a3b4:	40011000 	.word	0x40011000
 800a3b8:	58024400 	.word	0x58024400
 800a3bc:	40004400 	.word	0x40004400
 800a3c0:	40004800 	.word	0x40004800
 800a3c4:	40004c00 	.word	0x40004c00
 800a3c8:	40005000 	.word	0x40005000
 800a3cc:	2340      	movs	r3, #64	; 0x40
 800a3ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3d2:	e124      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a3d4:	2380      	movs	r3, #128	; 0x80
 800a3d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3da:	e120      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4acc      	ldr	r2, [pc, #816]	; (800a714 <UART_SetConfig+0x698>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d176      	bne.n	800a4d4 <UART_SetConfig+0x458>
 800a3e6:	4bcc      	ldr	r3, [pc, #816]	; (800a718 <UART_SetConfig+0x69c>)
 800a3e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3ee:	2b28      	cmp	r3, #40	; 0x28
 800a3f0:	d86c      	bhi.n	800a4cc <UART_SetConfig+0x450>
 800a3f2:	a201      	add	r2, pc, #4	; (adr r2, 800a3f8 <UART_SetConfig+0x37c>)
 800a3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f8:	0800a49d 	.word	0x0800a49d
 800a3fc:	0800a4cd 	.word	0x0800a4cd
 800a400:	0800a4cd 	.word	0x0800a4cd
 800a404:	0800a4cd 	.word	0x0800a4cd
 800a408:	0800a4cd 	.word	0x0800a4cd
 800a40c:	0800a4cd 	.word	0x0800a4cd
 800a410:	0800a4cd 	.word	0x0800a4cd
 800a414:	0800a4cd 	.word	0x0800a4cd
 800a418:	0800a4a5 	.word	0x0800a4a5
 800a41c:	0800a4cd 	.word	0x0800a4cd
 800a420:	0800a4cd 	.word	0x0800a4cd
 800a424:	0800a4cd 	.word	0x0800a4cd
 800a428:	0800a4cd 	.word	0x0800a4cd
 800a42c:	0800a4cd 	.word	0x0800a4cd
 800a430:	0800a4cd 	.word	0x0800a4cd
 800a434:	0800a4cd 	.word	0x0800a4cd
 800a438:	0800a4ad 	.word	0x0800a4ad
 800a43c:	0800a4cd 	.word	0x0800a4cd
 800a440:	0800a4cd 	.word	0x0800a4cd
 800a444:	0800a4cd 	.word	0x0800a4cd
 800a448:	0800a4cd 	.word	0x0800a4cd
 800a44c:	0800a4cd 	.word	0x0800a4cd
 800a450:	0800a4cd 	.word	0x0800a4cd
 800a454:	0800a4cd 	.word	0x0800a4cd
 800a458:	0800a4b5 	.word	0x0800a4b5
 800a45c:	0800a4cd 	.word	0x0800a4cd
 800a460:	0800a4cd 	.word	0x0800a4cd
 800a464:	0800a4cd 	.word	0x0800a4cd
 800a468:	0800a4cd 	.word	0x0800a4cd
 800a46c:	0800a4cd 	.word	0x0800a4cd
 800a470:	0800a4cd 	.word	0x0800a4cd
 800a474:	0800a4cd 	.word	0x0800a4cd
 800a478:	0800a4bd 	.word	0x0800a4bd
 800a47c:	0800a4cd 	.word	0x0800a4cd
 800a480:	0800a4cd 	.word	0x0800a4cd
 800a484:	0800a4cd 	.word	0x0800a4cd
 800a488:	0800a4cd 	.word	0x0800a4cd
 800a48c:	0800a4cd 	.word	0x0800a4cd
 800a490:	0800a4cd 	.word	0x0800a4cd
 800a494:	0800a4cd 	.word	0x0800a4cd
 800a498:	0800a4c5 	.word	0x0800a4c5
 800a49c:	2301      	movs	r3, #1
 800a49e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4a2:	e0bc      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a4a4:	2304      	movs	r3, #4
 800a4a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4aa:	e0b8      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a4ac:	2308      	movs	r3, #8
 800a4ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4b2:	e0b4      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a4b4:	2310      	movs	r3, #16
 800a4b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ba:	e0b0      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a4bc:	2320      	movs	r3, #32
 800a4be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4c2:	e0ac      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a4c4:	2340      	movs	r3, #64	; 0x40
 800a4c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ca:	e0a8      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a4cc:	2380      	movs	r3, #128	; 0x80
 800a4ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4d2:	e0a4      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a90      	ldr	r2, [pc, #576]	; (800a71c <UART_SetConfig+0x6a0>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d130      	bne.n	800a540 <UART_SetConfig+0x4c4>
 800a4de:	4b8e      	ldr	r3, [pc, #568]	; (800a718 <UART_SetConfig+0x69c>)
 800a4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4e2:	f003 0307 	and.w	r3, r3, #7
 800a4e6:	2b05      	cmp	r3, #5
 800a4e8:	d826      	bhi.n	800a538 <UART_SetConfig+0x4bc>
 800a4ea:	a201      	add	r2, pc, #4	; (adr r2, 800a4f0 <UART_SetConfig+0x474>)
 800a4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f0:	0800a509 	.word	0x0800a509
 800a4f4:	0800a511 	.word	0x0800a511
 800a4f8:	0800a519 	.word	0x0800a519
 800a4fc:	0800a521 	.word	0x0800a521
 800a500:	0800a529 	.word	0x0800a529
 800a504:	0800a531 	.word	0x0800a531
 800a508:	2300      	movs	r3, #0
 800a50a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a50e:	e086      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a510:	2304      	movs	r3, #4
 800a512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a516:	e082      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a518:	2308      	movs	r3, #8
 800a51a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a51e:	e07e      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a520:	2310      	movs	r3, #16
 800a522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a526:	e07a      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a528:	2320      	movs	r3, #32
 800a52a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a52e:	e076      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a530:	2340      	movs	r3, #64	; 0x40
 800a532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a536:	e072      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a538:	2380      	movs	r3, #128	; 0x80
 800a53a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a53e:	e06e      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a76      	ldr	r2, [pc, #472]	; (800a720 <UART_SetConfig+0x6a4>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d130      	bne.n	800a5ac <UART_SetConfig+0x530>
 800a54a:	4b73      	ldr	r3, [pc, #460]	; (800a718 <UART_SetConfig+0x69c>)
 800a54c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a54e:	f003 0307 	and.w	r3, r3, #7
 800a552:	2b05      	cmp	r3, #5
 800a554:	d826      	bhi.n	800a5a4 <UART_SetConfig+0x528>
 800a556:	a201      	add	r2, pc, #4	; (adr r2, 800a55c <UART_SetConfig+0x4e0>)
 800a558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a55c:	0800a575 	.word	0x0800a575
 800a560:	0800a57d 	.word	0x0800a57d
 800a564:	0800a585 	.word	0x0800a585
 800a568:	0800a58d 	.word	0x0800a58d
 800a56c:	0800a595 	.word	0x0800a595
 800a570:	0800a59d 	.word	0x0800a59d
 800a574:	2300      	movs	r3, #0
 800a576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a57a:	e050      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a57c:	2304      	movs	r3, #4
 800a57e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a582:	e04c      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a584:	2308      	movs	r3, #8
 800a586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a58a:	e048      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a58c:	2310      	movs	r3, #16
 800a58e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a592:	e044      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a594:	2320      	movs	r3, #32
 800a596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a59a:	e040      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a59c:	2340      	movs	r3, #64	; 0x40
 800a59e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5a2:	e03c      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a5a4:	2380      	movs	r3, #128	; 0x80
 800a5a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5aa:	e038      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a5c      	ldr	r2, [pc, #368]	; (800a724 <UART_SetConfig+0x6a8>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d130      	bne.n	800a618 <UART_SetConfig+0x59c>
 800a5b6:	4b58      	ldr	r3, [pc, #352]	; (800a718 <UART_SetConfig+0x69c>)
 800a5b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5ba:	f003 0307 	and.w	r3, r3, #7
 800a5be:	2b05      	cmp	r3, #5
 800a5c0:	d826      	bhi.n	800a610 <UART_SetConfig+0x594>
 800a5c2:	a201      	add	r2, pc, #4	; (adr r2, 800a5c8 <UART_SetConfig+0x54c>)
 800a5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c8:	0800a5e1 	.word	0x0800a5e1
 800a5cc:	0800a5e9 	.word	0x0800a5e9
 800a5d0:	0800a5f1 	.word	0x0800a5f1
 800a5d4:	0800a5f9 	.word	0x0800a5f9
 800a5d8:	0800a601 	.word	0x0800a601
 800a5dc:	0800a609 	.word	0x0800a609
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5e6:	e01a      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a5e8:	2304      	movs	r3, #4
 800a5ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ee:	e016      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a5f0:	2308      	movs	r3, #8
 800a5f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5f6:	e012      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a5f8:	2310      	movs	r3, #16
 800a5fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5fe:	e00e      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a600:	2320      	movs	r3, #32
 800a602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a606:	e00a      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a608:	2340      	movs	r3, #64	; 0x40
 800a60a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a60e:	e006      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a610:	2380      	movs	r3, #128	; 0x80
 800a612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a616:	e002      	b.n	800a61e <UART_SetConfig+0x5a2>
 800a618:	2380      	movs	r3, #128	; 0x80
 800a61a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a40      	ldr	r2, [pc, #256]	; (800a724 <UART_SetConfig+0x6a8>)
 800a624:	4293      	cmp	r3, r2
 800a626:	f040 80ef 	bne.w	800a808 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a62a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a62e:	2b20      	cmp	r3, #32
 800a630:	dc46      	bgt.n	800a6c0 <UART_SetConfig+0x644>
 800a632:	2b02      	cmp	r3, #2
 800a634:	f2c0 8081 	blt.w	800a73a <UART_SetConfig+0x6be>
 800a638:	3b02      	subs	r3, #2
 800a63a:	2b1e      	cmp	r3, #30
 800a63c:	d87d      	bhi.n	800a73a <UART_SetConfig+0x6be>
 800a63e:	a201      	add	r2, pc, #4	; (adr r2, 800a644 <UART_SetConfig+0x5c8>)
 800a640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a644:	0800a6c7 	.word	0x0800a6c7
 800a648:	0800a73b 	.word	0x0800a73b
 800a64c:	0800a6cf 	.word	0x0800a6cf
 800a650:	0800a73b 	.word	0x0800a73b
 800a654:	0800a73b 	.word	0x0800a73b
 800a658:	0800a73b 	.word	0x0800a73b
 800a65c:	0800a6df 	.word	0x0800a6df
 800a660:	0800a73b 	.word	0x0800a73b
 800a664:	0800a73b 	.word	0x0800a73b
 800a668:	0800a73b 	.word	0x0800a73b
 800a66c:	0800a73b 	.word	0x0800a73b
 800a670:	0800a73b 	.word	0x0800a73b
 800a674:	0800a73b 	.word	0x0800a73b
 800a678:	0800a73b 	.word	0x0800a73b
 800a67c:	0800a6ef 	.word	0x0800a6ef
 800a680:	0800a73b 	.word	0x0800a73b
 800a684:	0800a73b 	.word	0x0800a73b
 800a688:	0800a73b 	.word	0x0800a73b
 800a68c:	0800a73b 	.word	0x0800a73b
 800a690:	0800a73b 	.word	0x0800a73b
 800a694:	0800a73b 	.word	0x0800a73b
 800a698:	0800a73b 	.word	0x0800a73b
 800a69c:	0800a73b 	.word	0x0800a73b
 800a6a0:	0800a73b 	.word	0x0800a73b
 800a6a4:	0800a73b 	.word	0x0800a73b
 800a6a8:	0800a73b 	.word	0x0800a73b
 800a6ac:	0800a73b 	.word	0x0800a73b
 800a6b0:	0800a73b 	.word	0x0800a73b
 800a6b4:	0800a73b 	.word	0x0800a73b
 800a6b8:	0800a73b 	.word	0x0800a73b
 800a6bc:	0800a72d 	.word	0x0800a72d
 800a6c0:	2b40      	cmp	r3, #64	; 0x40
 800a6c2:	d036      	beq.n	800a732 <UART_SetConfig+0x6b6>
 800a6c4:	e039      	b.n	800a73a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a6c6:	f7fe f967 	bl	8008998 <HAL_RCCEx_GetD3PCLK1Freq>
 800a6ca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a6cc:	e03b      	b.n	800a746 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6ce:	f107 0314 	add.w	r3, r7, #20
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7fe f976 	bl	80089c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6dc:	e033      	b.n	800a746 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6de:	f107 0308 	add.w	r3, r7, #8
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7fe fac2 	bl	8008c6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a6ec:	e02b      	b.n	800a746 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6ee:	4b0a      	ldr	r3, [pc, #40]	; (800a718 <UART_SetConfig+0x69c>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f003 0320 	and.w	r3, r3, #32
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d009      	beq.n	800a70e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a6fa:	4b07      	ldr	r3, [pc, #28]	; (800a718 <UART_SetConfig+0x69c>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	08db      	lsrs	r3, r3, #3
 800a700:	f003 0303 	and.w	r3, r3, #3
 800a704:	4a08      	ldr	r2, [pc, #32]	; (800a728 <UART_SetConfig+0x6ac>)
 800a706:	fa22 f303 	lsr.w	r3, r2, r3
 800a70a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a70c:	e01b      	b.n	800a746 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800a70e:	4b06      	ldr	r3, [pc, #24]	; (800a728 <UART_SetConfig+0x6ac>)
 800a710:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a712:	e018      	b.n	800a746 <UART_SetConfig+0x6ca>
 800a714:	40011400 	.word	0x40011400
 800a718:	58024400 	.word	0x58024400
 800a71c:	40007800 	.word	0x40007800
 800a720:	40007c00 	.word	0x40007c00
 800a724:	58000c00 	.word	0x58000c00
 800a728:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a72c:	4bc4      	ldr	r3, [pc, #784]	; (800aa40 <UART_SetConfig+0x9c4>)
 800a72e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a730:	e009      	b.n	800a746 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a736:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a738:	e005      	b.n	800a746 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800a73a:	2300      	movs	r3, #0
 800a73c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a744:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f000 81da 	beq.w	800ab02 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a752:	4abc      	ldr	r2, [pc, #752]	; (800aa44 <UART_SetConfig+0x9c8>)
 800a754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a758:	461a      	mov	r2, r3
 800a75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a75c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a760:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	685a      	ldr	r2, [r3, #4]
 800a766:	4613      	mov	r3, r2
 800a768:	005b      	lsls	r3, r3, #1
 800a76a:	4413      	add	r3, r2
 800a76c:	6a3a      	ldr	r2, [r7, #32]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d305      	bcc.n	800a77e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a778:	6a3a      	ldr	r2, [r7, #32]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d903      	bls.n	800a786 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
 800a780:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a784:	e1bd      	b.n	800ab02 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a788:	4618      	mov	r0, r3
 800a78a:	f04f 0100 	mov.w	r1, #0
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a792:	4aac      	ldr	r2, [pc, #688]	; (800aa44 <UART_SetConfig+0x9c8>)
 800a794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a798:	b29a      	uxth	r2, r3
 800a79a:	f04f 0300 	mov.w	r3, #0
 800a79e:	f7f5 fd9f 	bl	80002e0 <__aeabi_uldivmod>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	f04f 0200 	mov.w	r2, #0
 800a7ae:	f04f 0300 	mov.w	r3, #0
 800a7b2:	020b      	lsls	r3, r1, #8
 800a7b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a7b8:	0202      	lsls	r2, r0, #8
 800a7ba:	6879      	ldr	r1, [r7, #4]
 800a7bc:	6849      	ldr	r1, [r1, #4]
 800a7be:	0849      	lsrs	r1, r1, #1
 800a7c0:	4608      	mov	r0, r1
 800a7c2:	f04f 0100 	mov.w	r1, #0
 800a7c6:	1814      	adds	r4, r2, r0
 800a7c8:	eb43 0501 	adc.w	r5, r3, r1
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	f04f 0300 	mov.w	r3, #0
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	4629      	mov	r1, r5
 800a7da:	f7f5 fd81 	bl	80002e0 <__aeabi_uldivmod>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7ec:	d308      	bcc.n	800a800 <UART_SetConfig+0x784>
 800a7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7f4:	d204      	bcs.n	800a800 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7fc:	60da      	str	r2, [r3, #12]
 800a7fe:	e180      	b.n	800ab02 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a800:	2301      	movs	r3, #1
 800a802:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a806:	e17c      	b.n	800ab02 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	69db      	ldr	r3, [r3, #28]
 800a80c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a810:	f040 80bf 	bne.w	800a992 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800a814:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a818:	2b20      	cmp	r3, #32
 800a81a:	dc49      	bgt.n	800a8b0 <UART_SetConfig+0x834>
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	db7c      	blt.n	800a91a <UART_SetConfig+0x89e>
 800a820:	2b20      	cmp	r3, #32
 800a822:	d87a      	bhi.n	800a91a <UART_SetConfig+0x89e>
 800a824:	a201      	add	r2, pc, #4	; (adr r2, 800a82c <UART_SetConfig+0x7b0>)
 800a826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a82a:	bf00      	nop
 800a82c:	0800a8b7 	.word	0x0800a8b7
 800a830:	0800a8bf 	.word	0x0800a8bf
 800a834:	0800a91b 	.word	0x0800a91b
 800a838:	0800a91b 	.word	0x0800a91b
 800a83c:	0800a8c7 	.word	0x0800a8c7
 800a840:	0800a91b 	.word	0x0800a91b
 800a844:	0800a91b 	.word	0x0800a91b
 800a848:	0800a91b 	.word	0x0800a91b
 800a84c:	0800a8d7 	.word	0x0800a8d7
 800a850:	0800a91b 	.word	0x0800a91b
 800a854:	0800a91b 	.word	0x0800a91b
 800a858:	0800a91b 	.word	0x0800a91b
 800a85c:	0800a91b 	.word	0x0800a91b
 800a860:	0800a91b 	.word	0x0800a91b
 800a864:	0800a91b 	.word	0x0800a91b
 800a868:	0800a91b 	.word	0x0800a91b
 800a86c:	0800a8e7 	.word	0x0800a8e7
 800a870:	0800a91b 	.word	0x0800a91b
 800a874:	0800a91b 	.word	0x0800a91b
 800a878:	0800a91b 	.word	0x0800a91b
 800a87c:	0800a91b 	.word	0x0800a91b
 800a880:	0800a91b 	.word	0x0800a91b
 800a884:	0800a91b 	.word	0x0800a91b
 800a888:	0800a91b 	.word	0x0800a91b
 800a88c:	0800a91b 	.word	0x0800a91b
 800a890:	0800a91b 	.word	0x0800a91b
 800a894:	0800a91b 	.word	0x0800a91b
 800a898:	0800a91b 	.word	0x0800a91b
 800a89c:	0800a91b 	.word	0x0800a91b
 800a8a0:	0800a91b 	.word	0x0800a91b
 800a8a4:	0800a91b 	.word	0x0800a91b
 800a8a8:	0800a91b 	.word	0x0800a91b
 800a8ac:	0800a90d 	.word	0x0800a90d
 800a8b0:	2b40      	cmp	r3, #64	; 0x40
 800a8b2:	d02e      	beq.n	800a912 <UART_SetConfig+0x896>
 800a8b4:	e031      	b.n	800a91a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8b6:	f7fd f8c1 	bl	8007a3c <HAL_RCC_GetPCLK1Freq>
 800a8ba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a8bc:	e033      	b.n	800a926 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8be:	f7fd f8d3 	bl	8007a68 <HAL_RCC_GetPCLK2Freq>
 800a8c2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a8c4:	e02f      	b.n	800a926 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8c6:	f107 0314 	add.w	r3, r7, #20
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7fe f87a 	bl	80089c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8d0:	69bb      	ldr	r3, [r7, #24]
 800a8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8d4:	e027      	b.n	800a926 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8d6:	f107 0308 	add.w	r3, r7, #8
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7fe f9c6 	bl	8008c6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a8e4:	e01f      	b.n	800a926 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8e6:	4b58      	ldr	r3, [pc, #352]	; (800aa48 <UART_SetConfig+0x9cc>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f003 0320 	and.w	r3, r3, #32
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d009      	beq.n	800a906 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8f2:	4b55      	ldr	r3, [pc, #340]	; (800aa48 <UART_SetConfig+0x9cc>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	08db      	lsrs	r3, r3, #3
 800a8f8:	f003 0303 	and.w	r3, r3, #3
 800a8fc:	4a53      	ldr	r2, [pc, #332]	; (800aa4c <UART_SetConfig+0x9d0>)
 800a8fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a902:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a904:	e00f      	b.n	800a926 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a906:	4b51      	ldr	r3, [pc, #324]	; (800aa4c <UART_SetConfig+0x9d0>)
 800a908:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a90a:	e00c      	b.n	800a926 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a90c:	4b4c      	ldr	r3, [pc, #304]	; (800aa40 <UART_SetConfig+0x9c4>)
 800a90e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a910:	e009      	b.n	800a926 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a916:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a918:	e005      	b.n	800a926 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a91a:	2300      	movs	r3, #0
 800a91c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a91e:	2301      	movs	r3, #1
 800a920:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a924:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f000 80ea 	beq.w	800ab02 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a932:	4a44      	ldr	r2, [pc, #272]	; (800aa44 <UART_SetConfig+0x9c8>)
 800a934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a938:	461a      	mov	r2, r3
 800a93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a940:	005a      	lsls	r2, r3, #1
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	085b      	lsrs	r3, r3, #1
 800a948:	441a      	add	r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a952:	b29b      	uxth	r3, r3
 800a954:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a958:	2b0f      	cmp	r3, #15
 800a95a:	d916      	bls.n	800a98a <UART_SetConfig+0x90e>
 800a95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a962:	d212      	bcs.n	800a98a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a966:	b29b      	uxth	r3, r3
 800a968:	f023 030f 	bic.w	r3, r3, #15
 800a96c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a970:	085b      	lsrs	r3, r3, #1
 800a972:	b29b      	uxth	r3, r3
 800a974:	f003 0307 	and.w	r3, r3, #7
 800a978:	b29a      	uxth	r2, r3
 800a97a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a97c:	4313      	orrs	r3, r2
 800a97e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a986:	60da      	str	r2, [r3, #12]
 800a988:	e0bb      	b.n	800ab02 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a98a:	2301      	movs	r3, #1
 800a98c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a990:	e0b7      	b.n	800ab02 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a992:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a996:	2b20      	cmp	r3, #32
 800a998:	dc4a      	bgt.n	800aa30 <UART_SetConfig+0x9b4>
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f2c0 8086 	blt.w	800aaac <UART_SetConfig+0xa30>
 800a9a0:	2b20      	cmp	r3, #32
 800a9a2:	f200 8083 	bhi.w	800aaac <UART_SetConfig+0xa30>
 800a9a6:	a201      	add	r2, pc, #4	; (adr r2, 800a9ac <UART_SetConfig+0x930>)
 800a9a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ac:	0800aa37 	.word	0x0800aa37
 800a9b0:	0800aa51 	.word	0x0800aa51
 800a9b4:	0800aaad 	.word	0x0800aaad
 800a9b8:	0800aaad 	.word	0x0800aaad
 800a9bc:	0800aa59 	.word	0x0800aa59
 800a9c0:	0800aaad 	.word	0x0800aaad
 800a9c4:	0800aaad 	.word	0x0800aaad
 800a9c8:	0800aaad 	.word	0x0800aaad
 800a9cc:	0800aa69 	.word	0x0800aa69
 800a9d0:	0800aaad 	.word	0x0800aaad
 800a9d4:	0800aaad 	.word	0x0800aaad
 800a9d8:	0800aaad 	.word	0x0800aaad
 800a9dc:	0800aaad 	.word	0x0800aaad
 800a9e0:	0800aaad 	.word	0x0800aaad
 800a9e4:	0800aaad 	.word	0x0800aaad
 800a9e8:	0800aaad 	.word	0x0800aaad
 800a9ec:	0800aa79 	.word	0x0800aa79
 800a9f0:	0800aaad 	.word	0x0800aaad
 800a9f4:	0800aaad 	.word	0x0800aaad
 800a9f8:	0800aaad 	.word	0x0800aaad
 800a9fc:	0800aaad 	.word	0x0800aaad
 800aa00:	0800aaad 	.word	0x0800aaad
 800aa04:	0800aaad 	.word	0x0800aaad
 800aa08:	0800aaad 	.word	0x0800aaad
 800aa0c:	0800aaad 	.word	0x0800aaad
 800aa10:	0800aaad 	.word	0x0800aaad
 800aa14:	0800aaad 	.word	0x0800aaad
 800aa18:	0800aaad 	.word	0x0800aaad
 800aa1c:	0800aaad 	.word	0x0800aaad
 800aa20:	0800aaad 	.word	0x0800aaad
 800aa24:	0800aaad 	.word	0x0800aaad
 800aa28:	0800aaad 	.word	0x0800aaad
 800aa2c:	0800aa9f 	.word	0x0800aa9f
 800aa30:	2b40      	cmp	r3, #64	; 0x40
 800aa32:	d037      	beq.n	800aaa4 <UART_SetConfig+0xa28>
 800aa34:	e03a      	b.n	800aaac <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa36:	f7fd f801 	bl	8007a3c <HAL_RCC_GetPCLK1Freq>
 800aa3a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aa3c:	e03c      	b.n	800aab8 <UART_SetConfig+0xa3c>
 800aa3e:	bf00      	nop
 800aa40:	003d0900 	.word	0x003d0900
 800aa44:	0800dac0 	.word	0x0800dac0
 800aa48:	58024400 	.word	0x58024400
 800aa4c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa50:	f7fd f80a 	bl	8007a68 <HAL_RCC_GetPCLK2Freq>
 800aa54:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aa56:	e02f      	b.n	800aab8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa58:	f107 0314 	add.w	r3, r7, #20
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7fd ffb1 	bl	80089c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa66:	e027      	b.n	800aab8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa68:	f107 0308 	add.w	r3, r7, #8
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7fe f8fd 	bl	8008c6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa76:	e01f      	b.n	800aab8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa78:	4b2c      	ldr	r3, [pc, #176]	; (800ab2c <UART_SetConfig+0xab0>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 0320 	and.w	r3, r3, #32
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d009      	beq.n	800aa98 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa84:	4b29      	ldr	r3, [pc, #164]	; (800ab2c <UART_SetConfig+0xab0>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	08db      	lsrs	r3, r3, #3
 800aa8a:	f003 0303 	and.w	r3, r3, #3
 800aa8e:	4a28      	ldr	r2, [pc, #160]	; (800ab30 <UART_SetConfig+0xab4>)
 800aa90:	fa22 f303 	lsr.w	r3, r2, r3
 800aa94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa96:	e00f      	b.n	800aab8 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800aa98:	4b25      	ldr	r3, [pc, #148]	; (800ab30 <UART_SetConfig+0xab4>)
 800aa9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aa9c:	e00c      	b.n	800aab8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa9e:	4b25      	ldr	r3, [pc, #148]	; (800ab34 <UART_SetConfig+0xab8>)
 800aaa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aaa2:	e009      	b.n	800aab8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aaa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aaaa:	e005      	b.n	800aab8 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800aaac:	2300      	movs	r3, #0
 800aaae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aab0:	2301      	movs	r3, #1
 800aab2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800aab6:	bf00      	nop
    }

    if (pclk != 0U)
 800aab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d021      	beq.n	800ab02 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac2:	4a1d      	ldr	r2, [pc, #116]	; (800ab38 <UART_SetConfig+0xabc>)
 800aac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aac8:	461a      	mov	r2, r3
 800aaca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aacc:	fbb3 f2f2 	udiv	r2, r3, r2
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	085b      	lsrs	r3, r3, #1
 800aad6:	441a      	add	r2, r3
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	fbb2 f3f3 	udiv	r3, r2, r3
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae6:	2b0f      	cmp	r3, #15
 800aae8:	d908      	bls.n	800aafc <UART_SetConfig+0xa80>
 800aaea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaf0:	d204      	bcs.n	800aafc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaf8:	60da      	str	r2, [r3, #12]
 800aafa:	e002      	b.n	800ab02 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800aafc:	2301      	movs	r3, #1
 800aafe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2201      	movs	r2, #1
 800ab06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2200      	movs	r2, #0
 800ab16:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ab1e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3738      	adds	r7, #56	; 0x38
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bdb0      	pop	{r4, r5, r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	58024400 	.word	0x58024400
 800ab30:	03d09000 	.word	0x03d09000
 800ab34:	003d0900 	.word	0x003d0900
 800ab38:	0800dac0 	.word	0x0800dac0

0800ab3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab48:	f003 0301 	and.w	r3, r3, #1
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00a      	beq.n	800ab66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	430a      	orrs	r2, r1
 800ab64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab6a:	f003 0302 	and.w	r3, r3, #2
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00a      	beq.n	800ab88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	430a      	orrs	r2, r1
 800ab86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab8c:	f003 0304 	and.w	r3, r3, #4
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00a      	beq.n	800abaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	430a      	orrs	r2, r1
 800aba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abae:	f003 0308 	and.w	r3, r3, #8
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d00a      	beq.n	800abcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	430a      	orrs	r2, r1
 800abca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd0:	f003 0310 	and.w	r3, r3, #16
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d00a      	beq.n	800abee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	430a      	orrs	r2, r1
 800abec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf2:	f003 0320 	and.w	r3, r3, #32
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00a      	beq.n	800ac10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	689b      	ldr	r3, [r3, #8]
 800ac00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	430a      	orrs	r2, r1
 800ac0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d01a      	beq.n	800ac52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	430a      	orrs	r2, r1
 800ac30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac3a:	d10a      	bne.n	800ac52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	430a      	orrs	r2, r1
 800ac50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00a      	beq.n	800ac74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	430a      	orrs	r2, r1
 800ac72:	605a      	str	r2, [r3, #4]
  }
}
 800ac74:	bf00      	nop
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b086      	sub	sp, #24
 800ac84:	af02      	add	r7, sp, #8
 800ac86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac90:	f7f8 fd88 	bl	80037a4 <HAL_GetTick>
 800ac94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f003 0308 	and.w	r3, r3, #8
 800aca0:	2b08      	cmp	r3, #8
 800aca2:	d10e      	bne.n	800acc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aca4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aca8:	9300      	str	r3, [sp, #0]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2200      	movs	r2, #0
 800acae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 f82f 	bl	800ad16 <UART_WaitOnFlagUntilTimeout>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d001      	beq.n	800acc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acbe:	2303      	movs	r3, #3
 800acc0:	e025      	b.n	800ad0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f003 0304 	and.w	r3, r3, #4
 800accc:	2b04      	cmp	r3, #4
 800acce:	d10e      	bne.n	800acee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800acd4:	9300      	str	r3, [sp, #0]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2200      	movs	r2, #0
 800acda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 f819 	bl	800ad16 <UART_WaitOnFlagUntilTimeout>
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d001      	beq.n	800acee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acea:	2303      	movs	r3, #3
 800acec:	e00f      	b.n	800ad0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2220      	movs	r2, #32
 800acf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2220      	movs	r2, #32
 800acfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2200      	movs	r2, #0
 800ad08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad0c:	2300      	movs	r3, #0
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3710      	adds	r7, #16
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b084      	sub	sp, #16
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	60f8      	str	r0, [r7, #12]
 800ad1e:	60b9      	str	r1, [r7, #8]
 800ad20:	603b      	str	r3, [r7, #0]
 800ad22:	4613      	mov	r3, r2
 800ad24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad26:	e062      	b.n	800adee <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad2e:	d05e      	beq.n	800adee <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad30:	f7f8 fd38 	bl	80037a4 <HAL_GetTick>
 800ad34:	4602      	mov	r2, r0
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	1ad3      	subs	r3, r2, r3
 800ad3a:	69ba      	ldr	r2, [r7, #24]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d302      	bcc.n	800ad46 <UART_WaitOnFlagUntilTimeout+0x30>
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d11d      	bne.n	800ad82 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ad54:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	689a      	ldr	r2, [r3, #8]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f022 0201 	bic.w	r2, r2, #1
 800ad64:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2220      	movs	r2, #32
 800ad6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2220      	movs	r2, #32
 800ad72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ad7e:	2303      	movs	r3, #3
 800ad80:	e045      	b.n	800ae0e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f003 0304 	and.w	r3, r3, #4
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d02e      	beq.n	800adee <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	69db      	ldr	r3, [r3, #28]
 800ad96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad9e:	d126      	bne.n	800adee <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ada8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800adb8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	689a      	ldr	r2, [r3, #8]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f022 0201 	bic.w	r2, r2, #1
 800adc8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2220      	movs	r2, #32
 800adce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2220      	movs	r2, #32
 800add6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2220      	movs	r2, #32
 800adde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2200      	movs	r2, #0
 800ade6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800adea:	2303      	movs	r3, #3
 800adec:	e00f      	b.n	800ae0e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	69da      	ldr	r2, [r3, #28]
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	4013      	ands	r3, r2
 800adf8:	68ba      	ldr	r2, [r7, #8]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	bf0c      	ite	eq
 800adfe:	2301      	moveq	r3, #1
 800ae00:	2300      	movne	r3, #0
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	461a      	mov	r2, r3
 800ae06:	79fb      	ldrb	r3, [r7, #7]
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d08d      	beq.n	800ad28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae0c:	2300      	movs	r3, #0
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
	...

0800ae18 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	60f8      	str	r0, [r7, #12]
 800ae20:	60b9      	str	r1, [r7, #8]
 800ae22:	4613      	mov	r3, r2
 800ae24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	68ba      	ldr	r2, [r7, #8]
 800ae2a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	88fa      	ldrh	r2, [r7, #6]
 800ae30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2200      	movs	r2, #0
 800ae38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2222      	movs	r2, #34	; 0x22
 800ae40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d02c      	beq.n	800aea6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae50:	4a25      	ldr	r2, [pc, #148]	; (800aee8 <UART_Start_Receive_DMA+0xd0>)
 800ae52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae58:	4a24      	ldr	r2, [pc, #144]	; (800aeec <UART_Start_Receive_DMA+0xd4>)
 800ae5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae60:	4a23      	ldr	r2, [pc, #140]	; (800aef0 <UART_Start_Receive_DMA+0xd8>)
 800ae62:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae68:	2200      	movs	r2, #0
 800ae6a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	3324      	adds	r3, #36	; 0x24
 800ae76:	4619      	mov	r1, r3
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	88fb      	ldrh	r3, [r7, #6]
 800ae80:	f7f9 f908 	bl	8004094 <HAL_DMA_Start_IT>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d00d      	beq.n	800aea6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2210      	movs	r2, #16
 800ae8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2220      	movs	r2, #32
 800ae9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800aea2:	2301      	movs	r3, #1
 800aea4:	e01c      	b.n	800aee0 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aebc:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	689a      	ldr	r2, [r3, #8]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f042 0201 	orr.w	r2, r2, #1
 800aecc:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	689a      	ldr	r2, [r3, #8]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aedc:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	0800b001 	.word	0x0800b001
 800aeec:	0800b097 	.word	0x0800b097
 800aef0:	0800b0cf 	.word	0x0800b0cf

0800aef4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800af0a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	689a      	ldr	r2, [r3, #8]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800af1a:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2220      	movs	r2, #32
 800af20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800af24:	bf00      	nop
 800af26:	370c      	adds	r7, #12
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af30:	b480      	push	{r7}
 800af32:	b083      	sub	sp, #12
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800af46:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	6899      	ldr	r1, [r3, #8]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	4b0f      	ldr	r3, [pc, #60]	; (800af90 <UART_EndRxTransfer+0x60>)
 800af54:	400b      	ands	r3, r1
 800af56:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d107      	bne.n	800af70 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f022 0210 	bic.w	r2, r2, #16
 800af6e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2220      	movs	r2, #32
 800af74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	671a      	str	r2, [r3, #112]	; 0x70
}
 800af84:	bf00      	nop
 800af86:	370c      	adds	r7, #12
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr
 800af90:	effffffe 	.word	0xeffffffe

0800af94 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	69db      	ldr	r3, [r3, #28]
 800afa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afaa:	d014      	beq.n	800afd6 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	689a      	ldr	r2, [r3, #8]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800afc2:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afd2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800afd4:	e002      	b.n	800afdc <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800afd6:	68f8      	ldr	r0, [r7, #12]
 800afd8:	f7ff f812 	bl	800a000 <HAL_UART_TxCpltCallback>
}
 800afdc:	bf00      	nop
 800afde:	3710      	adds	r7, #16
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aff2:	68f8      	ldr	r0, [r7, #12]
 800aff4:	f7ff f80e 	bl	800a014 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aff8:	bf00      	nop
 800affa:	3710      	adds	r7, #16
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b00c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	69db      	ldr	r3, [r3, #28]
 800b012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b016:	d02b      	beq.n	800b070 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b02e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	689a      	ldr	r2, [r3, #8]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f022 0201 	bic.w	r2, r2, #1
 800b03e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	689a      	ldr	r2, [r3, #8]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b04e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2220      	movs	r2, #32
 800b054:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d107      	bne.n	800b070 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	681a      	ldr	r2, [r3, #0]
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f022 0210 	bic.w	r2, r2, #16
 800b06e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b074:	2b01      	cmp	r3, #1
 800b076:	d107      	bne.n	800b088 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b07e:	4619      	mov	r1, r3
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f7fe ffef 	bl	800a064 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b086:	e002      	b.n	800b08e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f7fe ffcd 	bl	800a028 <HAL_UART_RxCpltCallback>
}
 800b08e:	bf00      	nop
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b096:	b580      	push	{r7, lr}
 800b098:	b084      	sub	sp, #16
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d109      	bne.n	800b0c0 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b0b2:	085b      	lsrs	r3, r3, #1
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	68f8      	ldr	r0, [r7, #12]
 800b0ba:	f7fe ffd3 	bl	800a064 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0be:	e002      	b.n	800b0c6 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f7fe ffbb 	bl	800a03c <HAL_UART_RxHalfCpltCallback>
}
 800b0c6:	bf00      	nop
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b086      	sub	sp, #24
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0da:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0e2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0ea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0f6:	2b80      	cmp	r3, #128	; 0x80
 800b0f8:	d109      	bne.n	800b10e <UART_DMAError+0x40>
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	2b21      	cmp	r3, #33	; 0x21
 800b0fe:	d106      	bne.n	800b10e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	2200      	movs	r2, #0
 800b104:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b108:	6978      	ldr	r0, [r7, #20]
 800b10a:	f7ff fef3 	bl	800aef4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b118:	2b40      	cmp	r3, #64	; 0x40
 800b11a:	d109      	bne.n	800b130 <UART_DMAError+0x62>
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2b22      	cmp	r3, #34	; 0x22
 800b120:	d106      	bne.n	800b130 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	2200      	movs	r2, #0
 800b126:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b12a:	6978      	ldr	r0, [r7, #20]
 800b12c:	f7ff ff00 	bl	800af30 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b136:	f043 0210 	orr.w	r2, r3, #16
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b140:	6978      	ldr	r0, [r7, #20]
 800b142:	f7fe ff85 	bl	800a050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b146:	bf00      	nop
 800b148:	3718      	adds	r7, #24
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b14e:	b580      	push	{r7, lr}
 800b150:	b084      	sub	sp, #16
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b15a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2200      	movs	r2, #0
 800b160:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2200      	movs	r2, #0
 800b168:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b16c:	68f8      	ldr	r0, [r7, #12]
 800b16e:	f7fe ff6f 	bl	800a050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b172:	bf00      	nop
 800b174:	3710      	adds	r7, #16
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}

0800b17a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b17a:	b580      	push	{r7, lr}
 800b17c:	b082      	sub	sp, #8
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b190:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2220      	movs	r2, #32
 800b196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f7fe ff2d 	bl	800a000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1a6:	bf00      	nop
 800b1a8:	3708      	adds	r7, #8
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b1ae:	b480      	push	{r7}
 800b1b0:	b083      	sub	sp, #12
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b1b6:	bf00      	nop
 800b1b8:	370c      	adds	r7, #12
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr

0800b1c2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b1c2:	b480      	push	{r7}
 800b1c4:	b083      	sub	sp, #12
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b1ca:	bf00      	nop
 800b1cc:	370c      	adds	r7, #12
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr

0800b1d6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b1d6:	b480      	push	{r7}
 800b1d8:	b083      	sub	sp, #12
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b1de:	bf00      	nop
 800b1e0:	370c      	adds	r7, #12
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr

0800b1ea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b1ea:	b480      	push	{r7}
 800b1ec:	b085      	sub	sp, #20
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d101      	bne.n	800b200 <HAL_UARTEx_DisableFifoMode+0x16>
 800b1fc:	2302      	movs	r3, #2
 800b1fe:	e027      	b.n	800b250 <HAL_UARTEx_DisableFifoMode+0x66>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2201      	movs	r2, #1
 800b204:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2224      	movs	r2, #36	; 0x24
 800b20c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f022 0201 	bic.w	r2, r2, #1
 800b226:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b22e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	68fa      	ldr	r2, [r7, #12]
 800b23c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2220      	movs	r2, #32
 800b242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b24e:	2300      	movs	r3, #0
}
 800b250:	4618      	mov	r0, r3
 800b252:	3714      	adds	r7, #20
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d101      	bne.n	800b274 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b270:	2302      	movs	r3, #2
 800b272:	e02d      	b.n	800b2d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2201      	movs	r2, #1
 800b278:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2224      	movs	r2, #36	; 0x24
 800b280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f022 0201 	bic.w	r2, r2, #1
 800b29a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	683a      	ldr	r2, [r7, #0]
 800b2ac:	430a      	orrs	r2, r1
 800b2ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 f84f 	bl	800b354 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	68fa      	ldr	r2, [r7, #12]
 800b2bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2220      	movs	r2, #32
 800b2c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b2ce:	2300      	movs	r3, #0
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3710      	adds	r7, #16
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d101      	bne.n	800b2f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b2ec:	2302      	movs	r3, #2
 800b2ee:	e02d      	b.n	800b34c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2224      	movs	r2, #36	; 0x24
 800b2fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f022 0201 	bic.w	r2, r2, #1
 800b316:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	689b      	ldr	r3, [r3, #8]
 800b31e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	683a      	ldr	r2, [r7, #0]
 800b328:	430a      	orrs	r2, r1
 800b32a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 f811 	bl	800b354 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	68fa      	ldr	r2, [r7, #12]
 800b338:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2220      	movs	r2, #32
 800b33e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b354:	b480      	push	{r7}
 800b356:	b085      	sub	sp, #20
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b360:	2b00      	cmp	r3, #0
 800b362:	d108      	bne.n	800b376 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2201      	movs	r2, #1
 800b368:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b374:	e031      	b.n	800b3da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b376:	2310      	movs	r3, #16
 800b378:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b37a:	2310      	movs	r3, #16
 800b37c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	0e5b      	lsrs	r3, r3, #25
 800b386:	b2db      	uxtb	r3, r3
 800b388:	f003 0307 	and.w	r3, r3, #7
 800b38c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	0f5b      	lsrs	r3, r3, #29
 800b396:	b2db      	uxtb	r3, r3
 800b398:	f003 0307 	and.w	r3, r3, #7
 800b39c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b39e:	7bbb      	ldrb	r3, [r7, #14]
 800b3a0:	7b3a      	ldrb	r2, [r7, #12]
 800b3a2:	4911      	ldr	r1, [pc, #68]	; (800b3e8 <UARTEx_SetNbDataToProcess+0x94>)
 800b3a4:	5c8a      	ldrb	r2, [r1, r2]
 800b3a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b3aa:	7b3a      	ldrb	r2, [r7, #12]
 800b3ac:	490f      	ldr	r1, [pc, #60]	; (800b3ec <UARTEx_SetNbDataToProcess+0x98>)
 800b3ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3b4:	b29a      	uxth	r2, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3bc:	7bfb      	ldrb	r3, [r7, #15]
 800b3be:	7b7a      	ldrb	r2, [r7, #13]
 800b3c0:	4909      	ldr	r1, [pc, #36]	; (800b3e8 <UARTEx_SetNbDataToProcess+0x94>)
 800b3c2:	5c8a      	ldrb	r2, [r1, r2]
 800b3c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b3c8:	7b7a      	ldrb	r2, [r7, #13]
 800b3ca:	4908      	ldr	r1, [pc, #32]	; (800b3ec <UARTEx_SetNbDataToProcess+0x98>)
 800b3cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3ce:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3d2:	b29a      	uxth	r2, r3
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b3da:	bf00      	nop
 800b3dc:	3714      	adds	r7, #20
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr
 800b3e6:	bf00      	nop
 800b3e8:	0800dad8 	.word	0x0800dad8
 800b3ec:	0800dae0 	.word	0x0800dae0

0800b3f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b3fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b402:	2b84      	cmp	r3, #132	; 0x84
 800b404:	d005      	beq.n	800b412 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b406:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	4413      	add	r3, r2
 800b40e:	3303      	adds	r3, #3
 800b410:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b412:	68fb      	ldr	r3, [r7, #12]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3714      	adds	r7, #20
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b424:	f001 f84a 	bl	800c4bc <vTaskStartScheduler>
  
  return osOK;
 800b428:	2300      	movs	r3, #0
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b42e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b430:	b089      	sub	sp, #36	; 0x24
 800b432:	af04      	add	r7, sp, #16
 800b434:	6078      	str	r0, [r7, #4]
 800b436:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	695b      	ldr	r3, [r3, #20]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d020      	beq.n	800b482 <osThreadCreate+0x54>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	699b      	ldr	r3, [r3, #24]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d01c      	beq.n	800b482 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	685c      	ldr	r4, [r3, #4]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681d      	ldr	r5, [r3, #0]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	691e      	ldr	r6, [r3, #16]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7ff ffc8 	bl	800b3f0 <makeFreeRtosPriority>
 800b460:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	695b      	ldr	r3, [r3, #20]
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b46a:	9202      	str	r2, [sp, #8]
 800b46c:	9301      	str	r3, [sp, #4]
 800b46e:	9100      	str	r1, [sp, #0]
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	4632      	mov	r2, r6
 800b474:	4629      	mov	r1, r5
 800b476:	4620      	mov	r0, r4
 800b478:	f000 fe58 	bl	800c12c <xTaskCreateStatic>
 800b47c:	4603      	mov	r3, r0
 800b47e:	60fb      	str	r3, [r7, #12]
 800b480:	e01c      	b.n	800b4bc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	685c      	ldr	r4, [r3, #4]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b48e:	b29e      	uxth	r6, r3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b496:	4618      	mov	r0, r3
 800b498:	f7ff ffaa 	bl	800b3f0 <makeFreeRtosPriority>
 800b49c:	4602      	mov	r2, r0
 800b49e:	f107 030c 	add.w	r3, r7, #12
 800b4a2:	9301      	str	r3, [sp, #4]
 800b4a4:	9200      	str	r2, [sp, #0]
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	4632      	mov	r2, r6
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f000 fe9a 	bl	800c1e6 <xTaskCreate>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d001      	beq.n	800b4bc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	e000      	b.n	800b4be <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3714      	adds	r7, #20
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b4c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b084      	sub	sp, #16
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d001      	beq.n	800b4dc <osDelay+0x16>
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	e000      	b.n	800b4de <osDelay+0x18>
 800b4dc:	2301      	movs	r3, #1
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f000 ffb8 	bl	800c454 <vTaskDelay>
  
  return osOK;
 800b4e4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3710      	adds	r7, #16
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b082      	sub	sp, #8
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d007      	beq.n	800b50e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	4619      	mov	r1, r3
 800b504:	2001      	movs	r0, #1
 800b506:	f000 fa5c 	bl	800b9c2 <xQueueCreateMutexStatic>
 800b50a:	4603      	mov	r3, r0
 800b50c:	e003      	b.n	800b516 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b50e:	2001      	movs	r0, #1
 800b510:	f000 fa3f 	bl	800b992 <xQueueCreateMutex>
 800b514:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b516:	4618      	mov	r0, r3
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b51e:	b580      	push	{r7, lr}
 800b520:	b086      	sub	sp, #24
 800b522:	af02      	add	r7, sp, #8
 800b524:	6078      	str	r0, [r7, #4]
 800b526:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d00f      	beq.n	800b550 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	2b01      	cmp	r3, #1
 800b534:	d10a      	bne.n	800b54c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	2203      	movs	r2, #3
 800b53c:	9200      	str	r2, [sp, #0]
 800b53e:	2200      	movs	r2, #0
 800b540:	2100      	movs	r1, #0
 800b542:	2001      	movs	r0, #1
 800b544:	f000 f93a 	bl	800b7bc <xQueueGenericCreateStatic>
 800b548:	4603      	mov	r3, r0
 800b54a:	e016      	b.n	800b57a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b54c:	2300      	movs	r3, #0
 800b54e:	e014      	b.n	800b57a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	2b01      	cmp	r3, #1
 800b554:	d110      	bne.n	800b578 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b556:	2203      	movs	r2, #3
 800b558:	2100      	movs	r1, #0
 800b55a:	2001      	movs	r0, #1
 800b55c:	f000 f9a6 	bl	800b8ac <xQueueGenericCreate>
 800b560:	60f8      	str	r0, [r7, #12]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d005      	beq.n	800b574 <osSemaphoreCreate+0x56>
 800b568:	2300      	movs	r3, #0
 800b56a:	2200      	movs	r2, #0
 800b56c:	2100      	movs	r1, #0
 800b56e:	68f8      	ldr	r0, [r7, #12]
 800b570:	f000 fa42 	bl	800b9f8 <xQueueGenericSend>
      return sema;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	e000      	b.n	800b57a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b578:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}

0800b582 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b582:	b480      	push	{r7}
 800b584:	b083      	sub	sp, #12
 800b586:	af00      	add	r7, sp, #0
 800b588:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f103 0208 	add.w	r2, r3, #8
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f04f 32ff 	mov.w	r2, #4294967295
 800b59a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f103 0208 	add.w	r2, r3, #8
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f103 0208 	add.w	r2, r3, #8
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b5b6:	bf00      	nop
 800b5b8:	370c      	adds	r7, #12
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr

0800b5c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b5c2:	b480      	push	{r7}
 800b5c4:	b083      	sub	sp, #12
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b5d0:	bf00      	nop
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	689a      	ldr	r2, [r3, #8]
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	689b      	ldr	r3, [r3, #8]
 800b5fe:	683a      	ldr	r2, [r7, #0]
 800b600:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	683a      	ldr	r2, [r7, #0]
 800b606:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	1c5a      	adds	r2, r3, #1
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	601a      	str	r2, [r3, #0]
}
 800b618:	bf00      	nop
 800b61a:	3714      	adds	r7, #20
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b624:	b480      	push	{r7}
 800b626:	b085      	sub	sp, #20
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b63a:	d103      	bne.n	800b644 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	691b      	ldr	r3, [r3, #16]
 800b640:	60fb      	str	r3, [r7, #12]
 800b642:	e00c      	b.n	800b65e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	3308      	adds	r3, #8
 800b648:	60fb      	str	r3, [r7, #12]
 800b64a:	e002      	b.n	800b652 <vListInsert+0x2e>
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	60fb      	str	r3, [r7, #12]
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	68ba      	ldr	r2, [r7, #8]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d2f6      	bcs.n	800b64c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	685a      	ldr	r2, [r3, #4]
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	683a      	ldr	r2, [r7, #0]
 800b66c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	68fa      	ldr	r2, [r7, #12]
 800b672:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	683a      	ldr	r2, [r7, #0]
 800b678:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	687a      	ldr	r2, [r7, #4]
 800b67e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	1c5a      	adds	r2, r3, #1
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	601a      	str	r2, [r3, #0]
}
 800b68a:	bf00      	nop
 800b68c:	3714      	adds	r7, #20
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr

0800b696 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b696:	b480      	push	{r7}
 800b698:	b085      	sub	sp, #20
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	691b      	ldr	r3, [r3, #16]
 800b6a2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	687a      	ldr	r2, [r7, #4]
 800b6aa:	6892      	ldr	r2, [r2, #8]
 800b6ac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	6852      	ldr	r2, [r2, #4]
 800b6b6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	687a      	ldr	r2, [r7, #4]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d103      	bne.n	800b6ca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	689a      	ldr	r2, [r3, #8]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	1e5a      	subs	r2, r3, #1
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3714      	adds	r7, #20
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr
	...

0800b6ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d10a      	bne.n	800b716 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b704:	f383 8811 	msr	BASEPRI, r3
 800b708:	f3bf 8f6f 	isb	sy
 800b70c:	f3bf 8f4f 	dsb	sy
 800b710:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b712:	bf00      	nop
 800b714:	e7fe      	b.n	800b714 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b716:	f001 fe1d 	bl	800d354 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b722:	68f9      	ldr	r1, [r7, #12]
 800b724:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b726:	fb01 f303 	mul.w	r3, r1, r3
 800b72a:	441a      	add	r2, r3
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2200      	movs	r2, #0
 800b734:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b746:	3b01      	subs	r3, #1
 800b748:	68f9      	ldr	r1, [r7, #12]
 800b74a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b74c:	fb01 f303 	mul.w	r3, r1, r3
 800b750:	441a      	add	r2, r3
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	22ff      	movs	r2, #255	; 0xff
 800b75a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	22ff      	movs	r2, #255	; 0xff
 800b762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d114      	bne.n	800b796 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	691b      	ldr	r3, [r3, #16]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d01a      	beq.n	800b7aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	3310      	adds	r3, #16
 800b778:	4618      	mov	r0, r3
 800b77a:	f001 f8e1 	bl	800c940 <xTaskRemoveFromEventList>
 800b77e:	4603      	mov	r3, r0
 800b780:	2b00      	cmp	r3, #0
 800b782:	d012      	beq.n	800b7aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b784:	4b0c      	ldr	r3, [pc, #48]	; (800b7b8 <xQueueGenericReset+0xcc>)
 800b786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b78a:	601a      	str	r2, [r3, #0]
 800b78c:	f3bf 8f4f 	dsb	sy
 800b790:	f3bf 8f6f 	isb	sy
 800b794:	e009      	b.n	800b7aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	3310      	adds	r3, #16
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7ff fef1 	bl	800b582 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	3324      	adds	r3, #36	; 0x24
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7ff feec 	bl	800b582 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b7aa:	f001 fe03 	bl	800d3b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b7ae:	2301      	movs	r3, #1
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3710      	adds	r7, #16
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	e000ed04 	.word	0xe000ed04

0800b7bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b08e      	sub	sp, #56	; 0x38
 800b7c0:	af02      	add	r7, sp, #8
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	607a      	str	r2, [r7, #4]
 800b7c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d10a      	bne.n	800b7e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d4:	f383 8811 	msr	BASEPRI, r3
 800b7d8:	f3bf 8f6f 	isb	sy
 800b7dc:	f3bf 8f4f 	dsb	sy
 800b7e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b7e2:	bf00      	nop
 800b7e4:	e7fe      	b.n	800b7e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d10a      	bne.n	800b802 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f0:	f383 8811 	msr	BASEPRI, r3
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	f3bf 8f4f 	dsb	sy
 800b7fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b7fe:	bf00      	nop
 800b800:	e7fe      	b.n	800b800 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d002      	beq.n	800b80e <xQueueGenericCreateStatic+0x52>
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d001      	beq.n	800b812 <xQueueGenericCreateStatic+0x56>
 800b80e:	2301      	movs	r3, #1
 800b810:	e000      	b.n	800b814 <xQueueGenericCreateStatic+0x58>
 800b812:	2300      	movs	r3, #0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d10a      	bne.n	800b82e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81c:	f383 8811 	msr	BASEPRI, r3
 800b820:	f3bf 8f6f 	isb	sy
 800b824:	f3bf 8f4f 	dsb	sy
 800b828:	623b      	str	r3, [r7, #32]
}
 800b82a:	bf00      	nop
 800b82c:	e7fe      	b.n	800b82c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d102      	bne.n	800b83a <xQueueGenericCreateStatic+0x7e>
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d101      	bne.n	800b83e <xQueueGenericCreateStatic+0x82>
 800b83a:	2301      	movs	r3, #1
 800b83c:	e000      	b.n	800b840 <xQueueGenericCreateStatic+0x84>
 800b83e:	2300      	movs	r3, #0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d10a      	bne.n	800b85a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b848:	f383 8811 	msr	BASEPRI, r3
 800b84c:	f3bf 8f6f 	isb	sy
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	61fb      	str	r3, [r7, #28]
}
 800b856:	bf00      	nop
 800b858:	e7fe      	b.n	800b858 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b85a:	2348      	movs	r3, #72	; 0x48
 800b85c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	2b48      	cmp	r3, #72	; 0x48
 800b862:	d00a      	beq.n	800b87a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b868:	f383 8811 	msr	BASEPRI, r3
 800b86c:	f3bf 8f6f 	isb	sy
 800b870:	f3bf 8f4f 	dsb	sy
 800b874:	61bb      	str	r3, [r7, #24]
}
 800b876:	bf00      	nop
 800b878:	e7fe      	b.n	800b878 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b87a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b882:	2b00      	cmp	r3, #0
 800b884:	d00d      	beq.n	800b8a2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b888:	2201      	movs	r2, #1
 800b88a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b88e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b894:	9300      	str	r3, [sp, #0]
 800b896:	4613      	mov	r3, r2
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	68b9      	ldr	r1, [r7, #8]
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f000 f83f 	bl	800b920 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3730      	adds	r7, #48	; 0x30
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b08a      	sub	sp, #40	; 0x28
 800b8b0:	af02      	add	r7, sp, #8
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	4613      	mov	r3, r2
 800b8b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d10a      	bne.n	800b8d6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c4:	f383 8811 	msr	BASEPRI, r3
 800b8c8:	f3bf 8f6f 	isb	sy
 800b8cc:	f3bf 8f4f 	dsb	sy
 800b8d0:	613b      	str	r3, [r7, #16]
}
 800b8d2:	bf00      	nop
 800b8d4:	e7fe      	b.n	800b8d4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	68ba      	ldr	r2, [r7, #8]
 800b8da:	fb02 f303 	mul.w	r3, r2, r3
 800b8de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	3348      	adds	r3, #72	; 0x48
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f001 fe57 	bl	800d598 <pvPortMalloc>
 800b8ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b8ec:	69bb      	ldr	r3, [r7, #24]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d011      	beq.n	800b916 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b8f2:	69bb      	ldr	r3, [r7, #24]
 800b8f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	3348      	adds	r3, #72	; 0x48
 800b8fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b8fc:	69bb      	ldr	r3, [r7, #24]
 800b8fe:	2200      	movs	r2, #0
 800b900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b904:	79fa      	ldrb	r2, [r7, #7]
 800b906:	69bb      	ldr	r3, [r7, #24]
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	4613      	mov	r3, r2
 800b90c:	697a      	ldr	r2, [r7, #20]
 800b90e:	68b9      	ldr	r1, [r7, #8]
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	f000 f805 	bl	800b920 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b916:	69bb      	ldr	r3, [r7, #24]
	}
 800b918:	4618      	mov	r0, r3
 800b91a:	3720      	adds	r7, #32
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	607a      	str	r2, [r7, #4]
 800b92c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d103      	bne.n	800b93c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b934:	69bb      	ldr	r3, [r7, #24]
 800b936:	69ba      	ldr	r2, [r7, #24]
 800b938:	601a      	str	r2, [r3, #0]
 800b93a:	e002      	b.n	800b942 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b93c:	69bb      	ldr	r3, [r7, #24]
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b942:	69bb      	ldr	r3, [r7, #24]
 800b944:	68fa      	ldr	r2, [r7, #12]
 800b946:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	68ba      	ldr	r2, [r7, #8]
 800b94c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b94e:	2101      	movs	r1, #1
 800b950:	69b8      	ldr	r0, [r7, #24]
 800b952:	f7ff fecb 	bl	800b6ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b956:	bf00      	nop
 800b958:	3710      	adds	r7, #16
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}

0800b95e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b95e:	b580      	push	{r7, lr}
 800b960:	b082      	sub	sp, #8
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00e      	beq.n	800b98a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2200      	movs	r2, #0
 800b976:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2200      	movs	r2, #0
 800b97c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b97e:	2300      	movs	r3, #0
 800b980:	2200      	movs	r2, #0
 800b982:	2100      	movs	r1, #0
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 f837 	bl	800b9f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b98a:	bf00      	nop
 800b98c:	3708      	adds	r7, #8
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b992:	b580      	push	{r7, lr}
 800b994:	b086      	sub	sp, #24
 800b996:	af00      	add	r7, sp, #0
 800b998:	4603      	mov	r3, r0
 800b99a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b99c:	2301      	movs	r3, #1
 800b99e:	617b      	str	r3, [r7, #20]
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b9a4:	79fb      	ldrb	r3, [r7, #7]
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	6939      	ldr	r1, [r7, #16]
 800b9aa:	6978      	ldr	r0, [r7, #20]
 800b9ac:	f7ff ff7e 	bl	800b8ac <xQueueGenericCreate>
 800b9b0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b9b2:	68f8      	ldr	r0, [r7, #12]
 800b9b4:	f7ff ffd3 	bl	800b95e <prvInitialiseMutex>

		return xNewQueue;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
	}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3718      	adds	r7, #24
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b9c2:	b580      	push	{r7, lr}
 800b9c4:	b088      	sub	sp, #32
 800b9c6:	af02      	add	r7, sp, #8
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	6039      	str	r1, [r7, #0]
 800b9cc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	617b      	str	r3, [r7, #20]
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b9d6:	79fb      	ldrb	r3, [r7, #7]
 800b9d8:	9300      	str	r3, [sp, #0]
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	6939      	ldr	r1, [r7, #16]
 800b9e0:	6978      	ldr	r0, [r7, #20]
 800b9e2:	f7ff feeb 	bl	800b7bc <xQueueGenericCreateStatic>
 800b9e6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b9e8:	68f8      	ldr	r0, [r7, #12]
 800b9ea:	f7ff ffb8 	bl	800b95e <prvInitialiseMutex>

		return xNewQueue;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
	}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3718      	adds	r7, #24
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b08e      	sub	sp, #56	; 0x38
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
 800ba04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ba06:	2300      	movs	r3, #0
 800ba08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ba0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d10a      	bne.n	800ba2a <xQueueGenericSend+0x32>
	__asm volatile
 800ba14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba18:	f383 8811 	msr	BASEPRI, r3
 800ba1c:	f3bf 8f6f 	isb	sy
 800ba20:	f3bf 8f4f 	dsb	sy
 800ba24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ba26:	bf00      	nop
 800ba28:	e7fe      	b.n	800ba28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d103      	bne.n	800ba38 <xQueueGenericSend+0x40>
 800ba30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d101      	bne.n	800ba3c <xQueueGenericSend+0x44>
 800ba38:	2301      	movs	r3, #1
 800ba3a:	e000      	b.n	800ba3e <xQueueGenericSend+0x46>
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d10a      	bne.n	800ba58 <xQueueGenericSend+0x60>
	__asm volatile
 800ba42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba46:	f383 8811 	msr	BASEPRI, r3
 800ba4a:	f3bf 8f6f 	isb	sy
 800ba4e:	f3bf 8f4f 	dsb	sy
 800ba52:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba54:	bf00      	nop
 800ba56:	e7fe      	b.n	800ba56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	2b02      	cmp	r3, #2
 800ba5c:	d103      	bne.n	800ba66 <xQueueGenericSend+0x6e>
 800ba5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d101      	bne.n	800ba6a <xQueueGenericSend+0x72>
 800ba66:	2301      	movs	r3, #1
 800ba68:	e000      	b.n	800ba6c <xQueueGenericSend+0x74>
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d10a      	bne.n	800ba86 <xQueueGenericSend+0x8e>
	__asm volatile
 800ba70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba74:	f383 8811 	msr	BASEPRI, r3
 800ba78:	f3bf 8f6f 	isb	sy
 800ba7c:	f3bf 8f4f 	dsb	sy
 800ba80:	623b      	str	r3, [r7, #32]
}
 800ba82:	bf00      	nop
 800ba84:	e7fe      	b.n	800ba84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba86:	f001 f917 	bl	800ccb8 <xTaskGetSchedulerState>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d102      	bne.n	800ba96 <xQueueGenericSend+0x9e>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d101      	bne.n	800ba9a <xQueueGenericSend+0xa2>
 800ba96:	2301      	movs	r3, #1
 800ba98:	e000      	b.n	800ba9c <xQueueGenericSend+0xa4>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d10a      	bne.n	800bab6 <xQueueGenericSend+0xbe>
	__asm volatile
 800baa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa4:	f383 8811 	msr	BASEPRI, r3
 800baa8:	f3bf 8f6f 	isb	sy
 800baac:	f3bf 8f4f 	dsb	sy
 800bab0:	61fb      	str	r3, [r7, #28]
}
 800bab2:	bf00      	nop
 800bab4:	e7fe      	b.n	800bab4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bab6:	f001 fc4d 	bl	800d354 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800baba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800babc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800babe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d302      	bcc.n	800bacc <xQueueGenericSend+0xd4>
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	2b02      	cmp	r3, #2
 800baca:	d129      	bne.n	800bb20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bacc:	683a      	ldr	r2, [r7, #0]
 800bace:	68b9      	ldr	r1, [r7, #8]
 800bad0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bad2:	f000 fa41 	bl	800bf58 <prvCopyDataToQueue>
 800bad6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800badc:	2b00      	cmp	r3, #0
 800bade:	d010      	beq.n	800bb02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae2:	3324      	adds	r3, #36	; 0x24
 800bae4:	4618      	mov	r0, r3
 800bae6:	f000 ff2b 	bl	800c940 <xTaskRemoveFromEventList>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d013      	beq.n	800bb18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800baf0:	4b3f      	ldr	r3, [pc, #252]	; (800bbf0 <xQueueGenericSend+0x1f8>)
 800baf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baf6:	601a      	str	r2, [r3, #0]
 800baf8:	f3bf 8f4f 	dsb	sy
 800bafc:	f3bf 8f6f 	isb	sy
 800bb00:	e00a      	b.n	800bb18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d007      	beq.n	800bb18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bb08:	4b39      	ldr	r3, [pc, #228]	; (800bbf0 <xQueueGenericSend+0x1f8>)
 800bb0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb0e:	601a      	str	r2, [r3, #0]
 800bb10:	f3bf 8f4f 	dsb	sy
 800bb14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bb18:	f001 fc4c 	bl	800d3b4 <vPortExitCritical>
				return pdPASS;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	e063      	b.n	800bbe8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d103      	bne.n	800bb2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb26:	f001 fc45 	bl	800d3b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	e05c      	b.n	800bbe8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d106      	bne.n	800bb42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb34:	f107 0314 	add.w	r3, r7, #20
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f000 ff63 	bl	800ca04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb42:	f001 fc37 	bl	800d3b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb46:	f000 fd19 	bl	800c57c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb4a:	f001 fc03 	bl	800d354 <vPortEnterCritical>
 800bb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb54:	b25b      	sxtb	r3, r3
 800bb56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb5a:	d103      	bne.n	800bb64 <xQueueGenericSend+0x16c>
 800bb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb5e:	2200      	movs	r2, #0
 800bb60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb6a:	b25b      	sxtb	r3, r3
 800bb6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb70:	d103      	bne.n	800bb7a <xQueueGenericSend+0x182>
 800bb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb74:	2200      	movs	r2, #0
 800bb76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb7a:	f001 fc1b 	bl	800d3b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb7e:	1d3a      	adds	r2, r7, #4
 800bb80:	f107 0314 	add.w	r3, r7, #20
 800bb84:	4611      	mov	r1, r2
 800bb86:	4618      	mov	r0, r3
 800bb88:	f000 ff52 	bl	800ca30 <xTaskCheckForTimeOut>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d124      	bne.n	800bbdc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bb92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb94:	f000 fab2 	bl	800c0fc <prvIsQueueFull>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d018      	beq.n	800bbd0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba0:	3310      	adds	r3, #16
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	4611      	mov	r1, r2
 800bba6:	4618      	mov	r0, r3
 800bba8:	f000 fea6 	bl	800c8f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bbac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbae:	f000 fa3d 	bl	800c02c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bbb2:	f000 fcf1 	bl	800c598 <xTaskResumeAll>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	f47f af7c 	bne.w	800bab6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bbbe:	4b0c      	ldr	r3, [pc, #48]	; (800bbf0 <xQueueGenericSend+0x1f8>)
 800bbc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbc4:	601a      	str	r2, [r3, #0]
 800bbc6:	f3bf 8f4f 	dsb	sy
 800bbca:	f3bf 8f6f 	isb	sy
 800bbce:	e772      	b.n	800bab6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bbd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbd2:	f000 fa2b 	bl	800c02c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bbd6:	f000 fcdf 	bl	800c598 <xTaskResumeAll>
 800bbda:	e76c      	b.n	800bab6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bbdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbde:	f000 fa25 	bl	800c02c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bbe2:	f000 fcd9 	bl	800c598 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bbe6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3738      	adds	r7, #56	; 0x38
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	e000ed04 	.word	0xe000ed04

0800bbf4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b08e      	sub	sp, #56	; 0x38
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d10a      	bne.n	800bc1e <xQueueGiveFromISR+0x2a>
	__asm volatile
 800bc08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc0c:	f383 8811 	msr	BASEPRI, r3
 800bc10:	f3bf 8f6f 	isb	sy
 800bc14:	f3bf 8f4f 	dsb	sy
 800bc18:	623b      	str	r3, [r7, #32]
}
 800bc1a:	bf00      	nop
 800bc1c:	e7fe      	b.n	800bc1c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d00a      	beq.n	800bc3c <xQueueGiveFromISR+0x48>
	__asm volatile
 800bc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2a:	f383 8811 	msr	BASEPRI, r3
 800bc2e:	f3bf 8f6f 	isb	sy
 800bc32:	f3bf 8f4f 	dsb	sy
 800bc36:	61fb      	str	r3, [r7, #28]
}
 800bc38:	bf00      	nop
 800bc3a:	e7fe      	b.n	800bc3a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d103      	bne.n	800bc4c <xQueueGiveFromISR+0x58>
 800bc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc46:	689b      	ldr	r3, [r3, #8]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d101      	bne.n	800bc50 <xQueueGiveFromISR+0x5c>
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e000      	b.n	800bc52 <xQueueGiveFromISR+0x5e>
 800bc50:	2300      	movs	r3, #0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d10a      	bne.n	800bc6c <xQueueGiveFromISR+0x78>
	__asm volatile
 800bc56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc5a:	f383 8811 	msr	BASEPRI, r3
 800bc5e:	f3bf 8f6f 	isb	sy
 800bc62:	f3bf 8f4f 	dsb	sy
 800bc66:	61bb      	str	r3, [r7, #24]
}
 800bc68:	bf00      	nop
 800bc6a:	e7fe      	b.n	800bc6a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc6c:	f001 fc54 	bl	800d518 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bc70:	f3ef 8211 	mrs	r2, BASEPRI
 800bc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc78:	f383 8811 	msr	BASEPRI, r3
 800bc7c:	f3bf 8f6f 	isb	sy
 800bc80:	f3bf 8f4f 	dsb	sy
 800bc84:	617a      	str	r2, [r7, #20]
 800bc86:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bc88:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc90:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d22b      	bcs.n	800bcf4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca8:	1c5a      	adds	r2, r3, #1
 800bcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcac:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bcae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bcb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcb6:	d112      	bne.n	800bcde <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bcb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d016      	beq.n	800bcee <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc2:	3324      	adds	r3, #36	; 0x24
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f000 fe3b 	bl	800c940 <xTaskRemoveFromEventList>
 800bcca:	4603      	mov	r3, r0
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d00e      	beq.n	800bcee <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d00b      	beq.n	800bcee <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	2201      	movs	r2, #1
 800bcda:	601a      	str	r2, [r3, #0]
 800bcdc:	e007      	b.n	800bcee <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bcde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bce2:	3301      	adds	r3, #1
 800bce4:	b2db      	uxtb	r3, r3
 800bce6:	b25a      	sxtb	r2, r3
 800bce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	637b      	str	r3, [r7, #52]	; 0x34
 800bcf2:	e001      	b.n	800bcf8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	637b      	str	r3, [r7, #52]	; 0x34
 800bcf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcfa:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bd02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3738      	adds	r7, #56	; 0x38
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
	...

0800bd10 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b08e      	sub	sp, #56	; 0x38
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bd22:	2300      	movs	r3, #0
 800bd24:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d10a      	bne.n	800bd42 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd30:	f383 8811 	msr	BASEPRI, r3
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	f3bf 8f4f 	dsb	sy
 800bd3c:	623b      	str	r3, [r7, #32]
}
 800bd3e:	bf00      	nop
 800bd40:	e7fe      	b.n	800bd40 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00a      	beq.n	800bd60 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd4e:	f383 8811 	msr	BASEPRI, r3
 800bd52:	f3bf 8f6f 	isb	sy
 800bd56:	f3bf 8f4f 	dsb	sy
 800bd5a:	61fb      	str	r3, [r7, #28]
}
 800bd5c:	bf00      	nop
 800bd5e:	e7fe      	b.n	800bd5e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd60:	f000 ffaa 	bl	800ccb8 <xTaskGetSchedulerState>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d102      	bne.n	800bd70 <xQueueSemaphoreTake+0x60>
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d101      	bne.n	800bd74 <xQueueSemaphoreTake+0x64>
 800bd70:	2301      	movs	r3, #1
 800bd72:	e000      	b.n	800bd76 <xQueueSemaphoreTake+0x66>
 800bd74:	2300      	movs	r3, #0
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d10a      	bne.n	800bd90 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7e:	f383 8811 	msr	BASEPRI, r3
 800bd82:	f3bf 8f6f 	isb	sy
 800bd86:	f3bf 8f4f 	dsb	sy
 800bd8a:	61bb      	str	r3, [r7, #24]
}
 800bd8c:	bf00      	nop
 800bd8e:	e7fe      	b.n	800bd8e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd90:	f001 fae0 	bl	800d354 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd98:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d024      	beq.n	800bdea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda2:	1e5a      	subs	r2, r3, #1
 800bda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d104      	bne.n	800bdba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bdb0:	f001 f92a 	bl	800d008 <pvTaskIncrementMutexHeldCount>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdbc:	691b      	ldr	r3, [r3, #16]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d00f      	beq.n	800bde2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc4:	3310      	adds	r3, #16
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f000 fdba 	bl	800c940 <xTaskRemoveFromEventList>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d007      	beq.n	800bde2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bdd2:	4b54      	ldr	r3, [pc, #336]	; (800bf24 <xQueueSemaphoreTake+0x214>)
 800bdd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdd8:	601a      	str	r2, [r3, #0]
 800bdda:	f3bf 8f4f 	dsb	sy
 800bdde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bde2:	f001 fae7 	bl	800d3b4 <vPortExitCritical>
				return pdPASS;
 800bde6:	2301      	movs	r3, #1
 800bde8:	e097      	b.n	800bf1a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d111      	bne.n	800be14 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d00a      	beq.n	800be0c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bdf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfa:	f383 8811 	msr	BASEPRI, r3
 800bdfe:	f3bf 8f6f 	isb	sy
 800be02:	f3bf 8f4f 	dsb	sy
 800be06:	617b      	str	r3, [r7, #20]
}
 800be08:	bf00      	nop
 800be0a:	e7fe      	b.n	800be0a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800be0c:	f001 fad2 	bl	800d3b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be10:	2300      	movs	r3, #0
 800be12:	e082      	b.n	800bf1a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be16:	2b00      	cmp	r3, #0
 800be18:	d106      	bne.n	800be28 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be1a:	f107 030c 	add.w	r3, r7, #12
 800be1e:	4618      	mov	r0, r3
 800be20:	f000 fdf0 	bl	800ca04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be24:	2301      	movs	r3, #1
 800be26:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be28:	f001 fac4 	bl	800d3b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be2c:	f000 fba6 	bl	800c57c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be30:	f001 fa90 	bl	800d354 <vPortEnterCritical>
 800be34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be3a:	b25b      	sxtb	r3, r3
 800be3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be40:	d103      	bne.n	800be4a <xQueueSemaphoreTake+0x13a>
 800be42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be44:	2200      	movs	r2, #0
 800be46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be50:	b25b      	sxtb	r3, r3
 800be52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be56:	d103      	bne.n	800be60 <xQueueSemaphoreTake+0x150>
 800be58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be5a:	2200      	movs	r2, #0
 800be5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be60:	f001 faa8 	bl	800d3b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be64:	463a      	mov	r2, r7
 800be66:	f107 030c 	add.w	r3, r7, #12
 800be6a:	4611      	mov	r1, r2
 800be6c:	4618      	mov	r0, r3
 800be6e:	f000 fddf 	bl	800ca30 <xTaskCheckForTimeOut>
 800be72:	4603      	mov	r3, r0
 800be74:	2b00      	cmp	r3, #0
 800be76:	d132      	bne.n	800bede <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be7a:	f000 f929 	bl	800c0d0 <prvIsQueueEmpty>
 800be7e:	4603      	mov	r3, r0
 800be80:	2b00      	cmp	r3, #0
 800be82:	d026      	beq.n	800bed2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d109      	bne.n	800bea0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800be8c:	f001 fa62 	bl	800d354 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800be90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be92:	689b      	ldr	r3, [r3, #8]
 800be94:	4618      	mov	r0, r3
 800be96:	f000 ff2d 	bl	800ccf4 <xTaskPriorityInherit>
 800be9a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800be9c:	f001 fa8a 	bl	800d3b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea2:	3324      	adds	r3, #36	; 0x24
 800bea4:	683a      	ldr	r2, [r7, #0]
 800bea6:	4611      	mov	r1, r2
 800bea8:	4618      	mov	r0, r3
 800beaa:	f000 fd25 	bl	800c8f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800beae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800beb0:	f000 f8bc 	bl	800c02c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800beb4:	f000 fb70 	bl	800c598 <xTaskResumeAll>
 800beb8:	4603      	mov	r3, r0
 800beba:	2b00      	cmp	r3, #0
 800bebc:	f47f af68 	bne.w	800bd90 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800bec0:	4b18      	ldr	r3, [pc, #96]	; (800bf24 <xQueueSemaphoreTake+0x214>)
 800bec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bec6:	601a      	str	r2, [r3, #0]
 800bec8:	f3bf 8f4f 	dsb	sy
 800becc:	f3bf 8f6f 	isb	sy
 800bed0:	e75e      	b.n	800bd90 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bed2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bed4:	f000 f8aa 	bl	800c02c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bed8:	f000 fb5e 	bl	800c598 <xTaskResumeAll>
 800bedc:	e758      	b.n	800bd90 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bede:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bee0:	f000 f8a4 	bl	800c02c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bee4:	f000 fb58 	bl	800c598 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bee8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800beea:	f000 f8f1 	bl	800c0d0 <prvIsQueueEmpty>
 800beee:	4603      	mov	r3, r0
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	f43f af4d 	beq.w	800bd90 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d00d      	beq.n	800bf18 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800befc:	f001 fa2a 	bl	800d354 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bf00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf02:	f000 f811 	bl	800bf28 <prvGetDisinheritPriorityAfterTimeout>
 800bf06:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f000 ffec 	bl	800ceec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bf14:	f001 fa4e 	bl	800d3b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bf18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3738      	adds	r7, #56	; 0x38
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	e000ed04 	.word	0xe000ed04

0800bf28 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bf28:	b480      	push	{r7}
 800bf2a:	b085      	sub	sp, #20
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d006      	beq.n	800bf46 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f1c3 0307 	rsb	r3, r3, #7
 800bf42:	60fb      	str	r3, [r7, #12]
 800bf44:	e001      	b.n	800bf4a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bf46:	2300      	movs	r3, #0
 800bf48:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
	}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3714      	adds	r7, #20
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr

0800bf58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b086      	sub	sp, #24
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	60b9      	str	r1, [r7, #8]
 800bf62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bf64:	2300      	movs	r3, #0
 800bf66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d10d      	bne.n	800bf92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d14d      	bne.n	800c01a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	4618      	mov	r0, r3
 800bf84:	f000 ff2c 	bl	800cde0 <xTaskPriorityDisinherit>
 800bf88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	609a      	str	r2, [r3, #8]
 800bf90:	e043      	b.n	800c01a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d119      	bne.n	800bfcc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	6858      	ldr	r0, [r3, #4]
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	68b9      	ldr	r1, [r7, #8]
 800bfa4:	f001 fd06 	bl	800d9b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	685a      	ldr	r2, [r3, #4]
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb0:	441a      	add	r2, r3
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	685a      	ldr	r2, [r3, #4]
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d32b      	bcc.n	800c01a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	605a      	str	r2, [r3, #4]
 800bfca:	e026      	b.n	800c01a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	68d8      	ldr	r0, [r3, #12]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	68b9      	ldr	r1, [r7, #8]
 800bfd8:	f001 fcec 	bl	800d9b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	68da      	ldr	r2, [r3, #12]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe4:	425b      	negs	r3, r3
 800bfe6:	441a      	add	r2, r3
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	68da      	ldr	r2, [r3, #12]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d207      	bcs.n	800c008 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	689a      	ldr	r2, [r3, #8]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c000:	425b      	negs	r3, r3
 800c002:	441a      	add	r2, r3
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2b02      	cmp	r3, #2
 800c00c:	d105      	bne.n	800c01a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d002      	beq.n	800c01a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	3b01      	subs	r3, #1
 800c018:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	1c5a      	adds	r2, r3, #1
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c022:	697b      	ldr	r3, [r7, #20]
}
 800c024:	4618      	mov	r0, r3
 800c026:	3718      	adds	r7, #24
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c034:	f001 f98e 	bl	800d354 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c03e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c040:	e011      	b.n	800c066 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c046:	2b00      	cmp	r3, #0
 800c048:	d012      	beq.n	800c070 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	3324      	adds	r3, #36	; 0x24
 800c04e:	4618      	mov	r0, r3
 800c050:	f000 fc76 	bl	800c940 <xTaskRemoveFromEventList>
 800c054:	4603      	mov	r3, r0
 800c056:	2b00      	cmp	r3, #0
 800c058:	d001      	beq.n	800c05e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c05a:	f000 fd4b 	bl	800caf4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c05e:	7bfb      	ldrb	r3, [r7, #15]
 800c060:	3b01      	subs	r3, #1
 800c062:	b2db      	uxtb	r3, r3
 800c064:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	dce9      	bgt.n	800c042 <prvUnlockQueue+0x16>
 800c06e:	e000      	b.n	800c072 <prvUnlockQueue+0x46>
					break;
 800c070:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	22ff      	movs	r2, #255	; 0xff
 800c076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c07a:	f001 f99b 	bl	800d3b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c07e:	f001 f969 	bl	800d354 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c088:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c08a:	e011      	b.n	800c0b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	691b      	ldr	r3, [r3, #16]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d012      	beq.n	800c0ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	3310      	adds	r3, #16
 800c098:	4618      	mov	r0, r3
 800c09a:	f000 fc51 	bl	800c940 <xTaskRemoveFromEventList>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d001      	beq.n	800c0a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c0a4:	f000 fd26 	bl	800caf4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c0a8:	7bbb      	ldrb	r3, [r7, #14]
 800c0aa:	3b01      	subs	r3, #1
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	dce9      	bgt.n	800c08c <prvUnlockQueue+0x60>
 800c0b8:	e000      	b.n	800c0bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c0ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	22ff      	movs	r2, #255	; 0xff
 800c0c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c0c4:	f001 f976 	bl	800d3b4 <vPortExitCritical>
}
 800c0c8:	bf00      	nop
 800c0ca:	3710      	adds	r7, #16
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0d8:	f001 f93c 	bl	800d354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d102      	bne.n	800c0ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	60fb      	str	r3, [r7, #12]
 800c0e8:	e001      	b.n	800c0ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0ee:	f001 f961 	bl	800d3b4 <vPortExitCritical>

	return xReturn;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3710      	adds	r7, #16
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c104:	f001 f926 	bl	800d354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c110:	429a      	cmp	r2, r3
 800c112:	d102      	bne.n	800c11a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c114:	2301      	movs	r3, #1
 800c116:	60fb      	str	r3, [r7, #12]
 800c118:	e001      	b.n	800c11e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c11a:	2300      	movs	r3, #0
 800c11c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c11e:	f001 f949 	bl	800d3b4 <vPortExitCritical>

	return xReturn;
 800c122:	68fb      	ldr	r3, [r7, #12]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3710      	adds	r7, #16
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b08e      	sub	sp, #56	; 0x38
 800c130:	af04      	add	r7, sp, #16
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	607a      	str	r2, [r7, #4]
 800c138:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d10a      	bne.n	800c156 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c144:	f383 8811 	msr	BASEPRI, r3
 800c148:	f3bf 8f6f 	isb	sy
 800c14c:	f3bf 8f4f 	dsb	sy
 800c150:	623b      	str	r3, [r7, #32]
}
 800c152:	bf00      	nop
 800c154:	e7fe      	b.n	800c154 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d10a      	bne.n	800c172 <xTaskCreateStatic+0x46>
	__asm volatile
 800c15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c160:	f383 8811 	msr	BASEPRI, r3
 800c164:	f3bf 8f6f 	isb	sy
 800c168:	f3bf 8f4f 	dsb	sy
 800c16c:	61fb      	str	r3, [r7, #28]
}
 800c16e:	bf00      	nop
 800c170:	e7fe      	b.n	800c170 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c172:	2354      	movs	r3, #84	; 0x54
 800c174:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	2b54      	cmp	r3, #84	; 0x54
 800c17a:	d00a      	beq.n	800c192 <xTaskCreateStatic+0x66>
	__asm volatile
 800c17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c180:	f383 8811 	msr	BASEPRI, r3
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	61bb      	str	r3, [r7, #24]
}
 800c18e:	bf00      	nop
 800c190:	e7fe      	b.n	800c190 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c192:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c196:	2b00      	cmp	r3, #0
 800c198:	d01e      	beq.n	800c1d8 <xTaskCreateStatic+0xac>
 800c19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d01b      	beq.n	800c1d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ac:	2202      	movs	r2, #2
 800c1ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	9303      	str	r3, [sp, #12]
 800c1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b8:	9302      	str	r3, [sp, #8]
 800c1ba:	f107 0314 	add.w	r3, r7, #20
 800c1be:	9301      	str	r3, [sp, #4]
 800c1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c2:	9300      	str	r3, [sp, #0]
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	68b9      	ldr	r1, [r7, #8]
 800c1ca:	68f8      	ldr	r0, [r7, #12]
 800c1cc:	f000 f850 	bl	800c270 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c1d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1d2:	f000 f8d5 	bl	800c380 <prvAddNewTaskToReadyList>
 800c1d6:	e001      	b.n	800c1dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c1dc:	697b      	ldr	r3, [r7, #20]
	}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3728      	adds	r7, #40	; 0x28
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}

0800c1e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b08c      	sub	sp, #48	; 0x30
 800c1ea:	af04      	add	r7, sp, #16
 800c1ec:	60f8      	str	r0, [r7, #12]
 800c1ee:	60b9      	str	r1, [r7, #8]
 800c1f0:	603b      	str	r3, [r7, #0]
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c1f6:	88fb      	ldrh	r3, [r7, #6]
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f001 f9cc 	bl	800d598 <pvPortMalloc>
 800c200:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d00e      	beq.n	800c226 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c208:	2054      	movs	r0, #84	; 0x54
 800c20a:	f001 f9c5 	bl	800d598 <pvPortMalloc>
 800c20e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d003      	beq.n	800c21e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c216:	69fb      	ldr	r3, [r7, #28]
 800c218:	697a      	ldr	r2, [r7, #20]
 800c21a:	631a      	str	r2, [r3, #48]	; 0x30
 800c21c:	e005      	b.n	800c22a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c21e:	6978      	ldr	r0, [r7, #20]
 800c220:	f001 fa86 	bl	800d730 <vPortFree>
 800c224:	e001      	b.n	800c22a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c226:	2300      	movs	r3, #0
 800c228:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c22a:	69fb      	ldr	r3, [r7, #28]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d017      	beq.n	800c260 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	2200      	movs	r2, #0
 800c234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c238:	88fa      	ldrh	r2, [r7, #6]
 800c23a:	2300      	movs	r3, #0
 800c23c:	9303      	str	r3, [sp, #12]
 800c23e:	69fb      	ldr	r3, [r7, #28]
 800c240:	9302      	str	r3, [sp, #8]
 800c242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c244:	9301      	str	r3, [sp, #4]
 800c246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c248:	9300      	str	r3, [sp, #0]
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	68b9      	ldr	r1, [r7, #8]
 800c24e:	68f8      	ldr	r0, [r7, #12]
 800c250:	f000 f80e 	bl	800c270 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c254:	69f8      	ldr	r0, [r7, #28]
 800c256:	f000 f893 	bl	800c380 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c25a:	2301      	movs	r3, #1
 800c25c:	61bb      	str	r3, [r7, #24]
 800c25e:	e002      	b.n	800c266 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c260:	f04f 33ff 	mov.w	r3, #4294967295
 800c264:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c266:	69bb      	ldr	r3, [r7, #24]
	}
 800c268:	4618      	mov	r0, r3
 800c26a:	3720      	adds	r7, #32
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b088      	sub	sp, #32
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	607a      	str	r2, [r7, #4]
 800c27c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c282:	6879      	ldr	r1, [r7, #4]
 800c284:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c288:	440b      	add	r3, r1
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	4413      	add	r3, r2
 800c28e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	f023 0307 	bic.w	r3, r3, #7
 800c296:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	f003 0307 	and.w	r3, r3, #7
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d00a      	beq.n	800c2b8 <prvInitialiseNewTask+0x48>
	__asm volatile
 800c2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a6:	f383 8811 	msr	BASEPRI, r3
 800c2aa:	f3bf 8f6f 	isb	sy
 800c2ae:	f3bf 8f4f 	dsb	sy
 800c2b2:	617b      	str	r3, [r7, #20]
}
 800c2b4:	bf00      	nop
 800c2b6:	e7fe      	b.n	800c2b6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d01f      	beq.n	800c2fe <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2be:	2300      	movs	r3, #0
 800c2c0:	61fb      	str	r3, [r7, #28]
 800c2c2:	e012      	b.n	800c2ea <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c2c4:	68ba      	ldr	r2, [r7, #8]
 800c2c6:	69fb      	ldr	r3, [r7, #28]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	7819      	ldrb	r1, [r3, #0]
 800c2cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2ce:	69fb      	ldr	r3, [r7, #28]
 800c2d0:	4413      	add	r3, r2
 800c2d2:	3334      	adds	r3, #52	; 0x34
 800c2d4:	460a      	mov	r2, r1
 800c2d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c2d8:	68ba      	ldr	r2, [r7, #8]
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	4413      	add	r3, r2
 800c2de:	781b      	ldrb	r3, [r3, #0]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d006      	beq.n	800c2f2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2e4:	69fb      	ldr	r3, [r7, #28]
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	61fb      	str	r3, [r7, #28]
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	2b0f      	cmp	r3, #15
 800c2ee:	d9e9      	bls.n	800c2c4 <prvInitialiseNewTask+0x54>
 800c2f0:	e000      	b.n	800c2f4 <prvInitialiseNewTask+0x84>
			{
				break;
 800c2f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c2fc:	e003      	b.n	800c306 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c300:	2200      	movs	r2, #0
 800c302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c308:	2b06      	cmp	r3, #6
 800c30a:	d901      	bls.n	800c310 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c30c:	2306      	movs	r3, #6
 800c30e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c314:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c31a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31e:	2200      	movs	r2, #0
 800c320:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c324:	3304      	adds	r3, #4
 800c326:	4618      	mov	r0, r3
 800c328:	f7ff f94b 	bl	800b5c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32e:	3318      	adds	r3, #24
 800c330:	4618      	mov	r0, r3
 800c332:	f7ff f946 	bl	800b5c2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c33a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33e:	f1c3 0207 	rsb	r2, r3, #7
 800c342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c344:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c34a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34e:	2200      	movs	r2, #0
 800c350:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c354:	2200      	movs	r2, #0
 800c356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c35a:	683a      	ldr	r2, [r7, #0]
 800c35c:	68f9      	ldr	r1, [r7, #12]
 800c35e:	69b8      	ldr	r0, [r7, #24]
 800c360:	f000 fecc 	bl	800d0fc <pxPortInitialiseStack>
 800c364:	4602      	mov	r2, r0
 800c366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c368:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d002      	beq.n	800c376 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c376:	bf00      	nop
 800c378:	3720      	adds	r7, #32
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
	...

0800c380 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b082      	sub	sp, #8
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c388:	f000 ffe4 	bl	800d354 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c38c:	4b2a      	ldr	r3, [pc, #168]	; (800c438 <prvAddNewTaskToReadyList+0xb8>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	3301      	adds	r3, #1
 800c392:	4a29      	ldr	r2, [pc, #164]	; (800c438 <prvAddNewTaskToReadyList+0xb8>)
 800c394:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c396:	4b29      	ldr	r3, [pc, #164]	; (800c43c <prvAddNewTaskToReadyList+0xbc>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d109      	bne.n	800c3b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c39e:	4a27      	ldr	r2, [pc, #156]	; (800c43c <prvAddNewTaskToReadyList+0xbc>)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c3a4:	4b24      	ldr	r3, [pc, #144]	; (800c438 <prvAddNewTaskToReadyList+0xb8>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d110      	bne.n	800c3ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c3ac:	f000 fbc6 	bl	800cb3c <prvInitialiseTaskLists>
 800c3b0:	e00d      	b.n	800c3ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c3b2:	4b23      	ldr	r3, [pc, #140]	; (800c440 <prvAddNewTaskToReadyList+0xc0>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d109      	bne.n	800c3ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c3ba:	4b20      	ldr	r3, [pc, #128]	; (800c43c <prvAddNewTaskToReadyList+0xbc>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d802      	bhi.n	800c3ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c3c8:	4a1c      	ldr	r2, [pc, #112]	; (800c43c <prvAddNewTaskToReadyList+0xbc>)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c3ce:	4b1d      	ldr	r3, [pc, #116]	; (800c444 <prvAddNewTaskToReadyList+0xc4>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	4a1b      	ldr	r2, [pc, #108]	; (800c444 <prvAddNewTaskToReadyList+0xc4>)
 800c3d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3dc:	2201      	movs	r2, #1
 800c3de:	409a      	lsls	r2, r3
 800c3e0:	4b19      	ldr	r3, [pc, #100]	; (800c448 <prvAddNewTaskToReadyList+0xc8>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	4a18      	ldr	r2, [pc, #96]	; (800c448 <prvAddNewTaskToReadyList+0xc8>)
 800c3e8:	6013      	str	r3, [r2, #0]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ee:	4613      	mov	r3, r2
 800c3f0:	009b      	lsls	r3, r3, #2
 800c3f2:	4413      	add	r3, r2
 800c3f4:	009b      	lsls	r3, r3, #2
 800c3f6:	4a15      	ldr	r2, [pc, #84]	; (800c44c <prvAddNewTaskToReadyList+0xcc>)
 800c3f8:	441a      	add	r2, r3
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	3304      	adds	r3, #4
 800c3fe:	4619      	mov	r1, r3
 800c400:	4610      	mov	r0, r2
 800c402:	f7ff f8eb 	bl	800b5dc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c406:	f000 ffd5 	bl	800d3b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c40a:	4b0d      	ldr	r3, [pc, #52]	; (800c440 <prvAddNewTaskToReadyList+0xc0>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d00e      	beq.n	800c430 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c412:	4b0a      	ldr	r3, [pc, #40]	; (800c43c <prvAddNewTaskToReadyList+0xbc>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d207      	bcs.n	800c430 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c420:	4b0b      	ldr	r3, [pc, #44]	; (800c450 <prvAddNewTaskToReadyList+0xd0>)
 800c422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c426:	601a      	str	r2, [r3, #0]
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c430:	bf00      	nop
 800c432:	3708      	adds	r7, #8
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	20000394 	.word	0x20000394
 800c43c:	20000294 	.word	0x20000294
 800c440:	200003a0 	.word	0x200003a0
 800c444:	200003b0 	.word	0x200003b0
 800c448:	2000039c 	.word	0x2000039c
 800c44c:	20000298 	.word	0x20000298
 800c450:	e000ed04 	.word	0xe000ed04

0800c454 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c454:	b580      	push	{r7, lr}
 800c456:	b084      	sub	sp, #16
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c45c:	2300      	movs	r3, #0
 800c45e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d017      	beq.n	800c496 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c466:	4b13      	ldr	r3, [pc, #76]	; (800c4b4 <vTaskDelay+0x60>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d00a      	beq.n	800c484 <vTaskDelay+0x30>
	__asm volatile
 800c46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c472:	f383 8811 	msr	BASEPRI, r3
 800c476:	f3bf 8f6f 	isb	sy
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	60bb      	str	r3, [r7, #8]
}
 800c480:	bf00      	nop
 800c482:	e7fe      	b.n	800c482 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c484:	f000 f87a 	bl	800c57c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c488:	2100      	movs	r1, #0
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f000 fdd0 	bl	800d030 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c490:	f000 f882 	bl	800c598 <xTaskResumeAll>
 800c494:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d107      	bne.n	800c4ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c49c:	4b06      	ldr	r3, [pc, #24]	; (800c4b8 <vTaskDelay+0x64>)
 800c49e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4a2:	601a      	str	r2, [r3, #0]
 800c4a4:	f3bf 8f4f 	dsb	sy
 800c4a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c4ac:	bf00      	nop
 800c4ae:	3710      	adds	r7, #16
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	200003bc 	.word	0x200003bc
 800c4b8:	e000ed04 	.word	0xe000ed04

0800c4bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b08a      	sub	sp, #40	; 0x28
 800c4c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c4ca:	463a      	mov	r2, r7
 800c4cc:	1d39      	adds	r1, r7, #4
 800c4ce:	f107 0308 	add.w	r3, r7, #8
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7f4 fef8 	bl	80012c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c4d8:	6839      	ldr	r1, [r7, #0]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	68ba      	ldr	r2, [r7, #8]
 800c4de:	9202      	str	r2, [sp, #8]
 800c4e0:	9301      	str	r3, [sp, #4]
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	9300      	str	r3, [sp, #0]
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	460a      	mov	r2, r1
 800c4ea:	491e      	ldr	r1, [pc, #120]	; (800c564 <vTaskStartScheduler+0xa8>)
 800c4ec:	481e      	ldr	r0, [pc, #120]	; (800c568 <vTaskStartScheduler+0xac>)
 800c4ee:	f7ff fe1d 	bl	800c12c <xTaskCreateStatic>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	4a1d      	ldr	r2, [pc, #116]	; (800c56c <vTaskStartScheduler+0xb0>)
 800c4f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c4f8:	4b1c      	ldr	r3, [pc, #112]	; (800c56c <vTaskStartScheduler+0xb0>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d002      	beq.n	800c506 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c500:	2301      	movs	r3, #1
 800c502:	617b      	str	r3, [r7, #20]
 800c504:	e001      	b.n	800c50a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c506:	2300      	movs	r3, #0
 800c508:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d116      	bne.n	800c53e <vTaskStartScheduler+0x82>
	__asm volatile
 800c510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c514:	f383 8811 	msr	BASEPRI, r3
 800c518:	f3bf 8f6f 	isb	sy
 800c51c:	f3bf 8f4f 	dsb	sy
 800c520:	613b      	str	r3, [r7, #16]
}
 800c522:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c524:	4b12      	ldr	r3, [pc, #72]	; (800c570 <vTaskStartScheduler+0xb4>)
 800c526:	f04f 32ff 	mov.w	r2, #4294967295
 800c52a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c52c:	4b11      	ldr	r3, [pc, #68]	; (800c574 <vTaskStartScheduler+0xb8>)
 800c52e:	2201      	movs	r2, #1
 800c530:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c532:	4b11      	ldr	r3, [pc, #68]	; (800c578 <vTaskStartScheduler+0xbc>)
 800c534:	2200      	movs	r2, #0
 800c536:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c538:	f000 fe6a 	bl	800d210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c53c:	e00e      	b.n	800c55c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c544:	d10a      	bne.n	800c55c <vTaskStartScheduler+0xa0>
	__asm volatile
 800c546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c54a:	f383 8811 	msr	BASEPRI, r3
 800c54e:	f3bf 8f6f 	isb	sy
 800c552:	f3bf 8f4f 	dsb	sy
 800c556:	60fb      	str	r3, [r7, #12]
}
 800c558:	bf00      	nop
 800c55a:	e7fe      	b.n	800c55a <vTaskStartScheduler+0x9e>
}
 800c55c:	bf00      	nop
 800c55e:	3718      	adds	r7, #24
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}
 800c564:	0800daa0 	.word	0x0800daa0
 800c568:	0800cb0d 	.word	0x0800cb0d
 800c56c:	200003b8 	.word	0x200003b8
 800c570:	200003b4 	.word	0x200003b4
 800c574:	200003a0 	.word	0x200003a0
 800c578:	20000398 	.word	0x20000398

0800c57c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c57c:	b480      	push	{r7}
 800c57e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c580:	4b04      	ldr	r3, [pc, #16]	; (800c594 <vTaskSuspendAll+0x18>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	3301      	adds	r3, #1
 800c586:	4a03      	ldr	r2, [pc, #12]	; (800c594 <vTaskSuspendAll+0x18>)
 800c588:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c58a:	bf00      	nop
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr
 800c594:	200003bc 	.word	0x200003bc

0800c598 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c5a6:	4b41      	ldr	r3, [pc, #260]	; (800c6ac <xTaskResumeAll+0x114>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d10a      	bne.n	800c5c4 <xTaskResumeAll+0x2c>
	__asm volatile
 800c5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b2:	f383 8811 	msr	BASEPRI, r3
 800c5b6:	f3bf 8f6f 	isb	sy
 800c5ba:	f3bf 8f4f 	dsb	sy
 800c5be:	603b      	str	r3, [r7, #0]
}
 800c5c0:	bf00      	nop
 800c5c2:	e7fe      	b.n	800c5c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c5c4:	f000 fec6 	bl	800d354 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c5c8:	4b38      	ldr	r3, [pc, #224]	; (800c6ac <xTaskResumeAll+0x114>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	3b01      	subs	r3, #1
 800c5ce:	4a37      	ldr	r2, [pc, #220]	; (800c6ac <xTaskResumeAll+0x114>)
 800c5d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5d2:	4b36      	ldr	r3, [pc, #216]	; (800c6ac <xTaskResumeAll+0x114>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d161      	bne.n	800c69e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c5da:	4b35      	ldr	r3, [pc, #212]	; (800c6b0 <xTaskResumeAll+0x118>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d05d      	beq.n	800c69e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c5e2:	e02e      	b.n	800c642 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5e4:	4b33      	ldr	r3, [pc, #204]	; (800c6b4 <xTaskResumeAll+0x11c>)
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	68db      	ldr	r3, [r3, #12]
 800c5ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	3318      	adds	r3, #24
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7ff f850 	bl	800b696 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	3304      	adds	r3, #4
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7ff f84b 	bl	800b696 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c604:	2201      	movs	r2, #1
 800c606:	409a      	lsls	r2, r3
 800c608:	4b2b      	ldr	r3, [pc, #172]	; (800c6b8 <xTaskResumeAll+0x120>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4313      	orrs	r3, r2
 800c60e:	4a2a      	ldr	r2, [pc, #168]	; (800c6b8 <xTaskResumeAll+0x120>)
 800c610:	6013      	str	r3, [r2, #0]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c616:	4613      	mov	r3, r2
 800c618:	009b      	lsls	r3, r3, #2
 800c61a:	4413      	add	r3, r2
 800c61c:	009b      	lsls	r3, r3, #2
 800c61e:	4a27      	ldr	r2, [pc, #156]	; (800c6bc <xTaskResumeAll+0x124>)
 800c620:	441a      	add	r2, r3
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	3304      	adds	r3, #4
 800c626:	4619      	mov	r1, r3
 800c628:	4610      	mov	r0, r2
 800c62a:	f7fe ffd7 	bl	800b5dc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c632:	4b23      	ldr	r3, [pc, #140]	; (800c6c0 <xTaskResumeAll+0x128>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c638:	429a      	cmp	r2, r3
 800c63a:	d302      	bcc.n	800c642 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c63c:	4b21      	ldr	r3, [pc, #132]	; (800c6c4 <xTaskResumeAll+0x12c>)
 800c63e:	2201      	movs	r2, #1
 800c640:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c642:	4b1c      	ldr	r3, [pc, #112]	; (800c6b4 <xTaskResumeAll+0x11c>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d1cc      	bne.n	800c5e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d001      	beq.n	800c654 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c650:	f000 fb12 	bl	800cc78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c654:	4b1c      	ldr	r3, [pc, #112]	; (800c6c8 <xTaskResumeAll+0x130>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d010      	beq.n	800c682 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c660:	f000 f836 	bl	800c6d0 <xTaskIncrementTick>
 800c664:	4603      	mov	r3, r0
 800c666:	2b00      	cmp	r3, #0
 800c668:	d002      	beq.n	800c670 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c66a:	4b16      	ldr	r3, [pc, #88]	; (800c6c4 <xTaskResumeAll+0x12c>)
 800c66c:	2201      	movs	r2, #1
 800c66e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	3b01      	subs	r3, #1
 800c674:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d1f1      	bne.n	800c660 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c67c:	4b12      	ldr	r3, [pc, #72]	; (800c6c8 <xTaskResumeAll+0x130>)
 800c67e:	2200      	movs	r2, #0
 800c680:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c682:	4b10      	ldr	r3, [pc, #64]	; (800c6c4 <xTaskResumeAll+0x12c>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d009      	beq.n	800c69e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c68a:	2301      	movs	r3, #1
 800c68c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c68e:	4b0f      	ldr	r3, [pc, #60]	; (800c6cc <xTaskResumeAll+0x134>)
 800c690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c694:	601a      	str	r2, [r3, #0]
 800c696:	f3bf 8f4f 	dsb	sy
 800c69a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c69e:	f000 fe89 	bl	800d3b4 <vPortExitCritical>

	return xAlreadyYielded;
 800c6a2:	68bb      	ldr	r3, [r7, #8]
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3710      	adds	r7, #16
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}
 800c6ac:	200003bc 	.word	0x200003bc
 800c6b0:	20000394 	.word	0x20000394
 800c6b4:	20000354 	.word	0x20000354
 800c6b8:	2000039c 	.word	0x2000039c
 800c6bc:	20000298 	.word	0x20000298
 800c6c0:	20000294 	.word	0x20000294
 800c6c4:	200003a8 	.word	0x200003a8
 800c6c8:	200003a4 	.word	0x200003a4
 800c6cc:	e000ed04 	.word	0xe000ed04

0800c6d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b086      	sub	sp, #24
 800c6d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6da:	4b4e      	ldr	r3, [pc, #312]	; (800c814 <xTaskIncrementTick+0x144>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	f040 808e 	bne.w	800c800 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c6e4:	4b4c      	ldr	r3, [pc, #304]	; (800c818 <xTaskIncrementTick+0x148>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c6ec:	4a4a      	ldr	r2, [pc, #296]	; (800c818 <xTaskIncrementTick+0x148>)
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d120      	bne.n	800c73a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c6f8:	4b48      	ldr	r3, [pc, #288]	; (800c81c <xTaskIncrementTick+0x14c>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d00a      	beq.n	800c718 <xTaskIncrementTick+0x48>
	__asm volatile
 800c702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c706:	f383 8811 	msr	BASEPRI, r3
 800c70a:	f3bf 8f6f 	isb	sy
 800c70e:	f3bf 8f4f 	dsb	sy
 800c712:	603b      	str	r3, [r7, #0]
}
 800c714:	bf00      	nop
 800c716:	e7fe      	b.n	800c716 <xTaskIncrementTick+0x46>
 800c718:	4b40      	ldr	r3, [pc, #256]	; (800c81c <xTaskIncrementTick+0x14c>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	60fb      	str	r3, [r7, #12]
 800c71e:	4b40      	ldr	r3, [pc, #256]	; (800c820 <xTaskIncrementTick+0x150>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	4a3e      	ldr	r2, [pc, #248]	; (800c81c <xTaskIncrementTick+0x14c>)
 800c724:	6013      	str	r3, [r2, #0]
 800c726:	4a3e      	ldr	r2, [pc, #248]	; (800c820 <xTaskIncrementTick+0x150>)
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	6013      	str	r3, [r2, #0]
 800c72c:	4b3d      	ldr	r3, [pc, #244]	; (800c824 <xTaskIncrementTick+0x154>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	3301      	adds	r3, #1
 800c732:	4a3c      	ldr	r2, [pc, #240]	; (800c824 <xTaskIncrementTick+0x154>)
 800c734:	6013      	str	r3, [r2, #0]
 800c736:	f000 fa9f 	bl	800cc78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c73a:	4b3b      	ldr	r3, [pc, #236]	; (800c828 <xTaskIncrementTick+0x158>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	693a      	ldr	r2, [r7, #16]
 800c740:	429a      	cmp	r2, r3
 800c742:	d348      	bcc.n	800c7d6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c744:	4b35      	ldr	r3, [pc, #212]	; (800c81c <xTaskIncrementTick+0x14c>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d104      	bne.n	800c758 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c74e:	4b36      	ldr	r3, [pc, #216]	; (800c828 <xTaskIncrementTick+0x158>)
 800c750:	f04f 32ff 	mov.w	r2, #4294967295
 800c754:	601a      	str	r2, [r3, #0]
					break;
 800c756:	e03e      	b.n	800c7d6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c758:	4b30      	ldr	r3, [pc, #192]	; (800c81c <xTaskIncrementTick+0x14c>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	68db      	ldr	r3, [r3, #12]
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c768:	693a      	ldr	r2, [r7, #16]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d203      	bcs.n	800c778 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c770:	4a2d      	ldr	r2, [pc, #180]	; (800c828 <xTaskIncrementTick+0x158>)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c776:	e02e      	b.n	800c7d6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	3304      	adds	r3, #4
 800c77c:	4618      	mov	r0, r3
 800c77e:	f7fe ff8a 	bl	800b696 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c786:	2b00      	cmp	r3, #0
 800c788:	d004      	beq.n	800c794 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	3318      	adds	r3, #24
 800c78e:	4618      	mov	r0, r3
 800c790:	f7fe ff81 	bl	800b696 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c798:	2201      	movs	r2, #1
 800c79a:	409a      	lsls	r2, r3
 800c79c:	4b23      	ldr	r3, [pc, #140]	; (800c82c <xTaskIncrementTick+0x15c>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	4a22      	ldr	r2, [pc, #136]	; (800c82c <xTaskIncrementTick+0x15c>)
 800c7a4:	6013      	str	r3, [r2, #0]
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	009b      	lsls	r3, r3, #2
 800c7ae:	4413      	add	r3, r2
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	4a1f      	ldr	r2, [pc, #124]	; (800c830 <xTaskIncrementTick+0x160>)
 800c7b4:	441a      	add	r2, r3
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	3304      	adds	r3, #4
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	4610      	mov	r0, r2
 800c7be:	f7fe ff0d 	bl	800b5dc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7c6:	4b1b      	ldr	r3, [pc, #108]	; (800c834 <xTaskIncrementTick+0x164>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d3b9      	bcc.n	800c744 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7d4:	e7b6      	b.n	800c744 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c7d6:	4b17      	ldr	r3, [pc, #92]	; (800c834 <xTaskIncrementTick+0x164>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7dc:	4914      	ldr	r1, [pc, #80]	; (800c830 <xTaskIncrementTick+0x160>)
 800c7de:	4613      	mov	r3, r2
 800c7e0:	009b      	lsls	r3, r3, #2
 800c7e2:	4413      	add	r3, r2
 800c7e4:	009b      	lsls	r3, r3, #2
 800c7e6:	440b      	add	r3, r1
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2b01      	cmp	r3, #1
 800c7ec:	d901      	bls.n	800c7f2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c7f2:	4b11      	ldr	r3, [pc, #68]	; (800c838 <xTaskIncrementTick+0x168>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d007      	beq.n	800c80a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	617b      	str	r3, [r7, #20]
 800c7fe:	e004      	b.n	800c80a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c800:	4b0e      	ldr	r3, [pc, #56]	; (800c83c <xTaskIncrementTick+0x16c>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	3301      	adds	r3, #1
 800c806:	4a0d      	ldr	r2, [pc, #52]	; (800c83c <xTaskIncrementTick+0x16c>)
 800c808:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c80a:	697b      	ldr	r3, [r7, #20]
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3718      	adds	r7, #24
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	200003bc 	.word	0x200003bc
 800c818:	20000398 	.word	0x20000398
 800c81c:	2000034c 	.word	0x2000034c
 800c820:	20000350 	.word	0x20000350
 800c824:	200003ac 	.word	0x200003ac
 800c828:	200003b4 	.word	0x200003b4
 800c82c:	2000039c 	.word	0x2000039c
 800c830:	20000298 	.word	0x20000298
 800c834:	20000294 	.word	0x20000294
 800c838:	200003a8 	.word	0x200003a8
 800c83c:	200003a4 	.word	0x200003a4

0800c840 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c840:	b480      	push	{r7}
 800c842:	b087      	sub	sp, #28
 800c844:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c846:	4b27      	ldr	r3, [pc, #156]	; (800c8e4 <vTaskSwitchContext+0xa4>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d003      	beq.n	800c856 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c84e:	4b26      	ldr	r3, [pc, #152]	; (800c8e8 <vTaskSwitchContext+0xa8>)
 800c850:	2201      	movs	r2, #1
 800c852:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c854:	e03f      	b.n	800c8d6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800c856:	4b24      	ldr	r3, [pc, #144]	; (800c8e8 <vTaskSwitchContext+0xa8>)
 800c858:	2200      	movs	r2, #0
 800c85a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c85c:	4b23      	ldr	r3, [pc, #140]	; (800c8ec <vTaskSwitchContext+0xac>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	fab3 f383 	clz	r3, r3
 800c868:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c86a:	7afb      	ldrb	r3, [r7, #11]
 800c86c:	f1c3 031f 	rsb	r3, r3, #31
 800c870:	617b      	str	r3, [r7, #20]
 800c872:	491f      	ldr	r1, [pc, #124]	; (800c8f0 <vTaskSwitchContext+0xb0>)
 800c874:	697a      	ldr	r2, [r7, #20]
 800c876:	4613      	mov	r3, r2
 800c878:	009b      	lsls	r3, r3, #2
 800c87a:	4413      	add	r3, r2
 800c87c:	009b      	lsls	r3, r3, #2
 800c87e:	440b      	add	r3, r1
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d10a      	bne.n	800c89c <vTaskSwitchContext+0x5c>
	__asm volatile
 800c886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88a:	f383 8811 	msr	BASEPRI, r3
 800c88e:	f3bf 8f6f 	isb	sy
 800c892:	f3bf 8f4f 	dsb	sy
 800c896:	607b      	str	r3, [r7, #4]
}
 800c898:	bf00      	nop
 800c89a:	e7fe      	b.n	800c89a <vTaskSwitchContext+0x5a>
 800c89c:	697a      	ldr	r2, [r7, #20]
 800c89e:	4613      	mov	r3, r2
 800c8a0:	009b      	lsls	r3, r3, #2
 800c8a2:	4413      	add	r3, r2
 800c8a4:	009b      	lsls	r3, r3, #2
 800c8a6:	4a12      	ldr	r2, [pc, #72]	; (800c8f0 <vTaskSwitchContext+0xb0>)
 800c8a8:	4413      	add	r3, r2
 800c8aa:	613b      	str	r3, [r7, #16]
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	685a      	ldr	r2, [r3, #4]
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	605a      	str	r2, [r3, #4]
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	685a      	ldr	r2, [r3, #4]
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	3308      	adds	r3, #8
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d104      	bne.n	800c8cc <vTaskSwitchContext+0x8c>
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	685a      	ldr	r2, [r3, #4]
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	605a      	str	r2, [r3, #4]
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	68db      	ldr	r3, [r3, #12]
 800c8d2:	4a08      	ldr	r2, [pc, #32]	; (800c8f4 <vTaskSwitchContext+0xb4>)
 800c8d4:	6013      	str	r3, [r2, #0]
}
 800c8d6:	bf00      	nop
 800c8d8:	371c      	adds	r7, #28
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e0:	4770      	bx	lr
 800c8e2:	bf00      	nop
 800c8e4:	200003bc 	.word	0x200003bc
 800c8e8:	200003a8 	.word	0x200003a8
 800c8ec:	2000039c 	.word	0x2000039c
 800c8f0:	20000298 	.word	0x20000298
 800c8f4:	20000294 	.word	0x20000294

0800c8f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d10a      	bne.n	800c91e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c90c:	f383 8811 	msr	BASEPRI, r3
 800c910:	f3bf 8f6f 	isb	sy
 800c914:	f3bf 8f4f 	dsb	sy
 800c918:	60fb      	str	r3, [r7, #12]
}
 800c91a:	bf00      	nop
 800c91c:	e7fe      	b.n	800c91c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c91e:	4b07      	ldr	r3, [pc, #28]	; (800c93c <vTaskPlaceOnEventList+0x44>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	3318      	adds	r3, #24
 800c924:	4619      	mov	r1, r3
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f7fe fe7c 	bl	800b624 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c92c:	2101      	movs	r1, #1
 800c92e:	6838      	ldr	r0, [r7, #0]
 800c930:	f000 fb7e 	bl	800d030 <prvAddCurrentTaskToDelayedList>
}
 800c934:	bf00      	nop
 800c936:	3710      	adds	r7, #16
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}
 800c93c:	20000294 	.word	0x20000294

0800c940 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b086      	sub	sp, #24
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	68db      	ldr	r3, [r3, #12]
 800c94c:	68db      	ldr	r3, [r3, #12]
 800c94e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d10a      	bne.n	800c96c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95a:	f383 8811 	msr	BASEPRI, r3
 800c95e:	f3bf 8f6f 	isb	sy
 800c962:	f3bf 8f4f 	dsb	sy
 800c966:	60fb      	str	r3, [r7, #12]
}
 800c968:	bf00      	nop
 800c96a:	e7fe      	b.n	800c96a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	3318      	adds	r3, #24
 800c970:	4618      	mov	r0, r3
 800c972:	f7fe fe90 	bl	800b696 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c976:	4b1d      	ldr	r3, [pc, #116]	; (800c9ec <xTaskRemoveFromEventList+0xac>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d11c      	bne.n	800c9b8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	3304      	adds	r3, #4
 800c982:	4618      	mov	r0, r3
 800c984:	f7fe fe87 	bl	800b696 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c98c:	2201      	movs	r2, #1
 800c98e:	409a      	lsls	r2, r3
 800c990:	4b17      	ldr	r3, [pc, #92]	; (800c9f0 <xTaskRemoveFromEventList+0xb0>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4313      	orrs	r3, r2
 800c996:	4a16      	ldr	r2, [pc, #88]	; (800c9f0 <xTaskRemoveFromEventList+0xb0>)
 800c998:	6013      	str	r3, [r2, #0]
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c99e:	4613      	mov	r3, r2
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	4413      	add	r3, r2
 800c9a4:	009b      	lsls	r3, r3, #2
 800c9a6:	4a13      	ldr	r2, [pc, #76]	; (800c9f4 <xTaskRemoveFromEventList+0xb4>)
 800c9a8:	441a      	add	r2, r3
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	3304      	adds	r3, #4
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	4610      	mov	r0, r2
 800c9b2:	f7fe fe13 	bl	800b5dc <vListInsertEnd>
 800c9b6:	e005      	b.n	800c9c4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	3318      	adds	r3, #24
 800c9bc:	4619      	mov	r1, r3
 800c9be:	480e      	ldr	r0, [pc, #56]	; (800c9f8 <xTaskRemoveFromEventList+0xb8>)
 800c9c0:	f7fe fe0c 	bl	800b5dc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9c8:	4b0c      	ldr	r3, [pc, #48]	; (800c9fc <xTaskRemoveFromEventList+0xbc>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d905      	bls.n	800c9de <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c9d6:	4b0a      	ldr	r3, [pc, #40]	; (800ca00 <xTaskRemoveFromEventList+0xc0>)
 800c9d8:	2201      	movs	r2, #1
 800c9da:	601a      	str	r2, [r3, #0]
 800c9dc:	e001      	b.n	800c9e2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c9e2:	697b      	ldr	r3, [r7, #20]
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3718      	adds	r7, #24
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}
 800c9ec:	200003bc 	.word	0x200003bc
 800c9f0:	2000039c 	.word	0x2000039c
 800c9f4:	20000298 	.word	0x20000298
 800c9f8:	20000354 	.word	0x20000354
 800c9fc:	20000294 	.word	0x20000294
 800ca00:	200003a8 	.word	0x200003a8

0800ca04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ca0c:	4b06      	ldr	r3, [pc, #24]	; (800ca28 <vTaskInternalSetTimeOutState+0x24>)
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ca14:	4b05      	ldr	r3, [pc, #20]	; (800ca2c <vTaskInternalSetTimeOutState+0x28>)
 800ca16:	681a      	ldr	r2, [r3, #0]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	605a      	str	r2, [r3, #4]
}
 800ca1c:	bf00      	nop
 800ca1e:	370c      	adds	r7, #12
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr
 800ca28:	200003ac 	.word	0x200003ac
 800ca2c:	20000398 	.word	0x20000398

0800ca30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b088      	sub	sp, #32
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d10a      	bne.n	800ca56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ca40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca44:	f383 8811 	msr	BASEPRI, r3
 800ca48:	f3bf 8f6f 	isb	sy
 800ca4c:	f3bf 8f4f 	dsb	sy
 800ca50:	613b      	str	r3, [r7, #16]
}
 800ca52:	bf00      	nop
 800ca54:	e7fe      	b.n	800ca54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d10a      	bne.n	800ca72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ca5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca60:	f383 8811 	msr	BASEPRI, r3
 800ca64:	f3bf 8f6f 	isb	sy
 800ca68:	f3bf 8f4f 	dsb	sy
 800ca6c:	60fb      	str	r3, [r7, #12]
}
 800ca6e:	bf00      	nop
 800ca70:	e7fe      	b.n	800ca70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ca72:	f000 fc6f 	bl	800d354 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ca76:	4b1d      	ldr	r3, [pc, #116]	; (800caec <xTaskCheckForTimeOut+0xbc>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	69ba      	ldr	r2, [r7, #24]
 800ca82:	1ad3      	subs	r3, r2, r3
 800ca84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca8e:	d102      	bne.n	800ca96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ca90:	2300      	movs	r3, #0
 800ca92:	61fb      	str	r3, [r7, #28]
 800ca94:	e023      	b.n	800cade <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681a      	ldr	r2, [r3, #0]
 800ca9a:	4b15      	ldr	r3, [pc, #84]	; (800caf0 <xTaskCheckForTimeOut+0xc0>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d007      	beq.n	800cab2 <xTaskCheckForTimeOut+0x82>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	69ba      	ldr	r2, [r7, #24]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d302      	bcc.n	800cab2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800caac:	2301      	movs	r3, #1
 800caae:	61fb      	str	r3, [r7, #28]
 800cab0:	e015      	b.n	800cade <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	697a      	ldr	r2, [r7, #20]
 800cab8:	429a      	cmp	r2, r3
 800caba:	d20b      	bcs.n	800cad4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	681a      	ldr	r2, [r3, #0]
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	1ad2      	subs	r2, r2, r3
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f7ff ff9b 	bl	800ca04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cace:	2300      	movs	r3, #0
 800cad0:	61fb      	str	r3, [r7, #28]
 800cad2:	e004      	b.n	800cade <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	2200      	movs	r2, #0
 800cad8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cada:	2301      	movs	r3, #1
 800cadc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cade:	f000 fc69 	bl	800d3b4 <vPortExitCritical>

	return xReturn;
 800cae2:	69fb      	ldr	r3, [r7, #28]
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3720      	adds	r7, #32
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	20000398 	.word	0x20000398
 800caf0:	200003ac 	.word	0x200003ac

0800caf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800caf4:	b480      	push	{r7}
 800caf6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800caf8:	4b03      	ldr	r3, [pc, #12]	; (800cb08 <vTaskMissedYield+0x14>)
 800cafa:	2201      	movs	r2, #1
 800cafc:	601a      	str	r2, [r3, #0]
}
 800cafe:	bf00      	nop
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr
 800cb08:	200003a8 	.word	0x200003a8

0800cb0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b082      	sub	sp, #8
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cb14:	f000 f852 	bl	800cbbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cb18:	4b06      	ldr	r3, [pc, #24]	; (800cb34 <prvIdleTask+0x28>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d9f9      	bls.n	800cb14 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cb20:	4b05      	ldr	r3, [pc, #20]	; (800cb38 <prvIdleTask+0x2c>)
 800cb22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb26:	601a      	str	r2, [r3, #0]
 800cb28:	f3bf 8f4f 	dsb	sy
 800cb2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cb30:	e7f0      	b.n	800cb14 <prvIdleTask+0x8>
 800cb32:	bf00      	nop
 800cb34:	20000298 	.word	0x20000298
 800cb38:	e000ed04 	.word	0xe000ed04

0800cb3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb42:	2300      	movs	r3, #0
 800cb44:	607b      	str	r3, [r7, #4]
 800cb46:	e00c      	b.n	800cb62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	4613      	mov	r3, r2
 800cb4c:	009b      	lsls	r3, r3, #2
 800cb4e:	4413      	add	r3, r2
 800cb50:	009b      	lsls	r3, r3, #2
 800cb52:	4a12      	ldr	r2, [pc, #72]	; (800cb9c <prvInitialiseTaskLists+0x60>)
 800cb54:	4413      	add	r3, r2
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7fe fd13 	bl	800b582 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	607b      	str	r3, [r7, #4]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2b06      	cmp	r3, #6
 800cb66:	d9ef      	bls.n	800cb48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cb68:	480d      	ldr	r0, [pc, #52]	; (800cba0 <prvInitialiseTaskLists+0x64>)
 800cb6a:	f7fe fd0a 	bl	800b582 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cb6e:	480d      	ldr	r0, [pc, #52]	; (800cba4 <prvInitialiseTaskLists+0x68>)
 800cb70:	f7fe fd07 	bl	800b582 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cb74:	480c      	ldr	r0, [pc, #48]	; (800cba8 <prvInitialiseTaskLists+0x6c>)
 800cb76:	f7fe fd04 	bl	800b582 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cb7a:	480c      	ldr	r0, [pc, #48]	; (800cbac <prvInitialiseTaskLists+0x70>)
 800cb7c:	f7fe fd01 	bl	800b582 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cb80:	480b      	ldr	r0, [pc, #44]	; (800cbb0 <prvInitialiseTaskLists+0x74>)
 800cb82:	f7fe fcfe 	bl	800b582 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cb86:	4b0b      	ldr	r3, [pc, #44]	; (800cbb4 <prvInitialiseTaskLists+0x78>)
 800cb88:	4a05      	ldr	r2, [pc, #20]	; (800cba0 <prvInitialiseTaskLists+0x64>)
 800cb8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cb8c:	4b0a      	ldr	r3, [pc, #40]	; (800cbb8 <prvInitialiseTaskLists+0x7c>)
 800cb8e:	4a05      	ldr	r2, [pc, #20]	; (800cba4 <prvInitialiseTaskLists+0x68>)
 800cb90:	601a      	str	r2, [r3, #0]
}
 800cb92:	bf00      	nop
 800cb94:	3708      	adds	r7, #8
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	20000298 	.word	0x20000298
 800cba0:	20000324 	.word	0x20000324
 800cba4:	20000338 	.word	0x20000338
 800cba8:	20000354 	.word	0x20000354
 800cbac:	20000368 	.word	0x20000368
 800cbb0:	20000380 	.word	0x20000380
 800cbb4:	2000034c 	.word	0x2000034c
 800cbb8:	20000350 	.word	0x20000350

0800cbbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cbc2:	e019      	b.n	800cbf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cbc4:	f000 fbc6 	bl	800d354 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbc8:	4b10      	ldr	r3, [pc, #64]	; (800cc0c <prvCheckTasksWaitingTermination+0x50>)
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	68db      	ldr	r3, [r3, #12]
 800cbce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	3304      	adds	r3, #4
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f7fe fd5e 	bl	800b696 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cbda:	4b0d      	ldr	r3, [pc, #52]	; (800cc10 <prvCheckTasksWaitingTermination+0x54>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	3b01      	subs	r3, #1
 800cbe0:	4a0b      	ldr	r2, [pc, #44]	; (800cc10 <prvCheckTasksWaitingTermination+0x54>)
 800cbe2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cbe4:	4b0b      	ldr	r3, [pc, #44]	; (800cc14 <prvCheckTasksWaitingTermination+0x58>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	3b01      	subs	r3, #1
 800cbea:	4a0a      	ldr	r2, [pc, #40]	; (800cc14 <prvCheckTasksWaitingTermination+0x58>)
 800cbec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cbee:	f000 fbe1 	bl	800d3b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 f810 	bl	800cc18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cbf8:	4b06      	ldr	r3, [pc, #24]	; (800cc14 <prvCheckTasksWaitingTermination+0x58>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d1e1      	bne.n	800cbc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cc00:	bf00      	nop
 800cc02:	bf00      	nop
 800cc04:	3708      	adds	r7, #8
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	20000368 	.word	0x20000368
 800cc10:	20000394 	.word	0x20000394
 800cc14:	2000037c 	.word	0x2000037c

0800cc18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b084      	sub	sp, #16
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d108      	bne.n	800cc3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f000 fd7e 	bl	800d730 <vPortFree>
				vPortFree( pxTCB );
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 fd7b 	bl	800d730 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cc3a:	e018      	b.n	800cc6e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cc42:	2b01      	cmp	r3, #1
 800cc44:	d103      	bne.n	800cc4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 fd72 	bl	800d730 <vPortFree>
	}
 800cc4c:	e00f      	b.n	800cc6e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cc54:	2b02      	cmp	r3, #2
 800cc56:	d00a      	beq.n	800cc6e <prvDeleteTCB+0x56>
	__asm volatile
 800cc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc5c:	f383 8811 	msr	BASEPRI, r3
 800cc60:	f3bf 8f6f 	isb	sy
 800cc64:	f3bf 8f4f 	dsb	sy
 800cc68:	60fb      	str	r3, [r7, #12]
}
 800cc6a:	bf00      	nop
 800cc6c:	e7fe      	b.n	800cc6c <prvDeleteTCB+0x54>
	}
 800cc6e:	bf00      	nop
 800cc70:	3710      	adds	r7, #16
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
	...

0800cc78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b083      	sub	sp, #12
 800cc7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc7e:	4b0c      	ldr	r3, [pc, #48]	; (800ccb0 <prvResetNextTaskUnblockTime+0x38>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d104      	bne.n	800cc92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cc88:	4b0a      	ldr	r3, [pc, #40]	; (800ccb4 <prvResetNextTaskUnblockTime+0x3c>)
 800cc8a:	f04f 32ff 	mov.w	r2, #4294967295
 800cc8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cc90:	e008      	b.n	800cca4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc92:	4b07      	ldr	r3, [pc, #28]	; (800ccb0 <prvResetNextTaskUnblockTime+0x38>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	68db      	ldr	r3, [r3, #12]
 800cc9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	4a04      	ldr	r2, [pc, #16]	; (800ccb4 <prvResetNextTaskUnblockTime+0x3c>)
 800cca2:	6013      	str	r3, [r2, #0]
}
 800cca4:	bf00      	nop
 800cca6:	370c      	adds	r7, #12
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr
 800ccb0:	2000034c 	.word	0x2000034c
 800ccb4:	200003b4 	.word	0x200003b4

0800ccb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ccb8:	b480      	push	{r7}
 800ccba:	b083      	sub	sp, #12
 800ccbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ccbe:	4b0b      	ldr	r3, [pc, #44]	; (800ccec <xTaskGetSchedulerState+0x34>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d102      	bne.n	800cccc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	607b      	str	r3, [r7, #4]
 800ccca:	e008      	b.n	800ccde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cccc:	4b08      	ldr	r3, [pc, #32]	; (800ccf0 <xTaskGetSchedulerState+0x38>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d102      	bne.n	800ccda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ccd4:	2302      	movs	r3, #2
 800ccd6:	607b      	str	r3, [r7, #4]
 800ccd8:	e001      	b.n	800ccde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ccde:	687b      	ldr	r3, [r7, #4]
	}
 800cce0:	4618      	mov	r0, r3
 800cce2:	370c      	adds	r7, #12
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr
 800ccec:	200003a0 	.word	0x200003a0
 800ccf0:	200003bc 	.word	0x200003bc

0800ccf4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cd00:	2300      	movs	r3, #0
 800cd02:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d05e      	beq.n	800cdc8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd0e:	4b31      	ldr	r3, [pc, #196]	; (800cdd4 <xTaskPriorityInherit+0xe0>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d24e      	bcs.n	800cdb6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	699b      	ldr	r3, [r3, #24]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	db06      	blt.n	800cd2e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd20:	4b2c      	ldr	r3, [pc, #176]	; (800cdd4 <xTaskPriorityInherit+0xe0>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd26:	f1c3 0207 	rsb	r2, r3, #7
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	6959      	ldr	r1, [r3, #20]
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd36:	4613      	mov	r3, r2
 800cd38:	009b      	lsls	r3, r3, #2
 800cd3a:	4413      	add	r3, r2
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	4a26      	ldr	r2, [pc, #152]	; (800cdd8 <xTaskPriorityInherit+0xe4>)
 800cd40:	4413      	add	r3, r2
 800cd42:	4299      	cmp	r1, r3
 800cd44:	d12f      	bne.n	800cda6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	3304      	adds	r3, #4
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7fe fca3 	bl	800b696 <uxListRemove>
 800cd50:	4603      	mov	r3, r0
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d10a      	bne.n	800cd6c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	fa02 f303 	lsl.w	r3, r2, r3
 800cd60:	43da      	mvns	r2, r3
 800cd62:	4b1e      	ldr	r3, [pc, #120]	; (800cddc <xTaskPriorityInherit+0xe8>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	4013      	ands	r3, r2
 800cd68:	4a1c      	ldr	r2, [pc, #112]	; (800cddc <xTaskPriorityInherit+0xe8>)
 800cd6a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cd6c:	4b19      	ldr	r3, [pc, #100]	; (800cdd4 <xTaskPriorityInherit+0xe0>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	409a      	lsls	r2, r3
 800cd7e:	4b17      	ldr	r3, [pc, #92]	; (800cddc <xTaskPriorityInherit+0xe8>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4313      	orrs	r3, r2
 800cd84:	4a15      	ldr	r2, [pc, #84]	; (800cddc <xTaskPriorityInherit+0xe8>)
 800cd86:	6013      	str	r3, [r2, #0]
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd8c:	4613      	mov	r3, r2
 800cd8e:	009b      	lsls	r3, r3, #2
 800cd90:	4413      	add	r3, r2
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	4a10      	ldr	r2, [pc, #64]	; (800cdd8 <xTaskPriorityInherit+0xe4>)
 800cd96:	441a      	add	r2, r3
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	3304      	adds	r3, #4
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	4610      	mov	r0, r2
 800cda0:	f7fe fc1c 	bl	800b5dc <vListInsertEnd>
 800cda4:	e004      	b.n	800cdb0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cda6:	4b0b      	ldr	r3, [pc, #44]	; (800cdd4 <xTaskPriorityInherit+0xe0>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	60fb      	str	r3, [r7, #12]
 800cdb4:	e008      	b.n	800cdc8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cdba:	4b06      	ldr	r3, [pc, #24]	; (800cdd4 <xTaskPriorityInherit+0xe0>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d201      	bcs.n	800cdc8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
	}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	bf00      	nop
 800cdd4:	20000294 	.word	0x20000294
 800cdd8:	20000298 	.word	0x20000298
 800cddc:	2000039c 	.word	0x2000039c

0800cde0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b086      	sub	sp, #24
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cdec:	2300      	movs	r3, #0
 800cdee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d06e      	beq.n	800ced4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cdf6:	4b3a      	ldr	r3, [pc, #232]	; (800cee0 <xTaskPriorityDisinherit+0x100>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	693a      	ldr	r2, [r7, #16]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d00a      	beq.n	800ce16 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ce00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce04:	f383 8811 	msr	BASEPRI, r3
 800ce08:	f3bf 8f6f 	isb	sy
 800ce0c:	f3bf 8f4f 	dsb	sy
 800ce10:	60fb      	str	r3, [r7, #12]
}
 800ce12:	bf00      	nop
 800ce14:	e7fe      	b.n	800ce14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d10a      	bne.n	800ce34 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ce1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce22:	f383 8811 	msr	BASEPRI, r3
 800ce26:	f3bf 8f6f 	isb	sy
 800ce2a:	f3bf 8f4f 	dsb	sy
 800ce2e:	60bb      	str	r3, [r7, #8]
}
 800ce30:	bf00      	nop
 800ce32:	e7fe      	b.n	800ce32 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce38:	1e5a      	subs	r2, r3, #1
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d044      	beq.n	800ced4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d140      	bne.n	800ced4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	3304      	adds	r3, #4
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7fe fc1d 	bl	800b696 <uxListRemove>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d115      	bne.n	800ce8e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce66:	491f      	ldr	r1, [pc, #124]	; (800cee4 <xTaskPriorityDisinherit+0x104>)
 800ce68:	4613      	mov	r3, r2
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	4413      	add	r3, r2
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	440b      	add	r3, r1
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d10a      	bne.n	800ce8e <xTaskPriorityDisinherit+0xae>
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	fa02 f303 	lsl.w	r3, r2, r3
 800ce82:	43da      	mvns	r2, r3
 800ce84:	4b18      	ldr	r3, [pc, #96]	; (800cee8 <xTaskPriorityDisinherit+0x108>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4013      	ands	r3, r2
 800ce8a:	4a17      	ldr	r2, [pc, #92]	; (800cee8 <xTaskPriorityDisinherit+0x108>)
 800ce8c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce9a:	f1c3 0207 	rsb	r2, r3, #7
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea6:	2201      	movs	r2, #1
 800cea8:	409a      	lsls	r2, r3
 800ceaa:	4b0f      	ldr	r3, [pc, #60]	; (800cee8 <xTaskPriorityDisinherit+0x108>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	4a0d      	ldr	r2, [pc, #52]	; (800cee8 <xTaskPriorityDisinherit+0x108>)
 800ceb2:	6013      	str	r3, [r2, #0]
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceb8:	4613      	mov	r3, r2
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	4413      	add	r3, r2
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	4a08      	ldr	r2, [pc, #32]	; (800cee4 <xTaskPriorityDisinherit+0x104>)
 800cec2:	441a      	add	r2, r3
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	3304      	adds	r3, #4
 800cec8:	4619      	mov	r1, r3
 800ceca:	4610      	mov	r0, r2
 800cecc:	f7fe fb86 	bl	800b5dc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ced0:	2301      	movs	r3, #1
 800ced2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ced4:	697b      	ldr	r3, [r7, #20]
	}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3718      	adds	r7, #24
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}
 800cede:	bf00      	nop
 800cee0:	20000294 	.word	0x20000294
 800cee4:	20000298 	.word	0x20000298
 800cee8:	2000039c 	.word	0x2000039c

0800ceec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b088      	sub	sp, #32
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cefa:	2301      	movs	r3, #1
 800cefc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d077      	beq.n	800cff4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d10a      	bne.n	800cf22 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800cf0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf10:	f383 8811 	msr	BASEPRI, r3
 800cf14:	f3bf 8f6f 	isb	sy
 800cf18:	f3bf 8f4f 	dsb	sy
 800cf1c:	60fb      	str	r3, [r7, #12]
}
 800cf1e:	bf00      	nop
 800cf20:	e7fe      	b.n	800cf20 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cf22:	69bb      	ldr	r3, [r7, #24]
 800cf24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf26:	683a      	ldr	r2, [r7, #0]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d902      	bls.n	800cf32 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	61fb      	str	r3, [r7, #28]
 800cf30:	e002      	b.n	800cf38 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cf32:	69bb      	ldr	r3, [r7, #24]
 800cf34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf36:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf3c:	69fa      	ldr	r2, [r7, #28]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d058      	beq.n	800cff4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cf42:	69bb      	ldr	r3, [r7, #24]
 800cf44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf46:	697a      	ldr	r2, [r7, #20]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d153      	bne.n	800cff4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cf4c:	4b2b      	ldr	r3, [pc, #172]	; (800cffc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	69ba      	ldr	r2, [r7, #24]
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d10a      	bne.n	800cf6c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800cf56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf5a:	f383 8811 	msr	BASEPRI, r3
 800cf5e:	f3bf 8f6f 	isb	sy
 800cf62:	f3bf 8f4f 	dsb	sy
 800cf66:	60bb      	str	r3, [r7, #8]
}
 800cf68:	bf00      	nop
 800cf6a:	e7fe      	b.n	800cf6a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cf6c:	69bb      	ldr	r3, [r7, #24]
 800cf6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf70:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cf72:	69bb      	ldr	r3, [r7, #24]
 800cf74:	69fa      	ldr	r2, [r7, #28]
 800cf76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cf78:	69bb      	ldr	r3, [r7, #24]
 800cf7a:	699b      	ldr	r3, [r3, #24]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	db04      	blt.n	800cf8a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf80:	69fb      	ldr	r3, [r7, #28]
 800cf82:	f1c3 0207 	rsb	r2, r3, #7
 800cf86:	69bb      	ldr	r3, [r7, #24]
 800cf88:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cf8a:	69bb      	ldr	r3, [r7, #24]
 800cf8c:	6959      	ldr	r1, [r3, #20]
 800cf8e:	693a      	ldr	r2, [r7, #16]
 800cf90:	4613      	mov	r3, r2
 800cf92:	009b      	lsls	r3, r3, #2
 800cf94:	4413      	add	r3, r2
 800cf96:	009b      	lsls	r3, r3, #2
 800cf98:	4a19      	ldr	r2, [pc, #100]	; (800d000 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800cf9a:	4413      	add	r3, r2
 800cf9c:	4299      	cmp	r1, r3
 800cf9e:	d129      	bne.n	800cff4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cfa0:	69bb      	ldr	r3, [r7, #24]
 800cfa2:	3304      	adds	r3, #4
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7fe fb76 	bl	800b696 <uxListRemove>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d10a      	bne.n	800cfc6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800cfb0:	69bb      	ldr	r3, [r7, #24]
 800cfb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	fa02 f303 	lsl.w	r3, r2, r3
 800cfba:	43da      	mvns	r2, r3
 800cfbc:	4b11      	ldr	r3, [pc, #68]	; (800d004 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4013      	ands	r3, r2
 800cfc2:	4a10      	ldr	r2, [pc, #64]	; (800d004 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cfc4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cfc6:	69bb      	ldr	r3, [r7, #24]
 800cfc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfca:	2201      	movs	r2, #1
 800cfcc:	409a      	lsls	r2, r3
 800cfce:	4b0d      	ldr	r3, [pc, #52]	; (800d004 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	4313      	orrs	r3, r2
 800cfd4:	4a0b      	ldr	r2, [pc, #44]	; (800d004 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800cfd6:	6013      	str	r3, [r2, #0]
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfdc:	4613      	mov	r3, r2
 800cfde:	009b      	lsls	r3, r3, #2
 800cfe0:	4413      	add	r3, r2
 800cfe2:	009b      	lsls	r3, r3, #2
 800cfe4:	4a06      	ldr	r2, [pc, #24]	; (800d000 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800cfe6:	441a      	add	r2, r3
 800cfe8:	69bb      	ldr	r3, [r7, #24]
 800cfea:	3304      	adds	r3, #4
 800cfec:	4619      	mov	r1, r3
 800cfee:	4610      	mov	r0, r2
 800cff0:	f7fe faf4 	bl	800b5dc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cff4:	bf00      	nop
 800cff6:	3720      	adds	r7, #32
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}
 800cffc:	20000294 	.word	0x20000294
 800d000:	20000298 	.word	0x20000298
 800d004:	2000039c 	.word	0x2000039c

0800d008 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d008:	b480      	push	{r7}
 800d00a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d00c:	4b07      	ldr	r3, [pc, #28]	; (800d02c <pvTaskIncrementMutexHeldCount+0x24>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d004      	beq.n	800d01e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d014:	4b05      	ldr	r3, [pc, #20]	; (800d02c <pvTaskIncrementMutexHeldCount+0x24>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d01a:	3201      	adds	r2, #1
 800d01c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d01e:	4b03      	ldr	r3, [pc, #12]	; (800d02c <pvTaskIncrementMutexHeldCount+0x24>)
 800d020:	681b      	ldr	r3, [r3, #0]
	}
 800d022:	4618      	mov	r0, r3
 800d024:	46bd      	mov	sp, r7
 800d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02a:	4770      	bx	lr
 800d02c:	20000294 	.word	0x20000294

0800d030 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b084      	sub	sp, #16
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d03a:	4b29      	ldr	r3, [pc, #164]	; (800d0e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d040:	4b28      	ldr	r3, [pc, #160]	; (800d0e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	3304      	adds	r3, #4
 800d046:	4618      	mov	r0, r3
 800d048:	f7fe fb25 	bl	800b696 <uxListRemove>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d10b      	bne.n	800d06a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d052:	4b24      	ldr	r3, [pc, #144]	; (800d0e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d058:	2201      	movs	r2, #1
 800d05a:	fa02 f303 	lsl.w	r3, r2, r3
 800d05e:	43da      	mvns	r2, r3
 800d060:	4b21      	ldr	r3, [pc, #132]	; (800d0e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4013      	ands	r3, r2
 800d066:	4a20      	ldr	r2, [pc, #128]	; (800d0e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d068:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d070:	d10a      	bne.n	800d088 <prvAddCurrentTaskToDelayedList+0x58>
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d007      	beq.n	800d088 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d078:	4b1a      	ldr	r3, [pc, #104]	; (800d0e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	3304      	adds	r3, #4
 800d07e:	4619      	mov	r1, r3
 800d080:	481a      	ldr	r0, [pc, #104]	; (800d0ec <prvAddCurrentTaskToDelayedList+0xbc>)
 800d082:	f7fe faab 	bl	800b5dc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d086:	e026      	b.n	800d0d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d088:	68fa      	ldr	r2, [r7, #12]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	4413      	add	r3, r2
 800d08e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d090:	4b14      	ldr	r3, [pc, #80]	; (800d0e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	68ba      	ldr	r2, [r7, #8]
 800d096:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d098:	68ba      	ldr	r2, [r7, #8]
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d209      	bcs.n	800d0b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0a0:	4b13      	ldr	r3, [pc, #76]	; (800d0f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	4b0f      	ldr	r3, [pc, #60]	; (800d0e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	3304      	adds	r3, #4
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	4610      	mov	r0, r2
 800d0ae:	f7fe fab9 	bl	800b624 <vListInsert>
}
 800d0b2:	e010      	b.n	800d0d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0b4:	4b0f      	ldr	r3, [pc, #60]	; (800d0f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d0b6:	681a      	ldr	r2, [r3, #0]
 800d0b8:	4b0a      	ldr	r3, [pc, #40]	; (800d0e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	3304      	adds	r3, #4
 800d0be:	4619      	mov	r1, r3
 800d0c0:	4610      	mov	r0, r2
 800d0c2:	f7fe faaf 	bl	800b624 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d0c6:	4b0c      	ldr	r3, [pc, #48]	; (800d0f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	68ba      	ldr	r2, [r7, #8]
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d202      	bcs.n	800d0d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d0d0:	4a09      	ldr	r2, [pc, #36]	; (800d0f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	6013      	str	r3, [r2, #0]
}
 800d0d6:	bf00      	nop
 800d0d8:	3710      	adds	r7, #16
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
 800d0de:	bf00      	nop
 800d0e0:	20000398 	.word	0x20000398
 800d0e4:	20000294 	.word	0x20000294
 800d0e8:	2000039c 	.word	0x2000039c
 800d0ec:	20000380 	.word	0x20000380
 800d0f0:	20000350 	.word	0x20000350
 800d0f4:	2000034c 	.word	0x2000034c
 800d0f8:	200003b4 	.word	0x200003b4

0800d0fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b085      	sub	sp, #20
 800d100:	af00      	add	r7, sp, #0
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	60b9      	str	r1, [r7, #8]
 800d106:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	3b04      	subs	r3, #4
 800d10c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	3b04      	subs	r3, #4
 800d11a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	f023 0201 	bic.w	r2, r3, #1
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	3b04      	subs	r3, #4
 800d12a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d12c:	4a0c      	ldr	r2, [pc, #48]	; (800d160 <pxPortInitialiseStack+0x64>)
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	3b14      	subs	r3, #20
 800d136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d138:	687a      	ldr	r2, [r7, #4]
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	3b04      	subs	r3, #4
 800d142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f06f 0202 	mvn.w	r2, #2
 800d14a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	3b20      	subs	r3, #32
 800d150:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d152:	68fb      	ldr	r3, [r7, #12]
}
 800d154:	4618      	mov	r0, r3
 800d156:	3714      	adds	r7, #20
 800d158:	46bd      	mov	sp, r7
 800d15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15e:	4770      	bx	lr
 800d160:	0800d165 	.word	0x0800d165

0800d164 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d164:	b480      	push	{r7}
 800d166:	b085      	sub	sp, #20
 800d168:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d16a:	2300      	movs	r3, #0
 800d16c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d16e:	4b12      	ldr	r3, [pc, #72]	; (800d1b8 <prvTaskExitError+0x54>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d176:	d00a      	beq.n	800d18e <prvTaskExitError+0x2a>
	__asm volatile
 800d178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17c:	f383 8811 	msr	BASEPRI, r3
 800d180:	f3bf 8f6f 	isb	sy
 800d184:	f3bf 8f4f 	dsb	sy
 800d188:	60fb      	str	r3, [r7, #12]
}
 800d18a:	bf00      	nop
 800d18c:	e7fe      	b.n	800d18c <prvTaskExitError+0x28>
	__asm volatile
 800d18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d192:	f383 8811 	msr	BASEPRI, r3
 800d196:	f3bf 8f6f 	isb	sy
 800d19a:	f3bf 8f4f 	dsb	sy
 800d19e:	60bb      	str	r3, [r7, #8]
}
 800d1a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d1a2:	bf00      	nop
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d0fc      	beq.n	800d1a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d1aa:	bf00      	nop
 800d1ac:	bf00      	nop
 800d1ae:	3714      	adds	r7, #20
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr
 800d1b8:	20000010 	.word	0x20000010
 800d1bc:	00000000 	.word	0x00000000

0800d1c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d1c0:	4b07      	ldr	r3, [pc, #28]	; (800d1e0 <pxCurrentTCBConst2>)
 800d1c2:	6819      	ldr	r1, [r3, #0]
 800d1c4:	6808      	ldr	r0, [r1, #0]
 800d1c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ca:	f380 8809 	msr	PSP, r0
 800d1ce:	f3bf 8f6f 	isb	sy
 800d1d2:	f04f 0000 	mov.w	r0, #0
 800d1d6:	f380 8811 	msr	BASEPRI, r0
 800d1da:	4770      	bx	lr
 800d1dc:	f3af 8000 	nop.w

0800d1e0 <pxCurrentTCBConst2>:
 800d1e0:	20000294 	.word	0x20000294
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d1e4:	bf00      	nop
 800d1e6:	bf00      	nop

0800d1e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d1e8:	4808      	ldr	r0, [pc, #32]	; (800d20c <prvPortStartFirstTask+0x24>)
 800d1ea:	6800      	ldr	r0, [r0, #0]
 800d1ec:	6800      	ldr	r0, [r0, #0]
 800d1ee:	f380 8808 	msr	MSP, r0
 800d1f2:	f04f 0000 	mov.w	r0, #0
 800d1f6:	f380 8814 	msr	CONTROL, r0
 800d1fa:	b662      	cpsie	i
 800d1fc:	b661      	cpsie	f
 800d1fe:	f3bf 8f4f 	dsb	sy
 800d202:	f3bf 8f6f 	isb	sy
 800d206:	df00      	svc	0
 800d208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d20a:	bf00      	nop
 800d20c:	e000ed08 	.word	0xe000ed08

0800d210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b086      	sub	sp, #24
 800d214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d216:	4b46      	ldr	r3, [pc, #280]	; (800d330 <xPortStartScheduler+0x120>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	4a46      	ldr	r2, [pc, #280]	; (800d334 <xPortStartScheduler+0x124>)
 800d21c:	4293      	cmp	r3, r2
 800d21e:	d10a      	bne.n	800d236 <xPortStartScheduler+0x26>
	__asm volatile
 800d220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d224:	f383 8811 	msr	BASEPRI, r3
 800d228:	f3bf 8f6f 	isb	sy
 800d22c:	f3bf 8f4f 	dsb	sy
 800d230:	613b      	str	r3, [r7, #16]
}
 800d232:	bf00      	nop
 800d234:	e7fe      	b.n	800d234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d236:	4b3e      	ldr	r3, [pc, #248]	; (800d330 <xPortStartScheduler+0x120>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	4a3f      	ldr	r2, [pc, #252]	; (800d338 <xPortStartScheduler+0x128>)
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d10a      	bne.n	800d256 <xPortStartScheduler+0x46>
	__asm volatile
 800d240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d244:	f383 8811 	msr	BASEPRI, r3
 800d248:	f3bf 8f6f 	isb	sy
 800d24c:	f3bf 8f4f 	dsb	sy
 800d250:	60fb      	str	r3, [r7, #12]
}
 800d252:	bf00      	nop
 800d254:	e7fe      	b.n	800d254 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d256:	4b39      	ldr	r3, [pc, #228]	; (800d33c <xPortStartScheduler+0x12c>)
 800d258:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	781b      	ldrb	r3, [r3, #0]
 800d25e:	b2db      	uxtb	r3, r3
 800d260:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	22ff      	movs	r2, #255	; 0xff
 800d266:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	b2db      	uxtb	r3, r3
 800d26e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d270:	78fb      	ldrb	r3, [r7, #3]
 800d272:	b2db      	uxtb	r3, r3
 800d274:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d278:	b2da      	uxtb	r2, r3
 800d27a:	4b31      	ldr	r3, [pc, #196]	; (800d340 <xPortStartScheduler+0x130>)
 800d27c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d27e:	4b31      	ldr	r3, [pc, #196]	; (800d344 <xPortStartScheduler+0x134>)
 800d280:	2207      	movs	r2, #7
 800d282:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d284:	e009      	b.n	800d29a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d286:	4b2f      	ldr	r3, [pc, #188]	; (800d344 <xPortStartScheduler+0x134>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	3b01      	subs	r3, #1
 800d28c:	4a2d      	ldr	r2, [pc, #180]	; (800d344 <xPortStartScheduler+0x134>)
 800d28e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d290:	78fb      	ldrb	r3, [r7, #3]
 800d292:	b2db      	uxtb	r3, r3
 800d294:	005b      	lsls	r3, r3, #1
 800d296:	b2db      	uxtb	r3, r3
 800d298:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d29a:	78fb      	ldrb	r3, [r7, #3]
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2a2:	2b80      	cmp	r3, #128	; 0x80
 800d2a4:	d0ef      	beq.n	800d286 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d2a6:	4b27      	ldr	r3, [pc, #156]	; (800d344 <xPortStartScheduler+0x134>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f1c3 0307 	rsb	r3, r3, #7
 800d2ae:	2b04      	cmp	r3, #4
 800d2b0:	d00a      	beq.n	800d2c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b6:	f383 8811 	msr	BASEPRI, r3
 800d2ba:	f3bf 8f6f 	isb	sy
 800d2be:	f3bf 8f4f 	dsb	sy
 800d2c2:	60bb      	str	r3, [r7, #8]
}
 800d2c4:	bf00      	nop
 800d2c6:	e7fe      	b.n	800d2c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d2c8:	4b1e      	ldr	r3, [pc, #120]	; (800d344 <xPortStartScheduler+0x134>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	021b      	lsls	r3, r3, #8
 800d2ce:	4a1d      	ldr	r2, [pc, #116]	; (800d344 <xPortStartScheduler+0x134>)
 800d2d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d2d2:	4b1c      	ldr	r3, [pc, #112]	; (800d344 <xPortStartScheduler+0x134>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d2da:	4a1a      	ldr	r2, [pc, #104]	; (800d344 <xPortStartScheduler+0x134>)
 800d2dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	b2da      	uxtb	r2, r3
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d2e6:	4b18      	ldr	r3, [pc, #96]	; (800d348 <xPortStartScheduler+0x138>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4a17      	ldr	r2, [pc, #92]	; (800d348 <xPortStartScheduler+0x138>)
 800d2ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d2f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d2f2:	4b15      	ldr	r3, [pc, #84]	; (800d348 <xPortStartScheduler+0x138>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a14      	ldr	r2, [pc, #80]	; (800d348 <xPortStartScheduler+0x138>)
 800d2f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d2fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d2fe:	f000 f8dd 	bl	800d4bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d302:	4b12      	ldr	r3, [pc, #72]	; (800d34c <xPortStartScheduler+0x13c>)
 800d304:	2200      	movs	r2, #0
 800d306:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d308:	f000 f8fc 	bl	800d504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d30c:	4b10      	ldr	r3, [pc, #64]	; (800d350 <xPortStartScheduler+0x140>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4a0f      	ldr	r2, [pc, #60]	; (800d350 <xPortStartScheduler+0x140>)
 800d312:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d316:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d318:	f7ff ff66 	bl	800d1e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d31c:	f7ff fa90 	bl	800c840 <vTaskSwitchContext>
	prvTaskExitError();
 800d320:	f7ff ff20 	bl	800d164 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d324:	2300      	movs	r3, #0
}
 800d326:	4618      	mov	r0, r3
 800d328:	3718      	adds	r7, #24
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}
 800d32e:	bf00      	nop
 800d330:	e000ed00 	.word	0xe000ed00
 800d334:	410fc271 	.word	0x410fc271
 800d338:	410fc270 	.word	0x410fc270
 800d33c:	e000e400 	.word	0xe000e400
 800d340:	200003c0 	.word	0x200003c0
 800d344:	200003c4 	.word	0x200003c4
 800d348:	e000ed20 	.word	0xe000ed20
 800d34c:	20000010 	.word	0x20000010
 800d350:	e000ef34 	.word	0xe000ef34

0800d354 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d354:	b480      	push	{r7}
 800d356:	b083      	sub	sp, #12
 800d358:	af00      	add	r7, sp, #0
	__asm volatile
 800d35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35e:	f383 8811 	msr	BASEPRI, r3
 800d362:	f3bf 8f6f 	isb	sy
 800d366:	f3bf 8f4f 	dsb	sy
 800d36a:	607b      	str	r3, [r7, #4]
}
 800d36c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d36e:	4b0f      	ldr	r3, [pc, #60]	; (800d3ac <vPortEnterCritical+0x58>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	3301      	adds	r3, #1
 800d374:	4a0d      	ldr	r2, [pc, #52]	; (800d3ac <vPortEnterCritical+0x58>)
 800d376:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d378:	4b0c      	ldr	r3, [pc, #48]	; (800d3ac <vPortEnterCritical+0x58>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	d10f      	bne.n	800d3a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d380:	4b0b      	ldr	r3, [pc, #44]	; (800d3b0 <vPortEnterCritical+0x5c>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	b2db      	uxtb	r3, r3
 800d386:	2b00      	cmp	r3, #0
 800d388:	d00a      	beq.n	800d3a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d38e:	f383 8811 	msr	BASEPRI, r3
 800d392:	f3bf 8f6f 	isb	sy
 800d396:	f3bf 8f4f 	dsb	sy
 800d39a:	603b      	str	r3, [r7, #0]
}
 800d39c:	bf00      	nop
 800d39e:	e7fe      	b.n	800d39e <vPortEnterCritical+0x4a>
	}
}
 800d3a0:	bf00      	nop
 800d3a2:	370c      	adds	r7, #12
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr
 800d3ac:	20000010 	.word	0x20000010
 800d3b0:	e000ed04 	.word	0xe000ed04

0800d3b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b083      	sub	sp, #12
 800d3b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d3ba:	4b12      	ldr	r3, [pc, #72]	; (800d404 <vPortExitCritical+0x50>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d10a      	bne.n	800d3d8 <vPortExitCritical+0x24>
	__asm volatile
 800d3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c6:	f383 8811 	msr	BASEPRI, r3
 800d3ca:	f3bf 8f6f 	isb	sy
 800d3ce:	f3bf 8f4f 	dsb	sy
 800d3d2:	607b      	str	r3, [r7, #4]
}
 800d3d4:	bf00      	nop
 800d3d6:	e7fe      	b.n	800d3d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d3d8:	4b0a      	ldr	r3, [pc, #40]	; (800d404 <vPortExitCritical+0x50>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	3b01      	subs	r3, #1
 800d3de:	4a09      	ldr	r2, [pc, #36]	; (800d404 <vPortExitCritical+0x50>)
 800d3e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d3e2:	4b08      	ldr	r3, [pc, #32]	; (800d404 <vPortExitCritical+0x50>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d105      	bne.n	800d3f6 <vPortExitCritical+0x42>
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	f383 8811 	msr	BASEPRI, r3
}
 800d3f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d3f6:	bf00      	nop
 800d3f8:	370c      	adds	r7, #12
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d400:	4770      	bx	lr
 800d402:	bf00      	nop
 800d404:	20000010 	.word	0x20000010
	...

0800d410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d410:	f3ef 8009 	mrs	r0, PSP
 800d414:	f3bf 8f6f 	isb	sy
 800d418:	4b15      	ldr	r3, [pc, #84]	; (800d470 <pxCurrentTCBConst>)
 800d41a:	681a      	ldr	r2, [r3, #0]
 800d41c:	f01e 0f10 	tst.w	lr, #16
 800d420:	bf08      	it	eq
 800d422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d42a:	6010      	str	r0, [r2, #0]
 800d42c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d430:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d434:	f380 8811 	msr	BASEPRI, r0
 800d438:	f3bf 8f4f 	dsb	sy
 800d43c:	f3bf 8f6f 	isb	sy
 800d440:	f7ff f9fe 	bl	800c840 <vTaskSwitchContext>
 800d444:	f04f 0000 	mov.w	r0, #0
 800d448:	f380 8811 	msr	BASEPRI, r0
 800d44c:	bc09      	pop	{r0, r3}
 800d44e:	6819      	ldr	r1, [r3, #0]
 800d450:	6808      	ldr	r0, [r1, #0]
 800d452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d456:	f01e 0f10 	tst.w	lr, #16
 800d45a:	bf08      	it	eq
 800d45c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d460:	f380 8809 	msr	PSP, r0
 800d464:	f3bf 8f6f 	isb	sy
 800d468:	4770      	bx	lr
 800d46a:	bf00      	nop
 800d46c:	f3af 8000 	nop.w

0800d470 <pxCurrentTCBConst>:
 800d470:	20000294 	.word	0x20000294
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d474:	bf00      	nop
 800d476:	bf00      	nop

0800d478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0
	__asm volatile
 800d47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d482:	f383 8811 	msr	BASEPRI, r3
 800d486:	f3bf 8f6f 	isb	sy
 800d48a:	f3bf 8f4f 	dsb	sy
 800d48e:	607b      	str	r3, [r7, #4]
}
 800d490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d492:	f7ff f91d 	bl	800c6d0 <xTaskIncrementTick>
 800d496:	4603      	mov	r3, r0
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d003      	beq.n	800d4a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d49c:	4b06      	ldr	r3, [pc, #24]	; (800d4b8 <SysTick_Handler+0x40>)
 800d49e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4a2:	601a      	str	r2, [r3, #0]
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	f383 8811 	msr	BASEPRI, r3
}
 800d4ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d4b0:	bf00      	nop
 800d4b2:	3708      	adds	r7, #8
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}
 800d4b8:	e000ed04 	.word	0xe000ed04

0800d4bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d4bc:	b480      	push	{r7}
 800d4be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d4c0:	4b0b      	ldr	r3, [pc, #44]	; (800d4f0 <vPortSetupTimerInterrupt+0x34>)
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d4c6:	4b0b      	ldr	r3, [pc, #44]	; (800d4f4 <vPortSetupTimerInterrupt+0x38>)
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d4cc:	4b0a      	ldr	r3, [pc, #40]	; (800d4f8 <vPortSetupTimerInterrupt+0x3c>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4a0a      	ldr	r2, [pc, #40]	; (800d4fc <vPortSetupTimerInterrupt+0x40>)
 800d4d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d4d6:	099b      	lsrs	r3, r3, #6
 800d4d8:	4a09      	ldr	r2, [pc, #36]	; (800d500 <vPortSetupTimerInterrupt+0x44>)
 800d4da:	3b01      	subs	r3, #1
 800d4dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d4de:	4b04      	ldr	r3, [pc, #16]	; (800d4f0 <vPortSetupTimerInterrupt+0x34>)
 800d4e0:	2207      	movs	r2, #7
 800d4e2:	601a      	str	r2, [r3, #0]
}
 800d4e4:	bf00      	nop
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ec:	4770      	bx	lr
 800d4ee:	bf00      	nop
 800d4f0:	e000e010 	.word	0xe000e010
 800d4f4:	e000e018 	.word	0xe000e018
 800d4f8:	20000000 	.word	0x20000000
 800d4fc:	10624dd3 	.word	0x10624dd3
 800d500:	e000e014 	.word	0xe000e014

0800d504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d514 <vPortEnableVFP+0x10>
 800d508:	6801      	ldr	r1, [r0, #0]
 800d50a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d50e:	6001      	str	r1, [r0, #0]
 800d510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d512:	bf00      	nop
 800d514:	e000ed88 	.word	0xe000ed88

0800d518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d518:	b480      	push	{r7}
 800d51a:	b085      	sub	sp, #20
 800d51c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d51e:	f3ef 8305 	mrs	r3, IPSR
 800d522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2b0f      	cmp	r3, #15
 800d528:	d914      	bls.n	800d554 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d52a:	4a17      	ldr	r2, [pc, #92]	; (800d588 <vPortValidateInterruptPriority+0x70>)
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	4413      	add	r3, r2
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d534:	4b15      	ldr	r3, [pc, #84]	; (800d58c <vPortValidateInterruptPriority+0x74>)
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	7afa      	ldrb	r2, [r7, #11]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d20a      	bcs.n	800d554 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d542:	f383 8811 	msr	BASEPRI, r3
 800d546:	f3bf 8f6f 	isb	sy
 800d54a:	f3bf 8f4f 	dsb	sy
 800d54e:	607b      	str	r3, [r7, #4]
}
 800d550:	bf00      	nop
 800d552:	e7fe      	b.n	800d552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d554:	4b0e      	ldr	r3, [pc, #56]	; (800d590 <vPortValidateInterruptPriority+0x78>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d55c:	4b0d      	ldr	r3, [pc, #52]	; (800d594 <vPortValidateInterruptPriority+0x7c>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	429a      	cmp	r2, r3
 800d562:	d90a      	bls.n	800d57a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d568:	f383 8811 	msr	BASEPRI, r3
 800d56c:	f3bf 8f6f 	isb	sy
 800d570:	f3bf 8f4f 	dsb	sy
 800d574:	603b      	str	r3, [r7, #0]
}
 800d576:	bf00      	nop
 800d578:	e7fe      	b.n	800d578 <vPortValidateInterruptPriority+0x60>
	}
 800d57a:	bf00      	nop
 800d57c:	3714      	adds	r7, #20
 800d57e:	46bd      	mov	sp, r7
 800d580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d584:	4770      	bx	lr
 800d586:	bf00      	nop
 800d588:	e000e3f0 	.word	0xe000e3f0
 800d58c:	200003c0 	.word	0x200003c0
 800d590:	e000ed0c 	.word	0xe000ed0c
 800d594:	200003c4 	.word	0x200003c4

0800d598 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b08a      	sub	sp, #40	; 0x28
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d5a4:	f7fe ffea 	bl	800c57c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d5a8:	4b5b      	ldr	r3, [pc, #364]	; (800d718 <pvPortMalloc+0x180>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d101      	bne.n	800d5b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d5b0:	f000 f920 	bl	800d7f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d5b4:	4b59      	ldr	r3, [pc, #356]	; (800d71c <pvPortMalloc+0x184>)
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	4013      	ands	r3, r2
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	f040 8093 	bne.w	800d6e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d01d      	beq.n	800d604 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d5c8:	2208      	movs	r2, #8
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	4413      	add	r3, r2
 800d5ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f003 0307 	and.w	r3, r3, #7
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d014      	beq.n	800d604 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f023 0307 	bic.w	r3, r3, #7
 800d5e0:	3308      	adds	r3, #8
 800d5e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f003 0307 	and.w	r3, r3, #7
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d00a      	beq.n	800d604 <pvPortMalloc+0x6c>
	__asm volatile
 800d5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f2:	f383 8811 	msr	BASEPRI, r3
 800d5f6:	f3bf 8f6f 	isb	sy
 800d5fa:	f3bf 8f4f 	dsb	sy
 800d5fe:	617b      	str	r3, [r7, #20]
}
 800d600:	bf00      	nop
 800d602:	e7fe      	b.n	800d602 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d06e      	beq.n	800d6e8 <pvPortMalloc+0x150>
 800d60a:	4b45      	ldr	r3, [pc, #276]	; (800d720 <pvPortMalloc+0x188>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	687a      	ldr	r2, [r7, #4]
 800d610:	429a      	cmp	r2, r3
 800d612:	d869      	bhi.n	800d6e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d614:	4b43      	ldr	r3, [pc, #268]	; (800d724 <pvPortMalloc+0x18c>)
 800d616:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d618:	4b42      	ldr	r3, [pc, #264]	; (800d724 <pvPortMalloc+0x18c>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d61e:	e004      	b.n	800d62a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d622:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62c:	685b      	ldr	r3, [r3, #4]
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	429a      	cmp	r2, r3
 800d632:	d903      	bls.n	800d63c <pvPortMalloc+0xa4>
 800d634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d1f1      	bne.n	800d620 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d63c:	4b36      	ldr	r3, [pc, #216]	; (800d718 <pvPortMalloc+0x180>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d642:	429a      	cmp	r2, r3
 800d644:	d050      	beq.n	800d6e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d646:	6a3b      	ldr	r3, [r7, #32]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	2208      	movs	r2, #8
 800d64c:	4413      	add	r3, r2
 800d64e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d652:	681a      	ldr	r2, [r3, #0]
 800d654:	6a3b      	ldr	r3, [r7, #32]
 800d656:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65a:	685a      	ldr	r2, [r3, #4]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	1ad2      	subs	r2, r2, r3
 800d660:	2308      	movs	r3, #8
 800d662:	005b      	lsls	r3, r3, #1
 800d664:	429a      	cmp	r2, r3
 800d666:	d91f      	bls.n	800d6a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	4413      	add	r3, r2
 800d66e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d670:	69bb      	ldr	r3, [r7, #24]
 800d672:	f003 0307 	and.w	r3, r3, #7
 800d676:	2b00      	cmp	r3, #0
 800d678:	d00a      	beq.n	800d690 <pvPortMalloc+0xf8>
	__asm volatile
 800d67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d67e:	f383 8811 	msr	BASEPRI, r3
 800d682:	f3bf 8f6f 	isb	sy
 800d686:	f3bf 8f4f 	dsb	sy
 800d68a:	613b      	str	r3, [r7, #16]
}
 800d68c:	bf00      	nop
 800d68e:	e7fe      	b.n	800d68e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d692:	685a      	ldr	r2, [r3, #4]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	1ad2      	subs	r2, r2, r3
 800d698:	69bb      	ldr	r3, [r7, #24]
 800d69a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d6a2:	69b8      	ldr	r0, [r7, #24]
 800d6a4:	f000 f908 	bl	800d8b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d6a8:	4b1d      	ldr	r3, [pc, #116]	; (800d720 <pvPortMalloc+0x188>)
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	1ad3      	subs	r3, r2, r3
 800d6b2:	4a1b      	ldr	r2, [pc, #108]	; (800d720 <pvPortMalloc+0x188>)
 800d6b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d6b6:	4b1a      	ldr	r3, [pc, #104]	; (800d720 <pvPortMalloc+0x188>)
 800d6b8:	681a      	ldr	r2, [r3, #0]
 800d6ba:	4b1b      	ldr	r3, [pc, #108]	; (800d728 <pvPortMalloc+0x190>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d203      	bcs.n	800d6ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d6c2:	4b17      	ldr	r3, [pc, #92]	; (800d720 <pvPortMalloc+0x188>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	4a18      	ldr	r2, [pc, #96]	; (800d728 <pvPortMalloc+0x190>)
 800d6c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6cc:	685a      	ldr	r2, [r3, #4]
 800d6ce:	4b13      	ldr	r3, [pc, #76]	; (800d71c <pvPortMalloc+0x184>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	431a      	orrs	r2, r3
 800d6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6da:	2200      	movs	r2, #0
 800d6dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d6de:	4b13      	ldr	r3, [pc, #76]	; (800d72c <pvPortMalloc+0x194>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	4a11      	ldr	r2, [pc, #68]	; (800d72c <pvPortMalloc+0x194>)
 800d6e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d6e8:	f7fe ff56 	bl	800c598 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	f003 0307 	and.w	r3, r3, #7
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d00a      	beq.n	800d70c <pvPortMalloc+0x174>
	__asm volatile
 800d6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6fa:	f383 8811 	msr	BASEPRI, r3
 800d6fe:	f3bf 8f6f 	isb	sy
 800d702:	f3bf 8f4f 	dsb	sy
 800d706:	60fb      	str	r3, [r7, #12]
}
 800d708:	bf00      	nop
 800d70a:	e7fe      	b.n	800d70a <pvPortMalloc+0x172>
	return pvReturn;
 800d70c:	69fb      	ldr	r3, [r7, #28]
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3728      	adds	r7, #40	; 0x28
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	20003fd0 	.word	0x20003fd0
 800d71c:	20003fe4 	.word	0x20003fe4
 800d720:	20003fd4 	.word	0x20003fd4
 800d724:	20003fc8 	.word	0x20003fc8
 800d728:	20003fd8 	.word	0x20003fd8
 800d72c:	20003fdc 	.word	0x20003fdc

0800d730 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b086      	sub	sp, #24
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d04d      	beq.n	800d7de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d742:	2308      	movs	r3, #8
 800d744:	425b      	negs	r3, r3
 800d746:	697a      	ldr	r2, [r7, #20]
 800d748:	4413      	add	r3, r2
 800d74a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	685a      	ldr	r2, [r3, #4]
 800d754:	4b24      	ldr	r3, [pc, #144]	; (800d7e8 <vPortFree+0xb8>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4013      	ands	r3, r2
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d10a      	bne.n	800d774 <vPortFree+0x44>
	__asm volatile
 800d75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d762:	f383 8811 	msr	BASEPRI, r3
 800d766:	f3bf 8f6f 	isb	sy
 800d76a:	f3bf 8f4f 	dsb	sy
 800d76e:	60fb      	str	r3, [r7, #12]
}
 800d770:	bf00      	nop
 800d772:	e7fe      	b.n	800d772 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d00a      	beq.n	800d792 <vPortFree+0x62>
	__asm volatile
 800d77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d780:	f383 8811 	msr	BASEPRI, r3
 800d784:	f3bf 8f6f 	isb	sy
 800d788:	f3bf 8f4f 	dsb	sy
 800d78c:	60bb      	str	r3, [r7, #8]
}
 800d78e:	bf00      	nop
 800d790:	e7fe      	b.n	800d790 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	685a      	ldr	r2, [r3, #4]
 800d796:	4b14      	ldr	r3, [pc, #80]	; (800d7e8 <vPortFree+0xb8>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	4013      	ands	r3, r2
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d01e      	beq.n	800d7de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d11a      	bne.n	800d7de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	685a      	ldr	r2, [r3, #4]
 800d7ac:	4b0e      	ldr	r3, [pc, #56]	; (800d7e8 <vPortFree+0xb8>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	43db      	mvns	r3, r3
 800d7b2:	401a      	ands	r2, r3
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d7b8:	f7fe fee0 	bl	800c57c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	685a      	ldr	r2, [r3, #4]
 800d7c0:	4b0a      	ldr	r3, [pc, #40]	; (800d7ec <vPortFree+0xbc>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	4413      	add	r3, r2
 800d7c6:	4a09      	ldr	r2, [pc, #36]	; (800d7ec <vPortFree+0xbc>)
 800d7c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d7ca:	6938      	ldr	r0, [r7, #16]
 800d7cc:	f000 f874 	bl	800d8b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d7d0:	4b07      	ldr	r3, [pc, #28]	; (800d7f0 <vPortFree+0xc0>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	4a06      	ldr	r2, [pc, #24]	; (800d7f0 <vPortFree+0xc0>)
 800d7d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d7da:	f7fe fedd 	bl	800c598 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d7de:	bf00      	nop
 800d7e0:	3718      	adds	r7, #24
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}
 800d7e6:	bf00      	nop
 800d7e8:	20003fe4 	.word	0x20003fe4
 800d7ec:	20003fd4 	.word	0x20003fd4
 800d7f0:	20003fe0 	.word	0x20003fe0

0800d7f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b085      	sub	sp, #20
 800d7f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d7fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d7fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d800:	4b27      	ldr	r3, [pc, #156]	; (800d8a0 <prvHeapInit+0xac>)
 800d802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f003 0307 	and.w	r3, r3, #7
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d00c      	beq.n	800d828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	3307      	adds	r3, #7
 800d812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f023 0307 	bic.w	r3, r3, #7
 800d81a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d81c:	68ba      	ldr	r2, [r7, #8]
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	1ad3      	subs	r3, r2, r3
 800d822:	4a1f      	ldr	r2, [pc, #124]	; (800d8a0 <prvHeapInit+0xac>)
 800d824:	4413      	add	r3, r2
 800d826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d82c:	4a1d      	ldr	r2, [pc, #116]	; (800d8a4 <prvHeapInit+0xb0>)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d832:	4b1c      	ldr	r3, [pc, #112]	; (800d8a4 <prvHeapInit+0xb0>)
 800d834:	2200      	movs	r2, #0
 800d836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	68ba      	ldr	r2, [r7, #8]
 800d83c:	4413      	add	r3, r2
 800d83e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d840:	2208      	movs	r2, #8
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	1a9b      	subs	r3, r3, r2
 800d846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f023 0307 	bic.w	r3, r3, #7
 800d84e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	4a15      	ldr	r2, [pc, #84]	; (800d8a8 <prvHeapInit+0xb4>)
 800d854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d856:	4b14      	ldr	r3, [pc, #80]	; (800d8a8 <prvHeapInit+0xb4>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	2200      	movs	r2, #0
 800d85c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d85e:	4b12      	ldr	r3, [pc, #72]	; (800d8a8 <prvHeapInit+0xb4>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	2200      	movs	r2, #0
 800d864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	68fa      	ldr	r2, [r7, #12]
 800d86e:	1ad2      	subs	r2, r2, r3
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d874:	4b0c      	ldr	r3, [pc, #48]	; (800d8a8 <prvHeapInit+0xb4>)
 800d876:	681a      	ldr	r2, [r3, #0]
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	4a0a      	ldr	r2, [pc, #40]	; (800d8ac <prvHeapInit+0xb8>)
 800d882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	685b      	ldr	r3, [r3, #4]
 800d888:	4a09      	ldr	r2, [pc, #36]	; (800d8b0 <prvHeapInit+0xbc>)
 800d88a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d88c:	4b09      	ldr	r3, [pc, #36]	; (800d8b4 <prvHeapInit+0xc0>)
 800d88e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d892:	601a      	str	r2, [r3, #0]
}
 800d894:	bf00      	nop
 800d896:	3714      	adds	r7, #20
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr
 800d8a0:	200003c8 	.word	0x200003c8
 800d8a4:	20003fc8 	.word	0x20003fc8
 800d8a8:	20003fd0 	.word	0x20003fd0
 800d8ac:	20003fd8 	.word	0x20003fd8
 800d8b0:	20003fd4 	.word	0x20003fd4
 800d8b4:	20003fe4 	.word	0x20003fe4

0800d8b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d8c0:	4b28      	ldr	r3, [pc, #160]	; (800d964 <prvInsertBlockIntoFreeList+0xac>)
 800d8c2:	60fb      	str	r3, [r7, #12]
 800d8c4:	e002      	b.n	800d8cc <prvInsertBlockIntoFreeList+0x14>
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	60fb      	str	r3, [r7, #12]
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d8f7      	bhi.n	800d8c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	685b      	ldr	r3, [r3, #4]
 800d8de:	68ba      	ldr	r2, [r7, #8]
 800d8e0:	4413      	add	r3, r2
 800d8e2:	687a      	ldr	r2, [r7, #4]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d108      	bne.n	800d8fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	685a      	ldr	r2, [r3, #4]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	441a      	add	r2, r3
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	68ba      	ldr	r2, [r7, #8]
 800d904:	441a      	add	r2, r3
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d118      	bne.n	800d940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681a      	ldr	r2, [r3, #0]
 800d912:	4b15      	ldr	r3, [pc, #84]	; (800d968 <prvInsertBlockIntoFreeList+0xb0>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	429a      	cmp	r2, r3
 800d918:	d00d      	beq.n	800d936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	685a      	ldr	r2, [r3, #4]
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	441a      	add	r2, r3
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	681a      	ldr	r2, [r3, #0]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	601a      	str	r2, [r3, #0]
 800d934:	e008      	b.n	800d948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d936:	4b0c      	ldr	r3, [pc, #48]	; (800d968 <prvInsertBlockIntoFreeList+0xb0>)
 800d938:	681a      	ldr	r2, [r3, #0]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	601a      	str	r2, [r3, #0]
 800d93e:	e003      	b.n	800d948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681a      	ldr	r2, [r3, #0]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d948:	68fa      	ldr	r2, [r7, #12]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d002      	beq.n	800d956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d956:	bf00      	nop
 800d958:	3714      	adds	r7, #20
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr
 800d962:	bf00      	nop
 800d964:	20003fc8 	.word	0x20003fc8
 800d968:	20003fd0 	.word	0x20003fd0

0800d96c <__libc_init_array>:
 800d96c:	b570      	push	{r4, r5, r6, lr}
 800d96e:	4d0d      	ldr	r5, [pc, #52]	; (800d9a4 <__libc_init_array+0x38>)
 800d970:	4c0d      	ldr	r4, [pc, #52]	; (800d9a8 <__libc_init_array+0x3c>)
 800d972:	1b64      	subs	r4, r4, r5
 800d974:	10a4      	asrs	r4, r4, #2
 800d976:	2600      	movs	r6, #0
 800d978:	42a6      	cmp	r6, r4
 800d97a:	d109      	bne.n	800d990 <__libc_init_array+0x24>
 800d97c:	4d0b      	ldr	r5, [pc, #44]	; (800d9ac <__libc_init_array+0x40>)
 800d97e:	4c0c      	ldr	r4, [pc, #48]	; (800d9b0 <__libc_init_array+0x44>)
 800d980:	f000 f82e 	bl	800d9e0 <_init>
 800d984:	1b64      	subs	r4, r4, r5
 800d986:	10a4      	asrs	r4, r4, #2
 800d988:	2600      	movs	r6, #0
 800d98a:	42a6      	cmp	r6, r4
 800d98c:	d105      	bne.n	800d99a <__libc_init_array+0x2e>
 800d98e:	bd70      	pop	{r4, r5, r6, pc}
 800d990:	f855 3b04 	ldr.w	r3, [r5], #4
 800d994:	4798      	blx	r3
 800d996:	3601      	adds	r6, #1
 800d998:	e7ee      	b.n	800d978 <__libc_init_array+0xc>
 800d99a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d99e:	4798      	blx	r3
 800d9a0:	3601      	adds	r6, #1
 800d9a2:	e7f2      	b.n	800d98a <__libc_init_array+0x1e>
 800d9a4:	0800daf0 	.word	0x0800daf0
 800d9a8:	0800daf0 	.word	0x0800daf0
 800d9ac:	0800daf0 	.word	0x0800daf0
 800d9b0:	0800daf4 	.word	0x0800daf4

0800d9b4 <memcpy>:
 800d9b4:	440a      	add	r2, r1
 800d9b6:	4291      	cmp	r1, r2
 800d9b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d9bc:	d100      	bne.n	800d9c0 <memcpy+0xc>
 800d9be:	4770      	bx	lr
 800d9c0:	b510      	push	{r4, lr}
 800d9c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9ca:	4291      	cmp	r1, r2
 800d9cc:	d1f9      	bne.n	800d9c2 <memcpy+0xe>
 800d9ce:	bd10      	pop	{r4, pc}

0800d9d0 <memset>:
 800d9d0:	4402      	add	r2, r0
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d100      	bne.n	800d9da <memset+0xa>
 800d9d8:	4770      	bx	lr
 800d9da:	f803 1b01 	strb.w	r1, [r3], #1
 800d9de:	e7f9      	b.n	800d9d4 <memset+0x4>

0800d9e0 <_init>:
 800d9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9e2:	bf00      	nop
 800d9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9e6:	bc08      	pop	{r3}
 800d9e8:	469e      	mov	lr, r3
 800d9ea:	4770      	bx	lr

0800d9ec <_fini>:
 800d9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ee:	bf00      	nop
 800d9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9f2:	bc08      	pop	{r3}
 800d9f4:	469e      	mov	lr, r3
 800d9f6:	4770      	bx	lr
